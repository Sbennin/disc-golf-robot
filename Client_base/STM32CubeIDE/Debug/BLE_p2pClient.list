
BLE_p2pClient.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb2c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015c4  0800fc70  0800fc70  0001fc70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011234  08011234  00021234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801123c  0801123c  0002123c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011240  08011240  00021240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f4  20000008  08011244  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003c  200001fc  08011438  000301fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000238  08011474  00030238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001770  2000024c  08011485  0003024c  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  200019bc  08011485  000319bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030249  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000001bc  20030028  20030028  00040000  2**2
                  ALLOC
 14 MB_MEM2       00000883  200301e4  200301e4  00040000  2**2
                  ALLOC
 15 .comment      00000043  00000000  00000000  00030279  2**0
                  CONTENTS, READONLY
 16 .debug_info   0002f917  00000000  00000000  000302bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00006a3e  00000000  00000000  0005fbd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002a70  00000000  00000000  00066618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002066  00000000  00000000  00069088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002d11a  00000000  00000000  0006b0ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0003274c  00000000  00000000  00098208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000fbcf7  00000000  00000000  000ca954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000c0c4  00000000  00000000  001c664c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 000000c0  00000000  00000000  001d2710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	2000024c 	.word	0x2000024c
 800015c:	00000000 	.word	0x00000000
 8000160:	0800fc54 	.word	0x0800fc54

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000250 	.word	0x20000250
 800017c:	0800fc54 	.word	0x0800fc54

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b970 	b.w	8000e70 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9e08      	ldr	r6, [sp, #32]
 8000bae:	460d      	mov	r5, r1
 8000bb0:	4604      	mov	r4, r0
 8000bb2:	460f      	mov	r7, r1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d14a      	bne.n	8000c4e <__udivmoddi4+0xa6>
 8000bb8:	428a      	cmp	r2, r1
 8000bba:	4694      	mov	ip, r2
 8000bbc:	d965      	bls.n	8000c8a <__udivmoddi4+0xe2>
 8000bbe:	fab2 f382 	clz	r3, r2
 8000bc2:	b143      	cbz	r3, 8000bd6 <__udivmoddi4+0x2e>
 8000bc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bc8:	f1c3 0220 	rsb	r2, r3, #32
 8000bcc:	409f      	lsls	r7, r3
 8000bce:	fa20 f202 	lsr.w	r2, r0, r2
 8000bd2:	4317      	orrs	r7, r2
 8000bd4:	409c      	lsls	r4, r3
 8000bd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bda:	fa1f f58c 	uxth.w	r5, ip
 8000bde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000be2:	0c22      	lsrs	r2, r4, #16
 8000be4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000be8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bec:	fb01 f005 	mul.w	r0, r1, r5
 8000bf0:	4290      	cmp	r0, r2
 8000bf2:	d90a      	bls.n	8000c0a <__udivmoddi4+0x62>
 8000bf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bfc:	f080 811c 	bcs.w	8000e38 <__udivmoddi4+0x290>
 8000c00:	4290      	cmp	r0, r2
 8000c02:	f240 8119 	bls.w	8000e38 <__udivmoddi4+0x290>
 8000c06:	3902      	subs	r1, #2
 8000c08:	4462      	add	r2, ip
 8000c0a:	1a12      	subs	r2, r2, r0
 8000c0c:	b2a4      	uxth	r4, r4
 8000c0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c1a:	fb00 f505 	mul.w	r5, r0, r5
 8000c1e:	42a5      	cmp	r5, r4
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x90>
 8000c22:	eb1c 0404 	adds.w	r4, ip, r4
 8000c26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c2a:	f080 8107 	bcs.w	8000e3c <__udivmoddi4+0x294>
 8000c2e:	42a5      	cmp	r5, r4
 8000c30:	f240 8104 	bls.w	8000e3c <__udivmoddi4+0x294>
 8000c34:	4464      	add	r4, ip
 8000c36:	3802      	subs	r0, #2
 8000c38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	2100      	movs	r1, #0
 8000c40:	b11e      	cbz	r6, 8000c4a <__udivmoddi4+0xa2>
 8000c42:	40dc      	lsrs	r4, r3
 8000c44:	2300      	movs	r3, #0
 8000c46:	e9c6 4300 	strd	r4, r3, [r6]
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d908      	bls.n	8000c64 <__udivmoddi4+0xbc>
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	f000 80ed 	beq.w	8000e32 <__udivmoddi4+0x28a>
 8000c58:	2100      	movs	r1, #0
 8000c5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c5e:	4608      	mov	r0, r1
 8000c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c64:	fab3 f183 	clz	r1, r3
 8000c68:	2900      	cmp	r1, #0
 8000c6a:	d149      	bne.n	8000d00 <__udivmoddi4+0x158>
 8000c6c:	42ab      	cmp	r3, r5
 8000c6e:	d302      	bcc.n	8000c76 <__udivmoddi4+0xce>
 8000c70:	4282      	cmp	r2, r0
 8000c72:	f200 80f8 	bhi.w	8000e66 <__udivmoddi4+0x2be>
 8000c76:	1a84      	subs	r4, r0, r2
 8000c78:	eb65 0203 	sbc.w	r2, r5, r3
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	4617      	mov	r7, r2
 8000c80:	2e00      	cmp	r6, #0
 8000c82:	d0e2      	beq.n	8000c4a <__udivmoddi4+0xa2>
 8000c84:	e9c6 4700 	strd	r4, r7, [r6]
 8000c88:	e7df      	b.n	8000c4a <__udivmoddi4+0xa2>
 8000c8a:	b902      	cbnz	r2, 8000c8e <__udivmoddi4+0xe6>
 8000c8c:	deff      	udf	#255	; 0xff
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8090 	bne.w	8000db8 <__udivmoddi4+0x210>
 8000c98:	1a8a      	subs	r2, r1, r2
 8000c9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ca8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cac:	0c22      	lsrs	r2, r4, #16
 8000cae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cb2:	fb0e f005 	mul.w	r0, lr, r5
 8000cb6:	4290      	cmp	r0, r2
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x124>
 8000cba:	eb1c 0202 	adds.w	r2, ip, r2
 8000cbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x122>
 8000cc4:	4290      	cmp	r0, r2
 8000cc6:	f200 80cb 	bhi.w	8000e60 <__udivmoddi4+0x2b8>
 8000cca:	4645      	mov	r5, r8
 8000ccc:	1a12      	subs	r2, r2, r0
 8000cce:	b2a4      	uxth	r4, r4
 8000cd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000cd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cdc:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce0:	45a6      	cmp	lr, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x14e>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x14c>
 8000cee:	45a6      	cmp	lr, r4
 8000cf0:	f200 80bb 	bhi.w	8000e6a <__udivmoddi4+0x2c2>
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	eba4 040e 	sub.w	r4, r4, lr
 8000cfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cfe:	e79f      	b.n	8000c40 <__udivmoddi4+0x98>
 8000d00:	f1c1 0720 	rsb	r7, r1, #32
 8000d04:	408b      	lsls	r3, r1
 8000d06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d12:	fa20 f307 	lsr.w	r3, r0, r7
 8000d16:	40fd      	lsrs	r5, r7
 8000d18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d1c:	4323      	orrs	r3, r4
 8000d1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d22:	fa1f fe8c 	uxth.w	lr, ip
 8000d26:	fb09 5518 	mls	r5, r9, r8, r5
 8000d2a:	0c1c      	lsrs	r4, r3, #16
 8000d2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d30:	fb08 f50e 	mul.w	r5, r8, lr
 8000d34:	42a5      	cmp	r5, r4
 8000d36:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d3e:	d90b      	bls.n	8000d58 <__udivmoddi4+0x1b0>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d48:	f080 8088 	bcs.w	8000e5c <__udivmoddi4+0x2b4>
 8000d4c:	42a5      	cmp	r5, r4
 8000d4e:	f240 8085 	bls.w	8000e5c <__udivmoddi4+0x2b4>
 8000d52:	f1a8 0802 	sub.w	r8, r8, #2
 8000d56:	4464      	add	r4, ip
 8000d58:	1b64      	subs	r4, r4, r5
 8000d5a:	b29d      	uxth	r5, r3
 8000d5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d60:	fb09 4413 	mls	r4, r9, r3, r4
 8000d64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x1da>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d78:	d26c      	bcs.n	8000e54 <__udivmoddi4+0x2ac>
 8000d7a:	45a6      	cmp	lr, r4
 8000d7c:	d96a      	bls.n	8000e54 <__udivmoddi4+0x2ac>
 8000d7e:	3b02      	subs	r3, #2
 8000d80:	4464      	add	r4, ip
 8000d82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d86:	fba3 9502 	umull	r9, r5, r3, r2
 8000d8a:	eba4 040e 	sub.w	r4, r4, lr
 8000d8e:	42ac      	cmp	r4, r5
 8000d90:	46c8      	mov	r8, r9
 8000d92:	46ae      	mov	lr, r5
 8000d94:	d356      	bcc.n	8000e44 <__udivmoddi4+0x29c>
 8000d96:	d053      	beq.n	8000e40 <__udivmoddi4+0x298>
 8000d98:	b156      	cbz	r6, 8000db0 <__udivmoddi4+0x208>
 8000d9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000d9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000da2:	fa04 f707 	lsl.w	r7, r4, r7
 8000da6:	40ca      	lsrs	r2, r1
 8000da8:	40cc      	lsrs	r4, r1
 8000daa:	4317      	orrs	r7, r2
 8000dac:	e9c6 7400 	strd	r7, r4, [r6]
 8000db0:	4618      	mov	r0, r3
 8000db2:	2100      	movs	r1, #0
 8000db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db8:	f1c3 0120 	rsb	r1, r3, #32
 8000dbc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dc0:	fa20 f201 	lsr.w	r2, r0, r1
 8000dc4:	fa25 f101 	lsr.w	r1, r5, r1
 8000dc8:	409d      	lsls	r5, r3
 8000dca:	432a      	orrs	r2, r5
 8000dcc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ddc:	0c11      	lsrs	r1, r2, #16
 8000dde:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000de2:	fb00 f50e 	mul.w	r5, r0, lr
 8000de6:	428d      	cmp	r5, r1
 8000de8:	fa04 f403 	lsl.w	r4, r4, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x258>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000df6:	d22f      	bcs.n	8000e58 <__udivmoddi4+0x2b0>
 8000df8:	428d      	cmp	r5, r1
 8000dfa:	d92d      	bls.n	8000e58 <__udivmoddi4+0x2b0>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	1b49      	subs	r1, r1, r5
 8000e02:	b292      	uxth	r2, r2
 8000e04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e08:	fb07 1115 	mls	r1, r7, r5, r1
 8000e0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e10:	fb05 f10e 	mul.w	r1, r5, lr
 8000e14:	4291      	cmp	r1, r2
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x282>
 8000e18:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e20:	d216      	bcs.n	8000e50 <__udivmoddi4+0x2a8>
 8000e22:	4291      	cmp	r1, r2
 8000e24:	d914      	bls.n	8000e50 <__udivmoddi4+0x2a8>
 8000e26:	3d02      	subs	r5, #2
 8000e28:	4462      	add	r2, ip
 8000e2a:	1a52      	subs	r2, r2, r1
 8000e2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e30:	e738      	b.n	8000ca4 <__udivmoddi4+0xfc>
 8000e32:	4631      	mov	r1, r6
 8000e34:	4630      	mov	r0, r6
 8000e36:	e708      	b.n	8000c4a <__udivmoddi4+0xa2>
 8000e38:	4639      	mov	r1, r7
 8000e3a:	e6e6      	b.n	8000c0a <__udivmoddi4+0x62>
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	e6fb      	b.n	8000c38 <__udivmoddi4+0x90>
 8000e40:	4548      	cmp	r0, r9
 8000e42:	d2a9      	bcs.n	8000d98 <__udivmoddi4+0x1f0>
 8000e44:	ebb9 0802 	subs.w	r8, r9, r2
 8000e48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	e7a3      	b.n	8000d98 <__udivmoddi4+0x1f0>
 8000e50:	4645      	mov	r5, r8
 8000e52:	e7ea      	b.n	8000e2a <__udivmoddi4+0x282>
 8000e54:	462b      	mov	r3, r5
 8000e56:	e794      	b.n	8000d82 <__udivmoddi4+0x1da>
 8000e58:	4640      	mov	r0, r8
 8000e5a:	e7d1      	b.n	8000e00 <__udivmoddi4+0x258>
 8000e5c:	46d0      	mov	r8, sl
 8000e5e:	e77b      	b.n	8000d58 <__udivmoddi4+0x1b0>
 8000e60:	3d02      	subs	r5, #2
 8000e62:	4462      	add	r2, ip
 8000e64:	e732      	b.n	8000ccc <__udivmoddi4+0x124>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e70a      	b.n	8000c80 <__udivmoddi4+0xd8>
 8000e6a:	4464      	add	r4, ip
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	e742      	b.n	8000cf6 <__udivmoddi4+0x14e>

08000e70 <__aeabi_idiv0>:
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <LL_EXTI_EnableIT_32_63+0x24>)
 8000e7e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000e82:	4905      	ldr	r1, [pc, #20]	; (8000e98 <LL_EXTI_EnableIT_32_63+0x24>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	58000800 	.word	0x58000800

08000e9c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
}
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b085      	sub	sp, #20
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eda:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000ede:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eee:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000f0a:	f004 f843 	bl	8004f94 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000f0e:	f004 f847 	bl	8004fa0 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000f12:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000f16:	f7ff ffad 	bl	8000e74 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000f1a:	f00a f9df 	bl	800b2dc <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000f1e:	f000 f821 	bl	8000f64 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000f22:	f000 f8c1 	bl	80010a8 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000f26:	bf00      	nop
}
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000f2c:	b5b0      	push	{r4, r5, r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <APPD_EnableCPU2+0x34>)
 8000f34:	1d3c      	adds	r4, r7, #4
 8000f36:	461d      	mov	r5, r3
 8000f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f40:	c403      	stmia	r4!, {r0, r1}
 8000f42:	8022      	strh	r2, [r4, #0]
 8000f44:	3402      	adds	r4, #2
 8000f46:	0c13      	lsrs	r3, r2, #16
 8000f48:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000f4a:	f00b fe0f 	bl	800cb6c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	4618      	mov	r0, r3
 8000f52:	f00a fc3c 	bl	800b7ce <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000f56:	bf00      	nop
}
 8000f58:	3720      	adds	r7, #32
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	0800fc70 	.word	0x0800fc70

08000f64 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	77fb      	strb	r3, [r7, #31]
 8000f88:	e036      	b.n	8000ff8 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000f8a:	7ffb      	ldrb	r3, [r7, #31]
 8000f8c:	4a43      	ldr	r2, [pc, #268]	; (800109c <APPD_SetCPU2GpioConfig+0x138>)
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	4413      	add	r3, r2
 8000f92:	799b      	ldrb	r3, [r3, #6]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d02c      	beq.n	8000ff2 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000f98:	7ffb      	ldrb	r3, [r7, #31]
 8000f9a:	4a40      	ldr	r2, [pc, #256]	; (800109c <APPD_SetCPU2GpioConfig+0x138>)
 8000f9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000fa0:	4a3f      	ldr	r2, [pc, #252]	; (80010a0 <APPD_SetCPU2GpioConfig+0x13c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d01b      	beq.n	8000fde <APPD_SetCPU2GpioConfig+0x7a>
 8000fa6:	4a3e      	ldr	r2, [pc, #248]	; (80010a0 <APPD_SetCPU2GpioConfig+0x13c>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d821      	bhi.n	8000ff0 <APPD_SetCPU2GpioConfig+0x8c>
 8000fac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fb0:	d003      	beq.n	8000fba <APPD_SetCPU2GpioConfig+0x56>
 8000fb2:	4a3c      	ldr	r2, [pc, #240]	; (80010a4 <APPD_SetCPU2GpioConfig+0x140>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d009      	beq.n	8000fcc <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000fb8:	e01a      	b.n	8000ff0 <APPD_SetCPU2GpioConfig+0x8c>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000fba:	7ffb      	ldrb	r3, [r7, #31]
 8000fbc:	4a37      	ldr	r2, [pc, #220]	; (800109c <APPD_SetCPU2GpioConfig+0x138>)
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	4413      	add	r3, r2
 8000fc2:	889a      	ldrh	r2, [r3, #4]
 8000fc4:	8bbb      	ldrh	r3, [r7, #28]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	83bb      	strh	r3, [r7, #28]
          break;
 8000fca:	e012      	b.n	8000ff2 <APPD_SetCPU2GpioConfig+0x8e>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000fcc:	7ffb      	ldrb	r3, [r7, #31]
 8000fce:	4a33      	ldr	r2, [pc, #204]	; (800109c <APPD_SetCPU2GpioConfig+0x138>)
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	4413      	add	r3, r2
 8000fd4:	889a      	ldrh	r2, [r3, #4]
 8000fd6:	8b7b      	ldrh	r3, [r7, #26]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	837b      	strh	r3, [r7, #26]
          break;
 8000fdc:	e009      	b.n	8000ff2 <APPD_SetCPU2GpioConfig+0x8e>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000fde:	7ffb      	ldrb	r3, [r7, #31]
 8000fe0:	4a2e      	ldr	r2, [pc, #184]	; (800109c <APPD_SetCPU2GpioConfig+0x138>)
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	889a      	ldrh	r2, [r3, #4]
 8000fe8:	8b3b      	ldrh	r3, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	833b      	strh	r3, [r7, #24]
          break;
 8000fee:	e000      	b.n	8000ff2 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000ff0:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000ff2:	7ffb      	ldrb	r3, [r7, #31]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	77fb      	strb	r3, [r7, #31]
 8000ff8:	7ffb      	ldrb	r3, [r7, #31]
 8000ffa:	2b25      	cmp	r3, #37	; 0x25
 8000ffc:	d9c5      	bls.n	8000f8a <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 800100a:	8bbb      	ldrh	r3, [r7, #28]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d014      	beq.n	800103a <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8001010:	8bbb      	ldrh	r3, [r7, #28]
 8001012:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	2001      	movs	r0, #1
 8001016:	f7ff ff41 	bl	8000e9c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 800101a:	2001      	movs	r0, #1
 800101c:	f7ff ff57 	bl	8000ece <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	4619      	mov	r1, r3
 8001024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001028:	f004 fcee 	bl	8005a08 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 800102c:	8bbb      	ldrh	r3, [r7, #28]
 800102e:	2200      	movs	r2, #0
 8001030:	4619      	mov	r1, r3
 8001032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001036:	f004 fe57 	bl	8005ce8 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 800103a:	8b7b      	ldrh	r3, [r7, #26]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d012      	beq.n	8001066 <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8001040:	8b7b      	ldrh	r3, [r7, #26]
 8001042:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	2002      	movs	r0, #2
 8001046:	f7ff ff29 	bl	8000e9c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 800104a:	2002      	movs	r0, #2
 800104c:	f7ff ff3f 	bl	8000ece <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	4619      	mov	r1, r3
 8001054:	4813      	ldr	r0, [pc, #76]	; (80010a4 <APPD_SetCPU2GpioConfig+0x140>)
 8001056:	f004 fcd7 	bl	8005a08 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 800105a:	8b7b      	ldrh	r3, [r7, #26]
 800105c:	2200      	movs	r2, #0
 800105e:	4619      	mov	r1, r3
 8001060:	4810      	ldr	r0, [pc, #64]	; (80010a4 <APPD_SetCPU2GpioConfig+0x140>)
 8001062:	f004 fe41 	bl	8005ce8 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8001066:	8b3b      	ldrh	r3, [r7, #24]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d013      	beq.n	8001094 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 800106c:	8b3b      	ldrh	r3, [r7, #24]
 800106e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001070:	2004      	movs	r0, #4
 8001072:	f7ff ff13 	bl	8000e9c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8001076:	2004      	movs	r0, #4
 8001078:	f7ff ff29 	bl	8000ece <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	4619      	mov	r1, r3
 8001080:	4807      	ldr	r0, [pc, #28]	; (80010a0 <APPD_SetCPU2GpioConfig+0x13c>)
 8001082:	f004 fcc1 	bl	8005a08 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8001086:	8b3b      	ldrh	r3, [r7, #24]
 8001088:	2200      	movs	r2, #0
 800108a:	4619      	mov	r1, r3
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <APPD_SetCPU2GpioConfig+0x13c>)
 800108e:	f004 fe2b 	bl	8005ce8 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8001092:	bf00      	nop
 8001094:	bf00      	nop
}
 8001096:	3720      	adds	r7, #32
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	08010c80 	.word	0x08010c80
 80010a0:	48000800 	.word	0x48000800
 80010a4:	48000400 	.word	0x48000400

080010a8 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80010ac:	bf00      	nop
}
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	af00      	add	r7, sp, #0
#endif
  }
  else if (CFG_DEBUG_TRACE_UART == hw_uart1)
  {
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 80010ba:	f001 fceb 	bl	8002a94 <MX_USART1_UART_Init>
#endif
  }
#endif

/* USER CODE END DbgOutputInit */
  return;
 80010be:	bf00      	nop
}
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	460b      	mov	r3, r1
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80010d0:	897a      	ldrh	r2, [r7, #10]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68f9      	ldr	r1, [r7, #12]
 80010d6:	2000      	movs	r0, #0
 80010d8:	f001 fb68 	bl	80027ac <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 80010dc:	bf00      	nop
}
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <LL_C2_PWR_SetPowerMode+0x28>)
 80010ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010f2:	f023 0207 	bic.w	r2, r3, #7
 80010f6:	4905      	ldr	r1, [pc, #20]	; (800110c <LL_C2_PWR_SetPowerMode+0x28>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	58000400 	.word	0x58000400

08001110 <LL_EXTI_EnableIT_32_63>:
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <LL_EXTI_EnableIT_32_63+0x24>)
 800111a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800111e:	4905      	ldr	r1, [pc, #20]	; (8001134 <LL_EXTI_EnableIT_32_63+0x24>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4313      	orrs	r3, r2
 8001124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	58000800 	.word	0x58000800

08001138 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001144:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001146:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800114a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800114e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001152:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800115e:	4313      	orrs	r3, r2
 8001160:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	cafecafe 	.word	0xcafecafe

08001174 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800117c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4313      	orrs	r3, r2
 800118e:	608b      	str	r3, [r1, #8]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80011a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80011c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80011e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80011f4:	d101      	bne.n	80011fa <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800120a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800120e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800121a:	d101      	bne.n	8001220 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <LL_AHB3_GRP1_EnableClock>:
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001238:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800123a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4313      	orrs	r3, r2
 8001242:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001248:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4013      	ands	r3, r2
 800124e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001250:	68fb      	ldr	r3, [r7, #12]
}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <LL_DBGMCU_GetDeviceID+0x18>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e0042000 	.word	0xe0042000

0800127c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <LL_DBGMCU_GetRevisionID+0x18>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	0c1b      	lsrs	r3, r3, #16
 8001286:	b29b      	uxth	r3, r3
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e0042000 	.word	0xe0042000

08001298 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	041b      	lsls	r3, r3, #16
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	605a      	str	r2, [r3, #4]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	431a      	orrs	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	605a      	str	r2, [r3, #4]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	695a      	ldr	r2, [r3, #20]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	041b      	lsls	r3, r3, #16
 80012f0:	431a      	orrs	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	615a      	str	r2, [r3, #20]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	695a      	ldr	r2, [r3, #20]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	615a      	str	r2, [r3, #20]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	609a      	str	r2, [r3, #8]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	619a      	str	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <LL_LPM_EnableSleep+0x1c>)
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <LL_LPM_EnableSleep+0x1c>)
 8001366:	f023 0304 	bic.w	r3, r3, #4
 800136a:	6113      	str	r3, [r2, #16]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	22ff      	movs	r2, #255	; 0xff
 8001388:	625a      	str	r2, [r3, #36]	; 0x24
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	22ca      	movs	r2, #202	; 0xca
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2253      	movs	r2, #83	; 0x53
 80013a8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f023 0207 	bic.w	r2, r3, #7
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	609a      	str	r2, [r3, #8]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <MX_APPE_Config+0x18>)
 80013e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e6:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80013e8:	f000 f830 	bl	800144c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80013ec:	f000 f870 	bl	80014d0 <Config_HSE>

  return;
 80013f0:	bf00      	nop
}
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	58004000 	.word	0x58004000

080013f8 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80013fc:	f000 f87c 	bl	80014f8 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001400:	f000 f894 	bl	800152c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001404:	4909      	ldr	r1, [pc, #36]	; (800142c <MX_APPE_Init+0x34>)
 8001406:	2000      	movs	r0, #0
 8001408:	f000 ff40 	bl	800228c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 800140c:	f7ff fd7b 	bl	8000f06 <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001410:	2101      	movs	r1, #1
 8001412:	2001      	movs	r0, #1
 8001414:	f00b fc48 	bl	800cca8 <UTIL_LPM_SetOffMode>

  Led_Init();
 8001418:	f000 f9ea 	bl	80017f0 <Led_Init>

  Button_Init();
 800141c:	f000 f9f8 	bl	8001810 <Button_Init>
  
  RxUART_Init();
 8001420:	f000 fa88 	bl	8001934 <RxUART_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001424:	f000 f890 	bl	8001548 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001428:	bf00      	nop
}
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000648 	.word	0x20000648

08001430 <Init_Smps>:

void Init_Smps(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001434:	bf00      	nop
}
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <Init_Exti>:

void Init_Exti(void)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001442:	2050      	movs	r0, #80	; 0x50
 8001444:	f7ff fe64 	bl	8001110 <LL_EXTI_EnableIT_32_63>

  return;
 8001448:	bf00      	nop
}
 800144a:	bd80      	pop	{r7, pc}

0800144c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8001450:	f000 f804 	bl	800145c <Reset_BackupDomain>

  Reset_IPCC();
 8001454:	f000 f81a 	bl	800148c <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001458:	bf00      	nop
}
 800145a:	bd80      	pop	{r7, pc}

0800145c <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001460:	f7ff febe 	bl	80011e0 <LL_RCC_IsActiveFlag_PINRST>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00d      	beq.n	8001486 <Reset_BackupDomain+0x2a>
 800146a:	f7ff fecc 	bl	8001206 <LL_RCC_IsActiveFlag_SFTRST>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d108      	bne.n	8001486 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001474:	f004 fd12 	bl	8005e9c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8001478:	f004 fd10 	bl	8005e9c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 800147c:	f7ff fe8e 	bl	800119c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001480:	f7ff fe9d 	bl	80011be <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001484:	bf00      	nop
 8001486:	bf00      	nop
}
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <Reset_IPCC>:

static void Reset_IPCC(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001490:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001494:	f7ff feca 	bl	800122c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8001498:	213f      	movs	r1, #63	; 0x3f
 800149a:	480c      	ldr	r0, [pc, #48]	; (80014cc <Reset_IPCC+0x40>)
 800149c:	f7ff ff42 	bl	8001324 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80014a0:	213f      	movs	r1, #63	; 0x3f
 80014a2:	480a      	ldr	r0, [pc, #40]	; (80014cc <Reset_IPCC+0x40>)
 80014a4:	f7ff ff4c 	bl	8001340 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80014a8:	213f      	movs	r1, #63	; 0x3f
 80014aa:	4808      	ldr	r0, [pc, #32]	; (80014cc <Reset_IPCC+0x40>)
 80014ac:	f7ff fef4 	bl	8001298 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80014b0:	213f      	movs	r1, #63	; 0x3f
 80014b2:	4806      	ldr	r0, [pc, #24]	; (80014cc <Reset_IPCC+0x40>)
 80014b4:	f7ff ff13 	bl	80012de <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80014b8:	213f      	movs	r1, #63	; 0x3f
 80014ba:	4804      	ldr	r0, [pc, #16]	; (80014cc <Reset_IPCC+0x40>)
 80014bc:	f7ff fefe 	bl	80012bc <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80014c0:	213f      	movs	r1, #63	; 0x3f
 80014c2:	4802      	ldr	r0, [pc, #8]	; (80014cc <Reset_IPCC+0x40>)
 80014c4:	f7ff ff1d 	bl	8001302 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80014c8:	bf00      	nop
}
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	58000c00 	.word	0x58000c00

080014d0 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f00a f93a 	bl	800b750 <OTP_Read>
 80014dc:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	799b      	ldrb	r3, [r3, #6]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fe25 	bl	8001138 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80014ee:	bf00      	nop
 80014f0:	bf00      	nop
}
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <System_Init>:

static void System_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  Init_Smps();
 80014fc:	f7ff ff98 	bl	8001430 <Init_Smps>

  Init_Exti();
 8001500:	f7ff ff9d 	bl	800143e <Init_Exti>

  Init_Rtc();
 8001504:	f000 f802 	bl	800150c <Init_Rtc>

  return;
 8001508:	bf00      	nop
}
 800150a:	bd80      	pop	{r7, pc}

0800150c <Init_Rtc>:

static void Init_Rtc(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001510:	4805      	ldr	r0, [pc, #20]	; (8001528 <Init_Rtc+0x1c>)
 8001512:	f7ff ff40 	bl	8001396 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001516:	2100      	movs	r1, #0
 8001518:	4803      	ldr	r0, [pc, #12]	; (8001528 <Init_Rtc+0x1c>)
 800151a:	f7ff ff4c 	bl	80013b6 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800151e:	4802      	ldr	r0, [pc, #8]	; (8001528 <Init_Rtc+0x1c>)
 8001520:	f7ff ff2c 	bl	800137c <LL_RTC_EnableWriteProtection>

  return;
 8001524:	bf00      	nop
}
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40002800 	.word	0x40002800

0800152c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001530:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001534:	f7ff fe1e 	bl	8001174 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001538:	f00b fba4 	bl	800cc84 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800153c:	2004      	movs	r0, #4
 800153e:	f7ff fdd1 	bl	80010e4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001542:	bf00      	nop
}
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800154e:	f00b f957 	bl	800c800 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001552:	4a11      	ldr	r2, [pc, #68]	; (8001598 <appe_Tl_Init+0x50>)
 8001554:	2100      	movs	r1, #0
 8001556:	f44f 7080 	mov.w	r0, #256	; 0x100
 800155a:	f00b fcd1 	bl	800cf00 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <appe_Tl_Init+0x54>)
 8001560:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001562:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <appe_Tl_Init+0x58>)
 8001564:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001566:	463b      	mov	r3, r7
 8001568:	4619      	mov	r1, r3
 800156a:	480e      	ldr	r0, [pc, #56]	; (80015a4 <appe_Tl_Init+0x5c>)
 800156c:	f00a fa0a 	bl	800b984 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001570:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <appe_Tl_Init+0x60>)
 8001572:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <appe_Tl_Init+0x64>)
 8001576:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001578:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <appe_Tl_Init+0x68>)
 800157a:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800157c:	f240 533c 	movw	r3, #1340	; 0x53c
 8001580:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001582:	f107 0308 	add.w	r3, r7, #8
 8001586:	4618      	mov	r0, r3
 8001588:	f00b fa7c 	bl	800ca84 <TL_MM_Init>

  TL_Enable();
 800158c:	f00b f932 	bl	800c7f4 <TL_Enable>

  return;
 8001590:	bf00      	nop
}
 8001592:	3720      	adds	r7, #32
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	0800b9bd 	.word	0x0800b9bd
 800159c:	20030734 	.word	0x20030734
 80015a0:	080015b5 	.word	0x080015b5
 80015a4:	080015cd 	.word	0x080015cd
 80015a8:	2003094c 	.word	0x2003094c
 80015ac:	20030840 	.word	0x20030840
 80015b0:	200301f8 	.word	0x200301f8

080015b4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80015be:	bf00      	nop
}
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	330b      	adds	r3, #11
 80015da:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80015e6:	2b07      	cmp	r3, #7
 80015e8:	d860      	bhi.n	80016ac <APPE_SysUserEvtRx+0xe0>
 80015ea:	a201      	add	r2, pc, #4	; (adr r2, 80015f0 <APPE_SysUserEvtRx+0x24>)
 80015ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f0:	08001611 	.word	0x08001611
 80015f4:	08001653 	.word	0x08001653
 80015f8:	08001661 	.word	0x08001661
 80015fc:	080016ad 	.word	0x080016ad
 8001600:	0800167d 	.word	0x0800167d
 8001604:	0800168d 	.word	0x0800168d
 8001608:	08001695 	.word	0x08001695
 800160c:	080016a5 	.word	0x080016a5
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	4618      	mov	r0, r3
 8001616:	f00a f907 	bl	800b828 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 800161a:	7b3b      	ldrb	r3, [r7, #12]
 800161c:	4619      	mov	r1, r3
 800161e:	7b7b      	ldrb	r3, [r7, #13]
 8001620:	461a      	mov	r2, r3
 8001622:	7bbb      	ldrb	r3, [r7, #14]
 8001624:	4824      	ldr	r0, [pc, #144]	; (80016b8 <APPE_SysUserEvtRx+0xec>)
 8001626:	f00c fad5 	bl	800dbd4 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 800162a:	7c3b      	ldrb	r3, [r7, #16]
 800162c:	4619      	mov	r1, r3
 800162e:	4823      	ldr	r0, [pc, #140]	; (80016bc <APPE_SysUserEvtRx+0xf0>)
 8001630:	f00c fad0 	bl	800dbd4 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8001634:	7dbb      	ldrb	r3, [r7, #22]
 8001636:	4619      	mov	r1, r3
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	461a      	mov	r2, r3
 800163c:	7e3b      	ldrb	r3, [r7, #24]
 800163e:	4820      	ldr	r0, [pc, #128]	; (80016c0 <APPE_SysUserEvtRx+0xf4>)
 8001640:	f00c fac8 	bl	800dbd4 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8001644:	481f      	ldr	r0, [pc, #124]	; (80016c4 <APPE_SysUserEvtRx+0xf8>)
 8001646:	f00c fac5 	bl	800dbd4 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 f870 	bl	8001730 <APPE_SysEvtReadyProcessing>
    break;
 8001650:	e02d      	b.n	80016ae <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8001652:	481d      	ldr	r0, [pc, #116]	; (80016c8 <APPE_SysUserEvtRx+0xfc>)
 8001654:	f00c fabe 	bl	800dbd4 <iprintf>
    APPE_SysEvtError(pPayload);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f843 	bl	80016e4 <APPE_SysEvtError>
    break;
 800165e:	e026      	b.n	80016ae <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001660:	481a      	ldr	r0, [pc, #104]	; (80016cc <APPE_SysUserEvtRx+0x100>)
 8001662:	f00c fb25 	bl	800dcb0 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800166a:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	461a      	mov	r2, r3
 8001674:	4816      	ldr	r0, [pc, #88]	; (80016d0 <APPE_SysUserEvtRx+0x104>)
 8001676:	f00c faad 	bl	800dbd4 <iprintf>
    break;
 800167a:	e018      	b.n	80016ae <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4619      	mov	r1, r3
 8001684:	4813      	ldr	r0, [pc, #76]	; (80016d4 <APPE_SysUserEvtRx+0x108>)
 8001686:	f00c faa5 	bl	800dbd4 <iprintf>
    break;
 800168a:	e010      	b.n	80016ae <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 800168c:	4812      	ldr	r0, [pc, #72]	; (80016d8 <APPE_SysUserEvtRx+0x10c>)
 800168e:	f00c faa1 	bl	800dbd4 <iprintf>
    break;
 8001692:	e00c      	b.n	80016ae <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4619      	mov	r1, r3
 800169c:	480f      	ldr	r0, [pc, #60]	; (80016dc <APPE_SysUserEvtRx+0x110>)
 800169e:	f00c fa99 	bl	800dbd4 <iprintf>
    break;
 80016a2:	e004      	b.n	80016ae <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80016a4:	480e      	ldr	r0, [pc, #56]	; (80016e0 <APPE_SysUserEvtRx+0x114>)
 80016a6:	f00c fa95 	bl	800dbd4 <iprintf>
    break;
 80016aa:	e000      	b.n	80016ae <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 80016ac:	bf00      	nop
  }

  return;
 80016ae:	bf00      	nop
}
 80016b0:	3720      	adds	r7, #32
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	0800fc8c 	.word	0x0800fc8c
 80016bc:	0800fcb0 	.word	0x0800fcb0
 80016c0:	0800fccc 	.word	0x0800fccc
 80016c4:	0800fce4 	.word	0x0800fce4
 80016c8:	0800fd04 	.word	0x0800fd04
 80016cc:	0800fd28 	.word	0x0800fd28
 80016d0:	0800fd78 	.word	0x0800fd78
 80016d4:	0800fda0 	.word	0x0800fda0
 80016d8:	0800fddc 	.word	0x0800fddc
 80016dc:	0800fe00 	.word	0x0800fe00
 80016e0:	0800fe3c 	.word	0x0800fe3c

080016e4 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	330b      	adds	r3, #11
 80016f2:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	3302      	adds	r3, #2
 80016f8:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	4619      	mov	r1, r3
 8001700:	4808      	ldr	r0, [pc, #32]	; (8001724 <APPE_SysEvtError+0x40>)
 8001702:	f00c fa67 	bl	800dbd4 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d103      	bne.n	8001716 <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800170e:	4806      	ldr	r0, [pc, #24]	; (8001728 <APPE_SysEvtError+0x44>)
 8001710:	f00c face 	bl	800dcb0 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001714:	e003      	b.n	800171e <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <APPE_SysEvtError+0x48>)
 8001718:	f00c faca 	bl	800dcb0 <puts>
  return;
 800171c:	bf00      	nop
}
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	0800fe60 	.word	0x0800fe60
 8001728:	0800fe90 	.word	0x0800fe90
 800172c:	0800fecc 	.word	0x0800fecc

08001730 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	; 0x28
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001746:	2300      	movs	r3, #0
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	330b      	adds	r3, #11
 8001754:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3302      	adds	r3, #2
 800175a:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d128      	bne.n	80017b6 <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001764:	481d      	ldr	r0, [pc, #116]	; (80017dc <APPE_SysEvtReadyProcessing+0xac>)
 8001766:	f00c faa3 	bl	800dcb0 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800176a:	f7ff fbdf 	bl	8000f2c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800176e:	230f      	movs	r3, #15
 8001770:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001772:	237f      	movs	r3, #127	; 0x7f
 8001774:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001776:	f7ff fd81 	bl	800127c <LL_DBGMCU_GetRevisionID>
 800177a:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 800177c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800177e:	4818      	ldr	r0, [pc, #96]	; (80017e0 <APPE_SysEvtReadyProcessing+0xb0>)
 8001780:	f00c fa28 	bl	800dbd4 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	b29b      	uxth	r3, r3
 8001788:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800178a:	f7ff fd69 	bl	8001260 <LL_DBGMCU_GetDeviceID>
 800178e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001790:	6a39      	ldr	r1, [r7, #32]
 8001792:	4814      	ldr	r0, [pc, #80]	; (80017e4 <APPE_SysEvtReadyProcessing+0xb4>)
 8001794:	f00c fa1e 	bl	800dbd4 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001798:	6a3b      	ldr	r3, [r7, #32]
 800179a:	b29b      	uxth	r3, r3
 800179c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	4618      	mov	r0, r3
 80017a4:	f00a f82a 	bl	800b7fc <SHCI_C2_Config>

    APP_BLE_Init();
 80017a8:	f001 fd6e 	bl	8003288 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80017ac:	2100      	movs	r1, #0
 80017ae:	2001      	movs	r0, #1
 80017b0:	f00b fa7a 	bl	800cca8 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80017b4:	e00e      	b.n	80017d4 <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d106      	bne.n	80017cc <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 80017be:	480a      	ldr	r0, [pc, #40]	; (80017e8 <APPE_SysEvtReadyProcessing+0xb8>)
 80017c0:	f00c fa08 	bl	800dbd4 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
  return;
 80017ca:	e003      	b.n	80017d4 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 80017cc:	4807      	ldr	r0, [pc, #28]	; (80017ec <APPE_SysEvtReadyProcessing+0xbc>)
 80017ce:	f00c fa01 	bl	800dbd4 <iprintf>
  return;
 80017d2:	bf00      	nop
}
 80017d4:	3728      	adds	r7, #40	; 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	0800ff04 	.word	0x0800ff04
 80017e0:	0800ff20 	.word	0x0800ff20
 80017e4:	0800ff44 	.word	0x0800ff44
 80017e8:	0800ff64 	.word	0x0800ff64
 80017ec:	0800ff98 	.word	0x0800ff98

080017f0 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 80017f4:	2000      	movs	r0, #0
 80017f6:	f003 f9e7 	bl	8004bc8 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80017fa:	2001      	movs	r0, #1
 80017fc:	f003 f9e4 	bl	8004bc8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001800:	2002      	movs	r0, #2
 8001802:	f003 f9e1 	bl	8004bc8 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 8001806:	2001      	movs	r0, #1
 8001808:	f003 fa18 	bl	8004c3c <BSP_LED_On>
#endif

  return;
 800180c:	bf00      	nop
}
 800180e:	bd80      	pop	{r7, pc}

08001810 <Button_Init>:

static void Button_Init( void )
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8001814:	2101      	movs	r1, #1
 8001816:	2000      	movs	r0, #0
 8001818:	f003 fa44 	bl	8004ca4 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 800181c:	2101      	movs	r1, #1
 800181e:	2001      	movs	r0, #1
 8001820:	f003 fa40 	bl	8004ca4 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8001824:	2101      	movs	r1, #1
 8001826:	2002      	movs	r0, #2
 8001828:	f003 fa3c 	bl	8004ca4 <BSP_PB_Init>
#endif

  return;
 800182c:	bf00      	nop
}
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001838:	f003 fb88 	bl	8004f4c <HAL_GetTick>
 800183c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001848:	d00a      	beq.n	8001860 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800184a:	f003 fb97 	bl	8004f7c <HAL_GetTickFreq>
 800184e:	4603      	mov	r3, r0
 8001850:	461a      	mov	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4413      	add	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001858:	e002      	b.n	8001860 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800185a:	f7ff fd7f 	bl	800135c <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 800185e:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001860:	f003 fb74 	bl	8004f4c <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	429a      	cmp	r2, r3
 800186e:	d8f4      	bhi.n	800185a <HAL_Delay+0x2a>
  }
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800187e:	f04f 30ff 	mov.w	r0, #4294967295
 8001882:	f00b fa41 	bl	800cd08 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}

0800188a <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800188e:	bf00      	nop
}
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80018a2:	f04f 30ff 	mov.w	r0, #4294967295
 80018a6:	f00b fa2f 	bl	800cd08 <UTIL_SEQ_Run>

  return;
 80018aa:	bf00      	nop
}
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80018ba:	2100      	movs	r1, #0
 80018bc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80018c0:	f00b fb40 	bl	800cf44 <UTIL_SEQ_SetTask>
  return;
 80018c4:	bf00      	nop
}
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80018d4:	2002      	movs	r0, #2
 80018d6:	f00b fba1 	bl	800d01c <UTIL_SEQ_SetEvt>
  return;
 80018da:	bf00      	nop
}
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80018ea:	2002      	movs	r0, #2
 80018ec:	f00b fbb6 	bl	800d05c <UTIL_SEQ_WaitEvt>
  return;
 80018f0:	bf00      	nop
}
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	2b10      	cmp	r3, #16
 8001906:	d006      	beq.n	8001916 <HAL_GPIO_EXTI_Callback+0x1e>
 8001908:	2b10      	cmp	r3, #16
 800190a:	dc0d      	bgt.n	8001928 <HAL_GPIO_EXTI_Callback+0x30>
 800190c:	2b01      	cmp	r3, #1
 800190e:	d005      	beq.n	800191c <HAL_GPIO_EXTI_Callback+0x24>
 8001910:	2b02      	cmp	r3, #2
 8001912:	d006      	beq.n	8001922 <HAL_GPIO_EXTI_Callback+0x2a>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 8001914:	e008      	b.n	8001928 <HAL_GPIO_EXTI_Callback+0x30>
     APP_BLE_Key_Button1_Action();
 8001916:	f001 ff33 	bl	8003780 <APP_BLE_Key_Button1_Action>
      break; 
 800191a:	e006      	b.n	800192a <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 800191c:	f001 ff40 	bl	80037a0 <APP_BLE_Key_Button2_Action>
      break; 
 8001920:	e003      	b.n	800192a <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 8001922:	f001 ff44 	bl	80037ae <APP_BLE_Key_Button3_Action>
      break;
 8001926:	e000      	b.n	800192a <HAL_GPIO_EXTI_Callback+0x32>
      break;
 8001928:	bf00      	nop

  }
  return;
 800192a:	bf00      	nop
}
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <RxUART_Init>:

static void RxUART_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8001938:	4b03      	ldr	r3, [pc, #12]	; (8001948 <RxUART_Init+0x14>)
 800193a:	2201      	movs	r2, #1
 800193c:	4903      	ldr	r1, [pc, #12]	; (800194c <RxUART_Init+0x18>)
 800193e:	2000      	movs	r0, #0
 8001940:	f000 ff10 	bl	8002764 <HW_UART_Receive_IT>
}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	08001951 	.word	0x08001951
 800194c:	20000270 	.word	0x20000270

08001950 <RxCpltCallback>:

static void RxCpltCallback(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8001954:	4b15      	ldr	r3, [pc, #84]	; (80019ac <RxCpltCallback+0x5c>)
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	2bff      	cmp	r3, #255	; 0xff
 800195a:	d81e      	bhi.n	800199a <RxCpltCallback+0x4a>
  {
    if (aRxBuffer[0] == '\r')
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <RxCpltCallback+0x60>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b0d      	cmp	r3, #13
 8001962:	d10f      	bne.n	8001984 <RxCpltCallback+0x34>
    {
      APP_DBG_MSG("received %s\n", CommandString);
 8001964:	4913      	ldr	r1, [pc, #76]	; (80019b4 <RxCpltCallback+0x64>)
 8001966:	4814      	ldr	r0, [pc, #80]	; (80019b8 <RxCpltCallback+0x68>)
 8001968:	f00c f934 	bl	800dbd4 <iprintf>

      UartCmdExecute();
 800196c:	f000 f828 	bl	80019c0 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <RxCpltCallback+0x5c>)
 8001972:	2200      	movs	r2, #0
 8001974:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 8001976:	f44f 7280 	mov.w	r2, #256	; 0x100
 800197a:	2100      	movs	r1, #0
 800197c:	480d      	ldr	r0, [pc, #52]	; (80019b4 <RxCpltCallback+0x64>)
 800197e:	f00c fa77 	bl	800de70 <memset>
 8001982:	e00a      	b.n	800199a <RxCpltCallback+0x4a>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 8001984:	4b09      	ldr	r3, [pc, #36]	; (80019ac <RxCpltCallback+0x5c>)
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	1c5a      	adds	r2, r3, #1
 800198a:	b291      	uxth	r1, r2
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <RxCpltCallback+0x5c>)
 800198e:	8011      	strh	r1, [r2, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <RxCpltCallback+0x60>)
 8001994:	7819      	ldrb	r1, [r3, #0]
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <RxCpltCallback+0x64>)
 8001998:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 800199a:	4b08      	ldr	r3, [pc, #32]	; (80019bc <RxCpltCallback+0x6c>)
 800199c:	2201      	movs	r2, #1
 800199e:	4904      	ldr	r1, [pc, #16]	; (80019b0 <RxCpltCallback+0x60>)
 80019a0:	2000      	movs	r0, #0
 80019a2:	f000 fedf 	bl	8002764 <HW_UART_Receive_IT>
}
 80019a6:	bf00      	nop
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000378 	.word	0x20000378
 80019b0:	20000270 	.word	0x20000270
 80019b4:	20000278 	.word	0x20000278
 80019b8:	0800ffcc 	.word	0x0800ffcc
 80019bc:	08001951 	.word	0x08001951

080019c0 <UartCmdExecute>:

static void UartCmdExecute(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 80019c4:	491c      	ldr	r1, [pc, #112]	; (8001a38 <UartCmdExecute+0x78>)
 80019c6:	481d      	ldr	r0, [pc, #116]	; (8001a3c <UartCmdExecute+0x7c>)
 80019c8:	f7fe fbda 	bl	8000180 <strcmp>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d109      	bne.n	80019e6 <UartCmdExecute+0x26>
  {
    APP_DBG_MSG("SW1 OK\n");
 80019d2:	481b      	ldr	r0, [pc, #108]	; (8001a40 <UartCmdExecute+0x80>)
 80019d4:	f00c f96c 	bl	800dcb0 <puts>
    exti_handle.Line = EXTI_LINE_4;
 80019d8:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <UartCmdExecute+0x84>)
 80019da:	4a1b      	ldr	r2, [pc, #108]	; (8001a48 <UartCmdExecute+0x88>)
 80019dc:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80019de:	4819      	ldr	r0, [pc, #100]	; (8001a44 <UartCmdExecute+0x84>)
 80019e0:	f003 fff0 	bl	80059c4 <HAL_EXTI_GenerateSWI>
  }
  else
  {
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
  }
}
 80019e4:	e026      	b.n	8001a34 <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 80019e6:	4919      	ldr	r1, [pc, #100]	; (8001a4c <UartCmdExecute+0x8c>)
 80019e8:	4814      	ldr	r0, [pc, #80]	; (8001a3c <UartCmdExecute+0x7c>)
 80019ea:	f7fe fbc9 	bl	8000180 <strcmp>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10a      	bne.n	8001a0a <UartCmdExecute+0x4a>
    APP_DBG_MSG("SW2 OK\n");
 80019f4:	4816      	ldr	r0, [pc, #88]	; (8001a50 <UartCmdExecute+0x90>)
 80019f6:	f00c f95b 	bl	800dcb0 <puts>
    exti_handle.Line = EXTI_LINE_0;
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <UartCmdExecute+0x84>)
 80019fc:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8001a00:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8001a02:	4810      	ldr	r0, [pc, #64]	; (8001a44 <UartCmdExecute+0x84>)
 8001a04:	f003 ffde 	bl	80059c4 <HAL_EXTI_GenerateSWI>
}
 8001a08:	e014      	b.n	8001a34 <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW3") == 0)
 8001a0a:	4912      	ldr	r1, [pc, #72]	; (8001a54 <UartCmdExecute+0x94>)
 8001a0c:	480b      	ldr	r0, [pc, #44]	; (8001a3c <UartCmdExecute+0x7c>)
 8001a0e:	f7fe fbb7 	bl	8000180 <strcmp>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d109      	bne.n	8001a2c <UartCmdExecute+0x6c>
    APP_DBG_MSG("SW3 OK\n");
 8001a18:	480f      	ldr	r0, [pc, #60]	; (8001a58 <UartCmdExecute+0x98>)
 8001a1a:	f00c f949 	bl	800dcb0 <puts>
    exti_handle.Line = EXTI_LINE_1;
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <UartCmdExecute+0x84>)
 8001a20:	4a0e      	ldr	r2, [pc, #56]	; (8001a5c <UartCmdExecute+0x9c>)
 8001a22:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8001a24:	4807      	ldr	r0, [pc, #28]	; (8001a44 <UartCmdExecute+0x84>)
 8001a26:	f003 ffcd 	bl	80059c4 <HAL_EXTI_GenerateSWI>
}
 8001a2a:	e003      	b.n	8001a34 <UartCmdExecute+0x74>
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
 8001a2c:	4903      	ldr	r1, [pc, #12]	; (8001a3c <UartCmdExecute+0x7c>)
 8001a2e:	480c      	ldr	r0, [pc, #48]	; (8001a60 <UartCmdExecute+0xa0>)
 8001a30:	f00c f8d0 	bl	800dbd4 <iprintf>
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	0800ffdc 	.word	0x0800ffdc
 8001a3c:	20000278 	.word	0x20000278
 8001a40:	0800ffe0 	.word	0x0800ffe0
 8001a44:	20000268 	.word	0x20000268
 8001a48:	16000004 	.word	0x16000004
 8001a4c:	0800ffe8 	.word	0x0800ffe8
 8001a50:	0800ffec 	.word	0x0800ffec
 8001a54:	0800fff4 	.word	0x0800fff4
 8001a58:	0800fff8 	.word	0x0800fff8
 8001a5c:	16000001 	.word	0x16000001
 8001a60:	08010000 	.word	0x08010000

08001a64 <LL_EXTI_EnableIT_0_31>:
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001a6c:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <LL_EXTI_EnableIT_0_31+0x24>)
 8001a6e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001a72:	4905      	ldr	r1, [pc, #20]	; (8001a88 <LL_EXTI_EnableIT_0_31+0x24>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	58000800 	.word	0x58000800

08001a8c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4904      	ldr	r1, [pc, #16]	; (8001aac <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	600b      	str	r3, [r1, #0]

}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	58000800 	.word	0x58000800

08001ab0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <ReadRtcSsrValue+0x3c>)
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <ReadRtcSsrValue+0x3c>)
 8001ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001ac6:	e005      	b.n	8001ad4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001acc:	4b07      	ldr	r3, [pc, #28]	; (8001aec <ReadRtcSsrValue+0x3c>)
 8001ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d1f5      	bne.n	8001ac8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001adc:	683b      	ldr	r3, [r7, #0]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40002800 	.word	0x40002800

08001af0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	460a      	mov	r2, r1
 8001afa:	71fb      	strb	r3, [r7, #7]
 8001afc:	4613      	mov	r3, r2
 8001afe:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001b00:	79ba      	ldrb	r2, [r7, #6]
 8001b02:	491d      	ldr	r1, [pc, #116]	; (8001b78 <LinkTimerAfter+0x88>)
 8001b04:	4613      	mov	r3, r2
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	4413      	add	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	440b      	add	r3, r1
 8001b0e:	3315      	adds	r3, #21
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	2b06      	cmp	r3, #6
 8001b18:	d009      	beq.n	8001b2e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001b1a:	7bfa      	ldrb	r2, [r7, #15]
 8001b1c:	4916      	ldr	r1, [pc, #88]	; (8001b78 <LinkTimerAfter+0x88>)
 8001b1e:	4613      	mov	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4413      	add	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	440b      	add	r3, r1
 8001b28:	3314      	adds	r3, #20
 8001b2a:	79fa      	ldrb	r2, [r7, #7]
 8001b2c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001b2e:	79fa      	ldrb	r2, [r7, #7]
 8001b30:	4911      	ldr	r1, [pc, #68]	; (8001b78 <LinkTimerAfter+0x88>)
 8001b32:	4613      	mov	r3, r2
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	4413      	add	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	440b      	add	r3, r1
 8001b3c:	3315      	adds	r3, #21
 8001b3e:	7bfa      	ldrb	r2, [r7, #15]
 8001b40:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001b42:	79fa      	ldrb	r2, [r7, #7]
 8001b44:	490c      	ldr	r1, [pc, #48]	; (8001b78 <LinkTimerAfter+0x88>)
 8001b46:	4613      	mov	r3, r2
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	4413      	add	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	440b      	add	r3, r1
 8001b50:	3314      	adds	r3, #20
 8001b52:	79ba      	ldrb	r2, [r7, #6]
 8001b54:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001b56:	79ba      	ldrb	r2, [r7, #6]
 8001b58:	4907      	ldr	r1, [pc, #28]	; (8001b78 <LinkTimerAfter+0x88>)
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4413      	add	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	440b      	add	r3, r1
 8001b64:	3315      	adds	r3, #21
 8001b66:	79fa      	ldrb	r2, [r7, #7]
 8001b68:	701a      	strb	r2, [r3, #0]

  return;
 8001b6a:	bf00      	nop
}
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	2000037c 	.word	0x2000037c

08001b7c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	460a      	mov	r2, r1
 8001b86:	71fb      	strb	r3, [r7, #7]
 8001b88:	4613      	mov	r3, r2
 8001b8a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001b8c:	4b29      	ldr	r3, [pc, #164]	; (8001c34 <LinkTimerBefore+0xb8>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	79ba      	ldrb	r2, [r7, #6]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d032      	beq.n	8001bfe <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001b98:	79ba      	ldrb	r2, [r7, #6]
 8001b9a:	4927      	ldr	r1, [pc, #156]	; (8001c38 <LinkTimerBefore+0xbc>)
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	4413      	add	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	440b      	add	r3, r1
 8001ba6:	3314      	adds	r3, #20
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001bac:	7bfa      	ldrb	r2, [r7, #15]
 8001bae:	4922      	ldr	r1, [pc, #136]	; (8001c38 <LinkTimerBefore+0xbc>)
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	4413      	add	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	440b      	add	r3, r1
 8001bba:	3315      	adds	r3, #21
 8001bbc:	79fa      	ldrb	r2, [r7, #7]
 8001bbe:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001bc0:	79fa      	ldrb	r2, [r7, #7]
 8001bc2:	491d      	ldr	r1, [pc, #116]	; (8001c38 <LinkTimerBefore+0xbc>)
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	00db      	lsls	r3, r3, #3
 8001bcc:	440b      	add	r3, r1
 8001bce:	3315      	adds	r3, #21
 8001bd0:	79ba      	ldrb	r2, [r7, #6]
 8001bd2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001bd4:	79fa      	ldrb	r2, [r7, #7]
 8001bd6:	4918      	ldr	r1, [pc, #96]	; (8001c38 <LinkTimerBefore+0xbc>)
 8001bd8:	4613      	mov	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	4413      	add	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	440b      	add	r3, r1
 8001be2:	3314      	adds	r3, #20
 8001be4:	7bfa      	ldrb	r2, [r7, #15]
 8001be6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001be8:	79ba      	ldrb	r2, [r7, #6]
 8001bea:	4913      	ldr	r1, [pc, #76]	; (8001c38 <LinkTimerBefore+0xbc>)
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	440b      	add	r3, r1
 8001bf6:	3314      	adds	r3, #20
 8001bf8:	79fa      	ldrb	r2, [r7, #7]
 8001bfa:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001bfc:	e014      	b.n	8001c28 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001bfe:	79fa      	ldrb	r2, [r7, #7]
 8001c00:	490d      	ldr	r1, [pc, #52]	; (8001c38 <LinkTimerBefore+0xbc>)
 8001c02:	4613      	mov	r3, r2
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4413      	add	r3, r2
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	440b      	add	r3, r1
 8001c0c:	3315      	adds	r3, #21
 8001c0e:	79ba      	ldrb	r2, [r7, #6]
 8001c10:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001c12:	79ba      	ldrb	r2, [r7, #6]
 8001c14:	4908      	ldr	r1, [pc, #32]	; (8001c38 <LinkTimerBefore+0xbc>)
 8001c16:	4613      	mov	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	4413      	add	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	440b      	add	r3, r1
 8001c20:	3314      	adds	r3, #20
 8001c22:	79fa      	ldrb	r2, [r7, #7]
 8001c24:	701a      	strb	r2, [r3, #0]
  return;
 8001c26:	bf00      	nop
}
 8001c28:	3714      	adds	r7, #20
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	2000040c 	.word	0x2000040c
 8001c38:	2000037c 	.word	0x2000037c

08001c3c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001c46:	4b4e      	ldr	r3, [pc, #312]	; (8001d80 <linkTimer+0x144>)
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b06      	cmp	r3, #6
 8001c4e:	d118      	bne.n	8001c82 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001c50:	4b4b      	ldr	r3, [pc, #300]	; (8001d80 <linkTimer+0x144>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	4b4b      	ldr	r3, [pc, #300]	; (8001d84 <linkTimer+0x148>)
 8001c58:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001c5a:	4a49      	ldr	r2, [pc, #292]	; (8001d80 <linkTimer+0x144>)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001c60:	79fa      	ldrb	r2, [r7, #7]
 8001c62:	4949      	ldr	r1, [pc, #292]	; (8001d88 <linkTimer+0x14c>)
 8001c64:	4613      	mov	r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4413      	add	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	440b      	add	r3, r1
 8001c6e:	3315      	adds	r3, #21
 8001c70:	2206      	movs	r2, #6
 8001c72:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001c74:	4b45      	ldr	r3, [pc, #276]	; (8001d8c <linkTimer+0x150>)
 8001c76:	f04f 32ff 	mov.w	r2, #4294967295
 8001c7a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	81fb      	strh	r3, [r7, #14]
 8001c80:	e078      	b.n	8001d74 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001c82:	f000 f909 	bl	8001e98 <ReturnTimeElapsed>
 8001c86:	4603      	mov	r3, r0
 8001c88:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001c8a:	79fa      	ldrb	r2, [r7, #7]
 8001c8c:	493e      	ldr	r1, [pc, #248]	; (8001d88 <linkTimer+0x14c>)
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	440b      	add	r3, r1
 8001c98:	3308      	adds	r3, #8
 8001c9a:	6819      	ldr	r1, [r3, #0]
 8001c9c:	89fb      	ldrh	r3, [r7, #14]
 8001c9e:	79fa      	ldrb	r2, [r7, #7]
 8001ca0:	4419      	add	r1, r3
 8001ca2:	4839      	ldr	r0, [pc, #228]	; (8001d88 <linkTimer+0x14c>)
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4403      	add	r3, r0
 8001cae:	3308      	adds	r3, #8
 8001cb0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001cb2:	79fa      	ldrb	r2, [r7, #7]
 8001cb4:	4934      	ldr	r1, [pc, #208]	; (8001d88 <linkTimer+0x14c>)
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4413      	add	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	440b      	add	r3, r1
 8001cc0:	3308      	adds	r3, #8
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001cc6:	4b2e      	ldr	r3, [pc, #184]	; (8001d80 <linkTimer+0x144>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4a2e      	ldr	r2, [pc, #184]	; (8001d88 <linkTimer+0x14c>)
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	440b      	add	r3, r1
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4413      	add	r3, r2
 8001cda:	3308      	adds	r3, #8
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68ba      	ldr	r2, [r7, #8]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d337      	bcc.n	8001d54 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001ce4:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <linkTimer+0x144>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001cea:	7b7a      	ldrb	r2, [r7, #13]
 8001cec:	4926      	ldr	r1, [pc, #152]	; (8001d88 <linkTimer+0x14c>)
 8001cee:	4613      	mov	r3, r2
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	4413      	add	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	440b      	add	r3, r1
 8001cf8:	3315      	adds	r3, #21
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001cfe:	e013      	b.n	8001d28 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001d00:	7b7a      	ldrb	r2, [r7, #13]
 8001d02:	4921      	ldr	r1, [pc, #132]	; (8001d88 <linkTimer+0x14c>)
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	440b      	add	r3, r1
 8001d0e:	3315      	adds	r3, #21
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001d14:	7b7a      	ldrb	r2, [r7, #13]
 8001d16:	491c      	ldr	r1, [pc, #112]	; (8001d88 <linkTimer+0x14c>)
 8001d18:	4613      	mov	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4413      	add	r3, r2
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	440b      	add	r3, r1
 8001d22:	3315      	adds	r3, #21
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001d28:	7b3b      	ldrb	r3, [r7, #12]
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d00b      	beq.n	8001d46 <linkTimer+0x10a>
 8001d2e:	7b3a      	ldrb	r2, [r7, #12]
 8001d30:	4915      	ldr	r1, [pc, #84]	; (8001d88 <linkTimer+0x14c>)
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	440b      	add	r3, r1
 8001d3c:	3308      	adds	r3, #8
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68ba      	ldr	r2, [r7, #8]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d2dc      	bcs.n	8001d00 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001d46:	7b7a      	ldrb	r2, [r7, #13]
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fecf 	bl	8001af0 <LinkTimerAfter>
 8001d52:	e00f      	b.n	8001d74 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001d54:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <linkTimer+0x144>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	4611      	mov	r1, r2
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff ff0c 	bl	8001b7c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001d64:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <linkTimer+0x144>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <linkTimer+0x148>)
 8001d6c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001d6e:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <linkTimer+0x144>)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001d74:	89fb      	ldrh	r3, [r7, #14]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	2000040c 	.word	0x2000040c
 8001d84:	2000040d 	.word	0x2000040d
 8001d88:	2000037c 	.word	0x2000037c
 8001d8c:	20000410 	.word	0x20000410

08001d90 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	460a      	mov	r2, r1
 8001d9a:	71fb      	strb	r3, [r7, #7]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001da0:	4b39      	ldr	r3, [pc, #228]	; (8001e88 <UnlinkTimer+0xf8>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	79fa      	ldrb	r2, [r7, #7]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d111      	bne.n	8001dd0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001dac:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <UnlinkTimer+0xf8>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4b36      	ldr	r3, [pc, #216]	; (8001e8c <UnlinkTimer+0xfc>)
 8001db4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001db6:	79fa      	ldrb	r2, [r7, #7]
 8001db8:	4935      	ldr	r1, [pc, #212]	; (8001e90 <UnlinkTimer+0x100>)
 8001dba:	4613      	mov	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	440b      	add	r3, r1
 8001dc4:	3315      	adds	r3, #21
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4b2f      	ldr	r3, [pc, #188]	; (8001e88 <UnlinkTimer+0xf8>)
 8001dcc:	701a      	strb	r2, [r3, #0]
 8001dce:	e03e      	b.n	8001e4e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001dd0:	79fa      	ldrb	r2, [r7, #7]
 8001dd2:	492f      	ldr	r1, [pc, #188]	; (8001e90 <UnlinkTimer+0x100>)
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4413      	add	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	440b      	add	r3, r1
 8001dde:	3314      	adds	r3, #20
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001de4:	79fa      	ldrb	r2, [r7, #7]
 8001de6:	492a      	ldr	r1, [pc, #168]	; (8001e90 <UnlinkTimer+0x100>)
 8001de8:	4613      	mov	r3, r2
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4413      	add	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	440b      	add	r3, r1
 8001df2:	3315      	adds	r3, #21
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001df8:	79f9      	ldrb	r1, [r7, #7]
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	4824      	ldr	r0, [pc, #144]	; (8001e90 <UnlinkTimer+0x100>)
 8001dfe:	460b      	mov	r3, r1
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	440b      	add	r3, r1
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4403      	add	r3, r0
 8001e08:	3315      	adds	r3, #21
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	b2d8      	uxtb	r0, r3
 8001e0e:	4920      	ldr	r1, [pc, #128]	; (8001e90 <UnlinkTimer+0x100>)
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	440b      	add	r3, r1
 8001e1a:	3315      	adds	r3, #21
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e20:	7bbb      	ldrb	r3, [r7, #14]
 8001e22:	2b06      	cmp	r3, #6
 8001e24:	d013      	beq.n	8001e4e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001e26:	79f9      	ldrb	r1, [r7, #7]
 8001e28:	7bba      	ldrb	r2, [r7, #14]
 8001e2a:	4819      	ldr	r0, [pc, #100]	; (8001e90 <UnlinkTimer+0x100>)
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	440b      	add	r3, r1
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4403      	add	r3, r0
 8001e36:	3314      	adds	r3, #20
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	b2d8      	uxtb	r0, r3
 8001e3c:	4914      	ldr	r1, [pc, #80]	; (8001e90 <UnlinkTimer+0x100>)
 8001e3e:	4613      	mov	r3, r2
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	4413      	add	r3, r2
 8001e44:	00db      	lsls	r3, r3, #3
 8001e46:	440b      	add	r3, r1
 8001e48:	3314      	adds	r3, #20
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001e4e:	79fa      	ldrb	r2, [r7, #7]
 8001e50:	490f      	ldr	r1, [pc, #60]	; (8001e90 <UnlinkTimer+0x100>)
 8001e52:	4613      	mov	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	440b      	add	r3, r1
 8001e5c:	330c      	adds	r3, #12
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001e62:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <UnlinkTimer+0xf8>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b06      	cmp	r3, #6
 8001e6a:	d107      	bne.n	8001e7c <UnlinkTimer+0xec>
 8001e6c:	79bb      	ldrb	r3, [r7, #6]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d104      	bne.n	8001e7c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001e72:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <UnlinkTimer+0x104>)
 8001e74:	f04f 32ff 	mov.w	r2, #4294967295
 8001e78:	601a      	str	r2, [r3, #0]
  }

  return;
 8001e7a:	bf00      	nop
 8001e7c:	bf00      	nop
}
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	2000040c 	.word	0x2000040c
 8001e8c:	2000040d 	.word	0x2000040d
 8001e90:	2000037c 	.word	0x2000037c
 8001e94:	20000410 	.word	0x20000410

08001e98 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001e9e:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <ReturnTimeElapsed+0x70>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea6:	d026      	beq.n	8001ef6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001ea8:	f7ff fe02 	bl	8001ab0 <ReadRtcSsrValue>
 8001eac:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001eae:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <ReturnTimeElapsed+0x70>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d805      	bhi.n	8001ec4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001eb8:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <ReturnTimeElapsed+0x70>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	e00a      	b.n	8001eda <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <ReturnTimeElapsed+0x74>)
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001ed0:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <ReturnTimeElapsed+0x70>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001eda:	4b0d      	ldr	r3, [pc, #52]	; (8001f10 <ReturnTimeElapsed+0x78>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	fb02 f303 	mul.w	r3, r2, r3
 8001ee6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001ee8:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <ReturnTimeElapsed+0x7c>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	461a      	mov	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	40d3      	lsrs	r3, r2
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	e001      	b.n	8001efa <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	b29b      	uxth	r3, r3
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000410 	.word	0x20000410
 8001f0c:	20000418 	.word	0x20000418
 8001f10:	20000416 	.word	0x20000416
 8001f14:	20000415 	.word	0x20000415

08001f18 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d108      	bne.n	8001f3a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001f28:	f7ff fdc2 	bl	8001ab0 <ReadRtcSsrValue>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4a21      	ldr	r2, [pc, #132]	; (8001fb4 <RestartWakeupCounter+0x9c>)
 8001f30:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001f32:	2003      	movs	r0, #3
 8001f34:	f003 f9b7 	bl	80052a6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001f38:	e039      	b.n	8001fae <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d803      	bhi.n	8001f48 <RestartWakeupCounter+0x30>
 8001f40:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <RestartWakeupCounter+0xa0>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d002      	beq.n	8001f4e <RestartWakeupCounter+0x36>
      Value -= 1;
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001f4e:	bf00      	nop
 8001f50:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <RestartWakeupCounter+0xa4>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f8      	beq.n	8001f50 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <RestartWakeupCounter+0xa4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <RestartWakeupCounter+0xa4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001f6e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001f70:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <RestartWakeupCounter+0xa8>)
 8001f72:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f76:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001f78:	2003      	movs	r0, #3
 8001f7a:	f003 f9a2 	bl	80052c2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001f7e:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <RestartWakeupCounter+0xac>)
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	0c1b      	lsrs	r3, r3, #16
 8001f84:	041b      	lsls	r3, r3, #16
 8001f86:	88fa      	ldrh	r2, [r7, #6]
 8001f88:	490e      	ldr	r1, [pc, #56]	; (8001fc4 <RestartWakeupCounter+0xac>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001f8e:	f7ff fd8f 	bl	8001ab0 <ReadRtcSsrValue>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4a07      	ldr	r2, [pc, #28]	; (8001fb4 <RestartWakeupCounter+0x9c>)
 8001f96:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001f98:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <RestartWakeupCounter+0xa4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <RestartWakeupCounter+0xa4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fa6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001fa8:	f3af 8000 	nop.w
  return ;
 8001fac:	bf00      	nop
}
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000410 	.word	0x20000410
 8001fb8:	20000415 	.word	0x20000415
 8001fbc:	20000648 	.word	0x20000648
 8001fc0:	58000800 	.word	0x58000800
 8001fc4:	40002800 	.word	0x40002800

08001fc8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001fce:	4b45      	ldr	r3, [pc, #276]	; (80020e4 <RescheduleTimerList+0x11c>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fda:	d107      	bne.n	8001fec <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001fdc:	bf00      	nop
 8001fde:	4b42      	ldr	r3, [pc, #264]	; (80020e8 <RescheduleTimerList+0x120>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f8      	bne.n	8001fde <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001fec:	4b3e      	ldr	r3, [pc, #248]	; (80020e8 <RescheduleTimerList+0x120>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	4b3d      	ldr	r3, [pc, #244]	; (80020e8 <RescheduleTimerList+0x120>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ffa:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001ffc:	4b3b      	ldr	r3, [pc, #236]	; (80020ec <RescheduleTimerList+0x124>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	493a      	ldr	r1, [pc, #232]	; (80020f0 <RescheduleTimerList+0x128>)
 8002006:	4613      	mov	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	4413      	add	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	440b      	add	r3, r1
 8002010:	3308      	adds	r3, #8
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002016:	f7ff ff3f 	bl	8001e98 <ReturnTimeElapsed>
 800201a:	4603      	mov	r3, r0
 800201c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	68ba      	ldr	r2, [r7, #8]
 8002022:	429a      	cmp	r2, r3
 8002024:	d205      	bcs.n	8002032 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800202a:	4b32      	ldr	r3, [pc, #200]	; (80020f4 <RescheduleTimerList+0x12c>)
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	e04d      	b.n	80020ce <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	4a30      	ldr	r2, [pc, #192]	; (80020f8 <RescheduleTimerList+0x130>)
 8002036:	8812      	ldrh	r2, [r2, #0]
 8002038:	b292      	uxth	r2, r2
 800203a:	4413      	add	r3, r2
 800203c:	461a      	mov	r2, r3
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	4293      	cmp	r3, r2
 8002042:	d906      	bls.n	8002052 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002044:	4b2c      	ldr	r3, [pc, #176]	; (80020f8 <RescheduleTimerList+0x130>)
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800204a:	4b2a      	ldr	r3, [pc, #168]	; (80020f4 <RescheduleTimerList+0x12c>)
 800204c:	2200      	movs	r2, #0
 800204e:	701a      	strb	r2, [r3, #0]
 8002050:	e03d      	b.n	80020ce <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	b29a      	uxth	r2, r3
 8002056:	88fb      	ldrh	r3, [r7, #6]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800205c:	4b25      	ldr	r3, [pc, #148]	; (80020f4 <RescheduleTimerList+0x12c>)
 800205e:	2201      	movs	r2, #1
 8002060:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002062:	e034      	b.n	80020ce <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	4922      	ldr	r1, [pc, #136]	; (80020f0 <RescheduleTimerList+0x128>)
 8002068:	4613      	mov	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4413      	add	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	440b      	add	r3, r1
 8002072:	3308      	adds	r3, #8
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	88fb      	ldrh	r3, [r7, #6]
 8002078:	429a      	cmp	r2, r3
 800207a:	d20a      	bcs.n	8002092 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	491c      	ldr	r1, [pc, #112]	; (80020f0 <RescheduleTimerList+0x128>)
 8002080:	4613      	mov	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4413      	add	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	440b      	add	r3, r1
 800208a:	3308      	adds	r3, #8
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	e013      	b.n	80020ba <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002092:	7bfa      	ldrb	r2, [r7, #15]
 8002094:	4916      	ldr	r1, [pc, #88]	; (80020f0 <RescheduleTimerList+0x128>)
 8002096:	4613      	mov	r3, r2
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	4413      	add	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	440b      	add	r3, r1
 80020a0:	3308      	adds	r3, #8
 80020a2:	6819      	ldr	r1, [r3, #0]
 80020a4:	88fb      	ldrh	r3, [r7, #6]
 80020a6:	7bfa      	ldrb	r2, [r7, #15]
 80020a8:	1ac9      	subs	r1, r1, r3
 80020aa:	4811      	ldr	r0, [pc, #68]	; (80020f0 <RescheduleTimerList+0x128>)
 80020ac:	4613      	mov	r3, r2
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	4413      	add	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4403      	add	r3, r0
 80020b6:	3308      	adds	r3, #8
 80020b8:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	490c      	ldr	r1, [pc, #48]	; (80020f0 <RescheduleTimerList+0x128>)
 80020be:	4613      	mov	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	440b      	add	r3, r1
 80020c8:	3315      	adds	r3, #21
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
 80020d0:	2b06      	cmp	r3, #6
 80020d2:	d1c7      	bne.n	8002064 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80020d4:	89bb      	ldrh	r3, [r7, #12]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff ff1e 	bl	8001f18 <RestartWakeupCounter>

  return ;
 80020dc:	bf00      	nop
}
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40002800 	.word	0x40002800
 80020e8:	20000648 	.word	0x20000648
 80020ec:	2000040c 	.word	0x2000040c
 80020f0:	2000037c 	.word	0x2000037c
 80020f4:	20000414 	.word	0x20000414
 80020f8:	2000041a 	.word	0x2000041a

080020fc <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	; 0x28
 8002100:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002102:	f3ef 8310 	mrs	r3, PRIMASK
 8002106:	617b      	str	r3, [r7, #20]
  return(result);
 8002108:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800210c:	b672      	cpsid	i
}
 800210e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002110:	4b59      	ldr	r3, [pc, #356]	; (8002278 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	22ca      	movs	r2, #202	; 0xca
 8002116:	625a      	str	r2, [r3, #36]	; 0x24
 8002118:	4b57      	ldr	r3, [pc, #348]	; (8002278 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2253      	movs	r2, #83	; 0x53
 800211e:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002120:	4b55      	ldr	r3, [pc, #340]	; (8002278 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	4b54      	ldr	r3, [pc, #336]	; (8002278 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800212e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002130:	4b52      	ldr	r3, [pc, #328]	; (800227c <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002138:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800213c:	4950      	ldr	r1, [pc, #320]	; (8002280 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800213e:	4613      	mov	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	440b      	add	r3, r1
 8002148:	330c      	adds	r3, #12
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d16e      	bne.n	8002230 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002152:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002156:	494a      	ldr	r1, [pc, #296]	; (8002280 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002158:	4613      	mov	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4413      	add	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	440b      	add	r3, r1
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002166:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800216a:	4945      	ldr	r1, [pc, #276]	; (8002280 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800216c:	4613      	mov	r3, r2
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	4413      	add	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	440b      	add	r3, r1
 8002176:	3310      	adds	r3, #16
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 800217c:	4b41      	ldr	r3, [pc, #260]	; (8002284 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d04c      	beq.n	8002220 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002186:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800218a:	493d      	ldr	r1, [pc, #244]	; (8002280 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800218c:	4613      	mov	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4413      	add	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	440b      	add	r3, r1
 8002196:	330d      	adds	r3, #13
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b01      	cmp	r3, #1
 800219e:	d124      	bne.n	80021ea <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80021a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021a4:	2101      	movs	r1, #1
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fdf2 	bl	8001d90 <UnlinkTimer>
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	f383 8810 	msr	PRIMASK, r3
}
 80021b6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80021b8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80021bc:	4930      	ldr	r1, [pc, #192]	; (8002280 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80021be:	4613      	mov	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	4413      	add	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	440b      	add	r3, r1
 80021c8:	3304      	adds	r3, #4
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021d0:	4611      	mov	r1, r2
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 fa32 	bl	800263c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80021d8:	4b27      	ldr	r3, [pc, #156]	; (8002278 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	22ca      	movs	r2, #202	; 0xca
 80021de:	625a      	str	r2, [r3, #36]	; 0x24
 80021e0:	4b25      	ldr	r3, [pc, #148]	; (8002278 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2253      	movs	r2, #83	; 0x53
 80021e6:	625a      	str	r2, [r3, #36]	; 0x24
 80021e8:	e012      	b.n	8002210 <HW_TS_RTC_Wakeup_Handler+0x114>
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f383 8810 	msr	PRIMASK, r3
}
 80021f4:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80021f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 f99a 	bl	8002534 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002200:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	22ca      	movs	r2, #202	; 0xca
 8002206:	625a      	str	r2, [r3, #36]	; 0x24
 8002208:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2253      	movs	r2, #83	; 0x53
 800220e:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002210:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002214:	69fa      	ldr	r2, [r7, #28]
 8002216:	4619      	mov	r1, r3
 8002218:	69b8      	ldr	r0, [r7, #24]
 800221a:	f000 fa95 	bl	8002748 <HW_TS_RTC_Int_AppNot>
 800221e:	e022      	b.n	8002266 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002220:	f7ff fed2 	bl	8001fc8 <RescheduleTimerList>
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002226:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f383 8810 	msr	PRIMASK, r3
}
 800222e:	e01a      	b.n	8002266 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002230:	bf00      	nop
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f8      	beq.n	8002232 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002240:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	b2da      	uxtb	r2, r3
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002250:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002252:	4b0d      	ldr	r3, [pc, #52]	; (8002288 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002254:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f383 8810 	msr	PRIMASK, r3
}
 8002264:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002266:	4b04      	ldr	r3, [pc, #16]	; (8002278 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	22ff      	movs	r2, #255	; 0xff
 800226c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800226e:	bf00      	nop
}
 8002270:	3728      	adds	r7, #40	; 0x28
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000648 	.word	0x20000648
 800227c:	2000040c 	.word	0x2000040c
 8002280:	2000037c 	.word	0x2000037c
 8002284:	20000414 	.word	0x20000414
 8002288:	58000800 	.word	0x58000800

0800228c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	6039      	str	r1, [r7, #0]
 8002296:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002298:	4b5e      	ldr	r3, [pc, #376]	; (8002414 <HW_TS_Init+0x188>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	22ca      	movs	r2, #202	; 0xca
 800229e:	625a      	str	r2, [r3, #36]	; 0x24
 80022a0:	4b5c      	ldr	r3, [pc, #368]	; (8002414 <HW_TS_Init+0x188>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2253      	movs	r2, #83	; 0x53
 80022a6:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80022a8:	4b5b      	ldr	r3, [pc, #364]	; (8002418 <HW_TS_Init+0x18c>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4a5a      	ldr	r2, [pc, #360]	; (8002418 <HW_TS_Init+0x18c>)
 80022ae:	f043 0320 	orr.w	r3, r3, #32
 80022b2:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80022b4:	4b58      	ldr	r3, [pc, #352]	; (8002418 <HW_TS_Init+0x18c>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	f1c3 0304 	rsb	r3, r3, #4
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4b55      	ldr	r3, [pc, #340]	; (800241c <HW_TS_Init+0x190>)
 80022c8:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80022ca:	4b53      	ldr	r3, [pc, #332]	; (8002418 <HW_TS_Init+0x18c>)
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80022d2:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80022d6:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	fa92 f2a2 	rbit	r2, r2
 80022de:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	2a00      	cmp	r2, #0
 80022e8:	d101      	bne.n	80022ee <HW_TS_Init+0x62>
  {
    return 32U;
 80022ea:	2220      	movs	r2, #32
 80022ec:	e003      	b.n	80022f6 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	fab2 f282 	clz	r2, r2
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	40d3      	lsrs	r3, r2
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	3301      	adds	r3, #1
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	4b48      	ldr	r3, [pc, #288]	; (8002420 <HW_TS_Init+0x194>)
 8002300:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002302:	4b45      	ldr	r3, [pc, #276]	; (8002418 <HW_TS_Init+0x18c>)
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	b29b      	uxth	r3, r3
 8002308:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800230c:	b29b      	uxth	r3, r3
 800230e:	3301      	adds	r3, #1
 8002310:	b29a      	uxth	r2, r3
 8002312:	4b44      	ldr	r3, [pc, #272]	; (8002424 <HW_TS_Init+0x198>)
 8002314:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002316:	4b43      	ldr	r3, [pc, #268]	; (8002424 <HW_TS_Init+0x198>)
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	3b01      	subs	r3, #1
 800231c:	4a40      	ldr	r2, [pc, #256]	; (8002420 <HW_TS_Init+0x194>)
 800231e:	7812      	ldrb	r2, [r2, #0]
 8002320:	fb02 f303 	mul.w	r3, r2, r3
 8002324:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002328:	4a3c      	ldr	r2, [pc, #240]	; (800241c <HW_TS_Init+0x190>)
 800232a:	7812      	ldrb	r2, [r2, #0]
 800232c:	40d3      	lsrs	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002336:	4293      	cmp	r3, r2
 8002338:	d904      	bls.n	8002344 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800233a:	4b3b      	ldr	r3, [pc, #236]	; (8002428 <HW_TS_Init+0x19c>)
 800233c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002340:	801a      	strh	r2, [r3, #0]
 8002342:	e003      	b.n	800234c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	b29a      	uxth	r2, r3
 8002348:	4b37      	ldr	r3, [pc, #220]	; (8002428 <HW_TS_Init+0x19c>)
 800234a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800234c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002350:	f7ff fb9c 	bl	8001a8c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002354:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002358:	f7ff fb84 	bl	8001a64 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d13d      	bne.n	80023de <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002362:	4b32      	ldr	r3, [pc, #200]	; (800242c <HW_TS_Init+0x1a0>)
 8002364:	2201      	movs	r2, #1
 8002366:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002368:	4b31      	ldr	r3, [pc, #196]	; (8002430 <HW_TS_Init+0x1a4>)
 800236a:	f04f 32ff 	mov.w	r2, #4294967295
 800236e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002370:	2300      	movs	r3, #0
 8002372:	77fb      	strb	r3, [r7, #31]
 8002374:	e00c      	b.n	8002390 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002376:	7ffa      	ldrb	r2, [r7, #31]
 8002378:	492e      	ldr	r1, [pc, #184]	; (8002434 <HW_TS_Init+0x1a8>)
 800237a:	4613      	mov	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	440b      	add	r3, r1
 8002384:	330c      	adds	r3, #12
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800238a:	7ffb      	ldrb	r3, [r7, #31]
 800238c:	3301      	adds	r3, #1
 800238e:	77fb      	strb	r3, [r7, #31]
 8002390:	7ffb      	ldrb	r3, [r7, #31]
 8002392:	2b05      	cmp	r3, #5
 8002394:	d9ef      	bls.n	8002376 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002396:	4b28      	ldr	r3, [pc, #160]	; (8002438 <HW_TS_Init+0x1ac>)
 8002398:	2206      	movs	r2, #6
 800239a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800239c:	4b1d      	ldr	r3, [pc, #116]	; (8002414 <HW_TS_Init+0x188>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	4b1c      	ldr	r3, [pc, #112]	; (8002414 <HW_TS_Init+0x188>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023aa:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80023ac:	4b19      	ldr	r3, [pc, #100]	; (8002414 <HW_TS_Init+0x188>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	4b17      	ldr	r3, [pc, #92]	; (8002414 <HW_TS_Init+0x188>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80023bc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80023be:	4b1f      	ldr	r3, [pc, #124]	; (800243c <HW_TS_Init+0x1b0>)
 80023c0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80023c4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80023c6:	2003      	movs	r0, #3
 80023c8:	f002 ff7b 	bl	80052c2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <HW_TS_Init+0x188>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	4b10      	ldr	r3, [pc, #64]	; (8002414 <HW_TS_Init+0x188>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	e009      	b.n	80023f2 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80023de:	4b0d      	ldr	r3, [pc, #52]	; (8002414 <HW_TS_Init+0x188>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d002      	beq.n	80023f2 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80023ec:	2003      	movs	r0, #3
 80023ee:	f002 ff5a 	bl	80052a6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80023f2:	4b08      	ldr	r3, [pc, #32]	; (8002414 <HW_TS_Init+0x188>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	22ff      	movs	r2, #255	; 0xff
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80023fa:	2200      	movs	r2, #0
 80023fc:	2103      	movs	r1, #3
 80023fe:	2003      	movs	r0, #3
 8002400:	f002 ff0f 	bl	8005222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002404:	2003      	movs	r0, #3
 8002406:	f002 ff26 	bl	8005256 <HAL_NVIC_EnableIRQ>

  return;
 800240a:	bf00      	nop
}
 800240c:	3720      	adds	r7, #32
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000648 	.word	0x20000648
 8002418:	40002800 	.word	0x40002800
 800241c:	20000415 	.word	0x20000415
 8002420:	20000416 	.word	0x20000416
 8002424:	20000418 	.word	0x20000418
 8002428:	2000041a 	.word	0x2000041a
 800242c:	20000414 	.word	0x20000414
 8002430:	20000410 	.word	0x20000410
 8002434:	2000037c 	.word	0x2000037c
 8002438:	2000040c 	.word	0x2000040c
 800243c:	58000800 	.word	0x58000800

08002440 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002440:	b480      	push	{r7}
 8002442:	b08b      	sub	sp, #44	; 0x2c
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	603b      	str	r3, [r7, #0]
 800244c:	4613      	mov	r3, r2
 800244e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002450:	2300      	movs	r3, #0
 8002452:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002456:	f3ef 8310 	mrs	r3, PRIMASK
 800245a:	61fb      	str	r3, [r7, #28]
  return(result);
 800245c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800245e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002460:	b672      	cpsid	i
}
 8002462:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002464:	e004      	b.n	8002470 <HW_TS_Create+0x30>
  {
    loop++;
 8002466:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800246a:	3301      	adds	r3, #1
 800246c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002470:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002474:	2b05      	cmp	r3, #5
 8002476:	d80c      	bhi.n	8002492 <HW_TS_Create+0x52>
 8002478:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800247c:	492c      	ldr	r1, [pc, #176]	; (8002530 <HW_TS_Create+0xf0>)
 800247e:	4613      	mov	r3, r2
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	4413      	add	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	440b      	add	r3, r1
 8002488:	330c      	adds	r3, #12
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1e9      	bne.n	8002466 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002492:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002496:	2b06      	cmp	r3, #6
 8002498:	d038      	beq.n	800250c <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800249a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800249e:	4924      	ldr	r1, [pc, #144]	; (8002530 <HW_TS_Create+0xf0>)
 80024a0:	4613      	mov	r3, r2
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	4413      	add	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	440b      	add	r3, r1
 80024aa:	330c      	adds	r3, #12
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	f383 8810 	msr	PRIMASK, r3
}
 80024ba:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80024bc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80024c0:	491b      	ldr	r1, [pc, #108]	; (8002530 <HW_TS_Create+0xf0>)
 80024c2:	4613      	mov	r3, r2
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	4413      	add	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	440b      	add	r3, r1
 80024cc:	3310      	adds	r3, #16
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80024d2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80024d6:	4916      	ldr	r1, [pc, #88]	; (8002530 <HW_TS_Create+0xf0>)
 80024d8:	4613      	mov	r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	4413      	add	r3, r2
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	440b      	add	r3, r1
 80024e2:	330d      	adds	r3, #13
 80024e4:	79fa      	ldrb	r2, [r7, #7]
 80024e6:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80024e8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80024ec:	4910      	ldr	r1, [pc, #64]	; (8002530 <HW_TS_Create+0xf0>)
 80024ee:	4613      	mov	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4413      	add	r3, r2
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	440b      	add	r3, r1
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002502:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8002504:	2300      	movs	r3, #0
 8002506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800250a:	e008      	b.n	800251e <HW_TS_Create+0xde>
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f383 8810 	msr	PRIMASK, r3
}
 8002516:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002518:	2301      	movs	r3, #1
 800251a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 800251e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002522:	4618      	mov	r0, r3
 8002524:	372c      	adds	r7, #44	; 0x2c
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	2000037c 	.word	0x2000037c

08002534 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800253e:	f3ef 8310 	mrs	r3, PRIMASK
 8002542:	60fb      	str	r3, [r7, #12]
  return(result);
 8002544:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002546:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002548:	b672      	cpsid	i
}
 800254a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800254c:	2003      	movs	r0, #3
 800254e:	f002 fe90 	bl	8005272 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002552:	4b34      	ldr	r3, [pc, #208]	; (8002624 <HW_TS_Stop+0xf0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	22ca      	movs	r2, #202	; 0xca
 8002558:	625a      	str	r2, [r3, #36]	; 0x24
 800255a:	4b32      	ldr	r3, [pc, #200]	; (8002624 <HW_TS_Stop+0xf0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2253      	movs	r2, #83	; 0x53
 8002560:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002562:	79fa      	ldrb	r2, [r7, #7]
 8002564:	4930      	ldr	r1, [pc, #192]	; (8002628 <HW_TS_Stop+0xf4>)
 8002566:	4613      	mov	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	4413      	add	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	440b      	add	r3, r1
 8002570:	330c      	adds	r3, #12
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d142      	bne.n	8002600 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff fc06 	bl	8001d90 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002584:	4b29      	ldr	r3, [pc, #164]	; (800262c <HW_TS_Stop+0xf8>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800258a:	7cfb      	ldrb	r3, [r7, #19]
 800258c:	2b06      	cmp	r3, #6
 800258e:	d12f      	bne.n	80025f0 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002590:	4b27      	ldr	r3, [pc, #156]	; (8002630 <HW_TS_Stop+0xfc>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259c:	d107      	bne.n	80025ae <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800259e:	bf00      	nop
 80025a0:	4b20      	ldr	r3, [pc, #128]	; (8002624 <HW_TS_Stop+0xf0>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f003 0304 	and.w	r3, r3, #4
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f8      	bne.n	80025a0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80025ae:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <HW_TS_Stop+0xf0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <HW_TS_Stop+0xf0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025bc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80025be:	bf00      	nop
 80025c0:	4b18      	ldr	r3, [pc, #96]	; (8002624 <HW_TS_Stop+0xf0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	f003 0304 	and.w	r3, r3, #4
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f8      	beq.n	80025c0 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80025ce:	4b15      	ldr	r3, [pc, #84]	; (8002624 <HW_TS_Stop+0xf0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	4b13      	ldr	r3, [pc, #76]	; (8002624 <HW_TS_Stop+0xf0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80025de:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80025e0:	4b14      	ldr	r3, [pc, #80]	; (8002634 <HW_TS_Stop+0x100>)
 80025e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80025e6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80025e8:	2003      	movs	r0, #3
 80025ea:	f002 fe6a 	bl	80052c2 <HAL_NVIC_ClearPendingIRQ>
 80025ee:	e007      	b.n	8002600 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <HW_TS_Stop+0x104>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	7cfa      	ldrb	r2, [r7, #19]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80025fc:	f7ff fce4 	bl	8001fc8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <HW_TS_Stop+0xf0>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	22ff      	movs	r2, #255	; 0xff
 8002606:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002608:	2003      	movs	r0, #3
 800260a:	f002 fe24 	bl	8005256 <HAL_NVIC_EnableIRQ>
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	f383 8810 	msr	PRIMASK, r3
}
 8002618:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800261a:	bf00      	nop
}
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000648 	.word	0x20000648
 8002628:	2000037c 	.word	0x2000037c
 800262c:	2000040c 	.word	0x2000040c
 8002630:	40002800 	.word	0x40002800
 8002634:	58000800 	.word	0x58000800
 8002638:	2000040d 	.word	0x2000040d

0800263c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	6039      	str	r1, [r7, #0]
 8002646:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002648:	79fa      	ldrb	r2, [r7, #7]
 800264a:	493b      	ldr	r1, [pc, #236]	; (8002738 <HW_TS_Start+0xfc>)
 800264c:	4613      	mov	r3, r2
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4413      	add	r3, r2
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	440b      	add	r3, r1
 8002656:	330c      	adds	r3, #12
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b02      	cmp	r3, #2
 800265e:	d103      	bne.n	8002668 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff ff66 	bl	8002534 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002668:	f3ef 8310 	mrs	r3, PRIMASK
 800266c:	60fb      	str	r3, [r7, #12]
  return(result);
 800266e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002670:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002672:	b672      	cpsid	i
}
 8002674:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002676:	2003      	movs	r0, #3
 8002678:	f002 fdfb 	bl	8005272 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800267c:	4b2f      	ldr	r3, [pc, #188]	; (800273c <HW_TS_Start+0x100>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	22ca      	movs	r2, #202	; 0xca
 8002682:	625a      	str	r2, [r3, #36]	; 0x24
 8002684:	4b2d      	ldr	r3, [pc, #180]	; (800273c <HW_TS_Start+0x100>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2253      	movs	r2, #83	; 0x53
 800268a:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800268c:	79fa      	ldrb	r2, [r7, #7]
 800268e:	492a      	ldr	r1, [pc, #168]	; (8002738 <HW_TS_Start+0xfc>)
 8002690:	4613      	mov	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4413      	add	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	440b      	add	r3, r1
 800269a:	330c      	adds	r3, #12
 800269c:	2202      	movs	r2, #2
 800269e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80026a0:	79fa      	ldrb	r2, [r7, #7]
 80026a2:	4925      	ldr	r1, [pc, #148]	; (8002738 <HW_TS_Start+0xfc>)
 80026a4:	4613      	mov	r3, r2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4413      	add	r3, r2
 80026aa:	00db      	lsls	r3, r3, #3
 80026ac:	440b      	add	r3, r1
 80026ae:	3308      	adds	r3, #8
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80026b4:	79fa      	ldrb	r2, [r7, #7]
 80026b6:	4920      	ldr	r1, [pc, #128]	; (8002738 <HW_TS_Start+0xfc>)
 80026b8:	4613      	mov	r3, r2
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	4413      	add	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	440b      	add	r3, r1
 80026c2:	3304      	adds	r3, #4
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80026c8:	79fb      	ldrb	r3, [r7, #7]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fab6 	bl	8001c3c <linkTimer>
 80026d0:	4603      	mov	r3, r0
 80026d2:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80026d4:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <HW_TS_Start+0x104>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80026da:	4b1a      	ldr	r3, [pc, #104]	; (8002744 <HW_TS_Start+0x108>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	7c7a      	ldrb	r2, [r7, #17]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d002      	beq.n	80026ec <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80026e6:	f7ff fc6f 	bl	8001fc8 <RescheduleTimerList>
 80026ea:	e013      	b.n	8002714 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80026ec:	79fa      	ldrb	r2, [r7, #7]
 80026ee:	4912      	ldr	r1, [pc, #72]	; (8002738 <HW_TS_Start+0xfc>)
 80026f0:	4613      	mov	r3, r2
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	4413      	add	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	440b      	add	r3, r1
 80026fa:	3308      	adds	r3, #8
 80026fc:	6819      	ldr	r1, [r3, #0]
 80026fe:	8a7b      	ldrh	r3, [r7, #18]
 8002700:	79fa      	ldrb	r2, [r7, #7]
 8002702:	1ac9      	subs	r1, r1, r3
 8002704:	480c      	ldr	r0, [pc, #48]	; (8002738 <HW_TS_Start+0xfc>)
 8002706:	4613      	mov	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4413      	add	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4403      	add	r3, r0
 8002710:	3308      	adds	r3, #8
 8002712:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002714:	4b09      	ldr	r3, [pc, #36]	; (800273c <HW_TS_Start+0x100>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	22ff      	movs	r2, #255	; 0xff
 800271a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800271c:	2003      	movs	r0, #3
 800271e:	f002 fd9a 	bl	8005256 <HAL_NVIC_EnableIRQ>
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	f383 8810 	msr	PRIMASK, r3
}
 800272c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800272e:	bf00      	nop
}
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	2000037c 	.word	0x2000037c
 800273c:	20000648 	.word	0x20000648
 8002740:	2000040c 	.word	0x2000040c
 8002744:	2000040d 	.word	0x2000040d

08002748 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	460b      	mov	r3, r1
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4798      	blx	r3

  return;
 800275a:	bf00      	nop
}
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607b      	str	r3, [r7, #4]
 800276e:	4603      	mov	r3, r0
 8002770:	73fb      	strb	r3, [r7, #15]
 8002772:	4613      	mov	r3, r2
 8002774:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10c      	bne.n	8002796 <HW_UART_Receive_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 800277c:	4a08      	ldr	r2, [pc, #32]	; (80027a0 <HW_UART_Receive_IT+0x3c>)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	4b08      	ldr	r3, [pc, #32]	; (80027a4 <HW_UART_Receive_IT+0x40>)
 8002784:	4a08      	ldr	r2, [pc, #32]	; (80027a8 <HW_UART_Receive_IT+0x44>)
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	89bb      	ldrh	r3, [r7, #12]
 800278a:	461a      	mov	r2, r3
 800278c:	68b9      	ldr	r1, [r7, #8]
 800278e:	4805      	ldr	r0, [pc, #20]	; (80027a4 <HW_UART_Receive_IT+0x40>)
 8002790:	f005 fbb2 	bl	8007ef8 <HAL_UART_Receive_IT>
            break;
 8002794:	e000      	b.n	8002798 <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8002796:	bf00      	nop
    }

    return;
 8002798:	bf00      	nop
}
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	2000041c 	.word	0x2000041c
 80027a4:	200004f4 	.word	0x200004f4
 80027a8:	40013800 	.word	0x40013800

080027ac <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	607b      	str	r3, [r7, #4]
 80027b6:	4603      	mov	r3, r0
 80027b8:	73fb      	strb	r3, [r7, #15]
 80027ba:	4613      	mov	r3, r2
 80027bc:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80027be:	2300      	movs	r3, #0
 80027c0:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80027c2:	2300      	movs	r3, #0
 80027c4:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10e      	bne.n	80027ea <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80027cc:	4a17      	ldr	r2, [pc, #92]	; (800282c <HW_UART_Transmit_DMA+0x80>)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80027d2:	4b17      	ldr	r3, [pc, #92]	; (8002830 <HW_UART_Transmit_DMA+0x84>)
 80027d4:	4a17      	ldr	r2, [pc, #92]	; (8002834 <HW_UART_Transmit_DMA+0x88>)
 80027d6:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80027d8:	89bb      	ldrh	r3, [r7, #12]
 80027da:	461a      	mov	r2, r3
 80027dc:	68b9      	ldr	r1, [r7, #8]
 80027de:	4814      	ldr	r0, [pc, #80]	; (8002830 <HW_UART_Transmit_DMA+0x84>)
 80027e0:	f005 fbd6 	bl	8007f90 <HAL_UART_Transmit_DMA>
 80027e4:	4603      	mov	r3, r0
 80027e6:	75fb      	strb	r3, [r7, #23]
            break;
 80027e8:	e000      	b.n	80027ec <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80027ea:	bf00      	nop
    }

    switch (hal_status)
 80027ec:	7dfb      	ldrb	r3, [r7, #23]
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d816      	bhi.n	8002820 <HW_UART_Transmit_DMA+0x74>
 80027f2:	a201      	add	r2, pc, #4	; (adr r2, 80027f8 <HW_UART_Transmit_DMA+0x4c>)
 80027f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f8:	08002809 	.word	0x08002809
 80027fc:	0800280f 	.word	0x0800280f
 8002800:	08002815 	.word	0x08002815
 8002804:	0800281b 	.word	0x0800281b
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002808:	2300      	movs	r3, #0
 800280a:	75bb      	strb	r3, [r7, #22]
            break;
 800280c:	e009      	b.n	8002822 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800280e:	2301      	movs	r3, #1
 8002810:	75bb      	strb	r3, [r7, #22]
            break;
 8002812:	e006      	b.n	8002822 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002814:	2302      	movs	r3, #2
 8002816:	75bb      	strb	r3, [r7, #22]
            break;
 8002818:	e003      	b.n	8002822 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800281a:	2303      	movs	r3, #3
 800281c:	75bb      	strb	r3, [r7, #22]
            break;
 800281e:	e000      	b.n	8002822 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002820:	bf00      	nop
    }

    return hw_status;
 8002822:	7dbb      	ldrb	r3, [r7, #22]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000420 	.word	0x20000420
 8002830:	200004f4 	.word	0x200004f4
 8002834:	40013800 	.word	0x40013800

08002838 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	461a      	mov	r2, r3
 8002846:	4b09      	ldr	r3, [pc, #36]	; (800286c <HAL_UART_RxCpltCallback+0x34>)
 8002848:	429a      	cmp	r2, r3
 800284a:	d107      	bne.n	800285c <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 800284c:	4b08      	ldr	r3, [pc, #32]	; (8002870 <HAL_UART_RxCpltCallback+0x38>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_UART_RxCpltCallback+0x38>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4798      	blx	r3
            }
            break;
 800285a:	e001      	b.n	8002860 <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 800285c:	bf00      	nop
 800285e:	e000      	b.n	8002862 <HAL_UART_RxCpltCallback+0x2a>
            break;
 8002860:	bf00      	nop
    }

    return;
 8002862:	bf00      	nop
}
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40013800 	.word	0x40013800
 8002870:	2000041c 	.word	0x2000041c

08002874 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	461a      	mov	r2, r3
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <HAL_UART_TxCpltCallback+0x34>)
 8002884:	429a      	cmp	r2, r3
 8002886:	d107      	bne.n	8002898 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <HAL_UART_TxCpltCallback+0x38>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_UART_TxCpltCallback+0x38>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4798      	blx	r3
            }
            break;
 8002896:	e001      	b.n	800289c <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002898:	bf00      	nop
 800289a:	e000      	b.n	800289e <HAL_UART_TxCpltCallback+0x2a>
            break;
 800289c:	bf00      	nop
    }

    return;
 800289e:	bf00      	nop
}
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40013800 	.word	0x40013800
 80028ac:	20000420 	.word	0x20000420

080028b0 <LL_RCC_LSE_SetDriveCapability>:
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80028b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c0:	f023 0218 	bic.w	r2, r3, #24
 80028c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <LL_AHB1_GRP1_EnableClock>:
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80028e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80028f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4013      	ands	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002900:	68fb      	ldr	r3, [r7, #12]
}
 8002902:	bf00      	nop
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <LL_AHB2_GRP1_EnableClock>:
{
 800290e:	b480      	push	{r7}
 8002910:	b085      	sub	sp, #20
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800291c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4313      	orrs	r3, r2
 8002924:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4013      	ands	r3, r2
 8002930:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002932:	68fb      	ldr	r3, [r7, #12]
}
 8002934:	bf00      	nop
 8002936:	3714      	adds	r7, #20
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr

08002940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002944:	f002 fa94 	bl	8004e70 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002948:	f7fe fd48 	bl	80013dc <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800294c:	f000 f812 	bl	8002974 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002950:	f000 f86c 	bl	8002a2c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002954:	f000 f88a 	bl	8002a6c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002958:	f000 f943 	bl	8002be2 <MX_GPIO_Init>
  MX_DMA_Init();
 800295c:	f000 f924 	bl	8002ba8 <MX_DMA_Init>
  MX_RTC_Init();
 8002960:	f000 f8ee 	bl	8002b40 <MX_RTC_Init>
  MX_RF_Init();
 8002964:	f000 f8e4 	bl	8002b30 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002968:	f7fe fd46 	bl	80013f8 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 800296c:	f7fe ff85 	bl	800187a <MX_APPE_Process>
 8002970:	e7fc      	b.n	800296c <main+0x2c>
	...

08002974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b09a      	sub	sp, #104	; 0x68
 8002978:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800297a:	f107 0320 	add.w	r3, r7, #32
 800297e:	2248      	movs	r2, #72	; 0x48
 8002980:	2100      	movs	r1, #0
 8002982:	4618      	mov	r0, r3
 8002984:	f00b fa74 	bl	800de70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002988:	1d3b      	adds	r3, r7, #4
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	605a      	str	r2, [r3, #4]
 8002990:	609a      	str	r2, [r3, #8]
 8002992:	60da      	str	r2, [r3, #12]
 8002994:	611a      	str	r2, [r3, #16]
 8002996:	615a      	str	r2, [r3, #20]
 8002998:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800299a:	f003 fa7f 	bl	8005e9c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800299e:	2000      	movs	r0, #0
 80029a0:	f7ff ff86 	bl	80028b0 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029a4:	4b20      	ldr	r3, [pc, #128]	; (8002a28 <SystemClock_Config+0xb4>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029ac:	4a1e      	ldr	r2, [pc, #120]	; (8002a28 <SystemClock_Config+0xb4>)
 80029ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	4b1c      	ldr	r3, [pc, #112]	; (8002a28 <SystemClock_Config+0xb4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029bc:	603b      	str	r3, [r7, #0]
 80029be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80029c0:	2307      	movs	r3, #7
 80029c2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80029c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80029ca:	2301      	movs	r3, #1
 80029cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80029ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80029d4:	2340      	movs	r3, #64	; 0x40
 80029d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80029d8:	2300      	movs	r3, #0
 80029da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029dc:	f107 0320 	add.w	r3, r7, #32
 80029e0:	4618      	mov	r0, r3
 80029e2:	f003 fdef 	bl	80065c4 <HAL_RCC_OscConfig>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80029ec:	f000 f906 	bl	8002bfc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80029f0:	236f      	movs	r3, #111	; 0x6f
 80029f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80029f4:	2302      	movs	r3, #2
 80029f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029fc:	2300      	movs	r3, #0
 80029fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002a0c:	1d3b      	adds	r3, r7, #4
 8002a0e:	2101      	movs	r1, #1
 8002a10:	4618      	mov	r0, r3
 8002a12:	f004 f94b 	bl	8006cac <HAL_RCC_ClockConfig>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002a1c:	f000 f8ee 	bl	8002bfc <Error_Handler>
  }
}
 8002a20:	bf00      	nop
 8002a22:	3768      	adds	r7, #104	; 0x68
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	58000400 	.word	0x58000400

08002a2c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b094      	sub	sp, #80	; 0x50
 8002a30:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a32:	463b      	mov	r3, r7
 8002a34:	2250      	movs	r2, #80	; 0x50
 8002a36:	2100      	movs	r1, #0
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f00b fa19 	bl	800de70 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002a3e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002a42:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002a44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002a48:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002a4e:	2310      	movs	r3, #16
 8002a50:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a52:	463b      	mov	r3, r7
 8002a54:	4618      	mov	r0, r3
 8002a56:	f004 fd66 	bl	8007526 <HAL_RCCEx_PeriphCLKConfig>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002a60:	f000 f8cc 	bl	8002bfc <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002a64:	bf00      	nop
 8002a66:	3750      	adds	r7, #80	; 0x50
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <MX_IPCC_Init+0x20>)
 8002a72:	4a07      	ldr	r2, [pc, #28]	; (8002a90 <MX_IPCC_Init+0x24>)
 8002a74:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002a76:	4805      	ldr	r0, [pc, #20]	; (8002a8c <MX_IPCC_Init+0x20>)
 8002a78:	f003 f98a 	bl	8005d90 <HAL_IPCC_Init>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002a82:	f000 f8bb 	bl	8002bfc <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000424 	.word	0x20000424
 8002a90:	58000c00 	.word	0x58000c00

08002a94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a98:	4b23      	ldr	r3, [pc, #140]	; (8002b28 <MX_USART1_UART_Init+0x94>)
 8002a9a:	4a24      	ldr	r2, [pc, #144]	; (8002b2c <MX_USART1_UART_Init+0x98>)
 8002a9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a9e:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <MX_USART1_UART_Init+0x94>)
 8002aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002aa4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002aa6:	4b20      	ldr	r3, [pc, #128]	; (8002b28 <MX_USART1_UART_Init+0x94>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002aac:	4b1e      	ldr	r3, [pc, #120]	; (8002b28 <MX_USART1_UART_Init+0x94>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ab2:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <MX_USART1_UART_Init+0x94>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <MX_USART1_UART_Init+0x94>)
 8002aba:	220c      	movs	r2, #12
 8002abc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002abe:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <MX_USART1_UART_Init+0x94>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002ac4:	4b18      	ldr	r3, [pc, #96]	; (8002b28 <MX_USART1_UART_Init+0x94>)
 8002ac6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002aca:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002acc:	4b16      	ldr	r3, [pc, #88]	; (8002b28 <MX_USART1_UART_Init+0x94>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ad2:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <MX_USART1_UART_Init+0x94>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ad8:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <MX_USART1_UART_Init+0x94>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ade:	4812      	ldr	r0, [pc, #72]	; (8002b28 <MX_USART1_UART_Init+0x94>)
 8002ae0:	f005 f9ba 	bl	8007e58 <HAL_UART_Init>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002aea:	f000 f887 	bl	8002bfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002aee:	2100      	movs	r1, #0
 8002af0:	480d      	ldr	r0, [pc, #52]	; (8002b28 <MX_USART1_UART_Init+0x94>)
 8002af2:	f007 fa0c 	bl	8009f0e <HAL_UARTEx_SetTxFifoThreshold>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002afc:	f000 f87e 	bl	8002bfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b00:	2100      	movs	r1, #0
 8002b02:	4809      	ldr	r0, [pc, #36]	; (8002b28 <MX_USART1_UART_Init+0x94>)
 8002b04:	f007 fa41 	bl	8009f8a <HAL_UARTEx_SetRxFifoThreshold>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002b0e:	f000 f875 	bl	8002bfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002b12:	4805      	ldr	r0, [pc, #20]	; (8002b28 <MX_USART1_UART_Init+0x94>)
 8002b14:	f007 f9c2 	bl	8009e9c <HAL_UARTEx_DisableFifoMode>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002b1e:	f000 f86d 	bl	8002bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	200004f4 	.word	0x200004f4
 8002b2c:	40013800 	.word	0x40013800

08002b30 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
	...

08002b40 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002b44:	4b16      	ldr	r3, [pc, #88]	; (8002ba0 <MX_RTC_Init+0x60>)
 8002b46:	4a17      	ldr	r2, [pc, #92]	; (8002ba4 <MX_RTC_Init+0x64>)
 8002b48:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002b4a:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <MX_RTC_Init+0x60>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002b50:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <MX_RTC_Init+0x60>)
 8002b52:	220f      	movs	r2, #15
 8002b54:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002b56:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <MX_RTC_Init+0x60>)
 8002b58:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002b5c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b5e:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <MX_RTC_Init+0x60>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002b64:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <MX_RTC_Init+0x60>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002b6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ba0 <MX_RTC_Init+0x60>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <MX_RTC_Init+0x60>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002b76:	480a      	ldr	r0, [pc, #40]	; (8002ba0 <MX_RTC_Init+0x60>)
 8002b78:	f004 ff5c 	bl	8007a34 <HAL_RTC_Init>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002b82:	f000 f83b 	bl	8002bfc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002b86:	2200      	movs	r2, #0
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4805      	ldr	r0, [pc, #20]	; (8002ba0 <MX_RTC_Init+0x60>)
 8002b8c:	f005 f852 	bl	8007c34 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002b96:	f000 f831 	bl	8002bfc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002b9a:	bf00      	nop
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	20000648 	.word	0x20000648
 8002ba4:	40002800 	.word	0x40002800

08002ba8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002bac:	2004      	movs	r0, #4
 8002bae:	f7ff fe95 	bl	80028dc <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002bb2:	2002      	movs	r0, #2
 8002bb4:	f7ff fe92 	bl	80028dc <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002bb8:	2001      	movs	r0, #1
 8002bba:	f7ff fe8f 	bl	80028dc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	210f      	movs	r1, #15
 8002bc2:	200e      	movs	r0, #14
 8002bc4:	f002 fb2d 	bl	8005222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002bc8:	200e      	movs	r0, #14
 8002bca:	f002 fb44 	bl	8005256 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8002bce:	2200      	movs	r2, #0
 8002bd0:	210f      	movs	r1, #15
 8002bd2:	203a      	movs	r0, #58	; 0x3a
 8002bd4:	f002 fb25 	bl	8005222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002bd8:	203a      	movs	r0, #58	; 0x3a
 8002bda:	f002 fb3c 	bl	8005256 <HAL_NVIC_EnableIRQ>

}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002be6:	2004      	movs	r0, #4
 8002be8:	f7ff fe91 	bl	800290e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bec:	2001      	movs	r0, #1
 8002bee:	f7ff fe8e 	bl	800290e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf2:	2002      	movs	r0, #2
 8002bf4:	f7ff fe8b 	bl	800290e <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002bf8:	bf00      	nop
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <LL_RCC_EnableRTC>:
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c22:	bf00      	nop
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_AHB2_GRP1_EnableClock>:
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002c34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c50:	68fb      	ldr	r3, [r7, #12]
}
 8002c52:	bf00      	nop
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <LL_AHB3_GRP1_EnableClock>:
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b085      	sub	sp, #20
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c7a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c82:	68fb      	ldr	r3, [r7, #12]
}
 8002c84:	bf00      	nop
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <LL_APB1_GRP1_EnableClock>:
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
}
 8002cb6:	bf00      	nop
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <LL_APB1_GRP2_EnableClock>:
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b085      	sub	sp, #20
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002cd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cde:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
}
 8002ce8:	bf00      	nop
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <LL_APB2_GRP1_EnableClock>:
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4013      	ands	r3, r2
 8002d16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d18:	68fb      	ldr	r3, [r7, #12]
}
 8002d1a:	bf00      	nop
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002d2a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002d2e:	f7ff ff96 	bl	8002c5e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002d32:	2200      	movs	r2, #0
 8002d34:	2100      	movs	r1, #0
 8002d36:	202e      	movs	r0, #46	; 0x2e
 8002d38:	f002 fa73 	bl	8005222 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002d3c:	202e      	movs	r0, #46	; 0x2e
 8002d3e:	f002 fa8a 	bl	8005256 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a0d      	ldr	r2, [pc, #52]	; (8002d8c <HAL_IPCC_MspInit+0x44>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d113      	bne.n	8002d82 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002d5a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002d5e:	f7ff ff7e 	bl	8002c5e <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002d62:	2200      	movs	r2, #0
 8002d64:	2100      	movs	r1, #0
 8002d66:	202c      	movs	r0, #44	; 0x2c
 8002d68:	f002 fa5b 	bl	8005222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002d6c:	202c      	movs	r0, #44	; 0x2c
 8002d6e:	f002 fa72 	bl	8005256 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002d72:	2200      	movs	r2, #0
 8002d74:	2100      	movs	r1, #0
 8002d76:	202d      	movs	r0, #45	; 0x2d
 8002d78:	f002 fa53 	bl	8005222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002d7c:	202d      	movs	r0, #45	; 0x2d
 8002d7e:	f002 fa6a 	bl	8005256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	58000c00 	.word	0x58000c00

08002d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b0a0      	sub	sp, #128	; 0x80
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d98:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002da8:	f107 030c 	add.w	r3, r7, #12
 8002dac:	2250      	movs	r2, #80	; 0x50
 8002dae:	2100      	movs	r1, #0
 8002db0:	4618      	mov	r0, r3
 8002db2:	f00b f85d 	bl	800de70 <memset>
  if(huart->Instance==LPUART1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a68      	ldr	r2, [pc, #416]	; (8002f5c <HAL_UART_MspInit+0x1cc>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d16e      	bne.n	8002e9e <HAL_UART_MspInit+0x10e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dc8:	f107 030c 	add.w	r3, r7, #12
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f004 fbaa 	bl	8007526 <HAL_RCCEx_PeriphCLKConfig>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002dd8:	f7ff ff10 	bl	8002bfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002ddc:	2001      	movs	r0, #1
 8002dde:	f7ff ff70 	bl	8002cc2 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de2:	2001      	movs	r0, #1
 8002de4:	f7ff ff22 	bl	8002c2c <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002de8:	230c      	movs	r3, #12
 8002dea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dec:	2302      	movs	r3, #2
 8002dee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df4:	2303      	movs	r3, #3
 8002df6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002df8:	2308      	movs	r3, #8
 8002dfa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e00:	4619      	mov	r1, r3
 8002e02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e06:	f002 fdff 	bl	8005a08 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8002e0a:	4b55      	ldr	r3, [pc, #340]	; (8002f60 <HAL_UART_MspInit+0x1d0>)
 8002e0c:	4a55      	ldr	r2, [pc, #340]	; (8002f64 <HAL_UART_MspInit+0x1d4>)
 8002e0e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002e10:	4b53      	ldr	r3, [pc, #332]	; (8002f60 <HAL_UART_MspInit+0x1d0>)
 8002e12:	2211      	movs	r2, #17
 8002e14:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e16:	4b52      	ldr	r3, [pc, #328]	; (8002f60 <HAL_UART_MspInit+0x1d0>)
 8002e18:	2210      	movs	r2, #16
 8002e1a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e1c:	4b50      	ldr	r3, [pc, #320]	; (8002f60 <HAL_UART_MspInit+0x1d0>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e22:	4b4f      	ldr	r3, [pc, #316]	; (8002f60 <HAL_UART_MspInit+0x1d0>)
 8002e24:	2280      	movs	r2, #128	; 0x80
 8002e26:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e28:	4b4d      	ldr	r3, [pc, #308]	; (8002f60 <HAL_UART_MspInit+0x1d0>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e2e:	4b4c      	ldr	r3, [pc, #304]	; (8002f60 <HAL_UART_MspInit+0x1d0>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002e34:	4b4a      	ldr	r3, [pc, #296]	; (8002f60 <HAL_UART_MspInit+0x1d0>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e3a:	4b49      	ldr	r3, [pc, #292]	; (8002f60 <HAL_UART_MspInit+0x1d0>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002e40:	4847      	ldr	r0, [pc, #284]	; (8002f60 <HAL_UART_MspInit+0x1d0>)
 8002e42:	f002 fa4d 	bl	80052e0 <HAL_DMA_Init>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002e4c:	f7ff fed6 	bl	8002bfc <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 8002e50:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8002e54:	65fb      	str	r3, [r7, #92]	; 0x5c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8002e56:	2300      	movs	r3, #0
 8002e58:	663b      	str	r3, [r7, #96]	; 0x60
    pSyncConfig.SyncEnable = DISABLE;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    pSyncConfig.EventEnable = DISABLE;
 8002e60:	2300      	movs	r3, #0
 8002e62:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
    pSyncConfig.RequestNumber = 1;
 8002e66:	2301      	movs	r3, #1
 8002e68:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 8002e6a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e6e:	4619      	mov	r1, r3
 8002e70:	483b      	ldr	r0, [pc, #236]	; (8002f60 <HAL_UART_MspInit+0x1d0>)
 8002e72:	f002 fd67 	bl	8005944 <HAL_DMAEx_ConfigMuxSync>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8002e7c:	f7ff febe 	bl	8002bfc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a37      	ldr	r2, [pc, #220]	; (8002f60 <HAL_UART_MspInit+0x1d0>)
 8002e84:	67da      	str	r2, [r3, #124]	; 0x7c
 8002e86:	4a36      	ldr	r2, [pc, #216]	; (8002f60 <HAL_UART_MspInit+0x1d0>)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	2100      	movs	r1, #0
 8002e90:	2025      	movs	r0, #37	; 0x25
 8002e92:	f002 f9c6 	bl	8005222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002e96:	2025      	movs	r0, #37	; 0x25
 8002e98:	f002 f9dd 	bl	8005256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e9c:	e05a      	b.n	8002f54 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART1)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a31      	ldr	r2, [pc, #196]	; (8002f68 <HAL_UART_MspInit+0x1d8>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d155      	bne.n	8002f54 <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002eac:	2300      	movs	r3, #0
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002eb0:	f107 030c 	add.w	r3, r7, #12
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f004 fb36 	bl	8007526 <HAL_RCCEx_PeriphCLKConfig>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <HAL_UART_MspInit+0x134>
      Error_Handler();
 8002ec0:	f7ff fe9c 	bl	8002bfc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ec4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ec8:	f7ff ff14 	bl	8002cf4 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ecc:	2002      	movs	r0, #2
 8002ece:	f7ff fead 	bl	8002c2c <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ed2:	23c0      	movs	r3, #192	; 0xc0
 8002ed4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002eda:	2301      	movs	r3, #1
 8002edc:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ee2:	2307      	movs	r3, #7
 8002ee4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002eea:	4619      	mov	r1, r3
 8002eec:	481f      	ldr	r0, [pc, #124]	; (8002f6c <HAL_UART_MspInit+0x1dc>)
 8002eee:	f002 fd8b 	bl	8005a08 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8002ef2:	4b1f      	ldr	r3, [pc, #124]	; (8002f70 <HAL_UART_MspInit+0x1e0>)
 8002ef4:	4a1f      	ldr	r2, [pc, #124]	; (8002f74 <HAL_UART_MspInit+0x1e4>)
 8002ef6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002ef8:	4b1d      	ldr	r3, [pc, #116]	; (8002f70 <HAL_UART_MspInit+0x1e0>)
 8002efa:	220f      	movs	r2, #15
 8002efc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002efe:	4b1c      	ldr	r3, [pc, #112]	; (8002f70 <HAL_UART_MspInit+0x1e0>)
 8002f00:	2210      	movs	r2, #16
 8002f02:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f04:	4b1a      	ldr	r3, [pc, #104]	; (8002f70 <HAL_UART_MspInit+0x1e0>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f0a:	4b19      	ldr	r3, [pc, #100]	; (8002f70 <HAL_UART_MspInit+0x1e0>)
 8002f0c:	2280      	movs	r2, #128	; 0x80
 8002f0e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f10:	4b17      	ldr	r3, [pc, #92]	; (8002f70 <HAL_UART_MspInit+0x1e0>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f16:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <HAL_UART_MspInit+0x1e0>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002f1c:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <HAL_UART_MspInit+0x1e0>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f22:	4b13      	ldr	r3, [pc, #76]	; (8002f70 <HAL_UART_MspInit+0x1e0>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002f28:	4811      	ldr	r0, [pc, #68]	; (8002f70 <HAL_UART_MspInit+0x1e0>)
 8002f2a:	f002 f9d9 	bl	80052e0 <HAL_DMA_Init>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8002f34:	f7ff fe62 	bl	8002bfc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a0d      	ldr	r2, [pc, #52]	; (8002f70 <HAL_UART_MspInit+0x1e0>)
 8002f3c:	67da      	str	r2, [r3, #124]	; 0x7c
 8002f3e:	4a0c      	ldr	r2, [pc, #48]	; (8002f70 <HAL_UART_MspInit+0x1e0>)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002f44:	2200      	movs	r2, #0
 8002f46:	2100      	movs	r1, #0
 8002f48:	2024      	movs	r0, #36	; 0x24
 8002f4a:	f002 f96a 	bl	8005222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f4e:	2024      	movs	r0, #36	; 0x24
 8002f50:	f002 f981 	bl	8005256 <HAL_NVIC_EnableIRQ>
}
 8002f54:	bf00      	nop
 8002f56:	3780      	adds	r7, #128	; 0x80
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40008000 	.word	0x40008000
 8002f60:	20000588 	.word	0x20000588
 8002f64:	40020044 	.word	0x40020044
 8002f68:	40013800 	.word	0x40013800
 8002f6c:	48000400 	.word	0x48000400
 8002f70:	200005e8 	.word	0x200005e8
 8002f74:	40020444 	.word	0x40020444

08002f78 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b096      	sub	sp, #88	; 0x58
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f80:	f107 0308 	add.w	r3, r7, #8
 8002f84:	2250      	movs	r2, #80	; 0x50
 8002f86:	2100      	movs	r1, #0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f00a ff71 	bl	800de70 <memset>
  if(hrtc->Instance==RTC)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a14      	ldr	r2, [pc, #80]	; (8002fe4 <HAL_RTC_MspInit+0x6c>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d120      	bne.n	8002fda <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002f98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f9c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fa2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fa4:	f107 0308 	add.w	r3, r7, #8
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f004 fabc 	bl	8007526 <HAL_RCCEx_PeriphCLKConfig>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002fb4:	f7ff fe22 	bl	8002bfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002fb8:	f7ff fe27 	bl	8002c0a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002fbc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002fc0:	f7ff fe66 	bl	8002c90 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	2003      	movs	r0, #3
 8002fca:	f002 f92a 	bl	8005222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002fce:	2003      	movs	r0, #3
 8002fd0:	f002 f941 	bl	8005256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f004 fee9 	bl	8007dac <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002fda:	bf00      	nop
 8002fdc:	3758      	adds	r7, #88	; 0x58
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40002800 	.word	0x40002800

08002fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002fec:	bf00      	nop
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr

08002ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ffa:	e7fe      	b.n	8002ffa <HardFault_Handler+0x4>

08002ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003000:	e7fe      	b.n	8003000 <MemManage_Handler+0x4>

08003002 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003002:	b480      	push	{r7}
 8003004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003006:	e7fe      	b.n	8003006 <BusFault_Handler+0x4>

08003008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800300c:	e7fe      	b.n	800300c <UsageFault_Handler+0x4>

0800300e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800300e:	b480      	push	{r7}
 8003010:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003012:	bf00      	nop
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003020:	bf00      	nop
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr

0800302a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800302a:	b480      	push	{r7}
 800302c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800302e:	bf00      	nop
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800303c:	f001 ff72 	bl	8004f24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003040:	bf00      	nop
 8003042:	bd80      	pop	{r7, pc}

08003044 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003048:	f7ff f858 	bl	80020fc <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800304c:	bf00      	nop
 800304e:	bd80      	pop	{r7, pc}

08003050 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003054:	4802      	ldr	r0, [pc, #8]	; (8003060 <DMA1_Channel4_IRQHandler+0x10>)
 8003056:	f002 fb24 	bl	80056a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	20000588 	.word	0x20000588

08003064 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003068:	4802      	ldr	r0, [pc, #8]	; (8003074 <USART1_IRQHandler+0x10>)
 800306a:	f005 f811 	bl	8008090 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	200004f4 	.word	0x200004f4

08003078 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800307c:	4802      	ldr	r0, [pc, #8]	; (8003088 <LPUART1_IRQHandler+0x10>)
 800307e:	f005 f807 	bl	8008090 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20000460 	.word	0x20000460

0800308c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003090:	f001 fc0c 	bl	80048ac <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003094:	bf00      	nop
 8003096:	bd80      	pop	{r7, pc}

08003098 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800309c:	f001 fc3c 	bl	8004918 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80030a0:	bf00      	nop
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80030a8:	f002 fe4e 	bl	8005d48 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80030ac:	bf00      	nop
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80030b4:	4802      	ldr	r0, [pc, #8]	; (80030c0 <DMA2_Channel4_IRQHandler+0x10>)
 80030b6:	f002 faf4 	bl	80056a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80030ba:	bf00      	nop
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	200005e8 	.word	0x200005e8

080030c4 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 80030c8:	2010      	movs	r0, #16
 80030ca:	f002 fe25 	bl	8005d18 <HAL_GPIO_EXTI_IRQHandler>
}
 80030ce:	bf00      	nop
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 80030d6:	2001      	movs	r0, #1
 80030d8:	f002 fe1e 	bl	8005d18 <HAL_GPIO_EXTI_IRQHandler>
}
 80030dc:	bf00      	nop
 80030de:	bd80      	pop	{r7, pc}

080030e0 <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 80030e4:	2002      	movs	r0, #2
 80030e6:	f002 fe17 	bl	8005d18 <HAL_GPIO_EXTI_IRQHandler>
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}

080030ee <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030ee:	b480      	push	{r7}
 80030f0:	af00      	add	r7, sp, #0
  return 1;
 80030f2:	2301      	movs	r3, #1
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <_kill>:

int _kill(int pid, int sig)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b082      	sub	sp, #8
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
 8003106:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003108:	f00a ff04 	bl	800df14 <__errno>
 800310c:	4603      	mov	r3, r0
 800310e:	2216      	movs	r2, #22
 8003110:	601a      	str	r2, [r3, #0]
  return -1;
 8003112:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003116:	4618      	mov	r0, r3
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <_exit>:

void _exit (int status)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b082      	sub	sp, #8
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003126:	f04f 31ff 	mov.w	r1, #4294967295
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7ff ffe7 	bl	80030fe <_kill>
  while (1) {}    /* Make sure we hang here */
 8003130:	e7fe      	b.n	8003130 <_exit+0x12>

08003132 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b086      	sub	sp, #24
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	e00a      	b.n	800315a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003144:	f3af 8000 	nop.w
 8003148:	4601      	mov	r1, r0
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	60ba      	str	r2, [r7, #8]
 8003150:	b2ca      	uxtb	r2, r1
 8003152:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	3301      	adds	r3, #1
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	429a      	cmp	r2, r3
 8003160:	dbf0      	blt.n	8003144 <_read+0x12>
  }

  return len;
 8003162:	687b      	ldr	r3, [r7, #4]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3718      	adds	r7, #24
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <_close>:
  }
  return len;
}

int _close(int file)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003174:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003178:	4618      	mov	r0, r3
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003194:	605a      	str	r2, [r3, #4]
  return 0;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <_isatty>:

int _isatty(int file)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031ac:	2301      	movs	r3, #1
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b085      	sub	sp, #20
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031dc:	4a14      	ldr	r2, [pc, #80]	; (8003230 <_sbrk+0x5c>)
 80031de:	4b15      	ldr	r3, [pc, #84]	; (8003234 <_sbrk+0x60>)
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031e8:	4b13      	ldr	r3, [pc, #76]	; (8003238 <_sbrk+0x64>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d102      	bne.n	80031f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031f0:	4b11      	ldr	r3, [pc, #68]	; (8003238 <_sbrk+0x64>)
 80031f2:	4a12      	ldr	r2, [pc, #72]	; (800323c <_sbrk+0x68>)
 80031f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031f6:	4b10      	ldr	r3, [pc, #64]	; (8003238 <_sbrk+0x64>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4413      	add	r3, r2
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	429a      	cmp	r2, r3
 8003202:	d207      	bcs.n	8003214 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003204:	f00a fe86 	bl	800df14 <__errno>
 8003208:	4603      	mov	r3, r0
 800320a:	220c      	movs	r2, #12
 800320c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800320e:	f04f 33ff 	mov.w	r3, #4294967295
 8003212:	e009      	b.n	8003228 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003214:	4b08      	ldr	r3, [pc, #32]	; (8003238 <_sbrk+0x64>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800321a:	4b07      	ldr	r3, [pc, #28]	; (8003238 <_sbrk+0x64>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	4a05      	ldr	r2, [pc, #20]	; (8003238 <_sbrk+0x64>)
 8003224:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003226:	68fb      	ldr	r3, [r7, #12]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20030000 	.word	0x20030000
 8003234:	00001000 	.word	0x00001000
 8003238:	2000066c 	.word	0x2000066c
 800323c:	200019c0 	.word	0x200019c0

08003240 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8003244:	4b03      	ldr	r3, [pc, #12]	; (8003254 <LL_FLASH_GetUDN+0x14>)
 8003246:	681b      	ldr	r3, [r3, #0]
}
 8003248:	4618      	mov	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	1fff7580 	.word	0x1fff7580

08003258 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800325c:	4b03      	ldr	r3, [pc, #12]	; (800326c <LL_FLASH_GetDeviceID+0x14>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	b2db      	uxtb	r3, r3
}
 8003262:	4618      	mov	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	1fff7584 	.word	0x1fff7584

08003270 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <LL_FLASH_GetSTCompanyID+0x14>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	0a1b      	lsrs	r3, r3, #8
}
 800327a:	4618      	mov	r0, r3
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	1fff7584 	.word	0x1fff7584

08003288 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8003288:	b5b0      	push	{r4, r5, r7, lr}
 800328a:	b090      	sub	sp, #64	; 0x40
 800328c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800328e:	2392      	movs	r3, #146	; 0x92
 8003290:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8003294:	4b31      	ldr	r3, [pc, #196]	; (800335c <APP_BLE_Init+0xd4>)
 8003296:	1d3c      	adds	r4, r7, #4
 8003298:	461d      	mov	r5, r3
 800329a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800329c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800329e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80032aa:	c403      	stmia	r4!, {r0, r1}
 80032ac:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80032ae:	f000 fa85 	bl	80037bc <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80032b2:	2101      	movs	r1, #1
 80032b4:	2002      	movs	r0, #2
 80032b6:	f009 fcf7 	bl	800cca8 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80032ba:	4a29      	ldr	r2, [pc, #164]	; (8003360 <APP_BLE_Init+0xd8>)
 80032bc:	2100      	movs	r1, #0
 80032be:	2010      	movs	r0, #16
 80032c0:	f009 fe1e 	bl	800cf00 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80032c4:	1d3b      	adds	r3, r7, #4
 80032c6:	4618      	mov	r0, r3
 80032c8:	f008 fa6a 	bl	800b7a0 <SHCI_C2_BLE_Init>
 80032cc:	4603      	mov	r3, r0
 80032ce:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 80032d2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d008      	beq.n	80032ec <APP_BLE_Init+0x64>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 80032da:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80032de:	4619      	mov	r1, r3
 80032e0:	4820      	ldr	r0, [pc, #128]	; (8003364 <APP_BLE_Init+0xdc>)
 80032e2:	f00a fc77 	bl	800dbd4 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80032e6:	f7ff fc89 	bl	8002bfc <Error_Handler>
 80032ea:	e002      	b.n	80032f2 <APP_BLE_Init+0x6a>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 80032ec:	481e      	ldr	r0, [pc, #120]	; (8003368 <APP_BLE_Init+0xe0>)
 80032ee:	f00a fc71 	bl	800dbd4 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80032f2:	f000 fa79 	bl	80037e8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80032f6:	f009 f9bb 	bl	800c670 <SVCCTL_Init>

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_START_SCAN_ID, UTIL_SEQ_RFU, Scan_Request);
 80032fa:	4a1c      	ldr	r2, [pc, #112]	; (800336c <APP_BLE_Init+0xe4>)
 80032fc:	2100      	movs	r1, #0
 80032fe:	2001      	movs	r0, #1
 8003300:	f009 fdfe 	bl	800cf00 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_DEV_1_ID, UTIL_SEQ_RFU, Connect_Request);
 8003304:	4a1a      	ldr	r2, [pc, #104]	; (8003370 <APP_BLE_Init+0xe8>)
 8003306:	2100      	movs	r1, #0
 8003308:	2002      	movs	r0, #2
 800330a:	f009 fdf9 	bl	800cf00 <UTIL_SEQ_RegTask>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800330e:	4b19      	ldr	r3, [pc, #100]	; (8003374 <APP_BLE_Init+0xec>)
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /*Radio mask Activity*/
#if (OOB_DEMO != 0)
  ret = aci_hal_set_radio_activity_mask(0x0020);
 8003316:	2020      	movs	r0, #32
 8003318:	f007 fe6b 	bl	800aff2 <aci_hal_set_radio_activity_mask>
 800331c:	4603      	mov	r3, r0
 800331e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 8003322:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003326:	2b00      	cmp	r3, #0
 8003328:	d006      	beq.n	8003338 <APP_BLE_Init+0xb0>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800332a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800332e:	4619      	mov	r1, r3
 8003330:	4811      	ldr	r0, [pc, #68]	; (8003378 <APP_BLE_Init+0xf0>)
 8003332:	f00a fc4f 	bl	800dbd4 <iprintf>
 8003336:	e002      	b.n	800333e <APP_BLE_Init+0xb6>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8003338:	4810      	ldr	r0, [pc, #64]	; (800337c <APP_BLE_Init+0xf4>)
 800333a:	f00a fc4b 	bl	800dbd4 <iprintf>
  }
  APP_DBG_MSG("\n");
 800333e:	200a      	movs	r0, #10
 8003340:	f00a fc5a 	bl	800dbf8 <putchar>
#endif
  /**
   * Initialize P2P Client Application
   */
  P2PC_APP_Init();
 8003344:	f000 fce2 	bl	8003d0c <P2PC_APP_Init>
  /* USER CODE BEGIN APP_BLE_Init_3 */

  /* USER CODE END APP_BLE_Init_3 */

#if (OOB_DEMO != 0)
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8003348:	4b0d      	ldr	r3, [pc, #52]	; (8003380 <APP_BLE_Init+0xf8>)
 800334a:	2200      	movs	r2, #0
 800334c:	490d      	ldr	r1, [pc, #52]	; (8003384 <APP_BLE_Init+0xfc>)
 800334e:	2000      	movs	r0, #0
 8003350:	f7ff f876 	bl	8002440 <HW_TS_Create>
  UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
#endif
  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */
  return;
 8003354:	bf00      	nop
}
 8003356:	3740      	adds	r7, #64	; 0x40
 8003358:	46bd      	mov	sp, r7
 800335a:	bdb0      	pop	{r4, r5, r7, pc}
 800335c:	080100fc 	.word	0x080100fc
 8003360:	0800b411 	.word	0x0800b411
 8003364:	08010020 	.word	0x08010020
 8003368:	08010058 	.word	0x08010058
 800336c:	08003ad9 	.word	0x08003ad9
 8003370:	08003b3d 	.word	0x08003b3d
 8003374:	20000684 	.word	0x20000684
 8003378:	08010080 	.word	0x08010080
 800337c:	080100c4 	.word	0x080100c4
 8003380:	08003bc1 	.word	0x08003bc1
 8003384:	20000705 	.word	0x20000705

08003388 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *pckt)
{
 8003388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800338a:	b097      	sub	sp, #92	; 0x5c
 800338c:	af06      	add	r7, sp, #24
 800338e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  hci_le_connection_complete_event_rp0 * connection_complete_event;
  evt_blecore_aci *blecore_evt;
  hci_le_advertising_report_event_rp0 * le_advertising_event;
  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3301      	adds	r3, #1
 8003394:	63bb      	str	r3, [r7, #56]	; 0x38
  hci_disconnection_complete_event_rp0 *cc = (void *) event_pckt->data;
 8003396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003398:	3302      	adds	r3, #2
 800339a:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t result;
  uint8_t event_type, event_data_size;
  int k = 0;
 800339c:	2300      	movs	r3, #0
 800339e:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t adtype, adlength;
#if (OOB_DEMO != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80033a0:	2392      	movs	r3, #146	; 0x92
 80033a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
#endif

  switch (event_pckt->evt)
 80033a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2bff      	cmp	r3, #255	; 0xff
 80033ac:	d009      	beq.n	80033c2 <SVCCTL_App_Notification+0x3a>
 80033ae:	2bff      	cmp	r3, #255	; 0xff
 80033b0:	f300 81bc 	bgt.w	800372c <SVCCTL_App_Notification+0x3a4>
 80033b4:	2b05      	cmp	r3, #5
 80033b6:	f000 80ce 	beq.w	8003556 <SVCCTL_App_Notification+0x1ce>
 80033ba:	2b3e      	cmp	r3, #62	; 0x3e
 80033bc:	f000 80e9 	beq.w	8003592 <SVCCTL_App_Notification+0x20a>

    default:
      /* USER CODE BEGIN evt_default */

      /* USER CODE END evt_default */
      break;
 80033c0:	e1b4      	b.n	800372c <SVCCTL_App_Notification+0x3a4>
        handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 80033c2:	4ba6      	ldr	r3, [pc, #664]	; (800365c <SVCCTL_App_Notification+0x2d4>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	701a      	strb	r2, [r3, #0]
        blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80033c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ca:	3302      	adds	r3, #2
 80033cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        switch (blecore_evt->ecode)
 80033ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	f640 0202 	movw	r2, #2050	; 0x802
 80033d8:	4293      	cmp	r3, r2
 80033da:	d033      	beq.n	8003444 <SVCCTL_App_Notification+0xbc>
 80033dc:	f640 0202 	movw	r2, #2050	; 0x802
 80033e0:	4293      	cmp	r3, r2
 80033e2:	f300 80b4 	bgt.w	800354e <SVCCTL_App_Notification+0x1c6>
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	f000 80a6 	beq.w	8003538 <SVCCTL_App_Notification+0x1b0>
 80033ec:	f240 4207 	movw	r2, #1031	; 0x407
 80033f0:	4293      	cmp	r3, r2
 80033f2:	f040 80ac 	bne.w	800354e <SVCCTL_App_Notification+0x1c6>
              aci_gap_proc_complete_event_rp0 *gap_evt_proc_complete = (void*) blecore_evt->data;
 80033f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f8:	3302      	adds	r3, #2
 80033fa:	627b      	str	r3, [r7, #36]	; 0x24
              if (gap_evt_proc_complete->Procedure_Code == GAP_GENERAL_DISCOVERY_PROC
 80033fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b02      	cmp	r3, #2
 8003402:	f040 80a6 	bne.w	8003552 <SVCCTL_App_Notification+0x1ca>
                  && gap_evt_proc_complete->Status == 0x00)
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	785b      	ldrb	r3, [r3, #1]
 800340a:	2b00      	cmp	r3, #0
 800340c:	f040 80a1 	bne.w	8003552 <SVCCTL_App_Notification+0x1ca>
                BSP_LED_Off(LED_BLUE);
 8003410:	2000      	movs	r0, #0
 8003412:	f001 fc2d 	bl	8004c70 <BSP_LED_Off>
                APP_DBG_MSG("LED BLUE OFF\n");
 8003416:	4892      	ldr	r0, [pc, #584]	; (8003660 <SVCCTL_App_Notification+0x2d8>)
 8003418:	f00a fc4a 	bl	800dcb0 <puts>
                APP_DBG_MSG("-- GAP GENERAL DISCOVERY PROCEDURE_COMPLETED\n\r");
 800341c:	4891      	ldr	r0, [pc, #580]	; (8003664 <SVCCTL_App_Notification+0x2dc>)
 800341e:	f00a fbd9 	bl	800dbd4 <iprintf>
                if (BleApplicationContext.DeviceServerFound == 0x01 && BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 8003422:	4b91      	ldr	r3, [pc, #580]	; (8003668 <SVCCTL_App_Notification+0x2e0>)
 8003424:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8003428:	2b01      	cmp	r3, #1
 800342a:	f040 8092 	bne.w	8003552 <SVCCTL_App_Notification+0x1ca>
 800342e:	4b8e      	ldr	r3, [pc, #568]	; (8003668 <SVCCTL_App_Notification+0x2e0>)
 8003430:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003434:	2b06      	cmp	r3, #6
 8003436:	f000 808c 	beq.w	8003552 <SVCCTL_App_Notification+0x1ca>
                  UTIL_SEQ_SetTask(1 << CFG_TASK_CONN_DEV_1_ID, CFG_SCH_PRIO_0);
 800343a:	2100      	movs	r1, #0
 800343c:	2002      	movs	r0, #2
 800343e:	f009 fd81 	bl	800cf44 <UTIL_SEQ_SetTask>
            break;
 8003442:	e086      	b.n	8003552 <SVCCTL_App_Notification+0x1ca>
              aci_l2cap_connection_update_req_event_rp0 *pr = (aci_l2cap_connection_update_req_event_rp0 *) blecore_evt->data;
 8003444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003446:	3302      	adds	r3, #2
 8003448:	62bb      	str	r3, [r7, #40]	; 0x28
              ret = aci_hal_set_radio_activity_mask(0x0000);
 800344a:	2000      	movs	r0, #0
 800344c:	f007 fdd1 	bl	800aff2 <aci_hal_set_radio_activity_mask>
 8003450:	4603      	mov	r3, r0
 8003452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
              if (ret != BLE_STATUS_SUCCESS)
 8003456:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800345a:	2b00      	cmp	r3, #0
 800345c:	d006      	beq.n	800346c <SVCCTL_App_Notification+0xe4>
                APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800345e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003462:	4619      	mov	r1, r3
 8003464:	4881      	ldr	r0, [pc, #516]	; (800366c <SVCCTL_App_Notification+0x2e4>)
 8003466:	f00a fbb5 	bl	800dbd4 <iprintf>
 800346a:	e002      	b.n	8003472 <SVCCTL_App_Notification+0xea>
                APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800346c:	4880      	ldr	r0, [pc, #512]	; (8003670 <SVCCTL_App_Notification+0x2e8>)
 800346e:	f00a fbb1 	bl	800dbd4 <iprintf>
              APP_BLE_p2p_Conn_Update_req.Identifier = pr->Identifier;
 8003472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003474:	789a      	ldrb	r2, [r3, #2]
 8003476:	4b7f      	ldr	r3, [pc, #508]	; (8003674 <SVCCTL_App_Notification+0x2ec>)
 8003478:	701a      	strb	r2, [r3, #0]
              APP_BLE_p2p_Conn_Update_req.L2CAP_Length = pr->L2CAP_Length;
 800347a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003480:	b29a      	uxth	r2, r3
 8003482:	4b7c      	ldr	r3, [pc, #496]	; (8003674 <SVCCTL_App_Notification+0x2ec>)
 8003484:	805a      	strh	r2, [r3, #2]
              APP_BLE_p2p_Conn_Update_req.Interval_Min = pr->Interval_Min;
 8003486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003488:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800348c:	b29a      	uxth	r2, r3
 800348e:	4b79      	ldr	r3, [pc, #484]	; (8003674 <SVCCTL_App_Notification+0x2ec>)
 8003490:	809a      	strh	r2, [r3, #4]
              APP_BLE_p2p_Conn_Update_req.Interval_Max = pr->Interval_Max;
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003494:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8003498:	b29a      	uxth	r2, r3
 800349a:	4b76      	ldr	r3, [pc, #472]	; (8003674 <SVCCTL_App_Notification+0x2ec>)
 800349c:	80da      	strh	r2, [r3, #6]
              APP_BLE_p2p_Conn_Update_req.Latency = pr->Latency;
 800349e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a0:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	4b73      	ldr	r3, [pc, #460]	; (8003674 <SVCCTL_App_Notification+0x2ec>)
 80034a8:	811a      	strh	r2, [r3, #8]
              APP_BLE_p2p_Conn_Update_req.Timeout_Multiplier = pr->Timeout_Multiplier;
 80034aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ac:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	4b70      	ldr	r3, [pc, #448]	; (8003674 <SVCCTL_App_Notification+0x2ec>)
 80034b4:	815a      	strh	r2, [r3, #10]
              ret = aci_l2cap_connection_parameter_update_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 80034b6:	4b6c      	ldr	r3, [pc, #432]	; (8003668 <SVCCTL_App_Notification+0x2e0>)
 80034b8:	8ad8      	ldrh	r0, [r3, #22]
 80034ba:	4b6e      	ldr	r3, [pc, #440]	; (8003674 <SVCCTL_App_Notification+0x2ec>)
 80034bc:	8899      	ldrh	r1, [r3, #4]
 80034be:	4b6d      	ldr	r3, [pc, #436]	; (8003674 <SVCCTL_App_Notification+0x2ec>)
 80034c0:	88dc      	ldrh	r4, [r3, #6]
 80034c2:	4b6c      	ldr	r3, [pc, #432]	; (8003674 <SVCCTL_App_Notification+0x2ec>)
 80034c4:	891d      	ldrh	r5, [r3, #8]
 80034c6:	4b6b      	ldr	r3, [pc, #428]	; (8003674 <SVCCTL_App_Notification+0x2ec>)
 80034c8:	895b      	ldrh	r3, [r3, #10]
 80034ca:	4a6a      	ldr	r2, [pc, #424]	; (8003674 <SVCCTL_App_Notification+0x2ec>)
 80034cc:	7812      	ldrb	r2, [r2, #0]
 80034ce:	2601      	movs	r6, #1
 80034d0:	9604      	str	r6, [sp, #16]
 80034d2:	9203      	str	r2, [sp, #12]
 80034d4:	2210      	movs	r2, #16
 80034d6:	9202      	str	r2, [sp, #8]
 80034d8:	2210      	movs	r2, #16
 80034da:	9201      	str	r2, [sp, #4]
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	462b      	mov	r3, r5
 80034e0:	4622      	mov	r2, r4
 80034e2:	f007 fdfe 	bl	800b0e2 <aci_l2cap_connection_parameter_update_resp>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
              if(ret != BLE_STATUS_SUCCESS)
 80034ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d009      	beq.n	8003508 <SVCCTL_App_Notification+0x180>
                APP_DBG_MSG("  Fail   : aci_l2cap_connection_parameter_update_resp command, result: 0x%x \n\r", ret);
 80034f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034f8:	4619      	mov	r1, r3
 80034fa:	485f      	ldr	r0, [pc, #380]	; (8003678 <SVCCTL_App_Notification+0x2f0>)
 80034fc:	f00a fb6a 	bl	800dbd4 <iprintf>
                BSP_LED_On(LED_RED);
 8003500:	2002      	movs	r0, #2
 8003502:	f001 fb9b 	bl	8004c3c <BSP_LED_On>
 8003506:	e002      	b.n	800350e <SVCCTL_App_Notification+0x186>
                APP_DBG_MSG("  Success: aci_l2cap_connection_parameter_update_resp command\n\r");
 8003508:	485c      	ldr	r0, [pc, #368]	; (800367c <SVCCTL_App_Notification+0x2f4>)
 800350a:	f00a fb63 	bl	800dbd4 <iprintf>
              ret = aci_hal_set_radio_activity_mask(0x0020);
 800350e:	2020      	movs	r0, #32
 8003510:	f007 fd6f 	bl	800aff2 <aci_hal_set_radio_activity_mask>
 8003514:	4603      	mov	r3, r0
 8003516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
              if (ret != BLE_STATUS_SUCCESS)
 800351a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800351e:	2b00      	cmp	r3, #0
 8003520:	d006      	beq.n	8003530 <SVCCTL_App_Notification+0x1a8>
                APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8003522:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003526:	4619      	mov	r1, r3
 8003528:	4850      	ldr	r0, [pc, #320]	; (800366c <SVCCTL_App_Notification+0x2e4>)
 800352a:	f00a fb53 	bl	800dbd4 <iprintf>
            break;
 800352e:	e011      	b.n	8003554 <SVCCTL_App_Notification+0x1cc>
                APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8003530:	484f      	ldr	r0, [pc, #316]	; (8003670 <SVCCTL_App_Notification+0x2e8>)
 8003532:	f00a fb4f 	bl	800dbd4 <iprintf>
            break;
 8003536:	e00d      	b.n	8003554 <SVCCTL_App_Notification+0x1cc>
              BSP_LED_On(LED_GREEN);
 8003538:	2001      	movs	r0, #1
 800353a:	f001 fb7f 	bl	8004c3c <BSP_LED_On>
              HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 800353e:	4b4a      	ldr	r3, [pc, #296]	; (8003668 <SVCCTL_App_Notification+0x2e0>)
 8003540:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003544:	210a      	movs	r1, #10
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff f878 	bl	800263c <HW_TS_Start>
            break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800354c:	e002      	b.n	8003554 <SVCCTL_App_Notification+0x1cc>
            break;
 800354e:	bf00      	nop
 8003550:	e0ef      	b.n	8003732 <SVCCTL_App_Notification+0x3aa>
            break;
 8003552:	bf00      	nop
      break;
 8003554:	e0ed      	b.n	8003732 <SVCCTL_App_Notification+0x3aa>
        if (cc->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8003556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003558:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800355c:	b29a      	uxth	r2, r3
 800355e:	4b42      	ldr	r3, [pc, #264]	; (8003668 <SVCCTL_App_Notification+0x2e0>)
 8003560:	8adb      	ldrh	r3, [r3, #22]
 8003562:	429a      	cmp	r2, r3
 8003564:	f040 80e4 	bne.w	8003730 <SVCCTL_App_Notification+0x3a8>
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8003568:	4b3f      	ldr	r3, [pc, #252]	; (8003668 <SVCCTL_App_Notification+0x2e0>)
 800356a:	2200      	movs	r2, #0
 800356c:	82da      	strh	r2, [r3, #22]
          BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800356e:	4b3e      	ldr	r3, [pc, #248]	; (8003668 <SVCCTL_App_Notification+0x2e0>)
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH SERVER \n\r");
 8003576:	4842      	ldr	r0, [pc, #264]	; (8003680 <SVCCTL_App_Notification+0x2f8>)
 8003578:	f00a fb2c 	bl	800dbd4 <iprintf>
          handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800357c:	4b37      	ldr	r3, [pc, #220]	; (800365c <SVCCTL_App_Notification+0x2d4>)
 800357e:	2201      	movs	r2, #1
 8003580:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8003582:	4b39      	ldr	r3, [pc, #228]	; (8003668 <SVCCTL_App_Notification+0x2e0>)
 8003584:	8ada      	ldrh	r2, [r3, #22]
 8003586:	4b35      	ldr	r3, [pc, #212]	; (800365c <SVCCTL_App_Notification+0x2d4>)
 8003588:	805a      	strh	r2, [r3, #2]
          P2PC_APP_Notification(&handleNotification);
 800358a:	4834      	ldr	r0, [pc, #208]	; (800365c <SVCCTL_App_Notification+0x2d4>)
 800358c:	f000 fc04 	bl	8003d98 <P2PC_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8003590:	e0ce      	b.n	8003730 <SVCCTL_App_Notification+0x3a8>
        meta_evt = (evt_le_meta_event*) event_pckt->data;
 8003592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003594:	3302      	adds	r3, #2
 8003596:	623b      	str	r3, [r7, #32]
        switch (meta_evt->subevent)
 8003598:	6a3b      	ldr	r3, [r7, #32]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d002      	beq.n	80035a6 <SVCCTL_App_Notification+0x21e>
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d02f      	beq.n	8003604 <SVCCTL_App_Notification+0x27c>
            break;
 80035a4:	e0c1      	b.n	800372a <SVCCTL_App_Notification+0x3a2>
            connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	3301      	adds	r3, #1
 80035aa:	60fb      	str	r3, [r7, #12]
            BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	4b2c      	ldr	r3, [pc, #176]	; (8003668 <SVCCTL_App_Notification+0x2e0>)
 80035b6:	82da      	strh	r2, [r3, #22]
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80035b8:	4b2b      	ldr	r3, [pc, #172]	; (8003668 <SVCCTL_App_Notification+0x2e0>)
 80035ba:	2206      	movs	r2, #6
 80035bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            APP_DBG_MSG("\r\n\r**  CONNECTION COMPLETE EVENT WITH SERVER \n\r");
 80035c0:	4830      	ldr	r0, [pc, #192]	; (8003684 <SVCCTL_App_Notification+0x2fc>)
 80035c2:	f00a fb07 	bl	800dbd4 <iprintf>
            handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 80035c6:	4b25      	ldr	r3, [pc, #148]	; (800365c <SVCCTL_App_Notification+0x2d4>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
            handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80035cc:	4b26      	ldr	r3, [pc, #152]	; (8003668 <SVCCTL_App_Notification+0x2e0>)
 80035ce:	8ada      	ldrh	r2, [r3, #22]
 80035d0:	4b22      	ldr	r3, [pc, #136]	; (800365c <SVCCTL_App_Notification+0x2d4>)
 80035d2:	805a      	strh	r2, [r3, #2]
            P2PC_APP_Notification(&handleNotification);
 80035d4:	4821      	ldr	r0, [pc, #132]	; (800365c <SVCCTL_App_Notification+0x2d4>)
 80035d6:	f000 fbdf 	bl	8003d98 <P2PC_APP_Notification>
            result = aci_gatt_disc_all_primary_services(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80035da:	4b23      	ldr	r3, [pc, #140]	; (8003668 <SVCCTL_App_Notification+0x2e0>)
 80035dc:	8adb      	ldrh	r3, [r3, #22]
 80035de:	4618      	mov	r0, r3
 80035e0:	f007 f986 	bl	800a8f0 <aci_gatt_disc_all_primary_services>
 80035e4:	4603      	mov	r3, r0
 80035e6:	72fb      	strb	r3, [r7, #11]
            if (result == BLE_STATUS_SUCCESS)
 80035e8:	7afb      	ldrb	r3, [r7, #11]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <SVCCTL_App_Notification+0x274>
              APP_DBG_MSG("\r\n\r** GATT SERVICES & CHARACTERISTICS DISCOVERY  \n\r");
 80035ee:	4826      	ldr	r0, [pc, #152]	; (8003688 <SVCCTL_App_Notification+0x300>)
 80035f0:	f00a faf0 	bl	800dbd4 <iprintf>
              APP_DBG_MSG("* GATT :  Start Searching Primary Services \r\n\r");
 80035f4:	4825      	ldr	r0, [pc, #148]	; (800368c <SVCCTL_App_Notification+0x304>)
 80035f6:	f00a faed 	bl	800dbd4 <iprintf>
            break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80035fa:	e096      	b.n	800372a <SVCCTL_App_Notification+0x3a2>
              APP_DBG_MSG("BLE_CTRL_App_Notification(), All services discovery Failed \r\n\r");
 80035fc:	4824      	ldr	r0, [pc, #144]	; (8003690 <SVCCTL_App_Notification+0x308>)
 80035fe:	f00a fae9 	bl	800dbd4 <iprintf>
            break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8003602:	e092      	b.n	800372a <SVCCTL_App_Notification+0x3a2>
              le_advertising_event = (hci_le_advertising_report_event_rp0 *) meta_evt->data;
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	3301      	adds	r3, #1
 8003608:	61fb      	str	r3, [r7, #28]
              event_type = le_advertising_event->Advertising_Report[0].Event_Type;
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	785b      	ldrb	r3, [r3, #1]
 800360e:	76fb      	strb	r3, [r7, #27]
              event_data_size = le_advertising_event->Advertising_Report[0].Length_Data;
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	7a5b      	ldrb	r3, [r3, #9]
 8003614:	76bb      	strb	r3, [r7, #26]
              adv_report_data = (uint8_t*)(&le_advertising_event->Advertising_Report[0].Length_Data) + 1;
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	3309      	adds	r3, #9
 800361a:	3301      	adds	r3, #1
 800361c:	617b      	str	r3, [r7, #20]
              k = 0;
 800361e:	2300      	movs	r3, #0
 8003620:	63fb      	str	r3, [r7, #60]	; 0x3c
              if (event_type == ADV_IND)
 8003622:	7efb      	ldrb	r3, [r7, #27]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d17f      	bne.n	8003728 <SVCCTL_App_Notification+0x3a0>
                while(k < event_data_size)
 8003628:	e07a      	b.n	8003720 <SVCCTL_App_Notification+0x398>
                  adlength = adv_report_data[k];
 800362a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	4413      	add	r3, r2
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	74fb      	strb	r3, [r7, #19]
                  adtype = adv_report_data[k + 1];
 8003634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003636:	3301      	adds	r3, #1
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	4413      	add	r3, r2
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	74bb      	strb	r3, [r7, #18]
                  switch (adtype)
 8003640:	7cbb      	ldrb	r3, [r7, #18]
 8003642:	2bff      	cmp	r3, #255	; 0xff
 8003644:	d026      	beq.n	8003694 <SVCCTL_App_Notification+0x30c>
 8003646:	2bff      	cmp	r3, #255	; 0xff
 8003648:	dc5e      	bgt.n	8003708 <SVCCTL_App_Notification+0x380>
 800364a:	2b16      	cmp	r3, #22
 800364c:	d05e      	beq.n	800370c <SVCCTL_App_Notification+0x384>
 800364e:	2b16      	cmp	r3, #22
 8003650:	dc5a      	bgt.n	8003708 <SVCCTL_App_Notification+0x380>
 8003652:	2b01      	cmp	r3, #1
 8003654:	d05c      	beq.n	8003710 <SVCCTL_App_Notification+0x388>
 8003656:	2b0a      	cmp	r3, #10
                      break;
 8003658:	e05d      	b.n	8003716 <SVCCTL_App_Notification+0x38e>
 800365a:	bf00      	nop
 800365c:	20000680 	.word	0x20000680
 8003660:	08010138 	.word	0x08010138
 8003664:	08010148 	.word	0x08010148
 8003668:	20000684 	.word	0x20000684
 800366c:	08010080 	.word	0x08010080
 8003670:	080100c4 	.word	0x080100c4
 8003674:	20000708 	.word	0x20000708
 8003678:	08010178 	.word	0x08010178
 800367c:	080101c8 	.word	0x080101c8
 8003680:	08010208 	.word	0x08010208
 8003684:	08010234 	.word	0x08010234
 8003688:	08010264 	.word	0x08010264
 800368c:	08010298 	.word	0x08010298
 8003690:	080102c8 	.word	0x080102c8
                      if (adlength >= 7 && adv_report_data[k + 2] == 0x01)
 8003694:	7cfb      	ldrb	r3, [r7, #19]
 8003696:	2b06      	cmp	r3, #6
 8003698:	d93c      	bls.n	8003714 <SVCCTL_App_Notification+0x38c>
 800369a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800369c:	3302      	adds	r3, #2
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4413      	add	r3, r2
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d135      	bne.n	8003714 <SVCCTL_App_Notification+0x38c>
                        APP_DBG_MSG("--- ST MANUFACTURER ID --- \n\r");
 80036a8:	4824      	ldr	r0, [pc, #144]	; (800373c <SVCCTL_App_Notification+0x3b4>)
 80036aa:	f00a fa93 	bl	800dbd4 <iprintf>
                        switch (adv_report_data[k + 3])
 80036ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b0:	3303      	adds	r3, #3
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	4413      	add	r3, r2
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b83      	cmp	r3, #131	; 0x83
 80036ba:	d123      	bne.n	8003704 <SVCCTL_App_Notification+0x37c>
                           APP_DBG_MSG("-- SERVER DETECTED -- VIA MAN ID\n\r");
 80036bc:	4820      	ldr	r0, [pc, #128]	; (8003740 <SVCCTL_App_Notification+0x3b8>)
 80036be:	f00a fa89 	bl	800dbd4 <iprintf>
                           BleApplicationContext.DeviceServerFound = 0x01;
 80036c2:	4b20      	ldr	r3, [pc, #128]	; (8003744 <SVCCTL_App_Notification+0x3bc>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
                           SERVER_REMOTE_ADDR_TYPE = le_advertising_event->Advertising_Report[0].Address_Type;
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	789a      	ldrb	r2, [r3, #2]
 80036ce:	4b1e      	ldr	r3, [pc, #120]	; (8003748 <SVCCTL_App_Notification+0x3c0>)
 80036d0:	701a      	strb	r2, [r3, #0]
                           SERVER_REMOTE_BDADDR[0] = le_advertising_event->Advertising_Report[0].Address[0];
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	78da      	ldrb	r2, [r3, #3]
 80036d6:	4b1d      	ldr	r3, [pc, #116]	; (800374c <SVCCTL_App_Notification+0x3c4>)
 80036d8:	701a      	strb	r2, [r3, #0]
                           SERVER_REMOTE_BDADDR[1] = le_advertising_event->Advertising_Report[0].Address[1];
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	791a      	ldrb	r2, [r3, #4]
 80036de:	4b1b      	ldr	r3, [pc, #108]	; (800374c <SVCCTL_App_Notification+0x3c4>)
 80036e0:	705a      	strb	r2, [r3, #1]
                           SERVER_REMOTE_BDADDR[2] = le_advertising_event->Advertising_Report[0].Address[2];
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	795a      	ldrb	r2, [r3, #5]
 80036e6:	4b19      	ldr	r3, [pc, #100]	; (800374c <SVCCTL_App_Notification+0x3c4>)
 80036e8:	709a      	strb	r2, [r3, #2]
                           SERVER_REMOTE_BDADDR[3] = le_advertising_event->Advertising_Report[0].Address[3];
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	799a      	ldrb	r2, [r3, #6]
 80036ee:	4b17      	ldr	r3, [pc, #92]	; (800374c <SVCCTL_App_Notification+0x3c4>)
 80036f0:	70da      	strb	r2, [r3, #3]
                           SERVER_REMOTE_BDADDR[4] = le_advertising_event->Advertising_Report[0].Address[4];
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	79da      	ldrb	r2, [r3, #7]
 80036f6:	4b15      	ldr	r3, [pc, #84]	; (800374c <SVCCTL_App_Notification+0x3c4>)
 80036f8:	711a      	strb	r2, [r3, #4]
                           SERVER_REMOTE_BDADDR[5] = le_advertising_event->Advertising_Report[0].Address[5];
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	7a1a      	ldrb	r2, [r3, #8]
 80036fe:	4b13      	ldr	r3, [pc, #76]	; (800374c <SVCCTL_App_Notification+0x3c4>)
 8003700:	715a      	strb	r2, [r3, #5]
                           break;
 8003702:	e000      	b.n	8003706 <SVCCTL_App_Notification+0x37e>
                            break;
 8003704:	bf00      	nop
                      break;
 8003706:	e005      	b.n	8003714 <SVCCTL_App_Notification+0x38c>
                      break;
 8003708:	bf00      	nop
 800370a:	e004      	b.n	8003716 <SVCCTL_App_Notification+0x38e>
                      break;
 800370c:	bf00      	nop
 800370e:	e002      	b.n	8003716 <SVCCTL_App_Notification+0x38e>
                      break;
 8003710:	bf00      	nop
 8003712:	e000      	b.n	8003716 <SVCCTL_App_Notification+0x38e>
                      break;
 8003714:	bf00      	nop
                  k += adlength + 1;
 8003716:	7cfb      	ldrb	r3, [r7, #19]
 8003718:	3301      	adds	r3, #1
 800371a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800371c:	4413      	add	r3, r2
 800371e:	63fb      	str	r3, [r7, #60]	; 0x3c
                while(k < event_data_size)
 8003720:	7ebb      	ldrb	r3, [r7, #26]
 8003722:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003724:	429a      	cmp	r2, r3
 8003726:	db80      	blt.n	800362a <SVCCTL_App_Notification+0x2a2>
            break;
 8003728:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800372a:	e002      	b.n	8003732 <SVCCTL_App_Notification+0x3aa>
      break;
 800372c:	bf00      	nop
 800372e:	e000      	b.n	8003732 <SVCCTL_App_Notification+0x3aa>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8003730:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8003732:	2301      	movs	r3, #1
}
 8003734:	4618      	mov	r0, r3
 8003736:	3744      	adds	r7, #68	; 0x44
 8003738:	46bd      	mov	sp, r7
 800373a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800373c:	08010308 	.word	0x08010308
 8003740:	08010328 	.word	0x08010328
 8003744:	20000684 	.word	0x20000684
 8003748:	2000067e 	.word	0x2000067e
 800374c:	20000678 	.word	0x20000678

08003750 <APP_BLE_Get_Client_Connection_Status>:

APP_BLE_ConnStatus_t APP_BLE_Get_Client_Connection_Status(uint16_t Connection_Handle)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	80fb      	strh	r3, [r7, #6]
  if (BleApplicationContext.BleApplicationContext_legacy.connectionHandle == Connection_Handle)
 800375a:	4b08      	ldr	r3, [pc, #32]	; (800377c <APP_BLE_Get_Client_Connection_Status+0x2c>)
 800375c:	8adb      	ldrh	r3, [r3, #22]
 800375e:	88fa      	ldrh	r2, [r7, #6]
 8003760:	429a      	cmp	r2, r3
 8003762:	d103      	bne.n	800376c <APP_BLE_Get_Client_Connection_Status+0x1c>
  {
    return BleApplicationContext.Device_Connection_Status;
 8003764:	4b05      	ldr	r3, [pc, #20]	; (800377c <APP_BLE_Get_Client_Connection_Status+0x2c>)
 8003766:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800376a:	e000      	b.n	800376e <APP_BLE_Get_Client_Connection_Status+0x1e>
  }
  return APP_BLE_IDLE;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	20000684 	.word	0x20000684

08003780 <APP_BLE_Key_Button1_Action>:
/* USER CODE BEGIN FD */
void APP_BLE_Key_Button1_Action(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
#if OOB_DEMO == 0 
  P2PC_APP_SW1_Button_Action();
#else 
  if(P2P_Client_APP_Get_State () != APP_BLE_CONNECTED_CLIENT)
 8003784:	f000 fe50 	bl	8004428 <P2P_Client_APP_Get_State>
 8003788:	4603      	mov	r3, r0
 800378a:	2b06      	cmp	r3, #6
 800378c:	d004      	beq.n	8003798 <APP_BLE_Key_Button1_Action+0x18>
  {
    UTIL_SEQ_SetTask(1 << CFG_TASK_START_SCAN_ID, CFG_SCH_PRIO_0);
 800378e:	2100      	movs	r1, #0
 8003790:	2001      	movs	r0, #1
 8003792:	f009 fbd7 	bl	800cf44 <UTIL_SEQ_SetTask>
  else 
  {
    P2PC_APP_SW1_Button_Action();
  }   
#endif 
}
 8003796:	e001      	b.n	800379c <APP_BLE_Key_Button1_Action+0x1c>
    P2PC_APP_SW1_Button_Action();
 8003798:	f000 fb30 	bl	8003dfc <P2PC_APP_SW1_Button_Action>
}
 800379c:	bf00      	nop
 800379e:	bd80      	pop	{r7, pc}

080037a0 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
}
 80037a4:	bf00      	nop
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 80037ae:	b480      	push	{r7}
 80037b0:	af00      	add	r7, sp, #0
}
 80037b2:	bf00      	nop
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80037c2:	4b06      	ldr	r3, [pc, #24]	; (80037dc <Ble_Tl_Init+0x20>)
 80037c4:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80037c6:	4b06      	ldr	r3, [pc, #24]	; (80037e0 <Ble_Tl_Init+0x24>)
 80037c8:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80037ca:	463b      	mov	r3, r7
 80037cc:	4619      	mov	r1, r3
 80037ce:	4805      	ldr	r0, [pc, #20]	; (80037e4 <Ble_Tl_Init+0x28>)
 80037d0:	f007 fe02 	bl	800b3d8 <hci_init>

  return;
 80037d4:	bf00      	nop
}
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20030028 	.word	0x20030028
 80037e0:	08003cd5 	.word	0x08003cd5
 80037e4:	08003c9d 	.word	0x08003c9d

080037e8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80037e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ea:	b08d      	sub	sp, #52	; 0x34
 80037ec:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;

  uint16_t a_appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 80037ee:	2300      	movs	r3, #0
 80037f0:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80037f2:	2392      	movs	r3, #146	; 0x92
 80037f4:	75fb      	strb	r3, [r7, #23]

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 80037f6:	489c      	ldr	r0, [pc, #624]	; (8003a68 <Ble_Hci_Gap_Gatt_Init+0x280>)
 80037f8:	f00a fa5a 	bl	800dcb0 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80037fc:	f007 fc4d 	bl	800b09a <hci_reset>
 8003800:	4603      	mov	r3, r0
 8003802:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003804:	7dfb      	ldrb	r3, [r7, #23]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d005      	beq.n	8003816 <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800380a:	7dfb      	ldrb	r3, [r7, #23]
 800380c:	4619      	mov	r1, r3
 800380e:	4897      	ldr	r0, [pc, #604]	; (8003a6c <Ble_Hci_Gap_Gatt_Init+0x284>)
 8003810:	f00a f9e0 	bl	800dbd4 <iprintf>
 8003814:	e002      	b.n	800381c <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 8003816:	4896      	ldr	r0, [pc, #600]	; (8003a70 <Ble_Hci_Gap_Gatt_Init+0x288>)
 8003818:	f00a fa4a 	bl	800dcb0 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800381c:	f000 f9d8 	bl	8003bd0 <BleGetBdAddress>
 8003820:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	2106      	movs	r1, #6
 8003826:	2000      	movs	r0, #0
 8003828:	f007 faf7 	bl	800ae1a <aci_hal_write_config_data>
 800382c:	4603      	mov	r3, r0
 800382e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003830:	7dfb      	ldrb	r3, [r7, #23]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d005      	beq.n	8003842 <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8003836:	7dfb      	ldrb	r3, [r7, #23]
 8003838:	4619      	mov	r1, r3
 800383a:	488e      	ldr	r0, [pc, #568]	; (8003a74 <Ble_Hci_Gap_Gatt_Init+0x28c>)
 800383c:	f00a f9ca 	bl	800dbd4 <iprintf>
 8003840:	e021      	b.n	8003886 <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
   else
   {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 8003842:	488d      	ldr	r0, [pc, #564]	; (8003a78 <Ble_Hci_Gap_Gatt_Init+0x290>)
 8003844:	f00a fa34 	bl	800dcb0 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	3305      	adds	r3, #5
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	3304      	adds	r3, #4
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	461c      	mov	r4, r3
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	3303      	adds	r3, #3
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	461d      	mov	r5, r3
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	3302      	adds	r3, #2
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	461a      	mov	r2, r3
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	3301      	adds	r3, #1
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	4619      	mov	r1, r3
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	9302      	str	r3, [sp, #8]
 8003876:	9101      	str	r1, [sp, #4]
 8003878:	9200      	str	r2, [sp, #0]
 800387a:	462b      	mov	r3, r5
 800387c:	4622      	mov	r2, r4
 800387e:	4601      	mov	r1, r0
 8003880:	487e      	ldr	r0, [pc, #504]	; (8003a7c <Ble_Hci_Gap_Gatt_Init+0x294>)
 8003882:	f00a f9a7 	bl	800dbd4 <iprintf>
   }

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8003886:	4a7e      	ldr	r2, [pc, #504]	; (8003a80 <Ble_Hci_Gap_Gatt_Init+0x298>)
 8003888:	2110      	movs	r1, #16
 800388a:	2018      	movs	r0, #24
 800388c:	f007 fac5 	bl	800ae1a <aci_hal_write_config_data>
 8003890:	4603      	mov	r3, r0
 8003892:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003894:	7dfb      	ldrb	r3, [r7, #23]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d005      	beq.n	80038a6 <Ble_Hci_Gap_Gatt_Init+0xbe>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800389a:	7dfb      	ldrb	r3, [r7, #23]
 800389c:	4619      	mov	r1, r3
 800389e:	4879      	ldr	r0, [pc, #484]	; (8003a84 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80038a0:	f00a f998 	bl	800dbd4 <iprintf>
 80038a4:	e002      	b.n	80038ac <Ble_Hci_Gap_Gatt_Init+0xc4>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 80038a6:	4878      	ldr	r0, [pc, #480]	; (8003a88 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80038a8:	f00a fa02 	bl	800dcb0 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 80038ac:	4a77      	ldr	r2, [pc, #476]	; (8003a8c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80038ae:	2110      	movs	r1, #16
 80038b0:	2008      	movs	r0, #8
 80038b2:	f007 fab2 	bl	800ae1a <aci_hal_write_config_data>
 80038b6:	4603      	mov	r3, r0
 80038b8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80038ba:	7dfb      	ldrb	r3, [r7, #23]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <Ble_Hci_Gap_Gatt_Init+0xe4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 80038c0:	7dfb      	ldrb	r3, [r7, #23]
 80038c2:	4619      	mov	r1, r3
 80038c4:	4872      	ldr	r0, [pc, #456]	; (8003a90 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 80038c6:	f00a f985 	bl	800dbd4 <iprintf>
 80038ca:	e002      	b.n	80038d2 <Ble_Hci_Gap_Gatt_Init+0xea>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 80038cc:	4871      	ldr	r0, [pc, #452]	; (8003a94 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 80038ce:	f00a f9ef 	bl	800dcb0 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80038d2:	2118      	movs	r1, #24
 80038d4:	2001      	movs	r0, #1
 80038d6:	f007 fb25 	bl	800af24 <aci_hal_set_tx_power_level>
 80038da:	4603      	mov	r3, r0
 80038dc:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80038de:	7dfb      	ldrb	r3, [r7, #23]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <Ble_Hci_Gap_Gatt_Init+0x108>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 80038e4:	7dfb      	ldrb	r3, [r7, #23]
 80038e6:	4619      	mov	r1, r3
 80038e8:	486b      	ldr	r0, [pc, #428]	; (8003a98 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 80038ea:	f00a f973 	bl	800dbd4 <iprintf>
 80038ee:	e002      	b.n	80038f6 <Ble_Hci_Gap_Gatt_Init+0x10e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 80038f0:	486a      	ldr	r0, [pc, #424]	; (8003a9c <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 80038f2:	f00a f9dd 	bl	800dcb0 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80038f6:	f006 ff2d 	bl	800a754 <aci_gatt_init>
 80038fa:	4603      	mov	r3, r0
 80038fc:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80038fe:	7dfb      	ldrb	r3, [r7, #23]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <Ble_Hci_Gap_Gatt_Init+0x128>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8003904:	7dfb      	ldrb	r3, [r7, #23]
 8003906:	4619      	mov	r1, r3
 8003908:	4865      	ldr	r0, [pc, #404]	; (8003aa0 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800390a:	f00a f963 	bl	800dbd4 <iprintf>
 800390e:	e002      	b.n	8003916 <Ble_Hci_Gap_Gatt_Init+0x12e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8003910:	4864      	ldr	r0, [pc, #400]	; (8003aa4 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8003912:	f00a f9cd 	bl	800dcb0 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8003916:	2300      	movs	r3, #0
 8003918:	73fb      	strb	r3, [r7, #15]
#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
#endif /* BLE_CFG_PERIPHERAL == 1 */

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
 800391a:	7bfb      	ldrb	r3, [r7, #15]
 800391c:	f043 0304 	orr.w	r3, r3, #4
 8003920:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8003922:	7bfb      	ldrb	r3, [r7, #15]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d02b      	beq.n	8003980 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    const char *name = "P2P_C";
 8003928:	4b5f      	ldr	r3, [pc, #380]	; (8003aa8 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800392a:	60bb      	str	r3, [r7, #8]

    ret = aci_gap_init(role,
 800392c:	1dba      	adds	r2, r7, #6
 800392e:	7bf8      	ldrb	r0, [r7, #15]
 8003930:	1cbb      	adds	r3, r7, #2
 8003932:	9301      	str	r3, [sp, #4]
 8003934:	1d3b      	adds	r3, r7, #4
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	4613      	mov	r3, r2
 800393a:	2207      	movs	r2, #7
 800393c:	2100      	movs	r1, #0
 800393e:	f006 fcc9 	bl	800a2d4 <aci_gap_init>
 8003942:	4603      	mov	r3, r0
 8003944:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 8003946:	7dfb      	ldrb	r3, [r7, #23]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <Ble_Hci_Gap_Gatt_Init+0x170>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800394c:	7dfb      	ldrb	r3, [r7, #23]
 800394e:	4619      	mov	r1, r3
 8003950:	4856      	ldr	r0, [pc, #344]	; (8003aac <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8003952:	f00a f93f 	bl	800dbd4 <iprintf>
 8003956:	e002      	b.n	800395e <Ble_Hci_Gap_Gatt_Init+0x176>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 8003958:	4855      	ldr	r0, [pc, #340]	; (8003ab0 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800395a:	f00a f9a9 	bl	800dcb0 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800395e:	88fc      	ldrh	r4, [r7, #6]
 8003960:	88bd      	ldrh	r5, [r7, #4]
 8003962:	68b8      	ldr	r0, [r7, #8]
 8003964:	f7fc fc6c 	bl	8000240 <strlen>
 8003968:	4603      	mov	r3, r0
 800396a:	b2da      	uxtb	r2, r3
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	4613      	mov	r3, r2
 8003972:	2200      	movs	r2, #0
 8003974:	4629      	mov	r1, r5
 8003976:	4620      	mov	r0, r4
 8003978:	f006 ff11 	bl	800a79e <aci_gatt_update_char_value>
 800397c:	4603      	mov	r3, r0
 800397e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8003980:	88f8      	ldrh	r0, [r7, #6]
 8003982:	8879      	ldrh	r1, [r7, #2]
 8003984:	463b      	mov	r3, r7
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	2302      	movs	r3, #2
 800398a:	2200      	movs	r2, #0
 800398c:	f006 ff07 	bl	800a79e <aci_gatt_update_char_value>
 8003990:	4603      	mov	r3, r0
 8003992:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8003994:	4b47      	ldr	r3, [pc, #284]	; (8003ab4 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8003996:	2201      	movs	r2, #1
 8003998:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800399a:	4b46      	ldr	r3, [pc, #280]	; (8003ab4 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f006 fb80 	bl	800a0a4 <aci_gap_set_io_capability>
 80039a4:	4603      	mov	r3, r0
 80039a6:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80039a8:	7dfb      	ldrb	r3, [r7, #23]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <Ble_Hci_Gap_Gatt_Init+0x1d2>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 80039ae:	7dfb      	ldrb	r3, [r7, #23]
 80039b0:	4619      	mov	r1, r3
 80039b2:	4841      	ldr	r0, [pc, #260]	; (8003ab8 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 80039b4:	f00a f90e 	bl	800dbd4 <iprintf>
 80039b8:	e002      	b.n	80039c0 <Ble_Hci_Gap_Gatt_Init+0x1d8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 80039ba:	4840      	ldr	r0, [pc, #256]	; (8003abc <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 80039bc:	f00a f978 	bl	800dcb0 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80039c0:	4b3c      	ldr	r3, [pc, #240]	; (8003ab4 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80039c6:	4b3b      	ldr	r3, [pc, #236]	; (8003ab4 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 80039c8:	2208      	movs	r2, #8
 80039ca:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80039cc:	4b39      	ldr	r3, [pc, #228]	; (8003ab4 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 80039ce:	2210      	movs	r2, #16
 80039d0:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80039d2:	4b38      	ldr	r3, [pc, #224]	; (8003ab4 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80039d8:	4b36      	ldr	r3, [pc, #216]	; (8003ab4 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 80039da:	4a39      	ldr	r2, [pc, #228]	; (8003ac0 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 80039dc:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80039de:	4b35      	ldr	r3, [pc, #212]	; (8003ab4 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 80039e0:	2201      	movs	r2, #1
 80039e2:	709a      	strb	r2, [r3, #2]

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80039e4:	4b33      	ldr	r3, [pc, #204]	; (8003ab4 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 80039e6:	789c      	ldrb	r4, [r3, #2]
 80039e8:	4b32      	ldr	r3, [pc, #200]	; (8003ab4 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 80039ea:	785d      	ldrb	r5, [r3, #1]
 80039ec:	4b31      	ldr	r3, [pc, #196]	; (8003ab4 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 80039ee:	791b      	ldrb	r3, [r3, #4]
 80039f0:	4a30      	ldr	r2, [pc, #192]	; (8003ab4 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 80039f2:	7952      	ldrb	r2, [r2, #5]
 80039f4:	492f      	ldr	r1, [pc, #188]	; (8003ab4 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 80039f6:	78c9      	ldrb	r1, [r1, #3]
 80039f8:	482e      	ldr	r0, [pc, #184]	; (8003ab4 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 80039fa:	6880      	ldr	r0, [r0, #8]
 80039fc:	2600      	movs	r6, #0
 80039fe:	9604      	str	r6, [sp, #16]
 8003a00:	9003      	str	r0, [sp, #12]
 8003a02:	9102      	str	r1, [sp, #8]
 8003a04:	9201      	str	r2, [sp, #4]
 8003a06:	9300      	str	r3, [sp, #0]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	4629      	mov	r1, r5
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f006 fb9c 	bl	800a14c <aci_gap_set_authentication_requirement>
 8003a14:	4603      	mov	r3, r0
 8003a16:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 8003a18:	7dfb      	ldrb	r3, [r7, #23]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d005      	beq.n	8003a2a <Ble_Hci_Gap_Gatt_Init+0x242>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 8003a1e:	7dfb      	ldrb	r3, [r7, #23]
 8003a20:	4619      	mov	r1, r3
 8003a22:	4828      	ldr	r0, [pc, #160]	; (8003ac4 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8003a24:	f00a f8d6 	bl	800dbd4 <iprintf>
 8003a28:	e002      	b.n	8003a30 <Ble_Hci_Gap_Gatt_Init+0x248>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 8003a2a:	4827      	ldr	r0, [pc, #156]	; (8003ac8 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 8003a2c:	f00a f940 	bl	800dcb0 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8003a30:	4b20      	ldr	r3, [pc, #128]	; (8003ab4 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8003a32:	789b      	ldrb	r3, [r3, #2]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00f      	beq.n	8003a58 <Ble_Hci_Gap_Gatt_Init+0x270>
  {
    ret = aci_gap_configure_whitelist();
 8003a38:	f006 fcf9 	bl	800a42e <aci_gap_configure_filter_accept_list>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 8003a40:	7dfb      	ldrb	r3, [r7, #23]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <Ble_Hci_Gap_Gatt_Init+0x26a>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 8003a46:	7dfb      	ldrb	r3, [r7, #23]
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4820      	ldr	r0, [pc, #128]	; (8003acc <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 8003a4c:	f00a f8c2 	bl	800dbd4 <iprintf>
 8003a50:	e002      	b.n	8003a58 <Ble_Hci_Gap_Gatt_Init+0x270>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 8003a52:	481f      	ldr	r0, [pc, #124]	; (8003ad0 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8003a54:	f00a f92c 	bl	800dcb0 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 8003a58:	481e      	ldr	r0, [pc, #120]	; (8003ad4 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8003a5a:	f00a f8bb 	bl	800dbd4 <iprintf>
}
 8003a5e:	bf00      	nop
 8003a60:	371c      	adds	r7, #28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a66:	bf00      	nop
 8003a68:	0801034c 	.word	0x0801034c
 8003a6c:	08010378 	.word	0x08010378
 8003a70:	080103a8 	.word	0x080103a8
 8003a74:	080103c8 	.word	0x080103c8
 8003a78:	08010424 	.word	0x08010424
 8003a7c:	08010470 	.word	0x08010470
 8003a80:	08010db8 	.word	0x08010db8
 8003a84:	080104ac 	.word	0x080104ac
 8003a88:	08010504 	.word	0x08010504
 8003a8c:	08010dc8 	.word	0x08010dc8
 8003a90:	0801054c 	.word	0x0801054c
 8003a94:	080105a4 	.word	0x080105a4
 8003a98:	080105ec 	.word	0x080105ec
 8003a9c:	0801062c 	.word	0x0801062c
 8003aa0:	0801065c 	.word	0x0801065c
 8003aa4:	08010690 	.word	0x08010690
 8003aa8:	080106b4 	.word	0x080106b4
 8003aac:	080106bc 	.word	0x080106bc
 8003ab0:	080106ec 	.word	0x080106ec
 8003ab4:	20000684 	.word	0x20000684
 8003ab8:	0801070c 	.word	0x0801070c
 8003abc:	0801074c 	.word	0x0801074c
 8003ac0:	0001b207 	.word	0x0001b207
 8003ac4:	0801077c 	.word	0x0801077c
 8003ac8:	080107c8 	.word	0x080107c8
 8003acc:	08010804 	.word	0x08010804
 8003ad0:	08010844 	.word	0x08010844
 8003ad4:	08010874 	.word	0x08010874

08003ad8 <Scan_Request>:

static void Scan_Request(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Scan_Request_1 */

  /* USER CODE END Scan_Request_1 */
  tBleStatus result;
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 8003ade:	4b13      	ldr	r3, [pc, #76]	; (8003b2c <Scan_Request+0x54>)
 8003ae0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ae4:	2b06      	cmp	r3, #6
 8003ae6:	d01d      	beq.n	8003b24 <Scan_Request+0x4c>
  {
    /* USER CODE BEGIN APP_BLE_CONNECTED_CLIENT */
    BSP_LED_On(LED_BLUE);
 8003ae8:	2000      	movs	r0, #0
 8003aea:	f001 f8a7 	bl	8004c3c <BSP_LED_On>
    APP_DBG_MSG("LED BLUE ON\n");
 8003aee:	4810      	ldr	r0, [pc, #64]	; (8003b30 <Scan_Request+0x58>)
 8003af0:	f00a f8de 	bl	800dcb0 <puts>
    /* USER CODE END APP_BLE_CONNECTED_CLIENT */
    result = aci_gap_start_general_discovery_proc(SCAN_P, SCAN_L, CFG_BLE_ADDRESS_TYPE, 1);
 8003af4:	2301      	movs	r3, #1
 8003af6:	2200      	movs	r2, #0
 8003af8:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003afc:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003b00:	f006 fcb9 	bl	800a476 <aci_gap_start_general_discovery_proc>
 8003b04:	4603      	mov	r3, r0
 8003b06:	71fb      	strb	r3, [r7, #7]
    if (result == BLE_STATUS_SUCCESS)
 8003b08:	79fb      	ldrb	r3, [r7, #7]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d103      	bne.n	8003b16 <Scan_Request+0x3e>
    {
    /* USER CODE BEGIN BLE_SCAN_SUCCESS */

    /* USER CODE END BLE_SCAN_SUCCESS */
      APP_DBG_MSG(" \r\n\r** START GENERAL DISCOVERY (SCAN) **  \r\n\r");
 8003b0e:	4809      	ldr	r0, [pc, #36]	; (8003b34 <Scan_Request+0x5c>)
 8003b10:	f00a f860 	bl	800dbd4 <iprintf>
    }
  }
  /* USER CODE BEGIN Scan_Request_2 */

  /* USER CODE END Scan_Request_2 */
  return;
 8003b14:	e006      	b.n	8003b24 <Scan_Request+0x4c>
      BSP_LED_On(LED_RED);
 8003b16:	2002      	movs	r0, #2
 8003b18:	f001 f890 	bl	8004c3c <BSP_LED_On>
      APP_DBG_MSG("-- BLE_App_Start_Limited_Disc_Req, Failed \r\n\r");
 8003b1c:	4806      	ldr	r0, [pc, #24]	; (8003b38 <Scan_Request+0x60>)
 8003b1e:	f00a f859 	bl	800dbd4 <iprintf>
  return;
 8003b22:	bf00      	nop
 8003b24:	bf00      	nop
}
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	20000684 	.word	0x20000684
 8003b30:	080108a0 	.word	0x080108a0
 8003b34:	080108ac 	.word	0x080108ac
 8003b38:	080108dc 	.word	0x080108dc

08003b3c <Connect_Request>:

static void Connect_Request(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08a      	sub	sp, #40	; 0x28
 8003b40:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN Connect_Request_1 */

  /* USER CODE END Connect_Request_1 */
  tBleStatus result;

  APP_DBG_MSG("\r\n\r** CREATE CONNECTION TO SERVER **  \r\n\r");
 8003b42:	481b      	ldr	r0, [pc, #108]	; (8003bb0 <Connect_Request+0x74>)
 8003b44:	f00a f846 	bl	800dbd4 <iprintf>

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_CLIENT)
 8003b48:	4b1a      	ldr	r3, [pc, #104]	; (8003bb4 <Connect_Request+0x78>)
 8003b4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b4e:	2b06      	cmp	r3, #6
 8003b50:	d029      	beq.n	8003ba6 <Connect_Request+0x6a>
  {
    result = aci_gap_create_connection(SCAN_P,
 8003b52:	4b19      	ldr	r3, [pc, #100]	; (8003bb8 <Connect_Request+0x7c>)
 8003b54:	781a      	ldrb	r2, [r3, #0]
 8003b56:	2310      	movs	r3, #16
 8003b58:	9306      	str	r3, [sp, #24]
 8003b5a:	2310      	movs	r3, #16
 8003b5c:	9305      	str	r3, [sp, #20]
 8003b5e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003b62:	9304      	str	r3, [sp, #16]
 8003b64:	2300      	movs	r3, #0
 8003b66:	9303      	str	r3, [sp, #12]
 8003b68:	2350      	movs	r3, #80	; 0x50
 8003b6a:	9302      	str	r3, [sp, #8]
 8003b6c:	2328      	movs	r3, #40	; 0x28
 8003b6e:	9301      	str	r3, [sp, #4]
 8003b70:	2300      	movs	r3, #0
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <Connect_Request+0x80>)
 8003b76:	f44f 7148 	mov.w	r1, #800	; 0x320
 8003b7a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8003b7e:	f006 fd0e 	bl	800a59e <aci_gap_create_connection>
 8003b82:	4603      	mov	r3, r0
 8003b84:	71fb      	strb	r3, [r7, #7]
                                       0,
                                       SUPERV_TIMEOUT,
                                       CONN_L1,
                                       CONN_L2);

    if (result == BLE_STATUS_SUCCESS)
 8003b86:	79fb      	ldrb	r3, [r7, #7]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d104      	bne.n	8003b96 <Connect_Request+0x5a>
    {
      /* USER CODE BEGIN BLE_CONNECT_SUCCESS */

      /* USER CODE END BLE_CONNECT_SUCCESS */
      BleApplicationContext.Device_Connection_Status = APP_BLE_LP_CONNECTING;
 8003b8c:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <Connect_Request+0x78>)
 8003b8e:	2204      	movs	r2, #4
 8003b90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    }
  }
  /* USER CODE BEGIN Connect_Request_2 */

  /* USER CODE END Connect_Request_2 */
  return;
 8003b94:	e007      	b.n	8003ba6 <Connect_Request+0x6a>
      BSP_LED_On(LED_RED);
 8003b96:	2002      	movs	r0, #2
 8003b98:	f001 f850 	bl	8004c3c <BSP_LED_On>
      BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <Connect_Request+0x78>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return;
 8003ba4:	bf00      	nop
 8003ba6:	bf00      	nop
}
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	0801090c 	.word	0x0801090c
 8003bb4:	20000684 	.word	0x20000684
 8003bb8:	2000067e 	.word	0x2000067e
 8003bbc:	20000678 	.word	0x20000678

08003bc0 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 8003bc4:	2001      	movs	r0, #1
 8003bc6:	f001 f853 	bl	8004c70 <BSP_LED_Off>
  /* USER CODE END Switch_OFF_GPIO */
}
 8003bca:	bf00      	nop
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8003bd6:	f7ff fb33 	bl	8003240 <LL_FLASH_GetUDN>
 8003bda:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be2:	d023      	beq.n	8003c2c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8003be4:	f7ff fb44 	bl	8003270 <LL_FLASH_GetSTCompanyID>
 8003be8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8003bea:	f7ff fb35 	bl	8003258 <LL_FLASH_GetDeviceID>
 8003bee:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	4b16      	ldr	r3, [pc, #88]	; (8003c50 <BleGetBdAddress+0x80>)
 8003bf6:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	0a1b      	lsrs	r3, r3, #8
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	4b14      	ldr	r3, [pc, #80]	; (8003c50 <BleGetBdAddress+0x80>)
 8003c00:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	4b12      	ldr	r3, [pc, #72]	; (8003c50 <BleGetBdAddress+0x80>)
 8003c08:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	b2da      	uxtb	r2, r3
 8003c0e:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <BleGetBdAddress+0x80>)
 8003c10:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	0a1b      	lsrs	r3, r3, #8
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	4b0d      	ldr	r3, [pc, #52]	; (8003c50 <BleGetBdAddress+0x80>)
 8003c1a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	0c1b      	lsrs	r3, r3, #16
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <BleGetBdAddress+0x80>)
 8003c24:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8003c26:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <BleGetBdAddress+0x80>)
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	e00b      	b.n	8003c44 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	f007 fd8f 	bl	800b750 <OTP_Read>
 8003c32:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	e001      	b.n	8003c44 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8003c40:	4b04      	ldr	r3, [pc, #16]	; (8003c54 <BleGetBdAddress+0x84>)
 8003c42:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8003c44:	697b      	ldr	r3, [r7, #20]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20000670 	.word	0x20000670
 8003c54:	08010db0 	.word	0x08010db0

08003c58 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8003c60:	2100      	movs	r1, #0
 8003c62:	2010      	movs	r0, #16
 8003c64:	f009 f96e 	bl	800cf44 <UTIL_SEQ_SetTask>
  return;
 8003c68:	bf00      	nop
}
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8003c78:	2001      	movs	r0, #1
 8003c7a:	f009 f9cf 	bl	800d01c <UTIL_SEQ_SetEvt>
  return;
 8003c7e:	bf00      	nop
}
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b082      	sub	sp, #8
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8003c8e:	2001      	movs	r0, #1
 8003c90:	f009 f9e4 	bl	800d05c <UTIL_SEQ_WaitEvt>
  return;
 8003c94:	bf00      	nop
}
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void * pPayload)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	3308      	adds	r3, #8
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f008 fd30 	bl	800c714 <SVCCTL_UserEvtRx>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8003cb8:	7afb      	ldrb	r3, [r7, #11]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	701a      	strb	r2, [r3, #0]
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8003cc4:	e003      	b.n	8003cce <BLE_UserEvtRx+0x32>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	701a      	strb	r2, [r3, #0]
  return;
 8003ccc:	bf00      	nop
}
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t status)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	4603      	mov	r3, r0
 8003cdc:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8003cde:	79fb      	ldrb	r3, [r7, #7]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <BLE_StatusNot+0x16>
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d006      	beq.n	8003cf6 <BLE_StatusNot+0x22>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
      UTIL_SEQ_ResumeTask(task_id_list);
      break;

    default:
      break;
 8003ce8:	e00b      	b.n	8003d02 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8003cea:	23ff      	movs	r3, #255	; 0xff
 8003cec:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f009 f954 	bl	800cf9c <UTIL_SEQ_PauseTask>
      break;
 8003cf4:	e005      	b.n	8003d02 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8003cf6:	23ff      	movs	r3, #255	; 0xff
 8003cf8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f009 f96e 	bl	800cfdc <UTIL_SEQ_ResumeTask>
      break;
 8003d00:	bf00      	nop
  }
  return;
 8003d02:	bf00      	nop
}
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
	...

08003d0c <P2PC_APP_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PC_APP_Init(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
  uint8_t index =0;
 8003d12:	2300      	movs	r3, #0
 8003d14:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN P2PC_APP_Init_1 */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SEARCH_SERVICE_ID, UTIL_SEQ_RFU, Update_Service );
 8003d16:	4a1a      	ldr	r2, [pc, #104]	; (8003d80 <P2PC_APP_Init+0x74>)
 8003d18:	2100      	movs	r1, #0
 8003d1a:	2004      	movs	r0, #4
 8003d1c:	f009 f8f0 	bl	800cf00 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Button_Trigger_Received );
 8003d20:	4a18      	ldr	r2, [pc, #96]	; (8003d84 <P2PC_APP_Init+0x78>)
 8003d22:	2100      	movs	r1, #0
 8003d24:	2020      	movs	r0, #32
 8003d26:	f009 f8eb 	bl	800cf00 <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  P2P_Client_App_Context.Notification_Status=0;
 8003d2a:	4b17      	ldr	r3, [pc, #92]	; (8003d88 <P2PC_APP_Init+0x7c>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	701a      	strb	r2, [r3, #0]
  P2P_Client_App_Context.ConnectionHandle =  0x00;
 8003d30:	4b15      	ldr	r3, [pc, #84]	; (8003d88 <P2PC_APP_Init+0x7c>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	80da      	strh	r2, [r3, #6]

  P2P_Client_App_Context.LedControl.Device_Led_Selection=0x00;/* device Led */
 8003d36:	4b14      	ldr	r3, [pc, #80]	; (8003d88 <P2PC_APP_Init+0x7c>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	705a      	strb	r2, [r3, #1]
  P2P_Client_App_Context.LedControl.Led1=0x00; /* led OFF */
 8003d3c:	4b12      	ldr	r3, [pc, #72]	; (8003d88 <P2PC_APP_Init+0x7c>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	709a      	strb	r2, [r3, #2]
  P2P_Client_App_Context.ButtonStatus.Device_Button_Selection=0x01;/* Device1 */
 8003d42:	4b11      	ldr	r3, [pc, #68]	; (8003d88 <P2PC_APP_Init+0x7c>)
 8003d44:	2201      	movs	r2, #1
 8003d46:	70da      	strb	r2, [r3, #3]
  P2P_Client_App_Context.ButtonStatus.Button1=0x00;
 8003d48:	4b0f      	ldr	r3, [pc, #60]	; (8003d88 <P2PC_APP_Init+0x7c>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	711a      	strb	r2, [r3, #4]
/* USER CODE END P2PC_APP_Init_1 */
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 8003d4e:	2300      	movs	r3, #0
 8003d50:	71fb      	strb	r3, [r7, #7]
 8003d52:	e008      	b.n	8003d66 <P2PC_APP_Init+0x5a>
  {
    aP2PClientContext[index].state= APP_BLE_IDLE;
 8003d54:	79fb      	ldrb	r3, [r7, #7]
 8003d56:	4a0d      	ldr	r2, [pc, #52]	; (8003d8c <P2PC_APP_Init+0x80>)
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	4413      	add	r3, r2
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	701a      	strb	r2, [r3, #0]
  for(index = 0; index < BLE_CFG_CLT_MAX_NBR_CB; index++)
 8003d60:	79fb      	ldrb	r3, [r7, #7]
 8003d62:	3301      	adds	r3, #1
 8003d64:	71fb      	strb	r3, [r7, #7]
 8003d66:	79fb      	ldrb	r3, [r7, #7]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0f3      	beq.n	8003d54 <P2PC_APP_Init+0x48>
  }

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterCltHandler(Event_Handler);
 8003d6c:	4808      	ldr	r0, [pc, #32]	; (8003d90 <P2PC_APP_Init+0x84>)
 8003d6e:	f008 fcb7 	bl	800c6e0 <SVCCTL_RegisterCltHandler>

#if(CFG_DEBUG_APP_TRACE != 0)
  APP_DBG_MSG("-- P2P CLIENT INITIALIZED \n");
 8003d72:	4808      	ldr	r0, [pc, #32]	; (8003d94 <P2PC_APP_Init+0x88>)
 8003d74:	f009 ff9c 	bl	800dcb0 <puts>
#endif

/* USER CODE BEGIN P2PC_APP_Init_2 */

/* USER CODE END P2PC_APP_Init_2 */
  return;
 8003d78:	bf00      	nop
}
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	080044fd 	.word	0x080044fd
 8003d84:	080044b5 	.word	0x080044b5
 8003d88:	20000724 	.word	0x20000724
 8003d8c:	20000714 	.word	0x20000714
 8003d90:	08003e0d 	.word	0x08003e0d
 8003d94:	08010938 	.word	0x08010938

08003d98 <P2PC_APP_Notification>:

void P2PC_APP_Notification(P2PC_APP_ConnHandle_Not_evt_t *pNotification)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PC_APP_Notification_1 */

/* USER CODE END P2PC_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <P2PC_APP_Notification+0x16>
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d005      	beq.n	8003db8 <P2PC_APP_Notification+0x20>

    default:
/* USER CODE BEGIN P2P_Evt_Opcode_Default */

/* USER CODE END P2P_Evt_Opcode_Default */
      break;
 8003dac:	e01e      	b.n	8003dec <P2PC_APP_Notification+0x54>
    P2P_Client_App_Context.ConnectionHandle = pNotification->ConnectionHandle;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	885a      	ldrh	r2, [r3, #2]
 8003db2:	4b10      	ldr	r3, [pc, #64]	; (8003df4 <P2PC_APP_Notification+0x5c>)
 8003db4:	80da      	strh	r2, [r3, #6]
      break;
 8003db6:	e019      	b.n	8003dec <P2PC_APP_Notification+0x54>
      uint8_t index = 0;
 8003db8:	2300      	movs	r3, #0
 8003dba:	73fb      	strb	r3, [r7, #15]
      P2P_Client_App_Context.ConnectionHandle =  0x00;
 8003dbc:	4b0d      	ldr	r3, [pc, #52]	; (8003df4 <P2PC_APP_Notification+0x5c>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	80da      	strh	r2, [r3, #6]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003dc2:	e005      	b.n	8003dd0 <P2PC_APP_Notification+0x38>
        aP2PClientContext[index].state = APP_BLE_IDLE;
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
 8003dc6:	4a0c      	ldr	r2, [pc, #48]	; (8003df8 <P2PC_APP_Notification+0x60>)
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	4413      	add	r3, r2
 8003dcc:	2200      	movs	r2, #0
 8003dce:	701a      	strb	r2, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <P2PC_APP_Notification+0x4c>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
 8003dd8:	4a07      	ldr	r2, [pc, #28]	; (8003df8 <P2PC_APP_Notification+0x60>)
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	4413      	add	r3, r2
 8003dde:	781b      	ldrb	r3, [r3, #0]
      while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1ef      	bne.n	8003dc4 <P2PC_APP_Notification+0x2c>
      BSP_LED_Off(LED_BLUE); 
 8003de4:	2000      	movs	r0, #0
 8003de6:	f000 ff43 	bl	8004c70 <BSP_LED_Off>
      break;
 8003dea:	bf00      	nop
  }
/* USER CODE BEGIN P2PC_APP_Notification_2 */

/* USER CODE END P2PC_APP_Notification_2 */
  return;
 8003dec:	bf00      	nop
}
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20000724 	.word	0x20000724
 8003df8:	20000714 	.word	0x20000714

08003dfc <P2PC_APP_SW1_Button_Action>:
/* USER CODE BEGIN FD */
void P2PC_APP_SW1_Button_Action(void)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	af00      	add	r7, sp, #0

  UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 8003e00:	2100      	movs	r1, #0
 8003e02:	2020      	movs	r0, #32
 8003e04:	f009 f89e 	bl	800cf44 <UTIL_SEQ_SetTask>

}
 8003e08:	bf00      	nop
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Event_Handler(void *Event)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b094      	sub	sp, #80	; 0x50
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;

  P2P_Client_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8003e14:	2300      	movs	r3, #0
 8003e16:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	643b      	str	r3, [r7, #64]	; 0x40

  switch(event_pckt->evt)
 8003e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2bff      	cmp	r3, #255	; 0xff
 8003e26:	f040 82b4 	bne.w	8004392 <Event_Handler+0x586>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8003e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e2c:	3302      	adds	r3, #2
 8003e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      switch(blecore_evt->ecode)
 8003e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	f6a3 4304 	subw	r3, r3, #3076	; 0xc04
 8003e3a:	2b0c      	cmp	r3, #12
 8003e3c:	f200 829d 	bhi.w	800437a <Event_Handler+0x56e>
 8003e40:	a201      	add	r2, pc, #4	; (adr r2, 8003e48 <Event_Handler+0x3c>)
 8003e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e46:	bf00      	nop
 8003e48:	0800418d 	.word	0x0800418d
 8003e4c:	0800437b 	.word	0x0800437b
 8003e50:	08004033 	.word	0x08004033
 8003e54:	0800437b 	.word	0x0800437b
 8003e58:	0800437b 	.word	0x0800437b
 8003e5c:	0800437b 	.word	0x0800437b
 8003e60:	08003e7d 	.word	0x08003e7d
 8003e64:	0800437b 	.word	0x0800437b
 8003e68:	0800437b 	.word	0x0800437b
 8003e6c:	0800437b 	.word	0x0800437b
 8003e70:	0800437b 	.word	0x0800437b
 8003e74:	080042a9 	.word	0x080042a9
 8003e78:	08004325 	.word	0x08004325
      {

        case ACI_ATT_READ_BY_GROUP_TYPE_RESP_VSEVT_CODE:
        {
          aci_att_read_by_group_type_resp_event_rp0 *pr = (void*)blecore_evt->data;
 8003e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e7e:	3302      	adds	r3, #2
 8003e80:	633b      	str	r3, [r7, #48]	; 0x30
          uint8_t numServ, i, idx;
          uint16_t uuid, handle;

          uint8_t index;
          handle = pr->Connection_Handle;
 8003e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e84:	781a      	ldrb	r2, [r3, #0]
 8003e86:	785b      	ldrb	r3, [r3, #1]
 8003e88:	021b      	lsls	r3, r3, #8
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
          index = 0;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003e94:	e02e      	b.n	8003ef4 <Event_Handler+0xe8>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
          {
            APP_BLE_ConnStatus_t status;

            status = APP_BLE_Get_Client_Connection_Status(aP2PClientContext[index].connHandle);
 8003e96:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003e9a:	4ab8      	ldr	r2, [pc, #736]	; (800417c <Event_Handler+0x370>)
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	4413      	add	r3, r2
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff fc53 	bl	8003750 <APP_BLE_Get_Client_Connection_Status>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

            if((aP2PClientContext[index].state == APP_BLE_CONNECTED_CLIENT)&&
 8003eb0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003eb4:	4ab1      	ldr	r2, [pc, #708]	; (800417c <Event_Handler+0x370>)
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	4413      	add	r3, r2
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	2b06      	cmp	r3, #6
 8003ebe:	d114      	bne.n	8003eea <Event_Handler+0xde>
 8003ec0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d110      	bne.n	8003eea <Event_Handler+0xde>
                    (status == APP_BLE_IDLE))
            {
              /* Handle deconnected */

              aP2PClientContext[index].state = APP_BLE_IDLE;
 8003ec8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003ecc:	4aab      	ldr	r2, [pc, #684]	; (800417c <Event_Handler+0x370>)
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	4413      	add	r3, r2
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	701a      	strb	r2, [r3, #0]
              aP2PClientContext[index].connHandle = 0xFFFF;
 8003ed6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003eda:	4aa8      	ldr	r2, [pc, #672]	; (800417c <Event_Handler+0x370>)
 8003edc:	011b      	lsls	r3, r3, #4
 8003ede:	4413      	add	r3, r2
 8003ee0:	3302      	adds	r3, #2
 8003ee2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ee6:	801a      	strh	r2, [r3, #0]
              break;
 8003ee8:	e010      	b.n	8003f0c <Event_Handler+0x100>
            }
            index++;
 8003eea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003eee:	3301      	adds	r3, #1
 8003ef0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003ef4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d107      	bne.n	8003f0c <Event_Handler+0x100>
                  (aP2PClientContext[index].state != APP_BLE_IDLE))
 8003efc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003f00:	4a9e      	ldr	r2, [pc, #632]	; (800417c <Event_Handler+0x370>)
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	4413      	add	r3, r2
 8003f06:	781b      	ldrb	r3, [r3, #0]
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1c4      	bne.n	8003e96 <Event_Handler+0x8a>
          }

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 8003f0c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f040 8234 	bne.w	800437e <Event_Handler+0x572>
          {
            aP2PClientContext[index].connHandle= handle;
 8003f16:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003f1a:	4a98      	ldr	r2, [pc, #608]	; (800417c <Event_Handler+0x370>)
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	4413      	add	r3, r2
 8003f20:	3302      	adds	r3, #2
 8003f22:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003f24:	801a      	strh	r2, [r3, #0]

            numServ = (pr->Data_Length) / pr->Attribute_Data_Length;
 8003f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f28:	78da      	ldrb	r2, [r3, #3]
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2c:	789b      	ldrb	r3, [r3, #2]
 8003f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f32:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
             * 2 or 16 bytes data
             * we are interested only if the UUID is 16 bit.
             * So check if the data length is 6
             */
#if (UUID_128BIT_FORMAT==1)
          if (pr->Attribute_Data_Length == 20)
 8003f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f38:	789b      	ldrb	r3, [r3, #2]
 8003f3a:	2b14      	cmp	r3, #20
 8003f3c:	f040 821f 	bne.w	800437e <Event_Handler+0x572>
          {
            idx = 16;
 8003f40:	2310      	movs	r3, #16
 8003f42:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
#else
          if (pr->Attribute_Data_Length == 6)
          {
            idx = 4;
#endif
              for (i=0; i<numServ; i++)
 8003f46:	2300      	movs	r3, #0
 8003f48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003f4c:	e06a      	b.n	8004024 <Event_Handler+0x218>
              {
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx]);
 8003f4e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f54:	4413      	add	r3, r2
 8003f56:	791b      	ldrb	r3, [r3, #4]
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003f5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f60:	440b      	add	r3, r1
 8003f62:	3304      	adds	r3, #4
 8003f64:	3301      	adds	r3, #1
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	021b      	lsls	r3, r3, #8
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	857b      	strh	r3, [r7, #42]	; 0x2a
                if(uuid == P2P_SERVICE_UUID)
 8003f72:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003f74:	f64f 6240 	movw	r2, #65088	; 0xfe40
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d149      	bne.n	8004010 <Event_Handler+0x204>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : P2P_SERVICE_UUID FOUND - connection handle 0x%x \n", aP2PClientContext[index].connHandle);
 8003f7c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003f80:	4a7e      	ldr	r2, [pc, #504]	; (800417c <Event_Handler+0x370>)
 8003f82:	011b      	lsls	r3, r3, #4
 8003f84:	4413      	add	r3, r2
 8003f86:	3302      	adds	r3, #2
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	487c      	ldr	r0, [pc, #496]	; (8004180 <Event_Handler+0x374>)
 8003f8e:	f009 fe21 	bl	800dbd4 <iprintf>
#endif
#if (UUID_128BIT_FORMAT==1)
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-16]);
 8003f92:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003f96:	3b10      	subs	r3, #16
 8003f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f9a:	4413      	add	r3, r2
 8003f9c:	791b      	ldrb	r3, [r3, #4]
 8003f9e:	b299      	uxth	r1, r3
 8003fa0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003fa4:	3b10      	subs	r3, #16
 8003fa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fa8:	4413      	add	r3, r2
 8003faa:	3304      	adds	r3, #4
 8003fac:	3301      	adds	r3, #1
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	021b      	lsls	r3, r3, #8
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	b291      	uxth	r1, r2
 8003fbe:	4a6f      	ldr	r2, [pc, #444]	; (800417c <Event_Handler+0x370>)
 8003fc0:	011b      	lsls	r3, r3, #4
 8003fc2:	4413      	add	r3, r2
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	460a      	mov	r2, r1
 8003fc8:	801a      	strh	r2, [r3, #0]
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-14]);
 8003fca:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003fce:	3b0e      	subs	r3, #14
 8003fd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fd2:	4413      	add	r3, r2
 8003fd4:	791b      	ldrb	r3, [r3, #4]
 8003fd6:	b299      	uxth	r1, r3
 8003fd8:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8003fdc:	3b0e      	subs	r3, #14
 8003fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fe0:	4413      	add	r3, r2
 8003fe2:	3304      	adds	r3, #4
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	021b      	lsls	r3, r3, #8
 8003fec:	b29a      	uxth	r2, r3
 8003fee:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	b291      	uxth	r1, r2
 8003ff6:	4a61      	ldr	r2, [pc, #388]	; (800417c <Event_Handler+0x370>)
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3306      	adds	r3, #6
 8003ffe:	460a      	mov	r2, r1
 8004000:	801a      	strh	r2, [r3, #0]
#else
                aP2PClientContext[index].P2PServiceHandle = UNPACK_2_BYTE_PARAMETER(&pr->Attribute_Data_List[idx-4]);
                aP2PClientContext[index].P2PServiceEndHandle = UNPACK_2_BYTE_PARAMETER (&pr->Attribute_Data_List[idx-2]);
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_CHARACS ;
 8004002:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004006:	4a5d      	ldr	r2, [pc, #372]	; (800417c <Event_Handler+0x370>)
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	4413      	add	r3, r2
 800400c:	2208      	movs	r2, #8
 800400e:	701a      	strb	r2, [r3, #0]
                }
                idx += 6;
 8004010:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8004014:	3306      	adds	r3, #6
 8004016:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
              for (i=0; i<numServ; i++)
 800401a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800401e:	3301      	adds	r3, #1
 8004020:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8004024:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8004028:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800402c:	429a      	cmp	r2, r3
 800402e:	d38e      	bcc.n	8003f4e <Event_Handler+0x142>
              }
            }
          }
        }
        break;
 8004030:	e1a5      	b.n	800437e <Event_Handler+0x572>

        case ACI_ATT_READ_BY_TYPE_RESP_VSEVT_CODE:
        {

          aci_att_read_by_type_resp_event_rp0 *pr = (void*)blecore_evt->data;
 8004032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004034:	3302      	adds	r3, #2
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
           * 2 or 16 bytes data
           */

          uint8_t index;

          index = 0;
 8004038:	2300      	movs	r3, #0
 800403a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800403e:	e004      	b.n	800404a <Event_Handler+0x23e>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 8004040:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004044:	3301      	adds	r3, #1
 8004046:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800404a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10b      	bne.n	800406a <Event_Handler+0x25e>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 8004052:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004056:	4a49      	ldr	r2, [pc, #292]	; (800417c <Event_Handler+0x370>)
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	4413      	add	r3, r2
 800405c:	3302      	adds	r3, #2
 800405e:	881a      	ldrh	r2, [r3, #0]
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8004066:	429a      	cmp	r2, r3
 8004068:	d1ea      	bne.n	8004040 <Event_Handler+0x234>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 800406a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800406e:	2b00      	cmp	r3, #0
 8004070:	f040 8187 	bne.w	8004382 <Event_Handler+0x576>
          {

            /* we are interested in only 16 bit UUIDs */
#if (UUID_128BIT_FORMAT==1)
            idx = 17;
 8004074:	2311      	movs	r3, #17
 8004076:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
            if (pr->Handle_Value_Pair_Length == 21)
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	789b      	ldrb	r3, [r3, #2]
 800407e:	2b15      	cmp	r3, #21
 8004080:	f040 817f 	bne.w	8004382 <Event_Handler+0x576>
#else
              idx = 5;
            if (pr->Handle_Value_Pair_Length == 7)
#endif
            {
              pr->Data_Length -= 1;
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	78db      	ldrb	r3, [r3, #3]
 8004088:	3b01      	subs	r3, #1
 800408a:	b2da      	uxtb	r2, r3
 800408c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408e:	70da      	strb	r2, [r3, #3]
              while(pr->Data_Length > 0)
 8004090:	e06f      	b.n	8004172 <Event_Handler+0x366>
              {
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx]);
 8004092:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004098:	4413      	add	r3, r2
 800409a:	791b      	ldrb	r3, [r3, #4]
 800409c:	b29a      	uxth	r2, r3
 800409e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80040a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040a4:	440b      	add	r3, r1
 80040a6:	3304      	adds	r3, #4
 80040a8:	3301      	adds	r3, #1
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	021b      	lsls	r3, r3, #8
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	4313      	orrs	r3, r2
 80040b4:	847b      	strh	r3, [r7, #34]	; 0x22
                /* store the characteristic handle not the attribute handle */
#if (UUID_128BIT_FORMAT==1)
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-14]);
 80040b6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80040ba:	3b0e      	subs	r3, #14
 80040bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040be:	4413      	add	r3, r2
 80040c0:	791b      	ldrb	r3, [r3, #4]
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80040c8:	3b0e      	subs	r3, #14
 80040ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040cc:	440b      	add	r3, r1
 80040ce:	3304      	adds	r3, #4
 80040d0:	3301      	adds	r3, #1
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	021b      	lsls	r3, r3, #8
 80040d8:	b29b      	uxth	r3, r3
 80040da:	4313      	orrs	r3, r2
 80040dc:	843b      	strh	r3, [r7, #32]
#else
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_Value_Pair_Data[idx-2]);
#endif
                if(uuid == P2P_WRITE_CHAR_UUID)
 80040de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80040e0:	f64f 6241 	movw	r2, #65089	; 0xfe41
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d11a      	bne.n	800411e <Event_Handler+0x312>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : WRITE_UUID FOUND - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 80040e8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80040ec:	4a23      	ldr	r2, [pc, #140]	; (800417c <Event_Handler+0x370>)
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	4413      	add	r3, r2
 80040f2:	3302      	adds	r3, #2
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	4619      	mov	r1, r3
 80040f8:	4822      	ldr	r0, [pc, #136]	; (8004184 <Event_Handler+0x378>)
 80040fa:	f009 fd6b 	bl	800dbd4 <iprintf>
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_WRITE_DESC;
 80040fe:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004102:	4a1e      	ldr	r2, [pc, #120]	; (800417c <Event_Handler+0x370>)
 8004104:	011b      	lsls	r3, r3, #4
 8004106:	4413      	add	r3, r2
 8004108:	2209      	movs	r2, #9
 800410a:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PWriteToServerCharHdle = handle;
 800410c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004110:	4a1a      	ldr	r2, [pc, #104]	; (800417c <Event_Handler+0x370>)
 8004112:	011b      	lsls	r3, r3, #4
 8004114:	4413      	add	r3, r2
 8004116:	3308      	adds	r3, #8
 8004118:	8c3a      	ldrh	r2, [r7, #32]
 800411a:	801a      	strh	r2, [r3, #0]
 800411c:	e01e      	b.n	800415c <Event_Handler+0x350>
                }

                else if(uuid == P2P_NOTIFY_CHAR_UUID)
 800411e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004120:	f64f 6242 	movw	r2, #65090	; 0xfe42
 8004124:	4293      	cmp	r3, r2
 8004126:	d119      	bne.n	800415c <Event_Handler+0x350>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : NOTIFICATION_CHAR_UUID FOUND  - connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 8004128:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800412c:	4a13      	ldr	r2, [pc, #76]	; (800417c <Event_Handler+0x370>)
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	4413      	add	r3, r2
 8004132:	3302      	adds	r3, #2
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	4619      	mov	r1, r3
 8004138:	4813      	ldr	r0, [pc, #76]	; (8004188 <Event_Handler+0x37c>)
 800413a:	f009 fd4b 	bl	800dbd4 <iprintf>
#endif
                  aP2PClientContext[index].state = APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC;
 800413e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004142:	4a0e      	ldr	r2, [pc, #56]	; (800417c <Event_Handler+0x370>)
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	4413      	add	r3, r2
 8004148:	220a      	movs	r2, #10
 800414a:	701a      	strb	r2, [r3, #0]
                  aP2PClientContext[index].P2PNotificationCharHdle = handle;
 800414c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004150:	4a0a      	ldr	r2, [pc, #40]	; (800417c <Event_Handler+0x370>)
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	4413      	add	r3, r2
 8004156:	330c      	adds	r3, #12
 8004158:	8c3a      	ldrh	r2, [r7, #32]
 800415a:	801a      	strh	r2, [r3, #0]
                }
#if (UUID_128BIT_FORMAT==1)
                pr->Data_Length -= 21;
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	78db      	ldrb	r3, [r3, #3]
 8004160:	3b15      	subs	r3, #21
 8004162:	b2da      	uxtb	r2, r3
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	70da      	strb	r2, [r3, #3]
                idx += 21;
 8004168:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800416c:	3315      	adds	r3, #21
 800416e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
              while(pr->Data_Length > 0)
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	78db      	ldrb	r3, [r3, #3]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d18b      	bne.n	8004092 <Event_Handler+0x286>
#endif
              }
            }
          }
        }
        break;
 800417a:	e102      	b.n	8004382 <Event_Handler+0x576>
 800417c:	20000714 	.word	0x20000714
 8004180:	08010954 	.word	0x08010954
 8004184:	08010990 	.word	0x08010990
 8004188:	080109c8 	.word	0x080109c8

        case ACI_ATT_FIND_INFO_RESP_VSEVT_CODE:
        {
          aci_att_find_info_resp_event_rp0 *pr = (void*)blecore_evt->data;
 800418c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800418e:	3302      	adds	r3, #2
 8004190:	61fb      	str	r3, [r7, #28]
           * 2 bytes UUID
           */

          uint8_t index;

          index = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8004198:	e004      	b.n	80041a4 <Event_Handler+0x398>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))

            index++;
 800419a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800419e:	3301      	adds	r3, #1
 80041a0:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80041a4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10b      	bne.n	80041c4 <Event_Handler+0x3b8>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 80041ac:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80041b0:	4a7b      	ldr	r2, [pc, #492]	; (80043a0 <Event_Handler+0x594>)
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	4413      	add	r3, r2
 80041b6:	3302      	adds	r3, #2
 80041b8:	881a      	ldrh	r2, [r3, #0]
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	881b      	ldrh	r3, [r3, #0]
 80041be:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d1ea      	bne.n	800419a <Event_Handler+0x38e>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 80041c4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f040 80dc 	bne.w	8004386 <Event_Handler+0x57a>
          {

            numDesc = (pr->Event_Data_Length) / 4;
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	78db      	ldrb	r3, [r3, #3]
 80041d2:	089b      	lsrs	r3, r3, #2
 80041d4:	76fb      	strb	r3, [r7, #27]
            /* we are interested only in 16 bit UUIDs */
            idx = 0;
 80041d6:	2300      	movs	r3, #0
 80041d8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            if (pr->Format == UUID_TYPE_16)
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	789b      	ldrb	r3, [r3, #2]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	f040 80d0 	bne.w	8004386 <Event_Handler+0x57a>
            {
              for (i=0; i<numDesc; i++)
 80041e6:	2300      	movs	r3, #0
 80041e8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 80041ec:	e056      	b.n	800429c <Event_Handler+0x490>
              {
                handle = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx]);
 80041ee:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80041f2:	69fa      	ldr	r2, [r7, #28]
 80041f4:	4413      	add	r3, r2
 80041f6:	791b      	ldrb	r3, [r3, #4]
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80041fe:	69f9      	ldr	r1, [r7, #28]
 8004200:	440b      	add	r3, r1
 8004202:	3304      	adds	r3, #4
 8004204:	3301      	adds	r3, #1
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	b29b      	uxth	r3, r3
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	b29b      	uxth	r3, r3
 800420e:	4313      	orrs	r3, r2
 8004210:	833b      	strh	r3, [r7, #24]
                uuid = UNPACK_2_BYTE_PARAMETER(&pr->Handle_UUID_Pair[idx+2]);
 8004212:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004216:	3302      	adds	r3, #2
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	4413      	add	r3, r2
 800421c:	791b      	ldrb	r3, [r3, #4]
 800421e:	b29a      	uxth	r2, r3
 8004220:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8004224:	3302      	adds	r3, #2
 8004226:	69f9      	ldr	r1, [r7, #28]
 8004228:	440b      	add	r3, r1
 800422a:	3304      	adds	r3, #4
 800422c:	3301      	adds	r3, #1
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	b29b      	uxth	r3, r3
 8004232:	021b      	lsls	r3, r3, #8
 8004234:	b29b      	uxth	r3, r3
 8004236:	4313      	orrs	r3, r2
 8004238:	82fb      	strh	r3, [r7, #22]

                if(uuid == CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID)
 800423a:	8afb      	ldrh	r3, [r7, #22]
 800423c:	f642 1202 	movw	r2, #10498	; 0x2902
 8004240:	4293      	cmp	r3, r2
 8004242:	d121      	bne.n	8004288 <Event_Handler+0x47c>
                {
#if(CFG_DEBUG_APP_TRACE != 0)
                  APP_DBG_MSG("-- GATT : CLIENT_CHAR_CONFIG_DESCRIPTOR_UUID- connection handle 0x%x\n", aP2PClientContext[index].connHandle);
 8004244:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8004248:	4a55      	ldr	r2, [pc, #340]	; (80043a0 <Event_Handler+0x594>)
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	4413      	add	r3, r2
 800424e:	3302      	adds	r3, #2
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	4619      	mov	r1, r3
 8004254:	4853      	ldr	r0, [pc, #332]	; (80043a4 <Event_Handler+0x598>)
 8004256:	f009 fcbd 	bl	800dbd4 <iprintf>
#endif
                  if( aP2PClientContext[index].state == APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC)
 800425a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800425e:	4a50      	ldr	r2, [pc, #320]	; (80043a0 <Event_Handler+0x594>)
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	4413      	add	r3, r2
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b0a      	cmp	r3, #10
 8004268:	d10e      	bne.n	8004288 <Event_Handler+0x47c>
                  {

                    aP2PClientContext[index].P2PNotificationDescHandle = handle;
 800426a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800426e:	4a4c      	ldr	r2, [pc, #304]	; (80043a0 <Event_Handler+0x594>)
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	4413      	add	r3, r2
 8004274:	330e      	adds	r3, #14
 8004276:	8b3a      	ldrh	r2, [r7, #24]
 8004278:	801a      	strh	r2, [r3, #0]
                    aP2PClientContext[index].state = APP_BLE_ENABLE_NOTIFICATION_DESC;
 800427a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800427e:	4a48      	ldr	r2, [pc, #288]	; (80043a0 <Event_Handler+0x594>)
 8004280:	011b      	lsls	r3, r3, #4
 8004282:	4413      	add	r3, r2
 8004284:	220b      	movs	r2, #11
 8004286:	701a      	strb	r2, [r3, #0]

                  }
                }
                idx += 4;
 8004288:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800428c:	3304      	adds	r3, #4
 800428e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
              for (i=0; i<numDesc; i++)
 8004292:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8004296:	3301      	adds	r3, #1
 8004298:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
 800429c:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 80042a0:	7efb      	ldrb	r3, [r7, #27]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d3a3      	bcc.n	80041ee <Event_Handler+0x3e2>
              }
            }
          }
        }
        break; /*ACI_ATT_FIND_INFO_RESP_VSEVT_CODE*/
 80042a6:	e06e      	b.n	8004386 <Event_Handler+0x57a>

        case ACI_GATT_NOTIFICATION_VSEVT_CODE:
        {
          aci_gatt_notification_event_rp0 *pr = (void*)blecore_evt->data;
 80042a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042aa:	3302      	adds	r3, #2
 80042ac:	637b      	str	r3, [r7, #52]	; 0x34
          uint8_t index;

          index = 0;
 80042ae:	2300      	movs	r3, #0
 80042b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80042b4:	e004      	b.n	80042c0 <Event_Handler+0x4b4>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 80042b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80042ba:	3301      	adds	r3, #1
 80042bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80042c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10b      	bne.n	80042e0 <Event_Handler+0x4d4>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 80042c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80042cc:	4a34      	ldr	r2, [pc, #208]	; (80043a0 <Event_Handler+0x594>)
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	4413      	add	r3, r2
 80042d2:	3302      	adds	r3, #2
 80042d4:	881a      	ldrh	r2, [r3, #0]
 80042d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80042dc:	429a      	cmp	r2, r3
 80042de:	d1ea      	bne.n	80042b6 <Event_Handler+0x4aa>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 80042e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d150      	bne.n	800438a <Event_Handler+0x57e>
          {

            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 80042e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ea:	885b      	ldrh	r3, [r3, #2]
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80042f2:	492b      	ldr	r1, [pc, #172]	; (80043a0 <Event_Handler+0x594>)
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	440b      	add	r3, r1
 80042f8:	330c      	adds	r3, #12
 80042fa:	881b      	ldrh	r3, [r3, #0]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d144      	bne.n	800438a <Event_Handler+0x57e>
                    (pr->Attribute_Value_Length == (2)) )
 8004300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004302:	791b      	ldrb	r3, [r3, #4]
            if ( (pr->Attribute_Handle == aP2PClientContext[index].P2PNotificationCharHdle) &&
 8004304:	2b02      	cmp	r3, #2
 8004306:	d140      	bne.n	800438a <Event_Handler+0x57e>
            {

              Notification.P2P_Client_Evt_Opcode = P2P_NOTIFICATION_INFO_RECEIVED_EVT;
 8004308:	2302      	movs	r3, #2
 800430a:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length = pr->Attribute_Value_Length;
 800430c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430e:	791b      	ldrb	r3, [r3, #4]
 8004310:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload = &pr->Attribute_Value[0];
 8004312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004314:	3305      	adds	r3, #5
 8004316:	60fb      	str	r3, [r7, #12]

              Gatt_Notification(&Notification);
 8004318:	f107 0308 	add.w	r3, r7, #8
 800431c:	4618      	mov	r0, r3
 800431e:	f000 f845 	bl	80043ac <Gatt_Notification>
              /* INFORM APPLICATION BUTTON IS PUSHED BY END DEVICE */

            }
          }
        }
        break;/* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
 8004322:	e032      	b.n	800438a <Event_Handler+0x57e>

        case ACI_GATT_PROC_COMPLETE_VSEVT_CODE:
        {
          aci_gatt_proc_complete_event_rp0 *pr = (void*)blecore_evt->data;
 8004324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004326:	3302      	adds	r3, #2
 8004328:	63bb      	str	r3, [r7, #56]	; 0x38
#if(CFG_DEBUG_APP_TRACE != 0)
          APP_DBG_MSG("-- GATT : ACI_GATT_PROC_COMPLETE_VSEVT_CODE \n");
 800432a:	481f      	ldr	r0, [pc, #124]	; (80043a8 <Event_Handler+0x59c>)
 800432c:	f009 fcc0 	bl	800dcb0 <puts>
          APP_DBG_MSG("\n");
 8004330:	200a      	movs	r0, #10
 8004332:	f009 fc61 	bl	800dbf8 <putchar>
#endif

          uint8_t index;

          index = 0;
 8004336:	2300      	movs	r3, #0
 8004338:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800433c:	e004      	b.n	8004348 <Event_Handler+0x53c>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
            index++;
 800433e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004342:	3301      	adds	r3, #1
 8004344:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8004348:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10b      	bne.n	8004368 <Event_Handler+0x55c>
                  (aP2PClientContext[index].connHandle != pr->Connection_Handle))
 8004350:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004354:	4a12      	ldr	r2, [pc, #72]	; (80043a0 <Event_Handler+0x594>)
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	4413      	add	r3, r2
 800435a:	3302      	adds	r3, #2
 800435c:	881a      	ldrh	r2, [r3, #0]
 800435e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	b29b      	uxth	r3, r3
          while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8004364:	429a      	cmp	r2, r3
 8004366:	d1ea      	bne.n	800433e <Event_Handler+0x532>

          if(index < BLE_CFG_CLT_MAX_NBR_CB)
 8004368:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10e      	bne.n	800438e <Event_Handler+0x582>
          {

            UTIL_SEQ_SetTask( 1<<CFG_TASK_SEARCH_SERVICE_ID, CFG_SCH_PRIO_0);
 8004370:	2100      	movs	r1, #0
 8004372:	2004      	movs	r0, #4
 8004374:	f008 fde6 	bl	800cf44 <UTIL_SEQ_SetTask>

          }
        }
        break; /*ACI_GATT_PROC_COMPLETE_VSEVT_CODE*/
 8004378:	e009      	b.n	800438e <Event_Handler+0x582>
        default:
          break;
 800437a:	bf00      	nop
 800437c:	e00a      	b.n	8004394 <Event_Handler+0x588>
        break;
 800437e:	bf00      	nop
 8004380:	e008      	b.n	8004394 <Event_Handler+0x588>
        break;
 8004382:	bf00      	nop
 8004384:	e006      	b.n	8004394 <Event_Handler+0x588>
        break; /*ACI_ATT_FIND_INFO_RESP_VSEVT_CODE*/
 8004386:	bf00      	nop
 8004388:	e004      	b.n	8004394 <Event_Handler+0x588>
        break;/* end ACI_GATT_NOTIFICATION_VSEVT_CODE */
 800438a:	bf00      	nop
 800438c:	e002      	b.n	8004394 <Event_Handler+0x588>
        break; /*ACI_GATT_PROC_COMPLETE_VSEVT_CODE*/
 800438e:	bf00      	nop
      }
    }

    break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8004390:	e000      	b.n	8004394 <Event_Handler+0x588>

    default:
      break;
 8004392:	bf00      	nop
  }

  return(return_value);
 8004394:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
}/* end BLE_CTRL_Event_Acknowledged_Status_t */
 8004398:	4618      	mov	r0, r3
 800439a:	3750      	adds	r7, #80	; 0x50
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	20000714 	.word	0x20000714
 80043a4:	08010a0c 	.word	0x08010a0c
 80043a8:	08010a54 	.word	0x08010a54

080043ac <Gatt_Notification>:

void Gatt_Notification(P2P_Client_App_Notification_evt_t *pNotification)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN Gatt_Notification_1*/

/* USER CODE END Gatt_Notification_1 */
  switch(pNotification->P2P_Client_Evt_Opcode)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d127      	bne.n	800440c <Gatt_Notification+0x60>
/* USER CODE END P2P_Client_Evt_Opcode */

    case P2P_NOTIFICATION_INFO_RECEIVED_EVT:
/* USER CODE BEGIN P2P_NOTIFICATION_INFO_RECEIVED_EVT */
    {
      P2P_Client_App_Context.LedControl.Device_Led_Selection=pNotification->DataTransfered.pPayload[0];
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	781a      	ldrb	r2, [r3, #0]
 80043c2:	4b15      	ldr	r3, [pc, #84]	; (8004418 <Gatt_Notification+0x6c>)
 80043c4:	705a      	strb	r2, [r3, #1]
      switch(P2P_Client_App_Context.LedControl.Device_Led_Selection) {
 80043c6:	4b14      	ldr	r3, [pc, #80]	; (8004418 <Gatt_Notification+0x6c>)
 80043c8:	785b      	ldrb	r3, [r3, #1]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d11c      	bne.n	8004408 <Gatt_Notification+0x5c>

        case 0x01 : {

          P2P_Client_App_Context.LedControl.Led1=pNotification->DataTransfered.pPayload[1];
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	785a      	ldrb	r2, [r3, #1]
 80043d4:	4b10      	ldr	r3, [pc, #64]	; (8004418 <Gatt_Notification+0x6c>)
 80043d6:	709a      	strb	r2, [r3, #2]

          if(P2P_Client_App_Context.LedControl.Led1==0x00){
 80043d8:	4b0f      	ldr	r3, [pc, #60]	; (8004418 <Gatt_Notification+0x6c>)
 80043da:	789b      	ldrb	r3, [r3, #2]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d109      	bne.n	80043f4 <Gatt_Notification+0x48>
            BSP_LED_Off(LED_BLUE);
 80043e0:	2000      	movs	r0, #0
 80043e2:	f000 fc45 	bl	8004c70 <BSP_LED_Off>
            APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - LED OFF \n\r");
 80043e6:	480d      	ldr	r0, [pc, #52]	; (800441c <Gatt_Notification+0x70>)
 80043e8:	f009 fbf4 	bl	800dbd4 <iprintf>
            APP_DBG_MSG(" \n\r");
 80043ec:	480c      	ldr	r0, [pc, #48]	; (8004420 <Gatt_Notification+0x74>)
 80043ee:	f009 fbf1 	bl	800dbd4 <iprintf>
            APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - LED ON\n\r");
            APP_DBG_MSG(" \n\r");
            BSP_LED_On(LED_BLUE);
          }

          break;
 80043f2:	e00a      	b.n	800440a <Gatt_Notification+0x5e>
            APP_DBG_MSG(" -- P2P APPLICATION CLIENT : NOTIFICATION RECEIVED - LED ON\n\r");
 80043f4:	480b      	ldr	r0, [pc, #44]	; (8004424 <Gatt_Notification+0x78>)
 80043f6:	f009 fbed 	bl	800dbd4 <iprintf>
            APP_DBG_MSG(" \n\r");
 80043fa:	4809      	ldr	r0, [pc, #36]	; (8004420 <Gatt_Notification+0x74>)
 80043fc:	f009 fbea 	bl	800dbd4 <iprintf>
            BSP_LED_On(LED_BLUE);
 8004400:	2000      	movs	r0, #0
 8004402:	f000 fc1b 	bl	8004c3c <BSP_LED_On>
          break;
 8004406:	e000      	b.n	800440a <Gatt_Notification+0x5e>
        }
        default : break;
 8004408:	bf00      	nop
      }

    }
/* USER CODE END P2P_NOTIFICATION_INFO_RECEIVED_EVT */
      break;
 800440a:	e000      	b.n	800440e <Gatt_Notification+0x62>

    default:
/* USER CODE BEGIN P2P_Client_Evt_Opcode_Default */

/* USER CODE END P2P_Client_Evt_Opcode_Default */
      break;
 800440c:	bf00      	nop
  }
/* USER CODE BEGIN Gatt_Notification_2*/

/* USER CODE END Gatt_Notification_2 */
  return;
 800440e:	bf00      	nop
}
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	20000724 	.word	0x20000724
 800441c:	08010a84 	.word	0x08010a84
 8004420:	08010ac4 	.word	0x08010ac4
 8004424:	08010ac8 	.word	0x08010ac8

08004428 <P2P_Client_APP_Get_State>:

uint8_t P2P_Client_APP_Get_State( void ) {
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  return aP2PClientContext[0].state;
 800442c:	4b03      	ldr	r3, [pc, #12]	; (800443c <P2P_Client_APP_Get_State+0x14>)
 800442e:	781b      	ldrb	r3, [r3, #0]
}
 8004430:	4618      	mov	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	20000714 	.word	0x20000714

08004440 <Write_Char>:
 * @brief  Feature Characteristic update
 * @param  pFeatureValue: The address of the new value to be written
 * @retval None
 */
tBleStatus Write_Char(uint16_t UUID, uint8_t Service_Instance, uint8_t *pPayload)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	4603      	mov	r3, r0
 8004448:	603a      	str	r2, [r7, #0]
 800444a:	80fb      	strh	r3, [r7, #6]
 800444c:	460b      	mov	r3, r1
 800444e:	717b      	strb	r3, [r7, #5]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8004450:	2392      	movs	r3, #146	; 0x92
 8004452:	73fb      	strb	r3, [r7, #15]
  uint8_t index;

  index = 0;
 8004454:	2300      	movs	r3, #0
 8004456:	73bb      	strb	r3, [r7, #14]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8004458:	e01b      	b.n	8004492 <Write_Char+0x52>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
  {
    switch(UUID)
 800445a:	88fb      	ldrh	r3, [r7, #6]
 800445c:	f64f 6241 	movw	r2, #65089	; 0xfe41
 8004460:	4293      	cmp	r3, r2
 8004462:	d112      	bne.n	800448a <Write_Char+0x4a>
    {
      case P2P_WRITE_CHAR_UUID: /* SERVER RX -- so CLIENT TX */
        ret = aci_gatt_write_without_resp(aP2PClientContext[index].connHandle,
 8004464:	7bbb      	ldrb	r3, [r7, #14]
 8004466:	4a12      	ldr	r2, [pc, #72]	; (80044b0 <Write_Char+0x70>)
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	4413      	add	r3, r2
 800446c:	3302      	adds	r3, #2
 800446e:	8818      	ldrh	r0, [r3, #0]
 8004470:	7bbb      	ldrb	r3, [r7, #14]
 8004472:	4a0f      	ldr	r2, [pc, #60]	; (80044b0 <Write_Char+0x70>)
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	4413      	add	r3, r2
 8004478:	3308      	adds	r3, #8
 800447a:	8819      	ldrh	r1, [r3, #0]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	2202      	movs	r2, #2
 8004480:	f006 fc2f 	bl	800ace2 <aci_gatt_write_without_resp>
 8004484:	4603      	mov	r3, r0
 8004486:	73fb      	strb	r3, [r7, #15]
                                         aP2PClientContext[index].P2PWriteToServerCharHdle,
                                         2, /* charValueLen */
                                         (uint8_t *)  pPayload);
        break;
 8004488:	e000      	b.n	800448c <Write_Char+0x4c>
      default:
        break;
 800448a:	bf00      	nop
    }
    index++;
 800448c:	7bbb      	ldrb	r3, [r7, #14]
 800448e:	3301      	adds	r3, #1
 8004490:	73bb      	strb	r3, [r7, #14]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 8004492:	7bbb      	ldrb	r3, [r7, #14]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d106      	bne.n	80044a6 <Write_Char+0x66>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
 8004498:	7bbb      	ldrb	r3, [r7, #14]
 800449a:	4a05      	ldr	r2, [pc, #20]	; (80044b0 <Write_Char+0x70>)
 800449c:	011b      	lsls	r3, r3, #4
 800449e:	4413      	add	r3, r2
 80044a0:	781b      	ldrb	r3, [r3, #0]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1d9      	bne.n	800445a <Write_Char+0x1a>
  }

  return ret;
 80044a6:	7bfb      	ldrb	r3, [r7, #15]
}/* end Write_Char() */
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	20000714 	.word	0x20000714

080044b4 <Button_Trigger_Received>:

void Button_Trigger_Received(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  APP_DBG_MSG("-- P2P APPLICATION CLIENT  : BUTTON PUSHED - WRITE TO SERVER \n ");
 80044b8:	480c      	ldr	r0, [pc, #48]	; (80044ec <Button_Trigger_Received+0x38>)
 80044ba:	f009 fb8b 	bl	800dbd4 <iprintf>
  APP_DBG_MSG(" \n\r");
 80044be:	480c      	ldr	r0, [pc, #48]	; (80044f0 <Button_Trigger_Received+0x3c>)
 80044c0:	f009 fb88 	bl	800dbd4 <iprintf>
  if(P2P_Client_App_Context.ButtonStatus.Button1 == 0x00)
 80044c4:	4b0b      	ldr	r3, [pc, #44]	; (80044f4 <Button_Trigger_Received+0x40>)
 80044c6:	791b      	ldrb	r3, [r3, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d103      	bne.n	80044d4 <Button_Trigger_Received+0x20>
  {
    P2P_Client_App_Context.ButtonStatus.Button1 = 0x01;
 80044cc:	4b09      	ldr	r3, [pc, #36]	; (80044f4 <Button_Trigger_Received+0x40>)
 80044ce:	2201      	movs	r2, #1
 80044d0:	711a      	strb	r2, [r3, #4]
 80044d2:	e002      	b.n	80044da <Button_Trigger_Received+0x26>
  }else {
    P2P_Client_App_Context.ButtonStatus.Button1 = 0x00;
 80044d4:	4b07      	ldr	r3, [pc, #28]	; (80044f4 <Button_Trigger_Received+0x40>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	711a      	strb	r2, [r3, #4]
  }

  Write_Char( P2P_WRITE_CHAR_UUID, 0, (uint8_t *)&P2P_Client_App_Context.ButtonStatus);
 80044da:	4a07      	ldr	r2, [pc, #28]	; (80044f8 <Button_Trigger_Received+0x44>)
 80044dc:	2100      	movs	r1, #0
 80044de:	f64f 6041 	movw	r0, #65089	; 0xfe41
 80044e2:	f7ff ffad 	bl	8004440 <Write_Char>

  return;
 80044e6:	bf00      	nop
}
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	08010b08 	.word	0x08010b08
 80044f0:	08010ac4 	.word	0x08010ac4
 80044f4:	20000724 	.word	0x20000724
 80044f8:	20000727 	.word	0x20000727

080044fc <Update_Service>:

void Update_Service()
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
  uint16_t enable = 0x0001;
 8004502:	2301      	movs	r3, #1
 8004504:	80bb      	strh	r3, [r7, #4]
  uint16_t disable = 0x0000;
 8004506:	2300      	movs	r3, #0
 8004508:	807b      	strh	r3, [r7, #2]
  uint8_t index;

  index = 0;
 800450a:	2300      	movs	r3, #0
 800450c:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800450e:	e0a5      	b.n	800465c <Update_Service+0x160>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
  {
    switch(aP2PClientContext[index].state)
 8004510:	79fb      	ldrb	r3, [r7, #7]
 8004512:	4a5a      	ldr	r2, [pc, #360]	; (800467c <Update_Service+0x180>)
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	4413      	add	r3, r2
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	3b07      	subs	r3, #7
 800451c:	2b05      	cmp	r3, #5
 800451e:	f200 8099 	bhi.w	8004654 <Update_Service+0x158>
 8004522:	a201      	add	r2, pc, #4	; (adr r2, 8004528 <Update_Service+0x2c>)
 8004524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004528:	08004541 	.word	0x08004541
 800452c:	08004549 	.word	0x08004549
 8004530:	0800457b 	.word	0x0800457b
 8004534:	080045b1 	.word	0x080045b1
 8004538:	080045e7 	.word	0x080045e7
 800453c:	08004621 	.word	0x08004621
    {
      case APP_BLE_DISCOVER_SERVICES:
        APP_DBG_MSG("P2P_DISCOVER_SERVICES\n");
 8004540:	484f      	ldr	r0, [pc, #316]	; (8004680 <Update_Service+0x184>)
 8004542:	f009 fbb5 	bl	800dcb0 <puts>
        break;
 8004546:	e086      	b.n	8004656 <Update_Service+0x15a>
      case APP_BLE_DISCOVER_CHARACS:
        APP_DBG_MSG("* GATT : Discover P2P Characteristics\n");
 8004548:	484e      	ldr	r0, [pc, #312]	; (8004684 <Update_Service+0x188>)
 800454a:	f009 fbb1 	bl	800dcb0 <puts>
        aci_gatt_disc_all_char_of_service(aP2PClientContext[index].connHandle,
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	4a4a      	ldr	r2, [pc, #296]	; (800467c <Update_Service+0x180>)
 8004552:	011b      	lsls	r3, r3, #4
 8004554:	4413      	add	r3, r2
 8004556:	3302      	adds	r3, #2
 8004558:	8818      	ldrh	r0, [r3, #0]
 800455a:	79fb      	ldrb	r3, [r7, #7]
 800455c:	4a47      	ldr	r2, [pc, #284]	; (800467c <Update_Service+0x180>)
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	4413      	add	r3, r2
 8004562:	3304      	adds	r3, #4
 8004564:	8819      	ldrh	r1, [r3, #0]
 8004566:	79fb      	ldrb	r3, [r7, #7]
 8004568:	4a44      	ldr	r2, [pc, #272]	; (800467c <Update_Service+0x180>)
 800456a:	011b      	lsls	r3, r3, #4
 800456c:	4413      	add	r3, r2
 800456e:	3306      	adds	r3, #6
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	f006 fa14 	bl	800a9a0 <aci_gatt_disc_all_char_of_service>
                                          aP2PClientContext[index].P2PServiceHandle,
                                          aP2PClientContext[index].P2PServiceEndHandle);
        break;
 8004578:	e06d      	b.n	8004656 <Update_Service+0x15a>
      case APP_BLE_DISCOVER_WRITE_DESC: /* Not Used - No descriptor */
        APP_DBG_MSG("* GATT : Discover Descriptor of TX - Write  Characteristic\n");
 800457a:	4843      	ldr	r0, [pc, #268]	; (8004688 <Update_Service+0x18c>)
 800457c:	f009 fb98 	bl	800dcb0 <puts>
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 8004580:	79fb      	ldrb	r3, [r7, #7]
 8004582:	4a3e      	ldr	r2, [pc, #248]	; (800467c <Update_Service+0x180>)
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	4413      	add	r3, r2
 8004588:	3302      	adds	r3, #2
 800458a:	8818      	ldrh	r0, [r3, #0]
 800458c:	79fb      	ldrb	r3, [r7, #7]
 800458e:	4a3b      	ldr	r2, [pc, #236]	; (800467c <Update_Service+0x180>)
 8004590:	011b      	lsls	r3, r3, #4
 8004592:	4413      	add	r3, r2
 8004594:	3308      	adds	r3, #8
 8004596:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PWriteToServerCharHdle,
                                    aP2PClientContext[index].P2PWriteToServerCharHdle+2);
 8004598:	79fb      	ldrb	r3, [r7, #7]
 800459a:	4a38      	ldr	r2, [pc, #224]	; (800467c <Update_Service+0x180>)
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	4413      	add	r3, r2
 80045a0:	3308      	adds	r3, #8
 80045a2:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 80045a4:	3302      	adds	r3, #2
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	461a      	mov	r2, r3
 80045aa:	f006 fa7a 	bl	800aaa2 <aci_gatt_disc_all_char_desc>
        break;
 80045ae:	e052      	b.n	8004656 <Update_Service+0x15a>
      case APP_BLE_DISCOVER_NOTIFICATION_CHAR_DESC:
        APP_DBG_MSG("* GATT : Discover Descriptor of Rx - Notification  Characteristic\n");
 80045b0:	4836      	ldr	r0, [pc, #216]	; (800468c <Update_Service+0x190>)
 80045b2:	f009 fb7d 	bl	800dcb0 <puts>
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 80045b6:	79fb      	ldrb	r3, [r7, #7]
 80045b8:	4a30      	ldr	r2, [pc, #192]	; (800467c <Update_Service+0x180>)
 80045ba:	011b      	lsls	r3, r3, #4
 80045bc:	4413      	add	r3, r2
 80045be:	3302      	adds	r3, #2
 80045c0:	8818      	ldrh	r0, [r3, #0]
 80045c2:	79fb      	ldrb	r3, [r7, #7]
 80045c4:	4a2d      	ldr	r2, [pc, #180]	; (800467c <Update_Service+0x180>)
 80045c6:	011b      	lsls	r3, r3, #4
 80045c8:	4413      	add	r3, r2
 80045ca:	330c      	adds	r3, #12
 80045cc:	8819      	ldrh	r1, [r3, #0]
                                    aP2PClientContext[index].P2PNotificationCharHdle,
                                    aP2PClientContext[index].P2PNotificationCharHdle+2);
 80045ce:	79fb      	ldrb	r3, [r7, #7]
 80045d0:	4a2a      	ldr	r2, [pc, #168]	; (800467c <Update_Service+0x180>)
 80045d2:	011b      	lsls	r3, r3, #4
 80045d4:	4413      	add	r3, r2
 80045d6:	330c      	adds	r3, #12
 80045d8:	881b      	ldrh	r3, [r3, #0]
        aci_gatt_disc_all_char_desc(aP2PClientContext[index].connHandle,
 80045da:	3302      	adds	r3, #2
 80045dc:	b29b      	uxth	r3, r3
 80045de:	461a      	mov	r2, r3
 80045e0:	f006 fa5f 	bl	800aaa2 <aci_gatt_disc_all_char_desc>
        break;
 80045e4:	e037      	b.n	8004656 <Update_Service+0x15a>
      case APP_BLE_ENABLE_NOTIFICATION_DESC:
        APP_DBG_MSG("* GATT : Enable Server Notification\n");
 80045e6:	482a      	ldr	r0, [pc, #168]	; (8004690 <Update_Service+0x194>)
 80045e8:	f009 fb62 	bl	800dcb0 <puts>
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 80045ec:	79fb      	ldrb	r3, [r7, #7]
 80045ee:	4a23      	ldr	r2, [pc, #140]	; (800467c <Update_Service+0x180>)
 80045f0:	011b      	lsls	r3, r3, #4
 80045f2:	4413      	add	r3, r2
 80045f4:	3302      	adds	r3, #2
 80045f6:	8818      	ldrh	r0, [r3, #0]
 80045f8:	79fb      	ldrb	r3, [r7, #7]
 80045fa:	4a20      	ldr	r2, [pc, #128]	; (800467c <Update_Service+0x180>)
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	4413      	add	r3, r2
 8004600:	330e      	adds	r3, #14
 8004602:	8819      	ldrh	r1, [r3, #0]
 8004604:	1d3b      	adds	r3, r7, #4
 8004606:	2202      	movs	r2, #2
 8004608:	f006 facc 	bl	800aba4 <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&enable);
        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 800460c:	79fb      	ldrb	r3, [r7, #7]
 800460e:	4a1b      	ldr	r2, [pc, #108]	; (800467c <Update_Service+0x180>)
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	4413      	add	r3, r2
 8004614:	2206      	movs	r2, #6
 8004616:	701a      	strb	r2, [r3, #0]
        BSP_LED_Off(LED_RED);
 8004618:	2002      	movs	r0, #2
 800461a:	f000 fb29 	bl	8004c70 <BSP_LED_Off>
        break;
 800461e:	e01a      	b.n	8004656 <Update_Service+0x15a>
      case APP_BLE_DISABLE_NOTIFICATION_DESC :
        APP_DBG_MSG("* GATT : Disable Server Notification\n");
 8004620:	481c      	ldr	r0, [pc, #112]	; (8004694 <Update_Service+0x198>)
 8004622:	f009 fb45 	bl	800dcb0 <puts>
        aci_gatt_write_char_desc(aP2PClientContext[index].connHandle,
 8004626:	79fb      	ldrb	r3, [r7, #7]
 8004628:	4a14      	ldr	r2, [pc, #80]	; (800467c <Update_Service+0x180>)
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	4413      	add	r3, r2
 800462e:	3302      	adds	r3, #2
 8004630:	8818      	ldrh	r0, [r3, #0]
 8004632:	79fb      	ldrb	r3, [r7, #7]
 8004634:	4a11      	ldr	r2, [pc, #68]	; (800467c <Update_Service+0x180>)
 8004636:	011b      	lsls	r3, r3, #4
 8004638:	4413      	add	r3, r2
 800463a:	330e      	adds	r3, #14
 800463c:	8819      	ldrh	r1, [r3, #0]
 800463e:	1cbb      	adds	r3, r7, #2
 8004640:	2202      	movs	r2, #2
 8004642:	f006 faaf 	bl	800aba4 <aci_gatt_write_char_desc>
                                 aP2PClientContext[index].P2PNotificationDescHandle,
                                 2,
                                 (uint8_t *)&disable);
        aP2PClientContext[index].state = APP_BLE_CONNECTED_CLIENT;
 8004646:	79fb      	ldrb	r3, [r7, #7]
 8004648:	4a0c      	ldr	r2, [pc, #48]	; (800467c <Update_Service+0x180>)
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	4413      	add	r3, r2
 800464e:	2206      	movs	r2, #6
 8004650:	701a      	strb	r2, [r3, #0]
        break;
 8004652:	e000      	b.n	8004656 <Update_Service+0x15a>
      default:
        break;
 8004654:	bf00      	nop
    }
    index++;
 8004656:	79fb      	ldrb	r3, [r7, #7]
 8004658:	3301      	adds	r3, #1
 800465a:	71fb      	strb	r3, [r7, #7]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800465c:	79fb      	ldrb	r3, [r7, #7]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d108      	bne.n	8004674 <Update_Service+0x178>
          (aP2PClientContext[index].state != APP_BLE_IDLE))
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	4a05      	ldr	r2, [pc, #20]	; (800467c <Update_Service+0x180>)
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	4413      	add	r3, r2
 800466a:	781b      	ldrb	r3, [r3, #0]
  while((index < BLE_CFG_CLT_MAX_NBR_CB) &&
 800466c:	2b00      	cmp	r3, #0
 800466e:	f47f af4f 	bne.w	8004510 <Update_Service+0x14>
  }
  return;
 8004672:	bf00      	nop
 8004674:	bf00      	nop
}
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20000714 	.word	0x20000714
 8004680:	08010b48 	.word	0x08010b48
 8004684:	08010b60 	.word	0x08010b60
 8004688:	08010b88 	.word	0x08010b88
 800468c:	08010bc4 	.word	0x08010bc4
 8004690:	08010c08 	.word	0x08010c08
 8004694:	08010c2c 	.word	0x08010c2c

08004698 <LL_PWR_EnableBootC2>:
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800469c:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <LL_PWR_EnableBootC2+0x1c>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4a04      	ldr	r2, [pc, #16]	; (80046b4 <LL_PWR_EnableBootC2+0x1c>)
 80046a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a6:	60d3      	str	r3, [r2, #12]
}
 80046a8:	bf00      	nop
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	58000400 	.word	0x58000400

080046b8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80046c0:	4b06      	ldr	r3, [pc, #24]	; (80046dc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80046c2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80046c6:	4905      	ldr	r1, [pc, #20]	; (80046dc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	58000800 	.word	0x58000800

080046e0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80046e8:	4b05      	ldr	r3, [pc, #20]	; (8004700 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80046ea:	6a1a      	ldr	r2, [r3, #32]
 80046ec:	4904      	ldr	r1, [pc, #16]	; (8004700 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	620b      	str	r3, [r1, #32]
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	58000800 	.word	0x58000800

08004704 <LL_AHB3_GRP1_EnableClock>:
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800470c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004710:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004712:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4313      	orrs	r3, r2
 800471a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800471c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004720:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4013      	ands	r3, r2
 8004726:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004728:	68fb      	ldr	r3, [r7, #12]
}
 800472a:	bf00      	nop
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8004736:	b480      	push	{r7}
 8004738:	b085      	sub	sp, #20
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800473e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004742:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8004746:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4313      	orrs	r3, r2
 800474e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8004752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004756:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4013      	ands	r3, r2
 800475e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004760:	68fb      	ldr	r3, [r7, #12]
}
 8004762:	bf00      	nop
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <LL_C1_IPCC_EnableIT_TXF>:
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	601a      	str	r2, [r3, #0]
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr

0800478e <LL_C1_IPCC_EnableIT_RXO>:
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f043 0201 	orr.w	r2, r3, #1
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	601a      	str	r2, [r3, #0]
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <LL_C1_IPCC_EnableTransmitChannel>:
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
 80047b6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	041b      	lsls	r3, r3, #16
 80047c0:	43db      	mvns	r3, r3
 80047c2:	401a      	ands	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	605a      	str	r2, [r3, #4]
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	041b      	lsls	r3, r3, #16
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	605a      	str	r2, [r3, #4]
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	43db      	mvns	r3, r3
 800480a:	401a      	ands	r2, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	605a      	str	r2, [r3, #4]
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <LL_C1_IPCC_ClearFlag_CHx>:
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	609a      	str	r2, [r3, #8]
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <LL_C1_IPCC_SetFlag_CHx>:
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	041a      	lsls	r2, r3, #16
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	609a      	str	r2, [r3, #8]
}
 800484a:	bf00      	nop
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr

08004856 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8004856:	b480      	push	{r7}
 8004858:	b083      	sub	sp, #12
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	4013      	ands	r3, r2
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d101      	bne.n	8004872 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800486e:	2301      	movs	r3, #1
 8004870:	e000      	b.n	8004874 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	69da      	ldr	r2, [r3, #28]
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	4013      	ands	r3, r2
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d101      	bne.n	800489c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8004898:	2301      	movs	r3, #1
 800489a:	e000      	b.n	800489e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
	...

080048ac <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80048b0:	2102      	movs	r1, #2
 80048b2:	4818      	ldr	r0, [pc, #96]	; (8004914 <HW_IPCC_Rx_Handler+0x68>)
 80048b4:	f7ff ffe4 	bl	8004880 <LL_C2_IPCC_IsActiveFlag_CHx>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d008      	beq.n	80048d0 <HW_IPCC_Rx_Handler+0x24>
 80048be:	4b15      	ldr	r3, [pc, #84]	; (8004914 <HW_IPCC_Rx_Handler+0x68>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d102      	bne.n	80048d0 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80048ca:	f000 f8d5 	bl	8004a78 <HW_IPCC_SYS_EvtHandler>
 80048ce:	e01e      	b.n	800490e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80048d0:	2101      	movs	r1, #1
 80048d2:	4810      	ldr	r0, [pc, #64]	; (8004914 <HW_IPCC_Rx_Handler+0x68>)
 80048d4:	f7ff ffd4 	bl	8004880 <LL_C2_IPCC_IsActiveFlag_CHx>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d008      	beq.n	80048f0 <HW_IPCC_Rx_Handler+0x44>
 80048de:	4b0d      	ldr	r3, [pc, #52]	; (8004914 <HW_IPCC_Rx_Handler+0x68>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d102      	bne.n	80048f0 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 80048ea:	f000 f889 	bl	8004a00 <HW_IPCC_BLE_EvtHandler>
 80048ee:	e00e      	b.n	800490e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80048f0:	2108      	movs	r1, #8
 80048f2:	4808      	ldr	r0, [pc, #32]	; (8004914 <HW_IPCC_Rx_Handler+0x68>)
 80048f4:	f7ff ffc4 	bl	8004880 <LL_C2_IPCC_IsActiveFlag_CHx>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d008      	beq.n	8004910 <HW_IPCC_Rx_Handler+0x64>
 80048fe:	4b05      	ldr	r3, [pc, #20]	; (8004914 <HW_IPCC_Rx_Handler+0x68>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b00      	cmp	r3, #0
 8004908:	d102      	bne.n	8004910 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800490a:	f000 f901 	bl	8004b10 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800490e:	bf00      	nop
 8004910:	bf00      	nop
}
 8004912:	bd80      	pop	{r7, pc}
 8004914:	58000c00 	.word	0x58000c00

08004918 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800491c:	2102      	movs	r1, #2
 800491e:	4818      	ldr	r0, [pc, #96]	; (8004980 <HW_IPCC_Tx_Handler+0x68>)
 8004920:	f7ff ff99 	bl	8004856 <LL_C1_IPCC_IsActiveFlag_CHx>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d108      	bne.n	800493c <HW_IPCC_Tx_Handler+0x24>
 800492a:	4b15      	ldr	r3, [pc, #84]	; (8004980 <HW_IPCC_Tx_Handler+0x68>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d102      	bne.n	800493c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8004936:	f000 f893 	bl	8004a60 <HW_IPCC_SYS_CmdEvtHandler>
 800493a:	e01e      	b.n	800497a <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800493c:	2108      	movs	r1, #8
 800493e:	4810      	ldr	r0, [pc, #64]	; (8004980 <HW_IPCC_Tx_Handler+0x68>)
 8004940:	f7ff ff89 	bl	8004856 <LL_C1_IPCC_IsActiveFlag_CHx>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d108      	bne.n	800495c <HW_IPCC_Tx_Handler+0x44>
 800494a:	4b0d      	ldr	r3, [pc, #52]	; (8004980 <HW_IPCC_Tx_Handler+0x68>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d102      	bne.n	800495c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8004956:	f000 f8bd 	bl	8004ad4 <HW_IPCC_MM_FreeBufHandler>
 800495a:	e00e      	b.n	800497a <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800495c:	2120      	movs	r1, #32
 800495e:	4808      	ldr	r0, [pc, #32]	; (8004980 <HW_IPCC_Tx_Handler+0x68>)
 8004960:	f7ff ff79 	bl	8004856 <LL_C1_IPCC_IsActiveFlag_CHx>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d108      	bne.n	800497c <HW_IPCC_Tx_Handler+0x64>
 800496a:	4b05      	ldr	r3, [pc, #20]	; (8004980 <HW_IPCC_Tx_Handler+0x68>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d102      	bne.n	800497c <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8004976:	f000 f84f 	bl	8004a18 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800497a:	bf00      	nop
 800497c:	bf00      	nop
}
 800497e:	bd80      	pop	{r7, pc}
 8004980:	58000c00 	.word	0x58000c00

08004984 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8004988:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800498c:	f7ff fed3 	bl	8004736 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8004990:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004994:	f7ff fea4 	bl	80046e0 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8004998:	f44f 7000 	mov.w	r0, #512	; 0x200
 800499c:	f7ff fe8c 	bl	80046b8 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80049a0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80049a2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80049a4:	f7ff fe78 	bl	8004698 <LL_PWR_EnableBootC2>

  return;
 80049a8:	bf00      	nop
}
 80049aa:	bd80      	pop	{r7, pc}

080049ac <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80049b0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80049b4:	f7ff fea6 	bl	8004704 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80049b8:	4806      	ldr	r0, [pc, #24]	; (80049d4 <HW_IPCC_Init+0x28>)
 80049ba:	f7ff fee8 	bl	800478e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80049be:	4805      	ldr	r0, [pc, #20]	; (80049d4 <HW_IPCC_Init+0x28>)
 80049c0:	f7ff fed5 	bl	800476e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80049c4:	202c      	movs	r0, #44	; 0x2c
 80049c6:	f000 fc46 	bl	8005256 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80049ca:	202d      	movs	r0, #45	; 0x2d
 80049cc:	f000 fc43 	bl	8005256 <HAL_NVIC_EnableIRQ>

  return;
 80049d0:	bf00      	nop
}
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	58000c00 	.word	0x58000c00

080049d8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80049dc:	2101      	movs	r1, #1
 80049de:	4802      	ldr	r0, [pc, #8]	; (80049e8 <HW_IPCC_BLE_Init+0x10>)
 80049e0:	f7ff ff0a 	bl	80047f8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80049e4:	bf00      	nop
}
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	58000c00 	.word	0x58000c00

080049ec <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80049f0:	2101      	movs	r1, #1
 80049f2:	4802      	ldr	r0, [pc, #8]	; (80049fc <HW_IPCC_BLE_SendCmd+0x10>)
 80049f4:	f7ff ff20 	bl	8004838 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80049f8:	bf00      	nop
}
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	58000c00 	.word	0x58000c00

08004a00 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8004a04:	f007 ff86 	bl	800c914 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8004a08:	2101      	movs	r1, #1
 8004a0a:	4802      	ldr	r0, [pc, #8]	; (8004a14 <HW_IPCC_BLE_EvtHandler+0x14>)
 8004a0c:	f7ff ff06 	bl	800481c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004a10:	bf00      	nop
}
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	58000c00 	.word	0x58000c00

08004a18 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8004a1c:	2120      	movs	r1, #32
 8004a1e:	4803      	ldr	r0, [pc, #12]	; (8004a2c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8004a20:	f7ff fed8 	bl	80047d4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8004a24:	f007 ffa6 	bl	800c974 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8004a28:	bf00      	nop
}
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	58000c00 	.word	0x58000c00

08004a30 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8004a34:	2102      	movs	r1, #2
 8004a36:	4802      	ldr	r0, [pc, #8]	; (8004a40 <HW_IPCC_SYS_Init+0x10>)
 8004a38:	f7ff fede 	bl	80047f8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004a3c:	bf00      	nop
}
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	58000c00 	.word	0x58000c00

08004a44 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004a48:	2102      	movs	r1, #2
 8004a4a:	4804      	ldr	r0, [pc, #16]	; (8004a5c <HW_IPCC_SYS_SendCmd+0x18>)
 8004a4c:	f7ff fef4 	bl	8004838 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004a50:	2102      	movs	r1, #2
 8004a52:	4802      	ldr	r0, [pc, #8]	; (8004a5c <HW_IPCC_SYS_SendCmd+0x18>)
 8004a54:	f7ff feab 	bl	80047ae <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8004a58:	bf00      	nop
}
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	58000c00 	.word	0x58000c00

08004a60 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004a64:	2102      	movs	r1, #2
 8004a66:	4803      	ldr	r0, [pc, #12]	; (8004a74 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8004a68:	f7ff feb4 	bl	80047d4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8004a6c:	f007 ffd2 	bl	800ca14 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8004a70:	bf00      	nop
}
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	58000c00 	.word	0x58000c00

08004a78 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8004a7c:	f007 ffe0 	bl	800ca40 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8004a80:	2102      	movs	r1, #2
 8004a82:	4802      	ldr	r0, [pc, #8]	; (8004a8c <HW_IPCC_SYS_EvtHandler+0x14>)
 8004a84:	f7ff feca 	bl	800481c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004a88:	bf00      	nop
}
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	58000c00 	.word	0x58000c00

08004a90 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8004a98:	2108      	movs	r1, #8
 8004a9a:	480c      	ldr	r0, [pc, #48]	; (8004acc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8004a9c:	f7ff fedb 	bl	8004856 <LL_C1_IPCC_IsActiveFlag_CHx>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d007      	beq.n	8004ab6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8004aa6:	4a0a      	ldr	r2, [pc, #40]	; (8004ad0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8004aac:	2108      	movs	r1, #8
 8004aae:	4807      	ldr	r0, [pc, #28]	; (8004acc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8004ab0:	f7ff fe7d 	bl	80047ae <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8004ab4:	e006      	b.n	8004ac4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8004aba:	2108      	movs	r1, #8
 8004abc:	4803      	ldr	r0, [pc, #12]	; (8004acc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8004abe:	f7ff febb 	bl	8004838 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8004ac2:	bf00      	nop
}
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	58000c00 	.word	0x58000c00
 8004ad0:	2000072c 	.word	0x2000072c

08004ad4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8004ad8:	2108      	movs	r1, #8
 8004ada:	4806      	ldr	r0, [pc, #24]	; (8004af4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8004adc:	f7ff fe7a 	bl	80047d4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8004ae0:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8004ae6:	2108      	movs	r1, #8
 8004ae8:	4802      	ldr	r0, [pc, #8]	; (8004af4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8004aea:	f7ff fea5 	bl	8004838 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8004aee:	bf00      	nop
}
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	58000c00 	.word	0x58000c00
 8004af8:	2000072c 	.word	0x2000072c

08004afc <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8004b00:	2108      	movs	r1, #8
 8004b02:	4802      	ldr	r0, [pc, #8]	; (8004b0c <HW_IPCC_TRACES_Init+0x10>)
 8004b04:	f7ff fe78 	bl	80047f8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004b08:	bf00      	nop
}
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	58000c00 	.word	0x58000c00

08004b10 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8004b14:	f008 f83c 	bl	800cb90 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8004b18:	2108      	movs	r1, #8
 8004b1a:	4802      	ldr	r0, [pc, #8]	; (8004b24 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8004b1c:	f7ff fe7e 	bl	800481c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004b20:	bf00      	nop
}
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	58000c00 	.word	0x58000c00

08004b28 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004b28:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b2a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b2c:	3304      	adds	r3, #4

08004b2e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b2e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b30:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8004b32:	d3f9      	bcc.n	8004b28 <CopyDataInit>
  bx lr
 8004b34:	4770      	bx	lr

08004b36 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8004b36:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004b38:	3004      	adds	r0, #4

08004b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004b3a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004b3c:	d3fb      	bcc.n	8004b36 <FillZerobss>
  bx lr
 8004b3e:	4770      	bx	lr

08004b40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004b40:	480c      	ldr	r0, [pc, #48]	; (8004b74 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8004b42:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004b44:	f000 f91e 	bl	8004d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004b48:	480b      	ldr	r0, [pc, #44]	; (8004b78 <LoopForever+0x8>)
 8004b4a:	490c      	ldr	r1, [pc, #48]	; (8004b7c <LoopForever+0xc>)
 8004b4c:	4a0c      	ldr	r2, [pc, #48]	; (8004b80 <LoopForever+0x10>)
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f7ff ffed 	bl	8004b2e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004b54:	480b      	ldr	r0, [pc, #44]	; (8004b84 <LoopForever+0x14>)
 8004b56:	490c      	ldr	r1, [pc, #48]	; (8004b88 <LoopForever+0x18>)
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f7ff ffee 	bl	8004b3a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004b5e:	480b      	ldr	r0, [pc, #44]	; (8004b8c <LoopForever+0x1c>)
 8004b60:	490b      	ldr	r1, [pc, #44]	; (8004b90 <LoopForever+0x20>)
 8004b62:	2300      	movs	r3, #0
 8004b64:	f7ff ffe9 	bl	8004b3a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004b68:	f009 f9da 	bl	800df20 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8004b6c:	f7fd fee8 	bl	8002940 <main>

08004b70 <LoopForever>:

LoopForever:
  b LoopForever
 8004b70:	e7fe      	b.n	8004b70 <LoopForever>
 8004b72:	0000      	.short	0x0000
  ldr   r0, =_estack
 8004b74:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004b78:	20000008 	.word	0x20000008
 8004b7c:	200001fc 	.word	0x200001fc
 8004b80:	08011244 	.word	0x08011244
  INIT_BSS _sbss, _ebss
 8004b84:	2000024c 	.word	0x2000024c
 8004b88:	200019bc 	.word	0x200019bc
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004b8c:	200301e4 	.word	0x200301e4
 8004b90:	20030a67 	.word	0x20030a67

08004b94 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004b94:	e7fe      	b.n	8004b94 <ADC1_IRQHandler>

08004b96 <LL_AHB2_GRP1_EnableClock>:
{
 8004b96:	b480      	push	{r7}
 8004b98:	b085      	sub	sp, #20
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ba2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ba4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004bba:	68fb      	ldr	r3, [r7, #12]
}
 8004bbc:	bf00      	nop
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b088      	sub	sp, #32
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8004bd2:	f107 030c 	add.w	r3, r7, #12
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	605a      	str	r2, [r3, #4]
 8004bdc:	609a      	str	r2, [r3, #8]
 8004bde:	60da      	str	r2, [r3, #12]
 8004be0:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8004be2:	2002      	movs	r0, #2
 8004be4:	f7ff ffd7 	bl	8004b96 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8004be8:	79fb      	ldrb	r3, [r7, #7]
 8004bea:	4a12      	ldr	r2, [pc, #72]	; (8004c34 <BSP_LED_Init+0x6c>)
 8004bec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bf0:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8004bfe:	79fb      	ldrb	r3, [r7, #7]
 8004c00:	4a0d      	ldr	r2, [pc, #52]	; (8004c38 <BSP_LED_Init+0x70>)
 8004c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c06:	f107 020c 	add.w	r2, r7, #12
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 fefb 	bl	8005a08 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8004c12:	79fb      	ldrb	r3, [r7, #7]
 8004c14:	4a08      	ldr	r2, [pc, #32]	; (8004c38 <BSP_LED_Init+0x70>)
 8004c16:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004c1a:	79fb      	ldrb	r3, [r7, #7]
 8004c1c:	4a05      	ldr	r2, [pc, #20]	; (8004c34 <BSP_LED_Init+0x6c>)
 8004c1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c22:	2200      	movs	r2, #0
 8004c24:	4619      	mov	r1, r3
 8004c26:	f001 f85f 	bl	8005ce8 <HAL_GPIO_WritePin>
}
 8004c2a:	bf00      	nop
 8004c2c:	3720      	adds	r7, #32
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	08010dd8 	.word	0x08010dd8
 8004c38:	20000008 	.word	0x20000008

08004c3c <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	4603      	mov	r3, r0
 8004c44:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	4a07      	ldr	r2, [pc, #28]	; (8004c68 <BSP_LED_On+0x2c>)
 8004c4a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004c4e:	79fb      	ldrb	r3, [r7, #7]
 8004c50:	4a06      	ldr	r2, [pc, #24]	; (8004c6c <BSP_LED_On+0x30>)
 8004c52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c56:	2201      	movs	r2, #1
 8004c58:	4619      	mov	r1, r3
 8004c5a:	f001 f845 	bl	8005ce8 <HAL_GPIO_WritePin>
}
 8004c5e:	bf00      	nop
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20000008 	.word	0x20000008
 8004c6c:	08010dd8 	.word	0x08010dd8

08004c70 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	4603      	mov	r3, r0
 8004c78:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8004c7a:	79fb      	ldrb	r3, [r7, #7]
 8004c7c:	4a07      	ldr	r2, [pc, #28]	; (8004c9c <BSP_LED_Off+0x2c>)
 8004c7e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004c82:	79fb      	ldrb	r3, [r7, #7]
 8004c84:	4a06      	ldr	r2, [pc, #24]	; (8004ca0 <BSP_LED_Off+0x30>)
 8004c86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	f001 f82b 	bl	8005ce8 <HAL_GPIO_WritePin>
}
 8004c92:	bf00      	nop
 8004c94:	3708      	adds	r7, #8
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20000008 	.word	0x20000008
 8004ca0:	08010dd8 	.word	0x08010dd8

08004ca4 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	4603      	mov	r3, r0
 8004cac:	460a      	mov	r2, r1
 8004cae:	71fb      	strb	r3, [r7, #7]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8004cb4:	f107 030c 	add.w	r3, r7, #12
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]
 8004cbc:	605a      	str	r2, [r3, #4]
 8004cbe:	609a      	str	r2, [r3, #8]
 8004cc0:	60da      	str	r2, [r3, #12]
 8004cc2:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d103      	bne.n	8004cd2 <BSP_PB_Init+0x2e>
 8004cca:	2004      	movs	r0, #4
 8004ccc:	f7ff ff63 	bl	8004b96 <LL_AHB2_GRP1_EnableClock>
 8004cd0:	e00c      	b.n	8004cec <BSP_PB_Init+0x48>
 8004cd2:	79fb      	ldrb	r3, [r7, #7]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d103      	bne.n	8004ce0 <BSP_PB_Init+0x3c>
 8004cd8:	2008      	movs	r0, #8
 8004cda:	f7ff ff5c 	bl	8004b96 <LL_AHB2_GRP1_EnableClock>
 8004cde:	e005      	b.n	8004cec <BSP_PB_Init+0x48>
 8004ce0:	79fb      	ldrb	r3, [r7, #7]
 8004ce2:	2b02      	cmp	r3, #2
 8004ce4:	d102      	bne.n	8004cec <BSP_PB_Init+0x48>
 8004ce6:	2008      	movs	r0, #8
 8004ce8:	f7ff ff55 	bl	8004b96 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8004cec:	79bb      	ldrb	r3, [r7, #6]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d117      	bne.n	8004d22 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8004cf2:	79fb      	ldrb	r3, [r7, #7]
 8004cf4:	4a20      	ldr	r2, [pc, #128]	; (8004d78 <BSP_PB_Init+0xd4>)
 8004cf6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cfa:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8004d00:	2301      	movs	r3, #1
 8004d02:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d04:	2302      	movs	r3, #2
 8004d06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8004d08:	79fb      	ldrb	r3, [r7, #7]
 8004d0a:	4a1c      	ldr	r2, [pc, #112]	; (8004d7c <BSP_PB_Init+0xd8>)
 8004d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d10:	f107 020c 	add.w	r2, r7, #12
 8004d14:	4611      	mov	r1, r2
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 fe76 	bl	8005a08 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8004d1c:	2001      	movs	r0, #1
 8004d1e:	f7fc fd87 	bl	8001830 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8004d22:	79bb      	ldrb	r3, [r7, #6]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d123      	bne.n	8004d70 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8004d28:	79fb      	ldrb	r3, [r7, #7]
 8004d2a:	4a13      	ldr	r2, [pc, #76]	; (8004d78 <BSP_PB_Init+0xd4>)
 8004d2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d30:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8004d32:	2301      	movs	r3, #1
 8004d34:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8004d36:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004d3a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8004d3c:	79fb      	ldrb	r3, [r7, #7]
 8004d3e:	4a0f      	ldr	r2, [pc, #60]	; (8004d7c <BSP_PB_Init+0xd8>)
 8004d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d44:	f107 020c 	add.w	r2, r7, #12
 8004d48:	4611      	mov	r1, r2
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 fe5c 	bl	8005a08 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8004d50:	79fb      	ldrb	r3, [r7, #7]
 8004d52:	4a0b      	ldr	r2, [pc, #44]	; (8004d80 <BSP_PB_Init+0xdc>)
 8004d54:	5cd3      	ldrb	r3, [r2, r3]
 8004d56:	b25b      	sxtb	r3, r3
 8004d58:	2200      	movs	r2, #0
 8004d5a:	210f      	movs	r1, #15
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 fa60 	bl	8005222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8004d62:	79fb      	ldrb	r3, [r7, #7]
 8004d64:	4a06      	ldr	r2, [pc, #24]	; (8004d80 <BSP_PB_Init+0xdc>)
 8004d66:	5cd3      	ldrb	r3, [r2, r3]
 8004d68:	b25b      	sxtb	r3, r3
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 fa73 	bl	8005256 <HAL_NVIC_EnableIRQ>
  }
}
 8004d70:	bf00      	nop
 8004d72:	3720      	adds	r7, #32
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	08010de0 	.word	0x08010de0
 8004d7c:	20000014 	.word	0x20000014
 8004d80:	08010de8 	.word	0x08010de8

08004d84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8004d88:	4b26      	ldr	r3, [pc, #152]	; (8004e24 <SystemInit+0xa0>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8004d8e:	4b25      	ldr	r3, [pc, #148]	; (8004e24 <SystemInit+0xa0>)
 8004d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d94:	4a23      	ldr	r2, [pc, #140]	; (8004e24 <SystemInit+0xa0>)
 8004d96:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d9a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004da8:	f043 0301 	orr.w	r3, r3, #1
 8004dac:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004db2:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8004db6:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004dc2:	4b19      	ldr	r3, [pc, #100]	; (8004e28 <SystemInit+0xa4>)
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8004dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dd4:	f023 0305 	bic.w	r3, r3, #5
 8004dd8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004de4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004de8:	f023 0301 	bic.w	r3, r3, #1
 8004dec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df4:	4a0d      	ldr	r2, [pc, #52]	; (8004e2c <SystemInit+0xa8>)
 8004df6:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dfc:	4a0b      	ldr	r2, [pc, #44]	; (8004e2c <SystemInit+0xa8>)
 8004dfe:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e14:	2200      	movs	r2, #0
 8004e16:	619a      	str	r2, [r3, #24]
}
 8004e18:	bf00      	nop
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	e000ed00 	.word	0xe000ed00
 8004e28:	faf6fefb 	.word	0xfaf6fefb
 8004e2c:	22041000 	.word	0x22041000

08004e30 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004e34:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	4a04      	ldr	r2, [pc, #16]	; (8004e4c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8004e3a:	f043 0301 	orr.w	r3, r3, #1
 8004e3e:	6053      	str	r3, [r2, #4]
}
 8004e40:	bf00      	nop
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	e0042000 	.word	0xe0042000

08004e50 <LL_DBGMCU_EnableDBGStopMode>:
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004e54:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	4a04      	ldr	r2, [pc, #16]	; (8004e6c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8004e5a:	f043 0302 	orr.w	r3, r3, #2
 8004e5e:	6053      	str	r3, [r2, #4]
}
 8004e60:	bf00      	nop
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	e0042000 	.word	0xe0042000

08004e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b082      	sub	sp, #8
 8004e74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e7a:	4b0c      	ldr	r3, [pc, #48]	; (8004eac <HAL_Init+0x3c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a0b      	ldr	r2, [pc, #44]	; (8004eac <HAL_Init+0x3c>)
 8004e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e84:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e86:	2003      	movs	r0, #3
 8004e88:	f000 f9c0 	bl	800520c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004e8c:	2000      	movs	r0, #0
 8004e8e:	f000 f80f 	bl	8004eb0 <HAL_InitTick>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	71fb      	strb	r3, [r7, #7]
 8004e9c:	e001      	b.n	8004ea2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004e9e:	f7fd ff42 	bl	8002d26 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004ea2:	79fb      	ldrb	r3, [r7, #7]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	58004000 	.word	0x58004000

08004eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004ebc:	4b17      	ldr	r3, [pc, #92]	; (8004f1c <HAL_InitTick+0x6c>)
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d024      	beq.n	8004f0e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004ec4:	f002 f89e 	bl	8007004 <HAL_RCC_GetHCLKFreq>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	4b14      	ldr	r3, [pc, #80]	; (8004f1c <HAL_InitTick+0x6c>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	4619      	mov	r1, r3
 8004ed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ed4:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 f9d6 	bl	800528e <HAL_SYSTICK_Config>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10f      	bne.n	8004f08 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b0f      	cmp	r3, #15
 8004eec:	d809      	bhi.n	8004f02 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004eee:	2200      	movs	r2, #0
 8004ef0:	6879      	ldr	r1, [r7, #4]
 8004ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef6:	f000 f994 	bl	8005222 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004efa:	4a09      	ldr	r2, [pc, #36]	; (8004f20 <HAL_InitTick+0x70>)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	e007      	b.n	8004f12 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	73fb      	strb	r3, [r7, #15]
 8004f06:	e004      	b.n	8004f12 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	73fb      	strb	r3, [r7, #15]
 8004f0c:	e001      	b.n	8004f12 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	20000028 	.word	0x20000028
 8004f20:	20000024 	.word	0x20000024

08004f24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004f28:	4b06      	ldr	r3, [pc, #24]	; (8004f44 <HAL_IncTick+0x20>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	4b06      	ldr	r3, [pc, #24]	; (8004f48 <HAL_IncTick+0x24>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4413      	add	r3, r2
 8004f34:	4a04      	ldr	r2, [pc, #16]	; (8004f48 <HAL_IncTick+0x24>)
 8004f36:	6013      	str	r3, [r2, #0]
}
 8004f38:	bf00      	nop
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	20000028 	.word	0x20000028
 8004f48:	20000730 	.word	0x20000730

08004f4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
  return uwTick;
 8004f50:	4b03      	ldr	r3, [pc, #12]	; (8004f60 <HAL_GetTick+0x14>)
 8004f52:	681b      	ldr	r3, [r3, #0]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	20000730 	.word	0x20000730

08004f64 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004f68:	4b03      	ldr	r3, [pc, #12]	; (8004f78 <HAL_GetTickPrio+0x14>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	20000024 	.word	0x20000024

08004f7c <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8004f80:	4b03      	ldr	r3, [pc, #12]	; (8004f90 <HAL_GetTickFreq+0x14>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	20000028 	.word	0x20000028

08004f94 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8004f98:	f7ff ff4a 	bl	8004e30 <LL_DBGMCU_EnableDBGSleepMode>
}
 8004f9c:	bf00      	nop
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8004fa4:	f7ff ff54 	bl	8004e50 <LL_DBGMCU_EnableDBGStopMode>
}
 8004fa8:	bf00      	nop
 8004faa:	bd80      	pop	{r7, pc}

08004fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fbc:	4b0c      	ldr	r3, [pc, #48]	; (8004ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004fc8:	4013      	ands	r3, r2
 8004fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fde:	4a04      	ldr	r2, [pc, #16]	; (8004ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	60d3      	str	r3, [r2, #12]
}
 8004fe4:	bf00      	nop
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	e000ed00 	.word	0xe000ed00

08004ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ff8:	4b04      	ldr	r3, [pc, #16]	; (800500c <__NVIC_GetPriorityGrouping+0x18>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	0a1b      	lsrs	r3, r3, #8
 8004ffe:	f003 0307 	and.w	r3, r3, #7
}
 8005002:	4618      	mov	r0, r3
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	e000ed00 	.word	0xe000ed00

08005010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	4603      	mov	r3, r0
 8005018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800501a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800501e:	2b00      	cmp	r3, #0
 8005020:	db0b      	blt.n	800503a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005022:	79fb      	ldrb	r3, [r7, #7]
 8005024:	f003 021f 	and.w	r2, r3, #31
 8005028:	4907      	ldr	r1, [pc, #28]	; (8005048 <__NVIC_EnableIRQ+0x38>)
 800502a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800502e:	095b      	lsrs	r3, r3, #5
 8005030:	2001      	movs	r0, #1
 8005032:	fa00 f202 	lsl.w	r2, r0, r2
 8005036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	e000e100 	.word	0xe000e100

0800504c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	4603      	mov	r3, r0
 8005054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800505a:	2b00      	cmp	r3, #0
 800505c:	db12      	blt.n	8005084 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800505e:	79fb      	ldrb	r3, [r7, #7]
 8005060:	f003 021f 	and.w	r2, r3, #31
 8005064:	490a      	ldr	r1, [pc, #40]	; (8005090 <__NVIC_DisableIRQ+0x44>)
 8005066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506a:	095b      	lsrs	r3, r3, #5
 800506c:	2001      	movs	r0, #1
 800506e:	fa00 f202 	lsl.w	r2, r0, r2
 8005072:	3320      	adds	r3, #32
 8005074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005078:	f3bf 8f4f 	dsb	sy
}
 800507c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800507e:	f3bf 8f6f 	isb	sy
}
 8005082:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	e000e100 	.word	0xe000e100

08005094 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	4603      	mov	r3, r0
 800509c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800509e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	db0c      	blt.n	80050c0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050a6:	79fb      	ldrb	r3, [r7, #7]
 80050a8:	f003 021f 	and.w	r2, r3, #31
 80050ac:	4907      	ldr	r1, [pc, #28]	; (80050cc <__NVIC_SetPendingIRQ+0x38>)
 80050ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b2:	095b      	lsrs	r3, r3, #5
 80050b4:	2001      	movs	r0, #1
 80050b6:	fa00 f202 	lsl.w	r2, r0, r2
 80050ba:	3340      	adds	r3, #64	; 0x40
 80050bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	e000e100 	.word	0xe000e100

080050d0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	db0c      	blt.n	80050fc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050e2:	79fb      	ldrb	r3, [r7, #7]
 80050e4:	f003 021f 	and.w	r2, r3, #31
 80050e8:	4907      	ldr	r1, [pc, #28]	; (8005108 <__NVIC_ClearPendingIRQ+0x38>)
 80050ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ee:	095b      	lsrs	r3, r3, #5
 80050f0:	2001      	movs	r0, #1
 80050f2:	fa00 f202 	lsl.w	r2, r0, r2
 80050f6:	3360      	adds	r3, #96	; 0x60
 80050f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	e000e100 	.word	0xe000e100

0800510c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	4603      	mov	r3, r0
 8005114:	6039      	str	r1, [r7, #0]
 8005116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800511c:	2b00      	cmp	r3, #0
 800511e:	db0a      	blt.n	8005136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	b2da      	uxtb	r2, r3
 8005124:	490c      	ldr	r1, [pc, #48]	; (8005158 <__NVIC_SetPriority+0x4c>)
 8005126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800512a:	0112      	lsls	r2, r2, #4
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	440b      	add	r3, r1
 8005130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005134:	e00a      	b.n	800514c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	b2da      	uxtb	r2, r3
 800513a:	4908      	ldr	r1, [pc, #32]	; (800515c <__NVIC_SetPriority+0x50>)
 800513c:	79fb      	ldrb	r3, [r7, #7]
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	3b04      	subs	r3, #4
 8005144:	0112      	lsls	r2, r2, #4
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	440b      	add	r3, r1
 800514a:	761a      	strb	r2, [r3, #24]
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	e000e100 	.word	0xe000e100
 800515c:	e000ed00 	.word	0xe000ed00

08005160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005160:	b480      	push	{r7}
 8005162:	b089      	sub	sp, #36	; 0x24
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f003 0307 	and.w	r3, r3, #7
 8005172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	f1c3 0307 	rsb	r3, r3, #7
 800517a:	2b04      	cmp	r3, #4
 800517c:	bf28      	it	cs
 800517e:	2304      	movcs	r3, #4
 8005180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	3304      	adds	r3, #4
 8005186:	2b06      	cmp	r3, #6
 8005188:	d902      	bls.n	8005190 <NVIC_EncodePriority+0x30>
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	3b03      	subs	r3, #3
 800518e:	e000      	b.n	8005192 <NVIC_EncodePriority+0x32>
 8005190:	2300      	movs	r3, #0
 8005192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005194:	f04f 32ff 	mov.w	r2, #4294967295
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	fa02 f303 	lsl.w	r3, r2, r3
 800519e:	43da      	mvns	r2, r3
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	401a      	ands	r2, r3
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051a8:	f04f 31ff 	mov.w	r1, #4294967295
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	fa01 f303 	lsl.w	r3, r1, r3
 80051b2:	43d9      	mvns	r1, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051b8:	4313      	orrs	r3, r2
         );
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3724      	adds	r7, #36	; 0x24
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
	...

080051c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3b01      	subs	r3, #1
 80051d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051d8:	d301      	bcc.n	80051de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051da:	2301      	movs	r3, #1
 80051dc:	e00f      	b.n	80051fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051de:	4a0a      	ldr	r2, [pc, #40]	; (8005208 <SysTick_Config+0x40>)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051e6:	210f      	movs	r1, #15
 80051e8:	f04f 30ff 	mov.w	r0, #4294967295
 80051ec:	f7ff ff8e 	bl	800510c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051f0:	4b05      	ldr	r3, [pc, #20]	; (8005208 <SysTick_Config+0x40>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051f6:	4b04      	ldr	r3, [pc, #16]	; (8005208 <SysTick_Config+0x40>)
 80051f8:	2207      	movs	r2, #7
 80051fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	e000e010 	.word	0xe000e010

0800520c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f7ff fec9 	bl	8004fac <__NVIC_SetPriorityGrouping>
}
 800521a:	bf00      	nop
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b086      	sub	sp, #24
 8005226:	af00      	add	r7, sp, #0
 8005228:	4603      	mov	r3, r0
 800522a:	60b9      	str	r1, [r7, #8]
 800522c:	607a      	str	r2, [r7, #4]
 800522e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005230:	f7ff fee0 	bl	8004ff4 <__NVIC_GetPriorityGrouping>
 8005234:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	68b9      	ldr	r1, [r7, #8]
 800523a:	6978      	ldr	r0, [r7, #20]
 800523c:	f7ff ff90 	bl	8005160 <NVIC_EncodePriority>
 8005240:	4602      	mov	r2, r0
 8005242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005246:	4611      	mov	r1, r2
 8005248:	4618      	mov	r0, r3
 800524a:	f7ff ff5f 	bl	800510c <__NVIC_SetPriority>
}
 800524e:	bf00      	nop
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b082      	sub	sp, #8
 800525a:	af00      	add	r7, sp, #0
 800525c:	4603      	mov	r3, r0
 800525e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005264:	4618      	mov	r0, r3
 8005266:	f7ff fed3 	bl	8005010 <__NVIC_EnableIRQ>
}
 800526a:	bf00      	nop
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b082      	sub	sp, #8
 8005276:	af00      	add	r7, sp, #0
 8005278:	4603      	mov	r3, r0
 800527a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800527c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff fee3 	bl	800504c <__NVIC_DisableIRQ>
}
 8005286:	bf00      	nop
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b082      	sub	sp, #8
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7ff ff96 	bl	80051c8 <SysTick_Config>
 800529c:	4603      	mov	r3, r0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b082      	sub	sp, #8
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	4603      	mov	r3, r0
 80052ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80052b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7ff feed 	bl	8005094 <__NVIC_SetPendingIRQ>
}
 80052ba:	bf00      	nop
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b082      	sub	sp, #8
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	4603      	mov	r3, r0
 80052ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80052cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7ff fefd 	bl	80050d0 <__NVIC_ClearPendingIRQ>
}
 80052d6:	bf00      	nop
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
	...

080052e0 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e08e      	b.n	8005410 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	461a      	mov	r2, r3
 80052f8:	4b47      	ldr	r3, [pc, #284]	; (8005418 <HAL_DMA_Init+0x138>)
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d80f      	bhi.n	800531e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	461a      	mov	r2, r3
 8005304:	4b45      	ldr	r3, [pc, #276]	; (800541c <HAL_DMA_Init+0x13c>)
 8005306:	4413      	add	r3, r2
 8005308:	4a45      	ldr	r2, [pc, #276]	; (8005420 <HAL_DMA_Init+0x140>)
 800530a:	fba2 2303 	umull	r2, r3, r2, r3
 800530e:	091b      	lsrs	r3, r3, #4
 8005310:	009a      	lsls	r2, r3, #2
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a42      	ldr	r2, [pc, #264]	; (8005424 <HAL_DMA_Init+0x144>)
 800531a:	641a      	str	r2, [r3, #64]	; 0x40
 800531c:	e00e      	b.n	800533c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	461a      	mov	r2, r3
 8005324:	4b40      	ldr	r3, [pc, #256]	; (8005428 <HAL_DMA_Init+0x148>)
 8005326:	4413      	add	r3, r2
 8005328:	4a3d      	ldr	r2, [pc, #244]	; (8005420 <HAL_DMA_Init+0x140>)
 800532a:	fba2 2303 	umull	r2, r3, r2, r3
 800532e:	091b      	lsrs	r3, r3, #4
 8005330:	009a      	lsls	r2, r3, #2
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a3c      	ldr	r2, [pc, #240]	; (800542c <HAL_DMA_Init+0x14c>)
 800533a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005356:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005360:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800536c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005378:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f000 fa74 	bl	800587c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800539c:	d102      	bne.n	80053a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685a      	ldr	r2, [r3, #4]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053ac:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80053b0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80053ba:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d010      	beq.n	80053e6 <HAL_DMA_Init+0x106>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	2b04      	cmp	r3, #4
 80053ca:	d80c      	bhi.n	80053e6 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 fa93 	bl	80058f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d6:	2200      	movs	r2, #0
 80053d8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80053e2:	605a      	str	r2, [r3, #4]
 80053e4:	e008      	b.n	80053f8 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	40020407 	.word	0x40020407
 800541c:	bffdfff8 	.word	0xbffdfff8
 8005420:	cccccccd 	.word	0xcccccccd
 8005424:	40020000 	.word	0x40020000
 8005428:	bffdfbf8 	.word	0xbffdfbf8
 800542c:	40020400 	.word	0x40020400

08005430 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005448:	2b01      	cmp	r3, #1
 800544a:	d101      	bne.n	8005450 <HAL_DMA_Start_IT+0x20>
 800544c:	2302      	movs	r3, #2
 800544e:	e066      	b.n	800551e <HAL_DMA_Start_IT+0xee>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800545e:	b2db      	uxtb	r3, r3
 8005460:	2b01      	cmp	r3, #1
 8005462:	d155      	bne.n	8005510 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2202      	movs	r2, #2
 8005468:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 0201 	bic.w	r2, r2, #1
 8005480:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	68b9      	ldr	r1, [r7, #8]
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 f9b9 	bl	8005800 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005492:	2b00      	cmp	r3, #0
 8005494:	d008      	beq.n	80054a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f042 020e 	orr.w	r2, r2, #14
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	e00f      	b.n	80054c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f022 0204 	bic.w	r2, r2, #4
 80054b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f042 020a 	orr.w	r2, r2, #10
 80054c6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d007      	beq.n	80054e6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054e4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d007      	beq.n	80054fe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054fc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f042 0201 	orr.w	r2, r2, #1
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	e005      	b.n	800551c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005518:	2302      	movs	r3, #2
 800551a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800551c:	7dfb      	ldrb	r3, [r7, #23]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d101      	bne.n	8005538 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	e04f      	b.n	80055d8 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d008      	beq.n	8005556 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2204      	movs	r2, #4
 8005548:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e040      	b.n	80055d8 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 020e 	bic.w	r2, r2, #14
 8005564:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005570:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005574:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0201 	bic.w	r2, r2, #1
 8005584:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558a:	f003 021c 	and.w	r2, r3, #28
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	2101      	movs	r1, #1
 8005594:	fa01 f202 	lsl.w	r2, r1, r2
 8005598:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80055a2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00c      	beq.n	80055c6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80055c4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	370c      	adds	r7, #12
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b02      	cmp	r3, #2
 80055fa:	d005      	beq.n	8005608 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2204      	movs	r2, #4
 8005600:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	73fb      	strb	r3, [r7, #15]
 8005606:	e047      	b.n	8005698 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 020e 	bic.w	r2, r2, #14
 8005616:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0201 	bic.w	r2, r2, #1
 8005626:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005632:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005636:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800563c:	f003 021c 	and.w	r2, r3, #28
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005644:	2101      	movs	r1, #1
 8005646:	fa01 f202 	lsl.w	r2, r1, r2
 800564a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005654:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00c      	beq.n	8005678 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005668:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800566c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005676:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568c:	2b00      	cmp	r3, #0
 800568e:	d003      	beq.n	8005698 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	4798      	blx	r3
    }
  }
  return status;
 8005698:	7bfb      	ldrb	r3, [r7, #15]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b084      	sub	sp, #16
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056be:	f003 031c 	and.w	r3, r3, #28
 80056c2:	2204      	movs	r2, #4
 80056c4:	409a      	lsls	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	4013      	ands	r3, r2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d026      	beq.n	800571c <HAL_DMA_IRQHandler+0x7a>
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d021      	beq.n	800571c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d107      	bne.n	80056f6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f022 0204 	bic.w	r2, r2, #4
 80056f4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fa:	f003 021c 	and.w	r2, r3, #28
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	2104      	movs	r1, #4
 8005704:	fa01 f202 	lsl.w	r2, r1, r2
 8005708:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570e:	2b00      	cmp	r3, #0
 8005710:	d071      	beq.n	80057f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800571a:	e06c      	b.n	80057f6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005720:	f003 031c 	and.w	r3, r3, #28
 8005724:	2202      	movs	r2, #2
 8005726:	409a      	lsls	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	4013      	ands	r3, r2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d02e      	beq.n	800578e <HAL_DMA_IRQHandler+0xec>
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d029      	beq.n	800578e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0320 	and.w	r3, r3, #32
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10b      	bne.n	8005760 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 020a 	bic.w	r2, r2, #10
 8005756:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005764:	f003 021c 	and.w	r2, r3, #28
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576c:	2102      	movs	r1, #2
 800576e:	fa01 f202 	lsl.w	r2, r1, r2
 8005772:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005780:	2b00      	cmp	r3, #0
 8005782:	d038      	beq.n	80057f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800578c:	e033      	b.n	80057f6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005792:	f003 031c 	and.w	r3, r3, #28
 8005796:	2208      	movs	r2, #8
 8005798:	409a      	lsls	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	4013      	ands	r3, r2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d02a      	beq.n	80057f8 <HAL_DMA_IRQHandler+0x156>
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	f003 0308 	and.w	r3, r3, #8
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d025      	beq.n	80057f8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 020e 	bic.w	r2, r2, #14
 80057ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c0:	f003 021c 	and.w	r2, r3, #28
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c8:	2101      	movs	r1, #1
 80057ca:	fa01 f202 	lsl.w	r2, r1, r2
 80057ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d004      	beq.n	80057f8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80057f6:	bf00      	nop
 80057f8:	bf00      	nop
}
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005816:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581c:	2b00      	cmp	r3, #0
 800581e:	d004      	beq.n	800582a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005828:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800582e:	f003 021c 	and.w	r2, r3, #28
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	2101      	movs	r1, #1
 8005838:	fa01 f202 	lsl.w	r2, r1, r2
 800583c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	2b10      	cmp	r3, #16
 800584c:	d108      	bne.n	8005860 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800585e:	e007      	b.n	8005870 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	60da      	str	r2, [r3, #12]
}
 8005870:	bf00      	nop
 8005872:	3714      	adds	r7, #20
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	461a      	mov	r2, r3
 800588a:	4b17      	ldr	r3, [pc, #92]	; (80058e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800588c:	429a      	cmp	r2, r3
 800588e:	d80a      	bhi.n	80058a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005894:	089b      	lsrs	r3, r3, #2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800589c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6493      	str	r3, [r2, #72]	; 0x48
 80058a4:	e007      	b.n	80058b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058aa:	089b      	lsrs	r3, r3, #2
 80058ac:	009a      	lsls	r2, r3, #2
 80058ae:	4b0f      	ldr	r3, [pc, #60]	; (80058ec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80058b0:	4413      	add	r3, r2
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	3b08      	subs	r3, #8
 80058be:	4a0c      	ldr	r2, [pc, #48]	; (80058f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80058c0:	fba2 2303 	umull	r2, r3, r2, r3
 80058c4:	091b      	lsrs	r3, r3, #4
 80058c6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a0a      	ldr	r2, [pc, #40]	; (80058f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80058cc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f003 031f 	and.w	r3, r3, #31
 80058d4:	2201      	movs	r2, #1
 80058d6:	409a      	lsls	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	651a      	str	r2, [r3, #80]	; 0x50
}
 80058dc:	bf00      	nop
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	40020407 	.word	0x40020407
 80058ec:	4002081c 	.word	0x4002081c
 80058f0:	cccccccd 	.word	0xcccccccd
 80058f4:	40020880 	.word	0x40020880

080058f8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005908:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4b0b      	ldr	r3, [pc, #44]	; (800593c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800590e:	4413      	add	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	461a      	mov	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a09      	ldr	r2, [pc, #36]	; (8005940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800591c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	3b01      	subs	r3, #1
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	2201      	movs	r2, #1
 8005928:	409a      	lsls	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800592e:	bf00      	nop
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	1000823f 	.word	0x1000823f
 8005940:	40020940 	.word	0x40020940

08005944 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b01      	cmp	r3, #1
 8005958:	d12b      	bne.n	80059b2 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005960:	2b01      	cmp	r3, #1
 8005962:	d101      	bne.n	8005968 <HAL_DMAEx_ConfigMuxSync+0x24>
 8005964:	2302      	movs	r3, #2
 8005966:	e025      	b.n	80059b4 <HAL_DMAEx_ConfigMuxSync+0x70>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	4b12      	ldr	r3, [pc, #72]	; (80059c0 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8005978:	4013      	ands	r3, r2
 800597a:	683a      	ldr	r2, [r7, #0]
 800597c:	6811      	ldr	r1, [r2, #0]
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	68d2      	ldr	r2, [r2, #12]
 8005982:	3a01      	subs	r2, #1
 8005984:	04d2      	lsls	r2, r2, #19
 8005986:	4311      	orrs	r1, r2
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	6852      	ldr	r2, [r2, #4]
 800598c:	4311      	orrs	r1, r2
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	7a12      	ldrb	r2, [r2, #8]
 8005992:	0412      	lsls	r2, r2, #16
 8005994:	4311      	orrs	r1, r2
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	7a52      	ldrb	r2, [r2, #9]
 800599a:	0252      	lsls	r2, r2, #9
 800599c:	4311      	orrs	r1, r2
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80059a2:	430b      	orrs	r3, r1
 80059a4:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	e000      	b.n	80059b4 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
  }
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr
 80059c0:	e000fdff 	.word	0xe000fdff

080059c4 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b087      	sub	sp, #28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	0c1b      	lsrs	r3, r3, #16
 80059d2:	f003 0301 	and.w	r3, r3, #1
 80059d6:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 031f 	and.w	r3, r3, #31
 80059e0:	2201      	movs	r2, #1
 80059e2:	fa02 f303 	lsl.w	r3, r2, r3
 80059e6:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	015b      	lsls	r3, r3, #5
 80059ec:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 80059f0:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80059f4:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	601a      	str	r2, [r3, #0]
}
 80059fc:	bf00      	nop
 80059fe:	371c      	adds	r7, #28
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b087      	sub	sp, #28
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005a12:	2300      	movs	r3, #0
 8005a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a16:	e14c      	b.n	8005cb2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	2101      	movs	r1, #1
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	fa01 f303 	lsl.w	r3, r1, r3
 8005a24:	4013      	ands	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 813e 	beq.w	8005cac <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f003 0303 	and.w	r3, r3, #3
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d005      	beq.n	8005a48 <HAL_GPIO_Init+0x40>
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f003 0303 	and.w	r3, r3, #3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d130      	bne.n	8005aaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	2203      	movs	r2, #3
 8005a54:	fa02 f303 	lsl.w	r3, r2, r3
 8005a58:	43db      	mvns	r3, r3
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	fa02 f303 	lsl.w	r3, r2, r3
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a7e:	2201      	movs	r2, #1
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	fa02 f303 	lsl.w	r3, r2, r3
 8005a86:	43db      	mvns	r3, r3
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	091b      	lsrs	r3, r3, #4
 8005a94:	f003 0201 	and.w	r2, r3, #1
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	2b03      	cmp	r3, #3
 8005ab4:	d017      	beq.n	8005ae6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	2203      	movs	r2, #3
 8005ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	4013      	ands	r3, r2
 8005acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f003 0303 	and.w	r3, r3, #3
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d123      	bne.n	8005b3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	08da      	lsrs	r2, r3, #3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	3208      	adds	r2, #8
 8005afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005afe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f003 0307 	and.w	r3, r3, #7
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	220f      	movs	r2, #15
 8005b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0e:	43db      	mvns	r3, r3
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	4013      	ands	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	691a      	ldr	r2, [r3, #16]
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	fa02 f303 	lsl.w	r3, r2, r3
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	08da      	lsrs	r2, r3, #3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3208      	adds	r2, #8
 8005b34:	6939      	ldr	r1, [r7, #16]
 8005b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	2203      	movs	r2, #3
 8005b46:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4a:	43db      	mvns	r3, r3
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	f003 0203 	and.w	r2, r3, #3
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	693a      	ldr	r2, [r7, #16]
 8005b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 8098 	beq.w	8005cac <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005b7c:	4a54      	ldr	r2, [pc, #336]	; (8005cd0 <HAL_GPIO_Init+0x2c8>)
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	089b      	lsrs	r3, r3, #2
 8005b82:	3302      	adds	r3, #2
 8005b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f003 0303 	and.w	r3, r3, #3
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	220f      	movs	r2, #15
 8005b94:	fa02 f303 	lsl.w	r3, r2, r3
 8005b98:	43db      	mvns	r3, r3
 8005b9a:	693a      	ldr	r2, [r7, #16]
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005ba6:	d019      	beq.n	8005bdc <HAL_GPIO_Init+0x1d4>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	4a4a      	ldr	r2, [pc, #296]	; (8005cd4 <HAL_GPIO_Init+0x2cc>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d013      	beq.n	8005bd8 <HAL_GPIO_Init+0x1d0>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a49      	ldr	r2, [pc, #292]	; (8005cd8 <HAL_GPIO_Init+0x2d0>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d00d      	beq.n	8005bd4 <HAL_GPIO_Init+0x1cc>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4a48      	ldr	r2, [pc, #288]	; (8005cdc <HAL_GPIO_Init+0x2d4>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d007      	beq.n	8005bd0 <HAL_GPIO_Init+0x1c8>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a47      	ldr	r2, [pc, #284]	; (8005ce0 <HAL_GPIO_Init+0x2d8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d101      	bne.n	8005bcc <HAL_GPIO_Init+0x1c4>
 8005bc8:	2304      	movs	r3, #4
 8005bca:	e008      	b.n	8005bde <HAL_GPIO_Init+0x1d6>
 8005bcc:	2307      	movs	r3, #7
 8005bce:	e006      	b.n	8005bde <HAL_GPIO_Init+0x1d6>
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e004      	b.n	8005bde <HAL_GPIO_Init+0x1d6>
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	e002      	b.n	8005bde <HAL_GPIO_Init+0x1d6>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e000      	b.n	8005bde <HAL_GPIO_Init+0x1d6>
 8005bdc:	2300      	movs	r3, #0
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	f002 0203 	and.w	r2, r2, #3
 8005be4:	0092      	lsls	r2, r2, #2
 8005be6:	4093      	lsls	r3, r2
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005bee:	4938      	ldr	r1, [pc, #224]	; (8005cd0 <HAL_GPIO_Init+0x2c8>)
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	089b      	lsrs	r3, r3, #2
 8005bf4:	3302      	adds	r3, #2
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bfc:	4b39      	ldr	r3, [pc, #228]	; (8005ce4 <HAL_GPIO_Init+0x2dc>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	43db      	mvns	r3, r3
 8005c06:	693a      	ldr	r2, [r7, #16]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005c20:	4a30      	ldr	r2, [pc, #192]	; (8005ce4 <HAL_GPIO_Init+0x2dc>)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c26:	4b2f      	ldr	r3, [pc, #188]	; (8005ce4 <HAL_GPIO_Init+0x2dc>)
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	43db      	mvns	r3, r3
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	4013      	ands	r3, r2
 8005c34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d003      	beq.n	8005c4a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005c42:	693a      	ldr	r2, [r7, #16]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005c4a:	4a26      	ldr	r2, [pc, #152]	; (8005ce4 <HAL_GPIO_Init+0x2dc>)
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005c50:	4b24      	ldr	r3, [pc, #144]	; (8005ce4 <HAL_GPIO_Init+0x2dc>)
 8005c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	43db      	mvns	r3, r3
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	4013      	ands	r3, r2
 8005c60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d003      	beq.n	8005c76 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005c76:	4a1b      	ldr	r2, [pc, #108]	; (8005ce4 <HAL_GPIO_Init+0x2dc>)
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8005c7e:	4b19      	ldr	r3, [pc, #100]	; (8005ce4 <HAL_GPIO_Init+0x2dc>)
 8005c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	43db      	mvns	r3, r3
 8005c8a:	693a      	ldr	r2, [r7, #16]
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d003      	beq.n	8005ca4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005ca4:	4a0f      	ldr	r2, [pc, #60]	; (8005ce4 <HAL_GPIO_Init+0x2dc>)
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	3301      	adds	r3, #1
 8005cb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f47f aeab 	bne.w	8005a18 <HAL_GPIO_Init+0x10>
  }
}
 8005cc2:	bf00      	nop
 8005cc4:	bf00      	nop
 8005cc6:	371c      	adds	r7, #28
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cce:	4770      	bx	lr
 8005cd0:	40010000 	.word	0x40010000
 8005cd4:	48000400 	.word	0x48000400
 8005cd8:	48000800 	.word	0x48000800
 8005cdc:	48000c00 	.word	0x48000c00
 8005ce0:	48001000 	.word	0x48001000
 8005ce4:	58000800 	.word	0x58000800

08005ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	807b      	strh	r3, [r7, #2]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005cf8:	787b      	ldrb	r3, [r7, #1]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005cfe:	887a      	ldrh	r2, [r7, #2]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005d04:	e002      	b.n	8005d0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005d06:	887a      	ldrh	r2, [r7, #2]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	4603      	mov	r3, r0
 8005d20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005d22:	4b08      	ldr	r3, [pc, #32]	; (8005d44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d24:	68da      	ldr	r2, [r3, #12]
 8005d26:	88fb      	ldrh	r3, [r7, #6]
 8005d28:	4013      	ands	r3, r2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d006      	beq.n	8005d3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005d2e:	4a05      	ldr	r2, [pc, #20]	; (8005d44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005d30:	88fb      	ldrh	r3, [r7, #6]
 8005d32:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005d34:	88fb      	ldrh	r3, [r7, #6]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f7fb fdde 	bl	80018f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8005d3c:	bf00      	nop
 8005d3e:	3708      	adds	r7, #8
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	58000800 	.word	0x58000800

08005d48 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005d4e:	4b0a      	ldr	r3, [pc, #40]	; (8005d78 <HAL_HSEM_IRQHandler+0x30>)
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005d54:	4b08      	ldr	r3, [pc, #32]	; (8005d78 <HAL_HSEM_IRQHandler+0x30>)
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	43db      	mvns	r3, r3
 8005d5c:	4906      	ldr	r1, [pc, #24]	; (8005d78 <HAL_HSEM_IRQHandler+0x30>)
 8005d5e:	4013      	ands	r3, r2
 8005d60:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005d62:	4a05      	ldr	r2, [pc, #20]	; (8005d78 <HAL_HSEM_IRQHandler+0x30>)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f807 	bl	8005d7c <HAL_HSEM_FreeCallback>
}
 8005d6e:	bf00      	nop
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	58001500 	.word	0x58001500

08005d7c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d01e      	beq.n	8005de0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005da2:	4b13      	ldr	r3, [pc, #76]	; (8005df0 <HAL_IPCC_Init+0x60>)
 8005da4:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d102      	bne.n	8005db8 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7fc ffc8 	bl	8002d48 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005db8:	68b8      	ldr	r0, [r7, #8]
 8005dba:	f000 f85b 	bl	8005e74 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 f82c 	bl	8005e28 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005dde:	e001      	b.n	8005de4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	58000c00 	.word	0x58000c00

08005df4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8005e02:	bf00      	nop
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b085      	sub	sp, #20
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	60f8      	str	r0, [r7, #12]
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005e30:	2300      	movs	r3, #0
 8005e32:	60fb      	str	r3, [r7, #12]
 8005e34:	e00f      	b.n	8005e56 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	4a0b      	ldr	r2, [pc, #44]	; (8005e6c <IPCC_SetDefaultCallbacks+0x44>)
 8005e40:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	3306      	adds	r3, #6
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	4a08      	ldr	r2, [pc, #32]	; (8005e70 <IPCC_SetDefaultCallbacks+0x48>)
 8005e4e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	3301      	adds	r3, #1
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2b05      	cmp	r3, #5
 8005e5a:	d9ec      	bls.n	8005e36 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005e5c:	bf00      	nop
 8005e5e:	bf00      	nop
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	08005df5 	.word	0x08005df5
 8005e70:	08005e0f 	.word	0x08005e0f

08005e74 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8005e88:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	223f      	movs	r2, #63	; 0x3f
 8005e8e:	609a      	str	r2, [r3, #8]
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ea0:	4b05      	ldr	r3, [pc, #20]	; (8005eb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a04      	ldr	r2, [pc, #16]	; (8005eb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eaa:	6013      	str	r3, [r2, #0]
}
 8005eac:	bf00      	nop
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	58000400 	.word	0x58000400

08005ebc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005ec0:	4b04      	ldr	r3, [pc, #16]	; (8005ed4 <HAL_PWREx_GetVoltageRange+0x18>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	58000400 	.word	0x58000400

08005ed8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005ed8:	b480      	push	{r7}
 8005eda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eea:	d101      	bne.n	8005ef0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005eec:	2301      	movs	r3, #1
 8005eee:	e000      	b.n	8005ef2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <LL_RCC_HSE_Enable>:
{
 8005efc:	b480      	push	{r7}
 8005efe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f0e:	6013      	str	r3, [r2, #0]
}
 8005f10:	bf00      	nop
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <LL_RCC_HSE_Disable>:
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f2c:	6013      	str	r3, [r2, #0]
}
 8005f2e:	bf00      	nop
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <LL_RCC_HSE_IsReady>:
{
 8005f38:	b480      	push	{r7}
 8005f3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f4a:	d101      	bne.n	8005f50 <LL_RCC_HSE_IsReady+0x18>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e000      	b.n	8005f52 <LL_RCC_HSE_IsReady+0x1a>
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <LL_RCC_HSI_Enable>:
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f6e:	6013      	str	r3, [r2, #0]
}
 8005f70:	bf00      	nop
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <LL_RCC_HSI_Disable>:
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f8c:	6013      	str	r3, [r2, #0]
}
 8005f8e:	bf00      	nop
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <LL_RCC_HSI_IsReady>:
{
 8005f98:	b480      	push	{r7}
 8005f9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005faa:	d101      	bne.n	8005fb0 <LL_RCC_HSI_IsReady+0x18>
 8005fac:	2301      	movs	r3, #1
 8005fae:	e000      	b.n	8005fb2 <LL_RCC_HSI_IsReady+0x1a>
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <LL_RCC_HSI_SetCalibTrimming>:
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	061b      	lsls	r3, r3, #24
 8005fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	604b      	str	r3, [r1, #4]
}
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <LL_RCC_HSI48_Enable>:
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ff2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ff6:	f043 0301 	orr.w	r3, r3, #1
 8005ffa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005ffe:	bf00      	nop
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <LL_RCC_HSI48_Disable>:
{
 8006008:	b480      	push	{r7}
 800600a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800600c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006010:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006018:	f023 0301 	bic.w	r3, r3, #1
 800601c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8006020:	bf00      	nop
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <LL_RCC_HSI48_IsReady>:
{
 800602a:	b480      	push	{r7}
 800602c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800602e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006032:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006036:	f003 0302 	and.w	r3, r3, #2
 800603a:	2b02      	cmp	r3, #2
 800603c:	d101      	bne.n	8006042 <LL_RCC_HSI48_IsReady+0x18>
 800603e:	2301      	movs	r3, #1
 8006040:	e000      	b.n	8006044 <LL_RCC_HSI48_IsReady+0x1a>
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <LL_RCC_LSE_Enable>:
{
 800604e:	b480      	push	{r7}
 8006050:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800605a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800605e:	f043 0301 	orr.w	r3, r3, #1
 8006062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006066:	bf00      	nop
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <LL_RCC_LSE_Disable>:
{
 8006070:	b480      	push	{r7}
 8006072:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006080:	f023 0301 	bic.w	r3, r3, #1
 8006084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006088:	bf00      	nop
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <LL_RCC_LSE_EnableBypass>:
{
 8006092:	b480      	push	{r7}
 8006094:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800609a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060a2:	f043 0304 	orr.w	r3, r3, #4
 80060a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80060aa:	bf00      	nop
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <LL_RCC_LSE_DisableBypass>:
{
 80060b4:	b480      	push	{r7}
 80060b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80060b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060c4:	f023 0304 	bic.w	r3, r3, #4
 80060c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80060cc:	bf00      	nop
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <LL_RCC_LSE_IsReady>:
{
 80060d6:	b480      	push	{r7}
 80060d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80060da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d101      	bne.n	80060ee <LL_RCC_LSE_IsReady+0x18>
 80060ea:	2301      	movs	r3, #1
 80060ec:	e000      	b.n	80060f0 <LL_RCC_LSE_IsReady+0x1a>
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <LL_RCC_LSI1_Enable>:
{
 80060fa:	b480      	push	{r7}
 80060fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80060fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006106:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800610a:	f043 0301 	orr.w	r3, r3, #1
 800610e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006112:	bf00      	nop
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <LL_RCC_LSI1_Disable>:
{
 800611c:	b480      	push	{r7}
 800611e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006124:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006128:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800612c:	f023 0301 	bic.w	r3, r3, #1
 8006130:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8006134:	bf00      	nop
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <LL_RCC_LSI1_IsReady>:
{
 800613e:	b480      	push	{r7}
 8006140:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b02      	cmp	r3, #2
 8006150:	d101      	bne.n	8006156 <LL_RCC_LSI1_IsReady+0x18>
 8006152:	2301      	movs	r3, #1
 8006154:	e000      	b.n	8006158 <LL_RCC_LSI1_IsReady+0x1a>
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <LL_RCC_LSI2_Enable>:
{
 8006162:	b480      	push	{r7}
 8006164:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800616a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800616e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006172:	f043 0304 	orr.w	r3, r3, #4
 8006176:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800617a:	bf00      	nop
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <LL_RCC_LSI2_Disable>:
{
 8006184:	b480      	push	{r7}
 8006186:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800618c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006190:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006194:	f023 0304 	bic.w	r3, r3, #4
 8006198:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800619c:	bf00      	nop
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <LL_RCC_LSI2_IsReady>:
{
 80061a6:	b480      	push	{r7}
 80061a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80061aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061b2:	f003 0308 	and.w	r3, r3, #8
 80061b6:	2b08      	cmp	r3, #8
 80061b8:	d101      	bne.n	80061be <LL_RCC_LSI2_IsReady+0x18>
 80061ba:	2301      	movs	r3, #1
 80061bc:	e000      	b.n	80061c0 <LL_RCC_LSI2_IsReady+0x1a>
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <LL_RCC_LSI2_SetTrimming>:
{
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80061d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061da:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	021b      	lsls	r3, r3, #8
 80061e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061e6:	4313      	orrs	r3, r2
 80061e8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <LL_RCC_MSI_Enable>:
{
 80061f8:	b480      	push	{r7}
 80061fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80061fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006206:	f043 0301 	orr.w	r3, r3, #1
 800620a:	6013      	str	r3, [r2, #0]
}
 800620c:	bf00      	nop
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <LL_RCC_MSI_Disable>:
{
 8006216:	b480      	push	{r7}
 8006218:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800621a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006224:	f023 0301 	bic.w	r3, r3, #1
 8006228:	6013      	str	r3, [r2, #0]
}
 800622a:	bf00      	nop
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <LL_RCC_MSI_IsReady>:
{
 8006234:	b480      	push	{r7}
 8006236:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0302 	and.w	r3, r3, #2
 8006242:	2b02      	cmp	r3, #2
 8006244:	d101      	bne.n	800624a <LL_RCC_MSI_IsReady+0x16>
 8006246:	2301      	movs	r3, #1
 8006248:	e000      	b.n	800624c <LL_RCC_MSI_IsReady+0x18>
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <LL_RCC_MSI_SetRange>:
{
 8006256:	b480      	push	{r7}
 8006258:	b083      	sub	sp, #12
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800625e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006268:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4313      	orrs	r3, r2
 8006270:	600b      	str	r3, [r1, #0]
}
 8006272:	bf00      	nop
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <LL_RCC_MSI_GetRange>:
{
 800627e:	b480      	push	{r7}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800628e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2bb0      	cmp	r3, #176	; 0xb0
 8006294:	d901      	bls.n	800629a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8006296:	23b0      	movs	r3, #176	; 0xb0
 8006298:	607b      	str	r3, [r7, #4]
  return msiRange;
 800629a:	687b      	ldr	r3, [r7, #4]
}
 800629c:	4618      	mov	r0, r3
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80062b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	021b      	lsls	r3, r3, #8
 80062be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062c2:	4313      	orrs	r3, r2
 80062c4:	604b      	str	r3, [r1, #4]
}
 80062c6:	bf00      	nop
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <LL_RCC_SetSysClkSource>:
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80062da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f023 0203 	bic.w	r2, r3, #3
 80062e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	608b      	str	r3, [r1, #8]
}
 80062ee:	bf00      	nop
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <LL_RCC_GetSysClkSource>:
{
 80062fa:	b480      	push	{r7}
 80062fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80062fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f003 030c 	and.w	r3, r3, #12
}
 8006308:	4618      	mov	r0, r3
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <LL_RCC_SetAHBPrescaler>:
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800631a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006324:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4313      	orrs	r3, r2
 800632c:	608b      	str	r3, [r1, #8]
}
 800632e:	bf00      	nop
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <LL_C2_RCC_SetAHBPrescaler>:
{
 800633a:	b480      	push	{r7}
 800633c:	b083      	sub	sp, #12
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006346:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800634a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800634e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4313      	orrs	r3, r2
 8006356:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <LL_RCC_SetAHB4Prescaler>:
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800636e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006372:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006376:	f023 020f 	bic.w	r2, r3, #15
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	091b      	lsrs	r3, r3, #4
 800637e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006382:	4313      	orrs	r3, r2
 8006384:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <LL_RCC_SetAPB1Prescaler>:
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800639c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	608b      	str	r3, [r1, #8]
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <LL_RCC_SetAPB2Prescaler>:
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80063c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80063ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	608b      	str	r3, [r1, #8]
}
 80063d8:	bf00      	nop
 80063da:	370c      	adds	r7, #12
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <LL_RCC_GetAHBPrescaler>:
{
 80063e4:	b480      	push	{r7}
 80063e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80063e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <LL_RCC_GetAHB4Prescaler>:
{
 80063fc:	b480      	push	{r7}
 80063fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006404:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006408:	011b      	lsls	r3, r3, #4
 800640a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800640e:	4618      	mov	r0, r3
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <LL_RCC_GetAPB1Prescaler>:
{
 8006418:	b480      	push	{r7}
 800641a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800641c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8006426:	4618      	mov	r0, r3
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <LL_RCC_GetAPB2Prescaler>:
{
 8006430:	b480      	push	{r7}
 8006432:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800643e:	4618      	mov	r0, r3
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <LL_RCC_PLL_Enable>:
{
 8006448:	b480      	push	{r7}
 800644a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800644c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006456:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800645a:	6013      	str	r3, [r2, #0]
}
 800645c:	bf00      	nop
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <LL_RCC_PLL_Disable>:
{
 8006466:	b480      	push	{r7}
 8006468:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800646a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006474:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006478:	6013      	str	r3, [r2, #0]
}
 800647a:	bf00      	nop
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <LL_RCC_PLL_IsReady>:
{
 8006484:	b480      	push	{r7}
 8006486:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006492:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006496:	d101      	bne.n	800649c <LL_RCC_PLL_IsReady+0x18>
 8006498:	2301      	movs	r3, #1
 800649a:	e000      	b.n	800649e <LL_RCC_PLL_IsReady+0x1a>
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <LL_RCC_PLL_GetN>:
{
 80064a8:	b480      	push	{r7}
 80064aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80064ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	0a1b      	lsrs	r3, r3, #8
 80064b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <LL_RCC_PLL_GetR>:
{
 80064c2:	b480      	push	{r7}
 80064c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80064c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr

080064da <LL_RCC_PLL_GetDivider>:
{
 80064da:	b480      	push	{r7}
 80064dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80064de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr

080064f2 <LL_RCC_PLL_GetMainSource>:
{
 80064f2:	b480      	push	{r7}
 80064f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80064f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f003 0303 	and.w	r3, r3, #3
}
 8006500:	4618      	mov	r0, r3
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <LL_RCC_IsActiveFlag_HPRE>:
{
 800650a:	b480      	push	{r7}
 800650c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800650e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006518:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800651c:	d101      	bne.n	8006522 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800651e:	2301      	movs	r3, #1
 8006520:	e000      	b.n	8006524 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800652e:	b480      	push	{r7}
 8006530:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006536:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800653a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800653e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006542:	d101      	bne.n	8006548 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006544:	2301      	movs	r3, #1
 8006546:	e000      	b.n	800654a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8006554:	b480      	push	{r7}
 8006556:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800655c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006568:	d101      	bne.n	800656e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800656a:	2301      	movs	r3, #1
 800656c:	e000      	b.n	8006570 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	46bd      	mov	sp, r7
 8006574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006578:	4770      	bx	lr

0800657a <LL_RCC_IsActiveFlag_PPRE1>:
{
 800657a:	b480      	push	{r7}
 800657c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800657e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006588:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800658c:	d101      	bne.n	8006592 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800658e:	2301      	movs	r3, #1
 8006590:	e000      	b.n	8006594 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <LL_RCC_IsActiveFlag_PPRE2>:
{
 800659e:	b480      	push	{r7}
 80065a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80065a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065b0:	d101      	bne.n	80065b6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80065b2:	2301      	movs	r3, #1
 80065b4:	e000      	b.n	80065b8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
	...

080065c4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065c4:	b590      	push	{r4, r7, lr}
 80065c6:	b08d      	sub	sp, #52	; 0x34
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e363      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0320 	and.w	r3, r3, #32
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f000 808d 	beq.w	80066fe <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065e4:	f7ff fe89 	bl	80062fa <LL_RCC_GetSysClkSource>
 80065e8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065ea:	f7ff ff82 	bl	80064f2 <LL_RCC_PLL_GetMainSource>
 80065ee:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80065f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d005      	beq.n	8006602 <HAL_RCC_OscConfig+0x3e>
 80065f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f8:	2b0c      	cmp	r3, #12
 80065fa:	d147      	bne.n	800668c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d144      	bne.n	800668c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e347      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006612:	f7ff fe34 	bl	800627e <LL_RCC_MSI_GetRange>
 8006616:	4603      	mov	r3, r0
 8006618:	429c      	cmp	r4, r3
 800661a:	d914      	bls.n	8006646 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fd2f 	bl	8007084 <RCC_SetFlashLatencyFromMSIRange>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d001      	beq.n	8006630 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	e336      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006634:	4618      	mov	r0, r3
 8006636:	f7ff fe0e 	bl	8006256 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	4618      	mov	r0, r3
 8006640:	f7ff fe32 	bl	80062a8 <LL_RCC_MSI_SetCalibTrimming>
 8006644:	e013      	b.n	800666e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664a:	4618      	mov	r0, r3
 800664c:	f7ff fe03 	bl	8006256 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a1b      	ldr	r3, [r3, #32]
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff fe27 	bl	80062a8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	4618      	mov	r0, r3
 8006660:	f000 fd10 	bl	8007084 <RCC_SetFlashLatencyFromMSIRange>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d001      	beq.n	800666e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e317      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800666e:	f000 fcc9 	bl	8007004 <HAL_RCC_GetHCLKFreq>
 8006672:	4603      	mov	r3, r0
 8006674:	4aa4      	ldr	r2, [pc, #656]	; (8006908 <HAL_RCC_OscConfig+0x344>)
 8006676:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006678:	4ba4      	ldr	r3, [pc, #656]	; (800690c <HAL_RCC_OscConfig+0x348>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4618      	mov	r0, r3
 800667e:	f7fe fc17 	bl	8004eb0 <HAL_InitTick>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d039      	beq.n	80066fc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e308      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	69db      	ldr	r3, [r3, #28]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d01e      	beq.n	80066d2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006694:	f7ff fdb0 	bl	80061f8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006698:	f7fe fc58 	bl	8004f4c <HAL_GetTick>
 800669c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800669e:	e008      	b.n	80066b2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80066a0:	f7fe fc54 	bl	8004f4c <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d901      	bls.n	80066b2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e2f5      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80066b2:	f7ff fdbf 	bl	8006234 <LL_RCC_MSI_IsReady>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d0f1      	beq.n	80066a0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7ff fdc8 	bl	8006256 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7ff fdec 	bl	80062a8 <LL_RCC_MSI_SetCalibTrimming>
 80066d0:	e015      	b.n	80066fe <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80066d2:	f7ff fda0 	bl	8006216 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80066d6:	f7fe fc39 	bl	8004f4c <HAL_GetTick>
 80066da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80066dc:	e008      	b.n	80066f0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80066de:	f7fe fc35 	bl	8004f4c <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d901      	bls.n	80066f0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80066ec:	2303      	movs	r3, #3
 80066ee:	e2d6      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80066f0:	f7ff fda0 	bl	8006234 <LL_RCC_MSI_IsReady>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1f1      	bne.n	80066de <HAL_RCC_OscConfig+0x11a>
 80066fa:	e000      	b.n	80066fe <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80066fc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	d047      	beq.n	800679a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800670a:	f7ff fdf6 	bl	80062fa <LL_RCC_GetSysClkSource>
 800670e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006710:	f7ff feef 	bl	80064f2 <LL_RCC_PLL_GetMainSource>
 8006714:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	2b08      	cmp	r3, #8
 800671a:	d005      	beq.n	8006728 <HAL_RCC_OscConfig+0x164>
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	2b0c      	cmp	r3, #12
 8006720:	d108      	bne.n	8006734 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	2b03      	cmp	r3, #3
 8006726:	d105      	bne.n	8006734 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d134      	bne.n	800679a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e2b4      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800673c:	d102      	bne.n	8006744 <HAL_RCC_OscConfig+0x180>
 800673e:	f7ff fbdd 	bl	8005efc <LL_RCC_HSE_Enable>
 8006742:	e001      	b.n	8006748 <HAL_RCC_OscConfig+0x184>
 8006744:	f7ff fbe9 	bl	8005f1a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d012      	beq.n	8006776 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006750:	f7fe fbfc 	bl	8004f4c <HAL_GetTick>
 8006754:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8006756:	e008      	b.n	800676a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006758:	f7fe fbf8 	bl	8004f4c <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	2b64      	cmp	r3, #100	; 0x64
 8006764:	d901      	bls.n	800676a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e299      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800676a:	f7ff fbe5 	bl	8005f38 <LL_RCC_HSE_IsReady>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d0f1      	beq.n	8006758 <HAL_RCC_OscConfig+0x194>
 8006774:	e011      	b.n	800679a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006776:	f7fe fbe9 	bl	8004f4c <HAL_GetTick>
 800677a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800677c:	e008      	b.n	8006790 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800677e:	f7fe fbe5 	bl	8004f4c <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b64      	cmp	r3, #100	; 0x64
 800678a:	d901      	bls.n	8006790 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e286      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006790:	f7ff fbd2 	bl	8005f38 <LL_RCC_HSE_IsReady>
 8006794:	4603      	mov	r3, r0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1f1      	bne.n	800677e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0302 	and.w	r3, r3, #2
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d04c      	beq.n	8006840 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067a6:	f7ff fda8 	bl	80062fa <LL_RCC_GetSysClkSource>
 80067aa:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067ac:	f7ff fea1 	bl	80064f2 <LL_RCC_PLL_GetMainSource>
 80067b0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	2b04      	cmp	r3, #4
 80067b6:	d005      	beq.n	80067c4 <HAL_RCC_OscConfig+0x200>
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	2b0c      	cmp	r3, #12
 80067bc:	d10e      	bne.n	80067dc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d10b      	bne.n	80067dc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d101      	bne.n	80067d0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e266      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff fbf1 	bl	8005fbc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80067da:	e031      	b.n	8006840 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d019      	beq.n	8006818 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067e4:	f7ff fbba 	bl	8005f5c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e8:	f7fe fbb0 	bl	8004f4c <HAL_GetTick>
 80067ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80067ee:	e008      	b.n	8006802 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067f0:	f7fe fbac 	bl	8004f4c <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d901      	bls.n	8006802 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e24d      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8006802:	f7ff fbc9 	bl	8005f98 <LL_RCC_HSI_IsReady>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d0f1      	beq.n	80067f0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	4618      	mov	r0, r3
 8006812:	f7ff fbd3 	bl	8005fbc <LL_RCC_HSI_SetCalibTrimming>
 8006816:	e013      	b.n	8006840 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006818:	f7ff fbaf 	bl	8005f7a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800681c:	f7fe fb96 	bl	8004f4c <HAL_GetTick>
 8006820:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8006822:	e008      	b.n	8006836 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006824:	f7fe fb92 	bl	8004f4c <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	2b02      	cmp	r3, #2
 8006830:	d901      	bls.n	8006836 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e233      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8006836:	f7ff fbaf 	bl	8005f98 <LL_RCC_HSI_IsReady>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d1f1      	bne.n	8006824 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0308 	and.w	r3, r3, #8
 8006848:	2b00      	cmp	r3, #0
 800684a:	d106      	bne.n	800685a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 80a3 	beq.w	80069a0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d076      	beq.n	8006950 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0310 	and.w	r3, r3, #16
 800686a:	2b00      	cmp	r3, #0
 800686c:	d046      	beq.n	80068fc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800686e:	f7ff fc66 	bl	800613e <LL_RCC_LSI1_IsReady>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d113      	bne.n	80068a0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006878:	f7ff fc3f 	bl	80060fa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800687c:	f7fe fb66 	bl	8004f4c <HAL_GetTick>
 8006880:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006882:	e008      	b.n	8006896 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006884:	f7fe fb62 	bl	8004f4c <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	2b02      	cmp	r3, #2
 8006890:	d901      	bls.n	8006896 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e203      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8006896:	f7ff fc52 	bl	800613e <LL_RCC_LSI1_IsReady>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d0f1      	beq.n	8006884 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80068a0:	f7ff fc5f 	bl	8006162 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a4:	f7fe fb52 	bl	8004f4c <HAL_GetTick>
 80068a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80068aa:	e008      	b.n	80068be <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80068ac:	f7fe fb4e 	bl	8004f4c <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	2b03      	cmp	r3, #3
 80068b8:	d901      	bls.n	80068be <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e1ef      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80068be:	f7ff fc72 	bl	80061a6 <LL_RCC_LSI2_IsReady>
 80068c2:	4603      	mov	r3, r0
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d0f1      	beq.n	80068ac <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7ff fc7c 	bl	80061ca <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80068d2:	f7ff fc23 	bl	800611c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068d6:	f7fe fb39 	bl	8004f4c <HAL_GetTick>
 80068da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80068dc:	e008      	b.n	80068f0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80068de:	f7fe fb35 	bl	8004f4c <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d901      	bls.n	80068f0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e1d6      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80068f0:	f7ff fc25 	bl	800613e <LL_RCC_LSI1_IsReady>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1f1      	bne.n	80068de <HAL_RCC_OscConfig+0x31a>
 80068fa:	e051      	b.n	80069a0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80068fc:	f7ff fbfd 	bl	80060fa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006900:	f7fe fb24 	bl	8004f4c <HAL_GetTick>
 8006904:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006906:	e00c      	b.n	8006922 <HAL_RCC_OscConfig+0x35e>
 8006908:	20000020 	.word	0x20000020
 800690c:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006910:	f7fe fb1c 	bl	8004f4c <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	2b02      	cmp	r3, #2
 800691c:	d901      	bls.n	8006922 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e1bd      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8006922:	f7ff fc0c 	bl	800613e <LL_RCC_LSI1_IsReady>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d0f1      	beq.n	8006910 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800692c:	f7ff fc2a 	bl	8006184 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006930:	e008      	b.n	8006944 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006932:	f7fe fb0b 	bl	8004f4c <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	2b03      	cmp	r3, #3
 800693e:	d901      	bls.n	8006944 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006940:	2303      	movs	r3, #3
 8006942:	e1ac      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006944:	f7ff fc2f 	bl	80061a6 <LL_RCC_LSI2_IsReady>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d1f1      	bne.n	8006932 <HAL_RCC_OscConfig+0x36e>
 800694e:	e027      	b.n	80069a0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006950:	f7ff fc18 	bl	8006184 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006954:	f7fe fafa 	bl	8004f4c <HAL_GetTick>
 8006958:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800695a:	e008      	b.n	800696e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800695c:	f7fe faf6 	bl	8004f4c <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	2b03      	cmp	r3, #3
 8006968:	d901      	bls.n	800696e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e197      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800696e:	f7ff fc1a 	bl	80061a6 <LL_RCC_LSI2_IsReady>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1f1      	bne.n	800695c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006978:	f7ff fbd0 	bl	800611c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800697c:	f7fe fae6 	bl	8004f4c <HAL_GetTick>
 8006980:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006982:	e008      	b.n	8006996 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8006984:	f7fe fae2 	bl	8004f4c <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	2b02      	cmp	r3, #2
 8006990:	d901      	bls.n	8006996 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e183      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8006996:	f7ff fbd2 	bl	800613e <LL_RCC_LSI1_IsReady>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1f1      	bne.n	8006984 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0304 	and.w	r3, r3, #4
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d05b      	beq.n	8006a64 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069ac:	4ba7      	ldr	r3, [pc, #668]	; (8006c4c <HAL_RCC_OscConfig+0x688>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d114      	bne.n	80069e2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80069b8:	f7ff fa70 	bl	8005e9c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069bc:	f7fe fac6 	bl	8004f4c <HAL_GetTick>
 80069c0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069c2:	e008      	b.n	80069d6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069c4:	f7fe fac2 	bl	8004f4c <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d901      	bls.n	80069d6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80069d2:	2303      	movs	r3, #3
 80069d4:	e163      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80069d6:	4b9d      	ldr	r3, [pc, #628]	; (8006c4c <HAL_RCC_OscConfig+0x688>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d0f0      	beq.n	80069c4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d102      	bne.n	80069f0 <HAL_RCC_OscConfig+0x42c>
 80069ea:	f7ff fb30 	bl	800604e <LL_RCC_LSE_Enable>
 80069ee:	e00c      	b.n	8006a0a <HAL_RCC_OscConfig+0x446>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	2b05      	cmp	r3, #5
 80069f6:	d104      	bne.n	8006a02 <HAL_RCC_OscConfig+0x43e>
 80069f8:	f7ff fb4b 	bl	8006092 <LL_RCC_LSE_EnableBypass>
 80069fc:	f7ff fb27 	bl	800604e <LL_RCC_LSE_Enable>
 8006a00:	e003      	b.n	8006a0a <HAL_RCC_OscConfig+0x446>
 8006a02:	f7ff fb35 	bl	8006070 <LL_RCC_LSE_Disable>
 8006a06:	f7ff fb55 	bl	80060b4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d014      	beq.n	8006a3c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a12:	f7fe fa9b 	bl	8004f4c <HAL_GetTick>
 8006a16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006a18:	e00a      	b.n	8006a30 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a1a:	f7fe fa97 	bl	8004f4c <HAL_GetTick>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d901      	bls.n	8006a30 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e136      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006a30:	f7ff fb51 	bl	80060d6 <LL_RCC_LSE_IsReady>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d0ef      	beq.n	8006a1a <HAL_RCC_OscConfig+0x456>
 8006a3a:	e013      	b.n	8006a64 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a3c:	f7fe fa86 	bl	8004f4c <HAL_GetTick>
 8006a40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8006a42:	e00a      	b.n	8006a5a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a44:	f7fe fa82 	bl	8004f4c <HAL_GetTick>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d901      	bls.n	8006a5a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e121      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006a5a:	f7ff fb3c 	bl	80060d6 <LL_RCC_LSE_IsReady>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1ef      	bne.n	8006a44 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d02c      	beq.n	8006aca <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d014      	beq.n	8006aa2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006a78:	f7ff fab5 	bl	8005fe6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a7c:	f7fe fa66 	bl	8004f4c <HAL_GetTick>
 8006a80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006a82:	e008      	b.n	8006a96 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006a84:	f7fe fa62 	bl	8004f4c <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d901      	bls.n	8006a96 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e103      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8006a96:	f7ff fac8 	bl	800602a <LL_RCC_HSI48_IsReady>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d0f1      	beq.n	8006a84 <HAL_RCC_OscConfig+0x4c0>
 8006aa0:	e013      	b.n	8006aca <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006aa2:	f7ff fab1 	bl	8006008 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aa6:	f7fe fa51 	bl	8004f4c <HAL_GetTick>
 8006aaa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006aac:	e008      	b.n	8006ac0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006aae:	f7fe fa4d 	bl	8004f4c <HAL_GetTick>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	2b02      	cmp	r3, #2
 8006aba:	d901      	bls.n	8006ac0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e0ee      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006ac0:	f7ff fab3 	bl	800602a <LL_RCC_HSI48_IsReady>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1f1      	bne.n	8006aae <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 80e4 	beq.w	8006c9c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006ad4:	f7ff fc11 	bl	80062fa <LL_RCC_GetSysClkSource>
 8006ad8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8006ada:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	f040 80b4 	bne.w	8006c54 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f003 0203 	and.w	r2, r3, #3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d123      	bne.n	8006b42 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d11c      	bne.n	8006b42 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	0a1b      	lsrs	r3, r3, #8
 8006b0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d114      	bne.n	8006b42 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d10d      	bne.n	8006b42 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d106      	bne.n	8006b42 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d05d      	beq.n	8006bfe <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	2b0c      	cmp	r3, #12
 8006b46:	d058      	beq.n	8006bfa <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e0a1      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006b5a:	f7ff fc84 	bl	8006466 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006b5e:	f7fe f9f5 	bl	8004f4c <HAL_GetTick>
 8006b62:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b64:	e008      	b.n	8006b78 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b66:	f7fe f9f1 	bl	8004f4c <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d901      	bls.n	8006b78 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8006b74:	2303      	movs	r3, #3
 8006b76:	e092      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1ef      	bne.n	8006b66 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006b8a:	68da      	ldr	r2, [r3, #12]
 8006b8c:	4b30      	ldr	r3, [pc, #192]	; (8006c50 <HAL_RCC_OscConfig+0x68c>)
 8006b8e:	4013      	ands	r3, r2
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006b98:	4311      	orrs	r1, r2
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006b9e:	0212      	lsls	r2, r2, #8
 8006ba0:	4311      	orrs	r1, r2
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006ba6:	4311      	orrs	r1, r2
 8006ba8:	687a      	ldr	r2, [r7, #4]
 8006baa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006bac:	4311      	orrs	r1, r2
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006bbc:	f7ff fc44 	bl	8006448 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006bd0:	f7fe f9bc 	bl	8004f4c <HAL_GetTick>
 8006bd4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bd6:	e008      	b.n	8006bea <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bd8:	f7fe f9b8 	bl	8004f4c <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	d901      	bls.n	8006bea <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e059      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d0ef      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006bf8:	e050      	b.n	8006c9c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e04f      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d147      	bne.n	8006c9c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006c0c:	f7ff fc1c 	bl	8006448 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006c20:	f7fe f994 	bl	8004f4c <HAL_GetTick>
 8006c24:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c26:	e008      	b.n	8006c3a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c28:	f7fe f990 	bl	8004f4c <HAL_GetTick>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	2b02      	cmp	r3, #2
 8006c34:	d901      	bls.n	8006c3a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e031      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d0ef      	beq.n	8006c28 <HAL_RCC_OscConfig+0x664>
 8006c48:	e028      	b.n	8006c9c <HAL_RCC_OscConfig+0x6d8>
 8006c4a:	bf00      	nop
 8006c4c:	58000400 	.word	0x58000400
 8006c50:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	2b0c      	cmp	r3, #12
 8006c58:	d01e      	beq.n	8006c98 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c5a:	f7ff fc04 	bl	8006466 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c5e:	f7fe f975 	bl	8004f4c <HAL_GetTick>
 8006c62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c64:	e008      	b.n	8006c78 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c66:	f7fe f971 	bl	8004f4c <HAL_GetTick>
 8006c6a:	4602      	mov	r2, r0
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d901      	bls.n	8006c78 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8006c74:	2303      	movs	r3, #3
 8006c76:	e012      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1ef      	bne.n	8006c66 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8006c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006c8a:	68da      	ldr	r2, [r3, #12]
 8006c8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006c90:	4b05      	ldr	r3, [pc, #20]	; (8006ca8 <HAL_RCC_OscConfig+0x6e4>)
 8006c92:	4013      	ands	r3, r2
 8006c94:	60cb      	str	r3, [r1, #12]
 8006c96:	e001      	b.n	8006c9c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e000      	b.n	8006c9e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3734      	adds	r7, #52	; 0x34
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd90      	pop	{r4, r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	eefefffc 	.word	0xeefefffc

08006cac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e12d      	b.n	8006f1c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006cc0:	4b98      	ldr	r3, [pc, #608]	; (8006f24 <HAL_RCC_ClockConfig+0x278>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0307 	and.w	r3, r3, #7
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d91b      	bls.n	8006d06 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cce:	4b95      	ldr	r3, [pc, #596]	; (8006f24 <HAL_RCC_ClockConfig+0x278>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f023 0207 	bic.w	r2, r3, #7
 8006cd6:	4993      	ldr	r1, [pc, #588]	; (8006f24 <HAL_RCC_ClockConfig+0x278>)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cde:	f7fe f935 	bl	8004f4c <HAL_GetTick>
 8006ce2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ce4:	e008      	b.n	8006cf8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006ce6:	f7fe f931 	bl	8004f4c <HAL_GetTick>
 8006cea:	4602      	mov	r2, r0
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	1ad3      	subs	r3, r2, r3
 8006cf0:	2b02      	cmp	r3, #2
 8006cf2:	d901      	bls.n	8006cf8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e111      	b.n	8006f1c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cf8:	4b8a      	ldr	r3, [pc, #552]	; (8006f24 <HAL_RCC_ClockConfig+0x278>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0307 	and.w	r3, r3, #7
 8006d00:	683a      	ldr	r2, [r7, #0]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d1ef      	bne.n	8006ce6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d016      	beq.n	8006d40 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	689b      	ldr	r3, [r3, #8]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7ff fafb 	bl	8006312 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006d1c:	f7fe f916 	bl	8004f4c <HAL_GetTick>
 8006d20:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006d22:	e008      	b.n	8006d36 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006d24:	f7fe f912 	bl	8004f4c <HAL_GetTick>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d901      	bls.n	8006d36 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e0f2      	b.n	8006f1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006d36:	f7ff fbe8 	bl	800650a <LL_RCC_IsActiveFlag_HPRE>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0f1      	beq.n	8006d24 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0320 	and.w	r3, r3, #32
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d016      	beq.n	8006d7a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7ff faf2 	bl	800633a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006d56:	f7fe f8f9 	bl	8004f4c <HAL_GetTick>
 8006d5a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006d5c:	e008      	b.n	8006d70 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006d5e:	f7fe f8f5 	bl	8004f4c <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d901      	bls.n	8006d70 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e0d5      	b.n	8006f1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006d70:	f7ff fbdd 	bl	800652e <LL_RCC_IsActiveFlag_C2HPRE>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d0f1      	beq.n	8006d5e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d016      	beq.n	8006db4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7ff faeb 	bl	8006366 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006d90:	f7fe f8dc 	bl	8004f4c <HAL_GetTick>
 8006d94:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006d96:	e008      	b.n	8006daa <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006d98:	f7fe f8d8 	bl	8004f4c <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e0b8      	b.n	8006f1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006daa:	f7ff fbd3 	bl	8006554 <LL_RCC_IsActiveFlag_SHDHPRE>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d0f1      	beq.n	8006d98 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0304 	and.w	r3, r3, #4
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d016      	beq.n	8006dee <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7ff fae5 	bl	8006394 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006dca:	f7fe f8bf 	bl	8004f4c <HAL_GetTick>
 8006dce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006dd0:	e008      	b.n	8006de4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006dd2:	f7fe f8bb 	bl	8004f4c <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d901      	bls.n	8006de4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e09b      	b.n	8006f1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006de4:	f7ff fbc9 	bl	800657a <LL_RCC_IsActiveFlag_PPRE1>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d0f1      	beq.n	8006dd2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 0308 	and.w	r3, r3, #8
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d017      	beq.n	8006e2a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	00db      	lsls	r3, r3, #3
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7ff fadb 	bl	80063bc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006e06:	f7fe f8a1 	bl	8004f4c <HAL_GetTick>
 8006e0a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006e0c:	e008      	b.n	8006e20 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006e0e:	f7fe f89d 	bl	8004f4c <HAL_GetTick>
 8006e12:	4602      	mov	r2, r0
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	2b02      	cmp	r3, #2
 8006e1a:	d901      	bls.n	8006e20 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e07d      	b.n	8006f1c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006e20:	f7ff fbbd 	bl	800659e <LL_RCC_IsActiveFlag_PPRE2>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d0f1      	beq.n	8006e0e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d043      	beq.n	8006ebe <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d106      	bne.n	8006e4c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006e3e:	f7ff f87b 	bl	8005f38 <LL_RCC_HSE_IsReady>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d11e      	bne.n	8006e86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e067      	b.n	8006f1c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	2b03      	cmp	r3, #3
 8006e52:	d106      	bne.n	8006e62 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006e54:	f7ff fb16 	bl	8006484 <LL_RCC_PLL_IsReady>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d113      	bne.n	8006e86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e05c      	b.n	8006f1c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d106      	bne.n	8006e78 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006e6a:	f7ff f9e3 	bl	8006234 <LL_RCC_MSI_IsReady>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d108      	bne.n	8006e86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e051      	b.n	8006f1c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006e78:	f7ff f88e 	bl	8005f98 <LL_RCC_HSI_IsReady>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e04a      	b.n	8006f1c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7ff fa21 	bl	80062d2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e90:	f7fe f85c 	bl	8004f4c <HAL_GetTick>
 8006e94:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e96:	e00a      	b.n	8006eae <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e98:	f7fe f858 	bl	8004f4c <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e036      	b.n	8006f1c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eae:	f7ff fa24 	bl	80062fa <LL_RCC_GetSysClkSource>
 8006eb2:	4602      	mov	r2, r0
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d1ec      	bne.n	8006e98 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ebe:	4b19      	ldr	r3, [pc, #100]	; (8006f24 <HAL_RCC_ClockConfig+0x278>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0307 	and.w	r3, r3, #7
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d21b      	bcs.n	8006f04 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ecc:	4b15      	ldr	r3, [pc, #84]	; (8006f24 <HAL_RCC_ClockConfig+0x278>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f023 0207 	bic.w	r2, r3, #7
 8006ed4:	4913      	ldr	r1, [pc, #76]	; (8006f24 <HAL_RCC_ClockConfig+0x278>)
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006edc:	f7fe f836 	bl	8004f4c <HAL_GetTick>
 8006ee0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ee2:	e008      	b.n	8006ef6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006ee4:	f7fe f832 	bl	8004f4c <HAL_GetTick>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d901      	bls.n	8006ef6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e012      	b.n	8006f1c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ef6:	4b0b      	ldr	r3, [pc, #44]	; (8006f24 <HAL_RCC_ClockConfig+0x278>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f003 0307 	and.w	r3, r3, #7
 8006efe:	683a      	ldr	r2, [r7, #0]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d1ef      	bne.n	8006ee4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006f04:	f000 f87e 	bl	8007004 <HAL_RCC_GetHCLKFreq>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	4a07      	ldr	r2, [pc, #28]	; (8006f28 <HAL_RCC_ClockConfig+0x27c>)
 8006f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006f0e:	f7fe f829 	bl	8004f64 <HAL_GetTickPrio>
 8006f12:	4603      	mov	r3, r0
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7fd ffcb 	bl	8004eb0 <HAL_InitTick>
 8006f1a:	4603      	mov	r3, r0
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	58004000 	.word	0x58004000
 8006f28:	20000020 	.word	0x20000020

08006f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f2c:	b590      	push	{r4, r7, lr}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f32:	f7ff f9e2 	bl	80062fa <LL_RCC_GetSysClkSource>
 8006f36:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10a      	bne.n	8006f54 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006f3e:	f7ff f99e 	bl	800627e <LL_RCC_MSI_GetRange>
 8006f42:	4603      	mov	r3, r0
 8006f44:	091b      	lsrs	r3, r3, #4
 8006f46:	f003 030f 	and.w	r3, r3, #15
 8006f4a:	4a2b      	ldr	r2, [pc, #172]	; (8006ff8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f50:	60fb      	str	r3, [r7, #12]
 8006f52:	e04b      	b.n	8006fec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b04      	cmp	r3, #4
 8006f58:	d102      	bne.n	8006f60 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006f5a:	4b28      	ldr	r3, [pc, #160]	; (8006ffc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006f5c:	60fb      	str	r3, [r7, #12]
 8006f5e:	e045      	b.n	8006fec <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b08      	cmp	r3, #8
 8006f64:	d10a      	bne.n	8006f7c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006f66:	f7fe ffb7 	bl	8005ed8 <LL_RCC_HSE_IsEnabledDiv2>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d102      	bne.n	8006f76 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006f70:	4b22      	ldr	r3, [pc, #136]	; (8006ffc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006f72:	60fb      	str	r3, [r7, #12]
 8006f74:	e03a      	b.n	8006fec <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006f76:	4b22      	ldr	r3, [pc, #136]	; (8007000 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	e037      	b.n	8006fec <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006f7c:	f7ff fab9 	bl	80064f2 <LL_RCC_PLL_GetMainSource>
 8006f80:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d003      	beq.n	8006f90 <HAL_RCC_GetSysClockFreq+0x64>
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	2b03      	cmp	r3, #3
 8006f8c:	d003      	beq.n	8006f96 <HAL_RCC_GetSysClockFreq+0x6a>
 8006f8e:	e00d      	b.n	8006fac <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006f90:	4b1a      	ldr	r3, [pc, #104]	; (8006ffc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006f92:	60bb      	str	r3, [r7, #8]
        break;
 8006f94:	e015      	b.n	8006fc2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006f96:	f7fe ff9f 	bl	8005ed8 <LL_RCC_HSE_IsEnabledDiv2>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d102      	bne.n	8006fa6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006fa0:	4b16      	ldr	r3, [pc, #88]	; (8006ffc <HAL_RCC_GetSysClockFreq+0xd0>)
 8006fa2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006fa4:	e00d      	b.n	8006fc2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006fa6:	4b16      	ldr	r3, [pc, #88]	; (8007000 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006fa8:	60bb      	str	r3, [r7, #8]
        break;
 8006faa:	e00a      	b.n	8006fc2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006fac:	f7ff f967 	bl	800627e <LL_RCC_MSI_GetRange>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	091b      	lsrs	r3, r3, #4
 8006fb4:	f003 030f 	and.w	r3, r3, #15
 8006fb8:	4a0f      	ldr	r2, [pc, #60]	; (8006ff8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fbe:	60bb      	str	r3, [r7, #8]
        break;
 8006fc0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8006fc2:	f7ff fa71 	bl	80064a8 <LL_RCC_PLL_GetN>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	fb03 f402 	mul.w	r4, r3, r2
 8006fce:	f7ff fa84 	bl	80064da <LL_RCC_PLL_GetDivider>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	091b      	lsrs	r3, r3, #4
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	fbb4 f4f3 	udiv	r4, r4, r3
 8006fdc:	f7ff fa71 	bl	80064c2 <LL_RCC_PLL_GetR>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	0f5b      	lsrs	r3, r3, #29
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	fbb4 f3f3 	udiv	r3, r4, r3
 8006fea:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006fec:	68fb      	ldr	r3, [r7, #12]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3714      	adds	r7, #20
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd90      	pop	{r4, r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	08010e4c 	.word	0x08010e4c
 8006ffc:	00f42400 	.word	0x00f42400
 8007000:	01e84800 	.word	0x01e84800

08007004 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007004:	b598      	push	{r3, r4, r7, lr}
 8007006:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007008:	f7ff ff90 	bl	8006f2c <HAL_RCC_GetSysClockFreq>
 800700c:	4604      	mov	r4, r0
 800700e:	f7ff f9e9 	bl	80063e4 <LL_RCC_GetAHBPrescaler>
 8007012:	4603      	mov	r3, r0
 8007014:	091b      	lsrs	r3, r3, #4
 8007016:	f003 030f 	and.w	r3, r3, #15
 800701a:	4a03      	ldr	r2, [pc, #12]	; (8007028 <HAL_RCC_GetHCLKFreq+0x24>)
 800701c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007020:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007024:	4618      	mov	r0, r3
 8007026:	bd98      	pop	{r3, r4, r7, pc}
 8007028:	08010dec 	.word	0x08010dec

0800702c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800702c:	b598      	push	{r3, r4, r7, lr}
 800702e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007030:	f7ff ffe8 	bl	8007004 <HAL_RCC_GetHCLKFreq>
 8007034:	4604      	mov	r4, r0
 8007036:	f7ff f9ef 	bl	8006418 <LL_RCC_GetAPB1Prescaler>
 800703a:	4603      	mov	r3, r0
 800703c:	0a1b      	lsrs	r3, r3, #8
 800703e:	f003 0307 	and.w	r3, r3, #7
 8007042:	4a04      	ldr	r2, [pc, #16]	; (8007054 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007048:	f003 031f 	and.w	r3, r3, #31
 800704c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007050:	4618      	mov	r0, r3
 8007052:	bd98      	pop	{r3, r4, r7, pc}
 8007054:	08010e2c 	.word	0x08010e2c

08007058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007058:	b598      	push	{r3, r4, r7, lr}
 800705a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800705c:	f7ff ffd2 	bl	8007004 <HAL_RCC_GetHCLKFreq>
 8007060:	4604      	mov	r4, r0
 8007062:	f7ff f9e5 	bl	8006430 <LL_RCC_GetAPB2Prescaler>
 8007066:	4603      	mov	r3, r0
 8007068:	0adb      	lsrs	r3, r3, #11
 800706a:	f003 0307 	and.w	r3, r3, #7
 800706e:	4a04      	ldr	r2, [pc, #16]	; (8007080 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007074:	f003 031f 	and.w	r3, r3, #31
 8007078:	fa24 f303 	lsr.w	r3, r4, r3
}
 800707c:	4618      	mov	r0, r3
 800707e:	bd98      	pop	{r3, r4, r7, pc}
 8007080:	08010e2c 	.word	0x08010e2c

08007084 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007084:	b590      	push	{r4, r7, lr}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2bb0      	cmp	r3, #176	; 0xb0
 8007090:	d903      	bls.n	800709a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8007092:	4b15      	ldr	r3, [pc, #84]	; (80070e8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007096:	60fb      	str	r3, [r7, #12]
 8007098:	e007      	b.n	80070aa <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	091b      	lsrs	r3, r3, #4
 800709e:	f003 030f 	and.w	r3, r3, #15
 80070a2:	4a11      	ldr	r2, [pc, #68]	; (80070e8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80070a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070a8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80070aa:	f7ff f9a7 	bl	80063fc <LL_RCC_GetAHB4Prescaler>
 80070ae:	4603      	mov	r3, r0
 80070b0:	091b      	lsrs	r3, r3, #4
 80070b2:	f003 030f 	and.w	r3, r3, #15
 80070b6:	4a0d      	ldr	r2, [pc, #52]	; (80070ec <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80070b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	4a0a      	ldr	r2, [pc, #40]	; (80070f0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80070c8:	fba2 2303 	umull	r2, r3, r2, r3
 80070cc:	0c9c      	lsrs	r4, r3, #18
 80070ce:	f7fe fef5 	bl	8005ebc <HAL_PWREx_GetVoltageRange>
 80070d2:	4603      	mov	r3, r0
 80070d4:	4619      	mov	r1, r3
 80070d6:	4620      	mov	r0, r4
 80070d8:	f000 f80c 	bl	80070f4 <RCC_SetFlashLatency>
 80070dc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd90      	pop	{r4, r7, pc}
 80070e6:	bf00      	nop
 80070e8:	08010e4c 	.word	0x08010e4c
 80070ec:	08010dec 	.word	0x08010dec
 80070f0:	431bde83 	.word	0x431bde83

080070f4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80070f4:	b590      	push	{r4, r7, lr}
 80070f6:	b093      	sub	sp, #76	; 0x4c
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80070fe:	4b37      	ldr	r3, [pc, #220]	; (80071dc <RCC_SetFlashLatency+0xe8>)
 8007100:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8007104:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007106:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800710a:	4a35      	ldr	r2, [pc, #212]	; (80071e0 <RCC_SetFlashLatency+0xec>)
 800710c:	f107 031c 	add.w	r3, r7, #28
 8007110:	ca07      	ldmia	r2, {r0, r1, r2}
 8007112:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8007116:	4b33      	ldr	r3, [pc, #204]	; (80071e4 <RCC_SetFlashLatency+0xf0>)
 8007118:	f107 040c 	add.w	r4, r7, #12
 800711c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800711e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007122:	2300      	movs	r3, #0
 8007124:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800712c:	d11a      	bne.n	8007164 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800712e:	2300      	movs	r3, #0
 8007130:	643b      	str	r3, [r7, #64]	; 0x40
 8007132:	e013      	b.n	800715c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	3348      	adds	r3, #72	; 0x48
 800713a:	443b      	add	r3, r7
 800713c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	429a      	cmp	r2, r3
 8007144:	d807      	bhi.n	8007156 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	3348      	adds	r3, #72	; 0x48
 800714c:	443b      	add	r3, r7
 800714e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007152:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8007154:	e020      	b.n	8007198 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007158:	3301      	adds	r3, #1
 800715a:	643b      	str	r3, [r7, #64]	; 0x40
 800715c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800715e:	2b03      	cmp	r3, #3
 8007160:	d9e8      	bls.n	8007134 <RCC_SetFlashLatency+0x40>
 8007162:	e019      	b.n	8007198 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007164:	2300      	movs	r3, #0
 8007166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007168:	e013      	b.n	8007192 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800716a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	3348      	adds	r3, #72	; 0x48
 8007170:	443b      	add	r3, r7
 8007172:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	429a      	cmp	r2, r3
 800717a:	d807      	bhi.n	800718c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800717c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	3348      	adds	r3, #72	; 0x48
 8007182:	443b      	add	r3, r7
 8007184:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007188:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800718a:	e005      	b.n	8007198 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800718c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800718e:	3301      	adds	r3, #1
 8007190:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007194:	2b02      	cmp	r3, #2
 8007196:	d9e8      	bls.n	800716a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8007198:	4b13      	ldr	r3, [pc, #76]	; (80071e8 <RCC_SetFlashLatency+0xf4>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f023 0207 	bic.w	r2, r3, #7
 80071a0:	4911      	ldr	r1, [pc, #68]	; (80071e8 <RCC_SetFlashLatency+0xf4>)
 80071a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071a4:	4313      	orrs	r3, r2
 80071a6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80071a8:	f7fd fed0 	bl	8004f4c <HAL_GetTick>
 80071ac:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80071ae:	e008      	b.n	80071c2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80071b0:	f7fd fecc 	bl	8004f4c <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d901      	bls.n	80071c2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e007      	b.n	80071d2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80071c2:	4b09      	ldr	r3, [pc, #36]	; (80071e8 <RCC_SetFlashLatency+0xf4>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0307 	and.w	r3, r3, #7
 80071ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d1ef      	bne.n	80071b0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80071d0:	2300      	movs	r3, #0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	374c      	adds	r7, #76	; 0x4c
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd90      	pop	{r4, r7, pc}
 80071da:	bf00      	nop
 80071dc:	08010c54 	.word	0x08010c54
 80071e0:	08010c64 	.word	0x08010c64
 80071e4:	08010c70 	.word	0x08010c70
 80071e8:	58004000 	.word	0x58004000

080071ec <LL_RCC_LSE_IsEnabled>:
{
 80071ec:	b480      	push	{r7}
 80071ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80071f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f8:	f003 0301 	and.w	r3, r3, #1
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d101      	bne.n	8007204 <LL_RCC_LSE_IsEnabled+0x18>
 8007200:	2301      	movs	r3, #1
 8007202:	e000      	b.n	8007206 <LL_RCC_LSE_IsEnabled+0x1a>
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <LL_RCC_LSE_IsReady>:
{
 8007210:	b480      	push	{r7}
 8007212:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800721c:	f003 0302 	and.w	r3, r3, #2
 8007220:	2b02      	cmp	r3, #2
 8007222:	d101      	bne.n	8007228 <LL_RCC_LSE_IsReady+0x18>
 8007224:	2301      	movs	r3, #1
 8007226:	e000      	b.n	800722a <LL_RCC_LSE_IsReady+0x1a>
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <LL_RCC_SetRFWKPClockSource>:
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800723c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007240:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007244:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007248:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4313      	orrs	r3, r2
 8007250:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <LL_RCC_SetSMPSClockSource>:
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800726c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726e:	f023 0203 	bic.w	r2, r3, #3
 8007272:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4313      	orrs	r3, r2
 800727a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <LL_RCC_SetSMPSPrescaler>:
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007296:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800729a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80072a4:	bf00      	nop
 80072a6:	370c      	adds	r7, #12
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <LL_RCC_SetUSARTClockSource>:
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80072b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072c0:	f023 0203 	bic.w	r2, r3, #3
 80072c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80072d0:	bf00      	nop
 80072d2:	370c      	adds	r7, #12
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <LL_RCC_SetLPUARTClockSource>:
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80072e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80072f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <LL_RCC_SetI2CClockSource>:
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007310:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007314:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	091b      	lsrs	r3, r3, #4
 800731c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007320:	43db      	mvns	r3, r3
 8007322:	401a      	ands	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	011b      	lsls	r3, r3, #4
 8007328:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800732c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007330:	4313      	orrs	r3, r2
 8007332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007336:	bf00      	nop
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <LL_RCC_SetLPTIMClockSource>:
{
 8007342:	b480      	push	{r7}
 8007344:	b083      	sub	sp, #12
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800734a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800734e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	0c1b      	lsrs	r3, r3, #16
 8007356:	041b      	lsls	r3, r3, #16
 8007358:	43db      	mvns	r3, r3
 800735a:	401a      	ands	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	041b      	lsls	r3, r3, #16
 8007360:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007364:	4313      	orrs	r3, r2
 8007366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800736a:	bf00      	nop
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <LL_RCC_SetSAIClockSource>:
{
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800737e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007386:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800738a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4313      	orrs	r3, r2
 8007392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007396:	bf00      	nop
 8007398:	370c      	adds	r7, #12
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <LL_RCC_SetRNGClockSource>:
{
 80073a2:	b480      	push	{r7}
 80073a4:	b083      	sub	sp, #12
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80073aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80073b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4313      	orrs	r3, r2
 80073be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80073c2:	bf00      	nop
 80073c4:	370c      	adds	r7, #12
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr

080073ce <LL_RCC_SetCLK48ClockSource>:
{
 80073ce:	b480      	push	{r7}
 80073d0:	b083      	sub	sp, #12
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80073d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80073e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80073ee:	bf00      	nop
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <LL_RCC_SetUSBClockSource>:
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b082      	sub	sp, #8
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7ff ffe3 	bl	80073ce <LL_RCC_SetCLK48ClockSource>
}
 8007408:	bf00      	nop
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <LL_RCC_SetADCClockSource>:
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800741c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007420:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007424:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4313      	orrs	r3, r2
 800742c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <LL_RCC_SetRTCClockSource>:
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800744c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007450:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4313      	orrs	r3, r2
 8007458:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <LL_RCC_GetRTCClockSource>:
{
 8007468:	b480      	push	{r7}
 800746a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800746c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007474:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007478:	4618      	mov	r0, r3
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <LL_RCC_ForceBackupDomainReset>:
{
 8007482:	b480      	push	{r7}
 8007484:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800748a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800748e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007496:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800749a:	bf00      	nop
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <LL_RCC_ReleaseBackupDomainReset>:
{
 80074a4:	b480      	push	{r7}
 80074a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80074a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80074bc:	bf00      	nop
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <LL_RCC_PLLSAI1_Enable>:
{
 80074c6:	b480      	push	{r7}
 80074c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80074ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074d8:	6013      	str	r3, [r2, #0]
}
 80074da:	bf00      	nop
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <LL_RCC_PLLSAI1_Disable>:
{
 80074e4:	b480      	push	{r7}
 80074e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80074e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80074f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074f6:	6013      	str	r3, [r2, #0]
}
 80074f8:	bf00      	nop
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <LL_RCC_PLLSAI1_IsReady>:
{
 8007502:	b480      	push	{r7}
 8007504:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007514:	d101      	bne.n	800751a <LL_RCC_PLLSAI1_IsReady+0x18>
 8007516:	2301      	movs	r3, #1
 8007518:	e000      	b.n	800751c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b088      	sub	sp, #32
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800752e:	2300      	movs	r3, #0
 8007530:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007532:	2300      	movs	r3, #0
 8007534:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800753e:	2b00      	cmp	r3, #0
 8007540:	d034      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007546:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800754a:	d021      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800754c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007550:	d81b      	bhi.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007552:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007556:	d01d      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007558:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800755c:	d815      	bhi.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800755e:	2b00      	cmp	r3, #0
 8007560:	d00b      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007562:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007566:	d110      	bne.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007576:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007578:	e00d      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	3304      	adds	r3, #4
 800757e:	4618      	mov	r0, r3
 8007580:	f000 f947 	bl	8007812 <RCCEx_PLLSAI1_ConfigNP>
 8007584:	4603      	mov	r3, r0
 8007586:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007588:	e005      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	77fb      	strb	r3, [r7, #31]
        break;
 800758e:	e002      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007590:	bf00      	nop
 8007592:	e000      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007596:	7ffb      	ldrb	r3, [r7, #31]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d105      	bne.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7ff fee8 	bl	8007376 <LL_RCC_SetSAIClockSource>
 80075a6:	e001      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a8:	7ffb      	ldrb	r3, [r7, #31]
 80075aa:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d046      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80075b8:	f7ff ff56 	bl	8007468 <LL_RCC_GetRTCClockSource>
 80075bc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c2:	69ba      	ldr	r2, [r7, #24]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d03c      	beq.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80075c8:	f7fe fc68 	bl	8005e9c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d105      	bne.n	80075de <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7ff ff30 	bl	800743c <LL_RCC_SetRTCClockSource>
 80075dc:	e02e      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80075de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80075e8:	f7ff ff4b 	bl	8007482 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80075ec:	f7ff ff5a 	bl	80074a4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	4313      	orrs	r3, r2
 80075fc:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80075fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007608:	f7ff fdf0 	bl	80071ec <LL_RCC_LSE_IsEnabled>
 800760c:	4603      	mov	r3, r0
 800760e:	2b01      	cmp	r3, #1
 8007610:	d114      	bne.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007612:	f7fd fc9b 	bl	8004f4c <HAL_GetTick>
 8007616:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007618:	e00b      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800761a:	f7fd fc97 	bl	8004f4c <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	f241 3288 	movw	r2, #5000	; 0x1388
 8007628:	4293      	cmp	r3, r2
 800762a:	d902      	bls.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	77fb      	strb	r3, [r7, #31]
              break;
 8007630:	e004      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007632:	f7ff fded 	bl	8007210 <LL_RCC_LSE_IsReady>
 8007636:	4603      	mov	r3, r0
 8007638:	2b01      	cmp	r3, #1
 800763a:	d1ee      	bne.n	800761a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800763c:	7ffb      	ldrb	r3, [r7, #31]
 800763e:	77bb      	strb	r3, [r7, #30]
 8007640:	e001      	b.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007642:	7ffb      	ldrb	r3, [r7, #31]
 8007644:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	2b00      	cmp	r3, #0
 8007650:	d004      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	4618      	mov	r0, r3
 8007658:	f7ff fe2a 	bl	80072b0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0302 	and.w	r3, r3, #2
 8007664:	2b00      	cmp	r3, #0
 8007666:	d004      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	69db      	ldr	r3, [r3, #28]
 800766c:	4618      	mov	r0, r3
 800766e:	f7ff fe35 	bl	80072dc <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0310 	and.w	r3, r3, #16
 800767a:	2b00      	cmp	r3, #0
 800767c:	d004      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007682:	4618      	mov	r0, r3
 8007684:	f7ff fe5d 	bl	8007342 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0320 	and.w	r3, r3, #32
 8007690:	2b00      	cmp	r3, #0
 8007692:	d004      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007698:	4618      	mov	r0, r3
 800769a:	f7ff fe52 	bl	8007342 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 0304 	and.w	r3, r3, #4
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d004      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7ff fe2a 	bl	8007308 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0308 	and.w	r3, r3, #8
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d004      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c4:	4618      	mov	r0, r3
 80076c6:	f7ff fe1f 	bl	8007308 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d022      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076da:	4618      	mov	r0, r3
 80076dc:	f7ff fe8d 	bl	80073fa <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076e8:	d107      	bne.n	80076fa <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80076ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80076f8:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007702:	d10b      	bne.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	3304      	adds	r3, #4
 8007708:	4618      	mov	r0, r3
 800770a:	f000 f8dd 	bl	80078c8 <RCCEx_PLLSAI1_ConfigNQ>
 800770e:	4603      	mov	r3, r0
 8007710:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8007712:	7ffb      	ldrb	r3, [r7, #31]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d001      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8007718:	7ffb      	ldrb	r3, [r7, #31]
 800771a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007724:	2b00      	cmp	r3, #0
 8007726:	d02b      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007730:	d008      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007736:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800773a:	d003      	beq.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007740:	2b00      	cmp	r3, #0
 8007742:	d105      	bne.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007748:	4618      	mov	r0, r3
 800774a:	f7ff fe2a 	bl	80073a2 <LL_RCC_SetRNGClockSource>
 800774e:	e00a      	b.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007758:	60fb      	str	r3, [r7, #12]
 800775a:	2000      	movs	r0, #0
 800775c:	f7ff fe21 	bl	80073a2 <LL_RCC_SetRNGClockSource>
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f7ff fe34 	bl	80073ce <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800776e:	d107      	bne.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800777a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800777e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007788:	2b00      	cmp	r3, #0
 800778a:	d022      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007790:	4618      	mov	r0, r3
 8007792:	f7ff fe3d 	bl	8007410 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800779a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800779e:	d107      	bne.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80077a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077ae:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077b8:	d10b      	bne.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	3304      	adds	r3, #4
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 f8dd 	bl	800797e <RCCEx_PLLSAI1_ConfigNR>
 80077c4:	4603      	mov	r3, r0
 80077c6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80077c8:	7ffb      	ldrb	r3, [r7, #31]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d001      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80077ce:	7ffb      	ldrb	r3, [r7, #31]
 80077d0:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d004      	beq.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7ff fd26 	bl	8007234 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d009      	beq.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7ff fd45 	bl	8007288 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007802:	4618      	mov	r0, r3
 8007804:	f7ff fd2c 	bl	8007260 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8007808:	7fbb      	ldrb	r3, [r7, #30]
}
 800780a:	4618      	mov	r0, r3
 800780c:	3720      	adds	r7, #32
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800781a:	2300      	movs	r3, #0
 800781c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800781e:	f7ff fe61 	bl	80074e4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007822:	f7fd fb93 	bl	8004f4c <HAL_GetTick>
 8007826:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007828:	e009      	b.n	800783e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800782a:	f7fd fb8f 	bl	8004f4c <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	2b02      	cmp	r3, #2
 8007836:	d902      	bls.n	800783e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	73fb      	strb	r3, [r7, #15]
      break;
 800783c:	e004      	b.n	8007848 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800783e:	f7ff fe60 	bl	8007502 <LL_RCC_PLLSAI1_IsReady>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1f0      	bne.n	800782a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007848:	7bfb      	ldrb	r3, [r7, #15]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d137      	bne.n	80078be <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800784e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	021b      	lsls	r3, r3, #8
 800785e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007862:	4313      	orrs	r3, r2
 8007864:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8007866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007878:	4313      	orrs	r3, r2
 800787a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800787c:	f7ff fe23 	bl	80074c6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007880:	f7fd fb64 	bl	8004f4c <HAL_GetTick>
 8007884:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007886:	e009      	b.n	800789c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007888:	f7fd fb60 	bl	8004f4c <HAL_GetTick>
 800788c:	4602      	mov	r2, r0
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	2b02      	cmp	r3, #2
 8007894:	d902      	bls.n	800789c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	73fb      	strb	r3, [r7, #15]
        break;
 800789a:	e004      	b.n	80078a6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800789c:	f7ff fe31 	bl	8007502 <LL_RCC_PLLSAI1_IsReady>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d1f0      	bne.n	8007888 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d108      	bne.n	80078be <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80078ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078b0:	691a      	ldr	r2, [r3, #16]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078ba:	4313      	orrs	r3, r2
 80078bc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80078be:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3710      	adds	r7, #16
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078d0:	2300      	movs	r3, #0
 80078d2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80078d4:	f7ff fe06 	bl	80074e4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80078d8:	f7fd fb38 	bl	8004f4c <HAL_GetTick>
 80078dc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80078de:	e009      	b.n	80078f4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80078e0:	f7fd fb34 	bl	8004f4c <HAL_GetTick>
 80078e4:	4602      	mov	r2, r0
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d902      	bls.n	80078f4 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80078ee:	2303      	movs	r3, #3
 80078f0:	73fb      	strb	r3, [r7, #15]
      break;
 80078f2:	e004      	b.n	80078fe <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80078f4:	f7ff fe05 	bl	8007502 <LL_RCC_PLLSAI1_IsReady>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d1f0      	bne.n	80078e0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80078fe:	7bfb      	ldrb	r3, [r7, #15]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d137      	bne.n	8007974 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	021b      	lsls	r3, r3, #8
 8007914:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007918:	4313      	orrs	r3, r2
 800791a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800791c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800792e:	4313      	orrs	r3, r2
 8007930:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007932:	f7ff fdc8 	bl	80074c6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007936:	f7fd fb09 	bl	8004f4c <HAL_GetTick>
 800793a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800793c:	e009      	b.n	8007952 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800793e:	f7fd fb05 	bl	8004f4c <HAL_GetTick>
 8007942:	4602      	mov	r2, r0
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	2b02      	cmp	r3, #2
 800794a:	d902      	bls.n	8007952 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800794c:	2303      	movs	r3, #3
 800794e:	73fb      	strb	r3, [r7, #15]
        break;
 8007950:	e004      	b.n	800795c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007952:	f7ff fdd6 	bl	8007502 <LL_RCC_PLLSAI1_IsReady>
 8007956:	4603      	mov	r3, r0
 8007958:	2b01      	cmp	r3, #1
 800795a:	d1f0      	bne.n	800793e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800795c:	7bfb      	ldrb	r3, [r7, #15]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d108      	bne.n	8007974 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007962:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007966:	691a      	ldr	r2, [r3, #16]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	691b      	ldr	r3, [r3, #16]
 800796c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007970:	4313      	orrs	r3, r2
 8007972:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007974:	7bfb      	ldrb	r3, [r7, #15]
}
 8007976:	4618      	mov	r0, r3
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b084      	sub	sp, #16
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800798a:	f7ff fdab 	bl	80074e4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800798e:	f7fd fadd 	bl	8004f4c <HAL_GetTick>
 8007992:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007994:	e009      	b.n	80079aa <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007996:	f7fd fad9 	bl	8004f4c <HAL_GetTick>
 800799a:	4602      	mov	r2, r0
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	1ad3      	subs	r3, r2, r3
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d902      	bls.n	80079aa <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80079a4:	2303      	movs	r3, #3
 80079a6:	73fb      	strb	r3, [r7, #15]
      break;
 80079a8:	e004      	b.n	80079b4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80079aa:	f7ff fdaa 	bl	8007502 <LL_RCC_PLLSAI1_IsReady>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1f0      	bne.n	8007996 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d137      	bne.n	8007a2a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80079ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	021b      	lsls	r3, r3, #8
 80079ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079ce:	4313      	orrs	r3, r2
 80079d0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80079d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079e4:	4313      	orrs	r3, r2
 80079e6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80079e8:	f7ff fd6d 	bl	80074c6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079ec:	f7fd faae 	bl	8004f4c <HAL_GetTick>
 80079f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80079f2:	e009      	b.n	8007a08 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80079f4:	f7fd faaa 	bl	8004f4c <HAL_GetTick>
 80079f8:	4602      	mov	r2, r0
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d902      	bls.n	8007a08 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8007a02:	2303      	movs	r3, #3
 8007a04:	73fb      	strb	r3, [r7, #15]
        break;
 8007a06:	e004      	b.n	8007a12 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007a08:	f7ff fd7b 	bl	8007502 <LL_RCC_PLLSAI1_IsReady>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	d1f0      	bne.n	80079f4 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8007a12:	7bfb      	ldrb	r3, [r7, #15]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d108      	bne.n	8007a2a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a1c:	691a      	ldr	r2, [r3, #16]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	691b      	ldr	r3, [r3, #16]
 8007a22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a26:	4313      	orrs	r3, r2
 8007a28:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d101      	bne.n	8007a46 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e09f      	b.n	8007b86 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d106      	bne.n	8007a60 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7fb fa8c 	bl	8002f78 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2202      	movs	r2, #2
 8007a64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007a68:	4b49      	ldr	r3, [pc, #292]	; (8007b90 <HAL_RTC_Init+0x15c>)
 8007a6a:	68db      	ldr	r3, [r3, #12]
 8007a6c:	f003 0310 	and.w	r3, r3, #16
 8007a70:	2b10      	cmp	r3, #16
 8007a72:	d07e      	beq.n	8007b72 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	22ca      	movs	r2, #202	; 0xca
 8007a7a:	625a      	str	r2, [r3, #36]	; 0x24
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2253      	movs	r2, #83	; 0x53
 8007a82:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f8ab 	bl	8007be0 <RTC_EnterInitMode>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00a      	beq.n	8007aa6 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	22ff      	movs	r2, #255	; 0xff
 8007a96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2204      	movs	r2, #4
 8007a9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	73fb      	strb	r3, [r7, #15]
 8007aa4:	e067      	b.n	8007b76 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	6812      	ldr	r2, [r2, #0]
 8007ab0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ab8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	6899      	ldr	r1, [r3, #8]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	431a      	orrs	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	431a      	orrs	r2, r3
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	68d2      	ldr	r2, [r2, #12]
 8007ae0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	6919      	ldr	r1, [r3, #16]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	041a      	lsls	r2, r3, #16
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	430a      	orrs	r2, r1
 8007af4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68da      	ldr	r2, [r3, #12]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b04:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f022 0203 	bic.w	r2, r2, #3
 8007b14:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	69da      	ldr	r2, [r3, #28]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	695b      	ldr	r3, [r3, #20]
 8007b24:	431a      	orrs	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f003 0320 	and.w	r3, r3, #32
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d113      	bne.n	8007b64 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f829 	bl	8007b94 <HAL_RTC_WaitForSynchro>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00d      	beq.n	8007b64 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	22ff      	movs	r2, #255	; 0xff
 8007b4e:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2204      	movs	r2, #4
 8007b54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e010      	b.n	8007b86 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	22ff      	movs	r2, #255	; 0xff
 8007b6a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	73fb      	strb	r3, [r7, #15]
 8007b70:	e001      	b.n	8007b76 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d103      	bne.n	8007b84 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8007b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	40002800 	.word	0x40002800

08007b94 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68da      	ldr	r2, [r3, #12]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007baa:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007bac:	f7fd f9ce 	bl	8004f4c <HAL_GetTick>
 8007bb0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007bb2:	e009      	b.n	8007bc8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007bb4:	f7fd f9ca 	bl	8004f4c <HAL_GetTick>
 8007bb8:	4602      	mov	r2, r0
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	1ad3      	subs	r3, r2, r3
 8007bbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bc2:	d901      	bls.n	8007bc8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e007      	b.n	8007bd8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	f003 0320 	and.w	r3, r3, #32
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d0ee      	beq.n	8007bb4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d119      	bne.n	8007c2a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8007bfe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007c00:	f7fd f9a4 	bl	8004f4c <HAL_GetTick>
 8007c04:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007c06:	e009      	b.n	8007c1c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007c08:	f7fd f9a0 	bl	8004f4c <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c16:	d901      	bls.n	8007c1c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e007      	b.n	8007c2c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d0ee      	beq.n	8007c08 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8007c2a:	2300      	movs	r3, #0
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3710      	adds	r7, #16
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b086      	sub	sp, #24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d101      	bne.n	8007c4e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	e0a8      	b.n	8007da0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2202      	movs	r2, #2
 8007c5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	22ca      	movs	r2, #202	; 0xca
 8007c64:	625a      	str	r2, [r3, #36]	; 0x24
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2253      	movs	r2, #83	; 0x53
 8007c6c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d020      	beq.n	8007cbe <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8007c7c:	f7fd f966 	bl	8004f4c <HAL_GetTick>
 8007c80:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007c82:	e015      	b.n	8007cb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007c84:	f7fd f962 	bl	8004f4c <HAL_GetTick>
 8007c88:	4602      	mov	r2, r0
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	1ad3      	subs	r3, r2, r3
 8007c8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c92:	d90d      	bls.n	8007cb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	22ff      	movs	r2, #255	; 0xff
 8007c9a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2203      	movs	r2, #3
 8007ca0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e077      	b.n	8007da0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	f003 0304 	and.w	r3, r3, #4
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1e2      	bne.n	8007c84 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	689a      	ldr	r2, [r3, #8]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ccc:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	b2da      	uxtb	r2, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007cde:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007ce0:	f7fd f934 	bl	8004f4c <HAL_GetTick>
 8007ce4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007ce6:	e015      	b.n	8007d14 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ce8:	f7fd f930 	bl	8004f4c <HAL_GetTick>
 8007cec:	4602      	mov	r2, r0
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cf6:	d90d      	bls.n	8007d14 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	22ff      	movs	r2, #255	; 0xff
 8007cfe:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2203      	movs	r2, #3
 8007d04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e045      	b.n	8007da0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	f003 0304 	and.w	r3, r3, #4
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d0e2      	beq.n	8007ce8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	689a      	ldr	r2, [r3, #8]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f022 0207 	bic.w	r2, r2, #7
 8007d38:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	6899      	ldr	r1, [r3, #8]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	430a      	orrs	r2, r1
 8007d48:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007d4a:	4b17      	ldr	r3, [pc, #92]	; (8007da8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007d4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d50:	4a15      	ldr	r2, [pc, #84]	; (8007da8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007d52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d56:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007d5a:	4b13      	ldr	r3, [pc, #76]	; (8007da8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a12      	ldr	r2, [pc, #72]	; (8007da8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007d60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d64:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	689a      	ldr	r2, [r3, #8]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d74:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d84:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	22ff      	movs	r2, #255	; 0xff
 8007d8c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3718      	adds	r7, #24
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}
 8007da8:	58000800 	.word	0x58000800

08007dac <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d101      	bne.n	8007dc2 <HAL_RTCEx_EnableBypassShadow+0x16>
 8007dbe:	2302      	movs	r3, #2
 8007dc0:	e024      	b.n	8007e0c <HAL_RTCEx_EnableBypassShadow+0x60>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2202      	movs	r2, #2
 8007dce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	22ca      	movs	r2, #202	; 0xca
 8007dd8:	625a      	str	r2, [r3, #36]	; 0x24
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2253      	movs	r2, #83	; 0x53
 8007de0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	689a      	ldr	r2, [r3, #8]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f042 0220 	orr.w	r2, r2, #32
 8007df0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	22ff      	movs	r2, #255	; 0xff
 8007df8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <LL_RCC_GetUSARTClockSource>:
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e24:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4013      	ands	r3, r2
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <LL_RCC_GetLPUARTClockSource>:
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4013      	ands	r3, r2
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d101      	bne.n	8007e6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e042      	b.n	8007ef0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d106      	bne.n	8007e82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7fa ff87 	bl	8002d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2224      	movs	r2, #36	; 0x24
 8007e86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f022 0201 	bic.w	r2, r2, #1
 8007e98:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d002      	beq.n	8007ea8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fe60 	bl	8008b68 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fc35 	bl	8008718 <UART_SetConfig>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d101      	bne.n	8007eb8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e01b      	b.n	8007ef0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ec6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	689a      	ldr	r2, [r3, #8]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ed6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f042 0201 	orr.w	r2, r2, #1
 8007ee6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fedf 	bl	8008cac <UART_CheckIdleState>
 8007eee:	4603      	mov	r3, r0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08a      	sub	sp, #40	; 0x28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	4613      	mov	r3, r2
 8007f04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f0c:	2b20      	cmp	r3, #32
 8007f0e:	d137      	bne.n	8007f80 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d002      	beq.n	8007f1c <HAL_UART_Receive_IT+0x24>
 8007f16:	88fb      	ldrh	r3, [r7, #6]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d101      	bne.n	8007f20 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e030      	b.n	8007f82 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a18      	ldr	r2, [pc, #96]	; (8007f8c <HAL_UART_Receive_IT+0x94>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d01f      	beq.n	8007f70 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d018      	beq.n	8007f70 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	e853 3f00 	ldrex	r3, [r3]
 8007f4a:	613b      	str	r3, [r7, #16]
   return(result);
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f52:	627b      	str	r3, [r7, #36]	; 0x24
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f5c:	623b      	str	r3, [r7, #32]
 8007f5e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f60:	69f9      	ldr	r1, [r7, #28]
 8007f62:	6a3a      	ldr	r2, [r7, #32]
 8007f64:	e841 2300 	strex	r3, r2, [r1]
 8007f68:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1e6      	bne.n	8007f3e <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007f70:	88fb      	ldrh	r3, [r7, #6]
 8007f72:	461a      	mov	r2, r3
 8007f74:	68b9      	ldr	r1, [r7, #8]
 8007f76:	68f8      	ldr	r0, [r7, #12]
 8007f78:	f000 ffb0 	bl	8008edc <UART_Start_Receive_IT>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	e000      	b.n	8007f82 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007f80:	2302      	movs	r3, #2
  }
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3728      	adds	r7, #40	; 0x28
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	40008000 	.word	0x40008000

08007f90 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b08a      	sub	sp, #40	; 0x28
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fa4:	2b20      	cmp	r3, #32
 8007fa6:	d167      	bne.n	8008078 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d002      	beq.n	8007fb4 <HAL_UART_Transmit_DMA+0x24>
 8007fae:	88fb      	ldrh	r3, [r7, #6]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d101      	bne.n	8007fb8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e060      	b.n	800807a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	88fa      	ldrh	r2, [r7, #6]
 8007fc2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	88fa      	ldrh	r2, [r7, #6]
 8007fca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2221      	movs	r2, #33	; 0x21
 8007fda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d028      	beq.n	8008038 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fea:	4a26      	ldr	r2, [pc, #152]	; (8008084 <HAL_UART_Transmit_DMA+0xf4>)
 8007fec:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ff2:	4a25      	ldr	r2, [pc, #148]	; (8008088 <HAL_UART_Transmit_DMA+0xf8>)
 8007ff4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ffa:	4a24      	ldr	r2, [pc, #144]	; (800808c <HAL_UART_Transmit_DMA+0xfc>)
 8007ffc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008002:	2200      	movs	r2, #0
 8008004:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800800e:	4619      	mov	r1, r3
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	3328      	adds	r3, #40	; 0x28
 8008016:	461a      	mov	r2, r3
 8008018:	88fb      	ldrh	r3, [r7, #6]
 800801a:	f7fd fa09 	bl	8005430 <HAL_DMA_Start_IT>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d009      	beq.n	8008038 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2210      	movs	r2, #16
 8008028:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2220      	movs	r2, #32
 8008030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e020      	b.n	800807a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2240      	movs	r2, #64	; 0x40
 800803e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	3308      	adds	r3, #8
 8008046:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	e853 3f00 	ldrex	r3, [r3]
 800804e:	613b      	str	r3, [r7, #16]
   return(result);
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008056:	627b      	str	r3, [r7, #36]	; 0x24
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3308      	adds	r3, #8
 800805e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008060:	623a      	str	r2, [r7, #32]
 8008062:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008064:	69f9      	ldr	r1, [r7, #28]
 8008066:	6a3a      	ldr	r2, [r7, #32]
 8008068:	e841 2300 	strex	r3, r2, [r1]
 800806c:	61bb      	str	r3, [r7, #24]
   return(result);
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d1e5      	bne.n	8008040 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008074:	2300      	movs	r3, #0
 8008076:	e000      	b.n	800807a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008078:	2302      	movs	r3, #2
  }
}
 800807a:	4618      	mov	r0, r3
 800807c:	3728      	adds	r7, #40	; 0x28
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	0800926f 	.word	0x0800926f
 8008088:	08009309 	.word	0x08009309
 800808c:	08009325 	.word	0x08009325

08008090 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b0ba      	sub	sp, #232	; 0xe8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	69db      	ldr	r3, [r3, #28]
 800809e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80080b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80080ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80080be:	4013      	ands	r3, r2
 80080c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80080c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d11b      	bne.n	8008104 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080d0:	f003 0320 	and.w	r3, r3, #32
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d015      	beq.n	8008104 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080dc:	f003 0320 	and.w	r3, r3, #32
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d105      	bne.n	80080f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d009      	beq.n	8008104 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 82e3 	beq.w	80086c0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	4798      	blx	r3
      }
      return;
 8008102:	e2dd      	b.n	80086c0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008104:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008108:	2b00      	cmp	r3, #0
 800810a:	f000 8123 	beq.w	8008354 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800810e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008112:	4b8d      	ldr	r3, [pc, #564]	; (8008348 <HAL_UART_IRQHandler+0x2b8>)
 8008114:	4013      	ands	r3, r2
 8008116:	2b00      	cmp	r3, #0
 8008118:	d106      	bne.n	8008128 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800811a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800811e:	4b8b      	ldr	r3, [pc, #556]	; (800834c <HAL_UART_IRQHandler+0x2bc>)
 8008120:	4013      	ands	r3, r2
 8008122:	2b00      	cmp	r3, #0
 8008124:	f000 8116 	beq.w	8008354 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800812c:	f003 0301 	and.w	r3, r3, #1
 8008130:	2b00      	cmp	r3, #0
 8008132:	d011      	beq.n	8008158 <HAL_UART_IRQHandler+0xc8>
 8008134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00b      	beq.n	8008158 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2201      	movs	r2, #1
 8008146:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800814e:	f043 0201 	orr.w	r2, r3, #1
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800815c:	f003 0302 	and.w	r3, r3, #2
 8008160:	2b00      	cmp	r3, #0
 8008162:	d011      	beq.n	8008188 <HAL_UART_IRQHandler+0xf8>
 8008164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008168:	f003 0301 	and.w	r3, r3, #1
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00b      	beq.n	8008188 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2202      	movs	r2, #2
 8008176:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800817e:	f043 0204 	orr.w	r2, r3, #4
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800818c:	f003 0304 	and.w	r3, r3, #4
 8008190:	2b00      	cmp	r3, #0
 8008192:	d011      	beq.n	80081b8 <HAL_UART_IRQHandler+0x128>
 8008194:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008198:	f003 0301 	and.w	r3, r3, #1
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00b      	beq.n	80081b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2204      	movs	r2, #4
 80081a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ae:	f043 0202 	orr.w	r2, r3, #2
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80081b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081bc:	f003 0308 	and.w	r3, r3, #8
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d017      	beq.n	80081f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081c8:	f003 0320 	and.w	r3, r3, #32
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d105      	bne.n	80081dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80081d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80081d4:	4b5c      	ldr	r3, [pc, #368]	; (8008348 <HAL_UART_IRQHandler+0x2b8>)
 80081d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d00b      	beq.n	80081f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2208      	movs	r2, #8
 80081e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081ea:	f043 0208 	orr.w	r2, r3, #8
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80081f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d012      	beq.n	8008226 <HAL_UART_IRQHandler+0x196>
 8008200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008204:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00c      	beq.n	8008226 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008214:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800821c:	f043 0220 	orr.w	r2, r3, #32
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800822c:	2b00      	cmp	r3, #0
 800822e:	f000 8249 	beq.w	80086c4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008236:	f003 0320 	and.w	r3, r3, #32
 800823a:	2b00      	cmp	r3, #0
 800823c:	d013      	beq.n	8008266 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800823e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008242:	f003 0320 	and.w	r3, r3, #32
 8008246:	2b00      	cmp	r3, #0
 8008248:	d105      	bne.n	8008256 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800824a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800824e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008252:	2b00      	cmp	r3, #0
 8008254:	d007      	beq.n	8008266 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800825a:	2b00      	cmp	r3, #0
 800825c:	d003      	beq.n	8008266 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800826c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800827a:	2b40      	cmp	r3, #64	; 0x40
 800827c:	d005      	beq.n	800828a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800827e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008282:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008286:	2b00      	cmp	r3, #0
 8008288:	d054      	beq.n	8008334 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 ff89 	bl	80091a2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800829a:	2b40      	cmp	r3, #64	; 0x40
 800829c:	d146      	bne.n	800832c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	3308      	adds	r3, #8
 80082a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80082ac:	e853 3f00 	ldrex	r3, [r3]
 80082b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80082b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80082b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	3308      	adds	r3, #8
 80082c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80082ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80082ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80082d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80082da:	e841 2300 	strex	r3, r2, [r1]
 80082de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80082e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1d9      	bne.n	800829e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d017      	beq.n	8008324 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082fa:	4a15      	ldr	r2, [pc, #84]	; (8008350 <HAL_UART_IRQHandler+0x2c0>)
 80082fc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008304:	4618      	mov	r0, r3
 8008306:	f7fd f96d 	bl	80055e4 <HAL_DMA_Abort_IT>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d019      	beq.n	8008344 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008318:	687a      	ldr	r2, [r7, #4]
 800831a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800831e:	4610      	mov	r0, r2
 8008320:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008322:	e00f      	b.n	8008344 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f000 f9e1 	bl	80086ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800832a:	e00b      	b.n	8008344 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f9dd 	bl	80086ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008332:	e007      	b.n	8008344 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 f9d9 	bl	80086ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8008342:	e1bf      	b.n	80086c4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008344:	bf00      	nop
    return;
 8008346:	e1bd      	b.n	80086c4 <HAL_UART_IRQHandler+0x634>
 8008348:	10000001 	.word	0x10000001
 800834c:	04000120 	.word	0x04000120
 8008350:	080093a5 	.word	0x080093a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008358:	2b01      	cmp	r3, #1
 800835a:	f040 8153 	bne.w	8008604 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800835e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008362:	f003 0310 	and.w	r3, r3, #16
 8008366:	2b00      	cmp	r3, #0
 8008368:	f000 814c 	beq.w	8008604 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800836c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008370:	f003 0310 	and.w	r3, r3, #16
 8008374:	2b00      	cmp	r3, #0
 8008376:	f000 8145 	beq.w	8008604 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2210      	movs	r2, #16
 8008380:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800838c:	2b40      	cmp	r3, #64	; 0x40
 800838e:	f040 80bb 	bne.w	8008508 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f000 818f 	beq.w	80086c8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80083b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083b4:	429a      	cmp	r2, r3
 80083b6:	f080 8187 	bcs.w	80086c8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 0320 	and.w	r3, r3, #32
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	f040 8087 	bne.w	80084e6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80083e4:	e853 3f00 	ldrex	r3, [r3]
 80083e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80083ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80083f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	461a      	mov	r2, r3
 80083fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008402:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008406:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800840e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008412:	e841 2300 	strex	r3, r2, [r1]
 8008416:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800841a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1da      	bne.n	80083d8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3308      	adds	r3, #8
 8008428:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800842c:	e853 3f00 	ldrex	r3, [r3]
 8008430:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008432:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008434:	f023 0301 	bic.w	r3, r3, #1
 8008438:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	3308      	adds	r3, #8
 8008442:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008446:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800844a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800844e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008452:	e841 2300 	strex	r3, r2, [r1]
 8008456:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008458:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800845a:	2b00      	cmp	r3, #0
 800845c:	d1e1      	bne.n	8008422 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	3308      	adds	r3, #8
 8008464:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008466:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008468:	e853 3f00 	ldrex	r3, [r3]
 800846c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800846e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008474:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3308      	adds	r3, #8
 800847e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008482:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008484:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008486:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008488:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e3      	bne.n	800845e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2220      	movs	r2, #32
 800849a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2200      	movs	r2, #0
 80084a2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084ac:	e853 3f00 	ldrex	r3, [r3]
 80084b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084b4:	f023 0310 	bic.w	r3, r3, #16
 80084b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	461a      	mov	r2, r3
 80084c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80084c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80084c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80084cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084ce:	e841 2300 	strex	r3, r2, [r1]
 80084d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80084d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1e4      	bne.n	80084a4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084e0:	4618      	mov	r0, r3
 80084e2:	f7fd f820 	bl	8005526 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2202      	movs	r2, #2
 80084ea:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	1ad3      	subs	r3, r2, r3
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	4619      	mov	r1, r3
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f8fd 	bl	8008700 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008506:	e0df      	b.n	80086c8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008514:	b29b      	uxth	r3, r3
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008522:	b29b      	uxth	r3, r3
 8008524:	2b00      	cmp	r3, #0
 8008526:	f000 80d1 	beq.w	80086cc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800852a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800852e:	2b00      	cmp	r3, #0
 8008530:	f000 80cc 	beq.w	80086cc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800853c:	e853 3f00 	ldrex	r3, [r3]
 8008540:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008544:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008548:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	461a      	mov	r2, r3
 8008552:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008556:	647b      	str	r3, [r7, #68]	; 0x44
 8008558:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800855c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800855e:	e841 2300 	strex	r3, r2, [r1]
 8008562:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1e4      	bne.n	8008534 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3308      	adds	r3, #8
 8008570:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008574:	e853 3f00 	ldrex	r3, [r3]
 8008578:	623b      	str	r3, [r7, #32]
   return(result);
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008580:	f023 0301 	bic.w	r3, r3, #1
 8008584:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	3308      	adds	r3, #8
 800858e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008592:	633a      	str	r2, [r7, #48]	; 0x30
 8008594:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008596:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800859a:	e841 2300 	strex	r3, r2, [r1]
 800859e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1e1      	bne.n	800856a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2220      	movs	r2, #32
 80085aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	e853 3f00 	ldrex	r3, [r3]
 80085c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f023 0310 	bic.w	r3, r3, #16
 80085ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	461a      	mov	r2, r3
 80085d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80085dc:	61fb      	str	r3, [r7, #28]
 80085de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e0:	69b9      	ldr	r1, [r7, #24]
 80085e2:	69fa      	ldr	r2, [r7, #28]
 80085e4:	e841 2300 	strex	r3, r2, [r1]
 80085e8:	617b      	str	r3, [r7, #20]
   return(result);
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1e4      	bne.n	80085ba <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2202      	movs	r2, #2
 80085f4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80085f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80085fa:	4619      	mov	r1, r3
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 f87f 	bl	8008700 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008602:	e063      	b.n	80086cc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008608:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00e      	beq.n	800862e <HAL_UART_IRQHandler+0x59e>
 8008610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008614:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008618:	2b00      	cmp	r3, #0
 800861a:	d008      	beq.n	800862e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008624:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f001 fc1a 	bl	8009e60 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800862c:	e051      	b.n	80086d2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800862e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008636:	2b00      	cmp	r3, #0
 8008638:	d014      	beq.n	8008664 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800863a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800863e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008642:	2b00      	cmp	r3, #0
 8008644:	d105      	bne.n	8008652 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800864a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d008      	beq.n	8008664 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008656:	2b00      	cmp	r3, #0
 8008658:	d03a      	beq.n	80086d0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	4798      	blx	r3
    }
    return;
 8008662:	e035      	b.n	80086d0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800866c:	2b00      	cmp	r3, #0
 800866e:	d009      	beq.n	8008684 <HAL_UART_IRQHandler+0x5f4>
 8008670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008678:	2b00      	cmp	r3, #0
 800867a:	d003      	beq.n	8008684 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fea7 	bl	80093d0 <UART_EndTransmit_IT>
    return;
 8008682:	e026      	b.n	80086d2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d009      	beq.n	80086a4 <HAL_UART_IRQHandler+0x614>
 8008690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008694:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008698:	2b00      	cmp	r3, #0
 800869a:	d003      	beq.n	80086a4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f001 fbf3 	bl	8009e88 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086a2:	e016      	b.n	80086d2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80086a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d010      	beq.n	80086d2 <HAL_UART_IRQHandler+0x642>
 80086b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	da0c      	bge.n	80086d2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f001 fbdb 	bl	8009e74 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80086be:	e008      	b.n	80086d2 <HAL_UART_IRQHandler+0x642>
      return;
 80086c0:	bf00      	nop
 80086c2:	e006      	b.n	80086d2 <HAL_UART_IRQHandler+0x642>
    return;
 80086c4:	bf00      	nop
 80086c6:	e004      	b.n	80086d2 <HAL_UART_IRQHandler+0x642>
      return;
 80086c8:	bf00      	nop
 80086ca:	e002      	b.n	80086d2 <HAL_UART_IRQHandler+0x642>
      return;
 80086cc:	bf00      	nop
 80086ce:	e000      	b.n	80086d2 <HAL_UART_IRQHandler+0x642>
    return;
 80086d0:	bf00      	nop
  }
}
 80086d2:	37e8      	adds	r7, #232	; 0xe8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80086f4:	bf00      	nop
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	460b      	mov	r3, r1
 800870a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800871c:	b08c      	sub	sp, #48	; 0x30
 800871e:	af00      	add	r7, sp, #0
 8008720:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	689a      	ldr	r2, [r3, #8]
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	431a      	orrs	r2, r3
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	431a      	orrs	r2, r3
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	69db      	ldr	r3, [r3, #28]
 800873c:	4313      	orrs	r3, r2
 800873e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	4baf      	ldr	r3, [pc, #700]	; (8008a04 <UART_SetConfig+0x2ec>)
 8008748:	4013      	ands	r3, r2
 800874a:	697a      	ldr	r2, [r7, #20]
 800874c:	6812      	ldr	r2, [r2, #0]
 800874e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008750:	430b      	orrs	r3, r1
 8008752:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	68da      	ldr	r2, [r3, #12]
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	430a      	orrs	r2, r1
 8008768:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4aa4      	ldr	r2, [pc, #656]	; (8008a08 <UART_SetConfig+0x2f0>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d004      	beq.n	8008784 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008780:	4313      	orrs	r3, r2
 8008782:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800878e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008792:	697a      	ldr	r2, [r7, #20]
 8008794:	6812      	ldr	r2, [r2, #0]
 8008796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008798:	430b      	orrs	r3, r1
 800879a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a2:	f023 010f 	bic.w	r1, r3, #15
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	430a      	orrs	r2, r1
 80087b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a95      	ldr	r2, [pc, #596]	; (8008a0c <UART_SetConfig+0x2f4>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d125      	bne.n	8008808 <UART_SetConfig+0xf0>
 80087bc:	2003      	movs	r0, #3
 80087be:	f7ff fb2b 	bl	8007e18 <LL_RCC_GetUSARTClockSource>
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b03      	cmp	r3, #3
 80087c6:	d81b      	bhi.n	8008800 <UART_SetConfig+0xe8>
 80087c8:	a201      	add	r2, pc, #4	; (adr r2, 80087d0 <UART_SetConfig+0xb8>)
 80087ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ce:	bf00      	nop
 80087d0:	080087e1 	.word	0x080087e1
 80087d4:	080087f1 	.word	0x080087f1
 80087d8:	080087e9 	.word	0x080087e9
 80087dc:	080087f9 	.word	0x080087f9
 80087e0:	2301      	movs	r3, #1
 80087e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087e6:	e042      	b.n	800886e <UART_SetConfig+0x156>
 80087e8:	2302      	movs	r3, #2
 80087ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ee:	e03e      	b.n	800886e <UART_SetConfig+0x156>
 80087f0:	2304      	movs	r3, #4
 80087f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087f6:	e03a      	b.n	800886e <UART_SetConfig+0x156>
 80087f8:	2308      	movs	r3, #8
 80087fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087fe:	e036      	b.n	800886e <UART_SetConfig+0x156>
 8008800:	2310      	movs	r3, #16
 8008802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008806:	e032      	b.n	800886e <UART_SetConfig+0x156>
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a7e      	ldr	r2, [pc, #504]	; (8008a08 <UART_SetConfig+0x2f0>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d12a      	bne.n	8008868 <UART_SetConfig+0x150>
 8008812:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008816:	f7ff fb0f 	bl	8007e38 <LL_RCC_GetLPUARTClockSource>
 800881a:	4603      	mov	r3, r0
 800881c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008820:	d01a      	beq.n	8008858 <UART_SetConfig+0x140>
 8008822:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008826:	d81b      	bhi.n	8008860 <UART_SetConfig+0x148>
 8008828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800882c:	d00c      	beq.n	8008848 <UART_SetConfig+0x130>
 800882e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008832:	d815      	bhi.n	8008860 <UART_SetConfig+0x148>
 8008834:	2b00      	cmp	r3, #0
 8008836:	d003      	beq.n	8008840 <UART_SetConfig+0x128>
 8008838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800883c:	d008      	beq.n	8008850 <UART_SetConfig+0x138>
 800883e:	e00f      	b.n	8008860 <UART_SetConfig+0x148>
 8008840:	2300      	movs	r3, #0
 8008842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008846:	e012      	b.n	800886e <UART_SetConfig+0x156>
 8008848:	2302      	movs	r3, #2
 800884a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800884e:	e00e      	b.n	800886e <UART_SetConfig+0x156>
 8008850:	2304      	movs	r3, #4
 8008852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008856:	e00a      	b.n	800886e <UART_SetConfig+0x156>
 8008858:	2308      	movs	r3, #8
 800885a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800885e:	e006      	b.n	800886e <UART_SetConfig+0x156>
 8008860:	2310      	movs	r3, #16
 8008862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008866:	e002      	b.n	800886e <UART_SetConfig+0x156>
 8008868:	2310      	movs	r3, #16
 800886a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a65      	ldr	r2, [pc, #404]	; (8008a08 <UART_SetConfig+0x2f0>)
 8008874:	4293      	cmp	r3, r2
 8008876:	f040 8097 	bne.w	80089a8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800887a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800887e:	2b08      	cmp	r3, #8
 8008880:	d823      	bhi.n	80088ca <UART_SetConfig+0x1b2>
 8008882:	a201      	add	r2, pc, #4	; (adr r2, 8008888 <UART_SetConfig+0x170>)
 8008884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008888:	080088ad 	.word	0x080088ad
 800888c:	080088cb 	.word	0x080088cb
 8008890:	080088b5 	.word	0x080088b5
 8008894:	080088cb 	.word	0x080088cb
 8008898:	080088bb 	.word	0x080088bb
 800889c:	080088cb 	.word	0x080088cb
 80088a0:	080088cb 	.word	0x080088cb
 80088a4:	080088cb 	.word	0x080088cb
 80088a8:	080088c3 	.word	0x080088c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088ac:	f7fe fbbe 	bl	800702c <HAL_RCC_GetPCLK1Freq>
 80088b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088b2:	e010      	b.n	80088d6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088b4:	4b56      	ldr	r3, [pc, #344]	; (8008a10 <UART_SetConfig+0x2f8>)
 80088b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088b8:	e00d      	b.n	80088d6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088ba:	f7fe fb37 	bl	8006f2c <HAL_RCC_GetSysClockFreq>
 80088be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088c0:	e009      	b.n	80088d6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088c8:	e005      	b.n	80088d6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80088ca:	2300      	movs	r3, #0
 80088cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80088d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80088d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 812b 	beq.w	8008b34 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e2:	4a4c      	ldr	r2, [pc, #304]	; (8008a14 <UART_SetConfig+0x2fc>)
 80088e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088e8:	461a      	mov	r2, r3
 80088ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80088f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	685a      	ldr	r2, [r3, #4]
 80088f6:	4613      	mov	r3, r2
 80088f8:	005b      	lsls	r3, r3, #1
 80088fa:	4413      	add	r3, r2
 80088fc:	69ba      	ldr	r2, [r7, #24]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d305      	bcc.n	800890e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008908:	69ba      	ldr	r2, [r7, #24]
 800890a:	429a      	cmp	r2, r3
 800890c:	d903      	bls.n	8008916 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008914:	e10e      	b.n	8008b34 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008918:	2200      	movs	r2, #0
 800891a:	60bb      	str	r3, [r7, #8]
 800891c:	60fa      	str	r2, [r7, #12]
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008922:	4a3c      	ldr	r2, [pc, #240]	; (8008a14 <UART_SetConfig+0x2fc>)
 8008924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008928:	b29b      	uxth	r3, r3
 800892a:	2200      	movs	r2, #0
 800892c:	603b      	str	r3, [r7, #0]
 800892e:	607a      	str	r2, [r7, #4]
 8008930:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008934:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008938:	f7f8 f91e 	bl	8000b78 <__aeabi_uldivmod>
 800893c:	4602      	mov	r2, r0
 800893e:	460b      	mov	r3, r1
 8008940:	4610      	mov	r0, r2
 8008942:	4619      	mov	r1, r3
 8008944:	f04f 0200 	mov.w	r2, #0
 8008948:	f04f 0300 	mov.w	r3, #0
 800894c:	020b      	lsls	r3, r1, #8
 800894e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008952:	0202      	lsls	r2, r0, #8
 8008954:	6979      	ldr	r1, [r7, #20]
 8008956:	6849      	ldr	r1, [r1, #4]
 8008958:	0849      	lsrs	r1, r1, #1
 800895a:	2000      	movs	r0, #0
 800895c:	460c      	mov	r4, r1
 800895e:	4605      	mov	r5, r0
 8008960:	eb12 0804 	adds.w	r8, r2, r4
 8008964:	eb43 0905 	adc.w	r9, r3, r5
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	2200      	movs	r2, #0
 800896e:	469a      	mov	sl, r3
 8008970:	4693      	mov	fp, r2
 8008972:	4652      	mov	r2, sl
 8008974:	465b      	mov	r3, fp
 8008976:	4640      	mov	r0, r8
 8008978:	4649      	mov	r1, r9
 800897a:	f7f8 f8fd 	bl	8000b78 <__aeabi_uldivmod>
 800897e:	4602      	mov	r2, r0
 8008980:	460b      	mov	r3, r1
 8008982:	4613      	mov	r3, r2
 8008984:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008986:	6a3b      	ldr	r3, [r7, #32]
 8008988:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800898c:	d308      	bcc.n	80089a0 <UART_SetConfig+0x288>
 800898e:	6a3b      	ldr	r3, [r7, #32]
 8008990:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008994:	d204      	bcs.n	80089a0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	6a3a      	ldr	r2, [r7, #32]
 800899c:	60da      	str	r2, [r3, #12]
 800899e:	e0c9      	b.n	8008b34 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80089a6:	e0c5      	b.n	8008b34 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	69db      	ldr	r3, [r3, #28]
 80089ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089b0:	d16d      	bne.n	8008a8e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80089b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80089b6:	3b01      	subs	r3, #1
 80089b8:	2b07      	cmp	r3, #7
 80089ba:	d82d      	bhi.n	8008a18 <UART_SetConfig+0x300>
 80089bc:	a201      	add	r2, pc, #4	; (adr r2, 80089c4 <UART_SetConfig+0x2ac>)
 80089be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c2:	bf00      	nop
 80089c4:	080089e5 	.word	0x080089e5
 80089c8:	080089ed 	.word	0x080089ed
 80089cc:	08008a19 	.word	0x08008a19
 80089d0:	080089f3 	.word	0x080089f3
 80089d4:	08008a19 	.word	0x08008a19
 80089d8:	08008a19 	.word	0x08008a19
 80089dc:	08008a19 	.word	0x08008a19
 80089e0:	080089fb 	.word	0x080089fb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089e4:	f7fe fb38 	bl	8007058 <HAL_RCC_GetPCLK2Freq>
 80089e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089ea:	e01b      	b.n	8008a24 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089ec:	4b08      	ldr	r3, [pc, #32]	; (8008a10 <UART_SetConfig+0x2f8>)
 80089ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80089f0:	e018      	b.n	8008a24 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089f2:	f7fe fa9b 	bl	8006f2c <HAL_RCC_GetSysClockFreq>
 80089f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089f8:	e014      	b.n	8008a24 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a00:	e010      	b.n	8008a24 <UART_SetConfig+0x30c>
 8008a02:	bf00      	nop
 8008a04:	cfff69f3 	.word	0xcfff69f3
 8008a08:	40008000 	.word	0x40008000
 8008a0c:	40013800 	.word	0x40013800
 8008a10:	00f42400 	.word	0x00f42400
 8008a14:	08010e8c 	.word	0x08010e8c
      default:
        pclk = 0U;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	f000 8084 	beq.w	8008b34 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a30:	4a4b      	ldr	r2, [pc, #300]	; (8008b60 <UART_SetConfig+0x448>)
 8008a32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a36:	461a      	mov	r2, r3
 8008a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a3e:	005a      	lsls	r2, r3, #1
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	085b      	lsrs	r3, r3, #1
 8008a46:	441a      	add	r2, r3
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a50:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a52:	6a3b      	ldr	r3, [r7, #32]
 8008a54:	2b0f      	cmp	r3, #15
 8008a56:	d916      	bls.n	8008a86 <UART_SetConfig+0x36e>
 8008a58:	6a3b      	ldr	r3, [r7, #32]
 8008a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a5e:	d212      	bcs.n	8008a86 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a60:	6a3b      	ldr	r3, [r7, #32]
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	f023 030f 	bic.w	r3, r3, #15
 8008a68:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a6a:	6a3b      	ldr	r3, [r7, #32]
 8008a6c:	085b      	lsrs	r3, r3, #1
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	f003 0307 	and.w	r3, r3, #7
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	8bfb      	ldrh	r3, [r7, #30]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	8bfa      	ldrh	r2, [r7, #30]
 8008a82:	60da      	str	r2, [r3, #12]
 8008a84:	e056      	b.n	8008b34 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008a8c:	e052      	b.n	8008b34 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a92:	3b01      	subs	r3, #1
 8008a94:	2b07      	cmp	r3, #7
 8008a96:	d822      	bhi.n	8008ade <UART_SetConfig+0x3c6>
 8008a98:	a201      	add	r2, pc, #4	; (adr r2, 8008aa0 <UART_SetConfig+0x388>)
 8008a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9e:	bf00      	nop
 8008aa0:	08008ac1 	.word	0x08008ac1
 8008aa4:	08008ac9 	.word	0x08008ac9
 8008aa8:	08008adf 	.word	0x08008adf
 8008aac:	08008acf 	.word	0x08008acf
 8008ab0:	08008adf 	.word	0x08008adf
 8008ab4:	08008adf 	.word	0x08008adf
 8008ab8:	08008adf 	.word	0x08008adf
 8008abc:	08008ad7 	.word	0x08008ad7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ac0:	f7fe faca 	bl	8007058 <HAL_RCC_GetPCLK2Freq>
 8008ac4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ac6:	e010      	b.n	8008aea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ac8:	4b26      	ldr	r3, [pc, #152]	; (8008b64 <UART_SetConfig+0x44c>)
 8008aca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008acc:	e00d      	b.n	8008aea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ace:	f7fe fa2d 	bl	8006f2c <HAL_RCC_GetSysClockFreq>
 8008ad2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ad4:	e009      	b.n	8008aea <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ad6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ada:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008adc:	e005      	b.n	8008aea <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008ae8:	bf00      	nop
    }

    if (pclk != 0U)
 8008aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d021      	beq.n	8008b34 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af4:	4a1a      	ldr	r2, [pc, #104]	; (8008b60 <UART_SetConfig+0x448>)
 8008af6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008afa:	461a      	mov	r2, r3
 8008afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afe:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	085b      	lsrs	r3, r3, #1
 8008b08:	441a      	add	r2, r3
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b14:	6a3b      	ldr	r3, [r7, #32]
 8008b16:	2b0f      	cmp	r3, #15
 8008b18:	d909      	bls.n	8008b2e <UART_SetConfig+0x416>
 8008b1a:	6a3b      	ldr	r3, [r7, #32]
 8008b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b20:	d205      	bcs.n	8008b2e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b22:	6a3b      	ldr	r3, [r7, #32]
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	60da      	str	r2, [r3, #12]
 8008b2c:	e002      	b.n	8008b34 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	2200      	movs	r2, #0
 8008b48:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008b50:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3730      	adds	r7, #48	; 0x30
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b5e:	bf00      	nop
 8008b60:	08010e8c 	.word	0x08010e8c
 8008b64:	00f42400 	.word	0x00f42400

08008b68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b74:	f003 0308 	and.w	r3, r3, #8
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00a      	beq.n	8008b92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	430a      	orrs	r2, r1
 8008b90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b96:	f003 0301 	and.w	r3, r3, #1
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00a      	beq.n	8008bb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	430a      	orrs	r2, r1
 8008bb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb8:	f003 0302 	and.w	r3, r3, #2
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00a      	beq.n	8008bd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	430a      	orrs	r2, r1
 8008bd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bda:	f003 0304 	and.w	r3, r3, #4
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00a      	beq.n	8008bf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	430a      	orrs	r2, r1
 8008bf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bfc:	f003 0310 	and.w	r3, r3, #16
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d00a      	beq.n	8008c1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	430a      	orrs	r2, r1
 8008c18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c1e:	f003 0320 	and.w	r3, r3, #32
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d00a      	beq.n	8008c3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	430a      	orrs	r2, r1
 8008c3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d01a      	beq.n	8008c7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	430a      	orrs	r2, r1
 8008c5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c66:	d10a      	bne.n	8008c7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	430a      	orrs	r2, r1
 8008c7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00a      	beq.n	8008ca0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	430a      	orrs	r2, r1
 8008c9e:	605a      	str	r2, [r3, #4]
  }
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b098      	sub	sp, #96	; 0x60
 8008cb0:	af02      	add	r7, sp, #8
 8008cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008cbc:	f7fc f946 	bl	8004f4c <HAL_GetTick>
 8008cc0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 0308 	and.w	r3, r3, #8
 8008ccc:	2b08      	cmp	r3, #8
 8008cce:	d12f      	bne.n	8008d30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008cd4:	9300      	str	r3, [sp, #0]
 8008cd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 f88e 	bl	8008e00 <UART_WaitOnFlagUntilTimeout>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d022      	beq.n	8008d30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf2:	e853 3f00 	ldrex	r3, [r3]
 8008cf6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cfe:	653b      	str	r3, [r7, #80]	; 0x50
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	461a      	mov	r2, r3
 8008d06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d08:	647b      	str	r3, [r7, #68]	; 0x44
 8008d0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d10:	e841 2300 	strex	r3, r2, [r1]
 8008d14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1e6      	bne.n	8008cea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2220      	movs	r2, #32
 8008d20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e063      	b.n	8008df8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0304 	and.w	r3, r3, #4
 8008d3a:	2b04      	cmp	r3, #4
 8008d3c:	d149      	bne.n	8008dd2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d46:	2200      	movs	r2, #0
 8008d48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 f857 	bl	8008e00 <UART_WaitOnFlagUntilTimeout>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d03c      	beq.n	8008dd2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d60:	e853 3f00 	ldrex	r3, [r3]
 8008d64:	623b      	str	r3, [r7, #32]
   return(result);
 8008d66:	6a3b      	ldr	r3, [r7, #32]
 8008d68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	461a      	mov	r2, r3
 8008d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d76:	633b      	str	r3, [r7, #48]	; 0x30
 8008d78:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d7e:	e841 2300 	strex	r3, r2, [r1]
 8008d82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1e6      	bne.n	8008d58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	3308      	adds	r3, #8
 8008d90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	e853 3f00 	ldrex	r3, [r3]
 8008d98:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f023 0301 	bic.w	r3, r3, #1
 8008da0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	3308      	adds	r3, #8
 8008da8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008daa:	61fa      	str	r2, [r7, #28]
 8008dac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dae:	69b9      	ldr	r1, [r7, #24]
 8008db0:	69fa      	ldr	r2, [r7, #28]
 8008db2:	e841 2300 	strex	r3, r2, [r1]
 8008db6:	617b      	str	r3, [r7, #20]
   return(result);
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1e5      	bne.n	8008d8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2220      	movs	r2, #32
 8008dc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2200      	movs	r2, #0
 8008dca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e012      	b.n	8008df8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2220      	movs	r2, #32
 8008dd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2220      	movs	r2, #32
 8008dde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3758      	adds	r7, #88	; 0x58
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	603b      	str	r3, [r7, #0]
 8008e0c:	4613      	mov	r3, r2
 8008e0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e10:	e04f      	b.n	8008eb2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e18:	d04b      	beq.n	8008eb2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e1a:	f7fc f897 	bl	8004f4c <HAL_GetTick>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	1ad3      	subs	r3, r2, r3
 8008e24:	69ba      	ldr	r2, [r7, #24]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d302      	bcc.n	8008e30 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d101      	bne.n	8008e34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e30:	2303      	movs	r3, #3
 8008e32:	e04e      	b.n	8008ed2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f003 0304 	and.w	r3, r3, #4
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d037      	beq.n	8008eb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	2b80      	cmp	r3, #128	; 0x80
 8008e46:	d034      	beq.n	8008eb2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	2b40      	cmp	r3, #64	; 0x40
 8008e4c:	d031      	beq.n	8008eb2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	69db      	ldr	r3, [r3, #28]
 8008e54:	f003 0308 	and.w	r3, r3, #8
 8008e58:	2b08      	cmp	r3, #8
 8008e5a:	d110      	bne.n	8008e7e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2208      	movs	r2, #8
 8008e62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e64:	68f8      	ldr	r0, [r7, #12]
 8008e66:	f000 f99c 	bl	80091a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2208      	movs	r2, #8
 8008e6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	e029      	b.n	8008ed2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	69db      	ldr	r3, [r3, #28]
 8008e84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e8c:	d111      	bne.n	8008eb2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e98:	68f8      	ldr	r0, [r7, #12]
 8008e9a:	f000 f982 	bl	80091a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2220      	movs	r2, #32
 8008ea2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	e00f      	b.n	8008ed2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	69da      	ldr	r2, [r3, #28]
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	4013      	ands	r3, r2
 8008ebc:	68ba      	ldr	r2, [r7, #8]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	bf0c      	ite	eq
 8008ec2:	2301      	moveq	r3, #1
 8008ec4:	2300      	movne	r3, #0
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	461a      	mov	r2, r3
 8008eca:	79fb      	ldrb	r3, [r7, #7]
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d0a0      	beq.n	8008e12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
	...

08008edc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b0a3      	sub	sp, #140	; 0x8c
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	4613      	mov	r3, r2
 8008ee8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	68ba      	ldr	r2, [r7, #8]
 8008eee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	88fa      	ldrh	r2, [r7, #6]
 8008ef4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	88fa      	ldrh	r2, [r7, #6]
 8008efc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2200      	movs	r2, #0
 8008f04:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f0e:	d10e      	bne.n	8008f2e <UART_Start_Receive_IT+0x52>
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	691b      	ldr	r3, [r3, #16]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d105      	bne.n	8008f24 <UART_Start_Receive_IT+0x48>
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008f1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f22:	e02d      	b.n	8008f80 <UART_Start_Receive_IT+0xa4>
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	22ff      	movs	r2, #255	; 0xff
 8008f28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f2c:	e028      	b.n	8008f80 <UART_Start_Receive_IT+0xa4>
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d10d      	bne.n	8008f52 <UART_Start_Receive_IT+0x76>
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d104      	bne.n	8008f48 <UART_Start_Receive_IT+0x6c>
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	22ff      	movs	r2, #255	; 0xff
 8008f42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f46:	e01b      	b.n	8008f80 <UART_Start_Receive_IT+0xa4>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	227f      	movs	r2, #127	; 0x7f
 8008f4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f50:	e016      	b.n	8008f80 <UART_Start_Receive_IT+0xa4>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f5a:	d10d      	bne.n	8008f78 <UART_Start_Receive_IT+0x9c>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	691b      	ldr	r3, [r3, #16]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d104      	bne.n	8008f6e <UART_Start_Receive_IT+0x92>
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	227f      	movs	r2, #127	; 0x7f
 8008f68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f6c:	e008      	b.n	8008f80 <UART_Start_Receive_IT+0xa4>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	223f      	movs	r2, #63	; 0x3f
 8008f72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f76:	e003      	b.n	8008f80 <UART_Start_Receive_IT+0xa4>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2222      	movs	r2, #34	; 0x22
 8008f8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	3308      	adds	r3, #8
 8008f96:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f9a:	e853 3f00 	ldrex	r3, [r3]
 8008f9e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008fa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fa2:	f043 0301 	orr.w	r3, r3, #1
 8008fa6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	3308      	adds	r3, #8
 8008fb0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008fb4:	673a      	str	r2, [r7, #112]	; 0x70
 8008fb6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008fba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008fbc:	e841 2300 	strex	r3, r2, [r1]
 8008fc0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008fc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d1e3      	bne.n	8008f90 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fd0:	d14f      	bne.n	8009072 <UART_Start_Receive_IT+0x196>
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008fd8:	88fa      	ldrh	r2, [r7, #6]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d349      	bcc.n	8009072 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fe6:	d107      	bne.n	8008ff8 <UART_Start_Receive_IT+0x11c>
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d103      	bne.n	8008ff8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	4a47      	ldr	r2, [pc, #284]	; (8009110 <UART_Start_Receive_IT+0x234>)
 8008ff4:	675a      	str	r2, [r3, #116]	; 0x74
 8008ff6:	e002      	b.n	8008ffe <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	4a46      	ldr	r2, [pc, #280]	; (8009114 <UART_Start_Receive_IT+0x238>)
 8008ffc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	691b      	ldr	r3, [r3, #16]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d01a      	beq.n	800903c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800900e:	e853 3f00 	ldrex	r3, [r3]
 8009012:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800901a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	461a      	mov	r2, r3
 8009024:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009028:	65fb      	str	r3, [r7, #92]	; 0x5c
 800902a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800902e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009030:	e841 2300 	strex	r3, r2, [r1]
 8009034:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1e4      	bne.n	8009006 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	3308      	adds	r3, #8
 8009042:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009046:	e853 3f00 	ldrex	r3, [r3]
 800904a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800904c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009052:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	3308      	adds	r3, #8
 800905a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800905c:	64ba      	str	r2, [r7, #72]	; 0x48
 800905e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009060:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009062:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009064:	e841 2300 	strex	r3, r2, [r1]
 8009068:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800906a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1e5      	bne.n	800903c <UART_Start_Receive_IT+0x160>
 8009070:	e046      	b.n	8009100 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800907a:	d107      	bne.n	800908c <UART_Start_Receive_IT+0x1b0>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d103      	bne.n	800908c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	4a24      	ldr	r2, [pc, #144]	; (8009118 <UART_Start_Receive_IT+0x23c>)
 8009088:	675a      	str	r2, [r3, #116]	; 0x74
 800908a:	e002      	b.n	8009092 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	4a23      	ldr	r2, [pc, #140]	; (800911c <UART_Start_Receive_IT+0x240>)
 8009090:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d019      	beq.n	80090ce <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a2:	e853 3f00 	ldrex	r3, [r3]
 80090a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090aa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80090ae:	677b      	str	r3, [r7, #116]	; 0x74
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	461a      	mov	r2, r3
 80090b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090b8:	637b      	str	r3, [r7, #52]	; 0x34
 80090ba:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090c0:	e841 2300 	strex	r3, r2, [r1]
 80090c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80090c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1e6      	bne.n	800909a <UART_Start_Receive_IT+0x1be>
 80090cc:	e018      	b.n	8009100 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	e853 3f00 	ldrex	r3, [r3]
 80090da:	613b      	str	r3, [r7, #16]
   return(result);
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	f043 0320 	orr.w	r3, r3, #32
 80090e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	461a      	mov	r2, r3
 80090ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090ec:	623b      	str	r3, [r7, #32]
 80090ee:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f0:	69f9      	ldr	r1, [r7, #28]
 80090f2:	6a3a      	ldr	r2, [r7, #32]
 80090f4:	e841 2300 	strex	r3, r2, [r1]
 80090f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1e6      	bne.n	80090ce <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	378c      	adds	r7, #140	; 0x8c
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	08009af9 	.word	0x08009af9
 8009114:	08009799 	.word	0x08009799
 8009118:	080095e1 	.word	0x080095e1
 800911c:	08009429 	.word	0x08009429

08009120 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009120:	b480      	push	{r7}
 8009122:	b08f      	sub	sp, #60	; 0x3c
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912e:	6a3b      	ldr	r3, [r7, #32]
 8009130:	e853 3f00 	ldrex	r3, [r3]
 8009134:	61fb      	str	r3, [r7, #28]
   return(result);
 8009136:	69fb      	ldr	r3, [r7, #28]
 8009138:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800913c:	637b      	str	r3, [r7, #52]	; 0x34
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	461a      	mov	r2, r3
 8009144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009146:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009148:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800914c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800914e:	e841 2300 	strex	r3, r2, [r1]
 8009152:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1e6      	bne.n	8009128 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	3308      	adds	r3, #8
 8009160:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	e853 3f00 	ldrex	r3, [r3]
 8009168:	60bb      	str	r3, [r7, #8]
   return(result);
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009170:	633b      	str	r3, [r7, #48]	; 0x30
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	3308      	adds	r3, #8
 8009178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800917a:	61ba      	str	r2, [r7, #24]
 800917c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917e:	6979      	ldr	r1, [r7, #20]
 8009180:	69ba      	ldr	r2, [r7, #24]
 8009182:	e841 2300 	strex	r3, r2, [r1]
 8009186:	613b      	str	r3, [r7, #16]
   return(result);
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1e5      	bne.n	800915a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2220      	movs	r2, #32
 8009192:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8009196:	bf00      	nop
 8009198:	373c      	adds	r7, #60	; 0x3c
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr

080091a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80091a2:	b480      	push	{r7}
 80091a4:	b095      	sub	sp, #84	; 0x54
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b2:	e853 3f00 	ldrex	r3, [r3]
 80091b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	461a      	mov	r2, r3
 80091c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091c8:	643b      	str	r3, [r7, #64]	; 0x40
 80091ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091d0:	e841 2300 	strex	r3, r2, [r1]
 80091d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1e6      	bne.n	80091aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3308      	adds	r3, #8
 80091e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e4:	6a3b      	ldr	r3, [r7, #32]
 80091e6:	e853 3f00 	ldrex	r3, [r3]
 80091ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091f2:	f023 0301 	bic.w	r3, r3, #1
 80091f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	3308      	adds	r3, #8
 80091fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009200:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009202:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009204:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009208:	e841 2300 	strex	r3, r2, [r1]
 800920c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800920e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009210:	2b00      	cmp	r3, #0
 8009212:	d1e3      	bne.n	80091dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009218:	2b01      	cmp	r3, #1
 800921a:	d118      	bne.n	800924e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	e853 3f00 	ldrex	r3, [r3]
 8009228:	60bb      	str	r3, [r7, #8]
   return(result);
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	f023 0310 	bic.w	r3, r3, #16
 8009230:	647b      	str	r3, [r7, #68]	; 0x44
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	461a      	mov	r2, r3
 8009238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800923a:	61bb      	str	r3, [r7, #24]
 800923c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923e:	6979      	ldr	r1, [r7, #20]
 8009240:	69ba      	ldr	r2, [r7, #24]
 8009242:	e841 2300 	strex	r3, r2, [r1]
 8009246:	613b      	str	r3, [r7, #16]
   return(result);
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d1e6      	bne.n	800921c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2220      	movs	r2, #32
 8009252:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009262:	bf00      	nop
 8009264:	3754      	adds	r7, #84	; 0x54
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr

0800926e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800926e:	b580      	push	{r7, lr}
 8009270:	b090      	sub	sp, #64	; 0x40
 8009272:	af00      	add	r7, sp, #0
 8009274:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800927a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 0320 	and.w	r3, r3, #32
 8009286:	2b00      	cmp	r3, #0
 8009288:	d137      	bne.n	80092fa <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800928a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800928c:	2200      	movs	r2, #0
 800928e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	3308      	adds	r3, #8
 8009298:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929c:	e853 3f00 	ldrex	r3, [r3]
 80092a0:	623b      	str	r3, [r7, #32]
   return(result);
 80092a2:	6a3b      	ldr	r3, [r7, #32]
 80092a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80092aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	3308      	adds	r3, #8
 80092b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092b2:	633a      	str	r2, [r7, #48]	; 0x30
 80092b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ba:	e841 2300 	strex	r3, r2, [r1]
 80092be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80092c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d1e5      	bne.n	8009292 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	e853 3f00 	ldrex	r3, [r3]
 80092d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092da:	637b      	str	r3, [r7, #52]	; 0x34
 80092dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	461a      	mov	r2, r3
 80092e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e4:	61fb      	str	r3, [r7, #28]
 80092e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e8:	69b9      	ldr	r1, [r7, #24]
 80092ea:	69fa      	ldr	r2, [r7, #28]
 80092ec:	e841 2300 	strex	r3, r2, [r1]
 80092f0:	617b      	str	r3, [r7, #20]
   return(result);
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d1e6      	bne.n	80092c6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80092f8:	e002      	b.n	8009300 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80092fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80092fc:	f7f9 faba 	bl	8002874 <HAL_UART_TxCpltCallback>
}
 8009300:	bf00      	nop
 8009302:	3740      	adds	r7, #64	; 0x40
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009314:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f7ff f9de 	bl	80086d8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800931c:	bf00      	nop
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b086      	sub	sp, #24
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009330:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009338:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009340:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800934c:	2b80      	cmp	r3, #128	; 0x80
 800934e:	d109      	bne.n	8009364 <UART_DMAError+0x40>
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	2b21      	cmp	r3, #33	; 0x21
 8009354:	d106      	bne.n	8009364 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	2200      	movs	r2, #0
 800935a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800935e:	6978      	ldr	r0, [r7, #20]
 8009360:	f7ff fede 	bl	8009120 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800936e:	2b40      	cmp	r3, #64	; 0x40
 8009370:	d109      	bne.n	8009386 <UART_DMAError+0x62>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2b22      	cmp	r3, #34	; 0x22
 8009376:	d106      	bne.n	8009386 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	2200      	movs	r2, #0
 800937c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009380:	6978      	ldr	r0, [r7, #20]
 8009382:	f7ff ff0e 	bl	80091a2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800938c:	f043 0210 	orr.w	r2, r3, #16
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009396:	6978      	ldr	r0, [r7, #20]
 8009398:	f7ff f9a8 	bl	80086ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800939c:	bf00      	nop
 800939e:	3718      	adds	r7, #24
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b084      	sub	sp, #16
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2200      	movs	r2, #0
 80093be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f7ff f992 	bl	80086ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093c8:	bf00      	nop
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b088      	sub	sp, #32
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	e853 3f00 	ldrex	r3, [r3]
 80093e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093ec:	61fb      	str	r3, [r7, #28]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	461a      	mov	r2, r3
 80093f4:	69fb      	ldr	r3, [r7, #28]
 80093f6:	61bb      	str	r3, [r7, #24]
 80093f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093fa:	6979      	ldr	r1, [r7, #20]
 80093fc:	69ba      	ldr	r2, [r7, #24]
 80093fe:	e841 2300 	strex	r3, r2, [r1]
 8009402:	613b      	str	r3, [r7, #16]
   return(result);
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d1e6      	bne.n	80093d8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2220      	movs	r2, #32
 800940e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f7f9 fa2b 	bl	8002874 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800941e:	bf00      	nop
 8009420:	3720      	adds	r7, #32
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}
	...

08009428 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b09c      	sub	sp, #112	; 0x70
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009436:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009440:	2b22      	cmp	r3, #34	; 0x22
 8009442:	f040 80be 	bne.w	80095c2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009450:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009454:	b2d9      	uxtb	r1, r3
 8009456:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800945a:	b2da      	uxtb	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009460:	400a      	ands	r2, r1
 8009462:	b2d2      	uxtb	r2, r2
 8009464:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800946a:	1c5a      	adds	r2, r3, #1
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009476:	b29b      	uxth	r3, r3
 8009478:	3b01      	subs	r3, #1
 800947a:	b29a      	uxth	r2, r3
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009488:	b29b      	uxth	r3, r3
 800948a:	2b00      	cmp	r3, #0
 800948c:	f040 80a1 	bne.w	80095d2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009498:	e853 3f00 	ldrex	r3, [r3]
 800949c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800949e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	461a      	mov	r2, r3
 80094ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80094ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80094b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80094b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094b6:	e841 2300 	strex	r3, r2, [r1]
 80094ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80094bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1e6      	bne.n	8009490 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	3308      	adds	r3, #8
 80094c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094cc:	e853 3f00 	ldrex	r3, [r3]
 80094d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094d4:	f023 0301 	bic.w	r3, r3, #1
 80094d8:	667b      	str	r3, [r7, #100]	; 0x64
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	3308      	adds	r3, #8
 80094e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80094e2:	647a      	str	r2, [r7, #68]	; 0x44
 80094e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094ea:	e841 2300 	strex	r3, r2, [r1]
 80094ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d1e5      	bne.n	80094c2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2220      	movs	r2, #32
 80094fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a33      	ldr	r2, [pc, #204]	; (80095dc <UART_RxISR_8BIT+0x1b4>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d01f      	beq.n	8009554 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	685b      	ldr	r3, [r3, #4]
 800951a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800951e:	2b00      	cmp	r3, #0
 8009520:	d018      	beq.n	8009554 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952a:	e853 3f00 	ldrex	r3, [r3]
 800952e:	623b      	str	r3, [r7, #32]
   return(result);
 8009530:	6a3b      	ldr	r3, [r7, #32]
 8009532:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009536:	663b      	str	r3, [r7, #96]	; 0x60
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	461a      	mov	r2, r3
 800953e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009540:	633b      	str	r3, [r7, #48]	; 0x30
 8009542:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009544:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009548:	e841 2300 	strex	r3, r2, [r1]
 800954c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800954e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009550:	2b00      	cmp	r3, #0
 8009552:	d1e6      	bne.n	8009522 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009558:	2b01      	cmp	r3, #1
 800955a:	d12e      	bne.n	80095ba <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	e853 3f00 	ldrex	r3, [r3]
 800956e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f023 0310 	bic.w	r3, r3, #16
 8009576:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	461a      	mov	r2, r3
 800957e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009580:	61fb      	str	r3, [r7, #28]
 8009582:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009584:	69b9      	ldr	r1, [r7, #24]
 8009586:	69fa      	ldr	r2, [r7, #28]
 8009588:	e841 2300 	strex	r3, r2, [r1]
 800958c:	617b      	str	r3, [r7, #20]
   return(result);
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1e6      	bne.n	8009562 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	69db      	ldr	r3, [r3, #28]
 800959a:	f003 0310 	and.w	r3, r3, #16
 800959e:	2b10      	cmp	r3, #16
 80095a0:	d103      	bne.n	80095aa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2210      	movs	r2, #16
 80095a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80095b0:	4619      	mov	r1, r3
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7ff f8a4 	bl	8008700 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095b8:	e00b      	b.n	80095d2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f7f9 f93c 	bl	8002838 <HAL_UART_RxCpltCallback>
}
 80095c0:	e007      	b.n	80095d2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	699a      	ldr	r2, [r3, #24]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f042 0208 	orr.w	r2, r2, #8
 80095d0:	619a      	str	r2, [r3, #24]
}
 80095d2:	bf00      	nop
 80095d4:	3770      	adds	r7, #112	; 0x70
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	40008000 	.word	0x40008000

080095e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b09c      	sub	sp, #112	; 0x70
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80095ee:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095f8:	2b22      	cmp	r3, #34	; 0x22
 80095fa:	f040 80be 	bne.w	800977a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009604:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800960c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800960e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009612:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009616:	4013      	ands	r3, r2
 8009618:	b29a      	uxth	r2, r3
 800961a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800961c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009622:	1c9a      	adds	r2, r3, #2
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800962e:	b29b      	uxth	r3, r3
 8009630:	3b01      	subs	r3, #1
 8009632:	b29a      	uxth	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009640:	b29b      	uxth	r3, r3
 8009642:	2b00      	cmp	r3, #0
 8009644:	f040 80a1 	bne.w	800978a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009650:	e853 3f00 	ldrex	r3, [r3]
 8009654:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009658:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800965c:	667b      	str	r3, [r7, #100]	; 0x64
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	461a      	mov	r2, r3
 8009664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009666:	657b      	str	r3, [r7, #84]	; 0x54
 8009668:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800966c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800966e:	e841 2300 	strex	r3, r2, [r1]
 8009672:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009676:	2b00      	cmp	r3, #0
 8009678:	d1e6      	bne.n	8009648 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	3308      	adds	r3, #8
 8009680:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009684:	e853 3f00 	ldrex	r3, [r3]
 8009688:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800968a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968c:	f023 0301 	bic.w	r3, r3, #1
 8009690:	663b      	str	r3, [r7, #96]	; 0x60
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	3308      	adds	r3, #8
 8009698:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800969a:	643a      	str	r2, [r7, #64]	; 0x40
 800969c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80096a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096a2:	e841 2300 	strex	r3, r2, [r1]
 80096a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80096a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1e5      	bne.n	800967a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2220      	movs	r2, #32
 80096b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a33      	ldr	r2, [pc, #204]	; (8009794 <UART_RxISR_16BIT+0x1b4>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d01f      	beq.n	800970c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d018      	beq.n	800970c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e0:	6a3b      	ldr	r3, [r7, #32]
 80096e2:	e853 3f00 	ldrex	r3, [r3]
 80096e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80096ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	461a      	mov	r2, r3
 80096f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096fa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009700:	e841 2300 	strex	r3, r2, [r1]
 8009704:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009708:	2b00      	cmp	r3, #0
 800970a:	d1e6      	bne.n	80096da <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009710:	2b01      	cmp	r3, #1
 8009712:	d12e      	bne.n	8009772 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2200      	movs	r2, #0
 8009718:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	e853 3f00 	ldrex	r3, [r3]
 8009726:	60bb      	str	r3, [r7, #8]
   return(result);
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	f023 0310 	bic.w	r3, r3, #16
 800972e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	461a      	mov	r2, r3
 8009736:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009738:	61bb      	str	r3, [r7, #24]
 800973a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973c:	6979      	ldr	r1, [r7, #20]
 800973e:	69ba      	ldr	r2, [r7, #24]
 8009740:	e841 2300 	strex	r3, r2, [r1]
 8009744:	613b      	str	r3, [r7, #16]
   return(result);
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d1e6      	bne.n	800971a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	69db      	ldr	r3, [r3, #28]
 8009752:	f003 0310 	and.w	r3, r3, #16
 8009756:	2b10      	cmp	r3, #16
 8009758:	d103      	bne.n	8009762 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2210      	movs	r2, #16
 8009760:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009768:	4619      	mov	r1, r3
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f7fe ffc8 	bl	8008700 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009770:	e00b      	b.n	800978a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f7f9 f860 	bl	8002838 <HAL_UART_RxCpltCallback>
}
 8009778:	e007      	b.n	800978a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	699a      	ldr	r2, [r3, #24]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f042 0208 	orr.w	r2, r2, #8
 8009788:	619a      	str	r2, [r3, #24]
}
 800978a:	bf00      	nop
 800978c:	3770      	adds	r7, #112	; 0x70
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
 8009792:	bf00      	nop
 8009794:	40008000 	.word	0x40008000

08009798 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b0ac      	sub	sp, #176	; 0xb0
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80097a6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	69db      	ldr	r3, [r3, #28]
 80097b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097ce:	2b22      	cmp	r3, #34	; 0x22
 80097d0:	f040 8182 	bne.w	8009ad8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80097da:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80097de:	e125      	b.n	8009a2c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80097ea:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80097ee:	b2d9      	uxtb	r1, r3
 80097f0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80097f4:	b2da      	uxtb	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097fa:	400a      	ands	r2, r1
 80097fc:	b2d2      	uxtb	r2, r2
 80097fe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009804:	1c5a      	adds	r2, r3, #1
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009810:	b29b      	uxth	r3, r3
 8009812:	3b01      	subs	r3, #1
 8009814:	b29a      	uxth	r2, r3
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	69db      	ldr	r3, [r3, #28]
 8009822:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009826:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800982a:	f003 0307 	and.w	r3, r3, #7
 800982e:	2b00      	cmp	r3, #0
 8009830:	d053      	beq.n	80098da <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009832:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009836:	f003 0301 	and.w	r3, r3, #1
 800983a:	2b00      	cmp	r3, #0
 800983c:	d011      	beq.n	8009862 <UART_RxISR_8BIT_FIFOEN+0xca>
 800983e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00b      	beq.n	8009862 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2201      	movs	r2, #1
 8009850:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009858:	f043 0201 	orr.w	r2, r3, #1
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009862:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009866:	f003 0302 	and.w	r3, r3, #2
 800986a:	2b00      	cmp	r3, #0
 800986c:	d011      	beq.n	8009892 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800986e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009872:	f003 0301 	and.w	r3, r3, #1
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00b      	beq.n	8009892 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2202      	movs	r2, #2
 8009880:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009888:	f043 0204 	orr.w	r2, r3, #4
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009892:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009896:	f003 0304 	and.w	r3, r3, #4
 800989a:	2b00      	cmp	r3, #0
 800989c:	d011      	beq.n	80098c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800989e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80098a2:	f003 0301 	and.w	r3, r3, #1
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d00b      	beq.n	80098c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2204      	movs	r2, #4
 80098b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098b8:	f043 0202 	orr.w	r2, r3, #2
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d006      	beq.n	80098da <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f7fe ff0d 	bl	80086ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	f040 80a2 	bne.w	8009a2c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098f0:	e853 3f00 	ldrex	r3, [r3]
 80098f4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80098f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80098fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	461a      	mov	r2, r3
 8009906:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800990a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800990c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009910:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009912:	e841 2300 	strex	r3, r2, [r1]
 8009916:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009918:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1e4      	bne.n	80098e8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	3308      	adds	r3, #8
 8009924:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009928:	e853 3f00 	ldrex	r3, [r3]
 800992c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800992e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009934:	f023 0301 	bic.w	r3, r3, #1
 8009938:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	3308      	adds	r3, #8
 8009942:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009946:	66ba      	str	r2, [r7, #104]	; 0x68
 8009948:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800994a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800994c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800994e:	e841 2300 	strex	r3, r2, [r1]
 8009952:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009954:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1e1      	bne.n	800991e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2220      	movs	r2, #32
 800995e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a5f      	ldr	r2, [pc, #380]	; (8009af0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d021      	beq.n	80099bc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009982:	2b00      	cmp	r3, #0
 8009984:	d01a      	beq.n	80099bc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800998c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800998e:	e853 3f00 	ldrex	r3, [r3]
 8009992:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009996:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800999a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	461a      	mov	r2, r3
 80099a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80099a8:	657b      	str	r3, [r7, #84]	; 0x54
 80099aa:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80099ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80099b0:	e841 2300 	strex	r3, r2, [r1]
 80099b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80099b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d1e4      	bne.n	8009986 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d130      	bne.n	8009a26 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099d2:	e853 3f00 	ldrex	r3, [r3]
 80099d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80099d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099da:	f023 0310 	bic.w	r3, r3, #16
 80099de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	461a      	mov	r2, r3
 80099e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099ec:	643b      	str	r3, [r7, #64]	; 0x40
 80099ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80099f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099f4:	e841 2300 	strex	r3, r2, [r1]
 80099f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80099fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d1e4      	bne.n	80099ca <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	69db      	ldr	r3, [r3, #28]
 8009a06:	f003 0310 	and.w	r3, r3, #16
 8009a0a:	2b10      	cmp	r3, #16
 8009a0c:	d103      	bne.n	8009a16 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2210      	movs	r2, #16
 8009a14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f7fe fe6e 	bl	8008700 <HAL_UARTEx_RxEventCallback>
 8009a24:	e002      	b.n	8009a2c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f7f8 ff06 	bl	8002838 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a2c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d006      	beq.n	8009a42 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009a34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a38:	f003 0320 	and.w	r3, r3, #32
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f47f aecf 	bne.w	80097e0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a48:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009a4c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d049      	beq.n	8009ae8 <UART_RxISR_8BIT_FIFOEN+0x350>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009a5a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d242      	bcs.n	8009ae8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	3308      	adds	r3, #8
 8009a68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6a:	6a3b      	ldr	r3, [r7, #32]
 8009a6c:	e853 3f00 	ldrex	r3, [r3]
 8009a70:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	3308      	adds	r3, #8
 8009a82:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8009a86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a8e:	e841 2300 	strex	r3, r2, [r1]
 8009a92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d1e3      	bne.n	8009a62 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4a15      	ldr	r2, [pc, #84]	; (8009af4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009a9e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	e853 3f00 	ldrex	r3, [r3]
 8009aac:	60bb      	str	r3, [r7, #8]
   return(result);
 8009aae:	68bb      	ldr	r3, [r7, #8]
 8009ab0:	f043 0320 	orr.w	r3, r3, #32
 8009ab4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	461a      	mov	r2, r3
 8009abe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009ac2:	61bb      	str	r3, [r7, #24]
 8009ac4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac6:	6979      	ldr	r1, [r7, #20]
 8009ac8:	69ba      	ldr	r2, [r7, #24]
 8009aca:	e841 2300 	strex	r3, r2, [r1]
 8009ace:	613b      	str	r3, [r7, #16]
   return(result);
 8009ad0:	693b      	ldr	r3, [r7, #16]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d1e4      	bne.n	8009aa0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ad6:	e007      	b.n	8009ae8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	699a      	ldr	r2, [r3, #24]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f042 0208 	orr.w	r2, r2, #8
 8009ae6:	619a      	str	r2, [r3, #24]
}
 8009ae8:	bf00      	nop
 8009aea:	37b0      	adds	r7, #176	; 0xb0
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	40008000 	.word	0x40008000
 8009af4:	08009429 	.word	0x08009429

08009af8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b0ae      	sub	sp, #184	; 0xb8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009b06:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	69db      	ldr	r3, [r3, #28]
 8009b10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b2e:	2b22      	cmp	r3, #34	; 0x22
 8009b30:	f040 8186 	bne.w	8009e40 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009b3a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b3e:	e129      	b.n	8009d94 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b46:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009b52:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8009b56:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009b62:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b68:	1c9a      	adds	r2, r3, #2
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	3b01      	subs	r3, #1
 8009b78:	b29a      	uxth	r2, r3
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	69db      	ldr	r3, [r3, #28]
 8009b86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009b8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009b8e:	f003 0307 	and.w	r3, r3, #7
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d053      	beq.n	8009c3e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009b96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009b9a:	f003 0301 	and.w	r3, r3, #1
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d011      	beq.n	8009bc6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00b      	beq.n	8009bc6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bbc:	f043 0201 	orr.w	r2, r3, #1
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009bca:	f003 0302 	and.w	r3, r3, #2
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d011      	beq.n	8009bf6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009bd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009bd6:	f003 0301 	and.w	r3, r3, #1
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00b      	beq.n	8009bf6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2202      	movs	r2, #2
 8009be4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bec:	f043 0204 	orr.w	r2, r3, #4
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009bf6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009bfa:	f003 0304 	and.w	r3, r3, #4
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d011      	beq.n	8009c26 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009c02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009c06:	f003 0301 	and.w	r3, r3, #1
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00b      	beq.n	8009c26 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	2204      	movs	r2, #4
 8009c14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c1c:	f043 0202 	orr.w	r2, r3, #2
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d006      	beq.n	8009c3e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f7fe fd5b 	bl	80086ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	f040 80a4 	bne.w	8009d94 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c54:	e853 3f00 	ldrex	r3, [r3]
 8009c58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009c5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	461a      	mov	r2, r3
 8009c6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c72:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009c76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009c7a:	e841 2300 	strex	r3, r2, [r1]
 8009c7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009c80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d1e2      	bne.n	8009c4c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	3308      	adds	r3, #8
 8009c8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c90:	e853 3f00 	ldrex	r3, [r3]
 8009c94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c9c:	f023 0301 	bic.w	r3, r3, #1
 8009ca0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	3308      	adds	r3, #8
 8009caa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009cae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009cb0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009cb4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009cb6:	e841 2300 	strex	r3, r2, [r1]
 8009cba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009cbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1e1      	bne.n	8009c86 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2220      	movs	r2, #32
 8009cc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a5f      	ldr	r2, [pc, #380]	; (8009e58 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d021      	beq.n	8009d24 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d01a      	beq.n	8009d24 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cf6:	e853 3f00 	ldrex	r3, [r3]
 8009cfa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cfe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009d02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009d10:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d12:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009d16:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009d18:	e841 2300 	strex	r3, r2, [r1]
 8009d1c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d1e4      	bne.n	8009cee <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d130      	bne.n	8009d8e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3a:	e853 3f00 	ldrex	r3, [r3]
 8009d3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d42:	f023 0310 	bic.w	r3, r3, #16
 8009d46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	461a      	mov	r2, r3
 8009d50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009d54:	647b      	str	r3, [r7, #68]	; 0x44
 8009d56:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d5c:	e841 2300 	strex	r3, r2, [r1]
 8009d60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1e4      	bne.n	8009d32 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	69db      	ldr	r3, [r3, #28]
 8009d6e:	f003 0310 	and.w	r3, r3, #16
 8009d72:	2b10      	cmp	r3, #16
 8009d74:	d103      	bne.n	8009d7e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2210      	movs	r2, #16
 8009d7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d84:	4619      	mov	r1, r3
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f7fe fcba 	bl	8008700 <HAL_UARTEx_RxEventCallback>
 8009d8c:	e002      	b.n	8009d94 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f7f8 fd52 	bl	8002838 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009d94:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d006      	beq.n	8009daa <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009d9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009da0:	f003 0320 	and.w	r3, r3, #32
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	f47f aecb 	bne.w	8009b40 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009db0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009db4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d049      	beq.n	8009e50 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009dc2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d242      	bcs.n	8009e50 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	3308      	adds	r3, #8
 8009dd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd4:	e853 3f00 	ldrex	r3, [r3]
 8009dd8:	623b      	str	r3, [r7, #32]
   return(result);
 8009dda:	6a3b      	ldr	r3, [r7, #32]
 8009ddc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009de0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	3308      	adds	r3, #8
 8009dea:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009dee:	633a      	str	r2, [r7, #48]	; 0x30
 8009df0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009df6:	e841 2300 	strex	r3, r2, [r1]
 8009dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d1e3      	bne.n	8009dca <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a15      	ldr	r2, [pc, #84]	; (8009e5c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009e06:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	e853 3f00 	ldrex	r3, [r3]
 8009e14:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f043 0320 	orr.w	r3, r3, #32
 8009e1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	461a      	mov	r2, r3
 8009e26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e2a:	61fb      	str	r3, [r7, #28]
 8009e2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2e:	69b9      	ldr	r1, [r7, #24]
 8009e30:	69fa      	ldr	r2, [r7, #28]
 8009e32:	e841 2300 	strex	r3, r2, [r1]
 8009e36:	617b      	str	r3, [r7, #20]
   return(result);
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d1e4      	bne.n	8009e08 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009e3e:	e007      	b.n	8009e50 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	699a      	ldr	r2, [r3, #24]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f042 0208 	orr.w	r2, r2, #8
 8009e4e:	619a      	str	r2, [r3, #24]
}
 8009e50:	bf00      	nop
 8009e52:	37b8      	adds	r7, #184	; 0xb8
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	40008000 	.word	0x40008000
 8009e5c:	080095e1 	.word	0x080095e1

08009e60 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009e68:	bf00      	nop
 8009e6a:	370c      	adds	r7, #12
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009e7c:	bf00      	nop
 8009e7e:	370c      	adds	r7, #12
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009e90:	bf00      	nop
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b085      	sub	sp, #20
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d101      	bne.n	8009eb2 <HAL_UARTEx_DisableFifoMode+0x16>
 8009eae:	2302      	movs	r3, #2
 8009eb0:	e027      	b.n	8009f02 <HAL_UARTEx_DisableFifoMode+0x66>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2224      	movs	r2, #36	; 0x24
 8009ebe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f022 0201 	bic.w	r2, r2, #1
 8009ed8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009ee0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2220      	movs	r2, #32
 8009ef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3714      	adds	r7, #20
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr

08009f0e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f0e:	b580      	push	{r7, lr}
 8009f10:	b084      	sub	sp, #16
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	6078      	str	r0, [r7, #4]
 8009f16:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d101      	bne.n	8009f26 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f22:	2302      	movs	r3, #2
 8009f24:	e02d      	b.n	8009f82 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2201      	movs	r2, #1
 8009f2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2224      	movs	r2, #36	; 0x24
 8009f32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	681a      	ldr	r2, [r3, #0]
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f022 0201 	bic.w	r2, r2, #1
 8009f4c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	683a      	ldr	r2, [r7, #0]
 8009f5e:	430a      	orrs	r2, r1
 8009f60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 f850 	bl	800a008 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	68fa      	ldr	r2, [r7, #12]
 8009f6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2220      	movs	r2, #32
 8009f74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b084      	sub	sp, #16
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d101      	bne.n	8009fa2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009f9e:	2302      	movs	r3, #2
 8009fa0:	e02d      	b.n	8009ffe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2224      	movs	r2, #36	; 0x24
 8009fae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f022 0201 	bic.w	r2, r2, #1
 8009fc8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	683a      	ldr	r2, [r7, #0]
 8009fda:	430a      	orrs	r2, r1
 8009fdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 f812 	bl	800a008 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2220      	movs	r2, #32
 8009ff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009ffc:	2300      	movs	r3, #0
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3710      	adds	r7, #16
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
	...

0800a008 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a014:	2b00      	cmp	r3, #0
 800a016:	d108      	bne.n	800a02a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2201      	movs	r2, #1
 800a01c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a028:	e031      	b.n	800a08e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a02a:	2308      	movs	r3, #8
 800a02c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a02e:	2308      	movs	r3, #8
 800a030:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	689b      	ldr	r3, [r3, #8]
 800a038:	0e5b      	lsrs	r3, r3, #25
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	f003 0307 	and.w	r3, r3, #7
 800a040:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	0f5b      	lsrs	r3, r3, #29
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	f003 0307 	and.w	r3, r3, #7
 800a050:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a052:	7bbb      	ldrb	r3, [r7, #14]
 800a054:	7b3a      	ldrb	r2, [r7, #12]
 800a056:	4911      	ldr	r1, [pc, #68]	; (800a09c <UARTEx_SetNbDataToProcess+0x94>)
 800a058:	5c8a      	ldrb	r2, [r1, r2]
 800a05a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a05e:	7b3a      	ldrb	r2, [r7, #12]
 800a060:	490f      	ldr	r1, [pc, #60]	; (800a0a0 <UARTEx_SetNbDataToProcess+0x98>)
 800a062:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a064:	fb93 f3f2 	sdiv	r3, r3, r2
 800a068:	b29a      	uxth	r2, r3
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a070:	7bfb      	ldrb	r3, [r7, #15]
 800a072:	7b7a      	ldrb	r2, [r7, #13]
 800a074:	4909      	ldr	r1, [pc, #36]	; (800a09c <UARTEx_SetNbDataToProcess+0x94>)
 800a076:	5c8a      	ldrb	r2, [r1, r2]
 800a078:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a07c:	7b7a      	ldrb	r2, [r7, #13]
 800a07e:	4908      	ldr	r1, [pc, #32]	; (800a0a0 <UARTEx_SetNbDataToProcess+0x98>)
 800a080:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a082:	fb93 f3f2 	sdiv	r3, r3, r2
 800a086:	b29a      	uxth	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a08e:	bf00      	nop
 800a090:	3714      	adds	r7, #20
 800a092:	46bd      	mov	sp, r7
 800a094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a098:	4770      	bx	lr
 800a09a:	bf00      	nop
 800a09c:	08010ea4 	.word	0x08010ea4
 800a0a0:	08010eac 	.word	0x08010eac

0800a0a4 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b0cc      	sub	sp, #304	; 0x130
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0b0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a0b4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800a0b6:	f107 0310 	add.w	r3, r7, #16
 800a0ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a0be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0c2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800a0d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a0d8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a0dc:	7812      	ldrb	r2, [r2, #0]
 800a0de:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a0e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a0e4:	3301      	adds	r3, #1
 800a0e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a0ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a0ee:	2218      	movs	r2, #24
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f001 fb1c 	bl	800b730 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a0f8:	233f      	movs	r3, #63	; 0x3f
 800a0fa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800a0fe:	2385      	movs	r3, #133	; 0x85
 800a100:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a104:	f107 0310 	add.w	r3, r7, #16
 800a108:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a10c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a110:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a114:	f107 030f 	add.w	r3, r7, #15
 800a118:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a11c:	2301      	movs	r3, #1
 800a11e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a122:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a126:	2100      	movs	r1, #0
 800a128:	4618      	mov	r0, r3
 800a12a:	f001 f9bf 	bl	800b4ac <hci_send_req>
 800a12e:	4603      	mov	r3, r0
 800a130:	2b00      	cmp	r3, #0
 800a132:	da01      	bge.n	800a138 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800a134:	23ff      	movs	r3, #255	; 0xff
 800a136:	e004      	b.n	800a142 <aci_gap_set_io_capability+0x9e>
  return status;
 800a138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a13c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a140:	781b      	ldrb	r3, [r3, #0]
}
 800a142:	4618      	mov	r0, r3
 800a144:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800a14c:	b5b0      	push	{r4, r5, r7, lr}
 800a14e:	b0cc      	sub	sp, #304	; 0x130
 800a150:	af00      	add	r7, sp, #0
 800a152:	4605      	mov	r5, r0
 800a154:	460c      	mov	r4, r1
 800a156:	4610      	mov	r0, r2
 800a158:	4619      	mov	r1, r3
 800a15a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a15e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a162:	462a      	mov	r2, r5
 800a164:	701a      	strb	r2, [r3, #0]
 800a166:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a16a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a16e:	4622      	mov	r2, r4
 800a170:	701a      	strb	r2, [r3, #0]
 800a172:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a176:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800a17a:	4602      	mov	r2, r0
 800a17c:	701a      	strb	r2, [r3, #0]
 800a17e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a182:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a186:	460a      	mov	r2, r1
 800a188:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800a18a:	f107 0310 	add.w	r3, r7, #16
 800a18e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a196:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a19a:	2200      	movs	r2, #0
 800a19c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800a1a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a1ac:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a1b0:	7812      	ldrb	r2, [r2, #0]
 800a1b2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a1b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800a1be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a1c6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a1ca:	7812      	ldrb	r2, [r2, #0]
 800a1cc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a1ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800a1d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a1e0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800a1e4:	7812      	ldrb	r2, [r2, #0]
 800a1e6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a1e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800a1f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a1fa:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a1fe:	7812      	ldrb	r2, [r2, #0]
 800a200:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800a202:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a206:	3301      	adds	r3, #1
 800a208:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800a20c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a210:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800a214:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a216:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a21a:	3301      	adds	r3, #1
 800a21c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800a220:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a224:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800a228:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a22a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a22e:	3301      	adds	r3, #1
 800a230:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800a234:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a238:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800a23c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800a23e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a242:	3301      	adds	r3, #1
 800a244:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800a248:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a24c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800a250:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800a254:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a258:	3304      	adds	r3, #4
 800a25a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800a25e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a262:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800a266:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800a268:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a26c:	3301      	adds	r3, #1
 800a26e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a272:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a276:	2218      	movs	r2, #24
 800a278:	2100      	movs	r1, #0
 800a27a:	4618      	mov	r0, r3
 800a27c:	f001 fa58 	bl	800b730 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a280:	233f      	movs	r3, #63	; 0x3f
 800a282:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800a286:	2386      	movs	r3, #134	; 0x86
 800a288:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a28c:	f107 0310 	add.w	r3, r7, #16
 800a290:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a294:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a298:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a29c:	f107 030f 	add.w	r3, r7, #15
 800a2a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a2aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a2ae:	2100      	movs	r1, #0
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	f001 f8fb 	bl	800b4ac <hci_send_req>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	da01      	bge.n	800a2c0 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800a2bc:	23ff      	movs	r3, #255	; 0xff
 800a2be:	e004      	b.n	800a2ca <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800a2c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2c4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a2c8:	781b      	ldrb	r3, [r3, #0]
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bdb0      	pop	{r4, r5, r7, pc}

0800a2d4 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800a2d4:	b590      	push	{r4, r7, lr}
 800a2d6:	b0cd      	sub	sp, #308	; 0x134
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	4604      	mov	r4, r0
 800a2dc:	4608      	mov	r0, r1
 800a2de:	4611      	mov	r1, r2
 800a2e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a2e4:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800a2e8:	6013      	str	r3, [r2, #0]
 800a2ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2ee:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a2f2:	4622      	mov	r2, r4
 800a2f4:	701a      	strb	r2, [r3, #0]
 800a2f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2fa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a2fe:	4602      	mov	r2, r0
 800a300:	701a      	strb	r2, [r3, #0]
 800a302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a306:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800a30a:	460a      	mov	r2, r1
 800a30c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800a30e:	f107 0310 	add.w	r3, r7, #16
 800a312:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a316:	f107 0308 	add.w	r3, r7, #8
 800a31a:	2207      	movs	r2, #7
 800a31c:	2100      	movs	r1, #0
 800a31e:	4618      	mov	r0, r3
 800a320:	f001 fa06 	bl	800b730 <Osal_MemSet>
  int index_input = 0;
 800a324:	2300      	movs	r3, #0
 800a326:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800a32a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a32e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a332:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a336:	7812      	ldrb	r2, [r2, #0]
 800a338:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a33a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a33e:	3301      	adds	r3, #1
 800a340:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800a344:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a348:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a34c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a350:	7812      	ldrb	r2, [r2, #0]
 800a352:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a354:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a358:	3301      	adds	r3, #1
 800a35a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800a35e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a362:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a366:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800a36a:	7812      	ldrb	r2, [r2, #0]
 800a36c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a36e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a372:	3301      	adds	r3, #1
 800a374:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a378:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a37c:	2218      	movs	r2, #24
 800a37e:	2100      	movs	r1, #0
 800a380:	4618      	mov	r0, r3
 800a382:	f001 f9d5 	bl	800b730 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a386:	233f      	movs	r3, #63	; 0x3f
 800a388:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800a38c:	238a      	movs	r3, #138	; 0x8a
 800a38e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a392:	f107 0310 	add.w	r3, r7, #16
 800a396:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a39a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a39e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800a3a2:	f107 0308 	add.w	r3, r7, #8
 800a3a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800a3aa:	2307      	movs	r3, #7
 800a3ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a3b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f001 f878 	bl	800b4ac <hci_send_req>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	da01      	bge.n	800a3c6 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800a3c2:	23ff      	movs	r3, #255	; 0xff
 800a3c4:	e02e      	b.n	800a424 <aci_gap_init+0x150>
  if ( resp.Status )
 800a3c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a3ce:	781b      	ldrb	r3, [r3, #0]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d005      	beq.n	800a3e0 <aci_gap_init+0x10c>
    return resp.Status;
 800a3d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3d8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	e021      	b.n	800a424 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800a3e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3e4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a3e8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a3ec:	b29a      	uxth	r2, r3
 800a3ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800a3fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a402:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a406:	b29a      	uxth	r2, r3
 800a408:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800a40c:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800a40e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a412:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a416:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800a420:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a422:	2300      	movs	r3, #0
}
 800a424:	4618      	mov	r0, r3
 800a426:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd90      	pop	{r4, r7, pc}

0800a42e <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800a42e:	b580      	push	{r7, lr}
 800a430:	b088      	sub	sp, #32
 800a432:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a434:	2300      	movs	r3, #0
 800a436:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a438:	f107 0308 	add.w	r3, r7, #8
 800a43c:	2218      	movs	r2, #24
 800a43e:	2100      	movs	r1, #0
 800a440:	4618      	mov	r0, r3
 800a442:	f001 f975 	bl	800b730 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a446:	233f      	movs	r3, #63	; 0x3f
 800a448:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800a44a:	2392      	movs	r3, #146	; 0x92
 800a44c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a44e:	1dfb      	adds	r3, r7, #7
 800a450:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a452:	2301      	movs	r3, #1
 800a454:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a456:	f107 0308 	add.w	r3, r7, #8
 800a45a:	2100      	movs	r1, #0
 800a45c:	4618      	mov	r0, r3
 800a45e:	f001 f825 	bl	800b4ac <hci_send_req>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	da01      	bge.n	800a46c <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a468:	23ff      	movs	r3, #255	; 0xff
 800a46a:	e000      	b.n	800a46e <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800a46c:	79fb      	ldrb	r3, [r7, #7]
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3720      	adds	r7, #32
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}

0800a476 <aci_gap_start_general_discovery_proc>:

tBleStatus aci_gap_start_general_discovery_proc( uint16_t LE_Scan_Interval,
                                                 uint16_t LE_Scan_Window,
                                                 uint8_t Own_Address_Type,
                                                 uint8_t Filter_Duplicates )
{
 800a476:	b5b0      	push	{r4, r5, r7, lr}
 800a478:	b0cc      	sub	sp, #304	; 0x130
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	4605      	mov	r5, r0
 800a47e:	460c      	mov	r4, r1
 800a480:	4610      	mov	r0, r2
 800a482:	4619      	mov	r1, r3
 800a484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a488:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a48c:	462a      	mov	r2, r5
 800a48e:	801a      	strh	r2, [r3, #0]
 800a490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a494:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a498:	4622      	mov	r2, r4
 800a49a:	801a      	strh	r2, [r3, #0]
 800a49c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4a0:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	701a      	strb	r2, [r3, #0]
 800a4a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4ac:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800a4b0:	460a      	mov	r2, r1
 800a4b2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_general_discovery_proc_cp0 *cp0 = (aci_gap_start_general_discovery_proc_cp0*)(cmd_buffer);
 800a4b4:	f107 0310 	add.w	r3, r7, #16
 800a4b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a4bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4c0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 800a4ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a4d6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a4da:	8812      	ldrh	r2, [r2, #0]
 800a4dc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a4de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a4e2:	3302      	adds	r3, #2
 800a4e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Window = LE_Scan_Window;
 800a4e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4ec:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a4f0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a4f4:	8812      	ldrh	r2, [r2, #0]
 800a4f6:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a4f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a4fc:	3302      	adds	r3, #2
 800a4fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800a502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a506:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a50a:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800a50e:	7812      	ldrb	r2, [r2, #0]
 800a510:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a512:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a516:	3301      	adds	r3, #1
 800a518:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Filter_Duplicates = Filter_Duplicates;
 800a51c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a520:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a524:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800a528:	7812      	ldrb	r2, [r2, #0]
 800a52a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a52c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a530:	3301      	adds	r3, #1
 800a532:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a536:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a53a:	2218      	movs	r2, #24
 800a53c:	2100      	movs	r1, #0
 800a53e:	4618      	mov	r0, r3
 800a540:	f001 f8f6 	bl	800b730 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a544:	233f      	movs	r3, #63	; 0x3f
 800a546:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x097;
 800a54a:	2397      	movs	r3, #151	; 0x97
 800a54c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800a550:	230f      	movs	r3, #15
 800a552:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800a556:	f107 0310 	add.w	r3, r7, #16
 800a55a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a55e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a562:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a566:	f107 030f 	add.w	r3, r7, #15
 800a56a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a56e:	2301      	movs	r3, #1
 800a570:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a574:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a578:	2100      	movs	r1, #0
 800a57a:	4618      	mov	r0, r3
 800a57c:	f000 ff96 	bl	800b4ac <hci_send_req>
 800a580:	4603      	mov	r3, r0
 800a582:	2b00      	cmp	r3, #0
 800a584:	da01      	bge.n	800a58a <aci_gap_start_general_discovery_proc+0x114>
    return BLE_STATUS_TIMEOUT;
 800a586:	23ff      	movs	r3, #255	; 0xff
 800a588:	e004      	b.n	800a594 <aci_gap_start_general_discovery_proc+0x11e>
  return status;
 800a58a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a58e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a592:	781b      	ldrb	r3, [r3, #0]
}
 800a594:	4618      	mov	r0, r3
 800a596:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bdb0      	pop	{r4, r5, r7, pc}

0800a59e <aci_gap_create_connection>:
                                      uint16_t Conn_Interval_Max,
                                      uint16_t Conn_Latency,
                                      uint16_t Supervision_Timeout,
                                      uint16_t Minimum_CE_Length,
                                      uint16_t Maximum_CE_Length )
{
 800a59e:	b590      	push	{r4, r7, lr}
 800a5a0:	b0cf      	sub	sp, #316	; 0x13c
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	4604      	mov	r4, r0
 800a5a6:	4608      	mov	r0, r1
 800a5a8:	4611      	mov	r1, r2
 800a5aa:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a5ae:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a5b2:	6013      	str	r3, [r2, #0]
 800a5b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a5b8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a5bc:	4622      	mov	r2, r4
 800a5be:	801a      	strh	r2, [r3, #0]
 800a5c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a5c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a5c8:	4602      	mov	r2, r0
 800a5ca:	801a      	strh	r2, [r3, #0]
 800a5cc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a5d0:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800a5d4:	460a      	mov	r2, r1
 800a5d6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_create_connection_cp0 *cp0 = (aci_gap_create_connection_cp0*)(cmd_buffer);
 800a5d8:	f107 0318 	add.w	r3, r7, #24
 800a5dc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800a5e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a5e4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 800a5f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a5f6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a5fa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a5fe:	8812      	ldrh	r2, [r2, #0]
 800a600:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a602:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a606:	3302      	adds	r3, #2
 800a608:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->LE_Scan_Window = LE_Scan_Window;
 800a60c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a610:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a614:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a618:	8812      	ldrh	r2, [r2, #0]
 800a61a:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a61c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a620:	3302      	adds	r3, #2
 800a622:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Peer_Address_Type = Peer_Address_Type;
 800a626:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a62a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a62e:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800a632:	7812      	ldrb	r2, [r2, #0]
 800a634:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a636:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a63a:	3301      	adds	r3, #1
 800a63c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Peer_Address, (const void*)Peer_Address, 6 );
 800a640:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a644:	1d58      	adds	r0, r3, #5
 800a646:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a64a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800a64e:	2206      	movs	r2, #6
 800a650:	6819      	ldr	r1, [r3, #0]
 800a652:	f001 f85d 	bl	800b710 <Osal_MemCpy>
  index_input += 6;
 800a656:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a65a:	3306      	adds	r3, #6
 800a65c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Own_Address_Type = Own_Address_Type;
 800a660:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a664:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800a668:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800a66a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a66e:	3301      	adds	r3, #1
 800a670:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 800a674:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a678:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 800a67c:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 800a67e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a682:	3302      	adds	r3, #2
 800a684:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 800a688:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a68c:	f8b7 2150 	ldrh.w	r2, [r7, #336]	; 0x150
 800a690:	81da      	strh	r2, [r3, #14]
  index_input += 2;
 800a692:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a696:	3302      	adds	r3, #2
 800a698:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Conn_Latency = Conn_Latency;
 800a69c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a6a0:	f8b7 2154 	ldrh.w	r2, [r7, #340]	; 0x154
 800a6a4:	821a      	strh	r2, [r3, #16]
  index_input += 2;
 800a6a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a6aa:	3302      	adds	r3, #2
 800a6ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Supervision_Timeout = Supervision_Timeout;
 800a6b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a6b4:	f8b7 2158 	ldrh.w	r2, [r7, #344]	; 0x158
 800a6b8:	825a      	strh	r2, [r3, #18]
  index_input += 2;
 800a6ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a6be:	3302      	adds	r3, #2
 800a6c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 800a6c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a6c8:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800a6cc:	829a      	strh	r2, [r3, #20]
  index_input += 2;
 800a6ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a6d2:	3302      	adds	r3, #2
 800a6d4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 800a6d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800a6dc:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800a6e0:	82da      	strh	r2, [r3, #22]
  index_input += 2;
 800a6e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a6e6:	3302      	adds	r3, #2
 800a6e8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a6ec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a6f0:	2218      	movs	r2, #24
 800a6f2:	2100      	movs	r1, #0
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f001 f81b 	bl	800b730 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a6fa:	233f      	movs	r3, #63	; 0x3f
 800a6fc:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x09c;
 800a700:	239c      	movs	r3, #156	; 0x9c
 800a702:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 800a706:	230f      	movs	r3, #15
 800a708:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 800a70c:	f107 0318 	add.w	r3, r7, #24
 800a710:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800a714:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a718:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800a71c:	f107 0317 	add.w	r3, r7, #23
 800a720:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 800a724:	2301      	movs	r3, #1
 800a726:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a72a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800a72e:	2100      	movs	r1, #0
 800a730:	4618      	mov	r0, r3
 800a732:	f000 febb 	bl	800b4ac <hci_send_req>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	da01      	bge.n	800a740 <aci_gap_create_connection+0x1a2>
    return BLE_STATUS_TIMEOUT;
 800a73c:	23ff      	movs	r3, #255	; 0xff
 800a73e:	e004      	b.n	800a74a <aci_gap_create_connection+0x1ac>
  return status;
 800a740:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a744:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a748:	781b      	ldrb	r3, [r3, #0]
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800a750:	46bd      	mov	sp, r7
 800a752:	bd90      	pop	{r4, r7, pc}

0800a754 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b088      	sub	sp, #32
 800a758:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a75a:	2300      	movs	r3, #0
 800a75c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a75e:	f107 0308 	add.w	r3, r7, #8
 800a762:	2218      	movs	r2, #24
 800a764:	2100      	movs	r1, #0
 800a766:	4618      	mov	r0, r3
 800a768:	f000 ffe2 	bl	800b730 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a76c:	233f      	movs	r3, #63	; 0x3f
 800a76e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800a770:	f240 1301 	movw	r3, #257	; 0x101
 800a774:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a776:	1dfb      	adds	r3, r7, #7
 800a778:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a77a:	2301      	movs	r3, #1
 800a77c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a77e:	f107 0308 	add.w	r3, r7, #8
 800a782:	2100      	movs	r1, #0
 800a784:	4618      	mov	r0, r3
 800a786:	f000 fe91 	bl	800b4ac <hci_send_req>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	da01      	bge.n	800a794 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800a790:	23ff      	movs	r3, #255	; 0xff
 800a792:	e000      	b.n	800a796 <aci_gatt_init+0x42>
  return status;
 800a794:	79fb      	ldrb	r3, [r7, #7]
}
 800a796:	4618      	mov	r0, r3
 800a798:	3720      	adds	r7, #32
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800a79e:	b5b0      	push	{r4, r5, r7, lr}
 800a7a0:	b0cc      	sub	sp, #304	; 0x130
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	4605      	mov	r5, r0
 800a7a6:	460c      	mov	r4, r1
 800a7a8:	4610      	mov	r0, r2
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7b0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a7b4:	462a      	mov	r2, r5
 800a7b6:	801a      	strh	r2, [r3, #0]
 800a7b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a7c0:	4622      	mov	r2, r4
 800a7c2:	801a      	strh	r2, [r3, #0]
 800a7c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7c8:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	701a      	strb	r2, [r3, #0]
 800a7d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7d4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800a7d8:	460a      	mov	r2, r1
 800a7da:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800a7dc:	f107 0310 	add.w	r3, r7, #16
 800a7e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a7e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7e8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800a7f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a7fe:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a802:	8812      	ldrh	r2, [r2, #0]
 800a804:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a806:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a80a:	3302      	adds	r3, #2
 800a80c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800a810:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a814:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a818:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a81c:	8812      	ldrh	r2, [r2, #0]
 800a81e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800a820:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a824:	3302      	adds	r3, #2
 800a826:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800a82a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a82e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a832:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800a836:	7812      	ldrb	r2, [r2, #0]
 800a838:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a83a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a83e:	3301      	adds	r3, #1
 800a840:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800a844:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a848:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a84c:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800a850:	7812      	ldrb	r2, [r2, #0]
 800a852:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a854:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a858:	3301      	adds	r3, #1
 800a85a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800a85e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a862:	1d98      	adds	r0, r3, #6
 800a864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a868:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	461a      	mov	r2, r3
 800a870:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800a874:	f000 ff4c 	bl	800b710 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800a878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a87c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a886:	4413      	add	r3, r2
 800a888:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a88c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a890:	2218      	movs	r2, #24
 800a892:	2100      	movs	r1, #0
 800a894:	4618      	mov	r0, r3
 800a896:	f000 ff4b 	bl	800b730 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a89a:	233f      	movs	r3, #63	; 0x3f
 800a89c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800a8a0:	f44f 7383 	mov.w	r3, #262	; 0x106
 800a8a4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a8a8:	f107 0310 	add.w	r3, r7, #16
 800a8ac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a8b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a8b8:	f107 030f 	add.w	r3, r7, #15
 800a8bc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a8c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a8ca:	2100      	movs	r1, #0
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f000 fded 	bl	800b4ac <hci_send_req>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	da01      	bge.n	800a8dc <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800a8d8:	23ff      	movs	r3, #255	; 0xff
 800a8da:	e004      	b.n	800a8e6 <aci_gatt_update_char_value+0x148>
  return status;
 800a8dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8e0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a8e4:	781b      	ldrb	r3, [r3, #0]
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bdb0      	pop	{r4, r5, r7, pc}

0800a8f0 <aci_gatt_disc_all_primary_services>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_disc_all_primary_services( uint16_t Connection_Handle )
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b0cc      	sub	sp, #304	; 0x130
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	4602      	mov	r2, r0
 800a8f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8fc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a900:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_primary_services_cp0 *cp0 = (aci_gatt_disc_all_primary_services_cp0*)(cmd_buffer);
 800a902:	f107 0310 	add.w	r3, r7, #16
 800a906:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a90a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a90e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a912:	2200      	movs	r2, #0
 800a914:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a916:	2300      	movs	r3, #0
 800a918:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a91c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a920:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a924:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a928:	8812      	ldrh	r2, [r2, #0]
 800a92a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a92c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a930:	3302      	adds	r3, #2
 800a932:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a936:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a93a:	2218      	movs	r2, #24
 800a93c:	2100      	movs	r1, #0
 800a93e:	4618      	mov	r0, r3
 800a940:	f000 fef6 	bl	800b730 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a944:	233f      	movs	r3, #63	; 0x3f
 800a946:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x112;
 800a94a:	f44f 7389 	mov.w	r3, #274	; 0x112
 800a94e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800a952:	230f      	movs	r3, #15
 800a954:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800a958:	f107 0310 	add.w	r3, r7, #16
 800a95c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a960:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a964:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a968:	f107 030f 	add.w	r3, r7, #15
 800a96c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a970:	2301      	movs	r3, #1
 800a972:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a976:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a97a:	2100      	movs	r1, #0
 800a97c:	4618      	mov	r0, r3
 800a97e:	f000 fd95 	bl	800b4ac <hci_send_req>
 800a982:	4603      	mov	r3, r0
 800a984:	2b00      	cmp	r3, #0
 800a986:	da01      	bge.n	800a98c <aci_gatt_disc_all_primary_services+0x9c>
    return BLE_STATUS_TIMEOUT;
 800a988:	23ff      	movs	r3, #255	; 0xff
 800a98a:	e004      	b.n	800a996 <aci_gatt_disc_all_primary_services+0xa6>
  return status;
 800a98c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a990:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a994:	781b      	ldrb	r3, [r3, #0]
}
 800a996:	4618      	mov	r0, r3
 800a998:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <aci_gatt_disc_all_char_of_service>:
}

tBleStatus aci_gatt_disc_all_char_of_service( uint16_t Connection_Handle,
                                              uint16_t Start_Handle,
                                              uint16_t End_Handle )
{
 800a9a0:	b590      	push	{r4, r7, lr}
 800a9a2:	b0cd      	sub	sp, #308	; 0x134
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	4604      	mov	r4, r0
 800a9a8:	4608      	mov	r0, r1
 800a9aa:	4611      	mov	r1, r2
 800a9ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9b0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a9b4:	4622      	mov	r2, r4
 800a9b6:	801a      	strh	r2, [r3, #0]
 800a9b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	801a      	strh	r2, [r3, #0]
 800a9c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9c8:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800a9cc:	460a      	mov	r2, r1
 800a9ce:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_of_service_cp0 *cp0 = (aci_gatt_disc_all_char_of_service_cp0*)(cmd_buffer);
 800a9d0:	f107 0310 	add.w	r3, r7, #16
 800a9d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a9d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9dc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a9ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a9f2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a9f6:	8812      	ldrh	r2, [r2, #0]
 800a9f8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a9fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a9fe:	3302      	adds	r3, #2
 800aa00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Start_Handle = Start_Handle;
 800aa04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa08:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800aa0c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800aa10:	8812      	ldrh	r2, [r2, #0]
 800aa12:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800aa14:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa18:	3302      	adds	r3, #2
 800aa1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 800aa1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa22:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800aa26:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800aa2a:	8812      	ldrh	r2, [r2, #0]
 800aa2c:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800aa2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa32:	3302      	adds	r3, #2
 800aa34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800aa38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aa3c:	2218      	movs	r2, #24
 800aa3e:	2100      	movs	r1, #0
 800aa40:	4618      	mov	r0, r3
 800aa42:	f000 fe75 	bl	800b730 <Osal_MemSet>
  rq.ogf = 0x3f;
 800aa46:	233f      	movs	r3, #63	; 0x3f
 800aa48:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x115;
 800aa4c:	f240 1315 	movw	r3, #277	; 0x115
 800aa50:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800aa54:	230f      	movs	r3, #15
 800aa56:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800aa5a:	f107 0310 	add.w	r3, r7, #16
 800aa5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800aa62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aa66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800aa6a:	f107 030f 	add.w	r3, r7, #15
 800aa6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800aa72:	2301      	movs	r3, #1
 800aa74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800aa78:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aa7c:	2100      	movs	r1, #0
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f000 fd14 	bl	800b4ac <hci_send_req>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	da01      	bge.n	800aa8e <aci_gatt_disc_all_char_of_service+0xee>
    return BLE_STATUS_TIMEOUT;
 800aa8a:	23ff      	movs	r3, #255	; 0xff
 800aa8c:	e004      	b.n	800aa98 <aci_gatt_disc_all_char_of_service+0xf8>
  return status;
 800aa8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa92:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800aa96:	781b      	ldrb	r3, [r3, #0]
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd90      	pop	{r4, r7, pc}

0800aaa2 <aci_gatt_disc_all_char_desc>:
}

tBleStatus aci_gatt_disc_all_char_desc( uint16_t Connection_Handle,
                                        uint16_t Char_Handle,
                                        uint16_t End_Handle )
{
 800aaa2:	b590      	push	{r4, r7, lr}
 800aaa4:	b0cd      	sub	sp, #308	; 0x134
 800aaa6:	af00      	add	r7, sp, #0
 800aaa8:	4604      	mov	r4, r0
 800aaaa:	4608      	mov	r0, r1
 800aaac:	4611      	mov	r1, r2
 800aaae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aab2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800aab6:	4622      	mov	r2, r4
 800aab8:	801a      	strh	r2, [r3, #0]
 800aaba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aabe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aac2:	4602      	mov	r2, r0
 800aac4:	801a      	strh	r2, [r3, #0]
 800aac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aaca:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800aace:	460a      	mov	r2, r1
 800aad0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_disc_all_char_desc_cp0 *cp0 = (aci_gatt_disc_all_char_desc_cp0*)(cmd_buffer);
 800aad2:	f107 0310 	add.w	r3, r7, #16
 800aad6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800aada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aade:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800aae2:	2200      	movs	r2, #0
 800aae4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800aae6:	2300      	movs	r3, #0
 800aae8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800aaec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aaf0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800aaf4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800aaf8:	8812      	ldrh	r2, [r2, #0]
 800aafa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800aafc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab00:	3302      	adds	r3, #2
 800ab02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800ab06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ab0e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800ab12:	8812      	ldrh	r2, [r2, #0]
 800ab14:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800ab16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab1a:	3302      	adds	r3, #2
 800ab1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->End_Handle = End_Handle;
 800ab20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab24:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ab28:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800ab2c:	8812      	ldrh	r2, [r2, #0]
 800ab2e:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800ab30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab34:	3302      	adds	r3, #2
 800ab36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ab3a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ab3e:	2218      	movs	r2, #24
 800ab40:	2100      	movs	r1, #0
 800ab42:	4618      	mov	r0, r3
 800ab44:	f000 fdf4 	bl	800b730 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ab48:	233f      	movs	r3, #63	; 0x3f
 800ab4a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x117;
 800ab4e:	f240 1317 	movw	r3, #279	; 0x117
 800ab52:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800ab56:	230f      	movs	r3, #15
 800ab58:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800ab5c:	f107 0310 	add.w	r3, r7, #16
 800ab60:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ab64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ab68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ab6c:	f107 030f 	add.w	r3, r7, #15
 800ab70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ab74:	2301      	movs	r3, #1
 800ab76:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ab7a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ab7e:	2100      	movs	r1, #0
 800ab80:	4618      	mov	r0, r3
 800ab82:	f000 fc93 	bl	800b4ac <hci_send_req>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	da01      	bge.n	800ab90 <aci_gatt_disc_all_char_desc+0xee>
    return BLE_STATUS_TIMEOUT;
 800ab8c:	23ff      	movs	r3, #255	; 0xff
 800ab8e:	e004      	b.n	800ab9a <aci_gatt_disc_all_char_desc+0xf8>
  return status;
 800ab90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab94:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ab98:	781b      	ldrb	r3, [r3, #0]
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd90      	pop	{r4, r7, pc}

0800aba4 <aci_gatt_write_char_desc>:

tBleStatus aci_gatt_write_char_desc( uint16_t Connection_Handle,
                                     uint16_t Attr_Handle,
                                     uint8_t Attribute_Val_Length,
                                     const uint8_t* Attribute_Val )
{
 800aba4:	b590      	push	{r4, r7, lr}
 800aba6:	b0cf      	sub	sp, #316	; 0x13c
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	4604      	mov	r4, r0
 800abac:	4608      	mov	r0, r1
 800abae:	4611      	mov	r1, r2
 800abb0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800abb4:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800abb8:	6013      	str	r3, [r2, #0]
 800abba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800abbe:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800abc2:	4622      	mov	r2, r4
 800abc4:	801a      	strh	r2, [r3, #0]
 800abc6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800abca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800abce:	4602      	mov	r2, r0
 800abd0:	801a      	strh	r2, [r3, #0]
 800abd2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800abd6:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800abda:	460a      	mov	r2, r1
 800abdc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_char_desc_cp0 *cp0 = (aci_gatt_write_char_desc_cp0*)(cmd_buffer);
 800abde:	f107 0318 	add.w	r3, r7, #24
 800abe2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800abe6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800abea:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800abee:	2200      	movs	r2, #0
 800abf0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800abf2:	2300      	movs	r3, #0
 800abf4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800abf8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800abfc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ac00:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ac04:	8812      	ldrh	r2, [r2, #0]
 800ac06:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ac08:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ac0c:	3302      	adds	r3, #2
 800ac0e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = Attr_Handle;
 800ac12:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ac16:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ac1a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800ac1e:	8812      	ldrh	r2, [r2, #0]
 800ac20:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800ac22:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ac26:	3302      	adds	r3, #2
 800ac28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 800ac2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ac30:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ac34:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800ac38:	7812      	ldrb	r2, [r2, #0]
 800ac3a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800ac3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ac40:	3301      	adds	r3, #1
 800ac42:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 800ac46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ac4a:	1d58      	adds	r0, r3, #5
 800ac4c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ac50:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800ac54:	781a      	ldrb	r2, [r3, #0]
 800ac56:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ac5a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ac5e:	6819      	ldr	r1, [r3, #0]
 800ac60:	f000 fd56 	bl	800b710 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 800ac64:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ac68:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800ac72:	4413      	add	r3, r2
 800ac74:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ac78:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ac7c:	2218      	movs	r2, #24
 800ac7e:	2100      	movs	r1, #0
 800ac80:	4618      	mov	r0, r3
 800ac82:	f000 fd55 	bl	800b730 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ac86:	233f      	movs	r3, #63	; 0x3f
 800ac88:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x121;
 800ac8c:	f240 1321 	movw	r3, #289	; 0x121
 800ac90:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.event = 0x0F;
 800ac94:	230f      	movs	r3, #15
 800ac96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.cparam = cmd_buffer;
 800ac9a:	f107 0318 	add.w	r3, r7, #24
 800ac9e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800aca2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aca6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800acaa:	f107 0317 	add.w	r3, r7, #23
 800acae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 800acb2:	2301      	movs	r3, #1
 800acb4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800acb8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800acbc:	2100      	movs	r1, #0
 800acbe:	4618      	mov	r0, r3
 800acc0:	f000 fbf4 	bl	800b4ac <hci_send_req>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	da01      	bge.n	800acce <aci_gatt_write_char_desc+0x12a>
    return BLE_STATUS_TIMEOUT;
 800acca:	23ff      	movs	r3, #255	; 0xff
 800accc:	e004      	b.n	800acd8 <aci_gatt_write_char_desc+0x134>
  return status;
 800acce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800acd2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800acd6:	781b      	ldrb	r3, [r3, #0]
}
 800acd8:	4618      	mov	r0, r3
 800acda:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd90      	pop	{r4, r7, pc}

0800ace2 <aci_gatt_write_without_resp>:

tBleStatus aci_gatt_write_without_resp( uint16_t Connection_Handle,
                                        uint16_t Attr_Handle,
                                        uint8_t Attribute_Val_Length,
                                        const uint8_t* Attribute_Val )
{
 800ace2:	b590      	push	{r4, r7, lr}
 800ace4:	b0cf      	sub	sp, #316	; 0x13c
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	4604      	mov	r4, r0
 800acea:	4608      	mov	r0, r1
 800acec:	4611      	mov	r1, r2
 800acee:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800acf2:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800acf6:	6013      	str	r3, [r2, #0]
 800acf8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800acfc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ad00:	4622      	mov	r2, r4
 800ad02:	801a      	strh	r2, [r3, #0]
 800ad04:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ad08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	801a      	strh	r2, [r3, #0]
 800ad10:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ad14:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800ad18:	460a      	mov	r2, r1
 800ad1a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_write_without_resp_cp0 *cp0 = (aci_gatt_write_without_resp_cp0*)(cmd_buffer);
 800ad1c:	f107 0318 	add.w	r3, r7, #24
 800ad20:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  tBleStatus status = 0;
 800ad24:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ad28:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ad30:	2300      	movs	r3, #0
 800ad32:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800ad36:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ad3a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ad3e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ad42:	8812      	ldrh	r2, [r2, #0]
 800ad44:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ad46:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ad4a:	3302      	adds	r3, #2
 800ad4c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attr_Handle = Attr_Handle;
 800ad50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ad54:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ad58:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800ad5c:	8812      	ldrh	r2, [r2, #0]
 800ad5e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800ad60:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ad64:	3302      	adds	r3, #2
 800ad66:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Attribute_Val_Length = Attribute_Val_Length;
 800ad6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ad6e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800ad72:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800ad76:	7812      	ldrb	r2, [r2, #0]
 800ad78:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800ad7a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ad7e:	3301      	adds	r3, #1
 800ad80:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemCpy( (void*)&cp0->Attribute_Val, (const void*)Attribute_Val, Attribute_Val_Length );
 800ad84:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ad88:	1d58      	adds	r0, r3, #5
 800ad8a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ad8e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800ad92:	781a      	ldrb	r2, [r3, #0]
 800ad94:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ad98:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800ad9c:	6819      	ldr	r1, [r3, #0]
 800ad9e:	f000 fcb7 	bl	800b710 <Osal_MemCpy>
  index_input += Attribute_Val_Length;
 800ada2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ada6:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800adb0:	4413      	add	r3, r2
 800adb2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800adb6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800adba:	2218      	movs	r2, #24
 800adbc:	2100      	movs	r1, #0
 800adbe:	4618      	mov	r0, r3
 800adc0:	f000 fcb6 	bl	800b730 <Osal_MemSet>
  rq.ogf = 0x3f;
 800adc4:	233f      	movs	r3, #63	; 0x3f
 800adc6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x123;
 800adca:	f240 1323 	movw	r3, #291	; 0x123
 800adce:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800add2:	f107 0318 	add.w	r3, r7, #24
 800add6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800adda:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800adde:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &status;
 800ade2:	f107 0317 	add.w	r3, r7, #23
 800ade6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = 1;
 800adea:	2301      	movs	r3, #1
 800adec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800adf0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800adf4:	2100      	movs	r1, #0
 800adf6:	4618      	mov	r0, r3
 800adf8:	f000 fb58 	bl	800b4ac <hci_send_req>
 800adfc:	4603      	mov	r3, r0
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	da01      	bge.n	800ae06 <aci_gatt_write_without_resp+0x124>
    return BLE_STATUS_TIMEOUT;
 800ae02:	23ff      	movs	r3, #255	; 0xff
 800ae04:	e004      	b.n	800ae10 <aci_gatt_write_without_resp+0x12e>
  return status;
 800ae06:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800ae0a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ae0e:	781b      	ldrb	r3, [r3, #0]
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd90      	pop	{r4, r7, pc}

0800ae1a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b0cc      	sub	sp, #304	; 0x130
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae28:	601a      	str	r2, [r3, #0]
 800ae2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae2e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ae32:	4602      	mov	r2, r0
 800ae34:	701a      	strb	r2, [r3, #0]
 800ae36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae3a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ae3e:	460a      	mov	r2, r1
 800ae40:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800ae42:	f107 0310 	add.w	r3, r7, #16
 800ae46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ae4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae4e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ae52:	2200      	movs	r2, #0
 800ae54:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ae56:	2300      	movs	r3, #0
 800ae58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800ae5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae60:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ae64:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800ae68:	7812      	ldrb	r2, [r2, #0]
 800ae6a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ae6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae70:	3301      	adds	r3, #1
 800ae72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800ae76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae7a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ae7e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ae82:	7812      	ldrb	r2, [r2, #0]
 800ae84:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ae86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800ae90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae94:	1c98      	adds	r0, r3, #2
 800ae96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae9a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ae9e:	781a      	ldrb	r2, [r3, #0]
 800aea0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aea4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aea8:	6819      	ldr	r1, [r3, #0]
 800aeaa:	f000 fc31 	bl	800b710 <Osal_MemCpy>
  index_input += Length;
 800aeae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aeb2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800aebc:	4413      	add	r3, r2
 800aebe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800aec2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aec6:	2218      	movs	r2, #24
 800aec8:	2100      	movs	r1, #0
 800aeca:	4618      	mov	r0, r3
 800aecc:	f000 fc30 	bl	800b730 <Osal_MemSet>
  rq.ogf = 0x3f;
 800aed0:	233f      	movs	r3, #63	; 0x3f
 800aed2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800aed6:	230c      	movs	r3, #12
 800aed8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800aedc:	f107 0310 	add.w	r3, r7, #16
 800aee0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800aee4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aee8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800aeec:	f107 030f 	add.w	r3, r7, #15
 800aef0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800aef4:	2301      	movs	r3, #1
 800aef6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800aefa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aefe:	2100      	movs	r1, #0
 800af00:	4618      	mov	r0, r3
 800af02:	f000 fad3 	bl	800b4ac <hci_send_req>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	da01      	bge.n	800af10 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800af0c:	23ff      	movs	r3, #255	; 0xff
 800af0e:	e004      	b.n	800af1a <aci_hal_write_config_data+0x100>
  return status;
 800af10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af14:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800af18:	781b      	ldrb	r3, [r3, #0]
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b0cc      	sub	sp, #304	; 0x130
 800af28:	af00      	add	r7, sp, #0
 800af2a:	4602      	mov	r2, r0
 800af2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af30:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800af34:	701a      	strb	r2, [r3, #0]
 800af36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af3a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800af3e:	460a      	mov	r2, r1
 800af40:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800af42:	f107 0310 	add.w	r3, r7, #16
 800af46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800af4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af4e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800af52:	2200      	movs	r2, #0
 800af54:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800af56:	2300      	movs	r3, #0
 800af58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800af5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af60:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800af64:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800af68:	7812      	ldrb	r2, [r2, #0]
 800af6a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800af6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af70:	3301      	adds	r3, #1
 800af72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800af76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af7a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800af7e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800af82:	7812      	ldrb	r2, [r2, #0]
 800af84:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800af86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af8a:	3301      	adds	r3, #1
 800af8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800af90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800af94:	2218      	movs	r2, #24
 800af96:	2100      	movs	r1, #0
 800af98:	4618      	mov	r0, r3
 800af9a:	f000 fbc9 	bl	800b730 <Osal_MemSet>
  rq.ogf = 0x3f;
 800af9e:	233f      	movs	r3, #63	; 0x3f
 800afa0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800afa4:	230f      	movs	r3, #15
 800afa6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800afaa:	f107 0310 	add.w	r3, r7, #16
 800afae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800afb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800afb6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800afba:	f107 030f 	add.w	r3, r7, #15
 800afbe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800afc2:	2301      	movs	r3, #1
 800afc4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800afc8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800afcc:	2100      	movs	r1, #0
 800afce:	4618      	mov	r0, r3
 800afd0:	f000 fa6c 	bl	800b4ac <hci_send_req>
 800afd4:	4603      	mov	r3, r0
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	da01      	bge.n	800afde <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800afda:	23ff      	movs	r3, #255	; 0xff
 800afdc:	e004      	b.n	800afe8 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800afde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afe2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800afe6:	781b      	ldrb	r3, [r3, #0]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}

0800aff2 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800aff2:	b580      	push	{r7, lr}
 800aff4:	b0cc      	sub	sp, #304	; 0x130
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	4602      	mov	r2, r0
 800affa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800affe:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b002:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800b004:	f107 0310 	add.w	r3, r7, #16
 800b008:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b00c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b010:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b014:	2200      	movs	r2, #0
 800b016:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b018:	2300      	movs	r3, #0
 800b01a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800b01e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b022:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b026:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800b02a:	8812      	ldrh	r2, [r2, #0]
 800b02c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b02e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b032:	3302      	adds	r3, #2
 800b034:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b038:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b03c:	2218      	movs	r2, #24
 800b03e:	2100      	movs	r1, #0
 800b040:	4618      	mov	r0, r3
 800b042:	f000 fb75 	bl	800b730 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b046:	233f      	movs	r3, #63	; 0x3f
 800b048:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800b04c:	2318      	movs	r3, #24
 800b04e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b052:	f107 0310 	add.w	r3, r7, #16
 800b056:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b05a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b05e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b062:	f107 030f 	add.w	r3, r7, #15
 800b066:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b06a:	2301      	movs	r3, #1
 800b06c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b070:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b074:	2100      	movs	r1, #0
 800b076:	4618      	mov	r0, r3
 800b078:	f000 fa18 	bl	800b4ac <hci_send_req>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	da01      	bge.n	800b086 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800b082:	23ff      	movs	r3, #255	; 0xff
 800b084:	e004      	b.n	800b090 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800b086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b08a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b08e:	781b      	ldrb	r3, [r3, #0]
}
 800b090:	4618      	mov	r0, r3
 800b092:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b096:	46bd      	mov	sp, r7
 800b098:	bd80      	pop	{r7, pc}

0800b09a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800b09a:	b580      	push	{r7, lr}
 800b09c:	b088      	sub	sp, #32
 800b09e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b0a4:	f107 0308 	add.w	r3, r7, #8
 800b0a8:	2218      	movs	r2, #24
 800b0aa:	2100      	movs	r1, #0
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f000 fb3f 	bl	800b730 <Osal_MemSet>
  rq.ogf = 0x03;
 800b0b2:	2303      	movs	r3, #3
 800b0b4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800b0b6:	2303      	movs	r3, #3
 800b0b8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b0ba:	1dfb      	adds	r3, r7, #7
 800b0bc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b0c2:	f107 0308 	add.w	r3, r7, #8
 800b0c6:	2100      	movs	r1, #0
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f000 f9ef 	bl	800b4ac <hci_send_req>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	da01      	bge.n	800b0d8 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b0d4:	23ff      	movs	r3, #255	; 0xff
 800b0d6:	e000      	b.n	800b0da <hci_reset+0x40>
  return status;
 800b0d8:	79fb      	ldrb	r3, [r7, #7]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3720      	adds	r7, #32
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <aci_l2cap_connection_parameter_update_resp>:
                                                       uint16_t Timeout_Multiplier,
                                                       uint16_t Minimum_CE_Length,
                                                       uint16_t Maximum_CE_Length,
                                                       uint8_t Identifier,
                                                       uint8_t Accept )
{
 800b0e2:	b5b0      	push	{r4, r5, r7, lr}
 800b0e4:	b0cc      	sub	sp, #304	; 0x130
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	4605      	mov	r5, r0
 800b0ea:	460c      	mov	r4, r1
 800b0ec:	4610      	mov	r0, r2
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0f4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b0f8:	462a      	mov	r2, r5
 800b0fa:	801a      	strh	r2, [r3, #0]
 800b0fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b100:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b104:	4622      	mov	r2, r4
 800b106:	801a      	strh	r2, [r3, #0]
 800b108:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b10c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800b110:	4602      	mov	r2, r0
 800b112:	801a      	strh	r2, [r3, #0]
 800b114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b118:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b11c:	460a      	mov	r2, r1
 800b11e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_resp_cp0 *cp0 = (aci_l2cap_connection_parameter_update_resp_cp0*)(cmd_buffer);
 800b120:	f107 0310 	add.w	r3, r7, #16
 800b124:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b128:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b12c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b130:	2200      	movs	r2, #0
 800b132:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b134:	2300      	movs	r3, #0
 800b136:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800b13a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b13e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b142:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800b146:	8812      	ldrh	r2, [r2, #0]
 800b148:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b14a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b14e:	3302      	adds	r3, #2
 800b150:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 800b154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b158:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b15c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b160:	8812      	ldrh	r2, [r2, #0]
 800b162:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b164:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b168:	3302      	adds	r3, #2
 800b16a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 800b16e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b172:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b176:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800b17a:	8812      	ldrh	r2, [r2, #0]
 800b17c:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800b17e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b182:	3302      	adds	r3, #2
 800b184:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Latency = Latency;
 800b188:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b18c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b190:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800b194:	8812      	ldrh	r2, [r2, #0]
 800b196:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 800b198:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b19c:	3302      	adds	r3, #2
 800b19e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 800b1a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1a6:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800b1aa:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 800b1ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b1b0:	3302      	adds	r3, #2
 800b1b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Minimum_CE_Length = Minimum_CE_Length;
 800b1b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1ba:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 800b1be:	815a      	strh	r2, [r3, #10]
  index_input += 2;
 800b1c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b1c4:	3302      	adds	r3, #2
 800b1c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Maximum_CE_Length = Maximum_CE_Length;
 800b1ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1ce:	f8b7 2148 	ldrh.w	r2, [r7, #328]	; 0x148
 800b1d2:	819a      	strh	r2, [r3, #12]
  index_input += 2;
 800b1d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b1d8:	3302      	adds	r3, #2
 800b1da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identifier = Identifier;
 800b1de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1e2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800b1e6:	739a      	strb	r2, [r3, #14]
  index_input += 1;
 800b1e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Accept = Accept;
 800b1f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1f6:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800b1fa:	73da      	strb	r2, [r3, #15]
  index_input += 1;
 800b1fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b200:	3301      	adds	r3, #1
 800b202:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b206:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b20a:	2218      	movs	r2, #24
 800b20c:	2100      	movs	r1, #0
 800b20e:	4618      	mov	r0, r3
 800b210:	f000 fa8e 	bl	800b730 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b214:	233f      	movs	r3, #63	; 0x3f
 800b216:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x182;
 800b21a:	f44f 73c1 	mov.w	r3, #386	; 0x182
 800b21e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b222:	f107 0310 	add.w	r3, r7, #16
 800b226:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b22a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b22e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b232:	f107 030f 	add.w	r3, r7, #15
 800b236:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b23a:	2301      	movs	r3, #1
 800b23c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b240:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b244:	2100      	movs	r1, #0
 800b246:	4618      	mov	r0, r3
 800b248:	f000 f930 	bl	800b4ac <hci_send_req>
 800b24c:	4603      	mov	r3, r0
 800b24e:	2b00      	cmp	r3, #0
 800b250:	da01      	bge.n	800b256 <aci_l2cap_connection_parameter_update_resp+0x174>
    return BLE_STATUS_TIMEOUT;
 800b252:	23ff      	movs	r3, #255	; 0xff
 800b254:	e004      	b.n	800b260 <aci_l2cap_connection_parameter_update_resp+0x17e>
  return status;
 800b256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b25a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b25e:	781b      	ldrb	r3, [r3, #0]
}
 800b260:	4618      	mov	r0, r3
 800b262:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b266:	46bd      	mov	sp, r7
 800b268:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b26c <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b086      	sub	sp, #24
 800b270:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b272:	f3ef 8310 	mrs	r3, PRIMASK
 800b276:	60fb      	str	r3, [r7, #12]
  return(result);
 800b278:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800b27a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b27c:	b672      	cpsid	i
}
 800b27e:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800b280:	1cbb      	adds	r3, r7, #2
 800b282:	4619      	mov	r1, r3
 800b284:	4812      	ldr	r0, [pc, #72]	; (800b2d0 <DbgTrace_TxCpltCallback+0x64>)
 800b286:	f000 ffcc 	bl	800c222 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800b28a:	1cbb      	adds	r3, r7, #2
 800b28c:	4619      	mov	r1, r3
 800b28e:	4810      	ldr	r0, [pc, #64]	; (800b2d0 <DbgTrace_TxCpltCallback+0x64>)
 800b290:	f001 f8b8 	bl	800c404 <CircularQueue_Sense>
 800b294:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d00c      	beq.n	800b2b6 <DbgTrace_TxCpltCallback+0x4a>
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	f383 8810 	msr	PRIMASK, r3
}
 800b2a6:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800b2a8:	887b      	ldrh	r3, [r7, #2]
 800b2aa:	4a0a      	ldr	r2, [pc, #40]	; (800b2d4 <DbgTrace_TxCpltCallback+0x68>)
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	6938      	ldr	r0, [r7, #16]
 800b2b0:	f7f5 ff07 	bl	80010c2 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800b2b4:	e008      	b.n	800b2c8 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800b2b6:	4b08      	ldr	r3, [pc, #32]	; (800b2d8 <DbgTrace_TxCpltCallback+0x6c>)
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	701a      	strb	r2, [r3, #0]
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f383 8810 	msr	PRIMASK, r3
}
 800b2c6:	bf00      	nop
}
 800b2c8:	bf00      	nop
 800b2ca:	3718      	adds	r7, #24
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}
 800b2d0:	20000734 	.word	0x20000734
 800b2d4:	0800b26d 	.word	0x0800b26d
 800b2d8:	20000029 	.word	0x20000029

0800b2dc <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b082      	sub	sp, #8
 800b2e0:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800b2e2:	f7f5 fee8 	bl	80010b6 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800b2e6:	2302      	movs	r3, #2
 800b2e8:	9300      	str	r3, [sp, #0]
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b2f0:	4903      	ldr	r1, [pc, #12]	; (800b300 <DbgTraceInit+0x24>)
 800b2f2:	4804      	ldr	r0, [pc, #16]	; (800b304 <DbgTraceInit+0x28>)
 800b2f4:	f000 fd3c 	bl	800bd70 <CircularQueue_Init>
#endif 
#endif
  return;
 800b2f8:	bf00      	nop
}
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	20000754 	.word	0x20000754
 800b304:	20000734 	.word	0x20000734

0800b308 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b084      	sub	sp, #16
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	60f8      	str	r0, [r7, #12]
 800b310:	60b9      	str	r1, [r7, #8]
 800b312:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	68b9      	ldr	r1, [r7, #8]
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	f000 f805 	bl	800b328 <DbgTraceWrite>
 800b31e:	4603      	mov	r3, r0
}
 800b320:	4618      	mov	r0, r3
 800b322:	3710      	adds	r7, #16
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b08a      	sub	sp, #40	; 0x28
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800b334:	2300      	movs	r3, #0
 800b336:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b338:	f3ef 8310 	mrs	r3, PRIMASK
 800b33c:	61bb      	str	r3, [r7, #24]
  return(result);
 800b33e:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800b340:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b348:	d102      	bne.n	800b350 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800b34a:	2300      	movs	r3, #0
 800b34c:	627b      	str	r3, [r7, #36]	; 0x24
 800b34e:	e037      	b.n	800b3c0 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2b01      	cmp	r3, #1
 800b354:	d006      	beq.n	800b364 <DbgTraceWrite+0x3c>
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2b02      	cmp	r3, #2
 800b35a:	d003      	beq.n	800b364 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800b35c:	f04f 33ff 	mov.w	r3, #4294967295
 800b360:	627b      	str	r3, [r7, #36]	; 0x24
 800b362:	e02d      	b.n	800b3c0 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d02a      	beq.n	800b3c0 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800b36e:	b672      	cpsid	i
}
 800b370:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	b29a      	uxth	r2, r3
 800b376:	2301      	movs	r3, #1
 800b378:	68b9      	ldr	r1, [r7, #8]
 800b37a:	4814      	ldr	r0, [pc, #80]	; (800b3cc <DbgTraceWrite+0xa4>)
 800b37c:	f000 fd2a 	bl	800bdd4 <CircularQueue_Add>
 800b380:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d015      	beq.n	800b3b4 <DbgTraceWrite+0x8c>
 800b388:	4b11      	ldr	r3, [pc, #68]	; (800b3d0 <DbgTraceWrite+0xa8>)
 800b38a:	781b      	ldrb	r3, [r3, #0]
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d010      	beq.n	800b3b4 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800b392:	4b0f      	ldr	r3, [pc, #60]	; (800b3d0 <DbgTraceWrite+0xa8>)
 800b394:	2200      	movs	r2, #0
 800b396:	701a      	strb	r2, [r3, #0]
 800b398:	6a3b      	ldr	r3, [r7, #32]
 800b39a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	f383 8810 	msr	PRIMASK, r3
}
 800b3a2:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	b29b      	uxth	r3, r3
 800b3a8:	4a0a      	ldr	r2, [pc, #40]	; (800b3d4 <DbgTraceWrite+0xac>)
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	69f8      	ldr	r0, [r7, #28]
 800b3ae:	f7f5 fe88 	bl	80010c2 <DbgOutputTraces>
 800b3b2:	e005      	b.n	800b3c0 <DbgTraceWrite+0x98>
 800b3b4:	6a3b      	ldr	r3, [r7, #32]
 800b3b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	f383 8810 	msr	PRIMASK, r3
}
 800b3be:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800b3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3728      	adds	r7, #40	; 0x28
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	20000734 	.word	0x20000734
 800b3d0:	20000029 	.word	0x20000029
 800b3d4:	0800b26d 	.word	0x0800b26d

0800b3d8 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b082      	sub	sp, #8
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	4a08      	ldr	r2, [pc, #32]	; (800b408 <hci_init+0x30>)
 800b3e8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800b3ea:	4a08      	ldr	r2, [pc, #32]	; (800b40c <hci_init+0x34>)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800b3f0:	4806      	ldr	r0, [pc, #24]	; (800b40c <hci_init+0x34>)
 800b3f2:	f000 f979 	bl	800b6e8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f000 f8da 	bl	800b5b4 <TlInit>

  return;
 800b400:	bf00      	nop
}
 800b402:	3708      	adds	r7, #8
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}
 800b408:	2000177c 	.word	0x2000177c
 800b40c:	20001754 	.word	0x20001754

0800b410 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800b416:	4822      	ldr	r0, [pc, #136]	; (800b4a0 <hci_user_evt_proc+0x90>)
 800b418:	f000 fbfc 	bl	800bc14 <LST_is_empty>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d12b      	bne.n	800b47a <hci_user_evt_proc+0x6a>
 800b422:	4b20      	ldr	r3, [pc, #128]	; (800b4a4 <hci_user_evt_proc+0x94>)
 800b424:	781b      	ldrb	r3, [r3, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d027      	beq.n	800b47a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b42a:	f107 030c 	add.w	r3, r7, #12
 800b42e:	4619      	mov	r1, r3
 800b430:	481b      	ldr	r0, [pc, #108]	; (800b4a0 <hci_user_evt_proc+0x90>)
 800b432:	f000 fc7e 	bl	800bd32 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800b436:	4b1c      	ldr	r3, [pc, #112]	; (800b4a8 <hci_user_evt_proc+0x98>)
 800b438:	69db      	ldr	r3, [r3, #28]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00c      	beq.n	800b458 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800b442:	2301      	movs	r3, #1
 800b444:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b446:	4b18      	ldr	r3, [pc, #96]	; (800b4a8 <hci_user_evt_proc+0x98>)
 800b448:	69db      	ldr	r3, [r3, #28]
 800b44a:	1d3a      	adds	r2, r7, #4
 800b44c:	4610      	mov	r0, r2
 800b44e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800b450:	793a      	ldrb	r2, [r7, #4]
 800b452:	4b14      	ldr	r3, [pc, #80]	; (800b4a4 <hci_user_evt_proc+0x94>)
 800b454:	701a      	strb	r2, [r3, #0]
 800b456:	e002      	b.n	800b45e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800b458:	4b12      	ldr	r3, [pc, #72]	; (800b4a4 <hci_user_evt_proc+0x94>)
 800b45a:	2201      	movs	r2, #1
 800b45c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800b45e:	4b11      	ldr	r3, [pc, #68]	; (800b4a4 <hci_user_evt_proc+0x94>)
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d004      	beq.n	800b470 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	4618      	mov	r0, r3
 800b46a:	f001 fb47 	bl	800cafc <TL_MM_EvtDone>
 800b46e:	e004      	b.n	800b47a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	4619      	mov	r1, r3
 800b474:	480a      	ldr	r0, [pc, #40]	; (800b4a0 <hci_user_evt_proc+0x90>)
 800b476:	f000 fbef 	bl	800bc58 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800b47a:	4809      	ldr	r0, [pc, #36]	; (800b4a0 <hci_user_evt_proc+0x90>)
 800b47c:	f000 fbca 	bl	800bc14 <LST_is_empty>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d107      	bne.n	800b496 <hci_user_evt_proc+0x86>
 800b486:	4b07      	ldr	r3, [pc, #28]	; (800b4a4 <hci_user_evt_proc+0x94>)
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d003      	beq.n	800b496 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800b48e:	4804      	ldr	r0, [pc, #16]	; (800b4a0 <hci_user_evt_proc+0x90>)
 800b490:	f7f8 fbe2 	bl	8003c58 <hci_notify_asynch_evt>
  }


  return;
 800b494:	bf00      	nop
 800b496:	bf00      	nop
}
 800b498:	3710      	adds	r7, #16
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
 800b49e:	bf00      	nop
 800b4a0:	20000200 	.word	0x20000200
 800b4a4:	2000020c 	.word	0x2000020c
 800b4a8:	20001754 	.word	0x20001754

0800b4ac <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b088      	sub	sp, #32
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	460b      	mov	r3, r1
 800b4b6:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800b4b8:	2000      	movs	r0, #0
 800b4ba:	f000 f8d1 	bl	800b660 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	885b      	ldrh	r3, [r3, #2]
 800b4c6:	b21b      	sxth	r3, r3
 800b4c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b4cc:	b21a      	sxth	r2, r3
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	881b      	ldrh	r3, [r3, #0]
 800b4d2:	029b      	lsls	r3, r3, #10
 800b4d4:	b21b      	sxth	r3, r3
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	b21b      	sxth	r3, r3
 800b4da:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800b4dc:	4b33      	ldr	r3, [pc, #204]	; (800b5ac <hci_send_req+0x100>)
 800b4de:	2201      	movs	r2, #1
 800b4e0:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	b2d9      	uxtb	r1, r3
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	689a      	ldr	r2, [r3, #8]
 800b4ec:	8bbb      	ldrh	r3, [r7, #28]
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f000 f890 	bl	800b614 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800b4f4:	e04e      	b.n	800b594 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800b4f6:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800b4fa:	f7f8 fbc4 	bl	8003c86 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800b4fe:	e043      	b.n	800b588 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800b500:	f107 030c 	add.w	r3, r7, #12
 800b504:	4619      	mov	r1, r3
 800b506:	482a      	ldr	r0, [pc, #168]	; (800b5b0 <hci_send_req+0x104>)
 800b508:	f000 fc13 	bl	800bd32 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	7a5b      	ldrb	r3, [r3, #9]
 800b510:	2b0f      	cmp	r3, #15
 800b512:	d114      	bne.n	800b53e <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	330b      	adds	r3, #11
 800b518:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	885b      	ldrh	r3, [r3, #2]
 800b51e:	b29b      	uxth	r3, r3
 800b520:	8bba      	ldrh	r2, [r7, #28]
 800b522:	429a      	cmp	r2, r3
 800b524:	d104      	bne.n	800b530 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	691b      	ldr	r3, [r3, #16]
 800b52a:	693a      	ldr	r2, [r7, #16]
 800b52c:	7812      	ldrb	r2, [r2, #0]
 800b52e:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	785b      	ldrb	r3, [r3, #1]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d027      	beq.n	800b588 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800b538:	2301      	movs	r3, #1
 800b53a:	77fb      	strb	r3, [r7, #31]
 800b53c:	e024      	b.n	800b588 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	330b      	adds	r3, #11
 800b542:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800b544:	69bb      	ldr	r3, [r7, #24]
 800b546:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	8bba      	ldrh	r2, [r7, #28]
 800b54e:	429a      	cmp	r2, r3
 800b550:	d114      	bne.n	800b57c <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	7a9b      	ldrb	r3, [r3, #10]
 800b556:	3b03      	subs	r3, #3
 800b558:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	695a      	ldr	r2, [r3, #20]
 800b55e:	7dfb      	ldrb	r3, [r7, #23]
 800b560:	429a      	cmp	r2, r3
 800b562:	bfa8      	it	ge
 800b564:	461a      	movge	r2, r3
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6918      	ldr	r0, [r3, #16]
 800b56e:	69bb      	ldr	r3, [r7, #24]
 800b570:	1cd9      	adds	r1, r3, #3
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	695b      	ldr	r3, [r3, #20]
 800b576:	461a      	mov	r2, r3
 800b578:	f002 fcf9 	bl	800df6e <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800b57c:	69bb      	ldr	r3, [r7, #24]
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d001      	beq.n	800b588 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800b584:	2301      	movs	r3, #1
 800b586:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800b588:	4809      	ldr	r0, [pc, #36]	; (800b5b0 <hci_send_req+0x104>)
 800b58a:	f000 fb43 	bl	800bc14 <LST_is_empty>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d0b5      	beq.n	800b500 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800b594:	7ffb      	ldrb	r3, [r7, #31]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d0ad      	beq.n	800b4f6 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800b59a:	2001      	movs	r0, #1
 800b59c:	f000 f860 	bl	800b660 <NotifyCmdStatus>

  return 0;
 800b5a0:	2300      	movs	r3, #0
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3720      	adds	r7, #32
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	20001780 	.word	0x20001780
 800b5b0:	20001774 	.word	0x20001774

0800b5b4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b086      	sub	sp, #24
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800b5bc:	480f      	ldr	r0, [pc, #60]	; (800b5fc <TlInit+0x48>)
 800b5be:	f000 fb19 	bl	800bbf4 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800b5c2:	4a0f      	ldr	r2, [pc, #60]	; (800b600 <TlInit+0x4c>)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800b5c8:	480e      	ldr	r0, [pc, #56]	; (800b604 <TlInit+0x50>)
 800b5ca:	f000 fb13 	bl	800bbf4 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800b5ce:	4b0e      	ldr	r3, [pc, #56]	; (800b608 <TlInit+0x54>)
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800b5d4:	4b0d      	ldr	r3, [pc, #52]	; (800b60c <TlInit+0x58>)
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d00a      	beq.n	800b5f2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800b5e0:	4b0b      	ldr	r3, [pc, #44]	; (800b610 <TlInit+0x5c>)
 800b5e2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800b5e4:	4b09      	ldr	r3, [pc, #36]	; (800b60c <TlInit+0x58>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f107 0208 	add.w	r2, r7, #8
 800b5ec:	4610      	mov	r0, r2
 800b5ee:	4798      	blx	r3
  }

  return;
 800b5f0:	bf00      	nop
 800b5f2:	bf00      	nop
}
 800b5f4:	3718      	adds	r7, #24
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	20001774 	.word	0x20001774
 800b600:	20000208 	.word	0x20000208
 800b604:	20000200 	.word	0x20000200
 800b608:	2000020c 	.word	0x2000020c
 800b60c:	20001754 	.word	0x20001754
 800b610:	0800b6a1 	.word	0x0800b6a1

0800b614 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	4603      	mov	r3, r0
 800b61c:	603a      	str	r2, [r7, #0]
 800b61e:	80fb      	strh	r3, [r7, #6]
 800b620:	460b      	mov	r3, r1
 800b622:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800b624:	4b0c      	ldr	r3, [pc, #48]	; (800b658 <SendCmd+0x44>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	88fa      	ldrh	r2, [r7, #6]
 800b62a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800b62e:	4b0a      	ldr	r3, [pc, #40]	; (800b658 <SendCmd+0x44>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	797a      	ldrb	r2, [r7, #5]
 800b634:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800b636:	4b08      	ldr	r3, [pc, #32]	; (800b658 <SendCmd+0x44>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	330c      	adds	r3, #12
 800b63c:	797a      	ldrb	r2, [r7, #5]
 800b63e:	6839      	ldr	r1, [r7, #0]
 800b640:	4618      	mov	r0, r3
 800b642:	f002 fc94 	bl	800df6e <memcpy>

  hciContext.io.Send(0,0);
 800b646:	4b05      	ldr	r3, [pc, #20]	; (800b65c <SendCmd+0x48>)
 800b648:	691b      	ldr	r3, [r3, #16]
 800b64a:	2100      	movs	r1, #0
 800b64c:	2000      	movs	r0, #0
 800b64e:	4798      	blx	r3

  return;
 800b650:	bf00      	nop
}
 800b652:	3708      	adds	r7, #8
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}
 800b658:	20000208 	.word	0x20000208
 800b65c:	20001754 	.word	0x20001754

0800b660 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	4603      	mov	r3, r0
 800b668:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800b66a:	79fb      	ldrb	r3, [r7, #7]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d108      	bne.n	800b682 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800b670:	4b0a      	ldr	r3, [pc, #40]	; (800b69c <NotifyCmdStatus+0x3c>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d00d      	beq.n	800b694 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800b678:	4b08      	ldr	r3, [pc, #32]	; (800b69c <NotifyCmdStatus+0x3c>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2000      	movs	r0, #0
 800b67e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800b680:	e008      	b.n	800b694 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800b682:	4b06      	ldr	r3, [pc, #24]	; (800b69c <NotifyCmdStatus+0x3c>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d004      	beq.n	800b694 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800b68a:	4b04      	ldr	r3, [pc, #16]	; (800b69c <NotifyCmdStatus+0x3c>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	2001      	movs	r0, #1
 800b690:	4798      	blx	r3
  return;
 800b692:	bf00      	nop
 800b694:	bf00      	nop
}
 800b696:	3708      	adds	r7, #8
 800b698:	46bd      	mov	sp, r7
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	2000177c 	.word	0x2000177c

0800b6a0 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	7a5b      	ldrb	r3, [r3, #9]
 800b6ac:	2b0f      	cmp	r3, #15
 800b6ae:	d003      	beq.n	800b6b8 <TlEvtReceived+0x18>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	7a5b      	ldrb	r3, [r3, #9]
 800b6b4:	2b0e      	cmp	r3, #14
 800b6b6:	d107      	bne.n	800b6c8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800b6b8:	6879      	ldr	r1, [r7, #4]
 800b6ba:	4809      	ldr	r0, [pc, #36]	; (800b6e0 <TlEvtReceived+0x40>)
 800b6bc:	f000 faf2 	bl	800bca4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	f7f8 fad5 	bl	8003c70 <hci_cmd_resp_release>
 800b6c6:	e006      	b.n	800b6d6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800b6c8:	6879      	ldr	r1, [r7, #4]
 800b6ca:	4806      	ldr	r0, [pc, #24]	; (800b6e4 <TlEvtReceived+0x44>)
 800b6cc:	f000 faea 	bl	800bca4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b6d0:	4804      	ldr	r0, [pc, #16]	; (800b6e4 <TlEvtReceived+0x44>)
 800b6d2:	f7f8 fac1 	bl	8003c58 <hci_notify_asynch_evt>
  }

  return;
 800b6d6:	bf00      	nop
}
 800b6d8:	3708      	adds	r7, #8
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	20001774 	.word	0x20001774
 800b6e4:	20000200 	.word	0x20000200

0800b6e8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	4a05      	ldr	r2, [pc, #20]	; (800b708 <hci_register_io_bus+0x20>)
 800b6f4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	4a04      	ldr	r2, [pc, #16]	; (800b70c <hci_register_io_bus+0x24>)
 800b6fa:	611a      	str	r2, [r3, #16]

  return;
 800b6fc:	bf00      	nop
}
 800b6fe:	370c      	adds	r7, #12
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr
 800b708:	0800c875 	.word	0x0800c875
 800b70c:	0800c8dd 	.word	0x0800c8dd

0800b710 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800b71c:	687a      	ldr	r2, [r7, #4]
 800b71e:	68b9      	ldr	r1, [r7, #8]
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	f002 fc24 	bl	800df6e <memcpy>
 800b726:	4603      	mov	r3, r0
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3710      	adds	r7, #16
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800b73c:	687a      	ldr	r2, [r7, #4]
 800b73e:	68b9      	ldr	r1, [r7, #8]
 800b740:	68f8      	ldr	r0, [r7, #12]
 800b742:	f002 fb95 	bl	800de70 <memset>
 800b746:	4603      	mov	r3, r0
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3710      	adds	r7, #16
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800b750:	b480      	push	{r7}
 800b752:	b085      	sub	sp, #20
 800b754:	af00      	add	r7, sp, #0
 800b756:	4603      	mov	r3, r0
 800b758:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800b75a:	4b0f      	ldr	r3, [pc, #60]	; (800b798 <OTP_Read+0x48>)
 800b75c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b75e:	e002      	b.n	800b766 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	3b08      	subs	r3, #8
 800b764:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	3307      	adds	r3, #7
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	79fa      	ldrb	r2, [r7, #7]
 800b76e:	429a      	cmp	r2, r3
 800b770:	d003      	beq.n	800b77a <OTP_Read+0x2a>
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	4a09      	ldr	r2, [pc, #36]	; (800b79c <OTP_Read+0x4c>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d1f2      	bne.n	800b760 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	3307      	adds	r3, #7
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	79fa      	ldrb	r2, [r7, #7]
 800b782:	429a      	cmp	r2, r3
 800b784:	d001      	beq.n	800b78a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800b786:	2300      	movs	r3, #0
 800b788:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800b78a:	68fb      	ldr	r3, [r7, #12]
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3714      	adds	r7, #20
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr
 800b798:	1fff73f8 	.word	0x1fff73f8
 800b79c:	1fff7000 	.word	0x1fff7000

0800b7a0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b088      	sub	sp, #32
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b7a8:	f107 030c 	add.w	r3, r7, #12
 800b7ac:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800b7b4:	69fb      	ldr	r3, [r7, #28]
 800b7b6:	212e      	movs	r1, #46	; 0x2e
 800b7b8:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800b7bc:	f000 f94c 	bl	800ba58 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	330b      	adds	r3, #11
 800b7c4:	78db      	ldrb	r3, [r3, #3]
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3720      	adds	r7, #32
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800b7ce:	b580      	push	{r7, lr}
 800b7d0:	b088      	sub	sp, #32
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b7d6:	f107 030c 	add.w	r3, r7, #12
 800b7da:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800b7e2:	69fb      	ldr	r3, [r7, #28]
 800b7e4:	210f      	movs	r1, #15
 800b7e6:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800b7ea:	f000 f935 	bl	800ba58 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b7ee:	69fb      	ldr	r3, [r7, #28]
 800b7f0:	330b      	adds	r3, #11
 800b7f2:	78db      	ldrb	r3, [r3, #3]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3720      	adds	r7, #32
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b088      	sub	sp, #32
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b804:	f107 030c 	add.w	r3, r7, #12
 800b808:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800b80a:	69fb      	ldr	r3, [r7, #28]
 800b80c:	687a      	ldr	r2, [r7, #4]
 800b80e:	2110      	movs	r1, #16
 800b810:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800b814:	f000 f920 	bl	800ba58 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b818:	69fb      	ldr	r3, [r7, #28]
 800b81a:	330b      	adds	r3, #11
 800b81c:	78db      	ldrb	r3, [r3, #3]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3720      	adds	r7, #32
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
	...

0800b828 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800b828:	b480      	push	{r7}
 800b82a:	b08b      	sub	sp, #44	; 0x2c
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800b830:	2300      	movs	r3, #0
 800b832:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800b834:	2300      	movs	r3, #0
 800b836:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800b838:	2300      	movs	r3, #0
 800b83a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800b83c:	2300      	movs	r3, #0
 800b83e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800b840:	2300      	movs	r3, #0
 800b842:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800b844:	2300      	movs	r3, #0
 800b846:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800b848:	2300      	movs	r3, #0
 800b84a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800b84c:	2300      	movs	r3, #0
 800b84e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800b850:	4b4a      	ldr	r3, [pc, #296]	; (800b97c <SHCI_GetWirelessFwInfo+0x154>)
 800b852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b854:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b858:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b862:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a44      	ldr	r2, [pc, #272]	; (800b980 <SHCI_GetWirelessFwInfo+0x158>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d10f      	bne.n	800b894 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	695b      	ldr	r3, [r3, #20]
 800b878:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	699b      	ldr	r3, [r3, #24]
 800b87e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	69db      	ldr	r3, [r3, #28]
 800b884:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	68db      	ldr	r3, [r3, #12]
 800b88a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	691b      	ldr	r3, [r3, #16]
 800b890:	617b      	str	r3, [r7, #20]
 800b892:	e01a      	b.n	800b8ca <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	009b      	lsls	r3, r3, #2
 800b898:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b89c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800b8a0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	691b      	ldr	r3, [r3, #16]
 800b8a8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	695b      	ldr	r3, [r3, #20]
 800b8b0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	699b      	ldr	r3, [r3, #24]
 800b8b8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	689b      	ldr	r3, [r3, #8]
 800b8c8:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800b8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8cc:	0e1b      	lsrs	r3, r3, #24
 800b8ce:	b2da      	uxtb	r2, r3
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d6:	0c1b      	lsrs	r3, r3, #16
 800b8d8:	b2da      	uxtb	r2, r3
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e0:	0a1b      	lsrs	r3, r3, #8
 800b8e2:	b2da      	uxtb	r2, r3
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800b8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ea:	091b      	lsrs	r3, r3, #4
 800b8ec:	b2db      	uxtb	r3, r3
 800b8ee:	f003 030f 	and.w	r3, r3, #15
 800b8f2:	b2da      	uxtb	r2, r3
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800b8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	f003 030f 	and.w	r3, r3, #15
 800b900:	b2da      	uxtb	r2, r3
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800b906:	6a3b      	ldr	r3, [r7, #32]
 800b908:	0e1b      	lsrs	r3, r3, #24
 800b90a:	b2da      	uxtb	r2, r3
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800b910:	6a3b      	ldr	r3, [r7, #32]
 800b912:	0c1b      	lsrs	r3, r3, #16
 800b914:	b2da      	uxtb	r2, r3
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800b91a:	6a3b      	ldr	r3, [r7, #32]
 800b91c:	0a1b      	lsrs	r3, r3, #8
 800b91e:	b2da      	uxtb	r2, r3
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800b924:	6a3b      	ldr	r3, [r7, #32]
 800b926:	b2da      	uxtb	r2, r3
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800b92c:	69fb      	ldr	r3, [r7, #28]
 800b92e:	b2da      	uxtb	r2, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800b934:	69bb      	ldr	r3, [r7, #24]
 800b936:	0e1b      	lsrs	r3, r3, #24
 800b938:	b2da      	uxtb	r2, r3
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800b93e:	69bb      	ldr	r3, [r7, #24]
 800b940:	0c1b      	lsrs	r3, r3, #16
 800b942:	b2da      	uxtb	r2, r3
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800b948:	69bb      	ldr	r3, [r7, #24]
 800b94a:	0a1b      	lsrs	r3, r3, #8
 800b94c:	b2da      	uxtb	r2, r3
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	0e1b      	lsrs	r3, r3, #24
 800b956:	b2da      	uxtb	r2, r3
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	0c1b      	lsrs	r3, r3, #16
 800b960:	b2da      	uxtb	r2, r3
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	b2da      	uxtb	r2, r3
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800b96e:	2300      	movs	r3, #0
}
 800b970:	4618      	mov	r0, r3
 800b972:	372c      	adds	r7, #44	; 0x2c
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr
 800b97c:	58004000 	.word	0x58004000
 800b980:	a94656b9 	.word	0xa94656b9

0800b984 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b082      	sub	sp, #8
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	4a08      	ldr	r2, [pc, #32]	; (800b9b4 <shci_init+0x30>)
 800b994:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800b996:	4a08      	ldr	r2, [pc, #32]	; (800b9b8 <shci_init+0x34>)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800b99c:	4806      	ldr	r0, [pc, #24]	; (800b9b8 <shci_init+0x34>)
 800b99e:	f000 f915 	bl	800bbcc <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f000 f898 	bl	800badc <TlInit>

  return;
 800b9ac:	bf00      	nop
}
 800b9ae:	3708      	adds	r7, #8
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}
 800b9b4:	200017a4 	.word	0x200017a4
 800b9b8:	20001784 	.word	0x20001784

0800b9bc <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b9c2:	4822      	ldr	r0, [pc, #136]	; (800ba4c <shci_user_evt_proc+0x90>)
 800b9c4:	f000 f926 	bl	800bc14 <LST_is_empty>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d12b      	bne.n	800ba26 <shci_user_evt_proc+0x6a>
 800b9ce:	4b20      	ldr	r3, [pc, #128]	; (800ba50 <shci_user_evt_proc+0x94>)
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d027      	beq.n	800ba26 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b9d6:	f107 030c 	add.w	r3, r7, #12
 800b9da:	4619      	mov	r1, r3
 800b9dc:	481b      	ldr	r0, [pc, #108]	; (800ba4c <shci_user_evt_proc+0x90>)
 800b9de:	f000 f9a8 	bl	800bd32 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800b9e2:	4b1c      	ldr	r3, [pc, #112]	; (800ba54 <shci_user_evt_proc+0x98>)
 800b9e4:	69db      	ldr	r3, [r3, #28]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00c      	beq.n	800ba04 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b9f2:	4b18      	ldr	r3, [pc, #96]	; (800ba54 <shci_user_evt_proc+0x98>)
 800b9f4:	69db      	ldr	r3, [r3, #28]
 800b9f6:	1d3a      	adds	r2, r7, #4
 800b9f8:	4610      	mov	r0, r2
 800b9fa:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800b9fc:	793a      	ldrb	r2, [r7, #4]
 800b9fe:	4b14      	ldr	r3, [pc, #80]	; (800ba50 <shci_user_evt_proc+0x94>)
 800ba00:	701a      	strb	r2, [r3, #0]
 800ba02:	e002      	b.n	800ba0a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800ba04:	4b12      	ldr	r3, [pc, #72]	; (800ba50 <shci_user_evt_proc+0x94>)
 800ba06:	2201      	movs	r2, #1
 800ba08:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800ba0a:	4b11      	ldr	r3, [pc, #68]	; (800ba50 <shci_user_evt_proc+0x94>)
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d004      	beq.n	800ba1c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	4618      	mov	r0, r3
 800ba16:	f001 f871 	bl	800cafc <TL_MM_EvtDone>
 800ba1a:	e004      	b.n	800ba26 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	4619      	mov	r1, r3
 800ba20:	480a      	ldr	r0, [pc, #40]	; (800ba4c <shci_user_evt_proc+0x90>)
 800ba22:	f000 f919 	bl	800bc58 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800ba26:	4809      	ldr	r0, [pc, #36]	; (800ba4c <shci_user_evt_proc+0x90>)
 800ba28:	f000 f8f4 	bl	800bc14 <LST_is_empty>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d107      	bne.n	800ba42 <shci_user_evt_proc+0x86>
 800ba32:	4b07      	ldr	r3, [pc, #28]	; (800ba50 <shci_user_evt_proc+0x94>)
 800ba34:	781b      	ldrb	r3, [r3, #0]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d003      	beq.n	800ba42 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800ba3a:	4804      	ldr	r0, [pc, #16]	; (800ba4c <shci_user_evt_proc+0x90>)
 800ba3c:	f7f5 ff39 	bl	80018b2 <shci_notify_asynch_evt>
  }


  return;
 800ba40:	bf00      	nop
 800ba42:	bf00      	nop
}
 800ba44:	3710      	adds	r7, #16
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}
 800ba4a:	bf00      	nop
 800ba4c:	20000238 	.word	0x20000238
 800ba50:	20000248 	.word	0x20000248
 800ba54:	20001784 	.word	0x20001784

0800ba58 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	60ba      	str	r2, [r7, #8]
 800ba60:	607b      	str	r3, [r7, #4]
 800ba62:	4603      	mov	r3, r0
 800ba64:	81fb      	strh	r3, [r7, #14]
 800ba66:	460b      	mov	r3, r1
 800ba68:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800ba6a:	2000      	movs	r0, #0
 800ba6c:	f000 f868 	bl	800bb40 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800ba70:	4b17      	ldr	r3, [pc, #92]	; (800bad0 <shci_send+0x78>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	89fa      	ldrh	r2, [r7, #14]
 800ba76:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800ba7a:	4b15      	ldr	r3, [pc, #84]	; (800bad0 <shci_send+0x78>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	7b7a      	ldrb	r2, [r7, #13]
 800ba80:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800ba82:	4b13      	ldr	r3, [pc, #76]	; (800bad0 <shci_send+0x78>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	330c      	adds	r3, #12
 800ba88:	7b7a      	ldrb	r2, [r7, #13]
 800ba8a:	68b9      	ldr	r1, [r7, #8]
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f002 fa6e 	bl	800df6e <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800ba92:	4b10      	ldr	r3, [pc, #64]	; (800bad4 <shci_send+0x7c>)
 800ba94:	2201      	movs	r2, #1
 800ba96:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800ba98:	4b0f      	ldr	r3, [pc, #60]	; (800bad8 <shci_send+0x80>)
 800ba9a:	691b      	ldr	r3, [r3, #16]
 800ba9c:	2100      	movs	r1, #0
 800ba9e:	2000      	movs	r0, #0
 800baa0:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800baa2:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800baa6:	f7f5 ff1c 	bl	80018e2 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f103 0008 	add.w	r0, r3, #8
 800bab0:	4b07      	ldr	r3, [pc, #28]	; (800bad0 <shci_send+0x78>)
 800bab2:	6819      	ldr	r1, [r3, #0]
 800bab4:	4b06      	ldr	r3, [pc, #24]	; (800bad0 <shci_send+0x78>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	789b      	ldrb	r3, [r3, #2]
 800baba:	3303      	adds	r3, #3
 800babc:	461a      	mov	r2, r3
 800babe:	f002 fa56 	bl	800df6e <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800bac2:	2001      	movs	r0, #1
 800bac4:	f000 f83c 	bl	800bb40 <Cmd_SetStatus>

  return;
 800bac8:	bf00      	nop
}
 800baca:	3710      	adds	r7, #16
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd80      	pop	{r7, pc}
 800bad0:	20000244 	.word	0x20000244
 800bad4:	200017a8 	.word	0x200017a8
 800bad8:	20001784 	.word	0x20001784

0800badc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b086      	sub	sp, #24
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800bae4:	4a10      	ldr	r2, [pc, #64]	; (800bb28 <TlInit+0x4c>)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800baea:	4810      	ldr	r0, [pc, #64]	; (800bb2c <TlInit+0x50>)
 800baec:	f000 f882 	bl	800bbf4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800baf0:	2001      	movs	r0, #1
 800baf2:	f000 f825 	bl	800bb40 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800baf6:	4b0e      	ldr	r3, [pc, #56]	; (800bb30 <TlInit+0x54>)
 800baf8:	2201      	movs	r2, #1
 800bafa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800bafc:	4b0d      	ldr	r3, [pc, #52]	; (800bb34 <TlInit+0x58>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d00c      	beq.n	800bb1e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800bb08:	4b0b      	ldr	r3, [pc, #44]	; (800bb38 <TlInit+0x5c>)
 800bb0a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800bb0c:	4b0b      	ldr	r3, [pc, #44]	; (800bb3c <TlInit+0x60>)
 800bb0e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800bb10:	4b08      	ldr	r3, [pc, #32]	; (800bb34 <TlInit+0x58>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f107 020c 	add.w	r2, r7, #12
 800bb18:	4610      	mov	r0, r2
 800bb1a:	4798      	blx	r3
  }

  return;
 800bb1c:	bf00      	nop
 800bb1e:	bf00      	nop
}
 800bb20:	3718      	adds	r7, #24
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}
 800bb26:	bf00      	nop
 800bb28:	20000244 	.word	0x20000244
 800bb2c:	20000238 	.word	0x20000238
 800bb30:	20000248 	.word	0x20000248
 800bb34:	20001784 	.word	0x20001784
 800bb38:	0800bb91 	.word	0x0800bb91
 800bb3c:	0800bba9 	.word	0x0800bba9

0800bb40 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	4603      	mov	r3, r0
 800bb48:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800bb4a:	79fb      	ldrb	r3, [r7, #7]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d10b      	bne.n	800bb68 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800bb50:	4b0d      	ldr	r3, [pc, #52]	; (800bb88 <Cmd_SetStatus+0x48>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d003      	beq.n	800bb60 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800bb58:	4b0b      	ldr	r3, [pc, #44]	; (800bb88 <Cmd_SetStatus+0x48>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	2000      	movs	r0, #0
 800bb5e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800bb60:	4b0a      	ldr	r3, [pc, #40]	; (800bb8c <Cmd_SetStatus+0x4c>)
 800bb62:	2200      	movs	r2, #0
 800bb64:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800bb66:	e00b      	b.n	800bb80 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800bb68:	4b08      	ldr	r3, [pc, #32]	; (800bb8c <Cmd_SetStatus+0x4c>)
 800bb6a:	2201      	movs	r2, #1
 800bb6c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800bb6e:	4b06      	ldr	r3, [pc, #24]	; (800bb88 <Cmd_SetStatus+0x48>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d004      	beq.n	800bb80 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800bb76:	4b04      	ldr	r3, [pc, #16]	; (800bb88 <Cmd_SetStatus+0x48>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2001      	movs	r0, #1
 800bb7c:	4798      	blx	r3
  return;
 800bb7e:	bf00      	nop
 800bb80:	bf00      	nop
}
 800bb82:	3708      	adds	r7, #8
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	200017a4 	.word	0x200017a4
 800bb8c:	20000240 	.word	0x20000240

0800bb90 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800bb98:	2000      	movs	r0, #0
 800bb9a:	f7f5 fe97 	bl	80018cc <shci_cmd_resp_release>

  return;
 800bb9e:	bf00      	nop
}
 800bba0:	3708      	adds	r7, #8
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
	...

0800bba8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800bbb0:	6879      	ldr	r1, [r7, #4]
 800bbb2:	4805      	ldr	r0, [pc, #20]	; (800bbc8 <TlUserEvtReceived+0x20>)
 800bbb4:	f000 f876 	bl	800bca4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800bbb8:	4803      	ldr	r0, [pc, #12]	; (800bbc8 <TlUserEvtReceived+0x20>)
 800bbba:	f7f5 fe7a 	bl	80018b2 <shci_notify_asynch_evt>

  return;
 800bbbe:	bf00      	nop
}
 800bbc0:	3708      	adds	r7, #8
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	20000238 	.word	0x20000238

0800bbcc <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b083      	sub	sp, #12
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	4a05      	ldr	r2, [pc, #20]	; (800bbec <shci_register_io_bus+0x20>)
 800bbd8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	4a04      	ldr	r2, [pc, #16]	; (800bbf0 <shci_register_io_bus+0x24>)
 800bbde:	611a      	str	r2, [r3, #16]

  return;
 800bbe0:	bf00      	nop
}
 800bbe2:	370c      	adds	r7, #12
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr
 800bbec:	0800c989 	.word	0x0800c989
 800bbf0:	0800c9dd 	.word	0x0800c9dd

0800bbf4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	687a      	ldr	r2, [r7, #4]
 800bc06:	605a      	str	r2, [r3, #4]
}
 800bc08:	bf00      	nop
 800bc0a:	370c      	adds	r7, #12
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr

0800bc14 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b087      	sub	sp, #28
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc1c:	f3ef 8310 	mrs	r3, PRIMASK
 800bc20:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc22:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bc24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc26:	b672      	cpsid	i
}
 800bc28:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d102      	bne.n	800bc3a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800bc34:	2301      	movs	r3, #1
 800bc36:	75fb      	strb	r3, [r7, #23]
 800bc38:	e001      	b.n	800bc3e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	75fb      	strb	r3, [r7, #23]
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	f383 8810 	msr	PRIMASK, r3
}
 800bc48:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800bc4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	371c      	adds	r7, #28
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b087      	sub	sp, #28
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
 800bc60:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bc62:	f3ef 8310 	mrs	r3, PRIMASK
 800bc66:	60fb      	str	r3, [r7, #12]
  return(result);
 800bc68:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bc6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bc6c:	b672      	cpsid	i
}
 800bc6e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681a      	ldr	r2, [r3, #0]
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	687a      	ldr	r2, [r7, #4]
 800bc7c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	683a      	ldr	r2, [r7, #0]
 800bc82:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	683a      	ldr	r2, [r7, #0]
 800bc8a:	605a      	str	r2, [r3, #4]
 800bc8c:	697b      	ldr	r3, [r7, #20]
 800bc8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	f383 8810 	msr	PRIMASK, r3
}
 800bc96:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bc98:	bf00      	nop
 800bc9a:	371c      	adds	r7, #28
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b087      	sub	sp, #28
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bcae:	f3ef 8310 	mrs	r3, PRIMASK
 800bcb2:	60fb      	str	r3, [r7, #12]
  return(result);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bcb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bcb8:	b672      	cpsid	i
}
 800bcba:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	687a      	ldr	r2, [r7, #4]
 800bcc0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	685a      	ldr	r2, [r3, #4]
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	683a      	ldr	r2, [r7, #0]
 800bcce:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	683a      	ldr	r2, [r7, #0]
 800bcd6:	601a      	str	r2, [r3, #0]
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	f383 8810 	msr	PRIMASK, r3
}
 800bce2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bce4:	bf00      	nop
 800bce6:	371c      	adds	r7, #28
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b087      	sub	sp, #28
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bcf8:	f3ef 8310 	mrs	r3, PRIMASK
 800bcfc:	60fb      	str	r3, [r7, #12]
  return(result);
 800bcfe:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bd00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd02:	b672      	cpsid	i
}
 800bd04:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	6812      	ldr	r2, [r2, #0]
 800bd0e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	6852      	ldr	r2, [r2, #4]
 800bd18:	605a      	str	r2, [r3, #4]
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	f383 8810 	msr	PRIMASK, r3
}
 800bd24:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bd26:	bf00      	nop
 800bd28:	371c      	adds	r7, #28
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr

0800bd32 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b086      	sub	sp, #24
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
 800bd3a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd3c:	f3ef 8310 	mrs	r3, PRIMASK
 800bd40:	60fb      	str	r3, [r7, #12]
  return(result);
 800bd42:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bd44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bd46:	b672      	cpsid	i
}
 800bd48:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681a      	ldr	r2, [r3, #0]
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7ff ffca 	bl	800bcf0 <LST_remove_node>
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	f383 8810 	msr	PRIMASK, r3
}
 800bd66:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bd68:	bf00      	nop
 800bd6a:	3718      	adds	r7, #24
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}

0800bd70 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b085      	sub	sp, #20
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	60b9      	str	r1, [r7, #8]
 800bd7a:	607a      	str	r2, [r7, #4]
 800bd7c:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	68ba      	ldr	r2, [r7, #8]
 800bd82:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2200      	movs	r2, #0
 800bd88:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	2200      	movs	r2, #0
 800bd94:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	687a      	ldr	r2, [r7, #4]
 800bda0:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	887a      	ldrh	r2, [r7, #2]
 800bda6:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	7e3a      	ldrb	r2, [r7, #24]
 800bdac:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800bdae:	7e3b      	ldrb	r3, [r7, #24]
 800bdb0:	f003 0302 	and.w	r3, r3, #2
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d006      	beq.n	800bdc6 <CircularQueue_Init+0x56>
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	891b      	ldrh	r3, [r3, #8]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d002      	beq.n	800bdc6 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800bdc0:	f04f 33ff 	mov.w	r3, #4294967295
 800bdc4:	e000      	b.n	800bdc8 <CircularQueue_Init+0x58>
  }
  return 0;
 800bdc6:	2300      	movs	r3, #0
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3714      	adds	r7, #20
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd2:	4770      	bx	lr

0800bdd4 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b08e      	sub	sp, #56	; 0x38
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	60b9      	str	r1, [r7, #8]
 800bdde:	603b      	str	r3, [r7, #0]
 800bde0:	4613      	mov	r3, r2
 800bde2:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800bde4:	2300      	movs	r3, #0
 800bde6:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800bde8:	2300      	movs	r3, #0
 800bdea:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800bdec:	2300      	movs	r3, #0
 800bdee:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	891b      	ldrh	r3, [r3, #8]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d101      	bne.n	800be0c <CircularQueue_Add+0x38>
 800be08:	2302      	movs	r3, #2
 800be0a:	e000      	b.n	800be0e <CircularQueue_Add+0x3a>
 800be0c:	2300      	movs	r3, #0
 800be0e:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	695b      	ldr	r3, [r3, #20]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d02a      	beq.n	800be6e <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	891b      	ldrh	r3, [r3, #8]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d123      	bne.n	800be68 <CircularQueue_Add+0x94>
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	681a      	ldr	r2, [r3, #0]
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	691b      	ldr	r3, [r3, #16]
 800be28:	4413      	add	r3, r2
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	b29a      	uxth	r2, r3
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	6819      	ldr	r1, [r3, #0]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	691b      	ldr	r3, [r3, #16]
 800be36:	1c58      	adds	r0, r3, #1
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	4298      	cmp	r0, r3
 800be3e:	d306      	bcc.n	800be4e <CircularQueue_Add+0x7a>
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6918      	ldr	r0, [r3, #16]
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	1ac3      	subs	r3, r0, r3
 800be4a:	3301      	adds	r3, #1
 800be4c:	e002      	b.n	800be54 <CircularQueue_Add+0x80>
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	691b      	ldr	r3, [r3, #16]
 800be52:	3301      	adds	r3, #1
 800be54:	440b      	add	r3, r1
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	b29b      	uxth	r3, r3
 800be5a:	021b      	lsls	r3, r3, #8
 800be5c:	b29b      	uxth	r3, r3
 800be5e:	4413      	add	r3, r2
 800be60:	b29b      	uxth	r3, r3
 800be62:	3302      	adds	r3, #2
 800be64:	b29b      	uxth	r3, r3
 800be66:	e001      	b.n	800be6c <CircularQueue_Add+0x98>
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	891b      	ldrh	r3, [r3, #8]
 800be6c:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	891b      	ldrh	r3, [r3, #8]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d002      	beq.n	800be7c <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	891b      	ldrh	r3, [r3, #8]
 800be7a:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	691a      	ldr	r2, [r3, #16]
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	429a      	cmp	r2, r3
 800be86:	d307      	bcc.n	800be98 <CircularQueue_Add+0xc4>
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	685a      	ldr	r2, [r3, #4]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	6919      	ldr	r1, [r3, #16]
 800be90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800be92:	440b      	add	r3, r1
 800be94:	1ad3      	subs	r3, r2, r3
 800be96:	e000      	b.n	800be9a <CircularQueue_Add+0xc6>
 800be98:	2300      	movs	r3, #0
 800be9a:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800be9c:	88fa      	ldrh	r2, [r7, #6]
 800be9e:	7ffb      	ldrb	r3, [r7, #31]
 800bea0:	4413      	add	r3, r2
 800bea2:	461a      	mov	r2, r3
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	fb02 f303 	mul.w	r3, r2, r3
 800beaa:	69ba      	ldr	r2, [r7, #24]
 800beac:	429a      	cmp	r2, r3
 800beae:	d80b      	bhi.n	800bec8 <CircularQueue_Add+0xf4>
 800beb0:	88fa      	ldrh	r2, [r7, #6]
 800beb2:	7ffb      	ldrb	r3, [r7, #31]
 800beb4:	4413      	add	r3, r2
 800beb6:	461a      	mov	r2, r3
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	fbb3 f1f2 	udiv	r1, r3, r2
 800bebe:	fb01 f202 	mul.w	r2, r1, r2
 800bec2:	1a9b      	subs	r3, r3, r2
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	e000      	b.n	800beca <CircularQueue_Add+0xf6>
 800bec8:	2300      	movs	r3, #0
 800beca:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800becc:	7dfa      	ldrb	r2, [r7, #23]
 800bece:	7ffb      	ldrb	r3, [r7, #31]
 800bed0:	429a      	cmp	r2, r3
 800bed2:	bf8c      	ite	hi
 800bed4:	2301      	movhi	r3, #1
 800bed6:	2300      	movls	r3, #0
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800bedc:	7fbb      	ldrb	r3, [r7, #30]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d008      	beq.n	800bef4 <CircularQueue_Add+0x120>
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	7f1b      	ldrb	r3, [r3, #28]
 800bee6:	f003 0301 	and.w	r3, r3, #1
 800beea:	2b00      	cmp	r3, #0
 800beec:	d002      	beq.n	800bef4 <CircularQueue_Add+0x120>
 800beee:	7dfb      	ldrb	r3, [r7, #23]
 800bef0:	b29b      	uxth	r3, r3
 800bef2:	e000      	b.n	800bef6 <CircularQueue_Add+0x122>
 800bef4:	8bbb      	ldrh	r3, [r7, #28]
 800bef6:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800bef8:	7fbb      	ldrb	r3, [r7, #30]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d008      	beq.n	800bf10 <CircularQueue_Add+0x13c>
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	7f1b      	ldrb	r3, [r3, #28]
 800bf02:	f003 0302 	and.w	r3, r3, #2
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d002      	beq.n	800bf10 <CircularQueue_Add+0x13c>
 800bf0a:	7ffb      	ldrb	r3, [r7, #31]
 800bf0c:	b29b      	uxth	r3, r3
 800bf0e:	e000      	b.n	800bf12 <CircularQueue_Add+0x13e>
 800bf10:	8bbb      	ldrh	r3, [r7, #28]
 800bf12:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800bf14:	88fb      	ldrh	r3, [r7, #6]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f000 817e 	beq.w	800c218 <CircularQueue_Add+0x444>
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	695a      	ldr	r2, [r3, #20]
 800bf20:	88f9      	ldrh	r1, [r7, #6]
 800bf22:	7ffb      	ldrb	r3, [r7, #31]
 800bf24:	440b      	add	r3, r1
 800bf26:	4619      	mov	r1, r3
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	fb01 f303 	mul.w	r3, r1, r3
 800bf2e:	441a      	add	r2, r3
 800bf30:	8bbb      	ldrh	r3, [r7, #28]
 800bf32:	441a      	add	r2, r3
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	685b      	ldr	r3, [r3, #4]
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	f200 816d 	bhi.w	800c218 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800bf3e:	2300      	movs	r3, #0
 800bf40:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf42:	e14a      	b.n	800c1da <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	691a      	ldr	r2, [r3, #16]
 800bf48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bf4a:	441a      	add	r2, r3
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d307      	bcc.n	800bf64 <CircularQueue_Add+0x190>
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	691a      	ldr	r2, [r3, #16]
 800bf58:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bf5a:	441a      	add	r2, r3
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	1ad3      	subs	r3, r2, r3
 800bf62:	e003      	b.n	800bf6c <CircularQueue_Add+0x198>
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	691a      	ldr	r2, [r3, #16]
 800bf68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bf6a:	4413      	add	r3, r2
 800bf6c:	68fa      	ldr	r2, [r7, #12]
 800bf6e:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	691b      	ldr	r3, [r3, #16]
 800bf74:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	891b      	ldrh	r3, [r3, #8]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d130      	bne.n	800bfe0 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681a      	ldr	r2, [r3, #0]
 800bf82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf84:	1c59      	adds	r1, r3, #1
 800bf86:	6339      	str	r1, [r7, #48]	; 0x30
 800bf88:	4413      	add	r3, r2
 800bf8a:	88fa      	ldrh	r2, [r7, #6]
 800bf8c:	b2d2      	uxtb	r2, r2
 800bf8e:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d304      	bcc.n	800bfa4 <CircularQueue_Add+0x1d0>
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfa0:	1ad3      	subs	r3, r2, r3
 800bfa2:	e000      	b.n	800bfa6 <CircularQueue_Add+0x1d2>
 800bfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa6:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800bfa8:	88fb      	ldrh	r3, [r7, #6]
 800bfaa:	0a1b      	lsrs	r3, r3, #8
 800bfac:	b298      	uxth	r0, r3
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb4:	1c59      	adds	r1, r3, #1
 800bfb6:	6339      	str	r1, [r7, #48]	; 0x30
 800bfb8:	4413      	add	r3, r2
 800bfba:	b2c2      	uxtb	r2, r0
 800bfbc:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	685b      	ldr	r3, [r3, #4]
 800bfc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d304      	bcc.n	800bfd2 <CircularQueue_Add+0x1fe>
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	e000      	b.n	800bfd4 <CircularQueue_Add+0x200>
 800bfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd4:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	695b      	ldr	r3, [r3, #20]
 800bfda:	1c9a      	adds	r2, r3, #2
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800bfe0:	88fa      	ldrh	r2, [r7, #6]
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	6859      	ldr	r1, [r3, #4]
 800bfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfe8:	1acb      	subs	r3, r1, r3
 800bfea:	4293      	cmp	r3, r2
 800bfec:	bf28      	it	cs
 800bfee:	4613      	movcs	r3, r2
 800bff0:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800bff2:	88fb      	ldrh	r3, [r7, #6]
 800bff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d007      	beq.n	800c00a <CircularQueue_Add+0x236>
 800bffa:	88fb      	ldrh	r3, [r7, #6]
 800bffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bffe:	429a      	cmp	r2, r3
 800c000:	d225      	bcs.n	800c04e <CircularQueue_Add+0x27a>
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	7f1b      	ldrb	r3, [r3, #28]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d121      	bne.n	800c04e <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681a      	ldr	r2, [r3, #0]
 800c00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c010:	18d0      	adds	r0, r2, r3
 800c012:	88fb      	ldrh	r3, [r7, #6]
 800c014:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c016:	fb02 f303 	mul.w	r3, r2, r3
 800c01a:	68ba      	ldr	r2, [r7, #8]
 800c01c:	4413      	add	r3, r2
 800c01e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c020:	4619      	mov	r1, r3
 800c022:	f001 ffa4 	bl	800df6e <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	695a      	ldr	r2, [r3, #20]
 800c02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c02c:	441a      	add	r2, r3
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800c032:	2300      	movs	r3, #0
 800c034:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800c036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c038:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800c03a:	88fa      	ldrh	r2, [r7, #6]
 800c03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03e:	1ad3      	subs	r3, r2, r3
 800c040:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800c042:	7ffb      	ldrb	r3, [r7, #31]
 800c044:	b29a      	uxth	r2, r3
 800c046:	88fb      	ldrh	r3, [r7, #6]
 800c048:	4413      	add	r3, r2
 800c04a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800c04c:	e0a4      	b.n	800c198 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800c04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c050:	2b00      	cmp	r3, #0
 800c052:	f000 80a1 	beq.w	800c198 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	7f1b      	ldrb	r3, [r3, #28]
 800c05a:	f003 0301 	and.w	r3, r3, #1
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d03a      	beq.n	800c0d8 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	891b      	ldrh	r3, [r3, #8]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d10d      	bne.n	800c086 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681a      	ldr	r2, [r3, #0]
 800c06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c070:	3b02      	subs	r3, #2
 800c072:	4413      	add	r3, r2
 800c074:	22ff      	movs	r2, #255	; 0xff
 800c076:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	681a      	ldr	r2, [r3, #0]
 800c07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07e:	3b01      	subs	r3, #1
 800c080:	4413      	add	r3, r2
 800c082:	22ff      	movs	r2, #255	; 0xff
 800c084:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	695a      	ldr	r2, [r3, #20]
 800c08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c08c:	441a      	add	r2, r3
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800c092:	2300      	movs	r3, #0
 800c094:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800c096:	88fb      	ldrh	r3, [r7, #6]
 800c098:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800c09a:	2300      	movs	r3, #0
 800c09c:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	891b      	ldrh	r3, [r3, #8]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d16f      	bne.n	800c186 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681a      	ldr	r2, [r3, #0]
 800c0aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ac:	1c59      	adds	r1, r3, #1
 800c0ae:	6339      	str	r1, [r7, #48]	; 0x30
 800c0b0:	4413      	add	r3, r2
 800c0b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0b4:	b2d2      	uxtb	r2, r2
 800c0b6:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800c0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ba:	0a18      	lsrs	r0, r3, #8
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681a      	ldr	r2, [r3, #0]
 800c0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c2:	1c59      	adds	r1, r3, #1
 800c0c4:	6339      	str	r1, [r7, #48]	; 0x30
 800c0c6:	4413      	add	r3, r2
 800c0c8:	b2c2      	uxtb	r2, r0
 800c0ca:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	695b      	ldr	r3, [r3, #20]
 800c0d0:	1c9a      	adds	r2, r3, #2
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	615a      	str	r2, [r3, #20]
 800c0d6:	e056      	b.n	800c186 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	7f1b      	ldrb	r3, [r3, #28]
 800c0dc:	f003 0302 	and.w	r3, r3, #2
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d050      	beq.n	800c186 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	891b      	ldrh	r3, [r3, #8]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d14a      	bne.n	800c182 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f2:	3b02      	subs	r3, #2
 800c0f4:	4413      	add	r3, r2
 800c0f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0f8:	b2d2      	uxtb	r2, r2
 800c0fa:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800c0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0fe:	0a19      	lsrs	r1, r3, #8
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681a      	ldr	r2, [r3, #0]
 800c104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c106:	3b01      	subs	r3, #1
 800c108:	4413      	add	r3, r2
 800c10a:	b2ca      	uxtb	r2, r1
 800c10c:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c114:	18d0      	adds	r0, r2, r3
 800c116:	88fb      	ldrh	r3, [r7, #6]
 800c118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c11a:	fb02 f303 	mul.w	r3, r2, r3
 800c11e:	68ba      	ldr	r2, [r7, #8]
 800c120:	4413      	add	r3, r2
 800c122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c124:	4619      	mov	r1, r3
 800c126:	f001 ff22 	bl	800df6e <memcpy>
             q->byteCount += NbBytesToCopy; 
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	695a      	ldr	r2, [r3, #20]
 800c12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c130:	441a      	add	r2, r3
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800c136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c138:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800c13a:	88fa      	ldrh	r2, [r7, #6]
 800c13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13e:	1ad3      	subs	r3, r2, r3
 800c140:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	699b      	ldr	r3, [r3, #24]
 800c146:	1c5a      	adds	r2, r3, #1
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800c14c:	2300      	movs	r3, #0
 800c14e:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681a      	ldr	r2, [r3, #0]
 800c154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c156:	1c59      	adds	r1, r3, #1
 800c158:	6339      	str	r1, [r7, #48]	; 0x30
 800c15a:	4413      	add	r3, r2
 800c15c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c15e:	b2d2      	uxtb	r2, r2
 800c160:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800c162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c164:	0a18      	lsrs	r0, r3, #8
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16c:	1c59      	adds	r1, r3, #1
 800c16e:	6339      	str	r1, [r7, #48]	; 0x30
 800c170:	4413      	add	r3, r2
 800c172:	b2c2      	uxtb	r2, r0
 800c174:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	695b      	ldr	r3, [r3, #20]
 800c17a:	1c9a      	adds	r2, r3, #2
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	615a      	str	r2, [r3, #20]
 800c180:	e001      	b.n	800c186 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800c182:	2300      	movs	r3, #0
 800c184:	e049      	b.n	800c21a <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800c186:	7ffb      	ldrb	r3, [r7, #31]
 800c188:	b29a      	uxth	r2, r3
 800c18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18c:	b29b      	uxth	r3, r3
 800c18e:	4413      	add	r3, r2
 800c190:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2200      	movs	r2, #0
 800c196:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800c198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d015      	beq.n	800c1ca <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	681a      	ldr	r2, [r3, #0]
 800c1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a4:	18d0      	adds	r0, r2, r3
 800c1a6:	88fb      	ldrh	r3, [r7, #6]
 800c1a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1aa:	fb03 f202 	mul.w	r2, r3, r2
 800c1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b0:	4413      	add	r3, r2
 800c1b2:	68ba      	ldr	r2, [r7, #8]
 800c1b4:	4413      	add	r3, r2
 800c1b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	f001 fed8 	bl	800df6e <memcpy>
        q->byteCount += NbBytesToCopy;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	695a      	ldr	r2, [r3, #20]
 800c1c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c4:	441a      	add	r2, r3
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	699b      	ldr	r3, [r3, #24]
 800c1ce:	1c5a      	adds	r2, r3, #1
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800c1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	f4ff aeb0 	bcc.w	800bf44 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	6919      	ldr	r1, [r3, #16]
 800c1ec:	7ffb      	ldrb	r3, [r7, #31]
 800c1ee:	4419      	add	r1, r3
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	685b      	ldr	r3, [r3, #4]
 800c1f4:	4299      	cmp	r1, r3
 800c1f6:	d307      	bcc.n	800c208 <CircularQueue_Add+0x434>
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	6919      	ldr	r1, [r3, #16]
 800c1fc:	7ffb      	ldrb	r3, [r7, #31]
 800c1fe:	4419      	add	r1, r3
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	1acb      	subs	r3, r1, r3
 800c206:	e003      	b.n	800c210 <CircularQueue_Add+0x43c>
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	6919      	ldr	r1, [r3, #16]
 800c20c:	7ffb      	ldrb	r3, [r7, #31]
 800c20e:	440b      	add	r3, r1
 800c210:	4413      	add	r3, r2
 800c212:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800c214:	6a3b      	ldr	r3, [r7, #32]
 800c216:	e000      	b.n	800c21a <CircularQueue_Add+0x446>
    return NULL;
 800c218:	2300      	movs	r3, #0
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	3738      	adds	r7, #56	; 0x38
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}

0800c222 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800c222:	b480      	push	{r7}
 800c224:	b085      	sub	sp, #20
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
 800c22a:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800c22c:	2300      	movs	r3, #0
 800c22e:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800c230:	2300      	movs	r3, #0
 800c232:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	891b      	ldrh	r3, [r3, #8]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d101      	bne.n	800c240 <CircularQueue_Remove+0x1e>
 800c23c:	2302      	movs	r3, #2
 800c23e:	e000      	b.n	800c242 <CircularQueue_Remove+0x20>
 800c240:	2300      	movs	r3, #0
 800c242:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800c244:	2300      	movs	r3, #0
 800c246:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	695b      	ldr	r3, [r3, #20]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	f000 80cc 	beq.w	800c3ea <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	891b      	ldrh	r3, [r3, #8]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d121      	bne.n	800c29e <CircularQueue_Remove+0x7c>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681a      	ldr	r2, [r3, #0]
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	68db      	ldr	r3, [r3, #12]
 800c262:	4413      	add	r3, r2
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	b29a      	uxth	r2, r3
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6819      	ldr	r1, [r3, #0]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	68db      	ldr	r3, [r3, #12]
 800c270:	1c58      	adds	r0, r3, #1
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	4298      	cmp	r0, r3
 800c278:	d306      	bcc.n	800c288 <CircularQueue_Remove+0x66>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	68d8      	ldr	r0, [r3, #12]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	1ac3      	subs	r3, r0, r3
 800c284:	3301      	adds	r3, #1
 800c286:	e002      	b.n	800c28e <CircularQueue_Remove+0x6c>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	68db      	ldr	r3, [r3, #12]
 800c28c:	3301      	adds	r3, #1
 800c28e:	440b      	add	r3, r1
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	b29b      	uxth	r3, r3
 800c294:	021b      	lsls	r3, r3, #8
 800c296:	b29b      	uxth	r3, r3
 800c298:	4413      	add	r3, r2
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	e001      	b.n	800c2a2 <CircularQueue_Remove+0x80>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	891b      	ldrh	r3, [r3, #8]
 800c2a2:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	7f1b      	ldrb	r3, [r3, #28]
 800c2a8:	f003 0301 	and.w	r3, r3, #1
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d057      	beq.n	800c360 <CircularQueue_Remove+0x13e>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	7f1b      	ldrb	r3, [r3, #28]
 800c2b4:	f003 0302 	and.w	r3, r3, #2
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d151      	bne.n	800c360 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c2bc:	897b      	ldrh	r3, [r7, #10]
 800c2be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d103      	bne.n	800c2ce <CircularQueue_Remove+0xac>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	891b      	ldrh	r3, [r3, #8]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d012      	beq.n	800c2f4 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	68da      	ldr	r2, [r3, #12]
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d942      	bls.n	800c360 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	891b      	ldrh	r3, [r3, #8]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d03e      	beq.n	800c360 <CircularQueue_Remove+0x13e>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	685a      	ldr	r2, [r3, #4]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	68db      	ldr	r3, [r3, #12]
 800c2ea:	1ad3      	subs	r3, r2, r3
 800c2ec:	687a      	ldr	r2, [r7, #4]
 800c2ee:	8912      	ldrh	r2, [r2, #8]
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d235      	bcs.n	800c360 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	695a      	ldr	r2, [r3, #20]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	68d9      	ldr	r1, [r3, #12]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	1acb      	subs	r3, r1, r3
 800c302:	441a      	add	r2, r3
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2200      	movs	r2, #0
 800c30c:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	891b      	ldrh	r3, [r3, #8]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d121      	bne.n	800c35a <CircularQueue_Remove+0x138>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	68db      	ldr	r3, [r3, #12]
 800c31e:	4413      	add	r3, r2
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	b29a      	uxth	r2, r3
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6819      	ldr	r1, [r3, #0]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	68db      	ldr	r3, [r3, #12]
 800c32c:	1c58      	adds	r0, r3, #1
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	4298      	cmp	r0, r3
 800c334:	d306      	bcc.n	800c344 <CircularQueue_Remove+0x122>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	68d8      	ldr	r0, [r3, #12]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	1ac3      	subs	r3, r0, r3
 800c340:	3301      	adds	r3, #1
 800c342:	e002      	b.n	800c34a <CircularQueue_Remove+0x128>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	68db      	ldr	r3, [r3, #12]
 800c348:	3301      	adds	r3, #1
 800c34a:	440b      	add	r3, r1
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	b29b      	uxth	r3, r3
 800c350:	021b      	lsls	r3, r3, #8
 800c352:	b29b      	uxth	r3, r3
 800c354:	4413      	add	r3, r2
 800c356:	b29b      	uxth	r3, r3
 800c358:	e001      	b.n	800c35e <CircularQueue_Remove+0x13c>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	891b      	ldrh	r3, [r3, #8]
 800c35e:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681a      	ldr	r2, [r3, #0]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	68d9      	ldr	r1, [r3, #12]
 800c368:	7a7b      	ldrb	r3, [r7, #9]
 800c36a:	4419      	add	r1, r3
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	4299      	cmp	r1, r3
 800c372:	d307      	bcc.n	800c384 <CircularQueue_Remove+0x162>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	68d9      	ldr	r1, [r3, #12]
 800c378:	7a7b      	ldrb	r3, [r7, #9]
 800c37a:	4419      	add	r1, r3
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	1acb      	subs	r3, r1, r3
 800c382:	e003      	b.n	800c38c <CircularQueue_Remove+0x16a>
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	68d9      	ldr	r1, [r3, #12]
 800c388:	7a7b      	ldrb	r3, [r7, #9]
 800c38a:	440b      	add	r3, r1
 800c38c:	4413      	add	r3, r2
 800c38e:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	695b      	ldr	r3, [r3, #20]
 800c394:	8979      	ldrh	r1, [r7, #10]
 800c396:	7a7a      	ldrb	r2, [r7, #9]
 800c398:	440a      	add	r2, r1
 800c39a:	1a9a      	subs	r2, r3, r2
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	695b      	ldr	r3, [r3, #20]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d01b      	beq.n	800c3e0 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	68da      	ldr	r2, [r3, #12]
 800c3ac:	897b      	ldrh	r3, [r7, #10]
 800c3ae:	441a      	add	r2, r3
 800c3b0:	7a7b      	ldrb	r3, [r7, #9]
 800c3b2:	441a      	add	r2, r3
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d309      	bcc.n	800c3d0 <CircularQueue_Remove+0x1ae>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	68da      	ldr	r2, [r3, #12]
 800c3c0:	897b      	ldrh	r3, [r7, #10]
 800c3c2:	441a      	add	r2, r3
 800c3c4:	7a7b      	ldrb	r3, [r7, #9]
 800c3c6:	441a      	add	r2, r3
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	1ad3      	subs	r3, r2, r3
 800c3ce:	e005      	b.n	800c3dc <CircularQueue_Remove+0x1ba>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	68da      	ldr	r2, [r3, #12]
 800c3d4:	897b      	ldrh	r3, [r7, #10]
 800c3d6:	441a      	add	r2, r3
 800c3d8:	7a7b      	ldrb	r3, [r7, #9]
 800c3da:	4413      	add	r3, r2
 800c3dc:	687a      	ldr	r2, [r7, #4]
 800c3de:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	699b      	ldr	r3, [r3, #24]
 800c3e4:	1e5a      	subs	r2, r3, #1
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d002      	beq.n	800c3f6 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	897a      	ldrh	r2, [r7, #10]
 800c3f4:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3714      	adds	r7, #20
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800c404:	b480      	push	{r7}
 800c406:	b087      	sub	sp, #28
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800c40e:	2300      	movs	r3, #0
 800c410:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800c412:	2300      	movs	r3, #0
 800c414:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	891b      	ldrh	r3, [r3, #8]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d101      	bne.n	800c422 <CircularQueue_Sense+0x1e>
 800c41e:	2302      	movs	r3, #2
 800c420:	e000      	b.n	800c424 <CircularQueue_Sense+0x20>
 800c422:	2300      	movs	r3, #0
 800c424:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800c426:	2300      	movs	r3, #0
 800c428:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800c42a:	2300      	movs	r3, #0
 800c42c:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	695b      	ldr	r3, [r3, #20]
 800c432:	2b00      	cmp	r3, #0
 800c434:	f000 8090 	beq.w	800c558 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	68db      	ldr	r3, [r3, #12]
 800c43c:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	891b      	ldrh	r3, [r3, #8]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d121      	bne.n	800c48a <CircularQueue_Sense+0x86>
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681a      	ldr	r2, [r3, #0]
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	68db      	ldr	r3, [r3, #12]
 800c44e:	4413      	add	r3, r2
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	b29a      	uxth	r2, r3
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	6819      	ldr	r1, [r3, #0]
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	68db      	ldr	r3, [r3, #12]
 800c45c:	1c58      	adds	r0, r3, #1
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	4298      	cmp	r0, r3
 800c464:	d306      	bcc.n	800c474 <CircularQueue_Sense+0x70>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	68d8      	ldr	r0, [r3, #12]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	1ac3      	subs	r3, r0, r3
 800c470:	3301      	adds	r3, #1
 800c472:	e002      	b.n	800c47a <CircularQueue_Sense+0x76>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	68db      	ldr	r3, [r3, #12]
 800c478:	3301      	adds	r3, #1
 800c47a:	440b      	add	r3, r1
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	b29b      	uxth	r3, r3
 800c480:	021b      	lsls	r3, r3, #8
 800c482:	b29b      	uxth	r3, r3
 800c484:	4413      	add	r3, r2
 800c486:	b29b      	uxth	r3, r3
 800c488:	e001      	b.n	800c48e <CircularQueue_Sense+0x8a>
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	891b      	ldrh	r3, [r3, #8]
 800c48e:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	7f1b      	ldrb	r3, [r3, #28]
 800c494:	f003 0301 	and.w	r3, r3, #1
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d048      	beq.n	800c52e <CircularQueue_Sense+0x12a>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	7f1b      	ldrb	r3, [r3, #28]
 800c4a0:	f003 0302 	and.w	r3, r3, #2
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d142      	bne.n	800c52e <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c4a8:	8a7b      	ldrh	r3, [r7, #18]
 800c4aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d103      	bne.n	800c4ba <CircularQueue_Sense+0xb6>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	891b      	ldrh	r3, [r3, #8]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d012      	beq.n	800c4e0 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	68da      	ldr	r2, [r3, #12]
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d933      	bls.n	800c52e <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	891b      	ldrh	r3, [r3, #8]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d02f      	beq.n	800c52e <CircularQueue_Sense+0x12a>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	685a      	ldr	r2, [r3, #4]
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	68db      	ldr	r3, [r3, #12]
 800c4d6:	1ad3      	subs	r3, r2, r3
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	8912      	ldrh	r2, [r2, #8]
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d226      	bcs.n	800c52e <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	891b      	ldrh	r3, [r3, #8]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d11d      	bne.n	800c528 <CircularQueue_Sense+0x124>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	4413      	add	r3, r2
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	b29a      	uxth	r2, r3
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6819      	ldr	r1, [r3, #0]
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	1c58      	adds	r0, r3, #1
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	685b      	ldr	r3, [r3, #4]
 800c504:	4298      	cmp	r0, r3
 800c506:	d305      	bcc.n	800c514 <CircularQueue_Sense+0x110>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	685b      	ldr	r3, [r3, #4]
 800c50c:	68f8      	ldr	r0, [r7, #12]
 800c50e:	1ac3      	subs	r3, r0, r3
 800c510:	3301      	adds	r3, #1
 800c512:	e001      	b.n	800c518 <CircularQueue_Sense+0x114>
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	3301      	adds	r3, #1
 800c518:	440b      	add	r3, r1
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	021b      	lsls	r3, r3, #8
 800c520:	b29b      	uxth	r3, r3
 800c522:	4413      	add	r3, r2
 800c524:	b29b      	uxth	r3, r3
 800c526:	e001      	b.n	800c52c <CircularQueue_Sense+0x128>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	891b      	ldrh	r3, [r3, #8]
 800c52c:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681a      	ldr	r2, [r3, #0]
 800c532:	7af9      	ldrb	r1, [r7, #11]
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	4419      	add	r1, r3
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	4299      	cmp	r1, r3
 800c53e:	d306      	bcc.n	800c54e <CircularQueue_Sense+0x14a>
 800c540:	7af9      	ldrb	r1, [r7, #11]
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	4419      	add	r1, r3
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	1acb      	subs	r3, r1, r3
 800c54c:	e002      	b.n	800c554 <CircularQueue_Sense+0x150>
 800c54e:	7af9      	ldrb	r1, [r7, #11]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	440b      	add	r3, r1
 800c554:	4413      	add	r3, r2
 800c556:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d002      	beq.n	800c564 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	8a7a      	ldrh	r2, [r7, #18]
 800c562:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800c564:	697b      	ldr	r3, [r7, #20]
}
 800c566:	4618      	mov	r0, r3
 800c568:	371c      	adds	r7, #28
 800c56a:	46bd      	mov	sp, r7
 800c56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c570:	4770      	bx	lr

0800c572 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800c572:	b480      	push	{r7}
 800c574:	af00      	add	r7, sp, #0
  return;
 800c576:	bf00      	nop
}
 800c578:	46bd      	mov	sp, r7
 800c57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57e:	4770      	bx	lr

0800c580 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800c580:	b480      	push	{r7}
 800c582:	af00      	add	r7, sp, #0
  return;
 800c584:	bf00      	nop
}
 800c586:	46bd      	mov	sp, r7
 800c588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58c:	4770      	bx	lr

0800c58e <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800c58e:	b480      	push	{r7}
 800c590:	af00      	add	r7, sp, #0
  return;
 800c592:	bf00      	nop
}
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr

0800c59c <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800c59c:	b480      	push	{r7}
 800c59e:	af00      	add	r7, sp, #0
  return;
 800c5a0:	bf00      	nop
}
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr

0800c5aa <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800c5aa:	b480      	push	{r7}
 800c5ac:	af00      	add	r7, sp, #0
  return;
 800c5ae:	bf00      	nop
}
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr

0800c5b8 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	af00      	add	r7, sp, #0
  return;
 800c5bc:	bf00      	nop
}
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c4:	4770      	bx	lr

0800c5c6 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800c5c6:	b480      	push	{r7}
 800c5c8:	af00      	add	r7, sp, #0
  return;
 800c5ca:	bf00      	nop
}
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d2:	4770      	bx	lr

0800c5d4 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	af00      	add	r7, sp, #0
  return;
 800c5d8:	bf00      	nop
}
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr

0800c5e2 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800c5e2:	b480      	push	{r7}
 800c5e4:	af00      	add	r7, sp, #0
  return;
 800c5e6:	bf00      	nop
}
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr

0800c5f0 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	af00      	add	r7, sp, #0
  return;
 800c5f4:	bf00      	nop
}
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr

0800c5fe <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800c5fe:	b480      	push	{r7}
 800c600:	af00      	add	r7, sp, #0
  return;
 800c602:	bf00      	nop
}
 800c604:	46bd      	mov	sp, r7
 800c606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60a:	4770      	bx	lr

0800c60c <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800c60c:	b480      	push	{r7}
 800c60e:	af00      	add	r7, sp, #0
  return;
 800c610:	bf00      	nop
}
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr

0800c61a <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800c61a:	b480      	push	{r7}
 800c61c:	af00      	add	r7, sp, #0
  return;
 800c61e:	bf00      	nop
}
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr

0800c628 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800c628:	b480      	push	{r7}
 800c62a:	af00      	add	r7, sp, #0
  return;
 800c62c:	bf00      	nop
}
 800c62e:	46bd      	mov	sp, r7
 800c630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c634:	4770      	bx	lr

0800c636 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800c636:	b480      	push	{r7}
 800c638:	af00      	add	r7, sp, #0
  return;
 800c63a:	bf00      	nop
}
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr

0800c644 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800c644:	b480      	push	{r7}
 800c646:	af00      	add	r7, sp, #0
  return;
 800c648:	bf00      	nop
}
 800c64a:	46bd      	mov	sp, r7
 800c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c650:	4770      	bx	lr

0800c652 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800c652:	b480      	push	{r7}
 800c654:	af00      	add	r7, sp, #0
  return;
 800c656:	bf00      	nop
}
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr

0800c660 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800c660:	b480      	push	{r7}
 800c662:	af00      	add	r7, sp, #0
  return;
 800c664:	bf00      	nop
}
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr
	...

0800c670 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800c670:	b580      	push	{r7, lr}
 800c672:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800c674:	4b04      	ldr	r3, [pc, #16]	; (800c688 <SVCCTL_Init+0x18>)
 800c676:	2200      	movs	r2, #0
 800c678:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800c67a:	4b04      	ldr	r3, [pc, #16]	; (800c68c <SVCCTL_Init+0x1c>)
 800c67c:	2200      	movs	r2, #0
 800c67e:	711a      	strb	r2, [r3, #4]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800c680:	f000 f806 	bl	800c690 <SVCCTL_SvcInit>

  return;
 800c684:	bf00      	nop
}
 800c686:	bd80      	pop	{r7, pc}
 800c688:	20000210 	.word	0x20000210
 800c68c:	20000230 	.word	0x20000230

0800c690 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	af00      	add	r7, sp, #0
  BAS_Init();
 800c694:	f7ff ff6d 	bl	800c572 <BAS_Init>

  BLS_Init();
 800c698:	f7ff ff72 	bl	800c580 <BLS_Init>

  CRS_STM_Init();
 800c69c:	f7ff ff77 	bl	800c58e <CRS_STM_Init>

  DIS_Init();
 800c6a0:	f7ff ff7c 	bl	800c59c <DIS_Init>

  EDS_STM_Init();
 800c6a4:	f7ff ff81 	bl	800c5aa <EDS_STM_Init>

  HIDS_Init();
 800c6a8:	f7ff ff86 	bl	800c5b8 <HIDS_Init>

  HRS_Init();
 800c6ac:	f7ff ff8b 	bl	800c5c6 <HRS_Init>

  HTS_Init();
 800c6b0:	f7ff ff90 	bl	800c5d4 <HTS_Init>

  IAS_Init();
 800c6b4:	f7ff ff95 	bl	800c5e2 <IAS_Init>

  LLS_Init();
 800c6b8:	f7ff ff9a 	bl	800c5f0 <LLS_Init>

  TPS_Init();
 800c6bc:	f7ff ff9f 	bl	800c5fe <TPS_Init>

  MOTENV_STM_Init();
 800c6c0:	f7ff ffa4 	bl	800c60c <MOTENV_STM_Init>

  P2PS_STM_Init();
 800c6c4:	f7ff ffa9 	bl	800c61a <P2PS_STM_Init>

  ZDD_STM_Init();
 800c6c8:	f7ff ffae 	bl	800c628 <ZDD_STM_Init>

  OTAS_STM_Init();
 800c6cc:	f7ff ffb3 	bl	800c636 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800c6d0:	f7ff ffbf 	bl	800c652 <BVOPUS_STM_Init>

  MESH_Init();
 800c6d4:	f7ff ffb6 	bl	800c644 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800c6d8:	f7ff ffc2 	bl	800c660 <SVCCTL_InitCustomSvc>
  
  return;
 800c6dc:	bf00      	nop
}
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <SVCCTL_RegisterCltHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterCltHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Client_Event_Handler )
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
  SVCCTL_CltHandler.SVCCTL_CltHandlerTable[SVCCTL_CltHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Client_Event_Handler;
 800c6e8:	4b09      	ldr	r3, [pc, #36]	; (800c710 <SVCCTL_RegisterCltHandler+0x30>)
 800c6ea:	791b      	ldrb	r3, [r3, #4]
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	4a08      	ldr	r2, [pc, #32]	; (800c710 <SVCCTL_RegisterCltHandler+0x30>)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_CltHandler.NbreOfRegisteredHandler++;
 800c6f6:	4b06      	ldr	r3, [pc, #24]	; (800c710 <SVCCTL_RegisterCltHandler+0x30>)
 800c6f8:	791b      	ldrb	r3, [r3, #4]
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	b2da      	uxtb	r2, r3
 800c6fe:	4b04      	ldr	r3, [pc, #16]	; (800c710 <SVCCTL_RegisterCltHandler+0x30>)
 800c700:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Client_Event_Handler);
#endif

  return;
 800c702:	bf00      	nop
}
 800c704:	370c      	adds	r7, #12
 800c706:	46bd      	mov	sp, r7
 800c708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70c:	4770      	bx	lr
 800c70e:	bf00      	nop
 800c710:	20000230 	.word	0x20000230

0800c714 <SVCCTL_UserEvtRx>:

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b086      	sub	sp, #24
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	3301      	adds	r3, #1
 800c720:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800c722:	2300      	movs	r3, #0
 800c724:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	2bff      	cmp	r3, #255	; 0xff
 800c72c:	d13f      	bne.n	800c7ae <SVCCTL_UserEvtRx+0x9a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	3302      	adds	r3, #2
 800c732:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	881b      	ldrh	r3, [r3, #0]
 800c738:	b29b      	uxth	r3, r3
 800c73a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c73e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c742:	d132      	bne.n	800c7aa <SVCCTL_UserEvtRx+0x96>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800c744:	2300      	movs	r3, #0
 800c746:	757b      	strb	r3, [r7, #21]
 800c748:	e00d      	b.n	800c766 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800c74a:	7d7b      	ldrb	r3, [r7, #21]
 800c74c:	4a27      	ldr	r2, [pc, #156]	; (800c7ec <SVCCTL_UserEvtRx+0xd8>)
 800c74e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	4798      	blx	r3
 800c756:	4603      	mov	r3, r0
 800c758:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800c75a:	7dfb      	ldrb	r3, [r7, #23]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d108      	bne.n	800c772 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800c760:	7d7b      	ldrb	r3, [r7, #21]
 800c762:	3301      	adds	r3, #1
 800c764:	757b      	strb	r3, [r7, #21]
 800c766:	4b21      	ldr	r3, [pc, #132]	; (800c7ec <SVCCTL_UserEvtRx+0xd8>)
 800c768:	7f1b      	ldrb	r3, [r3, #28]
 800c76a:	7d7a      	ldrb	r2, [r7, #21]
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d3ec      	bcc.n	800c74a <SVCCTL_UserEvtRx+0x36>
 800c770:	e000      	b.n	800c774 <SVCCTL_UserEvtRx+0x60>
            {
              /**
               *  The event has been managed. The Event processing should be stopped
               */
              break;
 800c772:	bf00      	nop
            }
          }
#endif
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
          /* For Client event handler */
          event_notification_status = SVCCTL_EvtNotAck;
 800c774:	2300      	movs	r3, #0
 800c776:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800c778:	2300      	movs	r3, #0
 800c77a:	757b      	strb	r3, [r7, #21]
 800c77c:	e00d      	b.n	800c79a <SVCCTL_UserEvtRx+0x86>
          {
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 800c77e:	7d7b      	ldrb	r3, [r7, #21]
 800c780:	4a1b      	ldr	r2, [pc, #108]	; (800c7f0 <SVCCTL_UserEvtRx+0xdc>)
 800c782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	4798      	blx	r3
 800c78a:	4603      	mov	r3, r0
 800c78c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Client, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Client
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800c78e:	7dfb      	ldrb	r3, [r7, #23]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d108      	bne.n	800c7a6 <SVCCTL_UserEvtRx+0x92>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 800c794:	7d7b      	ldrb	r3, [r7, #21]
 800c796:	3301      	adds	r3, #1
 800c798:	757b      	strb	r3, [r7, #21]
 800c79a:	4b15      	ldr	r3, [pc, #84]	; (800c7f0 <SVCCTL_UserEvtRx+0xdc>)
 800c79c:	791b      	ldrb	r3, [r3, #4]
 800c79e:	7d7a      	ldrb	r2, [r7, #21]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d3ec      	bcc.n	800c77e <SVCCTL_UserEvtRx+0x6a>
               */
              break;
            }
          }
#endif
          break;
 800c7a4:	e002      	b.n	800c7ac <SVCCTL_UserEvtRx+0x98>
              break;
 800c7a6:	bf00      	nop
          break;
 800c7a8:	e000      	b.n	800c7ac <SVCCTL_UserEvtRx+0x98>

        default:
          break;
 800c7aa:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800c7ac:	e000      	b.n	800c7b0 <SVCCTL_UserEvtRx+0x9c>

    default:
      break;
 800c7ae:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800c7b0:	7dfb      	ldrb	r3, [r7, #23]
 800c7b2:	2b02      	cmp	r3, #2
 800c7b4:	d00f      	beq.n	800c7d6 <SVCCTL_UserEvtRx+0xc2>
 800c7b6:	2b02      	cmp	r3, #2
 800c7b8:	dc10      	bgt.n	800c7dc <SVCCTL_UserEvtRx+0xc8>
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d002      	beq.n	800c7c4 <SVCCTL_UserEvtRx+0xb0>
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d006      	beq.n	800c7d0 <SVCCTL_UserEvtRx+0xbc>
 800c7c2:	e00b      	b.n	800c7dc <SVCCTL_UserEvtRx+0xc8>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f7f6 fddf 	bl	8003388 <SVCCTL_App_Notification>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	75bb      	strb	r3, [r7, #22]
      break;
 800c7ce:	e008      	b.n	800c7e2 <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	75bb      	strb	r3, [r7, #22]
      break;
 800c7d4:	e005      	b.n	800c7e2 <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	75bb      	strb	r3, [r7, #22]
      break;
 800c7da:	e002      	b.n	800c7e2 <SVCCTL_UserEvtRx+0xce>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800c7dc:	2301      	movs	r3, #1
 800c7de:	75bb      	strb	r3, [r7, #22]
      break;
 800c7e0:	bf00      	nop
  }

  return (return_status);
 800c7e2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3718      	adds	r7, #24
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	bd80      	pop	{r7, pc}
 800c7ec:	20000210 	.word	0x20000210
 800c7f0:	20000230 	.word	0x20000230

0800c7f4 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800c7f8:	f7f8 f8c4 	bl	8004984 <HW_IPCC_Enable>

  return;
 800c7fc:	bf00      	nop
}
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <TL_Init>:


void TL_Init( void )
{
 800c800:	b580      	push	{r7, lr}
 800c802:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800c804:	4b10      	ldr	r3, [pc, #64]	; (800c848 <TL_Init+0x48>)
 800c806:	4a11      	ldr	r2, [pc, #68]	; (800c84c <TL_Init+0x4c>)
 800c808:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800c80a:	4b0f      	ldr	r3, [pc, #60]	; (800c848 <TL_Init+0x48>)
 800c80c:	4a10      	ldr	r2, [pc, #64]	; (800c850 <TL_Init+0x50>)
 800c80e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800c810:	4b0d      	ldr	r3, [pc, #52]	; (800c848 <TL_Init+0x48>)
 800c812:	4a10      	ldr	r2, [pc, #64]	; (800c854 <TL_Init+0x54>)
 800c814:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800c816:	4b0c      	ldr	r3, [pc, #48]	; (800c848 <TL_Init+0x48>)
 800c818:	4a0f      	ldr	r2, [pc, #60]	; (800c858 <TL_Init+0x58>)
 800c81a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800c81c:	4b0a      	ldr	r3, [pc, #40]	; (800c848 <TL_Init+0x48>)
 800c81e:	4a0f      	ldr	r2, [pc, #60]	; (800c85c <TL_Init+0x5c>)
 800c820:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800c822:	4b09      	ldr	r3, [pc, #36]	; (800c848 <TL_Init+0x48>)
 800c824:	4a0e      	ldr	r2, [pc, #56]	; (800c860 <TL_Init+0x60>)
 800c826:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800c828:	4b07      	ldr	r3, [pc, #28]	; (800c848 <TL_Init+0x48>)
 800c82a:	4a0e      	ldr	r2, [pc, #56]	; (800c864 <TL_Init+0x64>)
 800c82c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800c82e:	4b06      	ldr	r3, [pc, #24]	; (800c848 <TL_Init+0x48>)
 800c830:	4a0d      	ldr	r2, [pc, #52]	; (800c868 <TL_Init+0x68>)
 800c832:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800c834:	4b04      	ldr	r3, [pc, #16]	; (800c848 <TL_Init+0x48>)
 800c836:	4a0d      	ldr	r2, [pc, #52]	; (800c86c <TL_Init+0x6c>)
 800c838:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800c83a:	4b03      	ldr	r3, [pc, #12]	; (800c848 <TL_Init+0x48>)
 800c83c:	4a0c      	ldr	r2, [pc, #48]	; (800c870 <TL_Init+0x70>)
 800c83e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800c840:	f7f8 f8b4 	bl	80049ac <HW_IPCC_Init>

  return;
 800c844:	bf00      	nop
}
 800c846:	bd80      	pop	{r7, pc}
 800c848:	20030000 	.word	0x20030000
 800c84c:	20030134 	.word	0x20030134
 800c850:	20030154 	.word	0x20030154
 800c854:	20030164 	.word	0x20030164
 800c858:	20030174 	.word	0x20030174
 800c85c:	2003017c 	.word	0x2003017c
 800c860:	20030184 	.word	0x20030184
 800c864:	2003018c 	.word	0x2003018c
 800c868:	200301a8 	.word	0x200301a8
 800c86c:	200301ac 	.word	0x200301ac
 800c870:	200301b8 	.word	0x200301b8

0800c874 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800c880:	4811      	ldr	r0, [pc, #68]	; (800c8c8 <TL_BLE_Init+0x54>)
 800c882:	f7ff f9b7 	bl	800bbf4 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800c886:	4b11      	ldr	r3, [pc, #68]	; (800c8cc <TL_BLE_Init+0x58>)
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	689a      	ldr	r2, [r3, #8]
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	68da      	ldr	r2, [r3, #12]
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	4a0c      	ldr	r2, [pc, #48]	; (800c8d0 <TL_BLE_Init+0x5c>)
 800c8a0:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	4a08      	ldr	r2, [pc, #32]	; (800c8c8 <TL_BLE_Init+0x54>)
 800c8a6:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800c8a8:	f7f8 f896 	bl	80049d8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a08      	ldr	r2, [pc, #32]	; (800c8d4 <TL_BLE_Init+0x60>)
 800c8b2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	4a07      	ldr	r2, [pc, #28]	; (800c8d8 <TL_BLE_Init+0x64>)
 800c8ba:	6013      	str	r3, [r2, #0]

  return 0;
 800c8bc:	2300      	movs	r3, #0
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3710      	adds	r7, #16
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	200301d4 	.word	0x200301d4
 800c8cc:	20030000 	.word	0x20030000
 800c8d0:	20030a58 	.word	0x20030a58
 800c8d4:	200017b4 	.word	0x200017b4
 800c8d8:	200017b8 	.word	0x200017b8

0800c8dc <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b082      	sub	sp, #8
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	460b      	mov	r3, r1
 800c8e6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800c8e8:	4b09      	ldr	r3, [pc, #36]	; (800c910 <TL_BLE_SendCmd+0x34>)
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800c8f2:	4b07      	ldr	r3, [pc, #28]	; (800c910 <TL_BLE_SendCmd+0x34>)
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	2001      	movs	r0, #1
 800c8fc:	f000 f96c 	bl	800cbd8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800c900:	f7f8 f874 	bl	80049ec <HW_IPCC_BLE_SendCmd>

  return 0;
 800c904:	2300      	movs	r3, #0
}
 800c906:	4618      	mov	r0, r3
 800c908:	3708      	adds	r7, #8
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	20030000 	.word	0x20030000

0800c914 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b082      	sub	sp, #8
 800c918:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800c91a:	e01c      	b.n	800c956 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c91c:	1d3b      	adds	r3, r7, #4
 800c91e:	4619      	mov	r1, r3
 800c920:	4812      	ldr	r0, [pc, #72]	; (800c96c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c922:	f7ff fa06 	bl	800bd32 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	7a5b      	ldrb	r3, [r3, #9]
 800c92a:	2b0f      	cmp	r3, #15
 800c92c:	d003      	beq.n	800c936 <HW_IPCC_BLE_RxEvtNot+0x22>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	7a5b      	ldrb	r3, [r3, #9]
 800c932:	2b0e      	cmp	r3, #14
 800c934:	d105      	bne.n	800c942 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	4619      	mov	r1, r3
 800c93a:	2002      	movs	r0, #2
 800c93c:	f000 f94c 	bl	800cbd8 <OutputDbgTrace>
 800c940:	e004      	b.n	800c94c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	4619      	mov	r1, r3
 800c946:	2003      	movs	r0, #3
 800c948:	f000 f946 	bl	800cbd8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800c94c:	4b08      	ldr	r3, [pc, #32]	; (800c970 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	4610      	mov	r0, r2
 800c954:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c956:	4805      	ldr	r0, [pc, #20]	; (800c96c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c958:	f7ff f95c 	bl	800bc14 <LST_is_empty>
 800c95c:	4603      	mov	r3, r0
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d0dc      	beq.n	800c91c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c962:	bf00      	nop
}
 800c964:	3708      	adds	r7, #8
 800c966:	46bd      	mov	sp, r7
 800c968:	bd80      	pop	{r7, pc}
 800c96a:	bf00      	nop
 800c96c:	200301d4 	.word	0x200301d4
 800c970:	200017b4 	.word	0x200017b4

0800c974 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c978:	4b02      	ldr	r3, [pc, #8]	; (800c984 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4798      	blx	r3

  return;
 800c97e:	bf00      	nop
}
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	200017b8 	.word	0x200017b8

0800c988 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c994:	480d      	ldr	r0, [pc, #52]	; (800c9cc <TL_SYS_Init+0x44>)
 800c996:	f7ff f92d 	bl	800bbf4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c99a:	4b0d      	ldr	r3, [pc, #52]	; (800c9d0 <TL_SYS_Init+0x48>)
 800c99c:	68db      	ldr	r3, [r3, #12]
 800c99e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	689a      	ldr	r2, [r3, #8]
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	4a08      	ldr	r2, [pc, #32]	; (800c9cc <TL_SYS_Init+0x44>)
 800c9ac:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c9ae:	f7f8 f83f 	bl	8004a30 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	4a07      	ldr	r2, [pc, #28]	; (800c9d4 <TL_SYS_Init+0x4c>)
 800c9b8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	685b      	ldr	r3, [r3, #4]
 800c9be:	4a06      	ldr	r2, [pc, #24]	; (800c9d8 <TL_SYS_Init+0x50>)
 800c9c0:	6013      	str	r3, [r2, #0]

  return 0;
 800c9c2:	2300      	movs	r3, #0
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3710      	adds	r7, #16
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}
 800c9cc:	200301dc 	.word	0x200301dc
 800c9d0:	20030000 	.word	0x20030000
 800c9d4:	200017bc 	.word	0x200017bc
 800c9d8:	200017c0 	.word	0x200017c0

0800c9dc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b082      	sub	sp, #8
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	460b      	mov	r3, r1
 800c9e6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c9e8:	4b09      	ldr	r3, [pc, #36]	; (800ca10 <TL_SYS_SendCmd+0x34>)
 800c9ea:	68db      	ldr	r3, [r3, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2210      	movs	r2, #16
 800c9f0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800c9f2:	4b07      	ldr	r3, [pc, #28]	; (800ca10 <TL_SYS_SendCmd+0x34>)
 800c9f4:	68db      	ldr	r3, [r3, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	2004      	movs	r0, #4
 800c9fc:	f000 f8ec 	bl	800cbd8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800ca00:	f7f8 f820 	bl	8004a44 <HW_IPCC_SYS_SendCmd>

  return 0;
 800ca04:	2300      	movs	r3, #0
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3708      	adds	r7, #8
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	20030000 	.word	0x20030000

0800ca14 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ca18:	4b07      	ldr	r3, [pc, #28]	; (800ca38 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ca1a:	68db      	ldr	r3, [r3, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	4619      	mov	r1, r3
 800ca20:	2005      	movs	r0, #5
 800ca22:	f000 f8d9 	bl	800cbd8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ca26:	4b05      	ldr	r3, [pc, #20]	; (800ca3c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	4a03      	ldr	r2, [pc, #12]	; (800ca38 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ca2c:	68d2      	ldr	r2, [r2, #12]
 800ca2e:	6812      	ldr	r2, [r2, #0]
 800ca30:	4610      	mov	r0, r2
 800ca32:	4798      	blx	r3

  return;
 800ca34:	bf00      	nop
}
 800ca36:	bd80      	pop	{r7, pc}
 800ca38:	20030000 	.word	0x20030000
 800ca3c:	200017bc 	.word	0x200017bc

0800ca40 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b082      	sub	sp, #8
 800ca44:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ca46:	e00e      	b.n	800ca66 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800ca48:	1d3b      	adds	r3, r7, #4
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	480b      	ldr	r0, [pc, #44]	; (800ca7c <HW_IPCC_SYS_EvtNot+0x3c>)
 800ca4e:	f7ff f970 	bl	800bd32 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	4619      	mov	r1, r3
 800ca56:	2006      	movs	r0, #6
 800ca58:	f000 f8be 	bl	800cbd8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800ca5c:	4b08      	ldr	r3, [pc, #32]	; (800ca80 <HW_IPCC_SYS_EvtNot+0x40>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	687a      	ldr	r2, [r7, #4]
 800ca62:	4610      	mov	r0, r2
 800ca64:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ca66:	4805      	ldr	r0, [pc, #20]	; (800ca7c <HW_IPCC_SYS_EvtNot+0x3c>)
 800ca68:	f7ff f8d4 	bl	800bc14 <LST_is_empty>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d0ea      	beq.n	800ca48 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800ca72:	bf00      	nop
}
 800ca74:	3708      	adds	r7, #8
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
 800ca7a:	bf00      	nop
 800ca7c:	200301dc 	.word	0x200301dc
 800ca80:	200017c0 	.word	0x200017c0

0800ca84 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b082      	sub	sp, #8
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800ca8c:	4817      	ldr	r0, [pc, #92]	; (800caec <TL_MM_Init+0x68>)
 800ca8e:	f7ff f8b1 	bl	800bbf4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800ca92:	4817      	ldr	r0, [pc, #92]	; (800caf0 <TL_MM_Init+0x6c>)
 800ca94:	f7ff f8ae 	bl	800bbf4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800ca98:	4b16      	ldr	r3, [pc, #88]	; (800caf4 <TL_MM_Init+0x70>)
 800ca9a:	691b      	ldr	r3, [r3, #16]
 800ca9c:	4a16      	ldr	r2, [pc, #88]	; (800caf8 <TL_MM_Init+0x74>)
 800ca9e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800caa0:	4b15      	ldr	r3, [pc, #84]	; (800caf8 <TL_MM_Init+0x74>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	687a      	ldr	r2, [r7, #4]
 800caa6:	6892      	ldr	r2, [r2, #8]
 800caa8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800caaa:	4b13      	ldr	r3, [pc, #76]	; (800caf8 <TL_MM_Init+0x74>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	68d2      	ldr	r2, [r2, #12]
 800cab2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800cab4:	4b10      	ldr	r3, [pc, #64]	; (800caf8 <TL_MM_Init+0x74>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4a0c      	ldr	r2, [pc, #48]	; (800caec <TL_MM_Init+0x68>)
 800caba:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800cabc:	4b0e      	ldr	r3, [pc, #56]	; (800caf8 <TL_MM_Init+0x74>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	6812      	ldr	r2, [r2, #0]
 800cac4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800cac6:	4b0c      	ldr	r3, [pc, #48]	; (800caf8 <TL_MM_Init+0x74>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	687a      	ldr	r2, [r7, #4]
 800cacc:	6852      	ldr	r2, [r2, #4]
 800cace:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800cad0:	4b09      	ldr	r3, [pc, #36]	; (800caf8 <TL_MM_Init+0x74>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	6912      	ldr	r2, [r2, #16]
 800cad8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800cada:	4b07      	ldr	r3, [pc, #28]	; (800caf8 <TL_MM_Init+0x74>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	6952      	ldr	r2, [r2, #20]
 800cae2:	619a      	str	r2, [r3, #24]

  return;
 800cae4:	bf00      	nop
}
 800cae6:	3708      	adds	r7, #8
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}
 800caec:	200301c4 	.word	0x200301c4
 800caf0:	200017ac 	.word	0x200017ac
 800caf4:	20030000 	.word	0x20030000
 800caf8:	200017c4 	.word	0x200017c4

0800cafc <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800cb04:	6879      	ldr	r1, [r7, #4]
 800cb06:	4807      	ldr	r0, [pc, #28]	; (800cb24 <TL_MM_EvtDone+0x28>)
 800cb08:	f7ff f8cc 	bl	800bca4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800cb0c:	6879      	ldr	r1, [r7, #4]
 800cb0e:	2000      	movs	r0, #0
 800cb10:	f000 f862 	bl	800cbd8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800cb14:	4804      	ldr	r0, [pc, #16]	; (800cb28 <TL_MM_EvtDone+0x2c>)
 800cb16:	f7f7 ffbb 	bl	8004a90 <HW_IPCC_MM_SendFreeBuf>

  return;
 800cb1a:	bf00      	nop
}
 800cb1c:	3708      	adds	r7, #8
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	200017ac 	.word	0x200017ac
 800cb28:	0800cb2d 	.word	0x0800cb2d

0800cb2c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b082      	sub	sp, #8
 800cb30:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800cb32:	e00c      	b.n	800cb4e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800cb34:	1d3b      	adds	r3, r7, #4
 800cb36:	4619      	mov	r1, r3
 800cb38:	480a      	ldr	r0, [pc, #40]	; (800cb64 <SendFreeBuf+0x38>)
 800cb3a:	f7ff f8fa 	bl	800bd32 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800cb3e:	4b0a      	ldr	r3, [pc, #40]	; (800cb68 <SendFreeBuf+0x3c>)
 800cb40:	691b      	ldr	r3, [r3, #16]
 800cb42:	691b      	ldr	r3, [r3, #16]
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	4611      	mov	r1, r2
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f7ff f8ab 	bl	800bca4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800cb4e:	4805      	ldr	r0, [pc, #20]	; (800cb64 <SendFreeBuf+0x38>)
 800cb50:	f7ff f860 	bl	800bc14 <LST_is_empty>
 800cb54:	4603      	mov	r3, r0
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d0ec      	beq.n	800cb34 <SendFreeBuf+0x8>
  }

  return;
 800cb5a:	bf00      	nop
}
 800cb5c:	3708      	adds	r7, #8
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	200017ac 	.word	0x200017ac
 800cb68:	20030000 	.word	0x20030000

0800cb6c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800cb70:	4805      	ldr	r0, [pc, #20]	; (800cb88 <TL_TRACES_Init+0x1c>)
 800cb72:	f7ff f83f 	bl	800bbf4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800cb76:	4b05      	ldr	r3, [pc, #20]	; (800cb8c <TL_TRACES_Init+0x20>)
 800cb78:	695b      	ldr	r3, [r3, #20]
 800cb7a:	4a03      	ldr	r2, [pc, #12]	; (800cb88 <TL_TRACES_Init+0x1c>)
 800cb7c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800cb7e:	f7f7 ffbd 	bl	8004afc <HW_IPCC_TRACES_Init>

  return;
 800cb82:	bf00      	nop
}
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	200301cc 	.word	0x200301cc
 800cb8c:	20030000 	.word	0x20030000

0800cb90 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b082      	sub	sp, #8
 800cb94:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800cb96:	e008      	b.n	800cbaa <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800cb98:	1d3b      	adds	r3, r7, #4
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	4808      	ldr	r0, [pc, #32]	; (800cbc0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800cb9e:	f7ff f8c8 	bl	800bd32 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	4618      	mov	r0, r3
 800cba6:	f000 f80d 	bl	800cbc4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800cbaa:	4805      	ldr	r0, [pc, #20]	; (800cbc0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800cbac:	f7ff f832 	bl	800bc14 <LST_is_empty>
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d0f0      	beq.n	800cb98 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800cbb6:	bf00      	nop
}
 800cbb8:	3708      	adds	r7, #8
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	200301cc 	.word	0x200301cc

0800cbc4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b083      	sub	sp, #12
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800cbcc:	bf00      	nop
 800cbce:	370c      	adds	r7, #12
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd6:	4770      	bx	lr

0800cbd8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b085      	sub	sp, #20
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	4603      	mov	r3, r0
 800cbe0:	6039      	str	r1, [r7, #0]
 800cbe2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800cbe4:	79fb      	ldrb	r3, [r7, #7]
 800cbe6:	2b06      	cmp	r3, #6
 800cbe8:	d845      	bhi.n	800cc76 <OutputDbgTrace+0x9e>
 800cbea:	a201      	add	r2, pc, #4	; (adr r2, 800cbf0 <OutputDbgTrace+0x18>)
 800cbec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbf0:	0800cc0d 	.word	0x0800cc0d
 800cbf4:	0800cc31 	.word	0x0800cc31
 800cbf8:	0800cc37 	.word	0x0800cc37
 800cbfc:	0800cc4b 	.word	0x0800cc4b
 800cc00:	0800cc57 	.word	0x0800cc57
 800cc04:	0800cc5d 	.word	0x0800cc5d
 800cc08:	0800cc6b 	.word	0x0800cc6b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	7a5b      	ldrb	r3, [r3, #9]
 800cc14:	2bff      	cmp	r3, #255	; 0xff
 800cc16:	d005      	beq.n	800cc24 <OutputDbgTrace+0x4c>
 800cc18:	2bff      	cmp	r3, #255	; 0xff
 800cc1a:	dc05      	bgt.n	800cc28 <OutputDbgTrace+0x50>
 800cc1c:	2b0e      	cmp	r3, #14
 800cc1e:	d005      	beq.n	800cc2c <OutputDbgTrace+0x54>
 800cc20:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800cc22:	e001      	b.n	800cc28 <OutputDbgTrace+0x50>
          break;
 800cc24:	bf00      	nop
 800cc26:	e027      	b.n	800cc78 <OutputDbgTrace+0xa0>
          break;
 800cc28:	bf00      	nop
 800cc2a:	e025      	b.n	800cc78 <OutputDbgTrace+0xa0>
          break;
 800cc2c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800cc2e:	e023      	b.n	800cc78 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800cc34:	e020      	b.n	800cc78 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	7a5b      	ldrb	r3, [r3, #9]
 800cc3e:	2b0e      	cmp	r3, #14
 800cc40:	d001      	beq.n	800cc46 <OutputDbgTrace+0x6e>
 800cc42:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800cc44:	e000      	b.n	800cc48 <OutputDbgTrace+0x70>
          break;
 800cc46:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800cc48:	e016      	b.n	800cc78 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	7a5b      	ldrb	r3, [r3, #9]
 800cc52:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800cc54:	e010      	b.n	800cc78 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800cc5a:	e00d      	b.n	800cc78 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	7a5b      	ldrb	r3, [r3, #9]
 800cc64:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800cc66:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800cc68:	e006      	b.n	800cc78 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	7a5b      	ldrb	r3, [r3, #9]
 800cc72:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800cc74:	e000      	b.n	800cc78 <OutputDbgTrace+0xa0>

    default:
      break;
 800cc76:	bf00      	nop
  }

  return;
 800cc78:	bf00      	nop
}
 800cc7a:	3714      	adds	r7, #20
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc82:	4770      	bx	lr

0800cc84 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800cc84:	b480      	push	{r7}
 800cc86:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800cc88:	4b05      	ldr	r3, [pc, #20]	; (800cca0 <UTIL_LPM_Init+0x1c>)
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800cc8e:	4b05      	ldr	r3, [pc, #20]	; (800cca4 <UTIL_LPM_Init+0x20>)
 800cc90:	2200      	movs	r2, #0
 800cc92:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800cc94:	bf00      	nop
 800cc96:	46bd      	mov	sp, r7
 800cc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop
 800cca0:	200017c8 	.word	0x200017c8
 800cca4:	200017cc 	.word	0x200017cc

0800cca8 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b087      	sub	sp, #28
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	460b      	mov	r3, r1
 800ccb2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccb4:	f3ef 8310 	mrs	r3, PRIMASK
 800ccb8:	613b      	str	r3, [r7, #16]
  return(result);
 800ccba:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ccbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ccbe:	b672      	cpsid	i
}
 800ccc0:	bf00      	nop
  
  switch(state)
 800ccc2:	78fb      	ldrb	r3, [r7, #3]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d008      	beq.n	800ccda <UTIL_LPM_SetOffMode+0x32>
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	d10e      	bne.n	800ccea <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800cccc:	4b0d      	ldr	r3, [pc, #52]	; (800cd04 <UTIL_LPM_SetOffMode+0x5c>)
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	4a0b      	ldr	r2, [pc, #44]	; (800cd04 <UTIL_LPM_SetOffMode+0x5c>)
 800ccd6:	6013      	str	r3, [r2, #0]
      break;
 800ccd8:	e008      	b.n	800ccec <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	43da      	mvns	r2, r3
 800ccde:	4b09      	ldr	r3, [pc, #36]	; (800cd04 <UTIL_LPM_SetOffMode+0x5c>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	4013      	ands	r3, r2
 800cce4:	4a07      	ldr	r2, [pc, #28]	; (800cd04 <UTIL_LPM_SetOffMode+0x5c>)
 800cce6:	6013      	str	r3, [r2, #0]
      break;
 800cce8:	e000      	b.n	800ccec <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800ccea:	bf00      	nop
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f383 8810 	msr	PRIMASK, r3
}
 800ccf6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ccf8:	bf00      	nop
 800ccfa:	371c      	adds	r7, #28
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr
 800cd04:	200017cc 	.word	0x200017cc

0800cd08 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b090      	sub	sp, #64	; 0x40
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800cd10:	4b73      	ldr	r3, [pc, #460]	; (800cee0 <UTIL_SEQ_Run+0x1d8>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800cd16:	4b72      	ldr	r3, [pc, #456]	; (800cee0 <UTIL_SEQ_Run+0x1d8>)
 800cd18:	681a      	ldr	r2, [r3, #0]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	4013      	ands	r3, r2
 800cd1e:	4a70      	ldr	r2, [pc, #448]	; (800cee0 <UTIL_SEQ_Run+0x1d8>)
 800cd20:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800cd22:	4b70      	ldr	r3, [pc, #448]	; (800cee4 <UTIL_SEQ_Run+0x1dc>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800cd28:	4b6f      	ldr	r3, [pc, #444]	; (800cee8 <UTIL_SEQ_Run+0x1e0>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800cd2e:	4b6f      	ldr	r3, [pc, #444]	; (800ceec <UTIL_SEQ_Run+0x1e4>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800cd34:	4b6e      	ldr	r3, [pc, #440]	; (800cef0 <UTIL_SEQ_Run+0x1e8>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800cd3a:	e08d      	b.n	800ce58 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800cd40:	e002      	b.n	800cd48 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800cd42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd44:	3301      	adds	r3, #1
 800cd46:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800cd48:	4a6a      	ldr	r2, [pc, #424]	; (800cef4 <UTIL_SEQ_Run+0x1ec>)
 800cd4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd4c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cd50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd52:	401a      	ands	r2, r3
 800cd54:	4b62      	ldr	r3, [pc, #392]	; (800cee0 <UTIL_SEQ_Run+0x1d8>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	4013      	ands	r3, r2
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d0f1      	beq.n	800cd42 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800cd5e:	4a65      	ldr	r2, [pc, #404]	; (800cef4 <UTIL_SEQ_Run+0x1ec>)
 800cd60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd62:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd68:	401a      	ands	r2, r3
 800cd6a:	4b5d      	ldr	r3, [pc, #372]	; (800cee0 <UTIL_SEQ_Run+0x1d8>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	4013      	ands	r3, r2
 800cd70:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800cd72:	4a60      	ldr	r2, [pc, #384]	; (800cef4 <UTIL_SEQ_Run+0x1ec>)
 800cd74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd76:	00db      	lsls	r3, r3, #3
 800cd78:	4413      	add	r3, r2
 800cd7a:	685a      	ldr	r2, [r3, #4]
 800cd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7e:	4013      	ands	r3, r2
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d106      	bne.n	800cd92 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800cd84:	4a5b      	ldr	r2, [pc, #364]	; (800cef4 <UTIL_SEQ_Run+0x1ec>)
 800cd86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd88:	00db      	lsls	r3, r3, #3
 800cd8a:	4413      	add	r3, r2
 800cd8c:	f04f 32ff 	mov.w	r2, #4294967295
 800cd90:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800cd92:	4a58      	ldr	r2, [pc, #352]	; (800cef4 <UTIL_SEQ_Run+0x1ec>)
 800cd94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd96:	00db      	lsls	r3, r3, #3
 800cd98:	4413      	add	r3, r2
 800cd9a:	685a      	ldr	r2, [r3, #4]
 800cd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9e:	4013      	ands	r3, r2
 800cda0:	4618      	mov	r0, r3
 800cda2:	f000 f9b3 	bl	800d10c <SEQ_BitPosition>
 800cda6:	4603      	mov	r3, r0
 800cda8:	461a      	mov	r2, r3
 800cdaa:	4b53      	ldr	r3, [pc, #332]	; (800cef8 <UTIL_SEQ_Run+0x1f0>)
 800cdac:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800cdae:	4a51      	ldr	r2, [pc, #324]	; (800cef4 <UTIL_SEQ_Run+0x1ec>)
 800cdb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdb2:	00db      	lsls	r3, r3, #3
 800cdb4:	4413      	add	r3, r2
 800cdb6:	685a      	ldr	r2, [r3, #4]
 800cdb8:	4b4f      	ldr	r3, [pc, #316]	; (800cef8 <UTIL_SEQ_Run+0x1f0>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	2101      	movs	r1, #1
 800cdbe:	fa01 f303 	lsl.w	r3, r1, r3
 800cdc2:	43db      	mvns	r3, r3
 800cdc4:	401a      	ands	r2, r3
 800cdc6:	494b      	ldr	r1, [pc, #300]	; (800cef4 <UTIL_SEQ_Run+0x1ec>)
 800cdc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdca:	00db      	lsls	r3, r3, #3
 800cdcc:	440b      	add	r3, r1
 800cdce:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdd0:	f3ef 8310 	mrs	r3, PRIMASK
 800cdd4:	61bb      	str	r3, [r7, #24]
  return(result);
 800cdd6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cdd8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800cdda:	b672      	cpsid	i
}
 800cddc:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800cdde:	4b46      	ldr	r3, [pc, #280]	; (800cef8 <UTIL_SEQ_Run+0x1f0>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	2201      	movs	r2, #1
 800cde4:	fa02 f303 	lsl.w	r3, r2, r3
 800cde8:	43da      	mvns	r2, r3
 800cdea:	4b3e      	ldr	r3, [pc, #248]	; (800cee4 <UTIL_SEQ_Run+0x1dc>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	4013      	ands	r3, r2
 800cdf0:	4a3c      	ldr	r2, [pc, #240]	; (800cee4 <UTIL_SEQ_Run+0x1dc>)
 800cdf2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800cdf4:	2302      	movs	r3, #2
 800cdf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cdf8:	e013      	b.n	800ce22 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800cdfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdfc:	3b01      	subs	r3, #1
 800cdfe:	4a3d      	ldr	r2, [pc, #244]	; (800cef4 <UTIL_SEQ_Run+0x1ec>)
 800ce00:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800ce04:	4b3c      	ldr	r3, [pc, #240]	; (800cef8 <UTIL_SEQ_Run+0x1f0>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	2201      	movs	r2, #1
 800ce0a:	fa02 f303 	lsl.w	r3, r2, r3
 800ce0e:	43da      	mvns	r2, r3
 800ce10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce12:	3b01      	subs	r3, #1
 800ce14:	400a      	ands	r2, r1
 800ce16:	4937      	ldr	r1, [pc, #220]	; (800cef4 <UTIL_SEQ_Run+0x1ec>)
 800ce18:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800ce1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce1e:	3b01      	subs	r3, #1
 800ce20:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d1e8      	bne.n	800cdfa <UTIL_SEQ_Run+0xf2>
 800ce28:	6a3b      	ldr	r3, [r7, #32]
 800ce2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	f383 8810 	msr	PRIMASK, r3
}
 800ce32:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800ce34:	4b30      	ldr	r3, [pc, #192]	; (800cef8 <UTIL_SEQ_Run+0x1f0>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	4a30      	ldr	r2, [pc, #192]	; (800cefc <UTIL_SEQ_Run+0x1f4>)
 800ce3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce3e:	4798      	blx	r3

    local_taskset = TaskSet;
 800ce40:	4b28      	ldr	r3, [pc, #160]	; (800cee4 <UTIL_SEQ_Run+0x1dc>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800ce46:	4b28      	ldr	r3, [pc, #160]	; (800cee8 <UTIL_SEQ_Run+0x1e0>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800ce4c:	4b27      	ldr	r3, [pc, #156]	; (800ceec <UTIL_SEQ_Run+0x1e4>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800ce52:	4b27      	ldr	r3, [pc, #156]	; (800cef0 <UTIL_SEQ_Run+0x1e8>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800ce58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce5c:	401a      	ands	r2, r3
 800ce5e:	4b20      	ldr	r3, [pc, #128]	; (800cee0 <UTIL_SEQ_Run+0x1d8>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	4013      	ands	r3, r2
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d005      	beq.n	800ce74 <UTIL_SEQ_Run+0x16c>
 800ce68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6c:	4013      	ands	r3, r2
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	f43f af64 	beq.w	800cd3c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800ce74:	4b20      	ldr	r3, [pc, #128]	; (800cef8 <UTIL_SEQ_Run+0x1f0>)
 800ce76:	f04f 32ff 	mov.w	r2, #4294967295
 800ce7a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800ce7c:	f000 f938 	bl	800d0f0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce80:	f3ef 8310 	mrs	r3, PRIMASK
 800ce84:	613b      	str	r3, [r7, #16]
  return(result);
 800ce86:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800ce88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ce8a:	b672      	cpsid	i
}
 800ce8c:	bf00      	nop
  local_taskset = TaskSet;
 800ce8e:	4b15      	ldr	r3, [pc, #84]	; (800cee4 <UTIL_SEQ_Run+0x1dc>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800ce94:	4b14      	ldr	r3, [pc, #80]	; (800cee8 <UTIL_SEQ_Run+0x1e0>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800ce9a:	4b14      	ldr	r3, [pc, #80]	; (800ceec <UTIL_SEQ_Run+0x1e4>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800cea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea4:	401a      	ands	r2, r3
 800cea6:	4b0e      	ldr	r3, [pc, #56]	; (800cee0 <UTIL_SEQ_Run+0x1d8>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4013      	ands	r3, r2
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d107      	bne.n	800cec0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800ceb0:	4b0f      	ldr	r3, [pc, #60]	; (800cef0 <UTIL_SEQ_Run+0x1e8>)
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceb6:	4013      	ands	r3, r2
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d101      	bne.n	800cec0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800cebc:	f7f4 fce5 	bl	800188a <UTIL_SEQ_Idle>
 800cec0:	69fb      	ldr	r3, [r7, #28]
 800cec2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f383 8810 	msr	PRIMASK, r3
}
 800ceca:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800cecc:	f000 f917 	bl	800d0fe <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800ced0:	4a03      	ldr	r2, [pc, #12]	; (800cee0 <UTIL_SEQ_Run+0x1d8>)
 800ced2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced4:	6013      	str	r3, [r2, #0]

  return;
 800ced6:	bf00      	nop
}
 800ced8:	3740      	adds	r7, #64	; 0x40
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}
 800cede:	bf00      	nop
 800cee0:	20000030 	.word	0x20000030
 800cee4:	200017d0 	.word	0x200017d0
 800cee8:	200017d4 	.word	0x200017d4
 800ceec:	2000002c 	.word	0x2000002c
 800cef0:	200017d8 	.word	0x200017d8
 800cef4:	20001860 	.word	0x20001860
 800cef8:	200017dc 	.word	0x200017dc
 800cefc:	200017e0 	.word	0x200017e0

0800cf00 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b088      	sub	sp, #32
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	60f8      	str	r0, [r7, #12]
 800cf08:	60b9      	str	r1, [r7, #8]
 800cf0a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf0c:	f3ef 8310 	mrs	r3, PRIMASK
 800cf10:	617b      	str	r3, [r7, #20]
  return(result);
 800cf12:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800cf14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800cf16:	b672      	cpsid	i
}
 800cf18:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800cf1a:	68f8      	ldr	r0, [r7, #12]
 800cf1c:	f000 f8f6 	bl	800d10c <SEQ_BitPosition>
 800cf20:	4603      	mov	r3, r0
 800cf22:	4619      	mov	r1, r3
 800cf24:	4a06      	ldr	r2, [pc, #24]	; (800cf40 <UTIL_SEQ_RegTask+0x40>)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800cf2c:	69fb      	ldr	r3, [r7, #28]
 800cf2e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf30:	69bb      	ldr	r3, [r7, #24]
 800cf32:	f383 8810 	msr	PRIMASK, r3
}
 800cf36:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800cf38:	bf00      	nop
}
 800cf3a:	3720      	adds	r7, #32
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}
 800cf40:	200017e0 	.word	0x200017e0

0800cf44 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800cf44:	b480      	push	{r7}
 800cf46:	b087      	sub	sp, #28
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf4e:	f3ef 8310 	mrs	r3, PRIMASK
 800cf52:	60fb      	str	r3, [r7, #12]
  return(result);
 800cf54:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cf56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cf58:	b672      	cpsid	i
}
 800cf5a:	bf00      	nop

  TaskSet |= TaskId_bm;
 800cf5c:	4b0d      	ldr	r3, [pc, #52]	; (800cf94 <UTIL_SEQ_SetTask+0x50>)
 800cf5e:	681a      	ldr	r2, [r3, #0]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	4313      	orrs	r3, r2
 800cf64:	4a0b      	ldr	r2, [pc, #44]	; (800cf94 <UTIL_SEQ_SetTask+0x50>)
 800cf66:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800cf68:	4a0b      	ldr	r2, [pc, #44]	; (800cf98 <UTIL_SEQ_SetTask+0x54>)
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	431a      	orrs	r2, r3
 800cf74:	4908      	ldr	r1, [pc, #32]	; (800cf98 <UTIL_SEQ_SetTask+0x54>)
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf80:	693b      	ldr	r3, [r7, #16]
 800cf82:	f383 8810 	msr	PRIMASK, r3
}
 800cf86:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800cf88:	bf00      	nop
}
 800cf8a:	371c      	adds	r7, #28
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr
 800cf94:	200017d0 	.word	0x200017d0
 800cf98:	20001860 	.word	0x20001860

0800cf9c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b087      	sub	sp, #28
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfa4:	f3ef 8310 	mrs	r3, PRIMASK
 800cfa8:	60fb      	str	r3, [r7, #12]
  return(result);
 800cfaa:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cfac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cfae:	b672      	cpsid	i
}
 800cfb0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	43da      	mvns	r2, r3
 800cfb6:	4b08      	ldr	r3, [pc, #32]	; (800cfd8 <UTIL_SEQ_PauseTask+0x3c>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	4013      	ands	r3, r2
 800cfbc:	4a06      	ldr	r2, [pc, #24]	; (800cfd8 <UTIL_SEQ_PauseTask+0x3c>)
 800cfbe:	6013      	str	r3, [r2, #0]
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	f383 8810 	msr	PRIMASK, r3
}
 800cfca:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800cfcc:	bf00      	nop
}
 800cfce:	371c      	adds	r7, #28
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr
 800cfd8:	2000002c 	.word	0x2000002c

0800cfdc <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b087      	sub	sp, #28
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cfe4:	f3ef 8310 	mrs	r3, PRIMASK
 800cfe8:	60fb      	str	r3, [r7, #12]
  return(result);
 800cfea:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cfec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cfee:	b672      	cpsid	i
}
 800cff0:	bf00      	nop

  TaskMask |= TaskId_bm;
 800cff2:	4b09      	ldr	r3, [pc, #36]	; (800d018 <UTIL_SEQ_ResumeTask+0x3c>)
 800cff4:	681a      	ldr	r2, [r3, #0]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	4313      	orrs	r3, r2
 800cffa:	4a07      	ldr	r2, [pc, #28]	; (800d018 <UTIL_SEQ_ResumeTask+0x3c>)
 800cffc:	6013      	str	r3, [r2, #0]
 800cffe:	697b      	ldr	r3, [r7, #20]
 800d000:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d002:	693b      	ldr	r3, [r7, #16]
 800d004:	f383 8810 	msr	PRIMASK, r3
}
 800d008:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d00a:	bf00      	nop
}
 800d00c:	371c      	adds	r7, #28
 800d00e:	46bd      	mov	sp, r7
 800d010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d014:	4770      	bx	lr
 800d016:	bf00      	nop
 800d018:	2000002c 	.word	0x2000002c

0800d01c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800d01c:	b480      	push	{r7}
 800d01e:	b087      	sub	sp, #28
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d024:	f3ef 8310 	mrs	r3, PRIMASK
 800d028:	60fb      	str	r3, [r7, #12]
  return(result);
 800d02a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d02c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d02e:	b672      	cpsid	i
}
 800d030:	bf00      	nop

  EvtSet |= EvtId_bm;
 800d032:	4b09      	ldr	r3, [pc, #36]	; (800d058 <UTIL_SEQ_SetEvt+0x3c>)
 800d034:	681a      	ldr	r2, [r3, #0]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	4313      	orrs	r3, r2
 800d03a:	4a07      	ldr	r2, [pc, #28]	; (800d058 <UTIL_SEQ_SetEvt+0x3c>)
 800d03c:	6013      	str	r3, [r2, #0]
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d042:	693b      	ldr	r3, [r7, #16]
 800d044:	f383 8810 	msr	PRIMASK, r3
}
 800d048:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d04a:	bf00      	nop
}
 800d04c:	371c      	adds	r7, #28
 800d04e:	46bd      	mov	sp, r7
 800d050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d054:	4770      	bx	lr
 800d056:	bf00      	nop
 800d058:	200017d4 	.word	0x200017d4

0800d05c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b088      	sub	sp, #32
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800d064:	4b1f      	ldr	r3, [pc, #124]	; (800d0e4 <UTIL_SEQ_WaitEvt+0x88>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800d06a:	4b1e      	ldr	r3, [pc, #120]	; (800d0e4 <UTIL_SEQ_WaitEvt+0x88>)
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d072:	d102      	bne.n	800d07a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800d074:	2300      	movs	r3, #0
 800d076:	61fb      	str	r3, [r7, #28]
 800d078:	e005      	b.n	800d086 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800d07a:	4b1a      	ldr	r3, [pc, #104]	; (800d0e4 <UTIL_SEQ_WaitEvt+0x88>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	2201      	movs	r2, #1
 800d080:	fa02 f303 	lsl.w	r3, r2, r3
 800d084:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800d086:	4b18      	ldr	r3, [pc, #96]	; (800d0e8 <UTIL_SEQ_WaitEvt+0x8c>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800d08c:	4a16      	ldr	r2, [pc, #88]	; (800d0e8 <UTIL_SEQ_WaitEvt+0x8c>)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800d092:	e003      	b.n	800d09c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800d094:	6879      	ldr	r1, [r7, #4]
 800d096:	69f8      	ldr	r0, [r7, #28]
 800d098:	f7f4 fbfe 	bl	8001898 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800d09c:	4b13      	ldr	r3, [pc, #76]	; (800d0ec <UTIL_SEQ_WaitEvt+0x90>)
 800d09e:	681a      	ldr	r2, [r3, #0]
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	4013      	ands	r3, r2
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d0f5      	beq.n	800d094 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800d0a8:	4a0e      	ldr	r2, [pc, #56]	; (800d0e4 <UTIL_SEQ_WaitEvt+0x88>)
 800d0aa:	69bb      	ldr	r3, [r7, #24]
 800d0ac:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0ae:	f3ef 8310 	mrs	r3, PRIMASK
 800d0b2:	60bb      	str	r3, [r7, #8]
  return(result);
 800d0b4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d0b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d0b8:	b672      	cpsid	i
}
 800d0ba:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	43da      	mvns	r2, r3
 800d0c0:	4b0a      	ldr	r3, [pc, #40]	; (800d0ec <UTIL_SEQ_WaitEvt+0x90>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4013      	ands	r3, r2
 800d0c6:	4a09      	ldr	r2, [pc, #36]	; (800d0ec <UTIL_SEQ_WaitEvt+0x90>)
 800d0c8:	6013      	str	r3, [r2, #0]
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	f383 8810 	msr	PRIMASK, r3
}
 800d0d4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800d0d6:	4a04      	ldr	r2, [pc, #16]	; (800d0e8 <UTIL_SEQ_WaitEvt+0x8c>)
 800d0d8:	697b      	ldr	r3, [r7, #20]
 800d0da:	6013      	str	r3, [r2, #0]
  return;
 800d0dc:	bf00      	nop
}
 800d0de:	3720      	adds	r7, #32
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}
 800d0e4:	200017dc 	.word	0x200017dc
 800d0e8:	200017d8 	.word	0x200017d8
 800d0ec:	200017d4 	.word	0x200017d4

0800d0f0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d0f4:	bf00      	nop
}
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr

0800d0fe <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800d0fe:	b480      	push	{r7}
 800d100:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d102:	bf00      	nop
}
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr

0800d10c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800d10c:	b480      	push	{r7}
 800d10e:	b085      	sub	sp, #20
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800d114:	2300      	movs	r3, #0
 800d116:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	0c1b      	lsrs	r3, r3, #16
 800d120:	041b      	lsls	r3, r3, #16
 800d122:	2b00      	cmp	r3, #0
 800d124:	d104      	bne.n	800d130 <SEQ_BitPosition+0x24>
 800d126:	2310      	movs	r3, #16
 800d128:	73fb      	strb	r3, [r7, #15]
 800d12a:	68bb      	ldr	r3, [r7, #8]
 800d12c:	041b      	lsls	r3, r3, #16
 800d12e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d136:	2b00      	cmp	r3, #0
 800d138:	d105      	bne.n	800d146 <SEQ_BitPosition+0x3a>
 800d13a:	7bfb      	ldrb	r3, [r7, #15]
 800d13c:	3308      	adds	r3, #8
 800d13e:	73fb      	strb	r3, [r7, #15]
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	021b      	lsls	r3, r3, #8
 800d144:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800d146:	68bb      	ldr	r3, [r7, #8]
 800d148:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d105      	bne.n	800d15c <SEQ_BitPosition+0x50>
 800d150:	7bfb      	ldrb	r3, [r7, #15]
 800d152:	3304      	adds	r3, #4
 800d154:	73fb      	strb	r3, [r7, #15]
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	011b      	lsls	r3, r3, #4
 800d15a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	0f1b      	lsrs	r3, r3, #28
 800d160:	4a07      	ldr	r2, [pc, #28]	; (800d180 <SEQ_BitPosition+0x74>)
 800d162:	5cd2      	ldrb	r2, [r2, r3]
 800d164:	7bfb      	ldrb	r3, [r7, #15]
 800d166:	4413      	add	r3, r2
 800d168:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800d16a:	7bfb      	ldrb	r3, [r7, #15]
 800d16c:	f1c3 031f 	rsb	r3, r3, #31
 800d170:	b2db      	uxtb	r3, r3
}
 800d172:	4618      	mov	r0, r3
 800d174:	3714      	adds	r7, #20
 800d176:	46bd      	mov	sp, r7
 800d178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17c:	4770      	bx	lr
 800d17e:	bf00      	nop
 800d180:	08010eb4 	.word	0x08010eb4

0800d184 <__cvt>:
 800d184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d188:	ec55 4b10 	vmov	r4, r5, d0
 800d18c:	2d00      	cmp	r5, #0
 800d18e:	460e      	mov	r6, r1
 800d190:	4619      	mov	r1, r3
 800d192:	462b      	mov	r3, r5
 800d194:	bfbb      	ittet	lt
 800d196:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d19a:	461d      	movlt	r5, r3
 800d19c:	2300      	movge	r3, #0
 800d19e:	232d      	movlt	r3, #45	; 0x2d
 800d1a0:	700b      	strb	r3, [r1, #0]
 800d1a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d1a8:	4691      	mov	r9, r2
 800d1aa:	f023 0820 	bic.w	r8, r3, #32
 800d1ae:	bfbc      	itt	lt
 800d1b0:	4622      	movlt	r2, r4
 800d1b2:	4614      	movlt	r4, r2
 800d1b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d1b8:	d005      	beq.n	800d1c6 <__cvt+0x42>
 800d1ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d1be:	d100      	bne.n	800d1c2 <__cvt+0x3e>
 800d1c0:	3601      	adds	r6, #1
 800d1c2:	2102      	movs	r1, #2
 800d1c4:	e000      	b.n	800d1c8 <__cvt+0x44>
 800d1c6:	2103      	movs	r1, #3
 800d1c8:	ab03      	add	r3, sp, #12
 800d1ca:	9301      	str	r3, [sp, #4]
 800d1cc:	ab02      	add	r3, sp, #8
 800d1ce:	9300      	str	r3, [sp, #0]
 800d1d0:	ec45 4b10 	vmov	d0, r4, r5
 800d1d4:	4653      	mov	r3, sl
 800d1d6:	4632      	mov	r2, r6
 800d1d8:	f000 ff62 	bl	800e0a0 <_dtoa_r>
 800d1dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d1e0:	4607      	mov	r7, r0
 800d1e2:	d102      	bne.n	800d1ea <__cvt+0x66>
 800d1e4:	f019 0f01 	tst.w	r9, #1
 800d1e8:	d022      	beq.n	800d230 <__cvt+0xac>
 800d1ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d1ee:	eb07 0906 	add.w	r9, r7, r6
 800d1f2:	d110      	bne.n	800d216 <__cvt+0x92>
 800d1f4:	783b      	ldrb	r3, [r7, #0]
 800d1f6:	2b30      	cmp	r3, #48	; 0x30
 800d1f8:	d10a      	bne.n	800d210 <__cvt+0x8c>
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	4620      	mov	r0, r4
 800d200:	4629      	mov	r1, r5
 800d202:	f7f3 fc49 	bl	8000a98 <__aeabi_dcmpeq>
 800d206:	b918      	cbnz	r0, 800d210 <__cvt+0x8c>
 800d208:	f1c6 0601 	rsb	r6, r6, #1
 800d20c:	f8ca 6000 	str.w	r6, [sl]
 800d210:	f8da 3000 	ldr.w	r3, [sl]
 800d214:	4499      	add	r9, r3
 800d216:	2200      	movs	r2, #0
 800d218:	2300      	movs	r3, #0
 800d21a:	4620      	mov	r0, r4
 800d21c:	4629      	mov	r1, r5
 800d21e:	f7f3 fc3b 	bl	8000a98 <__aeabi_dcmpeq>
 800d222:	b108      	cbz	r0, 800d228 <__cvt+0xa4>
 800d224:	f8cd 900c 	str.w	r9, [sp, #12]
 800d228:	2230      	movs	r2, #48	; 0x30
 800d22a:	9b03      	ldr	r3, [sp, #12]
 800d22c:	454b      	cmp	r3, r9
 800d22e:	d307      	bcc.n	800d240 <__cvt+0xbc>
 800d230:	9b03      	ldr	r3, [sp, #12]
 800d232:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d234:	1bdb      	subs	r3, r3, r7
 800d236:	4638      	mov	r0, r7
 800d238:	6013      	str	r3, [r2, #0]
 800d23a:	b004      	add	sp, #16
 800d23c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d240:	1c59      	adds	r1, r3, #1
 800d242:	9103      	str	r1, [sp, #12]
 800d244:	701a      	strb	r2, [r3, #0]
 800d246:	e7f0      	b.n	800d22a <__cvt+0xa6>

0800d248 <__exponent>:
 800d248:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d24a:	4603      	mov	r3, r0
 800d24c:	2900      	cmp	r1, #0
 800d24e:	bfb8      	it	lt
 800d250:	4249      	neglt	r1, r1
 800d252:	f803 2b02 	strb.w	r2, [r3], #2
 800d256:	bfb4      	ite	lt
 800d258:	222d      	movlt	r2, #45	; 0x2d
 800d25a:	222b      	movge	r2, #43	; 0x2b
 800d25c:	2909      	cmp	r1, #9
 800d25e:	7042      	strb	r2, [r0, #1]
 800d260:	dd2a      	ble.n	800d2b8 <__exponent+0x70>
 800d262:	f10d 0207 	add.w	r2, sp, #7
 800d266:	4617      	mov	r7, r2
 800d268:	260a      	movs	r6, #10
 800d26a:	4694      	mov	ip, r2
 800d26c:	fb91 f5f6 	sdiv	r5, r1, r6
 800d270:	fb06 1415 	mls	r4, r6, r5, r1
 800d274:	3430      	adds	r4, #48	; 0x30
 800d276:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d27a:	460c      	mov	r4, r1
 800d27c:	2c63      	cmp	r4, #99	; 0x63
 800d27e:	f102 32ff 	add.w	r2, r2, #4294967295
 800d282:	4629      	mov	r1, r5
 800d284:	dcf1      	bgt.n	800d26a <__exponent+0x22>
 800d286:	3130      	adds	r1, #48	; 0x30
 800d288:	f1ac 0402 	sub.w	r4, ip, #2
 800d28c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d290:	1c41      	adds	r1, r0, #1
 800d292:	4622      	mov	r2, r4
 800d294:	42ba      	cmp	r2, r7
 800d296:	d30a      	bcc.n	800d2ae <__exponent+0x66>
 800d298:	f10d 0209 	add.w	r2, sp, #9
 800d29c:	eba2 020c 	sub.w	r2, r2, ip
 800d2a0:	42bc      	cmp	r4, r7
 800d2a2:	bf88      	it	hi
 800d2a4:	2200      	movhi	r2, #0
 800d2a6:	4413      	add	r3, r2
 800d2a8:	1a18      	subs	r0, r3, r0
 800d2aa:	b003      	add	sp, #12
 800d2ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2ae:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d2b2:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d2b6:	e7ed      	b.n	800d294 <__exponent+0x4c>
 800d2b8:	2330      	movs	r3, #48	; 0x30
 800d2ba:	3130      	adds	r1, #48	; 0x30
 800d2bc:	7083      	strb	r3, [r0, #2]
 800d2be:	70c1      	strb	r1, [r0, #3]
 800d2c0:	1d03      	adds	r3, r0, #4
 800d2c2:	e7f1      	b.n	800d2a8 <__exponent+0x60>

0800d2c4 <_printf_float>:
 800d2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2c8:	ed2d 8b02 	vpush	{d8}
 800d2cc:	b08d      	sub	sp, #52	; 0x34
 800d2ce:	460c      	mov	r4, r1
 800d2d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d2d4:	4616      	mov	r6, r2
 800d2d6:	461f      	mov	r7, r3
 800d2d8:	4605      	mov	r5, r0
 800d2da:	f000 fdd1 	bl	800de80 <_localeconv_r>
 800d2de:	f8d0 a000 	ldr.w	sl, [r0]
 800d2e2:	4650      	mov	r0, sl
 800d2e4:	f7f2 ffac 	bl	8000240 <strlen>
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	930a      	str	r3, [sp, #40]	; 0x28
 800d2ec:	6823      	ldr	r3, [r4, #0]
 800d2ee:	9305      	str	r3, [sp, #20]
 800d2f0:	f8d8 3000 	ldr.w	r3, [r8]
 800d2f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d2f8:	3307      	adds	r3, #7
 800d2fa:	f023 0307 	bic.w	r3, r3, #7
 800d2fe:	f103 0208 	add.w	r2, r3, #8
 800d302:	f8c8 2000 	str.w	r2, [r8]
 800d306:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d30a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d30e:	9307      	str	r3, [sp, #28]
 800d310:	f8cd 8018 	str.w	r8, [sp, #24]
 800d314:	ee08 0a10 	vmov	s16, r0
 800d318:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d31c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d320:	4b9e      	ldr	r3, [pc, #632]	; (800d59c <_printf_float+0x2d8>)
 800d322:	f04f 32ff 	mov.w	r2, #4294967295
 800d326:	f7f3 fbe9 	bl	8000afc <__aeabi_dcmpun>
 800d32a:	bb88      	cbnz	r0, 800d390 <_printf_float+0xcc>
 800d32c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d330:	4b9a      	ldr	r3, [pc, #616]	; (800d59c <_printf_float+0x2d8>)
 800d332:	f04f 32ff 	mov.w	r2, #4294967295
 800d336:	f7f3 fbc3 	bl	8000ac0 <__aeabi_dcmple>
 800d33a:	bb48      	cbnz	r0, 800d390 <_printf_float+0xcc>
 800d33c:	2200      	movs	r2, #0
 800d33e:	2300      	movs	r3, #0
 800d340:	4640      	mov	r0, r8
 800d342:	4649      	mov	r1, r9
 800d344:	f7f3 fbb2 	bl	8000aac <__aeabi_dcmplt>
 800d348:	b110      	cbz	r0, 800d350 <_printf_float+0x8c>
 800d34a:	232d      	movs	r3, #45	; 0x2d
 800d34c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d350:	4a93      	ldr	r2, [pc, #588]	; (800d5a0 <_printf_float+0x2dc>)
 800d352:	4b94      	ldr	r3, [pc, #592]	; (800d5a4 <_printf_float+0x2e0>)
 800d354:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d358:	bf94      	ite	ls
 800d35a:	4690      	movls	r8, r2
 800d35c:	4698      	movhi	r8, r3
 800d35e:	2303      	movs	r3, #3
 800d360:	6123      	str	r3, [r4, #16]
 800d362:	9b05      	ldr	r3, [sp, #20]
 800d364:	f023 0304 	bic.w	r3, r3, #4
 800d368:	6023      	str	r3, [r4, #0]
 800d36a:	f04f 0900 	mov.w	r9, #0
 800d36e:	9700      	str	r7, [sp, #0]
 800d370:	4633      	mov	r3, r6
 800d372:	aa0b      	add	r2, sp, #44	; 0x2c
 800d374:	4621      	mov	r1, r4
 800d376:	4628      	mov	r0, r5
 800d378:	f000 f9da 	bl	800d730 <_printf_common>
 800d37c:	3001      	adds	r0, #1
 800d37e:	f040 8090 	bne.w	800d4a2 <_printf_float+0x1de>
 800d382:	f04f 30ff 	mov.w	r0, #4294967295
 800d386:	b00d      	add	sp, #52	; 0x34
 800d388:	ecbd 8b02 	vpop	{d8}
 800d38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d390:	4642      	mov	r2, r8
 800d392:	464b      	mov	r3, r9
 800d394:	4640      	mov	r0, r8
 800d396:	4649      	mov	r1, r9
 800d398:	f7f3 fbb0 	bl	8000afc <__aeabi_dcmpun>
 800d39c:	b140      	cbz	r0, 800d3b0 <_printf_float+0xec>
 800d39e:	464b      	mov	r3, r9
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	bfbc      	itt	lt
 800d3a4:	232d      	movlt	r3, #45	; 0x2d
 800d3a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d3aa:	4a7f      	ldr	r2, [pc, #508]	; (800d5a8 <_printf_float+0x2e4>)
 800d3ac:	4b7f      	ldr	r3, [pc, #508]	; (800d5ac <_printf_float+0x2e8>)
 800d3ae:	e7d1      	b.n	800d354 <_printf_float+0x90>
 800d3b0:	6863      	ldr	r3, [r4, #4]
 800d3b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d3b6:	9206      	str	r2, [sp, #24]
 800d3b8:	1c5a      	adds	r2, r3, #1
 800d3ba:	d13f      	bne.n	800d43c <_printf_float+0x178>
 800d3bc:	2306      	movs	r3, #6
 800d3be:	6063      	str	r3, [r4, #4]
 800d3c0:	9b05      	ldr	r3, [sp, #20]
 800d3c2:	6861      	ldr	r1, [r4, #4]
 800d3c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	9303      	str	r3, [sp, #12]
 800d3cc:	ab0a      	add	r3, sp, #40	; 0x28
 800d3ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d3d2:	ab09      	add	r3, sp, #36	; 0x24
 800d3d4:	ec49 8b10 	vmov	d0, r8, r9
 800d3d8:	9300      	str	r3, [sp, #0]
 800d3da:	6022      	str	r2, [r4, #0]
 800d3dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d3e0:	4628      	mov	r0, r5
 800d3e2:	f7ff fecf 	bl	800d184 <__cvt>
 800d3e6:	9b06      	ldr	r3, [sp, #24]
 800d3e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d3ea:	2b47      	cmp	r3, #71	; 0x47
 800d3ec:	4680      	mov	r8, r0
 800d3ee:	d108      	bne.n	800d402 <_printf_float+0x13e>
 800d3f0:	1cc8      	adds	r0, r1, #3
 800d3f2:	db02      	blt.n	800d3fa <_printf_float+0x136>
 800d3f4:	6863      	ldr	r3, [r4, #4]
 800d3f6:	4299      	cmp	r1, r3
 800d3f8:	dd41      	ble.n	800d47e <_printf_float+0x1ba>
 800d3fa:	f1ab 0302 	sub.w	r3, fp, #2
 800d3fe:	fa5f fb83 	uxtb.w	fp, r3
 800d402:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d406:	d820      	bhi.n	800d44a <_printf_float+0x186>
 800d408:	3901      	subs	r1, #1
 800d40a:	465a      	mov	r2, fp
 800d40c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d410:	9109      	str	r1, [sp, #36]	; 0x24
 800d412:	f7ff ff19 	bl	800d248 <__exponent>
 800d416:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d418:	1813      	adds	r3, r2, r0
 800d41a:	2a01      	cmp	r2, #1
 800d41c:	4681      	mov	r9, r0
 800d41e:	6123      	str	r3, [r4, #16]
 800d420:	dc02      	bgt.n	800d428 <_printf_float+0x164>
 800d422:	6822      	ldr	r2, [r4, #0]
 800d424:	07d2      	lsls	r2, r2, #31
 800d426:	d501      	bpl.n	800d42c <_printf_float+0x168>
 800d428:	3301      	adds	r3, #1
 800d42a:	6123      	str	r3, [r4, #16]
 800d42c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d430:	2b00      	cmp	r3, #0
 800d432:	d09c      	beq.n	800d36e <_printf_float+0xaa>
 800d434:	232d      	movs	r3, #45	; 0x2d
 800d436:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d43a:	e798      	b.n	800d36e <_printf_float+0xaa>
 800d43c:	9a06      	ldr	r2, [sp, #24]
 800d43e:	2a47      	cmp	r2, #71	; 0x47
 800d440:	d1be      	bne.n	800d3c0 <_printf_float+0xfc>
 800d442:	2b00      	cmp	r3, #0
 800d444:	d1bc      	bne.n	800d3c0 <_printf_float+0xfc>
 800d446:	2301      	movs	r3, #1
 800d448:	e7b9      	b.n	800d3be <_printf_float+0xfa>
 800d44a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d44e:	d118      	bne.n	800d482 <_printf_float+0x1be>
 800d450:	2900      	cmp	r1, #0
 800d452:	6863      	ldr	r3, [r4, #4]
 800d454:	dd0b      	ble.n	800d46e <_printf_float+0x1aa>
 800d456:	6121      	str	r1, [r4, #16]
 800d458:	b913      	cbnz	r3, 800d460 <_printf_float+0x19c>
 800d45a:	6822      	ldr	r2, [r4, #0]
 800d45c:	07d0      	lsls	r0, r2, #31
 800d45e:	d502      	bpl.n	800d466 <_printf_float+0x1a2>
 800d460:	3301      	adds	r3, #1
 800d462:	440b      	add	r3, r1
 800d464:	6123      	str	r3, [r4, #16]
 800d466:	65a1      	str	r1, [r4, #88]	; 0x58
 800d468:	f04f 0900 	mov.w	r9, #0
 800d46c:	e7de      	b.n	800d42c <_printf_float+0x168>
 800d46e:	b913      	cbnz	r3, 800d476 <_printf_float+0x1b2>
 800d470:	6822      	ldr	r2, [r4, #0]
 800d472:	07d2      	lsls	r2, r2, #31
 800d474:	d501      	bpl.n	800d47a <_printf_float+0x1b6>
 800d476:	3302      	adds	r3, #2
 800d478:	e7f4      	b.n	800d464 <_printf_float+0x1a0>
 800d47a:	2301      	movs	r3, #1
 800d47c:	e7f2      	b.n	800d464 <_printf_float+0x1a0>
 800d47e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d484:	4299      	cmp	r1, r3
 800d486:	db05      	blt.n	800d494 <_printf_float+0x1d0>
 800d488:	6823      	ldr	r3, [r4, #0]
 800d48a:	6121      	str	r1, [r4, #16]
 800d48c:	07d8      	lsls	r0, r3, #31
 800d48e:	d5ea      	bpl.n	800d466 <_printf_float+0x1a2>
 800d490:	1c4b      	adds	r3, r1, #1
 800d492:	e7e7      	b.n	800d464 <_printf_float+0x1a0>
 800d494:	2900      	cmp	r1, #0
 800d496:	bfd4      	ite	le
 800d498:	f1c1 0202 	rsble	r2, r1, #2
 800d49c:	2201      	movgt	r2, #1
 800d49e:	4413      	add	r3, r2
 800d4a0:	e7e0      	b.n	800d464 <_printf_float+0x1a0>
 800d4a2:	6823      	ldr	r3, [r4, #0]
 800d4a4:	055a      	lsls	r2, r3, #21
 800d4a6:	d407      	bmi.n	800d4b8 <_printf_float+0x1f4>
 800d4a8:	6923      	ldr	r3, [r4, #16]
 800d4aa:	4642      	mov	r2, r8
 800d4ac:	4631      	mov	r1, r6
 800d4ae:	4628      	mov	r0, r5
 800d4b0:	47b8      	blx	r7
 800d4b2:	3001      	adds	r0, #1
 800d4b4:	d12c      	bne.n	800d510 <_printf_float+0x24c>
 800d4b6:	e764      	b.n	800d382 <_printf_float+0xbe>
 800d4b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d4bc:	f240 80e0 	bls.w	800d680 <_printf_float+0x3bc>
 800d4c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	f7f3 fae6 	bl	8000a98 <__aeabi_dcmpeq>
 800d4cc:	2800      	cmp	r0, #0
 800d4ce:	d034      	beq.n	800d53a <_printf_float+0x276>
 800d4d0:	4a37      	ldr	r2, [pc, #220]	; (800d5b0 <_printf_float+0x2ec>)
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	4631      	mov	r1, r6
 800d4d6:	4628      	mov	r0, r5
 800d4d8:	47b8      	blx	r7
 800d4da:	3001      	adds	r0, #1
 800d4dc:	f43f af51 	beq.w	800d382 <_printf_float+0xbe>
 800d4e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	db02      	blt.n	800d4ee <_printf_float+0x22a>
 800d4e8:	6823      	ldr	r3, [r4, #0]
 800d4ea:	07d8      	lsls	r0, r3, #31
 800d4ec:	d510      	bpl.n	800d510 <_printf_float+0x24c>
 800d4ee:	ee18 3a10 	vmov	r3, s16
 800d4f2:	4652      	mov	r2, sl
 800d4f4:	4631      	mov	r1, r6
 800d4f6:	4628      	mov	r0, r5
 800d4f8:	47b8      	blx	r7
 800d4fa:	3001      	adds	r0, #1
 800d4fc:	f43f af41 	beq.w	800d382 <_printf_float+0xbe>
 800d500:	f04f 0800 	mov.w	r8, #0
 800d504:	f104 091a 	add.w	r9, r4, #26
 800d508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d50a:	3b01      	subs	r3, #1
 800d50c:	4543      	cmp	r3, r8
 800d50e:	dc09      	bgt.n	800d524 <_printf_float+0x260>
 800d510:	6823      	ldr	r3, [r4, #0]
 800d512:	079b      	lsls	r3, r3, #30
 800d514:	f100 8107 	bmi.w	800d726 <_printf_float+0x462>
 800d518:	68e0      	ldr	r0, [r4, #12]
 800d51a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d51c:	4298      	cmp	r0, r3
 800d51e:	bfb8      	it	lt
 800d520:	4618      	movlt	r0, r3
 800d522:	e730      	b.n	800d386 <_printf_float+0xc2>
 800d524:	2301      	movs	r3, #1
 800d526:	464a      	mov	r2, r9
 800d528:	4631      	mov	r1, r6
 800d52a:	4628      	mov	r0, r5
 800d52c:	47b8      	blx	r7
 800d52e:	3001      	adds	r0, #1
 800d530:	f43f af27 	beq.w	800d382 <_printf_float+0xbe>
 800d534:	f108 0801 	add.w	r8, r8, #1
 800d538:	e7e6      	b.n	800d508 <_printf_float+0x244>
 800d53a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	dc39      	bgt.n	800d5b4 <_printf_float+0x2f0>
 800d540:	4a1b      	ldr	r2, [pc, #108]	; (800d5b0 <_printf_float+0x2ec>)
 800d542:	2301      	movs	r3, #1
 800d544:	4631      	mov	r1, r6
 800d546:	4628      	mov	r0, r5
 800d548:	47b8      	blx	r7
 800d54a:	3001      	adds	r0, #1
 800d54c:	f43f af19 	beq.w	800d382 <_printf_float+0xbe>
 800d550:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d554:	4313      	orrs	r3, r2
 800d556:	d102      	bne.n	800d55e <_printf_float+0x29a>
 800d558:	6823      	ldr	r3, [r4, #0]
 800d55a:	07d9      	lsls	r1, r3, #31
 800d55c:	d5d8      	bpl.n	800d510 <_printf_float+0x24c>
 800d55e:	ee18 3a10 	vmov	r3, s16
 800d562:	4652      	mov	r2, sl
 800d564:	4631      	mov	r1, r6
 800d566:	4628      	mov	r0, r5
 800d568:	47b8      	blx	r7
 800d56a:	3001      	adds	r0, #1
 800d56c:	f43f af09 	beq.w	800d382 <_printf_float+0xbe>
 800d570:	f04f 0900 	mov.w	r9, #0
 800d574:	f104 0a1a 	add.w	sl, r4, #26
 800d578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d57a:	425b      	negs	r3, r3
 800d57c:	454b      	cmp	r3, r9
 800d57e:	dc01      	bgt.n	800d584 <_printf_float+0x2c0>
 800d580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d582:	e792      	b.n	800d4aa <_printf_float+0x1e6>
 800d584:	2301      	movs	r3, #1
 800d586:	4652      	mov	r2, sl
 800d588:	4631      	mov	r1, r6
 800d58a:	4628      	mov	r0, r5
 800d58c:	47b8      	blx	r7
 800d58e:	3001      	adds	r0, #1
 800d590:	f43f aef7 	beq.w	800d382 <_printf_float+0xbe>
 800d594:	f109 0901 	add.w	r9, r9, #1
 800d598:	e7ee      	b.n	800d578 <_printf_float+0x2b4>
 800d59a:	bf00      	nop
 800d59c:	7fefffff 	.word	0x7fefffff
 800d5a0:	08010ec4 	.word	0x08010ec4
 800d5a4:	08010ec8 	.word	0x08010ec8
 800d5a8:	08010ecc 	.word	0x08010ecc
 800d5ac:	08010ed0 	.word	0x08010ed0
 800d5b0:	08010ed4 	.word	0x08010ed4
 800d5b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d5b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	bfa8      	it	ge
 800d5bc:	461a      	movge	r2, r3
 800d5be:	2a00      	cmp	r2, #0
 800d5c0:	4691      	mov	r9, r2
 800d5c2:	dc37      	bgt.n	800d634 <_printf_float+0x370>
 800d5c4:	f04f 0b00 	mov.w	fp, #0
 800d5c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d5cc:	f104 021a 	add.w	r2, r4, #26
 800d5d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d5d2:	9305      	str	r3, [sp, #20]
 800d5d4:	eba3 0309 	sub.w	r3, r3, r9
 800d5d8:	455b      	cmp	r3, fp
 800d5da:	dc33      	bgt.n	800d644 <_printf_float+0x380>
 800d5dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d5e0:	429a      	cmp	r2, r3
 800d5e2:	db3b      	blt.n	800d65c <_printf_float+0x398>
 800d5e4:	6823      	ldr	r3, [r4, #0]
 800d5e6:	07da      	lsls	r2, r3, #31
 800d5e8:	d438      	bmi.n	800d65c <_printf_float+0x398>
 800d5ea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d5ee:	eba2 0903 	sub.w	r9, r2, r3
 800d5f2:	9b05      	ldr	r3, [sp, #20]
 800d5f4:	1ad2      	subs	r2, r2, r3
 800d5f6:	4591      	cmp	r9, r2
 800d5f8:	bfa8      	it	ge
 800d5fa:	4691      	movge	r9, r2
 800d5fc:	f1b9 0f00 	cmp.w	r9, #0
 800d600:	dc35      	bgt.n	800d66e <_printf_float+0x3aa>
 800d602:	f04f 0800 	mov.w	r8, #0
 800d606:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d60a:	f104 0a1a 	add.w	sl, r4, #26
 800d60e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d612:	1a9b      	subs	r3, r3, r2
 800d614:	eba3 0309 	sub.w	r3, r3, r9
 800d618:	4543      	cmp	r3, r8
 800d61a:	f77f af79 	ble.w	800d510 <_printf_float+0x24c>
 800d61e:	2301      	movs	r3, #1
 800d620:	4652      	mov	r2, sl
 800d622:	4631      	mov	r1, r6
 800d624:	4628      	mov	r0, r5
 800d626:	47b8      	blx	r7
 800d628:	3001      	adds	r0, #1
 800d62a:	f43f aeaa 	beq.w	800d382 <_printf_float+0xbe>
 800d62e:	f108 0801 	add.w	r8, r8, #1
 800d632:	e7ec      	b.n	800d60e <_printf_float+0x34a>
 800d634:	4613      	mov	r3, r2
 800d636:	4631      	mov	r1, r6
 800d638:	4642      	mov	r2, r8
 800d63a:	4628      	mov	r0, r5
 800d63c:	47b8      	blx	r7
 800d63e:	3001      	adds	r0, #1
 800d640:	d1c0      	bne.n	800d5c4 <_printf_float+0x300>
 800d642:	e69e      	b.n	800d382 <_printf_float+0xbe>
 800d644:	2301      	movs	r3, #1
 800d646:	4631      	mov	r1, r6
 800d648:	4628      	mov	r0, r5
 800d64a:	9205      	str	r2, [sp, #20]
 800d64c:	47b8      	blx	r7
 800d64e:	3001      	adds	r0, #1
 800d650:	f43f ae97 	beq.w	800d382 <_printf_float+0xbe>
 800d654:	9a05      	ldr	r2, [sp, #20]
 800d656:	f10b 0b01 	add.w	fp, fp, #1
 800d65a:	e7b9      	b.n	800d5d0 <_printf_float+0x30c>
 800d65c:	ee18 3a10 	vmov	r3, s16
 800d660:	4652      	mov	r2, sl
 800d662:	4631      	mov	r1, r6
 800d664:	4628      	mov	r0, r5
 800d666:	47b8      	blx	r7
 800d668:	3001      	adds	r0, #1
 800d66a:	d1be      	bne.n	800d5ea <_printf_float+0x326>
 800d66c:	e689      	b.n	800d382 <_printf_float+0xbe>
 800d66e:	9a05      	ldr	r2, [sp, #20]
 800d670:	464b      	mov	r3, r9
 800d672:	4442      	add	r2, r8
 800d674:	4631      	mov	r1, r6
 800d676:	4628      	mov	r0, r5
 800d678:	47b8      	blx	r7
 800d67a:	3001      	adds	r0, #1
 800d67c:	d1c1      	bne.n	800d602 <_printf_float+0x33e>
 800d67e:	e680      	b.n	800d382 <_printf_float+0xbe>
 800d680:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d682:	2a01      	cmp	r2, #1
 800d684:	dc01      	bgt.n	800d68a <_printf_float+0x3c6>
 800d686:	07db      	lsls	r3, r3, #31
 800d688:	d53a      	bpl.n	800d700 <_printf_float+0x43c>
 800d68a:	2301      	movs	r3, #1
 800d68c:	4642      	mov	r2, r8
 800d68e:	4631      	mov	r1, r6
 800d690:	4628      	mov	r0, r5
 800d692:	47b8      	blx	r7
 800d694:	3001      	adds	r0, #1
 800d696:	f43f ae74 	beq.w	800d382 <_printf_float+0xbe>
 800d69a:	ee18 3a10 	vmov	r3, s16
 800d69e:	4652      	mov	r2, sl
 800d6a0:	4631      	mov	r1, r6
 800d6a2:	4628      	mov	r0, r5
 800d6a4:	47b8      	blx	r7
 800d6a6:	3001      	adds	r0, #1
 800d6a8:	f43f ae6b 	beq.w	800d382 <_printf_float+0xbe>
 800d6ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d6b8:	f7f3 f9ee 	bl	8000a98 <__aeabi_dcmpeq>
 800d6bc:	b9d8      	cbnz	r0, 800d6f6 <_printf_float+0x432>
 800d6be:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d6c2:	f108 0201 	add.w	r2, r8, #1
 800d6c6:	4631      	mov	r1, r6
 800d6c8:	4628      	mov	r0, r5
 800d6ca:	47b8      	blx	r7
 800d6cc:	3001      	adds	r0, #1
 800d6ce:	d10e      	bne.n	800d6ee <_printf_float+0x42a>
 800d6d0:	e657      	b.n	800d382 <_printf_float+0xbe>
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	4652      	mov	r2, sl
 800d6d6:	4631      	mov	r1, r6
 800d6d8:	4628      	mov	r0, r5
 800d6da:	47b8      	blx	r7
 800d6dc:	3001      	adds	r0, #1
 800d6de:	f43f ae50 	beq.w	800d382 <_printf_float+0xbe>
 800d6e2:	f108 0801 	add.w	r8, r8, #1
 800d6e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6e8:	3b01      	subs	r3, #1
 800d6ea:	4543      	cmp	r3, r8
 800d6ec:	dcf1      	bgt.n	800d6d2 <_printf_float+0x40e>
 800d6ee:	464b      	mov	r3, r9
 800d6f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d6f4:	e6da      	b.n	800d4ac <_printf_float+0x1e8>
 800d6f6:	f04f 0800 	mov.w	r8, #0
 800d6fa:	f104 0a1a 	add.w	sl, r4, #26
 800d6fe:	e7f2      	b.n	800d6e6 <_printf_float+0x422>
 800d700:	2301      	movs	r3, #1
 800d702:	4642      	mov	r2, r8
 800d704:	e7df      	b.n	800d6c6 <_printf_float+0x402>
 800d706:	2301      	movs	r3, #1
 800d708:	464a      	mov	r2, r9
 800d70a:	4631      	mov	r1, r6
 800d70c:	4628      	mov	r0, r5
 800d70e:	47b8      	blx	r7
 800d710:	3001      	adds	r0, #1
 800d712:	f43f ae36 	beq.w	800d382 <_printf_float+0xbe>
 800d716:	f108 0801 	add.w	r8, r8, #1
 800d71a:	68e3      	ldr	r3, [r4, #12]
 800d71c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d71e:	1a5b      	subs	r3, r3, r1
 800d720:	4543      	cmp	r3, r8
 800d722:	dcf0      	bgt.n	800d706 <_printf_float+0x442>
 800d724:	e6f8      	b.n	800d518 <_printf_float+0x254>
 800d726:	f04f 0800 	mov.w	r8, #0
 800d72a:	f104 0919 	add.w	r9, r4, #25
 800d72e:	e7f4      	b.n	800d71a <_printf_float+0x456>

0800d730 <_printf_common>:
 800d730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d734:	4616      	mov	r6, r2
 800d736:	4699      	mov	r9, r3
 800d738:	688a      	ldr	r2, [r1, #8]
 800d73a:	690b      	ldr	r3, [r1, #16]
 800d73c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d740:	4293      	cmp	r3, r2
 800d742:	bfb8      	it	lt
 800d744:	4613      	movlt	r3, r2
 800d746:	6033      	str	r3, [r6, #0]
 800d748:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d74c:	4607      	mov	r7, r0
 800d74e:	460c      	mov	r4, r1
 800d750:	b10a      	cbz	r2, 800d756 <_printf_common+0x26>
 800d752:	3301      	adds	r3, #1
 800d754:	6033      	str	r3, [r6, #0]
 800d756:	6823      	ldr	r3, [r4, #0]
 800d758:	0699      	lsls	r1, r3, #26
 800d75a:	bf42      	ittt	mi
 800d75c:	6833      	ldrmi	r3, [r6, #0]
 800d75e:	3302      	addmi	r3, #2
 800d760:	6033      	strmi	r3, [r6, #0]
 800d762:	6825      	ldr	r5, [r4, #0]
 800d764:	f015 0506 	ands.w	r5, r5, #6
 800d768:	d106      	bne.n	800d778 <_printf_common+0x48>
 800d76a:	f104 0a19 	add.w	sl, r4, #25
 800d76e:	68e3      	ldr	r3, [r4, #12]
 800d770:	6832      	ldr	r2, [r6, #0]
 800d772:	1a9b      	subs	r3, r3, r2
 800d774:	42ab      	cmp	r3, r5
 800d776:	dc26      	bgt.n	800d7c6 <_printf_common+0x96>
 800d778:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d77c:	1e13      	subs	r3, r2, #0
 800d77e:	6822      	ldr	r2, [r4, #0]
 800d780:	bf18      	it	ne
 800d782:	2301      	movne	r3, #1
 800d784:	0692      	lsls	r2, r2, #26
 800d786:	d42b      	bmi.n	800d7e0 <_printf_common+0xb0>
 800d788:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d78c:	4649      	mov	r1, r9
 800d78e:	4638      	mov	r0, r7
 800d790:	47c0      	blx	r8
 800d792:	3001      	adds	r0, #1
 800d794:	d01e      	beq.n	800d7d4 <_printf_common+0xa4>
 800d796:	6823      	ldr	r3, [r4, #0]
 800d798:	6922      	ldr	r2, [r4, #16]
 800d79a:	f003 0306 	and.w	r3, r3, #6
 800d79e:	2b04      	cmp	r3, #4
 800d7a0:	bf02      	ittt	eq
 800d7a2:	68e5      	ldreq	r5, [r4, #12]
 800d7a4:	6833      	ldreq	r3, [r6, #0]
 800d7a6:	1aed      	subeq	r5, r5, r3
 800d7a8:	68a3      	ldr	r3, [r4, #8]
 800d7aa:	bf0c      	ite	eq
 800d7ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d7b0:	2500      	movne	r5, #0
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	bfc4      	itt	gt
 800d7b6:	1a9b      	subgt	r3, r3, r2
 800d7b8:	18ed      	addgt	r5, r5, r3
 800d7ba:	2600      	movs	r6, #0
 800d7bc:	341a      	adds	r4, #26
 800d7be:	42b5      	cmp	r5, r6
 800d7c0:	d11a      	bne.n	800d7f8 <_printf_common+0xc8>
 800d7c2:	2000      	movs	r0, #0
 800d7c4:	e008      	b.n	800d7d8 <_printf_common+0xa8>
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	4652      	mov	r2, sl
 800d7ca:	4649      	mov	r1, r9
 800d7cc:	4638      	mov	r0, r7
 800d7ce:	47c0      	blx	r8
 800d7d0:	3001      	adds	r0, #1
 800d7d2:	d103      	bne.n	800d7dc <_printf_common+0xac>
 800d7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7dc:	3501      	adds	r5, #1
 800d7de:	e7c6      	b.n	800d76e <_printf_common+0x3e>
 800d7e0:	18e1      	adds	r1, r4, r3
 800d7e2:	1c5a      	adds	r2, r3, #1
 800d7e4:	2030      	movs	r0, #48	; 0x30
 800d7e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d7ea:	4422      	add	r2, r4
 800d7ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d7f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d7f4:	3302      	adds	r3, #2
 800d7f6:	e7c7      	b.n	800d788 <_printf_common+0x58>
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	4622      	mov	r2, r4
 800d7fc:	4649      	mov	r1, r9
 800d7fe:	4638      	mov	r0, r7
 800d800:	47c0      	blx	r8
 800d802:	3001      	adds	r0, #1
 800d804:	d0e6      	beq.n	800d7d4 <_printf_common+0xa4>
 800d806:	3601      	adds	r6, #1
 800d808:	e7d9      	b.n	800d7be <_printf_common+0x8e>
	...

0800d80c <_printf_i>:
 800d80c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d810:	7e0f      	ldrb	r7, [r1, #24]
 800d812:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d814:	2f78      	cmp	r7, #120	; 0x78
 800d816:	4691      	mov	r9, r2
 800d818:	4680      	mov	r8, r0
 800d81a:	460c      	mov	r4, r1
 800d81c:	469a      	mov	sl, r3
 800d81e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d822:	d807      	bhi.n	800d834 <_printf_i+0x28>
 800d824:	2f62      	cmp	r7, #98	; 0x62
 800d826:	d80a      	bhi.n	800d83e <_printf_i+0x32>
 800d828:	2f00      	cmp	r7, #0
 800d82a:	f000 80d4 	beq.w	800d9d6 <_printf_i+0x1ca>
 800d82e:	2f58      	cmp	r7, #88	; 0x58
 800d830:	f000 80c0 	beq.w	800d9b4 <_printf_i+0x1a8>
 800d834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d838:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d83c:	e03a      	b.n	800d8b4 <_printf_i+0xa8>
 800d83e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d842:	2b15      	cmp	r3, #21
 800d844:	d8f6      	bhi.n	800d834 <_printf_i+0x28>
 800d846:	a101      	add	r1, pc, #4	; (adr r1, 800d84c <_printf_i+0x40>)
 800d848:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d84c:	0800d8a5 	.word	0x0800d8a5
 800d850:	0800d8b9 	.word	0x0800d8b9
 800d854:	0800d835 	.word	0x0800d835
 800d858:	0800d835 	.word	0x0800d835
 800d85c:	0800d835 	.word	0x0800d835
 800d860:	0800d835 	.word	0x0800d835
 800d864:	0800d8b9 	.word	0x0800d8b9
 800d868:	0800d835 	.word	0x0800d835
 800d86c:	0800d835 	.word	0x0800d835
 800d870:	0800d835 	.word	0x0800d835
 800d874:	0800d835 	.word	0x0800d835
 800d878:	0800d9bd 	.word	0x0800d9bd
 800d87c:	0800d8e5 	.word	0x0800d8e5
 800d880:	0800d977 	.word	0x0800d977
 800d884:	0800d835 	.word	0x0800d835
 800d888:	0800d835 	.word	0x0800d835
 800d88c:	0800d9df 	.word	0x0800d9df
 800d890:	0800d835 	.word	0x0800d835
 800d894:	0800d8e5 	.word	0x0800d8e5
 800d898:	0800d835 	.word	0x0800d835
 800d89c:	0800d835 	.word	0x0800d835
 800d8a0:	0800d97f 	.word	0x0800d97f
 800d8a4:	682b      	ldr	r3, [r5, #0]
 800d8a6:	1d1a      	adds	r2, r3, #4
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	602a      	str	r2, [r5, #0]
 800d8ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d8b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d8b4:	2301      	movs	r3, #1
 800d8b6:	e09f      	b.n	800d9f8 <_printf_i+0x1ec>
 800d8b8:	6820      	ldr	r0, [r4, #0]
 800d8ba:	682b      	ldr	r3, [r5, #0]
 800d8bc:	0607      	lsls	r7, r0, #24
 800d8be:	f103 0104 	add.w	r1, r3, #4
 800d8c2:	6029      	str	r1, [r5, #0]
 800d8c4:	d501      	bpl.n	800d8ca <_printf_i+0xbe>
 800d8c6:	681e      	ldr	r6, [r3, #0]
 800d8c8:	e003      	b.n	800d8d2 <_printf_i+0xc6>
 800d8ca:	0646      	lsls	r6, r0, #25
 800d8cc:	d5fb      	bpl.n	800d8c6 <_printf_i+0xba>
 800d8ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d8d2:	2e00      	cmp	r6, #0
 800d8d4:	da03      	bge.n	800d8de <_printf_i+0xd2>
 800d8d6:	232d      	movs	r3, #45	; 0x2d
 800d8d8:	4276      	negs	r6, r6
 800d8da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8de:	485a      	ldr	r0, [pc, #360]	; (800da48 <_printf_i+0x23c>)
 800d8e0:	230a      	movs	r3, #10
 800d8e2:	e012      	b.n	800d90a <_printf_i+0xfe>
 800d8e4:	682b      	ldr	r3, [r5, #0]
 800d8e6:	6820      	ldr	r0, [r4, #0]
 800d8e8:	1d19      	adds	r1, r3, #4
 800d8ea:	6029      	str	r1, [r5, #0]
 800d8ec:	0605      	lsls	r5, r0, #24
 800d8ee:	d501      	bpl.n	800d8f4 <_printf_i+0xe8>
 800d8f0:	681e      	ldr	r6, [r3, #0]
 800d8f2:	e002      	b.n	800d8fa <_printf_i+0xee>
 800d8f4:	0641      	lsls	r1, r0, #25
 800d8f6:	d5fb      	bpl.n	800d8f0 <_printf_i+0xe4>
 800d8f8:	881e      	ldrh	r6, [r3, #0]
 800d8fa:	4853      	ldr	r0, [pc, #332]	; (800da48 <_printf_i+0x23c>)
 800d8fc:	2f6f      	cmp	r7, #111	; 0x6f
 800d8fe:	bf0c      	ite	eq
 800d900:	2308      	moveq	r3, #8
 800d902:	230a      	movne	r3, #10
 800d904:	2100      	movs	r1, #0
 800d906:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d90a:	6865      	ldr	r5, [r4, #4]
 800d90c:	60a5      	str	r5, [r4, #8]
 800d90e:	2d00      	cmp	r5, #0
 800d910:	bfa2      	ittt	ge
 800d912:	6821      	ldrge	r1, [r4, #0]
 800d914:	f021 0104 	bicge.w	r1, r1, #4
 800d918:	6021      	strge	r1, [r4, #0]
 800d91a:	b90e      	cbnz	r6, 800d920 <_printf_i+0x114>
 800d91c:	2d00      	cmp	r5, #0
 800d91e:	d04b      	beq.n	800d9b8 <_printf_i+0x1ac>
 800d920:	4615      	mov	r5, r2
 800d922:	fbb6 f1f3 	udiv	r1, r6, r3
 800d926:	fb03 6711 	mls	r7, r3, r1, r6
 800d92a:	5dc7      	ldrb	r7, [r0, r7]
 800d92c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d930:	4637      	mov	r7, r6
 800d932:	42bb      	cmp	r3, r7
 800d934:	460e      	mov	r6, r1
 800d936:	d9f4      	bls.n	800d922 <_printf_i+0x116>
 800d938:	2b08      	cmp	r3, #8
 800d93a:	d10b      	bne.n	800d954 <_printf_i+0x148>
 800d93c:	6823      	ldr	r3, [r4, #0]
 800d93e:	07de      	lsls	r6, r3, #31
 800d940:	d508      	bpl.n	800d954 <_printf_i+0x148>
 800d942:	6923      	ldr	r3, [r4, #16]
 800d944:	6861      	ldr	r1, [r4, #4]
 800d946:	4299      	cmp	r1, r3
 800d948:	bfde      	ittt	le
 800d94a:	2330      	movle	r3, #48	; 0x30
 800d94c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d950:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d954:	1b52      	subs	r2, r2, r5
 800d956:	6122      	str	r2, [r4, #16]
 800d958:	f8cd a000 	str.w	sl, [sp]
 800d95c:	464b      	mov	r3, r9
 800d95e:	aa03      	add	r2, sp, #12
 800d960:	4621      	mov	r1, r4
 800d962:	4640      	mov	r0, r8
 800d964:	f7ff fee4 	bl	800d730 <_printf_common>
 800d968:	3001      	adds	r0, #1
 800d96a:	d14a      	bne.n	800da02 <_printf_i+0x1f6>
 800d96c:	f04f 30ff 	mov.w	r0, #4294967295
 800d970:	b004      	add	sp, #16
 800d972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d976:	6823      	ldr	r3, [r4, #0]
 800d978:	f043 0320 	orr.w	r3, r3, #32
 800d97c:	6023      	str	r3, [r4, #0]
 800d97e:	4833      	ldr	r0, [pc, #204]	; (800da4c <_printf_i+0x240>)
 800d980:	2778      	movs	r7, #120	; 0x78
 800d982:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d986:	6823      	ldr	r3, [r4, #0]
 800d988:	6829      	ldr	r1, [r5, #0]
 800d98a:	061f      	lsls	r7, r3, #24
 800d98c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d990:	d402      	bmi.n	800d998 <_printf_i+0x18c>
 800d992:	065f      	lsls	r7, r3, #25
 800d994:	bf48      	it	mi
 800d996:	b2b6      	uxthmi	r6, r6
 800d998:	07df      	lsls	r7, r3, #31
 800d99a:	bf48      	it	mi
 800d99c:	f043 0320 	orrmi.w	r3, r3, #32
 800d9a0:	6029      	str	r1, [r5, #0]
 800d9a2:	bf48      	it	mi
 800d9a4:	6023      	strmi	r3, [r4, #0]
 800d9a6:	b91e      	cbnz	r6, 800d9b0 <_printf_i+0x1a4>
 800d9a8:	6823      	ldr	r3, [r4, #0]
 800d9aa:	f023 0320 	bic.w	r3, r3, #32
 800d9ae:	6023      	str	r3, [r4, #0]
 800d9b0:	2310      	movs	r3, #16
 800d9b2:	e7a7      	b.n	800d904 <_printf_i+0xf8>
 800d9b4:	4824      	ldr	r0, [pc, #144]	; (800da48 <_printf_i+0x23c>)
 800d9b6:	e7e4      	b.n	800d982 <_printf_i+0x176>
 800d9b8:	4615      	mov	r5, r2
 800d9ba:	e7bd      	b.n	800d938 <_printf_i+0x12c>
 800d9bc:	682b      	ldr	r3, [r5, #0]
 800d9be:	6826      	ldr	r6, [r4, #0]
 800d9c0:	6961      	ldr	r1, [r4, #20]
 800d9c2:	1d18      	adds	r0, r3, #4
 800d9c4:	6028      	str	r0, [r5, #0]
 800d9c6:	0635      	lsls	r5, r6, #24
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	d501      	bpl.n	800d9d0 <_printf_i+0x1c4>
 800d9cc:	6019      	str	r1, [r3, #0]
 800d9ce:	e002      	b.n	800d9d6 <_printf_i+0x1ca>
 800d9d0:	0670      	lsls	r0, r6, #25
 800d9d2:	d5fb      	bpl.n	800d9cc <_printf_i+0x1c0>
 800d9d4:	8019      	strh	r1, [r3, #0]
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	6123      	str	r3, [r4, #16]
 800d9da:	4615      	mov	r5, r2
 800d9dc:	e7bc      	b.n	800d958 <_printf_i+0x14c>
 800d9de:	682b      	ldr	r3, [r5, #0]
 800d9e0:	1d1a      	adds	r2, r3, #4
 800d9e2:	602a      	str	r2, [r5, #0]
 800d9e4:	681d      	ldr	r5, [r3, #0]
 800d9e6:	6862      	ldr	r2, [r4, #4]
 800d9e8:	2100      	movs	r1, #0
 800d9ea:	4628      	mov	r0, r5
 800d9ec:	f7f2 fbd8 	bl	80001a0 <memchr>
 800d9f0:	b108      	cbz	r0, 800d9f6 <_printf_i+0x1ea>
 800d9f2:	1b40      	subs	r0, r0, r5
 800d9f4:	6060      	str	r0, [r4, #4]
 800d9f6:	6863      	ldr	r3, [r4, #4]
 800d9f8:	6123      	str	r3, [r4, #16]
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da00:	e7aa      	b.n	800d958 <_printf_i+0x14c>
 800da02:	6923      	ldr	r3, [r4, #16]
 800da04:	462a      	mov	r2, r5
 800da06:	4649      	mov	r1, r9
 800da08:	4640      	mov	r0, r8
 800da0a:	47d0      	blx	sl
 800da0c:	3001      	adds	r0, #1
 800da0e:	d0ad      	beq.n	800d96c <_printf_i+0x160>
 800da10:	6823      	ldr	r3, [r4, #0]
 800da12:	079b      	lsls	r3, r3, #30
 800da14:	d413      	bmi.n	800da3e <_printf_i+0x232>
 800da16:	68e0      	ldr	r0, [r4, #12]
 800da18:	9b03      	ldr	r3, [sp, #12]
 800da1a:	4298      	cmp	r0, r3
 800da1c:	bfb8      	it	lt
 800da1e:	4618      	movlt	r0, r3
 800da20:	e7a6      	b.n	800d970 <_printf_i+0x164>
 800da22:	2301      	movs	r3, #1
 800da24:	4632      	mov	r2, r6
 800da26:	4649      	mov	r1, r9
 800da28:	4640      	mov	r0, r8
 800da2a:	47d0      	blx	sl
 800da2c:	3001      	adds	r0, #1
 800da2e:	d09d      	beq.n	800d96c <_printf_i+0x160>
 800da30:	3501      	adds	r5, #1
 800da32:	68e3      	ldr	r3, [r4, #12]
 800da34:	9903      	ldr	r1, [sp, #12]
 800da36:	1a5b      	subs	r3, r3, r1
 800da38:	42ab      	cmp	r3, r5
 800da3a:	dcf2      	bgt.n	800da22 <_printf_i+0x216>
 800da3c:	e7eb      	b.n	800da16 <_printf_i+0x20a>
 800da3e:	2500      	movs	r5, #0
 800da40:	f104 0619 	add.w	r6, r4, #25
 800da44:	e7f5      	b.n	800da32 <_printf_i+0x226>
 800da46:	bf00      	nop
 800da48:	08010ed6 	.word	0x08010ed6
 800da4c:	08010ee7 	.word	0x08010ee7

0800da50 <std>:
 800da50:	2300      	movs	r3, #0
 800da52:	b510      	push	{r4, lr}
 800da54:	4604      	mov	r4, r0
 800da56:	e9c0 3300 	strd	r3, r3, [r0]
 800da5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800da5e:	6083      	str	r3, [r0, #8]
 800da60:	8181      	strh	r1, [r0, #12]
 800da62:	6643      	str	r3, [r0, #100]	; 0x64
 800da64:	81c2      	strh	r2, [r0, #14]
 800da66:	6183      	str	r3, [r0, #24]
 800da68:	4619      	mov	r1, r3
 800da6a:	2208      	movs	r2, #8
 800da6c:	305c      	adds	r0, #92	; 0x5c
 800da6e:	f000 f9ff 	bl	800de70 <memset>
 800da72:	4b0d      	ldr	r3, [pc, #52]	; (800daa8 <std+0x58>)
 800da74:	6263      	str	r3, [r4, #36]	; 0x24
 800da76:	4b0d      	ldr	r3, [pc, #52]	; (800daac <std+0x5c>)
 800da78:	62a3      	str	r3, [r4, #40]	; 0x28
 800da7a:	4b0d      	ldr	r3, [pc, #52]	; (800dab0 <std+0x60>)
 800da7c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800da7e:	4b0d      	ldr	r3, [pc, #52]	; (800dab4 <std+0x64>)
 800da80:	6323      	str	r3, [r4, #48]	; 0x30
 800da82:	4b0d      	ldr	r3, [pc, #52]	; (800dab8 <std+0x68>)
 800da84:	6224      	str	r4, [r4, #32]
 800da86:	429c      	cmp	r4, r3
 800da88:	d006      	beq.n	800da98 <std+0x48>
 800da8a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800da8e:	4294      	cmp	r4, r2
 800da90:	d002      	beq.n	800da98 <std+0x48>
 800da92:	33d0      	adds	r3, #208	; 0xd0
 800da94:	429c      	cmp	r4, r3
 800da96:	d105      	bne.n	800daa4 <std+0x54>
 800da98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800da9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800daa0:	f000 ba62 	b.w	800df68 <__retarget_lock_init_recursive>
 800daa4:	bd10      	pop	{r4, pc}
 800daa6:	bf00      	nop
 800daa8:	0800dcc1 	.word	0x0800dcc1
 800daac:	0800dce3 	.word	0x0800dce3
 800dab0:	0800dd1b 	.word	0x0800dd1b
 800dab4:	0800dd3f 	.word	0x0800dd3f
 800dab8:	20001870 	.word	0x20001870

0800dabc <stdio_exit_handler>:
 800dabc:	4a02      	ldr	r2, [pc, #8]	; (800dac8 <stdio_exit_handler+0xc>)
 800dabe:	4903      	ldr	r1, [pc, #12]	; (800dacc <stdio_exit_handler+0x10>)
 800dac0:	4803      	ldr	r0, [pc, #12]	; (800dad0 <stdio_exit_handler+0x14>)
 800dac2:	f000 b869 	b.w	800db98 <_fwalk_sglue>
 800dac6:	bf00      	nop
 800dac8:	20000034 	.word	0x20000034
 800dacc:	0800f911 	.word	0x0800f911
 800dad0:	20000040 	.word	0x20000040

0800dad4 <cleanup_stdio>:
 800dad4:	6841      	ldr	r1, [r0, #4]
 800dad6:	4b0c      	ldr	r3, [pc, #48]	; (800db08 <cleanup_stdio+0x34>)
 800dad8:	4299      	cmp	r1, r3
 800dada:	b510      	push	{r4, lr}
 800dadc:	4604      	mov	r4, r0
 800dade:	d001      	beq.n	800dae4 <cleanup_stdio+0x10>
 800dae0:	f001 ff16 	bl	800f910 <_fflush_r>
 800dae4:	68a1      	ldr	r1, [r4, #8]
 800dae6:	4b09      	ldr	r3, [pc, #36]	; (800db0c <cleanup_stdio+0x38>)
 800dae8:	4299      	cmp	r1, r3
 800daea:	d002      	beq.n	800daf2 <cleanup_stdio+0x1e>
 800daec:	4620      	mov	r0, r4
 800daee:	f001 ff0f 	bl	800f910 <_fflush_r>
 800daf2:	68e1      	ldr	r1, [r4, #12]
 800daf4:	4b06      	ldr	r3, [pc, #24]	; (800db10 <cleanup_stdio+0x3c>)
 800daf6:	4299      	cmp	r1, r3
 800daf8:	d004      	beq.n	800db04 <cleanup_stdio+0x30>
 800dafa:	4620      	mov	r0, r4
 800dafc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db00:	f001 bf06 	b.w	800f910 <_fflush_r>
 800db04:	bd10      	pop	{r4, pc}
 800db06:	bf00      	nop
 800db08:	20001870 	.word	0x20001870
 800db0c:	200018d8 	.word	0x200018d8
 800db10:	20001940 	.word	0x20001940

0800db14 <global_stdio_init.part.0>:
 800db14:	b510      	push	{r4, lr}
 800db16:	4b0b      	ldr	r3, [pc, #44]	; (800db44 <global_stdio_init.part.0+0x30>)
 800db18:	4c0b      	ldr	r4, [pc, #44]	; (800db48 <global_stdio_init.part.0+0x34>)
 800db1a:	4a0c      	ldr	r2, [pc, #48]	; (800db4c <global_stdio_init.part.0+0x38>)
 800db1c:	601a      	str	r2, [r3, #0]
 800db1e:	4620      	mov	r0, r4
 800db20:	2200      	movs	r2, #0
 800db22:	2104      	movs	r1, #4
 800db24:	f7ff ff94 	bl	800da50 <std>
 800db28:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800db2c:	2201      	movs	r2, #1
 800db2e:	2109      	movs	r1, #9
 800db30:	f7ff ff8e 	bl	800da50 <std>
 800db34:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800db38:	2202      	movs	r2, #2
 800db3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db3e:	2112      	movs	r1, #18
 800db40:	f7ff bf86 	b.w	800da50 <std>
 800db44:	200019a8 	.word	0x200019a8
 800db48:	20001870 	.word	0x20001870
 800db4c:	0800dabd 	.word	0x0800dabd

0800db50 <__sfp_lock_acquire>:
 800db50:	4801      	ldr	r0, [pc, #4]	; (800db58 <__sfp_lock_acquire+0x8>)
 800db52:	f000 ba0a 	b.w	800df6a <__retarget_lock_acquire_recursive>
 800db56:	bf00      	nop
 800db58:	200019b1 	.word	0x200019b1

0800db5c <__sfp_lock_release>:
 800db5c:	4801      	ldr	r0, [pc, #4]	; (800db64 <__sfp_lock_release+0x8>)
 800db5e:	f000 ba05 	b.w	800df6c <__retarget_lock_release_recursive>
 800db62:	bf00      	nop
 800db64:	200019b1 	.word	0x200019b1

0800db68 <__sinit>:
 800db68:	b510      	push	{r4, lr}
 800db6a:	4604      	mov	r4, r0
 800db6c:	f7ff fff0 	bl	800db50 <__sfp_lock_acquire>
 800db70:	6a23      	ldr	r3, [r4, #32]
 800db72:	b11b      	cbz	r3, 800db7c <__sinit+0x14>
 800db74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db78:	f7ff bff0 	b.w	800db5c <__sfp_lock_release>
 800db7c:	4b04      	ldr	r3, [pc, #16]	; (800db90 <__sinit+0x28>)
 800db7e:	6223      	str	r3, [r4, #32]
 800db80:	4b04      	ldr	r3, [pc, #16]	; (800db94 <__sinit+0x2c>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d1f5      	bne.n	800db74 <__sinit+0xc>
 800db88:	f7ff ffc4 	bl	800db14 <global_stdio_init.part.0>
 800db8c:	e7f2      	b.n	800db74 <__sinit+0xc>
 800db8e:	bf00      	nop
 800db90:	0800dad5 	.word	0x0800dad5
 800db94:	200019a8 	.word	0x200019a8

0800db98 <_fwalk_sglue>:
 800db98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db9c:	4607      	mov	r7, r0
 800db9e:	4688      	mov	r8, r1
 800dba0:	4614      	mov	r4, r2
 800dba2:	2600      	movs	r6, #0
 800dba4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dba8:	f1b9 0901 	subs.w	r9, r9, #1
 800dbac:	d505      	bpl.n	800dbba <_fwalk_sglue+0x22>
 800dbae:	6824      	ldr	r4, [r4, #0]
 800dbb0:	2c00      	cmp	r4, #0
 800dbb2:	d1f7      	bne.n	800dba4 <_fwalk_sglue+0xc>
 800dbb4:	4630      	mov	r0, r6
 800dbb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbba:	89ab      	ldrh	r3, [r5, #12]
 800dbbc:	2b01      	cmp	r3, #1
 800dbbe:	d907      	bls.n	800dbd0 <_fwalk_sglue+0x38>
 800dbc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dbc4:	3301      	adds	r3, #1
 800dbc6:	d003      	beq.n	800dbd0 <_fwalk_sglue+0x38>
 800dbc8:	4629      	mov	r1, r5
 800dbca:	4638      	mov	r0, r7
 800dbcc:	47c0      	blx	r8
 800dbce:	4306      	orrs	r6, r0
 800dbd0:	3568      	adds	r5, #104	; 0x68
 800dbd2:	e7e9      	b.n	800dba8 <_fwalk_sglue+0x10>

0800dbd4 <iprintf>:
 800dbd4:	b40f      	push	{r0, r1, r2, r3}
 800dbd6:	b507      	push	{r0, r1, r2, lr}
 800dbd8:	4906      	ldr	r1, [pc, #24]	; (800dbf4 <iprintf+0x20>)
 800dbda:	ab04      	add	r3, sp, #16
 800dbdc:	6808      	ldr	r0, [r1, #0]
 800dbde:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbe2:	6881      	ldr	r1, [r0, #8]
 800dbe4:	9301      	str	r3, [sp, #4]
 800dbe6:	f001 fcf3 	bl	800f5d0 <_vfiprintf_r>
 800dbea:	b003      	add	sp, #12
 800dbec:	f85d eb04 	ldr.w	lr, [sp], #4
 800dbf0:	b004      	add	sp, #16
 800dbf2:	4770      	bx	lr
 800dbf4:	2000008c 	.word	0x2000008c

0800dbf8 <putchar>:
 800dbf8:	4b02      	ldr	r3, [pc, #8]	; (800dc04 <putchar+0xc>)
 800dbfa:	4601      	mov	r1, r0
 800dbfc:	6818      	ldr	r0, [r3, #0]
 800dbfe:	6882      	ldr	r2, [r0, #8]
 800dc00:	f001 bf10 	b.w	800fa24 <_putc_r>
 800dc04:	2000008c 	.word	0x2000008c

0800dc08 <_puts_r>:
 800dc08:	6a03      	ldr	r3, [r0, #32]
 800dc0a:	b570      	push	{r4, r5, r6, lr}
 800dc0c:	6884      	ldr	r4, [r0, #8]
 800dc0e:	4605      	mov	r5, r0
 800dc10:	460e      	mov	r6, r1
 800dc12:	b90b      	cbnz	r3, 800dc18 <_puts_r+0x10>
 800dc14:	f7ff ffa8 	bl	800db68 <__sinit>
 800dc18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc1a:	07db      	lsls	r3, r3, #31
 800dc1c:	d405      	bmi.n	800dc2a <_puts_r+0x22>
 800dc1e:	89a3      	ldrh	r3, [r4, #12]
 800dc20:	0598      	lsls	r0, r3, #22
 800dc22:	d402      	bmi.n	800dc2a <_puts_r+0x22>
 800dc24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc26:	f000 f9a0 	bl	800df6a <__retarget_lock_acquire_recursive>
 800dc2a:	89a3      	ldrh	r3, [r4, #12]
 800dc2c:	0719      	lsls	r1, r3, #28
 800dc2e:	d513      	bpl.n	800dc58 <_puts_r+0x50>
 800dc30:	6923      	ldr	r3, [r4, #16]
 800dc32:	b18b      	cbz	r3, 800dc58 <_puts_r+0x50>
 800dc34:	3e01      	subs	r6, #1
 800dc36:	68a3      	ldr	r3, [r4, #8]
 800dc38:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800dc3c:	3b01      	subs	r3, #1
 800dc3e:	60a3      	str	r3, [r4, #8]
 800dc40:	b9e9      	cbnz	r1, 800dc7e <_puts_r+0x76>
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	da2e      	bge.n	800dca4 <_puts_r+0x9c>
 800dc46:	4622      	mov	r2, r4
 800dc48:	210a      	movs	r1, #10
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	f000 f87b 	bl	800dd46 <__swbuf_r>
 800dc50:	3001      	adds	r0, #1
 800dc52:	d007      	beq.n	800dc64 <_puts_r+0x5c>
 800dc54:	250a      	movs	r5, #10
 800dc56:	e007      	b.n	800dc68 <_puts_r+0x60>
 800dc58:	4621      	mov	r1, r4
 800dc5a:	4628      	mov	r0, r5
 800dc5c:	f000 f8b0 	bl	800ddc0 <__swsetup_r>
 800dc60:	2800      	cmp	r0, #0
 800dc62:	d0e7      	beq.n	800dc34 <_puts_r+0x2c>
 800dc64:	f04f 35ff 	mov.w	r5, #4294967295
 800dc68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc6a:	07da      	lsls	r2, r3, #31
 800dc6c:	d405      	bmi.n	800dc7a <_puts_r+0x72>
 800dc6e:	89a3      	ldrh	r3, [r4, #12]
 800dc70:	059b      	lsls	r3, r3, #22
 800dc72:	d402      	bmi.n	800dc7a <_puts_r+0x72>
 800dc74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc76:	f000 f979 	bl	800df6c <__retarget_lock_release_recursive>
 800dc7a:	4628      	mov	r0, r5
 800dc7c:	bd70      	pop	{r4, r5, r6, pc}
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	da04      	bge.n	800dc8c <_puts_r+0x84>
 800dc82:	69a2      	ldr	r2, [r4, #24]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	dc06      	bgt.n	800dc96 <_puts_r+0x8e>
 800dc88:	290a      	cmp	r1, #10
 800dc8a:	d004      	beq.n	800dc96 <_puts_r+0x8e>
 800dc8c:	6823      	ldr	r3, [r4, #0]
 800dc8e:	1c5a      	adds	r2, r3, #1
 800dc90:	6022      	str	r2, [r4, #0]
 800dc92:	7019      	strb	r1, [r3, #0]
 800dc94:	e7cf      	b.n	800dc36 <_puts_r+0x2e>
 800dc96:	4622      	mov	r2, r4
 800dc98:	4628      	mov	r0, r5
 800dc9a:	f000 f854 	bl	800dd46 <__swbuf_r>
 800dc9e:	3001      	adds	r0, #1
 800dca0:	d1c9      	bne.n	800dc36 <_puts_r+0x2e>
 800dca2:	e7df      	b.n	800dc64 <_puts_r+0x5c>
 800dca4:	6823      	ldr	r3, [r4, #0]
 800dca6:	250a      	movs	r5, #10
 800dca8:	1c5a      	adds	r2, r3, #1
 800dcaa:	6022      	str	r2, [r4, #0]
 800dcac:	701d      	strb	r5, [r3, #0]
 800dcae:	e7db      	b.n	800dc68 <_puts_r+0x60>

0800dcb0 <puts>:
 800dcb0:	4b02      	ldr	r3, [pc, #8]	; (800dcbc <puts+0xc>)
 800dcb2:	4601      	mov	r1, r0
 800dcb4:	6818      	ldr	r0, [r3, #0]
 800dcb6:	f7ff bfa7 	b.w	800dc08 <_puts_r>
 800dcba:	bf00      	nop
 800dcbc:	2000008c 	.word	0x2000008c

0800dcc0 <__sread>:
 800dcc0:	b510      	push	{r4, lr}
 800dcc2:	460c      	mov	r4, r1
 800dcc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcc8:	f000 f900 	bl	800decc <_read_r>
 800dccc:	2800      	cmp	r0, #0
 800dcce:	bfab      	itete	ge
 800dcd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800dcd2:	89a3      	ldrhlt	r3, [r4, #12]
 800dcd4:	181b      	addge	r3, r3, r0
 800dcd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dcda:	bfac      	ite	ge
 800dcdc:	6563      	strge	r3, [r4, #84]	; 0x54
 800dcde:	81a3      	strhlt	r3, [r4, #12]
 800dce0:	bd10      	pop	{r4, pc}

0800dce2 <__swrite>:
 800dce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dce6:	461f      	mov	r7, r3
 800dce8:	898b      	ldrh	r3, [r1, #12]
 800dcea:	05db      	lsls	r3, r3, #23
 800dcec:	4605      	mov	r5, r0
 800dcee:	460c      	mov	r4, r1
 800dcf0:	4616      	mov	r6, r2
 800dcf2:	d505      	bpl.n	800dd00 <__swrite+0x1e>
 800dcf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcf8:	2302      	movs	r3, #2
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	f000 f8d4 	bl	800dea8 <_lseek_r>
 800dd00:	89a3      	ldrh	r3, [r4, #12]
 800dd02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dd0a:	81a3      	strh	r3, [r4, #12]
 800dd0c:	4632      	mov	r2, r6
 800dd0e:	463b      	mov	r3, r7
 800dd10:	4628      	mov	r0, r5
 800dd12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd16:	f000 b8eb 	b.w	800def0 <_write_r>

0800dd1a <__sseek>:
 800dd1a:	b510      	push	{r4, lr}
 800dd1c:	460c      	mov	r4, r1
 800dd1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd22:	f000 f8c1 	bl	800dea8 <_lseek_r>
 800dd26:	1c43      	adds	r3, r0, #1
 800dd28:	89a3      	ldrh	r3, [r4, #12]
 800dd2a:	bf15      	itete	ne
 800dd2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800dd2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dd32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dd36:	81a3      	strheq	r3, [r4, #12]
 800dd38:	bf18      	it	ne
 800dd3a:	81a3      	strhne	r3, [r4, #12]
 800dd3c:	bd10      	pop	{r4, pc}

0800dd3e <__sclose>:
 800dd3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd42:	f000 b8a1 	b.w	800de88 <_close_r>

0800dd46 <__swbuf_r>:
 800dd46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd48:	460e      	mov	r6, r1
 800dd4a:	4614      	mov	r4, r2
 800dd4c:	4605      	mov	r5, r0
 800dd4e:	b118      	cbz	r0, 800dd58 <__swbuf_r+0x12>
 800dd50:	6a03      	ldr	r3, [r0, #32]
 800dd52:	b90b      	cbnz	r3, 800dd58 <__swbuf_r+0x12>
 800dd54:	f7ff ff08 	bl	800db68 <__sinit>
 800dd58:	69a3      	ldr	r3, [r4, #24]
 800dd5a:	60a3      	str	r3, [r4, #8]
 800dd5c:	89a3      	ldrh	r3, [r4, #12]
 800dd5e:	071a      	lsls	r2, r3, #28
 800dd60:	d525      	bpl.n	800ddae <__swbuf_r+0x68>
 800dd62:	6923      	ldr	r3, [r4, #16]
 800dd64:	b31b      	cbz	r3, 800ddae <__swbuf_r+0x68>
 800dd66:	6823      	ldr	r3, [r4, #0]
 800dd68:	6922      	ldr	r2, [r4, #16]
 800dd6a:	1a98      	subs	r0, r3, r2
 800dd6c:	6963      	ldr	r3, [r4, #20]
 800dd6e:	b2f6      	uxtb	r6, r6
 800dd70:	4283      	cmp	r3, r0
 800dd72:	4637      	mov	r7, r6
 800dd74:	dc04      	bgt.n	800dd80 <__swbuf_r+0x3a>
 800dd76:	4621      	mov	r1, r4
 800dd78:	4628      	mov	r0, r5
 800dd7a:	f001 fdc9 	bl	800f910 <_fflush_r>
 800dd7e:	b9e0      	cbnz	r0, 800ddba <__swbuf_r+0x74>
 800dd80:	68a3      	ldr	r3, [r4, #8]
 800dd82:	3b01      	subs	r3, #1
 800dd84:	60a3      	str	r3, [r4, #8]
 800dd86:	6823      	ldr	r3, [r4, #0]
 800dd88:	1c5a      	adds	r2, r3, #1
 800dd8a:	6022      	str	r2, [r4, #0]
 800dd8c:	701e      	strb	r6, [r3, #0]
 800dd8e:	6962      	ldr	r2, [r4, #20]
 800dd90:	1c43      	adds	r3, r0, #1
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d004      	beq.n	800dda0 <__swbuf_r+0x5a>
 800dd96:	89a3      	ldrh	r3, [r4, #12]
 800dd98:	07db      	lsls	r3, r3, #31
 800dd9a:	d506      	bpl.n	800ddaa <__swbuf_r+0x64>
 800dd9c:	2e0a      	cmp	r6, #10
 800dd9e:	d104      	bne.n	800ddaa <__swbuf_r+0x64>
 800dda0:	4621      	mov	r1, r4
 800dda2:	4628      	mov	r0, r5
 800dda4:	f001 fdb4 	bl	800f910 <_fflush_r>
 800dda8:	b938      	cbnz	r0, 800ddba <__swbuf_r+0x74>
 800ddaa:	4638      	mov	r0, r7
 800ddac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ddae:	4621      	mov	r1, r4
 800ddb0:	4628      	mov	r0, r5
 800ddb2:	f000 f805 	bl	800ddc0 <__swsetup_r>
 800ddb6:	2800      	cmp	r0, #0
 800ddb8:	d0d5      	beq.n	800dd66 <__swbuf_r+0x20>
 800ddba:	f04f 37ff 	mov.w	r7, #4294967295
 800ddbe:	e7f4      	b.n	800ddaa <__swbuf_r+0x64>

0800ddc0 <__swsetup_r>:
 800ddc0:	b538      	push	{r3, r4, r5, lr}
 800ddc2:	4b2a      	ldr	r3, [pc, #168]	; (800de6c <__swsetup_r+0xac>)
 800ddc4:	4605      	mov	r5, r0
 800ddc6:	6818      	ldr	r0, [r3, #0]
 800ddc8:	460c      	mov	r4, r1
 800ddca:	b118      	cbz	r0, 800ddd4 <__swsetup_r+0x14>
 800ddcc:	6a03      	ldr	r3, [r0, #32]
 800ddce:	b90b      	cbnz	r3, 800ddd4 <__swsetup_r+0x14>
 800ddd0:	f7ff feca 	bl	800db68 <__sinit>
 800ddd4:	89a3      	ldrh	r3, [r4, #12]
 800ddd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ddda:	0718      	lsls	r0, r3, #28
 800dddc:	d422      	bmi.n	800de24 <__swsetup_r+0x64>
 800ddde:	06d9      	lsls	r1, r3, #27
 800dde0:	d407      	bmi.n	800ddf2 <__swsetup_r+0x32>
 800dde2:	2309      	movs	r3, #9
 800dde4:	602b      	str	r3, [r5, #0]
 800dde6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ddea:	81a3      	strh	r3, [r4, #12]
 800ddec:	f04f 30ff 	mov.w	r0, #4294967295
 800ddf0:	e034      	b.n	800de5c <__swsetup_r+0x9c>
 800ddf2:	0758      	lsls	r0, r3, #29
 800ddf4:	d512      	bpl.n	800de1c <__swsetup_r+0x5c>
 800ddf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddf8:	b141      	cbz	r1, 800de0c <__swsetup_r+0x4c>
 800ddfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddfe:	4299      	cmp	r1, r3
 800de00:	d002      	beq.n	800de08 <__swsetup_r+0x48>
 800de02:	4628      	mov	r0, r5
 800de04:	f000 ff3e 	bl	800ec84 <_free_r>
 800de08:	2300      	movs	r3, #0
 800de0a:	6363      	str	r3, [r4, #52]	; 0x34
 800de0c:	89a3      	ldrh	r3, [r4, #12]
 800de0e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800de12:	81a3      	strh	r3, [r4, #12]
 800de14:	2300      	movs	r3, #0
 800de16:	6063      	str	r3, [r4, #4]
 800de18:	6923      	ldr	r3, [r4, #16]
 800de1a:	6023      	str	r3, [r4, #0]
 800de1c:	89a3      	ldrh	r3, [r4, #12]
 800de1e:	f043 0308 	orr.w	r3, r3, #8
 800de22:	81a3      	strh	r3, [r4, #12]
 800de24:	6923      	ldr	r3, [r4, #16]
 800de26:	b94b      	cbnz	r3, 800de3c <__swsetup_r+0x7c>
 800de28:	89a3      	ldrh	r3, [r4, #12]
 800de2a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800de2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de32:	d003      	beq.n	800de3c <__swsetup_r+0x7c>
 800de34:	4621      	mov	r1, r4
 800de36:	4628      	mov	r0, r5
 800de38:	f001 fdb8 	bl	800f9ac <__smakebuf_r>
 800de3c:	89a0      	ldrh	r0, [r4, #12]
 800de3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de42:	f010 0301 	ands.w	r3, r0, #1
 800de46:	d00a      	beq.n	800de5e <__swsetup_r+0x9e>
 800de48:	2300      	movs	r3, #0
 800de4a:	60a3      	str	r3, [r4, #8]
 800de4c:	6963      	ldr	r3, [r4, #20]
 800de4e:	425b      	negs	r3, r3
 800de50:	61a3      	str	r3, [r4, #24]
 800de52:	6923      	ldr	r3, [r4, #16]
 800de54:	b943      	cbnz	r3, 800de68 <__swsetup_r+0xa8>
 800de56:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800de5a:	d1c4      	bne.n	800dde6 <__swsetup_r+0x26>
 800de5c:	bd38      	pop	{r3, r4, r5, pc}
 800de5e:	0781      	lsls	r1, r0, #30
 800de60:	bf58      	it	pl
 800de62:	6963      	ldrpl	r3, [r4, #20]
 800de64:	60a3      	str	r3, [r4, #8]
 800de66:	e7f4      	b.n	800de52 <__swsetup_r+0x92>
 800de68:	2000      	movs	r0, #0
 800de6a:	e7f7      	b.n	800de5c <__swsetup_r+0x9c>
 800de6c:	2000008c 	.word	0x2000008c

0800de70 <memset>:
 800de70:	4402      	add	r2, r0
 800de72:	4603      	mov	r3, r0
 800de74:	4293      	cmp	r3, r2
 800de76:	d100      	bne.n	800de7a <memset+0xa>
 800de78:	4770      	bx	lr
 800de7a:	f803 1b01 	strb.w	r1, [r3], #1
 800de7e:	e7f9      	b.n	800de74 <memset+0x4>

0800de80 <_localeconv_r>:
 800de80:	4800      	ldr	r0, [pc, #0]	; (800de84 <_localeconv_r+0x4>)
 800de82:	4770      	bx	lr
 800de84:	20000180 	.word	0x20000180

0800de88 <_close_r>:
 800de88:	b538      	push	{r3, r4, r5, lr}
 800de8a:	4d06      	ldr	r5, [pc, #24]	; (800dea4 <_close_r+0x1c>)
 800de8c:	2300      	movs	r3, #0
 800de8e:	4604      	mov	r4, r0
 800de90:	4608      	mov	r0, r1
 800de92:	602b      	str	r3, [r5, #0]
 800de94:	f7f5 f96a 	bl	800316c <_close>
 800de98:	1c43      	adds	r3, r0, #1
 800de9a:	d102      	bne.n	800dea2 <_close_r+0x1a>
 800de9c:	682b      	ldr	r3, [r5, #0]
 800de9e:	b103      	cbz	r3, 800dea2 <_close_r+0x1a>
 800dea0:	6023      	str	r3, [r4, #0]
 800dea2:	bd38      	pop	{r3, r4, r5, pc}
 800dea4:	200019ac 	.word	0x200019ac

0800dea8 <_lseek_r>:
 800dea8:	b538      	push	{r3, r4, r5, lr}
 800deaa:	4d07      	ldr	r5, [pc, #28]	; (800dec8 <_lseek_r+0x20>)
 800deac:	4604      	mov	r4, r0
 800deae:	4608      	mov	r0, r1
 800deb0:	4611      	mov	r1, r2
 800deb2:	2200      	movs	r2, #0
 800deb4:	602a      	str	r2, [r5, #0]
 800deb6:	461a      	mov	r2, r3
 800deb8:	f7f5 f97f 	bl	80031ba <_lseek>
 800debc:	1c43      	adds	r3, r0, #1
 800debe:	d102      	bne.n	800dec6 <_lseek_r+0x1e>
 800dec0:	682b      	ldr	r3, [r5, #0]
 800dec2:	b103      	cbz	r3, 800dec6 <_lseek_r+0x1e>
 800dec4:	6023      	str	r3, [r4, #0]
 800dec6:	bd38      	pop	{r3, r4, r5, pc}
 800dec8:	200019ac 	.word	0x200019ac

0800decc <_read_r>:
 800decc:	b538      	push	{r3, r4, r5, lr}
 800dece:	4d07      	ldr	r5, [pc, #28]	; (800deec <_read_r+0x20>)
 800ded0:	4604      	mov	r4, r0
 800ded2:	4608      	mov	r0, r1
 800ded4:	4611      	mov	r1, r2
 800ded6:	2200      	movs	r2, #0
 800ded8:	602a      	str	r2, [r5, #0]
 800deda:	461a      	mov	r2, r3
 800dedc:	f7f5 f929 	bl	8003132 <_read>
 800dee0:	1c43      	adds	r3, r0, #1
 800dee2:	d102      	bne.n	800deea <_read_r+0x1e>
 800dee4:	682b      	ldr	r3, [r5, #0]
 800dee6:	b103      	cbz	r3, 800deea <_read_r+0x1e>
 800dee8:	6023      	str	r3, [r4, #0]
 800deea:	bd38      	pop	{r3, r4, r5, pc}
 800deec:	200019ac 	.word	0x200019ac

0800def0 <_write_r>:
 800def0:	b538      	push	{r3, r4, r5, lr}
 800def2:	4d07      	ldr	r5, [pc, #28]	; (800df10 <_write_r+0x20>)
 800def4:	4604      	mov	r4, r0
 800def6:	4608      	mov	r0, r1
 800def8:	4611      	mov	r1, r2
 800defa:	2200      	movs	r2, #0
 800defc:	602a      	str	r2, [r5, #0]
 800defe:	461a      	mov	r2, r3
 800df00:	f7fd fa02 	bl	800b308 <_write>
 800df04:	1c43      	adds	r3, r0, #1
 800df06:	d102      	bne.n	800df0e <_write_r+0x1e>
 800df08:	682b      	ldr	r3, [r5, #0]
 800df0a:	b103      	cbz	r3, 800df0e <_write_r+0x1e>
 800df0c:	6023      	str	r3, [r4, #0]
 800df0e:	bd38      	pop	{r3, r4, r5, pc}
 800df10:	200019ac 	.word	0x200019ac

0800df14 <__errno>:
 800df14:	4b01      	ldr	r3, [pc, #4]	; (800df1c <__errno+0x8>)
 800df16:	6818      	ldr	r0, [r3, #0]
 800df18:	4770      	bx	lr
 800df1a:	bf00      	nop
 800df1c:	2000008c 	.word	0x2000008c

0800df20 <__libc_init_array>:
 800df20:	b570      	push	{r4, r5, r6, lr}
 800df22:	4d0d      	ldr	r5, [pc, #52]	; (800df58 <__libc_init_array+0x38>)
 800df24:	4c0d      	ldr	r4, [pc, #52]	; (800df5c <__libc_init_array+0x3c>)
 800df26:	1b64      	subs	r4, r4, r5
 800df28:	10a4      	asrs	r4, r4, #2
 800df2a:	2600      	movs	r6, #0
 800df2c:	42a6      	cmp	r6, r4
 800df2e:	d109      	bne.n	800df44 <__libc_init_array+0x24>
 800df30:	4d0b      	ldr	r5, [pc, #44]	; (800df60 <__libc_init_array+0x40>)
 800df32:	4c0c      	ldr	r4, [pc, #48]	; (800df64 <__libc_init_array+0x44>)
 800df34:	f001 fe8e 	bl	800fc54 <_init>
 800df38:	1b64      	subs	r4, r4, r5
 800df3a:	10a4      	asrs	r4, r4, #2
 800df3c:	2600      	movs	r6, #0
 800df3e:	42a6      	cmp	r6, r4
 800df40:	d105      	bne.n	800df4e <__libc_init_array+0x2e>
 800df42:	bd70      	pop	{r4, r5, r6, pc}
 800df44:	f855 3b04 	ldr.w	r3, [r5], #4
 800df48:	4798      	blx	r3
 800df4a:	3601      	adds	r6, #1
 800df4c:	e7ee      	b.n	800df2c <__libc_init_array+0xc>
 800df4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800df52:	4798      	blx	r3
 800df54:	3601      	adds	r6, #1
 800df56:	e7f2      	b.n	800df3e <__libc_init_array+0x1e>
 800df58:	0801123c 	.word	0x0801123c
 800df5c:	0801123c 	.word	0x0801123c
 800df60:	0801123c 	.word	0x0801123c
 800df64:	08011240 	.word	0x08011240

0800df68 <__retarget_lock_init_recursive>:
 800df68:	4770      	bx	lr

0800df6a <__retarget_lock_acquire_recursive>:
 800df6a:	4770      	bx	lr

0800df6c <__retarget_lock_release_recursive>:
 800df6c:	4770      	bx	lr

0800df6e <memcpy>:
 800df6e:	440a      	add	r2, r1
 800df70:	4291      	cmp	r1, r2
 800df72:	f100 33ff 	add.w	r3, r0, #4294967295
 800df76:	d100      	bne.n	800df7a <memcpy+0xc>
 800df78:	4770      	bx	lr
 800df7a:	b510      	push	{r4, lr}
 800df7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800df80:	f803 4f01 	strb.w	r4, [r3, #1]!
 800df84:	4291      	cmp	r1, r2
 800df86:	d1f9      	bne.n	800df7c <memcpy+0xe>
 800df88:	bd10      	pop	{r4, pc}

0800df8a <quorem>:
 800df8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df8e:	6903      	ldr	r3, [r0, #16]
 800df90:	690c      	ldr	r4, [r1, #16]
 800df92:	42a3      	cmp	r3, r4
 800df94:	4607      	mov	r7, r0
 800df96:	db7e      	blt.n	800e096 <quorem+0x10c>
 800df98:	3c01      	subs	r4, #1
 800df9a:	f101 0814 	add.w	r8, r1, #20
 800df9e:	f100 0514 	add.w	r5, r0, #20
 800dfa2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dfa6:	9301      	str	r3, [sp, #4]
 800dfa8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dfac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	429a      	cmp	r2, r3
 800dfb4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dfb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dfbc:	fbb2 f6f3 	udiv	r6, r2, r3
 800dfc0:	d331      	bcc.n	800e026 <quorem+0x9c>
 800dfc2:	f04f 0e00 	mov.w	lr, #0
 800dfc6:	4640      	mov	r0, r8
 800dfc8:	46ac      	mov	ip, r5
 800dfca:	46f2      	mov	sl, lr
 800dfcc:	f850 2b04 	ldr.w	r2, [r0], #4
 800dfd0:	b293      	uxth	r3, r2
 800dfd2:	fb06 e303 	mla	r3, r6, r3, lr
 800dfd6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dfda:	0c1a      	lsrs	r2, r3, #16
 800dfdc:	b29b      	uxth	r3, r3
 800dfde:	ebaa 0303 	sub.w	r3, sl, r3
 800dfe2:	f8dc a000 	ldr.w	sl, [ip]
 800dfe6:	fa13 f38a 	uxtah	r3, r3, sl
 800dfea:	fb06 220e 	mla	r2, r6, lr, r2
 800dfee:	9300      	str	r3, [sp, #0]
 800dff0:	9b00      	ldr	r3, [sp, #0]
 800dff2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dff6:	b292      	uxth	r2, r2
 800dff8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800dffc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e000:	f8bd 3000 	ldrh.w	r3, [sp]
 800e004:	4581      	cmp	r9, r0
 800e006:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e00a:	f84c 3b04 	str.w	r3, [ip], #4
 800e00e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e012:	d2db      	bcs.n	800dfcc <quorem+0x42>
 800e014:	f855 300b 	ldr.w	r3, [r5, fp]
 800e018:	b92b      	cbnz	r3, 800e026 <quorem+0x9c>
 800e01a:	9b01      	ldr	r3, [sp, #4]
 800e01c:	3b04      	subs	r3, #4
 800e01e:	429d      	cmp	r5, r3
 800e020:	461a      	mov	r2, r3
 800e022:	d32c      	bcc.n	800e07e <quorem+0xf4>
 800e024:	613c      	str	r4, [r7, #16]
 800e026:	4638      	mov	r0, r7
 800e028:	f001 f9a8 	bl	800f37c <__mcmp>
 800e02c:	2800      	cmp	r0, #0
 800e02e:	db22      	blt.n	800e076 <quorem+0xec>
 800e030:	3601      	adds	r6, #1
 800e032:	4629      	mov	r1, r5
 800e034:	2000      	movs	r0, #0
 800e036:	f858 2b04 	ldr.w	r2, [r8], #4
 800e03a:	f8d1 c000 	ldr.w	ip, [r1]
 800e03e:	b293      	uxth	r3, r2
 800e040:	1ac3      	subs	r3, r0, r3
 800e042:	0c12      	lsrs	r2, r2, #16
 800e044:	fa13 f38c 	uxtah	r3, r3, ip
 800e048:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e04c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e050:	b29b      	uxth	r3, r3
 800e052:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e056:	45c1      	cmp	r9, r8
 800e058:	f841 3b04 	str.w	r3, [r1], #4
 800e05c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e060:	d2e9      	bcs.n	800e036 <quorem+0xac>
 800e062:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e066:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e06a:	b922      	cbnz	r2, 800e076 <quorem+0xec>
 800e06c:	3b04      	subs	r3, #4
 800e06e:	429d      	cmp	r5, r3
 800e070:	461a      	mov	r2, r3
 800e072:	d30a      	bcc.n	800e08a <quorem+0x100>
 800e074:	613c      	str	r4, [r7, #16]
 800e076:	4630      	mov	r0, r6
 800e078:	b003      	add	sp, #12
 800e07a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e07e:	6812      	ldr	r2, [r2, #0]
 800e080:	3b04      	subs	r3, #4
 800e082:	2a00      	cmp	r2, #0
 800e084:	d1ce      	bne.n	800e024 <quorem+0x9a>
 800e086:	3c01      	subs	r4, #1
 800e088:	e7c9      	b.n	800e01e <quorem+0x94>
 800e08a:	6812      	ldr	r2, [r2, #0]
 800e08c:	3b04      	subs	r3, #4
 800e08e:	2a00      	cmp	r2, #0
 800e090:	d1f0      	bne.n	800e074 <quorem+0xea>
 800e092:	3c01      	subs	r4, #1
 800e094:	e7eb      	b.n	800e06e <quorem+0xe4>
 800e096:	2000      	movs	r0, #0
 800e098:	e7ee      	b.n	800e078 <quorem+0xee>
 800e09a:	0000      	movs	r0, r0
 800e09c:	0000      	movs	r0, r0
	...

0800e0a0 <_dtoa_r>:
 800e0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0a4:	ed2d 8b04 	vpush	{d8-d9}
 800e0a8:	69c5      	ldr	r5, [r0, #28]
 800e0aa:	b093      	sub	sp, #76	; 0x4c
 800e0ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e0b0:	ec57 6b10 	vmov	r6, r7, d0
 800e0b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e0b8:	9107      	str	r1, [sp, #28]
 800e0ba:	4604      	mov	r4, r0
 800e0bc:	920a      	str	r2, [sp, #40]	; 0x28
 800e0be:	930d      	str	r3, [sp, #52]	; 0x34
 800e0c0:	b975      	cbnz	r5, 800e0e0 <_dtoa_r+0x40>
 800e0c2:	2010      	movs	r0, #16
 800e0c4:	f000 fe2a 	bl	800ed1c <malloc>
 800e0c8:	4602      	mov	r2, r0
 800e0ca:	61e0      	str	r0, [r4, #28]
 800e0cc:	b920      	cbnz	r0, 800e0d8 <_dtoa_r+0x38>
 800e0ce:	4bae      	ldr	r3, [pc, #696]	; (800e388 <_dtoa_r+0x2e8>)
 800e0d0:	21ef      	movs	r1, #239	; 0xef
 800e0d2:	48ae      	ldr	r0, [pc, #696]	; (800e38c <_dtoa_r+0x2ec>)
 800e0d4:	f001 fd0c 	bl	800faf0 <__assert_func>
 800e0d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e0dc:	6005      	str	r5, [r0, #0]
 800e0de:	60c5      	str	r5, [r0, #12]
 800e0e0:	69e3      	ldr	r3, [r4, #28]
 800e0e2:	6819      	ldr	r1, [r3, #0]
 800e0e4:	b151      	cbz	r1, 800e0fc <_dtoa_r+0x5c>
 800e0e6:	685a      	ldr	r2, [r3, #4]
 800e0e8:	604a      	str	r2, [r1, #4]
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	4093      	lsls	r3, r2
 800e0ee:	608b      	str	r3, [r1, #8]
 800e0f0:	4620      	mov	r0, r4
 800e0f2:	f000 ff07 	bl	800ef04 <_Bfree>
 800e0f6:	69e3      	ldr	r3, [r4, #28]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	601a      	str	r2, [r3, #0]
 800e0fc:	1e3b      	subs	r3, r7, #0
 800e0fe:	bfbb      	ittet	lt
 800e100:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e104:	9303      	strlt	r3, [sp, #12]
 800e106:	2300      	movge	r3, #0
 800e108:	2201      	movlt	r2, #1
 800e10a:	bfac      	ite	ge
 800e10c:	f8c8 3000 	strge.w	r3, [r8]
 800e110:	f8c8 2000 	strlt.w	r2, [r8]
 800e114:	4b9e      	ldr	r3, [pc, #632]	; (800e390 <_dtoa_r+0x2f0>)
 800e116:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e11a:	ea33 0308 	bics.w	r3, r3, r8
 800e11e:	d11b      	bne.n	800e158 <_dtoa_r+0xb8>
 800e120:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e122:	f242 730f 	movw	r3, #9999	; 0x270f
 800e126:	6013      	str	r3, [r2, #0]
 800e128:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e12c:	4333      	orrs	r3, r6
 800e12e:	f000 8593 	beq.w	800ec58 <_dtoa_r+0xbb8>
 800e132:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e134:	b963      	cbnz	r3, 800e150 <_dtoa_r+0xb0>
 800e136:	4b97      	ldr	r3, [pc, #604]	; (800e394 <_dtoa_r+0x2f4>)
 800e138:	e027      	b.n	800e18a <_dtoa_r+0xea>
 800e13a:	4b97      	ldr	r3, [pc, #604]	; (800e398 <_dtoa_r+0x2f8>)
 800e13c:	9300      	str	r3, [sp, #0]
 800e13e:	3308      	adds	r3, #8
 800e140:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e142:	6013      	str	r3, [r2, #0]
 800e144:	9800      	ldr	r0, [sp, #0]
 800e146:	b013      	add	sp, #76	; 0x4c
 800e148:	ecbd 8b04 	vpop	{d8-d9}
 800e14c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e150:	4b90      	ldr	r3, [pc, #576]	; (800e394 <_dtoa_r+0x2f4>)
 800e152:	9300      	str	r3, [sp, #0]
 800e154:	3303      	adds	r3, #3
 800e156:	e7f3      	b.n	800e140 <_dtoa_r+0xa0>
 800e158:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e15c:	2200      	movs	r2, #0
 800e15e:	ec51 0b17 	vmov	r0, r1, d7
 800e162:	eeb0 8a47 	vmov.f32	s16, s14
 800e166:	eef0 8a67 	vmov.f32	s17, s15
 800e16a:	2300      	movs	r3, #0
 800e16c:	f7f2 fc94 	bl	8000a98 <__aeabi_dcmpeq>
 800e170:	4681      	mov	r9, r0
 800e172:	b160      	cbz	r0, 800e18e <_dtoa_r+0xee>
 800e174:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e176:	2301      	movs	r3, #1
 800e178:	6013      	str	r3, [r2, #0]
 800e17a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	f000 8568 	beq.w	800ec52 <_dtoa_r+0xbb2>
 800e182:	4b86      	ldr	r3, [pc, #536]	; (800e39c <_dtoa_r+0x2fc>)
 800e184:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e186:	6013      	str	r3, [r2, #0]
 800e188:	3b01      	subs	r3, #1
 800e18a:	9300      	str	r3, [sp, #0]
 800e18c:	e7da      	b.n	800e144 <_dtoa_r+0xa4>
 800e18e:	aa10      	add	r2, sp, #64	; 0x40
 800e190:	a911      	add	r1, sp, #68	; 0x44
 800e192:	4620      	mov	r0, r4
 800e194:	eeb0 0a48 	vmov.f32	s0, s16
 800e198:	eef0 0a68 	vmov.f32	s1, s17
 800e19c:	f001 f994 	bl	800f4c8 <__d2b>
 800e1a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e1a4:	4682      	mov	sl, r0
 800e1a6:	2d00      	cmp	r5, #0
 800e1a8:	d07f      	beq.n	800e2aa <_dtoa_r+0x20a>
 800e1aa:	ee18 3a90 	vmov	r3, s17
 800e1ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e1b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e1b6:	ec51 0b18 	vmov	r0, r1, d8
 800e1ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e1be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e1c2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e1c6:	4619      	mov	r1, r3
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	4b75      	ldr	r3, [pc, #468]	; (800e3a0 <_dtoa_r+0x300>)
 800e1cc:	f7f2 f844 	bl	8000258 <__aeabi_dsub>
 800e1d0:	a367      	add	r3, pc, #412	; (adr r3, 800e370 <_dtoa_r+0x2d0>)
 800e1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d6:	f7f2 f9f7 	bl	80005c8 <__aeabi_dmul>
 800e1da:	a367      	add	r3, pc, #412	; (adr r3, 800e378 <_dtoa_r+0x2d8>)
 800e1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e0:	f7f2 f83c 	bl	800025c <__adddf3>
 800e1e4:	4606      	mov	r6, r0
 800e1e6:	4628      	mov	r0, r5
 800e1e8:	460f      	mov	r7, r1
 800e1ea:	f7f2 f983 	bl	80004f4 <__aeabi_i2d>
 800e1ee:	a364      	add	r3, pc, #400	; (adr r3, 800e380 <_dtoa_r+0x2e0>)
 800e1f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f4:	f7f2 f9e8 	bl	80005c8 <__aeabi_dmul>
 800e1f8:	4602      	mov	r2, r0
 800e1fa:	460b      	mov	r3, r1
 800e1fc:	4630      	mov	r0, r6
 800e1fe:	4639      	mov	r1, r7
 800e200:	f7f2 f82c 	bl	800025c <__adddf3>
 800e204:	4606      	mov	r6, r0
 800e206:	460f      	mov	r7, r1
 800e208:	f7f2 fc8e 	bl	8000b28 <__aeabi_d2iz>
 800e20c:	2200      	movs	r2, #0
 800e20e:	4683      	mov	fp, r0
 800e210:	2300      	movs	r3, #0
 800e212:	4630      	mov	r0, r6
 800e214:	4639      	mov	r1, r7
 800e216:	f7f2 fc49 	bl	8000aac <__aeabi_dcmplt>
 800e21a:	b148      	cbz	r0, 800e230 <_dtoa_r+0x190>
 800e21c:	4658      	mov	r0, fp
 800e21e:	f7f2 f969 	bl	80004f4 <__aeabi_i2d>
 800e222:	4632      	mov	r2, r6
 800e224:	463b      	mov	r3, r7
 800e226:	f7f2 fc37 	bl	8000a98 <__aeabi_dcmpeq>
 800e22a:	b908      	cbnz	r0, 800e230 <_dtoa_r+0x190>
 800e22c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e230:	f1bb 0f16 	cmp.w	fp, #22
 800e234:	d857      	bhi.n	800e2e6 <_dtoa_r+0x246>
 800e236:	4b5b      	ldr	r3, [pc, #364]	; (800e3a4 <_dtoa_r+0x304>)
 800e238:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e240:	ec51 0b18 	vmov	r0, r1, d8
 800e244:	f7f2 fc32 	bl	8000aac <__aeabi_dcmplt>
 800e248:	2800      	cmp	r0, #0
 800e24a:	d04e      	beq.n	800e2ea <_dtoa_r+0x24a>
 800e24c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e250:	2300      	movs	r3, #0
 800e252:	930c      	str	r3, [sp, #48]	; 0x30
 800e254:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e256:	1b5b      	subs	r3, r3, r5
 800e258:	1e5a      	subs	r2, r3, #1
 800e25a:	bf45      	ittet	mi
 800e25c:	f1c3 0301 	rsbmi	r3, r3, #1
 800e260:	9305      	strmi	r3, [sp, #20]
 800e262:	2300      	movpl	r3, #0
 800e264:	2300      	movmi	r3, #0
 800e266:	9206      	str	r2, [sp, #24]
 800e268:	bf54      	ite	pl
 800e26a:	9305      	strpl	r3, [sp, #20]
 800e26c:	9306      	strmi	r3, [sp, #24]
 800e26e:	f1bb 0f00 	cmp.w	fp, #0
 800e272:	db3c      	blt.n	800e2ee <_dtoa_r+0x24e>
 800e274:	9b06      	ldr	r3, [sp, #24]
 800e276:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e27a:	445b      	add	r3, fp
 800e27c:	9306      	str	r3, [sp, #24]
 800e27e:	2300      	movs	r3, #0
 800e280:	9308      	str	r3, [sp, #32]
 800e282:	9b07      	ldr	r3, [sp, #28]
 800e284:	2b09      	cmp	r3, #9
 800e286:	d868      	bhi.n	800e35a <_dtoa_r+0x2ba>
 800e288:	2b05      	cmp	r3, #5
 800e28a:	bfc4      	itt	gt
 800e28c:	3b04      	subgt	r3, #4
 800e28e:	9307      	strgt	r3, [sp, #28]
 800e290:	9b07      	ldr	r3, [sp, #28]
 800e292:	f1a3 0302 	sub.w	r3, r3, #2
 800e296:	bfcc      	ite	gt
 800e298:	2500      	movgt	r5, #0
 800e29a:	2501      	movle	r5, #1
 800e29c:	2b03      	cmp	r3, #3
 800e29e:	f200 8085 	bhi.w	800e3ac <_dtoa_r+0x30c>
 800e2a2:	e8df f003 	tbb	[pc, r3]
 800e2a6:	3b2e      	.short	0x3b2e
 800e2a8:	5839      	.short	0x5839
 800e2aa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e2ae:	441d      	add	r5, r3
 800e2b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e2b4:	2b20      	cmp	r3, #32
 800e2b6:	bfc1      	itttt	gt
 800e2b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e2bc:	fa08 f803 	lslgt.w	r8, r8, r3
 800e2c0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e2c4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e2c8:	bfd6      	itet	le
 800e2ca:	f1c3 0320 	rsble	r3, r3, #32
 800e2ce:	ea48 0003 	orrgt.w	r0, r8, r3
 800e2d2:	fa06 f003 	lslle.w	r0, r6, r3
 800e2d6:	f7f2 f8fd 	bl	80004d4 <__aeabi_ui2d>
 800e2da:	2201      	movs	r2, #1
 800e2dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e2e0:	3d01      	subs	r5, #1
 800e2e2:	920e      	str	r2, [sp, #56]	; 0x38
 800e2e4:	e76f      	b.n	800e1c6 <_dtoa_r+0x126>
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	e7b3      	b.n	800e252 <_dtoa_r+0x1b2>
 800e2ea:	900c      	str	r0, [sp, #48]	; 0x30
 800e2ec:	e7b2      	b.n	800e254 <_dtoa_r+0x1b4>
 800e2ee:	9b05      	ldr	r3, [sp, #20]
 800e2f0:	eba3 030b 	sub.w	r3, r3, fp
 800e2f4:	9305      	str	r3, [sp, #20]
 800e2f6:	f1cb 0300 	rsb	r3, fp, #0
 800e2fa:	9308      	str	r3, [sp, #32]
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800e300:	e7bf      	b.n	800e282 <_dtoa_r+0x1e2>
 800e302:	2300      	movs	r3, #0
 800e304:	9309      	str	r3, [sp, #36]	; 0x24
 800e306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e308:	2b00      	cmp	r3, #0
 800e30a:	dc52      	bgt.n	800e3b2 <_dtoa_r+0x312>
 800e30c:	2301      	movs	r3, #1
 800e30e:	9301      	str	r3, [sp, #4]
 800e310:	9304      	str	r3, [sp, #16]
 800e312:	461a      	mov	r2, r3
 800e314:	920a      	str	r2, [sp, #40]	; 0x28
 800e316:	e00b      	b.n	800e330 <_dtoa_r+0x290>
 800e318:	2301      	movs	r3, #1
 800e31a:	e7f3      	b.n	800e304 <_dtoa_r+0x264>
 800e31c:	2300      	movs	r3, #0
 800e31e:	9309      	str	r3, [sp, #36]	; 0x24
 800e320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e322:	445b      	add	r3, fp
 800e324:	9301      	str	r3, [sp, #4]
 800e326:	3301      	adds	r3, #1
 800e328:	2b01      	cmp	r3, #1
 800e32a:	9304      	str	r3, [sp, #16]
 800e32c:	bfb8      	it	lt
 800e32e:	2301      	movlt	r3, #1
 800e330:	69e0      	ldr	r0, [r4, #28]
 800e332:	2100      	movs	r1, #0
 800e334:	2204      	movs	r2, #4
 800e336:	f102 0614 	add.w	r6, r2, #20
 800e33a:	429e      	cmp	r6, r3
 800e33c:	d93d      	bls.n	800e3ba <_dtoa_r+0x31a>
 800e33e:	6041      	str	r1, [r0, #4]
 800e340:	4620      	mov	r0, r4
 800e342:	f000 fd9f 	bl	800ee84 <_Balloc>
 800e346:	9000      	str	r0, [sp, #0]
 800e348:	2800      	cmp	r0, #0
 800e34a:	d139      	bne.n	800e3c0 <_dtoa_r+0x320>
 800e34c:	4b16      	ldr	r3, [pc, #88]	; (800e3a8 <_dtoa_r+0x308>)
 800e34e:	4602      	mov	r2, r0
 800e350:	f240 11af 	movw	r1, #431	; 0x1af
 800e354:	e6bd      	b.n	800e0d2 <_dtoa_r+0x32>
 800e356:	2301      	movs	r3, #1
 800e358:	e7e1      	b.n	800e31e <_dtoa_r+0x27e>
 800e35a:	2501      	movs	r5, #1
 800e35c:	2300      	movs	r3, #0
 800e35e:	9307      	str	r3, [sp, #28]
 800e360:	9509      	str	r5, [sp, #36]	; 0x24
 800e362:	f04f 33ff 	mov.w	r3, #4294967295
 800e366:	9301      	str	r3, [sp, #4]
 800e368:	9304      	str	r3, [sp, #16]
 800e36a:	2200      	movs	r2, #0
 800e36c:	2312      	movs	r3, #18
 800e36e:	e7d1      	b.n	800e314 <_dtoa_r+0x274>
 800e370:	636f4361 	.word	0x636f4361
 800e374:	3fd287a7 	.word	0x3fd287a7
 800e378:	8b60c8b3 	.word	0x8b60c8b3
 800e37c:	3fc68a28 	.word	0x3fc68a28
 800e380:	509f79fb 	.word	0x509f79fb
 800e384:	3fd34413 	.word	0x3fd34413
 800e388:	08010f05 	.word	0x08010f05
 800e38c:	08010f1c 	.word	0x08010f1c
 800e390:	7ff00000 	.word	0x7ff00000
 800e394:	08010f01 	.word	0x08010f01
 800e398:	08010ef8 	.word	0x08010ef8
 800e39c:	08010ed5 	.word	0x08010ed5
 800e3a0:	3ff80000 	.word	0x3ff80000
 800e3a4:	08011008 	.word	0x08011008
 800e3a8:	08010f74 	.word	0x08010f74
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	9309      	str	r3, [sp, #36]	; 0x24
 800e3b0:	e7d7      	b.n	800e362 <_dtoa_r+0x2c2>
 800e3b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3b4:	9301      	str	r3, [sp, #4]
 800e3b6:	9304      	str	r3, [sp, #16]
 800e3b8:	e7ba      	b.n	800e330 <_dtoa_r+0x290>
 800e3ba:	3101      	adds	r1, #1
 800e3bc:	0052      	lsls	r2, r2, #1
 800e3be:	e7ba      	b.n	800e336 <_dtoa_r+0x296>
 800e3c0:	69e3      	ldr	r3, [r4, #28]
 800e3c2:	9a00      	ldr	r2, [sp, #0]
 800e3c4:	601a      	str	r2, [r3, #0]
 800e3c6:	9b04      	ldr	r3, [sp, #16]
 800e3c8:	2b0e      	cmp	r3, #14
 800e3ca:	f200 80a8 	bhi.w	800e51e <_dtoa_r+0x47e>
 800e3ce:	2d00      	cmp	r5, #0
 800e3d0:	f000 80a5 	beq.w	800e51e <_dtoa_r+0x47e>
 800e3d4:	f1bb 0f00 	cmp.w	fp, #0
 800e3d8:	dd38      	ble.n	800e44c <_dtoa_r+0x3ac>
 800e3da:	4bc0      	ldr	r3, [pc, #768]	; (800e6dc <_dtoa_r+0x63c>)
 800e3dc:	f00b 020f 	and.w	r2, fp, #15
 800e3e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e3e4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e3e8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e3ec:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e3f0:	d019      	beq.n	800e426 <_dtoa_r+0x386>
 800e3f2:	4bbb      	ldr	r3, [pc, #748]	; (800e6e0 <_dtoa_r+0x640>)
 800e3f4:	ec51 0b18 	vmov	r0, r1, d8
 800e3f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e3fc:	f7f2 fa0e 	bl	800081c <__aeabi_ddiv>
 800e400:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e404:	f008 080f 	and.w	r8, r8, #15
 800e408:	2503      	movs	r5, #3
 800e40a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e6e0 <_dtoa_r+0x640>
 800e40e:	f1b8 0f00 	cmp.w	r8, #0
 800e412:	d10a      	bne.n	800e42a <_dtoa_r+0x38a>
 800e414:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e418:	4632      	mov	r2, r6
 800e41a:	463b      	mov	r3, r7
 800e41c:	f7f2 f9fe 	bl	800081c <__aeabi_ddiv>
 800e420:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e424:	e02b      	b.n	800e47e <_dtoa_r+0x3de>
 800e426:	2502      	movs	r5, #2
 800e428:	e7ef      	b.n	800e40a <_dtoa_r+0x36a>
 800e42a:	f018 0f01 	tst.w	r8, #1
 800e42e:	d008      	beq.n	800e442 <_dtoa_r+0x3a2>
 800e430:	4630      	mov	r0, r6
 800e432:	4639      	mov	r1, r7
 800e434:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e438:	f7f2 f8c6 	bl	80005c8 <__aeabi_dmul>
 800e43c:	3501      	adds	r5, #1
 800e43e:	4606      	mov	r6, r0
 800e440:	460f      	mov	r7, r1
 800e442:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e446:	f109 0908 	add.w	r9, r9, #8
 800e44a:	e7e0      	b.n	800e40e <_dtoa_r+0x36e>
 800e44c:	f000 809f 	beq.w	800e58e <_dtoa_r+0x4ee>
 800e450:	f1cb 0600 	rsb	r6, fp, #0
 800e454:	4ba1      	ldr	r3, [pc, #644]	; (800e6dc <_dtoa_r+0x63c>)
 800e456:	4fa2      	ldr	r7, [pc, #648]	; (800e6e0 <_dtoa_r+0x640>)
 800e458:	f006 020f 	and.w	r2, r6, #15
 800e45c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e464:	ec51 0b18 	vmov	r0, r1, d8
 800e468:	f7f2 f8ae 	bl	80005c8 <__aeabi_dmul>
 800e46c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e470:	1136      	asrs	r6, r6, #4
 800e472:	2300      	movs	r3, #0
 800e474:	2502      	movs	r5, #2
 800e476:	2e00      	cmp	r6, #0
 800e478:	d17e      	bne.n	800e578 <_dtoa_r+0x4d8>
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d1d0      	bne.n	800e420 <_dtoa_r+0x380>
 800e47e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e480:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e484:	2b00      	cmp	r3, #0
 800e486:	f000 8084 	beq.w	800e592 <_dtoa_r+0x4f2>
 800e48a:	4b96      	ldr	r3, [pc, #600]	; (800e6e4 <_dtoa_r+0x644>)
 800e48c:	2200      	movs	r2, #0
 800e48e:	4640      	mov	r0, r8
 800e490:	4649      	mov	r1, r9
 800e492:	f7f2 fb0b 	bl	8000aac <__aeabi_dcmplt>
 800e496:	2800      	cmp	r0, #0
 800e498:	d07b      	beq.n	800e592 <_dtoa_r+0x4f2>
 800e49a:	9b04      	ldr	r3, [sp, #16]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d078      	beq.n	800e592 <_dtoa_r+0x4f2>
 800e4a0:	9b01      	ldr	r3, [sp, #4]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	dd39      	ble.n	800e51a <_dtoa_r+0x47a>
 800e4a6:	4b90      	ldr	r3, [pc, #576]	; (800e6e8 <_dtoa_r+0x648>)
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	4640      	mov	r0, r8
 800e4ac:	4649      	mov	r1, r9
 800e4ae:	f7f2 f88b 	bl	80005c8 <__aeabi_dmul>
 800e4b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4b6:	9e01      	ldr	r6, [sp, #4]
 800e4b8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e4bc:	3501      	adds	r5, #1
 800e4be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e4c2:	4628      	mov	r0, r5
 800e4c4:	f7f2 f816 	bl	80004f4 <__aeabi_i2d>
 800e4c8:	4642      	mov	r2, r8
 800e4ca:	464b      	mov	r3, r9
 800e4cc:	f7f2 f87c 	bl	80005c8 <__aeabi_dmul>
 800e4d0:	4b86      	ldr	r3, [pc, #536]	; (800e6ec <_dtoa_r+0x64c>)
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	f7f1 fec2 	bl	800025c <__adddf3>
 800e4d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e4dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4e0:	9303      	str	r3, [sp, #12]
 800e4e2:	2e00      	cmp	r6, #0
 800e4e4:	d158      	bne.n	800e598 <_dtoa_r+0x4f8>
 800e4e6:	4b82      	ldr	r3, [pc, #520]	; (800e6f0 <_dtoa_r+0x650>)
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	4640      	mov	r0, r8
 800e4ec:	4649      	mov	r1, r9
 800e4ee:	f7f1 feb3 	bl	8000258 <__aeabi_dsub>
 800e4f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e4f6:	4680      	mov	r8, r0
 800e4f8:	4689      	mov	r9, r1
 800e4fa:	f7f2 faf5 	bl	8000ae8 <__aeabi_dcmpgt>
 800e4fe:	2800      	cmp	r0, #0
 800e500:	f040 8296 	bne.w	800ea30 <_dtoa_r+0x990>
 800e504:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e508:	4640      	mov	r0, r8
 800e50a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e50e:	4649      	mov	r1, r9
 800e510:	f7f2 facc 	bl	8000aac <__aeabi_dcmplt>
 800e514:	2800      	cmp	r0, #0
 800e516:	f040 8289 	bne.w	800ea2c <_dtoa_r+0x98c>
 800e51a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e51e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e520:	2b00      	cmp	r3, #0
 800e522:	f2c0 814e 	blt.w	800e7c2 <_dtoa_r+0x722>
 800e526:	f1bb 0f0e 	cmp.w	fp, #14
 800e52a:	f300 814a 	bgt.w	800e7c2 <_dtoa_r+0x722>
 800e52e:	4b6b      	ldr	r3, [pc, #428]	; (800e6dc <_dtoa_r+0x63c>)
 800e530:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e534:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	f280 80dc 	bge.w	800e6f8 <_dtoa_r+0x658>
 800e540:	9b04      	ldr	r3, [sp, #16]
 800e542:	2b00      	cmp	r3, #0
 800e544:	f300 80d8 	bgt.w	800e6f8 <_dtoa_r+0x658>
 800e548:	f040 826f 	bne.w	800ea2a <_dtoa_r+0x98a>
 800e54c:	4b68      	ldr	r3, [pc, #416]	; (800e6f0 <_dtoa_r+0x650>)
 800e54e:	2200      	movs	r2, #0
 800e550:	4640      	mov	r0, r8
 800e552:	4649      	mov	r1, r9
 800e554:	f7f2 f838 	bl	80005c8 <__aeabi_dmul>
 800e558:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e55c:	f7f2 faba 	bl	8000ad4 <__aeabi_dcmpge>
 800e560:	9e04      	ldr	r6, [sp, #16]
 800e562:	4637      	mov	r7, r6
 800e564:	2800      	cmp	r0, #0
 800e566:	f040 8245 	bne.w	800e9f4 <_dtoa_r+0x954>
 800e56a:	9d00      	ldr	r5, [sp, #0]
 800e56c:	2331      	movs	r3, #49	; 0x31
 800e56e:	f805 3b01 	strb.w	r3, [r5], #1
 800e572:	f10b 0b01 	add.w	fp, fp, #1
 800e576:	e241      	b.n	800e9fc <_dtoa_r+0x95c>
 800e578:	07f2      	lsls	r2, r6, #31
 800e57a:	d505      	bpl.n	800e588 <_dtoa_r+0x4e8>
 800e57c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e580:	f7f2 f822 	bl	80005c8 <__aeabi_dmul>
 800e584:	3501      	adds	r5, #1
 800e586:	2301      	movs	r3, #1
 800e588:	1076      	asrs	r6, r6, #1
 800e58a:	3708      	adds	r7, #8
 800e58c:	e773      	b.n	800e476 <_dtoa_r+0x3d6>
 800e58e:	2502      	movs	r5, #2
 800e590:	e775      	b.n	800e47e <_dtoa_r+0x3de>
 800e592:	9e04      	ldr	r6, [sp, #16]
 800e594:	465f      	mov	r7, fp
 800e596:	e792      	b.n	800e4be <_dtoa_r+0x41e>
 800e598:	9900      	ldr	r1, [sp, #0]
 800e59a:	4b50      	ldr	r3, [pc, #320]	; (800e6dc <_dtoa_r+0x63c>)
 800e59c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e5a0:	4431      	add	r1, r6
 800e5a2:	9102      	str	r1, [sp, #8]
 800e5a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e5a6:	eeb0 9a47 	vmov.f32	s18, s14
 800e5aa:	eef0 9a67 	vmov.f32	s19, s15
 800e5ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e5b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e5b6:	2900      	cmp	r1, #0
 800e5b8:	d044      	beq.n	800e644 <_dtoa_r+0x5a4>
 800e5ba:	494e      	ldr	r1, [pc, #312]	; (800e6f4 <_dtoa_r+0x654>)
 800e5bc:	2000      	movs	r0, #0
 800e5be:	f7f2 f92d 	bl	800081c <__aeabi_ddiv>
 800e5c2:	ec53 2b19 	vmov	r2, r3, d9
 800e5c6:	f7f1 fe47 	bl	8000258 <__aeabi_dsub>
 800e5ca:	9d00      	ldr	r5, [sp, #0]
 800e5cc:	ec41 0b19 	vmov	d9, r0, r1
 800e5d0:	4649      	mov	r1, r9
 800e5d2:	4640      	mov	r0, r8
 800e5d4:	f7f2 faa8 	bl	8000b28 <__aeabi_d2iz>
 800e5d8:	4606      	mov	r6, r0
 800e5da:	f7f1 ff8b 	bl	80004f4 <__aeabi_i2d>
 800e5de:	4602      	mov	r2, r0
 800e5e0:	460b      	mov	r3, r1
 800e5e2:	4640      	mov	r0, r8
 800e5e4:	4649      	mov	r1, r9
 800e5e6:	f7f1 fe37 	bl	8000258 <__aeabi_dsub>
 800e5ea:	3630      	adds	r6, #48	; 0x30
 800e5ec:	f805 6b01 	strb.w	r6, [r5], #1
 800e5f0:	ec53 2b19 	vmov	r2, r3, d9
 800e5f4:	4680      	mov	r8, r0
 800e5f6:	4689      	mov	r9, r1
 800e5f8:	f7f2 fa58 	bl	8000aac <__aeabi_dcmplt>
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	d164      	bne.n	800e6ca <_dtoa_r+0x62a>
 800e600:	4642      	mov	r2, r8
 800e602:	464b      	mov	r3, r9
 800e604:	4937      	ldr	r1, [pc, #220]	; (800e6e4 <_dtoa_r+0x644>)
 800e606:	2000      	movs	r0, #0
 800e608:	f7f1 fe26 	bl	8000258 <__aeabi_dsub>
 800e60c:	ec53 2b19 	vmov	r2, r3, d9
 800e610:	f7f2 fa4c 	bl	8000aac <__aeabi_dcmplt>
 800e614:	2800      	cmp	r0, #0
 800e616:	f040 80b6 	bne.w	800e786 <_dtoa_r+0x6e6>
 800e61a:	9b02      	ldr	r3, [sp, #8]
 800e61c:	429d      	cmp	r5, r3
 800e61e:	f43f af7c 	beq.w	800e51a <_dtoa_r+0x47a>
 800e622:	4b31      	ldr	r3, [pc, #196]	; (800e6e8 <_dtoa_r+0x648>)
 800e624:	ec51 0b19 	vmov	r0, r1, d9
 800e628:	2200      	movs	r2, #0
 800e62a:	f7f1 ffcd 	bl	80005c8 <__aeabi_dmul>
 800e62e:	4b2e      	ldr	r3, [pc, #184]	; (800e6e8 <_dtoa_r+0x648>)
 800e630:	ec41 0b19 	vmov	d9, r0, r1
 800e634:	2200      	movs	r2, #0
 800e636:	4640      	mov	r0, r8
 800e638:	4649      	mov	r1, r9
 800e63a:	f7f1 ffc5 	bl	80005c8 <__aeabi_dmul>
 800e63e:	4680      	mov	r8, r0
 800e640:	4689      	mov	r9, r1
 800e642:	e7c5      	b.n	800e5d0 <_dtoa_r+0x530>
 800e644:	ec51 0b17 	vmov	r0, r1, d7
 800e648:	f7f1 ffbe 	bl	80005c8 <__aeabi_dmul>
 800e64c:	9b02      	ldr	r3, [sp, #8]
 800e64e:	9d00      	ldr	r5, [sp, #0]
 800e650:	930f      	str	r3, [sp, #60]	; 0x3c
 800e652:	ec41 0b19 	vmov	d9, r0, r1
 800e656:	4649      	mov	r1, r9
 800e658:	4640      	mov	r0, r8
 800e65a:	f7f2 fa65 	bl	8000b28 <__aeabi_d2iz>
 800e65e:	4606      	mov	r6, r0
 800e660:	f7f1 ff48 	bl	80004f4 <__aeabi_i2d>
 800e664:	3630      	adds	r6, #48	; 0x30
 800e666:	4602      	mov	r2, r0
 800e668:	460b      	mov	r3, r1
 800e66a:	4640      	mov	r0, r8
 800e66c:	4649      	mov	r1, r9
 800e66e:	f7f1 fdf3 	bl	8000258 <__aeabi_dsub>
 800e672:	f805 6b01 	strb.w	r6, [r5], #1
 800e676:	9b02      	ldr	r3, [sp, #8]
 800e678:	429d      	cmp	r5, r3
 800e67a:	4680      	mov	r8, r0
 800e67c:	4689      	mov	r9, r1
 800e67e:	f04f 0200 	mov.w	r2, #0
 800e682:	d124      	bne.n	800e6ce <_dtoa_r+0x62e>
 800e684:	4b1b      	ldr	r3, [pc, #108]	; (800e6f4 <_dtoa_r+0x654>)
 800e686:	ec51 0b19 	vmov	r0, r1, d9
 800e68a:	f7f1 fde7 	bl	800025c <__adddf3>
 800e68e:	4602      	mov	r2, r0
 800e690:	460b      	mov	r3, r1
 800e692:	4640      	mov	r0, r8
 800e694:	4649      	mov	r1, r9
 800e696:	f7f2 fa27 	bl	8000ae8 <__aeabi_dcmpgt>
 800e69a:	2800      	cmp	r0, #0
 800e69c:	d173      	bne.n	800e786 <_dtoa_r+0x6e6>
 800e69e:	ec53 2b19 	vmov	r2, r3, d9
 800e6a2:	4914      	ldr	r1, [pc, #80]	; (800e6f4 <_dtoa_r+0x654>)
 800e6a4:	2000      	movs	r0, #0
 800e6a6:	f7f1 fdd7 	bl	8000258 <__aeabi_dsub>
 800e6aa:	4602      	mov	r2, r0
 800e6ac:	460b      	mov	r3, r1
 800e6ae:	4640      	mov	r0, r8
 800e6b0:	4649      	mov	r1, r9
 800e6b2:	f7f2 f9fb 	bl	8000aac <__aeabi_dcmplt>
 800e6b6:	2800      	cmp	r0, #0
 800e6b8:	f43f af2f 	beq.w	800e51a <_dtoa_r+0x47a>
 800e6bc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e6be:	1e6b      	subs	r3, r5, #1
 800e6c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800e6c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e6c6:	2b30      	cmp	r3, #48	; 0x30
 800e6c8:	d0f8      	beq.n	800e6bc <_dtoa_r+0x61c>
 800e6ca:	46bb      	mov	fp, r7
 800e6cc:	e04a      	b.n	800e764 <_dtoa_r+0x6c4>
 800e6ce:	4b06      	ldr	r3, [pc, #24]	; (800e6e8 <_dtoa_r+0x648>)
 800e6d0:	f7f1 ff7a 	bl	80005c8 <__aeabi_dmul>
 800e6d4:	4680      	mov	r8, r0
 800e6d6:	4689      	mov	r9, r1
 800e6d8:	e7bd      	b.n	800e656 <_dtoa_r+0x5b6>
 800e6da:	bf00      	nop
 800e6dc:	08011008 	.word	0x08011008
 800e6e0:	08010fe0 	.word	0x08010fe0
 800e6e4:	3ff00000 	.word	0x3ff00000
 800e6e8:	40240000 	.word	0x40240000
 800e6ec:	401c0000 	.word	0x401c0000
 800e6f0:	40140000 	.word	0x40140000
 800e6f4:	3fe00000 	.word	0x3fe00000
 800e6f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e6fc:	9d00      	ldr	r5, [sp, #0]
 800e6fe:	4642      	mov	r2, r8
 800e700:	464b      	mov	r3, r9
 800e702:	4630      	mov	r0, r6
 800e704:	4639      	mov	r1, r7
 800e706:	f7f2 f889 	bl	800081c <__aeabi_ddiv>
 800e70a:	f7f2 fa0d 	bl	8000b28 <__aeabi_d2iz>
 800e70e:	9001      	str	r0, [sp, #4]
 800e710:	f7f1 fef0 	bl	80004f4 <__aeabi_i2d>
 800e714:	4642      	mov	r2, r8
 800e716:	464b      	mov	r3, r9
 800e718:	f7f1 ff56 	bl	80005c8 <__aeabi_dmul>
 800e71c:	4602      	mov	r2, r0
 800e71e:	460b      	mov	r3, r1
 800e720:	4630      	mov	r0, r6
 800e722:	4639      	mov	r1, r7
 800e724:	f7f1 fd98 	bl	8000258 <__aeabi_dsub>
 800e728:	9e01      	ldr	r6, [sp, #4]
 800e72a:	9f04      	ldr	r7, [sp, #16]
 800e72c:	3630      	adds	r6, #48	; 0x30
 800e72e:	f805 6b01 	strb.w	r6, [r5], #1
 800e732:	9e00      	ldr	r6, [sp, #0]
 800e734:	1bae      	subs	r6, r5, r6
 800e736:	42b7      	cmp	r7, r6
 800e738:	4602      	mov	r2, r0
 800e73a:	460b      	mov	r3, r1
 800e73c:	d134      	bne.n	800e7a8 <_dtoa_r+0x708>
 800e73e:	f7f1 fd8d 	bl	800025c <__adddf3>
 800e742:	4642      	mov	r2, r8
 800e744:	464b      	mov	r3, r9
 800e746:	4606      	mov	r6, r0
 800e748:	460f      	mov	r7, r1
 800e74a:	f7f2 f9cd 	bl	8000ae8 <__aeabi_dcmpgt>
 800e74e:	b9c8      	cbnz	r0, 800e784 <_dtoa_r+0x6e4>
 800e750:	4642      	mov	r2, r8
 800e752:	464b      	mov	r3, r9
 800e754:	4630      	mov	r0, r6
 800e756:	4639      	mov	r1, r7
 800e758:	f7f2 f99e 	bl	8000a98 <__aeabi_dcmpeq>
 800e75c:	b110      	cbz	r0, 800e764 <_dtoa_r+0x6c4>
 800e75e:	9b01      	ldr	r3, [sp, #4]
 800e760:	07db      	lsls	r3, r3, #31
 800e762:	d40f      	bmi.n	800e784 <_dtoa_r+0x6e4>
 800e764:	4651      	mov	r1, sl
 800e766:	4620      	mov	r0, r4
 800e768:	f000 fbcc 	bl	800ef04 <_Bfree>
 800e76c:	2300      	movs	r3, #0
 800e76e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e770:	702b      	strb	r3, [r5, #0]
 800e772:	f10b 0301 	add.w	r3, fp, #1
 800e776:	6013      	str	r3, [r2, #0]
 800e778:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	f43f ace2 	beq.w	800e144 <_dtoa_r+0xa4>
 800e780:	601d      	str	r5, [r3, #0]
 800e782:	e4df      	b.n	800e144 <_dtoa_r+0xa4>
 800e784:	465f      	mov	r7, fp
 800e786:	462b      	mov	r3, r5
 800e788:	461d      	mov	r5, r3
 800e78a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e78e:	2a39      	cmp	r2, #57	; 0x39
 800e790:	d106      	bne.n	800e7a0 <_dtoa_r+0x700>
 800e792:	9a00      	ldr	r2, [sp, #0]
 800e794:	429a      	cmp	r2, r3
 800e796:	d1f7      	bne.n	800e788 <_dtoa_r+0x6e8>
 800e798:	9900      	ldr	r1, [sp, #0]
 800e79a:	2230      	movs	r2, #48	; 0x30
 800e79c:	3701      	adds	r7, #1
 800e79e:	700a      	strb	r2, [r1, #0]
 800e7a0:	781a      	ldrb	r2, [r3, #0]
 800e7a2:	3201      	adds	r2, #1
 800e7a4:	701a      	strb	r2, [r3, #0]
 800e7a6:	e790      	b.n	800e6ca <_dtoa_r+0x62a>
 800e7a8:	4ba3      	ldr	r3, [pc, #652]	; (800ea38 <_dtoa_r+0x998>)
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	f7f1 ff0c 	bl	80005c8 <__aeabi_dmul>
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	4606      	mov	r6, r0
 800e7b6:	460f      	mov	r7, r1
 800e7b8:	f7f2 f96e 	bl	8000a98 <__aeabi_dcmpeq>
 800e7bc:	2800      	cmp	r0, #0
 800e7be:	d09e      	beq.n	800e6fe <_dtoa_r+0x65e>
 800e7c0:	e7d0      	b.n	800e764 <_dtoa_r+0x6c4>
 800e7c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e7c4:	2a00      	cmp	r2, #0
 800e7c6:	f000 80ca 	beq.w	800e95e <_dtoa_r+0x8be>
 800e7ca:	9a07      	ldr	r2, [sp, #28]
 800e7cc:	2a01      	cmp	r2, #1
 800e7ce:	f300 80ad 	bgt.w	800e92c <_dtoa_r+0x88c>
 800e7d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e7d4:	2a00      	cmp	r2, #0
 800e7d6:	f000 80a5 	beq.w	800e924 <_dtoa_r+0x884>
 800e7da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e7de:	9e08      	ldr	r6, [sp, #32]
 800e7e0:	9d05      	ldr	r5, [sp, #20]
 800e7e2:	9a05      	ldr	r2, [sp, #20]
 800e7e4:	441a      	add	r2, r3
 800e7e6:	9205      	str	r2, [sp, #20]
 800e7e8:	9a06      	ldr	r2, [sp, #24]
 800e7ea:	2101      	movs	r1, #1
 800e7ec:	441a      	add	r2, r3
 800e7ee:	4620      	mov	r0, r4
 800e7f0:	9206      	str	r2, [sp, #24]
 800e7f2:	f000 fc3d 	bl	800f070 <__i2b>
 800e7f6:	4607      	mov	r7, r0
 800e7f8:	b165      	cbz	r5, 800e814 <_dtoa_r+0x774>
 800e7fa:	9b06      	ldr	r3, [sp, #24]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	dd09      	ble.n	800e814 <_dtoa_r+0x774>
 800e800:	42ab      	cmp	r3, r5
 800e802:	9a05      	ldr	r2, [sp, #20]
 800e804:	bfa8      	it	ge
 800e806:	462b      	movge	r3, r5
 800e808:	1ad2      	subs	r2, r2, r3
 800e80a:	9205      	str	r2, [sp, #20]
 800e80c:	9a06      	ldr	r2, [sp, #24]
 800e80e:	1aed      	subs	r5, r5, r3
 800e810:	1ad3      	subs	r3, r2, r3
 800e812:	9306      	str	r3, [sp, #24]
 800e814:	9b08      	ldr	r3, [sp, #32]
 800e816:	b1f3      	cbz	r3, 800e856 <_dtoa_r+0x7b6>
 800e818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	f000 80a3 	beq.w	800e966 <_dtoa_r+0x8c6>
 800e820:	2e00      	cmp	r6, #0
 800e822:	dd10      	ble.n	800e846 <_dtoa_r+0x7a6>
 800e824:	4639      	mov	r1, r7
 800e826:	4632      	mov	r2, r6
 800e828:	4620      	mov	r0, r4
 800e82a:	f000 fce1 	bl	800f1f0 <__pow5mult>
 800e82e:	4652      	mov	r2, sl
 800e830:	4601      	mov	r1, r0
 800e832:	4607      	mov	r7, r0
 800e834:	4620      	mov	r0, r4
 800e836:	f000 fc31 	bl	800f09c <__multiply>
 800e83a:	4651      	mov	r1, sl
 800e83c:	4680      	mov	r8, r0
 800e83e:	4620      	mov	r0, r4
 800e840:	f000 fb60 	bl	800ef04 <_Bfree>
 800e844:	46c2      	mov	sl, r8
 800e846:	9b08      	ldr	r3, [sp, #32]
 800e848:	1b9a      	subs	r2, r3, r6
 800e84a:	d004      	beq.n	800e856 <_dtoa_r+0x7b6>
 800e84c:	4651      	mov	r1, sl
 800e84e:	4620      	mov	r0, r4
 800e850:	f000 fcce 	bl	800f1f0 <__pow5mult>
 800e854:	4682      	mov	sl, r0
 800e856:	2101      	movs	r1, #1
 800e858:	4620      	mov	r0, r4
 800e85a:	f000 fc09 	bl	800f070 <__i2b>
 800e85e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e860:	2b00      	cmp	r3, #0
 800e862:	4606      	mov	r6, r0
 800e864:	f340 8081 	ble.w	800e96a <_dtoa_r+0x8ca>
 800e868:	461a      	mov	r2, r3
 800e86a:	4601      	mov	r1, r0
 800e86c:	4620      	mov	r0, r4
 800e86e:	f000 fcbf 	bl	800f1f0 <__pow5mult>
 800e872:	9b07      	ldr	r3, [sp, #28]
 800e874:	2b01      	cmp	r3, #1
 800e876:	4606      	mov	r6, r0
 800e878:	dd7a      	ble.n	800e970 <_dtoa_r+0x8d0>
 800e87a:	f04f 0800 	mov.w	r8, #0
 800e87e:	6933      	ldr	r3, [r6, #16]
 800e880:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e884:	6918      	ldr	r0, [r3, #16]
 800e886:	f000 fba5 	bl	800efd4 <__hi0bits>
 800e88a:	f1c0 0020 	rsb	r0, r0, #32
 800e88e:	9b06      	ldr	r3, [sp, #24]
 800e890:	4418      	add	r0, r3
 800e892:	f010 001f 	ands.w	r0, r0, #31
 800e896:	f000 8094 	beq.w	800e9c2 <_dtoa_r+0x922>
 800e89a:	f1c0 0320 	rsb	r3, r0, #32
 800e89e:	2b04      	cmp	r3, #4
 800e8a0:	f340 8085 	ble.w	800e9ae <_dtoa_r+0x90e>
 800e8a4:	9b05      	ldr	r3, [sp, #20]
 800e8a6:	f1c0 001c 	rsb	r0, r0, #28
 800e8aa:	4403      	add	r3, r0
 800e8ac:	9305      	str	r3, [sp, #20]
 800e8ae:	9b06      	ldr	r3, [sp, #24]
 800e8b0:	4403      	add	r3, r0
 800e8b2:	4405      	add	r5, r0
 800e8b4:	9306      	str	r3, [sp, #24]
 800e8b6:	9b05      	ldr	r3, [sp, #20]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	dd05      	ble.n	800e8c8 <_dtoa_r+0x828>
 800e8bc:	4651      	mov	r1, sl
 800e8be:	461a      	mov	r2, r3
 800e8c0:	4620      	mov	r0, r4
 800e8c2:	f000 fcef 	bl	800f2a4 <__lshift>
 800e8c6:	4682      	mov	sl, r0
 800e8c8:	9b06      	ldr	r3, [sp, #24]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	dd05      	ble.n	800e8da <_dtoa_r+0x83a>
 800e8ce:	4631      	mov	r1, r6
 800e8d0:	461a      	mov	r2, r3
 800e8d2:	4620      	mov	r0, r4
 800e8d4:	f000 fce6 	bl	800f2a4 <__lshift>
 800e8d8:	4606      	mov	r6, r0
 800e8da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d072      	beq.n	800e9c6 <_dtoa_r+0x926>
 800e8e0:	4631      	mov	r1, r6
 800e8e2:	4650      	mov	r0, sl
 800e8e4:	f000 fd4a 	bl	800f37c <__mcmp>
 800e8e8:	2800      	cmp	r0, #0
 800e8ea:	da6c      	bge.n	800e9c6 <_dtoa_r+0x926>
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	4651      	mov	r1, sl
 800e8f0:	220a      	movs	r2, #10
 800e8f2:	4620      	mov	r0, r4
 800e8f4:	f000 fb28 	bl	800ef48 <__multadd>
 800e8f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e8fe:	4682      	mov	sl, r0
 800e900:	2b00      	cmp	r3, #0
 800e902:	f000 81b0 	beq.w	800ec66 <_dtoa_r+0xbc6>
 800e906:	2300      	movs	r3, #0
 800e908:	4639      	mov	r1, r7
 800e90a:	220a      	movs	r2, #10
 800e90c:	4620      	mov	r0, r4
 800e90e:	f000 fb1b 	bl	800ef48 <__multadd>
 800e912:	9b01      	ldr	r3, [sp, #4]
 800e914:	2b00      	cmp	r3, #0
 800e916:	4607      	mov	r7, r0
 800e918:	f300 8096 	bgt.w	800ea48 <_dtoa_r+0x9a8>
 800e91c:	9b07      	ldr	r3, [sp, #28]
 800e91e:	2b02      	cmp	r3, #2
 800e920:	dc59      	bgt.n	800e9d6 <_dtoa_r+0x936>
 800e922:	e091      	b.n	800ea48 <_dtoa_r+0x9a8>
 800e924:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e926:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e92a:	e758      	b.n	800e7de <_dtoa_r+0x73e>
 800e92c:	9b04      	ldr	r3, [sp, #16]
 800e92e:	1e5e      	subs	r6, r3, #1
 800e930:	9b08      	ldr	r3, [sp, #32]
 800e932:	42b3      	cmp	r3, r6
 800e934:	bfbf      	itttt	lt
 800e936:	9b08      	ldrlt	r3, [sp, #32]
 800e938:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800e93a:	9608      	strlt	r6, [sp, #32]
 800e93c:	1af3      	sublt	r3, r6, r3
 800e93e:	bfb4      	ite	lt
 800e940:	18d2      	addlt	r2, r2, r3
 800e942:	1b9e      	subge	r6, r3, r6
 800e944:	9b04      	ldr	r3, [sp, #16]
 800e946:	bfbc      	itt	lt
 800e948:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800e94a:	2600      	movlt	r6, #0
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	bfb7      	itett	lt
 800e950:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800e954:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800e958:	1a9d      	sublt	r5, r3, r2
 800e95a:	2300      	movlt	r3, #0
 800e95c:	e741      	b.n	800e7e2 <_dtoa_r+0x742>
 800e95e:	9e08      	ldr	r6, [sp, #32]
 800e960:	9d05      	ldr	r5, [sp, #20]
 800e962:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e964:	e748      	b.n	800e7f8 <_dtoa_r+0x758>
 800e966:	9a08      	ldr	r2, [sp, #32]
 800e968:	e770      	b.n	800e84c <_dtoa_r+0x7ac>
 800e96a:	9b07      	ldr	r3, [sp, #28]
 800e96c:	2b01      	cmp	r3, #1
 800e96e:	dc19      	bgt.n	800e9a4 <_dtoa_r+0x904>
 800e970:	9b02      	ldr	r3, [sp, #8]
 800e972:	b9bb      	cbnz	r3, 800e9a4 <_dtoa_r+0x904>
 800e974:	9b03      	ldr	r3, [sp, #12]
 800e976:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e97a:	b99b      	cbnz	r3, 800e9a4 <_dtoa_r+0x904>
 800e97c:	9b03      	ldr	r3, [sp, #12]
 800e97e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e982:	0d1b      	lsrs	r3, r3, #20
 800e984:	051b      	lsls	r3, r3, #20
 800e986:	b183      	cbz	r3, 800e9aa <_dtoa_r+0x90a>
 800e988:	9b05      	ldr	r3, [sp, #20]
 800e98a:	3301      	adds	r3, #1
 800e98c:	9305      	str	r3, [sp, #20]
 800e98e:	9b06      	ldr	r3, [sp, #24]
 800e990:	3301      	adds	r3, #1
 800e992:	9306      	str	r3, [sp, #24]
 800e994:	f04f 0801 	mov.w	r8, #1
 800e998:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	f47f af6f 	bne.w	800e87e <_dtoa_r+0x7de>
 800e9a0:	2001      	movs	r0, #1
 800e9a2:	e774      	b.n	800e88e <_dtoa_r+0x7ee>
 800e9a4:	f04f 0800 	mov.w	r8, #0
 800e9a8:	e7f6      	b.n	800e998 <_dtoa_r+0x8f8>
 800e9aa:	4698      	mov	r8, r3
 800e9ac:	e7f4      	b.n	800e998 <_dtoa_r+0x8f8>
 800e9ae:	d082      	beq.n	800e8b6 <_dtoa_r+0x816>
 800e9b0:	9a05      	ldr	r2, [sp, #20]
 800e9b2:	331c      	adds	r3, #28
 800e9b4:	441a      	add	r2, r3
 800e9b6:	9205      	str	r2, [sp, #20]
 800e9b8:	9a06      	ldr	r2, [sp, #24]
 800e9ba:	441a      	add	r2, r3
 800e9bc:	441d      	add	r5, r3
 800e9be:	9206      	str	r2, [sp, #24]
 800e9c0:	e779      	b.n	800e8b6 <_dtoa_r+0x816>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	e7f4      	b.n	800e9b0 <_dtoa_r+0x910>
 800e9c6:	9b04      	ldr	r3, [sp, #16]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	dc37      	bgt.n	800ea3c <_dtoa_r+0x99c>
 800e9cc:	9b07      	ldr	r3, [sp, #28]
 800e9ce:	2b02      	cmp	r3, #2
 800e9d0:	dd34      	ble.n	800ea3c <_dtoa_r+0x99c>
 800e9d2:	9b04      	ldr	r3, [sp, #16]
 800e9d4:	9301      	str	r3, [sp, #4]
 800e9d6:	9b01      	ldr	r3, [sp, #4]
 800e9d8:	b963      	cbnz	r3, 800e9f4 <_dtoa_r+0x954>
 800e9da:	4631      	mov	r1, r6
 800e9dc:	2205      	movs	r2, #5
 800e9de:	4620      	mov	r0, r4
 800e9e0:	f000 fab2 	bl	800ef48 <__multadd>
 800e9e4:	4601      	mov	r1, r0
 800e9e6:	4606      	mov	r6, r0
 800e9e8:	4650      	mov	r0, sl
 800e9ea:	f000 fcc7 	bl	800f37c <__mcmp>
 800e9ee:	2800      	cmp	r0, #0
 800e9f0:	f73f adbb 	bgt.w	800e56a <_dtoa_r+0x4ca>
 800e9f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9f6:	9d00      	ldr	r5, [sp, #0]
 800e9f8:	ea6f 0b03 	mvn.w	fp, r3
 800e9fc:	f04f 0800 	mov.w	r8, #0
 800ea00:	4631      	mov	r1, r6
 800ea02:	4620      	mov	r0, r4
 800ea04:	f000 fa7e 	bl	800ef04 <_Bfree>
 800ea08:	2f00      	cmp	r7, #0
 800ea0a:	f43f aeab 	beq.w	800e764 <_dtoa_r+0x6c4>
 800ea0e:	f1b8 0f00 	cmp.w	r8, #0
 800ea12:	d005      	beq.n	800ea20 <_dtoa_r+0x980>
 800ea14:	45b8      	cmp	r8, r7
 800ea16:	d003      	beq.n	800ea20 <_dtoa_r+0x980>
 800ea18:	4641      	mov	r1, r8
 800ea1a:	4620      	mov	r0, r4
 800ea1c:	f000 fa72 	bl	800ef04 <_Bfree>
 800ea20:	4639      	mov	r1, r7
 800ea22:	4620      	mov	r0, r4
 800ea24:	f000 fa6e 	bl	800ef04 <_Bfree>
 800ea28:	e69c      	b.n	800e764 <_dtoa_r+0x6c4>
 800ea2a:	2600      	movs	r6, #0
 800ea2c:	4637      	mov	r7, r6
 800ea2e:	e7e1      	b.n	800e9f4 <_dtoa_r+0x954>
 800ea30:	46bb      	mov	fp, r7
 800ea32:	4637      	mov	r7, r6
 800ea34:	e599      	b.n	800e56a <_dtoa_r+0x4ca>
 800ea36:	bf00      	nop
 800ea38:	40240000 	.word	0x40240000
 800ea3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	f000 80c8 	beq.w	800ebd4 <_dtoa_r+0xb34>
 800ea44:	9b04      	ldr	r3, [sp, #16]
 800ea46:	9301      	str	r3, [sp, #4]
 800ea48:	2d00      	cmp	r5, #0
 800ea4a:	dd05      	ble.n	800ea58 <_dtoa_r+0x9b8>
 800ea4c:	4639      	mov	r1, r7
 800ea4e:	462a      	mov	r2, r5
 800ea50:	4620      	mov	r0, r4
 800ea52:	f000 fc27 	bl	800f2a4 <__lshift>
 800ea56:	4607      	mov	r7, r0
 800ea58:	f1b8 0f00 	cmp.w	r8, #0
 800ea5c:	d05b      	beq.n	800eb16 <_dtoa_r+0xa76>
 800ea5e:	6879      	ldr	r1, [r7, #4]
 800ea60:	4620      	mov	r0, r4
 800ea62:	f000 fa0f 	bl	800ee84 <_Balloc>
 800ea66:	4605      	mov	r5, r0
 800ea68:	b928      	cbnz	r0, 800ea76 <_dtoa_r+0x9d6>
 800ea6a:	4b83      	ldr	r3, [pc, #524]	; (800ec78 <_dtoa_r+0xbd8>)
 800ea6c:	4602      	mov	r2, r0
 800ea6e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ea72:	f7ff bb2e 	b.w	800e0d2 <_dtoa_r+0x32>
 800ea76:	693a      	ldr	r2, [r7, #16]
 800ea78:	3202      	adds	r2, #2
 800ea7a:	0092      	lsls	r2, r2, #2
 800ea7c:	f107 010c 	add.w	r1, r7, #12
 800ea80:	300c      	adds	r0, #12
 800ea82:	f7ff fa74 	bl	800df6e <memcpy>
 800ea86:	2201      	movs	r2, #1
 800ea88:	4629      	mov	r1, r5
 800ea8a:	4620      	mov	r0, r4
 800ea8c:	f000 fc0a 	bl	800f2a4 <__lshift>
 800ea90:	9b00      	ldr	r3, [sp, #0]
 800ea92:	3301      	adds	r3, #1
 800ea94:	9304      	str	r3, [sp, #16]
 800ea96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea9a:	4413      	add	r3, r2
 800ea9c:	9308      	str	r3, [sp, #32]
 800ea9e:	9b02      	ldr	r3, [sp, #8]
 800eaa0:	f003 0301 	and.w	r3, r3, #1
 800eaa4:	46b8      	mov	r8, r7
 800eaa6:	9306      	str	r3, [sp, #24]
 800eaa8:	4607      	mov	r7, r0
 800eaaa:	9b04      	ldr	r3, [sp, #16]
 800eaac:	4631      	mov	r1, r6
 800eaae:	3b01      	subs	r3, #1
 800eab0:	4650      	mov	r0, sl
 800eab2:	9301      	str	r3, [sp, #4]
 800eab4:	f7ff fa69 	bl	800df8a <quorem>
 800eab8:	4641      	mov	r1, r8
 800eaba:	9002      	str	r0, [sp, #8]
 800eabc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800eac0:	4650      	mov	r0, sl
 800eac2:	f000 fc5b 	bl	800f37c <__mcmp>
 800eac6:	463a      	mov	r2, r7
 800eac8:	9005      	str	r0, [sp, #20]
 800eaca:	4631      	mov	r1, r6
 800eacc:	4620      	mov	r0, r4
 800eace:	f000 fc71 	bl	800f3b4 <__mdiff>
 800ead2:	68c2      	ldr	r2, [r0, #12]
 800ead4:	4605      	mov	r5, r0
 800ead6:	bb02      	cbnz	r2, 800eb1a <_dtoa_r+0xa7a>
 800ead8:	4601      	mov	r1, r0
 800eada:	4650      	mov	r0, sl
 800eadc:	f000 fc4e 	bl	800f37c <__mcmp>
 800eae0:	4602      	mov	r2, r0
 800eae2:	4629      	mov	r1, r5
 800eae4:	4620      	mov	r0, r4
 800eae6:	9209      	str	r2, [sp, #36]	; 0x24
 800eae8:	f000 fa0c 	bl	800ef04 <_Bfree>
 800eaec:	9b07      	ldr	r3, [sp, #28]
 800eaee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eaf0:	9d04      	ldr	r5, [sp, #16]
 800eaf2:	ea43 0102 	orr.w	r1, r3, r2
 800eaf6:	9b06      	ldr	r3, [sp, #24]
 800eaf8:	4319      	orrs	r1, r3
 800eafa:	d110      	bne.n	800eb1e <_dtoa_r+0xa7e>
 800eafc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800eb00:	d029      	beq.n	800eb56 <_dtoa_r+0xab6>
 800eb02:	9b05      	ldr	r3, [sp, #20]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	dd02      	ble.n	800eb0e <_dtoa_r+0xa6e>
 800eb08:	9b02      	ldr	r3, [sp, #8]
 800eb0a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800eb0e:	9b01      	ldr	r3, [sp, #4]
 800eb10:	f883 9000 	strb.w	r9, [r3]
 800eb14:	e774      	b.n	800ea00 <_dtoa_r+0x960>
 800eb16:	4638      	mov	r0, r7
 800eb18:	e7ba      	b.n	800ea90 <_dtoa_r+0x9f0>
 800eb1a:	2201      	movs	r2, #1
 800eb1c:	e7e1      	b.n	800eae2 <_dtoa_r+0xa42>
 800eb1e:	9b05      	ldr	r3, [sp, #20]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	db04      	blt.n	800eb2e <_dtoa_r+0xa8e>
 800eb24:	9907      	ldr	r1, [sp, #28]
 800eb26:	430b      	orrs	r3, r1
 800eb28:	9906      	ldr	r1, [sp, #24]
 800eb2a:	430b      	orrs	r3, r1
 800eb2c:	d120      	bne.n	800eb70 <_dtoa_r+0xad0>
 800eb2e:	2a00      	cmp	r2, #0
 800eb30:	dded      	ble.n	800eb0e <_dtoa_r+0xa6e>
 800eb32:	4651      	mov	r1, sl
 800eb34:	2201      	movs	r2, #1
 800eb36:	4620      	mov	r0, r4
 800eb38:	f000 fbb4 	bl	800f2a4 <__lshift>
 800eb3c:	4631      	mov	r1, r6
 800eb3e:	4682      	mov	sl, r0
 800eb40:	f000 fc1c 	bl	800f37c <__mcmp>
 800eb44:	2800      	cmp	r0, #0
 800eb46:	dc03      	bgt.n	800eb50 <_dtoa_r+0xab0>
 800eb48:	d1e1      	bne.n	800eb0e <_dtoa_r+0xa6e>
 800eb4a:	f019 0f01 	tst.w	r9, #1
 800eb4e:	d0de      	beq.n	800eb0e <_dtoa_r+0xa6e>
 800eb50:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800eb54:	d1d8      	bne.n	800eb08 <_dtoa_r+0xa68>
 800eb56:	9a01      	ldr	r2, [sp, #4]
 800eb58:	2339      	movs	r3, #57	; 0x39
 800eb5a:	7013      	strb	r3, [r2, #0]
 800eb5c:	462b      	mov	r3, r5
 800eb5e:	461d      	mov	r5, r3
 800eb60:	3b01      	subs	r3, #1
 800eb62:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800eb66:	2a39      	cmp	r2, #57	; 0x39
 800eb68:	d06c      	beq.n	800ec44 <_dtoa_r+0xba4>
 800eb6a:	3201      	adds	r2, #1
 800eb6c:	701a      	strb	r2, [r3, #0]
 800eb6e:	e747      	b.n	800ea00 <_dtoa_r+0x960>
 800eb70:	2a00      	cmp	r2, #0
 800eb72:	dd07      	ble.n	800eb84 <_dtoa_r+0xae4>
 800eb74:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800eb78:	d0ed      	beq.n	800eb56 <_dtoa_r+0xab6>
 800eb7a:	9a01      	ldr	r2, [sp, #4]
 800eb7c:	f109 0301 	add.w	r3, r9, #1
 800eb80:	7013      	strb	r3, [r2, #0]
 800eb82:	e73d      	b.n	800ea00 <_dtoa_r+0x960>
 800eb84:	9b04      	ldr	r3, [sp, #16]
 800eb86:	9a08      	ldr	r2, [sp, #32]
 800eb88:	f803 9c01 	strb.w	r9, [r3, #-1]
 800eb8c:	4293      	cmp	r3, r2
 800eb8e:	d043      	beq.n	800ec18 <_dtoa_r+0xb78>
 800eb90:	4651      	mov	r1, sl
 800eb92:	2300      	movs	r3, #0
 800eb94:	220a      	movs	r2, #10
 800eb96:	4620      	mov	r0, r4
 800eb98:	f000 f9d6 	bl	800ef48 <__multadd>
 800eb9c:	45b8      	cmp	r8, r7
 800eb9e:	4682      	mov	sl, r0
 800eba0:	f04f 0300 	mov.w	r3, #0
 800eba4:	f04f 020a 	mov.w	r2, #10
 800eba8:	4641      	mov	r1, r8
 800ebaa:	4620      	mov	r0, r4
 800ebac:	d107      	bne.n	800ebbe <_dtoa_r+0xb1e>
 800ebae:	f000 f9cb 	bl	800ef48 <__multadd>
 800ebb2:	4680      	mov	r8, r0
 800ebb4:	4607      	mov	r7, r0
 800ebb6:	9b04      	ldr	r3, [sp, #16]
 800ebb8:	3301      	adds	r3, #1
 800ebba:	9304      	str	r3, [sp, #16]
 800ebbc:	e775      	b.n	800eaaa <_dtoa_r+0xa0a>
 800ebbe:	f000 f9c3 	bl	800ef48 <__multadd>
 800ebc2:	4639      	mov	r1, r7
 800ebc4:	4680      	mov	r8, r0
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	220a      	movs	r2, #10
 800ebca:	4620      	mov	r0, r4
 800ebcc:	f000 f9bc 	bl	800ef48 <__multadd>
 800ebd0:	4607      	mov	r7, r0
 800ebd2:	e7f0      	b.n	800ebb6 <_dtoa_r+0xb16>
 800ebd4:	9b04      	ldr	r3, [sp, #16]
 800ebd6:	9301      	str	r3, [sp, #4]
 800ebd8:	9d00      	ldr	r5, [sp, #0]
 800ebda:	4631      	mov	r1, r6
 800ebdc:	4650      	mov	r0, sl
 800ebde:	f7ff f9d4 	bl	800df8a <quorem>
 800ebe2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ebe6:	9b00      	ldr	r3, [sp, #0]
 800ebe8:	f805 9b01 	strb.w	r9, [r5], #1
 800ebec:	1aea      	subs	r2, r5, r3
 800ebee:	9b01      	ldr	r3, [sp, #4]
 800ebf0:	4293      	cmp	r3, r2
 800ebf2:	dd07      	ble.n	800ec04 <_dtoa_r+0xb64>
 800ebf4:	4651      	mov	r1, sl
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	220a      	movs	r2, #10
 800ebfa:	4620      	mov	r0, r4
 800ebfc:	f000 f9a4 	bl	800ef48 <__multadd>
 800ec00:	4682      	mov	sl, r0
 800ec02:	e7ea      	b.n	800ebda <_dtoa_r+0xb3a>
 800ec04:	9b01      	ldr	r3, [sp, #4]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	bfc8      	it	gt
 800ec0a:	461d      	movgt	r5, r3
 800ec0c:	9b00      	ldr	r3, [sp, #0]
 800ec0e:	bfd8      	it	le
 800ec10:	2501      	movle	r5, #1
 800ec12:	441d      	add	r5, r3
 800ec14:	f04f 0800 	mov.w	r8, #0
 800ec18:	4651      	mov	r1, sl
 800ec1a:	2201      	movs	r2, #1
 800ec1c:	4620      	mov	r0, r4
 800ec1e:	f000 fb41 	bl	800f2a4 <__lshift>
 800ec22:	4631      	mov	r1, r6
 800ec24:	4682      	mov	sl, r0
 800ec26:	f000 fba9 	bl	800f37c <__mcmp>
 800ec2a:	2800      	cmp	r0, #0
 800ec2c:	dc96      	bgt.n	800eb5c <_dtoa_r+0xabc>
 800ec2e:	d102      	bne.n	800ec36 <_dtoa_r+0xb96>
 800ec30:	f019 0f01 	tst.w	r9, #1
 800ec34:	d192      	bne.n	800eb5c <_dtoa_r+0xabc>
 800ec36:	462b      	mov	r3, r5
 800ec38:	461d      	mov	r5, r3
 800ec3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec3e:	2a30      	cmp	r2, #48	; 0x30
 800ec40:	d0fa      	beq.n	800ec38 <_dtoa_r+0xb98>
 800ec42:	e6dd      	b.n	800ea00 <_dtoa_r+0x960>
 800ec44:	9a00      	ldr	r2, [sp, #0]
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d189      	bne.n	800eb5e <_dtoa_r+0xabe>
 800ec4a:	f10b 0b01 	add.w	fp, fp, #1
 800ec4e:	2331      	movs	r3, #49	; 0x31
 800ec50:	e796      	b.n	800eb80 <_dtoa_r+0xae0>
 800ec52:	4b0a      	ldr	r3, [pc, #40]	; (800ec7c <_dtoa_r+0xbdc>)
 800ec54:	f7ff ba99 	b.w	800e18a <_dtoa_r+0xea>
 800ec58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	f47f aa6d 	bne.w	800e13a <_dtoa_r+0x9a>
 800ec60:	4b07      	ldr	r3, [pc, #28]	; (800ec80 <_dtoa_r+0xbe0>)
 800ec62:	f7ff ba92 	b.w	800e18a <_dtoa_r+0xea>
 800ec66:	9b01      	ldr	r3, [sp, #4]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	dcb5      	bgt.n	800ebd8 <_dtoa_r+0xb38>
 800ec6c:	9b07      	ldr	r3, [sp, #28]
 800ec6e:	2b02      	cmp	r3, #2
 800ec70:	f73f aeb1 	bgt.w	800e9d6 <_dtoa_r+0x936>
 800ec74:	e7b0      	b.n	800ebd8 <_dtoa_r+0xb38>
 800ec76:	bf00      	nop
 800ec78:	08010f74 	.word	0x08010f74
 800ec7c:	08010ed4 	.word	0x08010ed4
 800ec80:	08010ef8 	.word	0x08010ef8

0800ec84 <_free_r>:
 800ec84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ec86:	2900      	cmp	r1, #0
 800ec88:	d044      	beq.n	800ed14 <_free_r+0x90>
 800ec8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec8e:	9001      	str	r0, [sp, #4]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	f1a1 0404 	sub.w	r4, r1, #4
 800ec96:	bfb8      	it	lt
 800ec98:	18e4      	addlt	r4, r4, r3
 800ec9a:	f000 f8e7 	bl	800ee6c <__malloc_lock>
 800ec9e:	4a1e      	ldr	r2, [pc, #120]	; (800ed18 <_free_r+0x94>)
 800eca0:	9801      	ldr	r0, [sp, #4]
 800eca2:	6813      	ldr	r3, [r2, #0]
 800eca4:	b933      	cbnz	r3, 800ecb4 <_free_r+0x30>
 800eca6:	6063      	str	r3, [r4, #4]
 800eca8:	6014      	str	r4, [r2, #0]
 800ecaa:	b003      	add	sp, #12
 800ecac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ecb0:	f000 b8e2 	b.w	800ee78 <__malloc_unlock>
 800ecb4:	42a3      	cmp	r3, r4
 800ecb6:	d908      	bls.n	800ecca <_free_r+0x46>
 800ecb8:	6825      	ldr	r5, [r4, #0]
 800ecba:	1961      	adds	r1, r4, r5
 800ecbc:	428b      	cmp	r3, r1
 800ecbe:	bf01      	itttt	eq
 800ecc0:	6819      	ldreq	r1, [r3, #0]
 800ecc2:	685b      	ldreq	r3, [r3, #4]
 800ecc4:	1949      	addeq	r1, r1, r5
 800ecc6:	6021      	streq	r1, [r4, #0]
 800ecc8:	e7ed      	b.n	800eca6 <_free_r+0x22>
 800ecca:	461a      	mov	r2, r3
 800eccc:	685b      	ldr	r3, [r3, #4]
 800ecce:	b10b      	cbz	r3, 800ecd4 <_free_r+0x50>
 800ecd0:	42a3      	cmp	r3, r4
 800ecd2:	d9fa      	bls.n	800ecca <_free_r+0x46>
 800ecd4:	6811      	ldr	r1, [r2, #0]
 800ecd6:	1855      	adds	r5, r2, r1
 800ecd8:	42a5      	cmp	r5, r4
 800ecda:	d10b      	bne.n	800ecf4 <_free_r+0x70>
 800ecdc:	6824      	ldr	r4, [r4, #0]
 800ecde:	4421      	add	r1, r4
 800ece0:	1854      	adds	r4, r2, r1
 800ece2:	42a3      	cmp	r3, r4
 800ece4:	6011      	str	r1, [r2, #0]
 800ece6:	d1e0      	bne.n	800ecaa <_free_r+0x26>
 800ece8:	681c      	ldr	r4, [r3, #0]
 800ecea:	685b      	ldr	r3, [r3, #4]
 800ecec:	6053      	str	r3, [r2, #4]
 800ecee:	440c      	add	r4, r1
 800ecf0:	6014      	str	r4, [r2, #0]
 800ecf2:	e7da      	b.n	800ecaa <_free_r+0x26>
 800ecf4:	d902      	bls.n	800ecfc <_free_r+0x78>
 800ecf6:	230c      	movs	r3, #12
 800ecf8:	6003      	str	r3, [r0, #0]
 800ecfa:	e7d6      	b.n	800ecaa <_free_r+0x26>
 800ecfc:	6825      	ldr	r5, [r4, #0]
 800ecfe:	1961      	adds	r1, r4, r5
 800ed00:	428b      	cmp	r3, r1
 800ed02:	bf04      	itt	eq
 800ed04:	6819      	ldreq	r1, [r3, #0]
 800ed06:	685b      	ldreq	r3, [r3, #4]
 800ed08:	6063      	str	r3, [r4, #4]
 800ed0a:	bf04      	itt	eq
 800ed0c:	1949      	addeq	r1, r1, r5
 800ed0e:	6021      	streq	r1, [r4, #0]
 800ed10:	6054      	str	r4, [r2, #4]
 800ed12:	e7ca      	b.n	800ecaa <_free_r+0x26>
 800ed14:	b003      	add	sp, #12
 800ed16:	bd30      	pop	{r4, r5, pc}
 800ed18:	200019b4 	.word	0x200019b4

0800ed1c <malloc>:
 800ed1c:	4b02      	ldr	r3, [pc, #8]	; (800ed28 <malloc+0xc>)
 800ed1e:	4601      	mov	r1, r0
 800ed20:	6818      	ldr	r0, [r3, #0]
 800ed22:	f000 b823 	b.w	800ed6c <_malloc_r>
 800ed26:	bf00      	nop
 800ed28:	2000008c 	.word	0x2000008c

0800ed2c <sbrk_aligned>:
 800ed2c:	b570      	push	{r4, r5, r6, lr}
 800ed2e:	4e0e      	ldr	r6, [pc, #56]	; (800ed68 <sbrk_aligned+0x3c>)
 800ed30:	460c      	mov	r4, r1
 800ed32:	6831      	ldr	r1, [r6, #0]
 800ed34:	4605      	mov	r5, r0
 800ed36:	b911      	cbnz	r1, 800ed3e <sbrk_aligned+0x12>
 800ed38:	f000 feca 	bl	800fad0 <_sbrk_r>
 800ed3c:	6030      	str	r0, [r6, #0]
 800ed3e:	4621      	mov	r1, r4
 800ed40:	4628      	mov	r0, r5
 800ed42:	f000 fec5 	bl	800fad0 <_sbrk_r>
 800ed46:	1c43      	adds	r3, r0, #1
 800ed48:	d00a      	beq.n	800ed60 <sbrk_aligned+0x34>
 800ed4a:	1cc4      	adds	r4, r0, #3
 800ed4c:	f024 0403 	bic.w	r4, r4, #3
 800ed50:	42a0      	cmp	r0, r4
 800ed52:	d007      	beq.n	800ed64 <sbrk_aligned+0x38>
 800ed54:	1a21      	subs	r1, r4, r0
 800ed56:	4628      	mov	r0, r5
 800ed58:	f000 feba 	bl	800fad0 <_sbrk_r>
 800ed5c:	3001      	adds	r0, #1
 800ed5e:	d101      	bne.n	800ed64 <sbrk_aligned+0x38>
 800ed60:	f04f 34ff 	mov.w	r4, #4294967295
 800ed64:	4620      	mov	r0, r4
 800ed66:	bd70      	pop	{r4, r5, r6, pc}
 800ed68:	200019b8 	.word	0x200019b8

0800ed6c <_malloc_r>:
 800ed6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed70:	1ccd      	adds	r5, r1, #3
 800ed72:	f025 0503 	bic.w	r5, r5, #3
 800ed76:	3508      	adds	r5, #8
 800ed78:	2d0c      	cmp	r5, #12
 800ed7a:	bf38      	it	cc
 800ed7c:	250c      	movcc	r5, #12
 800ed7e:	2d00      	cmp	r5, #0
 800ed80:	4607      	mov	r7, r0
 800ed82:	db01      	blt.n	800ed88 <_malloc_r+0x1c>
 800ed84:	42a9      	cmp	r1, r5
 800ed86:	d905      	bls.n	800ed94 <_malloc_r+0x28>
 800ed88:	230c      	movs	r3, #12
 800ed8a:	603b      	str	r3, [r7, #0]
 800ed8c:	2600      	movs	r6, #0
 800ed8e:	4630      	mov	r0, r6
 800ed90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ee68 <_malloc_r+0xfc>
 800ed98:	f000 f868 	bl	800ee6c <__malloc_lock>
 800ed9c:	f8d8 3000 	ldr.w	r3, [r8]
 800eda0:	461c      	mov	r4, r3
 800eda2:	bb5c      	cbnz	r4, 800edfc <_malloc_r+0x90>
 800eda4:	4629      	mov	r1, r5
 800eda6:	4638      	mov	r0, r7
 800eda8:	f7ff ffc0 	bl	800ed2c <sbrk_aligned>
 800edac:	1c43      	adds	r3, r0, #1
 800edae:	4604      	mov	r4, r0
 800edb0:	d155      	bne.n	800ee5e <_malloc_r+0xf2>
 800edb2:	f8d8 4000 	ldr.w	r4, [r8]
 800edb6:	4626      	mov	r6, r4
 800edb8:	2e00      	cmp	r6, #0
 800edba:	d145      	bne.n	800ee48 <_malloc_r+0xdc>
 800edbc:	2c00      	cmp	r4, #0
 800edbe:	d048      	beq.n	800ee52 <_malloc_r+0xe6>
 800edc0:	6823      	ldr	r3, [r4, #0]
 800edc2:	4631      	mov	r1, r6
 800edc4:	4638      	mov	r0, r7
 800edc6:	eb04 0903 	add.w	r9, r4, r3
 800edca:	f000 fe81 	bl	800fad0 <_sbrk_r>
 800edce:	4581      	cmp	r9, r0
 800edd0:	d13f      	bne.n	800ee52 <_malloc_r+0xe6>
 800edd2:	6821      	ldr	r1, [r4, #0]
 800edd4:	1a6d      	subs	r5, r5, r1
 800edd6:	4629      	mov	r1, r5
 800edd8:	4638      	mov	r0, r7
 800edda:	f7ff ffa7 	bl	800ed2c <sbrk_aligned>
 800edde:	3001      	adds	r0, #1
 800ede0:	d037      	beq.n	800ee52 <_malloc_r+0xe6>
 800ede2:	6823      	ldr	r3, [r4, #0]
 800ede4:	442b      	add	r3, r5
 800ede6:	6023      	str	r3, [r4, #0]
 800ede8:	f8d8 3000 	ldr.w	r3, [r8]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d038      	beq.n	800ee62 <_malloc_r+0xf6>
 800edf0:	685a      	ldr	r2, [r3, #4]
 800edf2:	42a2      	cmp	r2, r4
 800edf4:	d12b      	bne.n	800ee4e <_malloc_r+0xe2>
 800edf6:	2200      	movs	r2, #0
 800edf8:	605a      	str	r2, [r3, #4]
 800edfa:	e00f      	b.n	800ee1c <_malloc_r+0xb0>
 800edfc:	6822      	ldr	r2, [r4, #0]
 800edfe:	1b52      	subs	r2, r2, r5
 800ee00:	d41f      	bmi.n	800ee42 <_malloc_r+0xd6>
 800ee02:	2a0b      	cmp	r2, #11
 800ee04:	d917      	bls.n	800ee36 <_malloc_r+0xca>
 800ee06:	1961      	adds	r1, r4, r5
 800ee08:	42a3      	cmp	r3, r4
 800ee0a:	6025      	str	r5, [r4, #0]
 800ee0c:	bf18      	it	ne
 800ee0e:	6059      	strne	r1, [r3, #4]
 800ee10:	6863      	ldr	r3, [r4, #4]
 800ee12:	bf08      	it	eq
 800ee14:	f8c8 1000 	streq.w	r1, [r8]
 800ee18:	5162      	str	r2, [r4, r5]
 800ee1a:	604b      	str	r3, [r1, #4]
 800ee1c:	4638      	mov	r0, r7
 800ee1e:	f104 060b 	add.w	r6, r4, #11
 800ee22:	f000 f829 	bl	800ee78 <__malloc_unlock>
 800ee26:	f026 0607 	bic.w	r6, r6, #7
 800ee2a:	1d23      	adds	r3, r4, #4
 800ee2c:	1af2      	subs	r2, r6, r3
 800ee2e:	d0ae      	beq.n	800ed8e <_malloc_r+0x22>
 800ee30:	1b9b      	subs	r3, r3, r6
 800ee32:	50a3      	str	r3, [r4, r2]
 800ee34:	e7ab      	b.n	800ed8e <_malloc_r+0x22>
 800ee36:	42a3      	cmp	r3, r4
 800ee38:	6862      	ldr	r2, [r4, #4]
 800ee3a:	d1dd      	bne.n	800edf8 <_malloc_r+0x8c>
 800ee3c:	f8c8 2000 	str.w	r2, [r8]
 800ee40:	e7ec      	b.n	800ee1c <_malloc_r+0xb0>
 800ee42:	4623      	mov	r3, r4
 800ee44:	6864      	ldr	r4, [r4, #4]
 800ee46:	e7ac      	b.n	800eda2 <_malloc_r+0x36>
 800ee48:	4634      	mov	r4, r6
 800ee4a:	6876      	ldr	r6, [r6, #4]
 800ee4c:	e7b4      	b.n	800edb8 <_malloc_r+0x4c>
 800ee4e:	4613      	mov	r3, r2
 800ee50:	e7cc      	b.n	800edec <_malloc_r+0x80>
 800ee52:	230c      	movs	r3, #12
 800ee54:	603b      	str	r3, [r7, #0]
 800ee56:	4638      	mov	r0, r7
 800ee58:	f000 f80e 	bl	800ee78 <__malloc_unlock>
 800ee5c:	e797      	b.n	800ed8e <_malloc_r+0x22>
 800ee5e:	6025      	str	r5, [r4, #0]
 800ee60:	e7dc      	b.n	800ee1c <_malloc_r+0xb0>
 800ee62:	605b      	str	r3, [r3, #4]
 800ee64:	deff      	udf	#255	; 0xff
 800ee66:	bf00      	nop
 800ee68:	200019b4 	.word	0x200019b4

0800ee6c <__malloc_lock>:
 800ee6c:	4801      	ldr	r0, [pc, #4]	; (800ee74 <__malloc_lock+0x8>)
 800ee6e:	f7ff b87c 	b.w	800df6a <__retarget_lock_acquire_recursive>
 800ee72:	bf00      	nop
 800ee74:	200019b0 	.word	0x200019b0

0800ee78 <__malloc_unlock>:
 800ee78:	4801      	ldr	r0, [pc, #4]	; (800ee80 <__malloc_unlock+0x8>)
 800ee7a:	f7ff b877 	b.w	800df6c <__retarget_lock_release_recursive>
 800ee7e:	bf00      	nop
 800ee80:	200019b0 	.word	0x200019b0

0800ee84 <_Balloc>:
 800ee84:	b570      	push	{r4, r5, r6, lr}
 800ee86:	69c6      	ldr	r6, [r0, #28]
 800ee88:	4604      	mov	r4, r0
 800ee8a:	460d      	mov	r5, r1
 800ee8c:	b976      	cbnz	r6, 800eeac <_Balloc+0x28>
 800ee8e:	2010      	movs	r0, #16
 800ee90:	f7ff ff44 	bl	800ed1c <malloc>
 800ee94:	4602      	mov	r2, r0
 800ee96:	61e0      	str	r0, [r4, #28]
 800ee98:	b920      	cbnz	r0, 800eea4 <_Balloc+0x20>
 800ee9a:	4b18      	ldr	r3, [pc, #96]	; (800eefc <_Balloc+0x78>)
 800ee9c:	4818      	ldr	r0, [pc, #96]	; (800ef00 <_Balloc+0x7c>)
 800ee9e:	216b      	movs	r1, #107	; 0x6b
 800eea0:	f000 fe26 	bl	800faf0 <__assert_func>
 800eea4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eea8:	6006      	str	r6, [r0, #0]
 800eeaa:	60c6      	str	r6, [r0, #12]
 800eeac:	69e6      	ldr	r6, [r4, #28]
 800eeae:	68f3      	ldr	r3, [r6, #12]
 800eeb0:	b183      	cbz	r3, 800eed4 <_Balloc+0x50>
 800eeb2:	69e3      	ldr	r3, [r4, #28]
 800eeb4:	68db      	ldr	r3, [r3, #12]
 800eeb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eeba:	b9b8      	cbnz	r0, 800eeec <_Balloc+0x68>
 800eebc:	2101      	movs	r1, #1
 800eebe:	fa01 f605 	lsl.w	r6, r1, r5
 800eec2:	1d72      	adds	r2, r6, #5
 800eec4:	0092      	lsls	r2, r2, #2
 800eec6:	4620      	mov	r0, r4
 800eec8:	f000 fe30 	bl	800fb2c <_calloc_r>
 800eecc:	b160      	cbz	r0, 800eee8 <_Balloc+0x64>
 800eece:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eed2:	e00e      	b.n	800eef2 <_Balloc+0x6e>
 800eed4:	2221      	movs	r2, #33	; 0x21
 800eed6:	2104      	movs	r1, #4
 800eed8:	4620      	mov	r0, r4
 800eeda:	f000 fe27 	bl	800fb2c <_calloc_r>
 800eede:	69e3      	ldr	r3, [r4, #28]
 800eee0:	60f0      	str	r0, [r6, #12]
 800eee2:	68db      	ldr	r3, [r3, #12]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d1e4      	bne.n	800eeb2 <_Balloc+0x2e>
 800eee8:	2000      	movs	r0, #0
 800eeea:	bd70      	pop	{r4, r5, r6, pc}
 800eeec:	6802      	ldr	r2, [r0, #0]
 800eeee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eef2:	2300      	movs	r3, #0
 800eef4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eef8:	e7f7      	b.n	800eeea <_Balloc+0x66>
 800eefa:	bf00      	nop
 800eefc:	08010f05 	.word	0x08010f05
 800ef00:	08010f85 	.word	0x08010f85

0800ef04 <_Bfree>:
 800ef04:	b570      	push	{r4, r5, r6, lr}
 800ef06:	69c6      	ldr	r6, [r0, #28]
 800ef08:	4605      	mov	r5, r0
 800ef0a:	460c      	mov	r4, r1
 800ef0c:	b976      	cbnz	r6, 800ef2c <_Bfree+0x28>
 800ef0e:	2010      	movs	r0, #16
 800ef10:	f7ff ff04 	bl	800ed1c <malloc>
 800ef14:	4602      	mov	r2, r0
 800ef16:	61e8      	str	r0, [r5, #28]
 800ef18:	b920      	cbnz	r0, 800ef24 <_Bfree+0x20>
 800ef1a:	4b09      	ldr	r3, [pc, #36]	; (800ef40 <_Bfree+0x3c>)
 800ef1c:	4809      	ldr	r0, [pc, #36]	; (800ef44 <_Bfree+0x40>)
 800ef1e:	218f      	movs	r1, #143	; 0x8f
 800ef20:	f000 fde6 	bl	800faf0 <__assert_func>
 800ef24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef28:	6006      	str	r6, [r0, #0]
 800ef2a:	60c6      	str	r6, [r0, #12]
 800ef2c:	b13c      	cbz	r4, 800ef3e <_Bfree+0x3a>
 800ef2e:	69eb      	ldr	r3, [r5, #28]
 800ef30:	6862      	ldr	r2, [r4, #4]
 800ef32:	68db      	ldr	r3, [r3, #12]
 800ef34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ef38:	6021      	str	r1, [r4, #0]
 800ef3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ef3e:	bd70      	pop	{r4, r5, r6, pc}
 800ef40:	08010f05 	.word	0x08010f05
 800ef44:	08010f85 	.word	0x08010f85

0800ef48 <__multadd>:
 800ef48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef4c:	690d      	ldr	r5, [r1, #16]
 800ef4e:	4607      	mov	r7, r0
 800ef50:	460c      	mov	r4, r1
 800ef52:	461e      	mov	r6, r3
 800ef54:	f101 0c14 	add.w	ip, r1, #20
 800ef58:	2000      	movs	r0, #0
 800ef5a:	f8dc 3000 	ldr.w	r3, [ip]
 800ef5e:	b299      	uxth	r1, r3
 800ef60:	fb02 6101 	mla	r1, r2, r1, r6
 800ef64:	0c1e      	lsrs	r6, r3, #16
 800ef66:	0c0b      	lsrs	r3, r1, #16
 800ef68:	fb02 3306 	mla	r3, r2, r6, r3
 800ef6c:	b289      	uxth	r1, r1
 800ef6e:	3001      	adds	r0, #1
 800ef70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ef74:	4285      	cmp	r5, r0
 800ef76:	f84c 1b04 	str.w	r1, [ip], #4
 800ef7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ef7e:	dcec      	bgt.n	800ef5a <__multadd+0x12>
 800ef80:	b30e      	cbz	r6, 800efc6 <__multadd+0x7e>
 800ef82:	68a3      	ldr	r3, [r4, #8]
 800ef84:	42ab      	cmp	r3, r5
 800ef86:	dc19      	bgt.n	800efbc <__multadd+0x74>
 800ef88:	6861      	ldr	r1, [r4, #4]
 800ef8a:	4638      	mov	r0, r7
 800ef8c:	3101      	adds	r1, #1
 800ef8e:	f7ff ff79 	bl	800ee84 <_Balloc>
 800ef92:	4680      	mov	r8, r0
 800ef94:	b928      	cbnz	r0, 800efa2 <__multadd+0x5a>
 800ef96:	4602      	mov	r2, r0
 800ef98:	4b0c      	ldr	r3, [pc, #48]	; (800efcc <__multadd+0x84>)
 800ef9a:	480d      	ldr	r0, [pc, #52]	; (800efd0 <__multadd+0x88>)
 800ef9c:	21ba      	movs	r1, #186	; 0xba
 800ef9e:	f000 fda7 	bl	800faf0 <__assert_func>
 800efa2:	6922      	ldr	r2, [r4, #16]
 800efa4:	3202      	adds	r2, #2
 800efa6:	f104 010c 	add.w	r1, r4, #12
 800efaa:	0092      	lsls	r2, r2, #2
 800efac:	300c      	adds	r0, #12
 800efae:	f7fe ffde 	bl	800df6e <memcpy>
 800efb2:	4621      	mov	r1, r4
 800efb4:	4638      	mov	r0, r7
 800efb6:	f7ff ffa5 	bl	800ef04 <_Bfree>
 800efba:	4644      	mov	r4, r8
 800efbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800efc0:	3501      	adds	r5, #1
 800efc2:	615e      	str	r6, [r3, #20]
 800efc4:	6125      	str	r5, [r4, #16]
 800efc6:	4620      	mov	r0, r4
 800efc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efcc:	08010f74 	.word	0x08010f74
 800efd0:	08010f85 	.word	0x08010f85

0800efd4 <__hi0bits>:
 800efd4:	0c03      	lsrs	r3, r0, #16
 800efd6:	041b      	lsls	r3, r3, #16
 800efd8:	b9d3      	cbnz	r3, 800f010 <__hi0bits+0x3c>
 800efda:	0400      	lsls	r0, r0, #16
 800efdc:	2310      	movs	r3, #16
 800efde:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800efe2:	bf04      	itt	eq
 800efe4:	0200      	lsleq	r0, r0, #8
 800efe6:	3308      	addeq	r3, #8
 800efe8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800efec:	bf04      	itt	eq
 800efee:	0100      	lsleq	r0, r0, #4
 800eff0:	3304      	addeq	r3, #4
 800eff2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800eff6:	bf04      	itt	eq
 800eff8:	0080      	lsleq	r0, r0, #2
 800effa:	3302      	addeq	r3, #2
 800effc:	2800      	cmp	r0, #0
 800effe:	db05      	blt.n	800f00c <__hi0bits+0x38>
 800f000:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f004:	f103 0301 	add.w	r3, r3, #1
 800f008:	bf08      	it	eq
 800f00a:	2320      	moveq	r3, #32
 800f00c:	4618      	mov	r0, r3
 800f00e:	4770      	bx	lr
 800f010:	2300      	movs	r3, #0
 800f012:	e7e4      	b.n	800efde <__hi0bits+0xa>

0800f014 <__lo0bits>:
 800f014:	6803      	ldr	r3, [r0, #0]
 800f016:	f013 0207 	ands.w	r2, r3, #7
 800f01a:	d00c      	beq.n	800f036 <__lo0bits+0x22>
 800f01c:	07d9      	lsls	r1, r3, #31
 800f01e:	d422      	bmi.n	800f066 <__lo0bits+0x52>
 800f020:	079a      	lsls	r2, r3, #30
 800f022:	bf49      	itett	mi
 800f024:	085b      	lsrmi	r3, r3, #1
 800f026:	089b      	lsrpl	r3, r3, #2
 800f028:	6003      	strmi	r3, [r0, #0]
 800f02a:	2201      	movmi	r2, #1
 800f02c:	bf5c      	itt	pl
 800f02e:	6003      	strpl	r3, [r0, #0]
 800f030:	2202      	movpl	r2, #2
 800f032:	4610      	mov	r0, r2
 800f034:	4770      	bx	lr
 800f036:	b299      	uxth	r1, r3
 800f038:	b909      	cbnz	r1, 800f03e <__lo0bits+0x2a>
 800f03a:	0c1b      	lsrs	r3, r3, #16
 800f03c:	2210      	movs	r2, #16
 800f03e:	b2d9      	uxtb	r1, r3
 800f040:	b909      	cbnz	r1, 800f046 <__lo0bits+0x32>
 800f042:	3208      	adds	r2, #8
 800f044:	0a1b      	lsrs	r3, r3, #8
 800f046:	0719      	lsls	r1, r3, #28
 800f048:	bf04      	itt	eq
 800f04a:	091b      	lsreq	r3, r3, #4
 800f04c:	3204      	addeq	r2, #4
 800f04e:	0799      	lsls	r1, r3, #30
 800f050:	bf04      	itt	eq
 800f052:	089b      	lsreq	r3, r3, #2
 800f054:	3202      	addeq	r2, #2
 800f056:	07d9      	lsls	r1, r3, #31
 800f058:	d403      	bmi.n	800f062 <__lo0bits+0x4e>
 800f05a:	085b      	lsrs	r3, r3, #1
 800f05c:	f102 0201 	add.w	r2, r2, #1
 800f060:	d003      	beq.n	800f06a <__lo0bits+0x56>
 800f062:	6003      	str	r3, [r0, #0]
 800f064:	e7e5      	b.n	800f032 <__lo0bits+0x1e>
 800f066:	2200      	movs	r2, #0
 800f068:	e7e3      	b.n	800f032 <__lo0bits+0x1e>
 800f06a:	2220      	movs	r2, #32
 800f06c:	e7e1      	b.n	800f032 <__lo0bits+0x1e>
	...

0800f070 <__i2b>:
 800f070:	b510      	push	{r4, lr}
 800f072:	460c      	mov	r4, r1
 800f074:	2101      	movs	r1, #1
 800f076:	f7ff ff05 	bl	800ee84 <_Balloc>
 800f07a:	4602      	mov	r2, r0
 800f07c:	b928      	cbnz	r0, 800f08a <__i2b+0x1a>
 800f07e:	4b05      	ldr	r3, [pc, #20]	; (800f094 <__i2b+0x24>)
 800f080:	4805      	ldr	r0, [pc, #20]	; (800f098 <__i2b+0x28>)
 800f082:	f240 1145 	movw	r1, #325	; 0x145
 800f086:	f000 fd33 	bl	800faf0 <__assert_func>
 800f08a:	2301      	movs	r3, #1
 800f08c:	6144      	str	r4, [r0, #20]
 800f08e:	6103      	str	r3, [r0, #16]
 800f090:	bd10      	pop	{r4, pc}
 800f092:	bf00      	nop
 800f094:	08010f74 	.word	0x08010f74
 800f098:	08010f85 	.word	0x08010f85

0800f09c <__multiply>:
 800f09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0a0:	4691      	mov	r9, r2
 800f0a2:	690a      	ldr	r2, [r1, #16]
 800f0a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	bfb8      	it	lt
 800f0ac:	460b      	movlt	r3, r1
 800f0ae:	460c      	mov	r4, r1
 800f0b0:	bfbc      	itt	lt
 800f0b2:	464c      	movlt	r4, r9
 800f0b4:	4699      	movlt	r9, r3
 800f0b6:	6927      	ldr	r7, [r4, #16]
 800f0b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f0bc:	68a3      	ldr	r3, [r4, #8]
 800f0be:	6861      	ldr	r1, [r4, #4]
 800f0c0:	eb07 060a 	add.w	r6, r7, sl
 800f0c4:	42b3      	cmp	r3, r6
 800f0c6:	b085      	sub	sp, #20
 800f0c8:	bfb8      	it	lt
 800f0ca:	3101      	addlt	r1, #1
 800f0cc:	f7ff feda 	bl	800ee84 <_Balloc>
 800f0d0:	b930      	cbnz	r0, 800f0e0 <__multiply+0x44>
 800f0d2:	4602      	mov	r2, r0
 800f0d4:	4b44      	ldr	r3, [pc, #272]	; (800f1e8 <__multiply+0x14c>)
 800f0d6:	4845      	ldr	r0, [pc, #276]	; (800f1ec <__multiply+0x150>)
 800f0d8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f0dc:	f000 fd08 	bl	800faf0 <__assert_func>
 800f0e0:	f100 0514 	add.w	r5, r0, #20
 800f0e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f0e8:	462b      	mov	r3, r5
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	4543      	cmp	r3, r8
 800f0ee:	d321      	bcc.n	800f134 <__multiply+0x98>
 800f0f0:	f104 0314 	add.w	r3, r4, #20
 800f0f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f0f8:	f109 0314 	add.w	r3, r9, #20
 800f0fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f100:	9202      	str	r2, [sp, #8]
 800f102:	1b3a      	subs	r2, r7, r4
 800f104:	3a15      	subs	r2, #21
 800f106:	f022 0203 	bic.w	r2, r2, #3
 800f10a:	3204      	adds	r2, #4
 800f10c:	f104 0115 	add.w	r1, r4, #21
 800f110:	428f      	cmp	r7, r1
 800f112:	bf38      	it	cc
 800f114:	2204      	movcc	r2, #4
 800f116:	9201      	str	r2, [sp, #4]
 800f118:	9a02      	ldr	r2, [sp, #8]
 800f11a:	9303      	str	r3, [sp, #12]
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d80c      	bhi.n	800f13a <__multiply+0x9e>
 800f120:	2e00      	cmp	r6, #0
 800f122:	dd03      	ble.n	800f12c <__multiply+0x90>
 800f124:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d05b      	beq.n	800f1e4 <__multiply+0x148>
 800f12c:	6106      	str	r6, [r0, #16]
 800f12e:	b005      	add	sp, #20
 800f130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f134:	f843 2b04 	str.w	r2, [r3], #4
 800f138:	e7d8      	b.n	800f0ec <__multiply+0x50>
 800f13a:	f8b3 a000 	ldrh.w	sl, [r3]
 800f13e:	f1ba 0f00 	cmp.w	sl, #0
 800f142:	d024      	beq.n	800f18e <__multiply+0xf2>
 800f144:	f104 0e14 	add.w	lr, r4, #20
 800f148:	46a9      	mov	r9, r5
 800f14a:	f04f 0c00 	mov.w	ip, #0
 800f14e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f152:	f8d9 1000 	ldr.w	r1, [r9]
 800f156:	fa1f fb82 	uxth.w	fp, r2
 800f15a:	b289      	uxth	r1, r1
 800f15c:	fb0a 110b 	mla	r1, sl, fp, r1
 800f160:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f164:	f8d9 2000 	ldr.w	r2, [r9]
 800f168:	4461      	add	r1, ip
 800f16a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f16e:	fb0a c20b 	mla	r2, sl, fp, ip
 800f172:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f176:	b289      	uxth	r1, r1
 800f178:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f17c:	4577      	cmp	r7, lr
 800f17e:	f849 1b04 	str.w	r1, [r9], #4
 800f182:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f186:	d8e2      	bhi.n	800f14e <__multiply+0xb2>
 800f188:	9a01      	ldr	r2, [sp, #4]
 800f18a:	f845 c002 	str.w	ip, [r5, r2]
 800f18e:	9a03      	ldr	r2, [sp, #12]
 800f190:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f194:	3304      	adds	r3, #4
 800f196:	f1b9 0f00 	cmp.w	r9, #0
 800f19a:	d021      	beq.n	800f1e0 <__multiply+0x144>
 800f19c:	6829      	ldr	r1, [r5, #0]
 800f19e:	f104 0c14 	add.w	ip, r4, #20
 800f1a2:	46ae      	mov	lr, r5
 800f1a4:	f04f 0a00 	mov.w	sl, #0
 800f1a8:	f8bc b000 	ldrh.w	fp, [ip]
 800f1ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f1b0:	fb09 220b 	mla	r2, r9, fp, r2
 800f1b4:	4452      	add	r2, sl
 800f1b6:	b289      	uxth	r1, r1
 800f1b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f1bc:	f84e 1b04 	str.w	r1, [lr], #4
 800f1c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f1c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f1c8:	f8be 1000 	ldrh.w	r1, [lr]
 800f1cc:	fb09 110a 	mla	r1, r9, sl, r1
 800f1d0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f1d4:	4567      	cmp	r7, ip
 800f1d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f1da:	d8e5      	bhi.n	800f1a8 <__multiply+0x10c>
 800f1dc:	9a01      	ldr	r2, [sp, #4]
 800f1de:	50a9      	str	r1, [r5, r2]
 800f1e0:	3504      	adds	r5, #4
 800f1e2:	e799      	b.n	800f118 <__multiply+0x7c>
 800f1e4:	3e01      	subs	r6, #1
 800f1e6:	e79b      	b.n	800f120 <__multiply+0x84>
 800f1e8:	08010f74 	.word	0x08010f74
 800f1ec:	08010f85 	.word	0x08010f85

0800f1f0 <__pow5mult>:
 800f1f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1f4:	4615      	mov	r5, r2
 800f1f6:	f012 0203 	ands.w	r2, r2, #3
 800f1fa:	4606      	mov	r6, r0
 800f1fc:	460f      	mov	r7, r1
 800f1fe:	d007      	beq.n	800f210 <__pow5mult+0x20>
 800f200:	4c25      	ldr	r4, [pc, #148]	; (800f298 <__pow5mult+0xa8>)
 800f202:	3a01      	subs	r2, #1
 800f204:	2300      	movs	r3, #0
 800f206:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f20a:	f7ff fe9d 	bl	800ef48 <__multadd>
 800f20e:	4607      	mov	r7, r0
 800f210:	10ad      	asrs	r5, r5, #2
 800f212:	d03d      	beq.n	800f290 <__pow5mult+0xa0>
 800f214:	69f4      	ldr	r4, [r6, #28]
 800f216:	b97c      	cbnz	r4, 800f238 <__pow5mult+0x48>
 800f218:	2010      	movs	r0, #16
 800f21a:	f7ff fd7f 	bl	800ed1c <malloc>
 800f21e:	4602      	mov	r2, r0
 800f220:	61f0      	str	r0, [r6, #28]
 800f222:	b928      	cbnz	r0, 800f230 <__pow5mult+0x40>
 800f224:	4b1d      	ldr	r3, [pc, #116]	; (800f29c <__pow5mult+0xac>)
 800f226:	481e      	ldr	r0, [pc, #120]	; (800f2a0 <__pow5mult+0xb0>)
 800f228:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f22c:	f000 fc60 	bl	800faf0 <__assert_func>
 800f230:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f234:	6004      	str	r4, [r0, #0]
 800f236:	60c4      	str	r4, [r0, #12]
 800f238:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f23c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f240:	b94c      	cbnz	r4, 800f256 <__pow5mult+0x66>
 800f242:	f240 2171 	movw	r1, #625	; 0x271
 800f246:	4630      	mov	r0, r6
 800f248:	f7ff ff12 	bl	800f070 <__i2b>
 800f24c:	2300      	movs	r3, #0
 800f24e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f252:	4604      	mov	r4, r0
 800f254:	6003      	str	r3, [r0, #0]
 800f256:	f04f 0900 	mov.w	r9, #0
 800f25a:	07eb      	lsls	r3, r5, #31
 800f25c:	d50a      	bpl.n	800f274 <__pow5mult+0x84>
 800f25e:	4639      	mov	r1, r7
 800f260:	4622      	mov	r2, r4
 800f262:	4630      	mov	r0, r6
 800f264:	f7ff ff1a 	bl	800f09c <__multiply>
 800f268:	4639      	mov	r1, r7
 800f26a:	4680      	mov	r8, r0
 800f26c:	4630      	mov	r0, r6
 800f26e:	f7ff fe49 	bl	800ef04 <_Bfree>
 800f272:	4647      	mov	r7, r8
 800f274:	106d      	asrs	r5, r5, #1
 800f276:	d00b      	beq.n	800f290 <__pow5mult+0xa0>
 800f278:	6820      	ldr	r0, [r4, #0]
 800f27a:	b938      	cbnz	r0, 800f28c <__pow5mult+0x9c>
 800f27c:	4622      	mov	r2, r4
 800f27e:	4621      	mov	r1, r4
 800f280:	4630      	mov	r0, r6
 800f282:	f7ff ff0b 	bl	800f09c <__multiply>
 800f286:	6020      	str	r0, [r4, #0]
 800f288:	f8c0 9000 	str.w	r9, [r0]
 800f28c:	4604      	mov	r4, r0
 800f28e:	e7e4      	b.n	800f25a <__pow5mult+0x6a>
 800f290:	4638      	mov	r0, r7
 800f292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f296:	bf00      	nop
 800f298:	080110d0 	.word	0x080110d0
 800f29c:	08010f05 	.word	0x08010f05
 800f2a0:	08010f85 	.word	0x08010f85

0800f2a4 <__lshift>:
 800f2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2a8:	460c      	mov	r4, r1
 800f2aa:	6849      	ldr	r1, [r1, #4]
 800f2ac:	6923      	ldr	r3, [r4, #16]
 800f2ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f2b2:	68a3      	ldr	r3, [r4, #8]
 800f2b4:	4607      	mov	r7, r0
 800f2b6:	4691      	mov	r9, r2
 800f2b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f2bc:	f108 0601 	add.w	r6, r8, #1
 800f2c0:	42b3      	cmp	r3, r6
 800f2c2:	db0b      	blt.n	800f2dc <__lshift+0x38>
 800f2c4:	4638      	mov	r0, r7
 800f2c6:	f7ff fddd 	bl	800ee84 <_Balloc>
 800f2ca:	4605      	mov	r5, r0
 800f2cc:	b948      	cbnz	r0, 800f2e2 <__lshift+0x3e>
 800f2ce:	4602      	mov	r2, r0
 800f2d0:	4b28      	ldr	r3, [pc, #160]	; (800f374 <__lshift+0xd0>)
 800f2d2:	4829      	ldr	r0, [pc, #164]	; (800f378 <__lshift+0xd4>)
 800f2d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f2d8:	f000 fc0a 	bl	800faf0 <__assert_func>
 800f2dc:	3101      	adds	r1, #1
 800f2de:	005b      	lsls	r3, r3, #1
 800f2e0:	e7ee      	b.n	800f2c0 <__lshift+0x1c>
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	f100 0114 	add.w	r1, r0, #20
 800f2e8:	f100 0210 	add.w	r2, r0, #16
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	4553      	cmp	r3, sl
 800f2f0:	db33      	blt.n	800f35a <__lshift+0xb6>
 800f2f2:	6920      	ldr	r0, [r4, #16]
 800f2f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f2f8:	f104 0314 	add.w	r3, r4, #20
 800f2fc:	f019 091f 	ands.w	r9, r9, #31
 800f300:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f304:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f308:	d02b      	beq.n	800f362 <__lshift+0xbe>
 800f30a:	f1c9 0e20 	rsb	lr, r9, #32
 800f30e:	468a      	mov	sl, r1
 800f310:	2200      	movs	r2, #0
 800f312:	6818      	ldr	r0, [r3, #0]
 800f314:	fa00 f009 	lsl.w	r0, r0, r9
 800f318:	4310      	orrs	r0, r2
 800f31a:	f84a 0b04 	str.w	r0, [sl], #4
 800f31e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f322:	459c      	cmp	ip, r3
 800f324:	fa22 f20e 	lsr.w	r2, r2, lr
 800f328:	d8f3      	bhi.n	800f312 <__lshift+0x6e>
 800f32a:	ebac 0304 	sub.w	r3, ip, r4
 800f32e:	3b15      	subs	r3, #21
 800f330:	f023 0303 	bic.w	r3, r3, #3
 800f334:	3304      	adds	r3, #4
 800f336:	f104 0015 	add.w	r0, r4, #21
 800f33a:	4584      	cmp	ip, r0
 800f33c:	bf38      	it	cc
 800f33e:	2304      	movcc	r3, #4
 800f340:	50ca      	str	r2, [r1, r3]
 800f342:	b10a      	cbz	r2, 800f348 <__lshift+0xa4>
 800f344:	f108 0602 	add.w	r6, r8, #2
 800f348:	3e01      	subs	r6, #1
 800f34a:	4638      	mov	r0, r7
 800f34c:	612e      	str	r6, [r5, #16]
 800f34e:	4621      	mov	r1, r4
 800f350:	f7ff fdd8 	bl	800ef04 <_Bfree>
 800f354:	4628      	mov	r0, r5
 800f356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f35a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f35e:	3301      	adds	r3, #1
 800f360:	e7c5      	b.n	800f2ee <__lshift+0x4a>
 800f362:	3904      	subs	r1, #4
 800f364:	f853 2b04 	ldr.w	r2, [r3], #4
 800f368:	f841 2f04 	str.w	r2, [r1, #4]!
 800f36c:	459c      	cmp	ip, r3
 800f36e:	d8f9      	bhi.n	800f364 <__lshift+0xc0>
 800f370:	e7ea      	b.n	800f348 <__lshift+0xa4>
 800f372:	bf00      	nop
 800f374:	08010f74 	.word	0x08010f74
 800f378:	08010f85 	.word	0x08010f85

0800f37c <__mcmp>:
 800f37c:	b530      	push	{r4, r5, lr}
 800f37e:	6902      	ldr	r2, [r0, #16]
 800f380:	690c      	ldr	r4, [r1, #16]
 800f382:	1b12      	subs	r2, r2, r4
 800f384:	d10e      	bne.n	800f3a4 <__mcmp+0x28>
 800f386:	f100 0314 	add.w	r3, r0, #20
 800f38a:	3114      	adds	r1, #20
 800f38c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f390:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f394:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f398:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f39c:	42a5      	cmp	r5, r4
 800f39e:	d003      	beq.n	800f3a8 <__mcmp+0x2c>
 800f3a0:	d305      	bcc.n	800f3ae <__mcmp+0x32>
 800f3a2:	2201      	movs	r2, #1
 800f3a4:	4610      	mov	r0, r2
 800f3a6:	bd30      	pop	{r4, r5, pc}
 800f3a8:	4283      	cmp	r3, r0
 800f3aa:	d3f3      	bcc.n	800f394 <__mcmp+0x18>
 800f3ac:	e7fa      	b.n	800f3a4 <__mcmp+0x28>
 800f3ae:	f04f 32ff 	mov.w	r2, #4294967295
 800f3b2:	e7f7      	b.n	800f3a4 <__mcmp+0x28>

0800f3b4 <__mdiff>:
 800f3b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3b8:	460c      	mov	r4, r1
 800f3ba:	4606      	mov	r6, r0
 800f3bc:	4611      	mov	r1, r2
 800f3be:	4620      	mov	r0, r4
 800f3c0:	4690      	mov	r8, r2
 800f3c2:	f7ff ffdb 	bl	800f37c <__mcmp>
 800f3c6:	1e05      	subs	r5, r0, #0
 800f3c8:	d110      	bne.n	800f3ec <__mdiff+0x38>
 800f3ca:	4629      	mov	r1, r5
 800f3cc:	4630      	mov	r0, r6
 800f3ce:	f7ff fd59 	bl	800ee84 <_Balloc>
 800f3d2:	b930      	cbnz	r0, 800f3e2 <__mdiff+0x2e>
 800f3d4:	4b3a      	ldr	r3, [pc, #232]	; (800f4c0 <__mdiff+0x10c>)
 800f3d6:	4602      	mov	r2, r0
 800f3d8:	f240 2137 	movw	r1, #567	; 0x237
 800f3dc:	4839      	ldr	r0, [pc, #228]	; (800f4c4 <__mdiff+0x110>)
 800f3de:	f000 fb87 	bl	800faf0 <__assert_func>
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f3e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ec:	bfa4      	itt	ge
 800f3ee:	4643      	movge	r3, r8
 800f3f0:	46a0      	movge	r8, r4
 800f3f2:	4630      	mov	r0, r6
 800f3f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f3f8:	bfa6      	itte	ge
 800f3fa:	461c      	movge	r4, r3
 800f3fc:	2500      	movge	r5, #0
 800f3fe:	2501      	movlt	r5, #1
 800f400:	f7ff fd40 	bl	800ee84 <_Balloc>
 800f404:	b920      	cbnz	r0, 800f410 <__mdiff+0x5c>
 800f406:	4b2e      	ldr	r3, [pc, #184]	; (800f4c0 <__mdiff+0x10c>)
 800f408:	4602      	mov	r2, r0
 800f40a:	f240 2145 	movw	r1, #581	; 0x245
 800f40e:	e7e5      	b.n	800f3dc <__mdiff+0x28>
 800f410:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f414:	6926      	ldr	r6, [r4, #16]
 800f416:	60c5      	str	r5, [r0, #12]
 800f418:	f104 0914 	add.w	r9, r4, #20
 800f41c:	f108 0514 	add.w	r5, r8, #20
 800f420:	f100 0e14 	add.w	lr, r0, #20
 800f424:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f428:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f42c:	f108 0210 	add.w	r2, r8, #16
 800f430:	46f2      	mov	sl, lr
 800f432:	2100      	movs	r1, #0
 800f434:	f859 3b04 	ldr.w	r3, [r9], #4
 800f438:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f43c:	fa11 f88b 	uxtah	r8, r1, fp
 800f440:	b299      	uxth	r1, r3
 800f442:	0c1b      	lsrs	r3, r3, #16
 800f444:	eba8 0801 	sub.w	r8, r8, r1
 800f448:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f44c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f450:	fa1f f888 	uxth.w	r8, r8
 800f454:	1419      	asrs	r1, r3, #16
 800f456:	454e      	cmp	r6, r9
 800f458:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f45c:	f84a 3b04 	str.w	r3, [sl], #4
 800f460:	d8e8      	bhi.n	800f434 <__mdiff+0x80>
 800f462:	1b33      	subs	r3, r6, r4
 800f464:	3b15      	subs	r3, #21
 800f466:	f023 0303 	bic.w	r3, r3, #3
 800f46a:	3304      	adds	r3, #4
 800f46c:	3415      	adds	r4, #21
 800f46e:	42a6      	cmp	r6, r4
 800f470:	bf38      	it	cc
 800f472:	2304      	movcc	r3, #4
 800f474:	441d      	add	r5, r3
 800f476:	4473      	add	r3, lr
 800f478:	469e      	mov	lr, r3
 800f47a:	462e      	mov	r6, r5
 800f47c:	4566      	cmp	r6, ip
 800f47e:	d30e      	bcc.n	800f49e <__mdiff+0xea>
 800f480:	f10c 0203 	add.w	r2, ip, #3
 800f484:	1b52      	subs	r2, r2, r5
 800f486:	f022 0203 	bic.w	r2, r2, #3
 800f48a:	3d03      	subs	r5, #3
 800f48c:	45ac      	cmp	ip, r5
 800f48e:	bf38      	it	cc
 800f490:	2200      	movcc	r2, #0
 800f492:	4413      	add	r3, r2
 800f494:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f498:	b17a      	cbz	r2, 800f4ba <__mdiff+0x106>
 800f49a:	6107      	str	r7, [r0, #16]
 800f49c:	e7a4      	b.n	800f3e8 <__mdiff+0x34>
 800f49e:	f856 8b04 	ldr.w	r8, [r6], #4
 800f4a2:	fa11 f288 	uxtah	r2, r1, r8
 800f4a6:	1414      	asrs	r4, r2, #16
 800f4a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f4ac:	b292      	uxth	r2, r2
 800f4ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f4b2:	f84e 2b04 	str.w	r2, [lr], #4
 800f4b6:	1421      	asrs	r1, r4, #16
 800f4b8:	e7e0      	b.n	800f47c <__mdiff+0xc8>
 800f4ba:	3f01      	subs	r7, #1
 800f4bc:	e7ea      	b.n	800f494 <__mdiff+0xe0>
 800f4be:	bf00      	nop
 800f4c0:	08010f74 	.word	0x08010f74
 800f4c4:	08010f85 	.word	0x08010f85

0800f4c8 <__d2b>:
 800f4c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f4cc:	460f      	mov	r7, r1
 800f4ce:	2101      	movs	r1, #1
 800f4d0:	ec59 8b10 	vmov	r8, r9, d0
 800f4d4:	4616      	mov	r6, r2
 800f4d6:	f7ff fcd5 	bl	800ee84 <_Balloc>
 800f4da:	4604      	mov	r4, r0
 800f4dc:	b930      	cbnz	r0, 800f4ec <__d2b+0x24>
 800f4de:	4602      	mov	r2, r0
 800f4e0:	4b24      	ldr	r3, [pc, #144]	; (800f574 <__d2b+0xac>)
 800f4e2:	4825      	ldr	r0, [pc, #148]	; (800f578 <__d2b+0xb0>)
 800f4e4:	f240 310f 	movw	r1, #783	; 0x30f
 800f4e8:	f000 fb02 	bl	800faf0 <__assert_func>
 800f4ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f4f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f4f4:	bb2d      	cbnz	r5, 800f542 <__d2b+0x7a>
 800f4f6:	9301      	str	r3, [sp, #4]
 800f4f8:	f1b8 0300 	subs.w	r3, r8, #0
 800f4fc:	d026      	beq.n	800f54c <__d2b+0x84>
 800f4fe:	4668      	mov	r0, sp
 800f500:	9300      	str	r3, [sp, #0]
 800f502:	f7ff fd87 	bl	800f014 <__lo0bits>
 800f506:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f50a:	b1e8      	cbz	r0, 800f548 <__d2b+0x80>
 800f50c:	f1c0 0320 	rsb	r3, r0, #32
 800f510:	fa02 f303 	lsl.w	r3, r2, r3
 800f514:	430b      	orrs	r3, r1
 800f516:	40c2      	lsrs	r2, r0
 800f518:	6163      	str	r3, [r4, #20]
 800f51a:	9201      	str	r2, [sp, #4]
 800f51c:	9b01      	ldr	r3, [sp, #4]
 800f51e:	61a3      	str	r3, [r4, #24]
 800f520:	2b00      	cmp	r3, #0
 800f522:	bf14      	ite	ne
 800f524:	2202      	movne	r2, #2
 800f526:	2201      	moveq	r2, #1
 800f528:	6122      	str	r2, [r4, #16]
 800f52a:	b1bd      	cbz	r5, 800f55c <__d2b+0x94>
 800f52c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f530:	4405      	add	r5, r0
 800f532:	603d      	str	r5, [r7, #0]
 800f534:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f538:	6030      	str	r0, [r6, #0]
 800f53a:	4620      	mov	r0, r4
 800f53c:	b003      	add	sp, #12
 800f53e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f542:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f546:	e7d6      	b.n	800f4f6 <__d2b+0x2e>
 800f548:	6161      	str	r1, [r4, #20]
 800f54a:	e7e7      	b.n	800f51c <__d2b+0x54>
 800f54c:	a801      	add	r0, sp, #4
 800f54e:	f7ff fd61 	bl	800f014 <__lo0bits>
 800f552:	9b01      	ldr	r3, [sp, #4]
 800f554:	6163      	str	r3, [r4, #20]
 800f556:	3020      	adds	r0, #32
 800f558:	2201      	movs	r2, #1
 800f55a:	e7e5      	b.n	800f528 <__d2b+0x60>
 800f55c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f560:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f564:	6038      	str	r0, [r7, #0]
 800f566:	6918      	ldr	r0, [r3, #16]
 800f568:	f7ff fd34 	bl	800efd4 <__hi0bits>
 800f56c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f570:	e7e2      	b.n	800f538 <__d2b+0x70>
 800f572:	bf00      	nop
 800f574:	08010f74 	.word	0x08010f74
 800f578:	08010f85 	.word	0x08010f85

0800f57c <__sfputc_r>:
 800f57c:	6893      	ldr	r3, [r2, #8]
 800f57e:	3b01      	subs	r3, #1
 800f580:	2b00      	cmp	r3, #0
 800f582:	b410      	push	{r4}
 800f584:	6093      	str	r3, [r2, #8]
 800f586:	da08      	bge.n	800f59a <__sfputc_r+0x1e>
 800f588:	6994      	ldr	r4, [r2, #24]
 800f58a:	42a3      	cmp	r3, r4
 800f58c:	db01      	blt.n	800f592 <__sfputc_r+0x16>
 800f58e:	290a      	cmp	r1, #10
 800f590:	d103      	bne.n	800f59a <__sfputc_r+0x1e>
 800f592:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f596:	f7fe bbd6 	b.w	800dd46 <__swbuf_r>
 800f59a:	6813      	ldr	r3, [r2, #0]
 800f59c:	1c58      	adds	r0, r3, #1
 800f59e:	6010      	str	r0, [r2, #0]
 800f5a0:	7019      	strb	r1, [r3, #0]
 800f5a2:	4608      	mov	r0, r1
 800f5a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5a8:	4770      	bx	lr

0800f5aa <__sfputs_r>:
 800f5aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5ac:	4606      	mov	r6, r0
 800f5ae:	460f      	mov	r7, r1
 800f5b0:	4614      	mov	r4, r2
 800f5b2:	18d5      	adds	r5, r2, r3
 800f5b4:	42ac      	cmp	r4, r5
 800f5b6:	d101      	bne.n	800f5bc <__sfputs_r+0x12>
 800f5b8:	2000      	movs	r0, #0
 800f5ba:	e007      	b.n	800f5cc <__sfputs_r+0x22>
 800f5bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5c0:	463a      	mov	r2, r7
 800f5c2:	4630      	mov	r0, r6
 800f5c4:	f7ff ffda 	bl	800f57c <__sfputc_r>
 800f5c8:	1c43      	adds	r3, r0, #1
 800f5ca:	d1f3      	bne.n	800f5b4 <__sfputs_r+0xa>
 800f5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f5d0 <_vfiprintf_r>:
 800f5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5d4:	460d      	mov	r5, r1
 800f5d6:	b09d      	sub	sp, #116	; 0x74
 800f5d8:	4614      	mov	r4, r2
 800f5da:	4698      	mov	r8, r3
 800f5dc:	4606      	mov	r6, r0
 800f5de:	b118      	cbz	r0, 800f5e8 <_vfiprintf_r+0x18>
 800f5e0:	6a03      	ldr	r3, [r0, #32]
 800f5e2:	b90b      	cbnz	r3, 800f5e8 <_vfiprintf_r+0x18>
 800f5e4:	f7fe fac0 	bl	800db68 <__sinit>
 800f5e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f5ea:	07d9      	lsls	r1, r3, #31
 800f5ec:	d405      	bmi.n	800f5fa <_vfiprintf_r+0x2a>
 800f5ee:	89ab      	ldrh	r3, [r5, #12]
 800f5f0:	059a      	lsls	r2, r3, #22
 800f5f2:	d402      	bmi.n	800f5fa <_vfiprintf_r+0x2a>
 800f5f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f5f6:	f7fe fcb8 	bl	800df6a <__retarget_lock_acquire_recursive>
 800f5fa:	89ab      	ldrh	r3, [r5, #12]
 800f5fc:	071b      	lsls	r3, r3, #28
 800f5fe:	d501      	bpl.n	800f604 <_vfiprintf_r+0x34>
 800f600:	692b      	ldr	r3, [r5, #16]
 800f602:	b99b      	cbnz	r3, 800f62c <_vfiprintf_r+0x5c>
 800f604:	4629      	mov	r1, r5
 800f606:	4630      	mov	r0, r6
 800f608:	f7fe fbda 	bl	800ddc0 <__swsetup_r>
 800f60c:	b170      	cbz	r0, 800f62c <_vfiprintf_r+0x5c>
 800f60e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f610:	07dc      	lsls	r4, r3, #31
 800f612:	d504      	bpl.n	800f61e <_vfiprintf_r+0x4e>
 800f614:	f04f 30ff 	mov.w	r0, #4294967295
 800f618:	b01d      	add	sp, #116	; 0x74
 800f61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f61e:	89ab      	ldrh	r3, [r5, #12]
 800f620:	0598      	lsls	r0, r3, #22
 800f622:	d4f7      	bmi.n	800f614 <_vfiprintf_r+0x44>
 800f624:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f626:	f7fe fca1 	bl	800df6c <__retarget_lock_release_recursive>
 800f62a:	e7f3      	b.n	800f614 <_vfiprintf_r+0x44>
 800f62c:	2300      	movs	r3, #0
 800f62e:	9309      	str	r3, [sp, #36]	; 0x24
 800f630:	2320      	movs	r3, #32
 800f632:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f636:	f8cd 800c 	str.w	r8, [sp, #12]
 800f63a:	2330      	movs	r3, #48	; 0x30
 800f63c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f7f0 <_vfiprintf_r+0x220>
 800f640:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f644:	f04f 0901 	mov.w	r9, #1
 800f648:	4623      	mov	r3, r4
 800f64a:	469a      	mov	sl, r3
 800f64c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f650:	b10a      	cbz	r2, 800f656 <_vfiprintf_r+0x86>
 800f652:	2a25      	cmp	r2, #37	; 0x25
 800f654:	d1f9      	bne.n	800f64a <_vfiprintf_r+0x7a>
 800f656:	ebba 0b04 	subs.w	fp, sl, r4
 800f65a:	d00b      	beq.n	800f674 <_vfiprintf_r+0xa4>
 800f65c:	465b      	mov	r3, fp
 800f65e:	4622      	mov	r2, r4
 800f660:	4629      	mov	r1, r5
 800f662:	4630      	mov	r0, r6
 800f664:	f7ff ffa1 	bl	800f5aa <__sfputs_r>
 800f668:	3001      	adds	r0, #1
 800f66a:	f000 80a9 	beq.w	800f7c0 <_vfiprintf_r+0x1f0>
 800f66e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f670:	445a      	add	r2, fp
 800f672:	9209      	str	r2, [sp, #36]	; 0x24
 800f674:	f89a 3000 	ldrb.w	r3, [sl]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	f000 80a1 	beq.w	800f7c0 <_vfiprintf_r+0x1f0>
 800f67e:	2300      	movs	r3, #0
 800f680:	f04f 32ff 	mov.w	r2, #4294967295
 800f684:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f688:	f10a 0a01 	add.w	sl, sl, #1
 800f68c:	9304      	str	r3, [sp, #16]
 800f68e:	9307      	str	r3, [sp, #28]
 800f690:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f694:	931a      	str	r3, [sp, #104]	; 0x68
 800f696:	4654      	mov	r4, sl
 800f698:	2205      	movs	r2, #5
 800f69a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f69e:	4854      	ldr	r0, [pc, #336]	; (800f7f0 <_vfiprintf_r+0x220>)
 800f6a0:	f7f0 fd7e 	bl	80001a0 <memchr>
 800f6a4:	9a04      	ldr	r2, [sp, #16]
 800f6a6:	b9d8      	cbnz	r0, 800f6e0 <_vfiprintf_r+0x110>
 800f6a8:	06d1      	lsls	r1, r2, #27
 800f6aa:	bf44      	itt	mi
 800f6ac:	2320      	movmi	r3, #32
 800f6ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f6b2:	0713      	lsls	r3, r2, #28
 800f6b4:	bf44      	itt	mi
 800f6b6:	232b      	movmi	r3, #43	; 0x2b
 800f6b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f6bc:	f89a 3000 	ldrb.w	r3, [sl]
 800f6c0:	2b2a      	cmp	r3, #42	; 0x2a
 800f6c2:	d015      	beq.n	800f6f0 <_vfiprintf_r+0x120>
 800f6c4:	9a07      	ldr	r2, [sp, #28]
 800f6c6:	4654      	mov	r4, sl
 800f6c8:	2000      	movs	r0, #0
 800f6ca:	f04f 0c0a 	mov.w	ip, #10
 800f6ce:	4621      	mov	r1, r4
 800f6d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f6d4:	3b30      	subs	r3, #48	; 0x30
 800f6d6:	2b09      	cmp	r3, #9
 800f6d8:	d94d      	bls.n	800f776 <_vfiprintf_r+0x1a6>
 800f6da:	b1b0      	cbz	r0, 800f70a <_vfiprintf_r+0x13a>
 800f6dc:	9207      	str	r2, [sp, #28]
 800f6de:	e014      	b.n	800f70a <_vfiprintf_r+0x13a>
 800f6e0:	eba0 0308 	sub.w	r3, r0, r8
 800f6e4:	fa09 f303 	lsl.w	r3, r9, r3
 800f6e8:	4313      	orrs	r3, r2
 800f6ea:	9304      	str	r3, [sp, #16]
 800f6ec:	46a2      	mov	sl, r4
 800f6ee:	e7d2      	b.n	800f696 <_vfiprintf_r+0xc6>
 800f6f0:	9b03      	ldr	r3, [sp, #12]
 800f6f2:	1d19      	adds	r1, r3, #4
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	9103      	str	r1, [sp, #12]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	bfbb      	ittet	lt
 800f6fc:	425b      	neglt	r3, r3
 800f6fe:	f042 0202 	orrlt.w	r2, r2, #2
 800f702:	9307      	strge	r3, [sp, #28]
 800f704:	9307      	strlt	r3, [sp, #28]
 800f706:	bfb8      	it	lt
 800f708:	9204      	strlt	r2, [sp, #16]
 800f70a:	7823      	ldrb	r3, [r4, #0]
 800f70c:	2b2e      	cmp	r3, #46	; 0x2e
 800f70e:	d10c      	bne.n	800f72a <_vfiprintf_r+0x15a>
 800f710:	7863      	ldrb	r3, [r4, #1]
 800f712:	2b2a      	cmp	r3, #42	; 0x2a
 800f714:	d134      	bne.n	800f780 <_vfiprintf_r+0x1b0>
 800f716:	9b03      	ldr	r3, [sp, #12]
 800f718:	1d1a      	adds	r2, r3, #4
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	9203      	str	r2, [sp, #12]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	bfb8      	it	lt
 800f722:	f04f 33ff 	movlt.w	r3, #4294967295
 800f726:	3402      	adds	r4, #2
 800f728:	9305      	str	r3, [sp, #20]
 800f72a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f800 <_vfiprintf_r+0x230>
 800f72e:	7821      	ldrb	r1, [r4, #0]
 800f730:	2203      	movs	r2, #3
 800f732:	4650      	mov	r0, sl
 800f734:	f7f0 fd34 	bl	80001a0 <memchr>
 800f738:	b138      	cbz	r0, 800f74a <_vfiprintf_r+0x17a>
 800f73a:	9b04      	ldr	r3, [sp, #16]
 800f73c:	eba0 000a 	sub.w	r0, r0, sl
 800f740:	2240      	movs	r2, #64	; 0x40
 800f742:	4082      	lsls	r2, r0
 800f744:	4313      	orrs	r3, r2
 800f746:	3401      	adds	r4, #1
 800f748:	9304      	str	r3, [sp, #16]
 800f74a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f74e:	4829      	ldr	r0, [pc, #164]	; (800f7f4 <_vfiprintf_r+0x224>)
 800f750:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f754:	2206      	movs	r2, #6
 800f756:	f7f0 fd23 	bl	80001a0 <memchr>
 800f75a:	2800      	cmp	r0, #0
 800f75c:	d03f      	beq.n	800f7de <_vfiprintf_r+0x20e>
 800f75e:	4b26      	ldr	r3, [pc, #152]	; (800f7f8 <_vfiprintf_r+0x228>)
 800f760:	bb1b      	cbnz	r3, 800f7aa <_vfiprintf_r+0x1da>
 800f762:	9b03      	ldr	r3, [sp, #12]
 800f764:	3307      	adds	r3, #7
 800f766:	f023 0307 	bic.w	r3, r3, #7
 800f76a:	3308      	adds	r3, #8
 800f76c:	9303      	str	r3, [sp, #12]
 800f76e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f770:	443b      	add	r3, r7
 800f772:	9309      	str	r3, [sp, #36]	; 0x24
 800f774:	e768      	b.n	800f648 <_vfiprintf_r+0x78>
 800f776:	fb0c 3202 	mla	r2, ip, r2, r3
 800f77a:	460c      	mov	r4, r1
 800f77c:	2001      	movs	r0, #1
 800f77e:	e7a6      	b.n	800f6ce <_vfiprintf_r+0xfe>
 800f780:	2300      	movs	r3, #0
 800f782:	3401      	adds	r4, #1
 800f784:	9305      	str	r3, [sp, #20]
 800f786:	4619      	mov	r1, r3
 800f788:	f04f 0c0a 	mov.w	ip, #10
 800f78c:	4620      	mov	r0, r4
 800f78e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f792:	3a30      	subs	r2, #48	; 0x30
 800f794:	2a09      	cmp	r2, #9
 800f796:	d903      	bls.n	800f7a0 <_vfiprintf_r+0x1d0>
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d0c6      	beq.n	800f72a <_vfiprintf_r+0x15a>
 800f79c:	9105      	str	r1, [sp, #20]
 800f79e:	e7c4      	b.n	800f72a <_vfiprintf_r+0x15a>
 800f7a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f7a4:	4604      	mov	r4, r0
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	e7f0      	b.n	800f78c <_vfiprintf_r+0x1bc>
 800f7aa:	ab03      	add	r3, sp, #12
 800f7ac:	9300      	str	r3, [sp, #0]
 800f7ae:	462a      	mov	r2, r5
 800f7b0:	4b12      	ldr	r3, [pc, #72]	; (800f7fc <_vfiprintf_r+0x22c>)
 800f7b2:	a904      	add	r1, sp, #16
 800f7b4:	4630      	mov	r0, r6
 800f7b6:	f7fd fd85 	bl	800d2c4 <_printf_float>
 800f7ba:	4607      	mov	r7, r0
 800f7bc:	1c78      	adds	r0, r7, #1
 800f7be:	d1d6      	bne.n	800f76e <_vfiprintf_r+0x19e>
 800f7c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f7c2:	07d9      	lsls	r1, r3, #31
 800f7c4:	d405      	bmi.n	800f7d2 <_vfiprintf_r+0x202>
 800f7c6:	89ab      	ldrh	r3, [r5, #12]
 800f7c8:	059a      	lsls	r2, r3, #22
 800f7ca:	d402      	bmi.n	800f7d2 <_vfiprintf_r+0x202>
 800f7cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f7ce:	f7fe fbcd 	bl	800df6c <__retarget_lock_release_recursive>
 800f7d2:	89ab      	ldrh	r3, [r5, #12]
 800f7d4:	065b      	lsls	r3, r3, #25
 800f7d6:	f53f af1d 	bmi.w	800f614 <_vfiprintf_r+0x44>
 800f7da:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f7dc:	e71c      	b.n	800f618 <_vfiprintf_r+0x48>
 800f7de:	ab03      	add	r3, sp, #12
 800f7e0:	9300      	str	r3, [sp, #0]
 800f7e2:	462a      	mov	r2, r5
 800f7e4:	4b05      	ldr	r3, [pc, #20]	; (800f7fc <_vfiprintf_r+0x22c>)
 800f7e6:	a904      	add	r1, sp, #16
 800f7e8:	4630      	mov	r0, r6
 800f7ea:	f7fe f80f 	bl	800d80c <_printf_i>
 800f7ee:	e7e4      	b.n	800f7ba <_vfiprintf_r+0x1ea>
 800f7f0:	080110dc 	.word	0x080110dc
 800f7f4:	080110e6 	.word	0x080110e6
 800f7f8:	0800d2c5 	.word	0x0800d2c5
 800f7fc:	0800f5ab 	.word	0x0800f5ab
 800f800:	080110e2 	.word	0x080110e2

0800f804 <__sflush_r>:
 800f804:	898a      	ldrh	r2, [r1, #12]
 800f806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f80a:	4605      	mov	r5, r0
 800f80c:	0710      	lsls	r0, r2, #28
 800f80e:	460c      	mov	r4, r1
 800f810:	d458      	bmi.n	800f8c4 <__sflush_r+0xc0>
 800f812:	684b      	ldr	r3, [r1, #4]
 800f814:	2b00      	cmp	r3, #0
 800f816:	dc05      	bgt.n	800f824 <__sflush_r+0x20>
 800f818:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	dc02      	bgt.n	800f824 <__sflush_r+0x20>
 800f81e:	2000      	movs	r0, #0
 800f820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f826:	2e00      	cmp	r6, #0
 800f828:	d0f9      	beq.n	800f81e <__sflush_r+0x1a>
 800f82a:	2300      	movs	r3, #0
 800f82c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f830:	682f      	ldr	r7, [r5, #0]
 800f832:	6a21      	ldr	r1, [r4, #32]
 800f834:	602b      	str	r3, [r5, #0]
 800f836:	d032      	beq.n	800f89e <__sflush_r+0x9a>
 800f838:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f83a:	89a3      	ldrh	r3, [r4, #12]
 800f83c:	075a      	lsls	r2, r3, #29
 800f83e:	d505      	bpl.n	800f84c <__sflush_r+0x48>
 800f840:	6863      	ldr	r3, [r4, #4]
 800f842:	1ac0      	subs	r0, r0, r3
 800f844:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f846:	b10b      	cbz	r3, 800f84c <__sflush_r+0x48>
 800f848:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f84a:	1ac0      	subs	r0, r0, r3
 800f84c:	2300      	movs	r3, #0
 800f84e:	4602      	mov	r2, r0
 800f850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f852:	6a21      	ldr	r1, [r4, #32]
 800f854:	4628      	mov	r0, r5
 800f856:	47b0      	blx	r6
 800f858:	1c43      	adds	r3, r0, #1
 800f85a:	89a3      	ldrh	r3, [r4, #12]
 800f85c:	d106      	bne.n	800f86c <__sflush_r+0x68>
 800f85e:	6829      	ldr	r1, [r5, #0]
 800f860:	291d      	cmp	r1, #29
 800f862:	d82b      	bhi.n	800f8bc <__sflush_r+0xb8>
 800f864:	4a29      	ldr	r2, [pc, #164]	; (800f90c <__sflush_r+0x108>)
 800f866:	410a      	asrs	r2, r1
 800f868:	07d6      	lsls	r6, r2, #31
 800f86a:	d427      	bmi.n	800f8bc <__sflush_r+0xb8>
 800f86c:	2200      	movs	r2, #0
 800f86e:	6062      	str	r2, [r4, #4]
 800f870:	04d9      	lsls	r1, r3, #19
 800f872:	6922      	ldr	r2, [r4, #16]
 800f874:	6022      	str	r2, [r4, #0]
 800f876:	d504      	bpl.n	800f882 <__sflush_r+0x7e>
 800f878:	1c42      	adds	r2, r0, #1
 800f87a:	d101      	bne.n	800f880 <__sflush_r+0x7c>
 800f87c:	682b      	ldr	r3, [r5, #0]
 800f87e:	b903      	cbnz	r3, 800f882 <__sflush_r+0x7e>
 800f880:	6560      	str	r0, [r4, #84]	; 0x54
 800f882:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f884:	602f      	str	r7, [r5, #0]
 800f886:	2900      	cmp	r1, #0
 800f888:	d0c9      	beq.n	800f81e <__sflush_r+0x1a>
 800f88a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f88e:	4299      	cmp	r1, r3
 800f890:	d002      	beq.n	800f898 <__sflush_r+0x94>
 800f892:	4628      	mov	r0, r5
 800f894:	f7ff f9f6 	bl	800ec84 <_free_r>
 800f898:	2000      	movs	r0, #0
 800f89a:	6360      	str	r0, [r4, #52]	; 0x34
 800f89c:	e7c0      	b.n	800f820 <__sflush_r+0x1c>
 800f89e:	2301      	movs	r3, #1
 800f8a0:	4628      	mov	r0, r5
 800f8a2:	47b0      	blx	r6
 800f8a4:	1c41      	adds	r1, r0, #1
 800f8a6:	d1c8      	bne.n	800f83a <__sflush_r+0x36>
 800f8a8:	682b      	ldr	r3, [r5, #0]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d0c5      	beq.n	800f83a <__sflush_r+0x36>
 800f8ae:	2b1d      	cmp	r3, #29
 800f8b0:	d001      	beq.n	800f8b6 <__sflush_r+0xb2>
 800f8b2:	2b16      	cmp	r3, #22
 800f8b4:	d101      	bne.n	800f8ba <__sflush_r+0xb6>
 800f8b6:	602f      	str	r7, [r5, #0]
 800f8b8:	e7b1      	b.n	800f81e <__sflush_r+0x1a>
 800f8ba:	89a3      	ldrh	r3, [r4, #12]
 800f8bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8c0:	81a3      	strh	r3, [r4, #12]
 800f8c2:	e7ad      	b.n	800f820 <__sflush_r+0x1c>
 800f8c4:	690f      	ldr	r7, [r1, #16]
 800f8c6:	2f00      	cmp	r7, #0
 800f8c8:	d0a9      	beq.n	800f81e <__sflush_r+0x1a>
 800f8ca:	0793      	lsls	r3, r2, #30
 800f8cc:	680e      	ldr	r6, [r1, #0]
 800f8ce:	bf08      	it	eq
 800f8d0:	694b      	ldreq	r3, [r1, #20]
 800f8d2:	600f      	str	r7, [r1, #0]
 800f8d4:	bf18      	it	ne
 800f8d6:	2300      	movne	r3, #0
 800f8d8:	eba6 0807 	sub.w	r8, r6, r7
 800f8dc:	608b      	str	r3, [r1, #8]
 800f8de:	f1b8 0f00 	cmp.w	r8, #0
 800f8e2:	dd9c      	ble.n	800f81e <__sflush_r+0x1a>
 800f8e4:	6a21      	ldr	r1, [r4, #32]
 800f8e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f8e8:	4643      	mov	r3, r8
 800f8ea:	463a      	mov	r2, r7
 800f8ec:	4628      	mov	r0, r5
 800f8ee:	47b0      	blx	r6
 800f8f0:	2800      	cmp	r0, #0
 800f8f2:	dc06      	bgt.n	800f902 <__sflush_r+0xfe>
 800f8f4:	89a3      	ldrh	r3, [r4, #12]
 800f8f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f8fa:	81a3      	strh	r3, [r4, #12]
 800f8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800f900:	e78e      	b.n	800f820 <__sflush_r+0x1c>
 800f902:	4407      	add	r7, r0
 800f904:	eba8 0800 	sub.w	r8, r8, r0
 800f908:	e7e9      	b.n	800f8de <__sflush_r+0xda>
 800f90a:	bf00      	nop
 800f90c:	dfbffffe 	.word	0xdfbffffe

0800f910 <_fflush_r>:
 800f910:	b538      	push	{r3, r4, r5, lr}
 800f912:	690b      	ldr	r3, [r1, #16]
 800f914:	4605      	mov	r5, r0
 800f916:	460c      	mov	r4, r1
 800f918:	b913      	cbnz	r3, 800f920 <_fflush_r+0x10>
 800f91a:	2500      	movs	r5, #0
 800f91c:	4628      	mov	r0, r5
 800f91e:	bd38      	pop	{r3, r4, r5, pc}
 800f920:	b118      	cbz	r0, 800f92a <_fflush_r+0x1a>
 800f922:	6a03      	ldr	r3, [r0, #32]
 800f924:	b90b      	cbnz	r3, 800f92a <_fflush_r+0x1a>
 800f926:	f7fe f91f 	bl	800db68 <__sinit>
 800f92a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d0f3      	beq.n	800f91a <_fflush_r+0xa>
 800f932:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f934:	07d0      	lsls	r0, r2, #31
 800f936:	d404      	bmi.n	800f942 <_fflush_r+0x32>
 800f938:	0599      	lsls	r1, r3, #22
 800f93a:	d402      	bmi.n	800f942 <_fflush_r+0x32>
 800f93c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f93e:	f7fe fb14 	bl	800df6a <__retarget_lock_acquire_recursive>
 800f942:	4628      	mov	r0, r5
 800f944:	4621      	mov	r1, r4
 800f946:	f7ff ff5d 	bl	800f804 <__sflush_r>
 800f94a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f94c:	07da      	lsls	r2, r3, #31
 800f94e:	4605      	mov	r5, r0
 800f950:	d4e4      	bmi.n	800f91c <_fflush_r+0xc>
 800f952:	89a3      	ldrh	r3, [r4, #12]
 800f954:	059b      	lsls	r3, r3, #22
 800f956:	d4e1      	bmi.n	800f91c <_fflush_r+0xc>
 800f958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f95a:	f7fe fb07 	bl	800df6c <__retarget_lock_release_recursive>
 800f95e:	e7dd      	b.n	800f91c <_fflush_r+0xc>

0800f960 <__swhatbuf_r>:
 800f960:	b570      	push	{r4, r5, r6, lr}
 800f962:	460c      	mov	r4, r1
 800f964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f968:	2900      	cmp	r1, #0
 800f96a:	b096      	sub	sp, #88	; 0x58
 800f96c:	4615      	mov	r5, r2
 800f96e:	461e      	mov	r6, r3
 800f970:	da0d      	bge.n	800f98e <__swhatbuf_r+0x2e>
 800f972:	89a3      	ldrh	r3, [r4, #12]
 800f974:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f978:	f04f 0100 	mov.w	r1, #0
 800f97c:	bf0c      	ite	eq
 800f97e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f982:	2340      	movne	r3, #64	; 0x40
 800f984:	2000      	movs	r0, #0
 800f986:	6031      	str	r1, [r6, #0]
 800f988:	602b      	str	r3, [r5, #0]
 800f98a:	b016      	add	sp, #88	; 0x58
 800f98c:	bd70      	pop	{r4, r5, r6, pc}
 800f98e:	466a      	mov	r2, sp
 800f990:	f000 f87c 	bl	800fa8c <_fstat_r>
 800f994:	2800      	cmp	r0, #0
 800f996:	dbec      	blt.n	800f972 <__swhatbuf_r+0x12>
 800f998:	9901      	ldr	r1, [sp, #4]
 800f99a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f99e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f9a2:	4259      	negs	r1, r3
 800f9a4:	4159      	adcs	r1, r3
 800f9a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9aa:	e7eb      	b.n	800f984 <__swhatbuf_r+0x24>

0800f9ac <__smakebuf_r>:
 800f9ac:	898b      	ldrh	r3, [r1, #12]
 800f9ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f9b0:	079d      	lsls	r5, r3, #30
 800f9b2:	4606      	mov	r6, r0
 800f9b4:	460c      	mov	r4, r1
 800f9b6:	d507      	bpl.n	800f9c8 <__smakebuf_r+0x1c>
 800f9b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f9bc:	6023      	str	r3, [r4, #0]
 800f9be:	6123      	str	r3, [r4, #16]
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	6163      	str	r3, [r4, #20]
 800f9c4:	b002      	add	sp, #8
 800f9c6:	bd70      	pop	{r4, r5, r6, pc}
 800f9c8:	ab01      	add	r3, sp, #4
 800f9ca:	466a      	mov	r2, sp
 800f9cc:	f7ff ffc8 	bl	800f960 <__swhatbuf_r>
 800f9d0:	9900      	ldr	r1, [sp, #0]
 800f9d2:	4605      	mov	r5, r0
 800f9d4:	4630      	mov	r0, r6
 800f9d6:	f7ff f9c9 	bl	800ed6c <_malloc_r>
 800f9da:	b948      	cbnz	r0, 800f9f0 <__smakebuf_r+0x44>
 800f9dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9e0:	059a      	lsls	r2, r3, #22
 800f9e2:	d4ef      	bmi.n	800f9c4 <__smakebuf_r+0x18>
 800f9e4:	f023 0303 	bic.w	r3, r3, #3
 800f9e8:	f043 0302 	orr.w	r3, r3, #2
 800f9ec:	81a3      	strh	r3, [r4, #12]
 800f9ee:	e7e3      	b.n	800f9b8 <__smakebuf_r+0xc>
 800f9f0:	89a3      	ldrh	r3, [r4, #12]
 800f9f2:	6020      	str	r0, [r4, #0]
 800f9f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9f8:	81a3      	strh	r3, [r4, #12]
 800f9fa:	9b00      	ldr	r3, [sp, #0]
 800f9fc:	6163      	str	r3, [r4, #20]
 800f9fe:	9b01      	ldr	r3, [sp, #4]
 800fa00:	6120      	str	r0, [r4, #16]
 800fa02:	b15b      	cbz	r3, 800fa1c <__smakebuf_r+0x70>
 800fa04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa08:	4630      	mov	r0, r6
 800fa0a:	f000 f851 	bl	800fab0 <_isatty_r>
 800fa0e:	b128      	cbz	r0, 800fa1c <__smakebuf_r+0x70>
 800fa10:	89a3      	ldrh	r3, [r4, #12]
 800fa12:	f023 0303 	bic.w	r3, r3, #3
 800fa16:	f043 0301 	orr.w	r3, r3, #1
 800fa1a:	81a3      	strh	r3, [r4, #12]
 800fa1c:	89a3      	ldrh	r3, [r4, #12]
 800fa1e:	431d      	orrs	r5, r3
 800fa20:	81a5      	strh	r5, [r4, #12]
 800fa22:	e7cf      	b.n	800f9c4 <__smakebuf_r+0x18>

0800fa24 <_putc_r>:
 800fa24:	b570      	push	{r4, r5, r6, lr}
 800fa26:	460d      	mov	r5, r1
 800fa28:	4614      	mov	r4, r2
 800fa2a:	4606      	mov	r6, r0
 800fa2c:	b118      	cbz	r0, 800fa36 <_putc_r+0x12>
 800fa2e:	6a03      	ldr	r3, [r0, #32]
 800fa30:	b90b      	cbnz	r3, 800fa36 <_putc_r+0x12>
 800fa32:	f7fe f899 	bl	800db68 <__sinit>
 800fa36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa38:	07d8      	lsls	r0, r3, #31
 800fa3a:	d405      	bmi.n	800fa48 <_putc_r+0x24>
 800fa3c:	89a3      	ldrh	r3, [r4, #12]
 800fa3e:	0599      	lsls	r1, r3, #22
 800fa40:	d402      	bmi.n	800fa48 <_putc_r+0x24>
 800fa42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa44:	f7fe fa91 	bl	800df6a <__retarget_lock_acquire_recursive>
 800fa48:	68a3      	ldr	r3, [r4, #8]
 800fa4a:	3b01      	subs	r3, #1
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	60a3      	str	r3, [r4, #8]
 800fa50:	da05      	bge.n	800fa5e <_putc_r+0x3a>
 800fa52:	69a2      	ldr	r2, [r4, #24]
 800fa54:	4293      	cmp	r3, r2
 800fa56:	db12      	blt.n	800fa7e <_putc_r+0x5a>
 800fa58:	b2eb      	uxtb	r3, r5
 800fa5a:	2b0a      	cmp	r3, #10
 800fa5c:	d00f      	beq.n	800fa7e <_putc_r+0x5a>
 800fa5e:	6823      	ldr	r3, [r4, #0]
 800fa60:	1c5a      	adds	r2, r3, #1
 800fa62:	6022      	str	r2, [r4, #0]
 800fa64:	701d      	strb	r5, [r3, #0]
 800fa66:	b2ed      	uxtb	r5, r5
 800fa68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa6a:	07da      	lsls	r2, r3, #31
 800fa6c:	d405      	bmi.n	800fa7a <_putc_r+0x56>
 800fa6e:	89a3      	ldrh	r3, [r4, #12]
 800fa70:	059b      	lsls	r3, r3, #22
 800fa72:	d402      	bmi.n	800fa7a <_putc_r+0x56>
 800fa74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa76:	f7fe fa79 	bl	800df6c <__retarget_lock_release_recursive>
 800fa7a:	4628      	mov	r0, r5
 800fa7c:	bd70      	pop	{r4, r5, r6, pc}
 800fa7e:	4629      	mov	r1, r5
 800fa80:	4622      	mov	r2, r4
 800fa82:	4630      	mov	r0, r6
 800fa84:	f7fe f95f 	bl	800dd46 <__swbuf_r>
 800fa88:	4605      	mov	r5, r0
 800fa8a:	e7ed      	b.n	800fa68 <_putc_r+0x44>

0800fa8c <_fstat_r>:
 800fa8c:	b538      	push	{r3, r4, r5, lr}
 800fa8e:	4d07      	ldr	r5, [pc, #28]	; (800faac <_fstat_r+0x20>)
 800fa90:	2300      	movs	r3, #0
 800fa92:	4604      	mov	r4, r0
 800fa94:	4608      	mov	r0, r1
 800fa96:	4611      	mov	r1, r2
 800fa98:	602b      	str	r3, [r5, #0]
 800fa9a:	f7f3 fb73 	bl	8003184 <_fstat>
 800fa9e:	1c43      	adds	r3, r0, #1
 800faa0:	d102      	bne.n	800faa8 <_fstat_r+0x1c>
 800faa2:	682b      	ldr	r3, [r5, #0]
 800faa4:	b103      	cbz	r3, 800faa8 <_fstat_r+0x1c>
 800faa6:	6023      	str	r3, [r4, #0]
 800faa8:	bd38      	pop	{r3, r4, r5, pc}
 800faaa:	bf00      	nop
 800faac:	200019ac 	.word	0x200019ac

0800fab0 <_isatty_r>:
 800fab0:	b538      	push	{r3, r4, r5, lr}
 800fab2:	4d06      	ldr	r5, [pc, #24]	; (800facc <_isatty_r+0x1c>)
 800fab4:	2300      	movs	r3, #0
 800fab6:	4604      	mov	r4, r0
 800fab8:	4608      	mov	r0, r1
 800faba:	602b      	str	r3, [r5, #0]
 800fabc:	f7f3 fb72 	bl	80031a4 <_isatty>
 800fac0:	1c43      	adds	r3, r0, #1
 800fac2:	d102      	bne.n	800faca <_isatty_r+0x1a>
 800fac4:	682b      	ldr	r3, [r5, #0]
 800fac6:	b103      	cbz	r3, 800faca <_isatty_r+0x1a>
 800fac8:	6023      	str	r3, [r4, #0]
 800faca:	bd38      	pop	{r3, r4, r5, pc}
 800facc:	200019ac 	.word	0x200019ac

0800fad0 <_sbrk_r>:
 800fad0:	b538      	push	{r3, r4, r5, lr}
 800fad2:	4d06      	ldr	r5, [pc, #24]	; (800faec <_sbrk_r+0x1c>)
 800fad4:	2300      	movs	r3, #0
 800fad6:	4604      	mov	r4, r0
 800fad8:	4608      	mov	r0, r1
 800fada:	602b      	str	r3, [r5, #0]
 800fadc:	f7f3 fb7a 	bl	80031d4 <_sbrk>
 800fae0:	1c43      	adds	r3, r0, #1
 800fae2:	d102      	bne.n	800faea <_sbrk_r+0x1a>
 800fae4:	682b      	ldr	r3, [r5, #0]
 800fae6:	b103      	cbz	r3, 800faea <_sbrk_r+0x1a>
 800fae8:	6023      	str	r3, [r4, #0]
 800faea:	bd38      	pop	{r3, r4, r5, pc}
 800faec:	200019ac 	.word	0x200019ac

0800faf0 <__assert_func>:
 800faf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800faf2:	4614      	mov	r4, r2
 800faf4:	461a      	mov	r2, r3
 800faf6:	4b09      	ldr	r3, [pc, #36]	; (800fb1c <__assert_func+0x2c>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	4605      	mov	r5, r0
 800fafc:	68d8      	ldr	r0, [r3, #12]
 800fafe:	b14c      	cbz	r4, 800fb14 <__assert_func+0x24>
 800fb00:	4b07      	ldr	r3, [pc, #28]	; (800fb20 <__assert_func+0x30>)
 800fb02:	9100      	str	r1, [sp, #0]
 800fb04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fb08:	4906      	ldr	r1, [pc, #24]	; (800fb24 <__assert_func+0x34>)
 800fb0a:	462b      	mov	r3, r5
 800fb0c:	f000 f844 	bl	800fb98 <fiprintf>
 800fb10:	f000 f854 	bl	800fbbc <abort>
 800fb14:	4b04      	ldr	r3, [pc, #16]	; (800fb28 <__assert_func+0x38>)
 800fb16:	461c      	mov	r4, r3
 800fb18:	e7f3      	b.n	800fb02 <__assert_func+0x12>
 800fb1a:	bf00      	nop
 800fb1c:	2000008c 	.word	0x2000008c
 800fb20:	080110f7 	.word	0x080110f7
 800fb24:	08011104 	.word	0x08011104
 800fb28:	08011132 	.word	0x08011132

0800fb2c <_calloc_r>:
 800fb2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb2e:	fba1 2402 	umull	r2, r4, r1, r2
 800fb32:	b94c      	cbnz	r4, 800fb48 <_calloc_r+0x1c>
 800fb34:	4611      	mov	r1, r2
 800fb36:	9201      	str	r2, [sp, #4]
 800fb38:	f7ff f918 	bl	800ed6c <_malloc_r>
 800fb3c:	9a01      	ldr	r2, [sp, #4]
 800fb3e:	4605      	mov	r5, r0
 800fb40:	b930      	cbnz	r0, 800fb50 <_calloc_r+0x24>
 800fb42:	4628      	mov	r0, r5
 800fb44:	b003      	add	sp, #12
 800fb46:	bd30      	pop	{r4, r5, pc}
 800fb48:	220c      	movs	r2, #12
 800fb4a:	6002      	str	r2, [r0, #0]
 800fb4c:	2500      	movs	r5, #0
 800fb4e:	e7f8      	b.n	800fb42 <_calloc_r+0x16>
 800fb50:	4621      	mov	r1, r4
 800fb52:	f7fe f98d 	bl	800de70 <memset>
 800fb56:	e7f4      	b.n	800fb42 <_calloc_r+0x16>

0800fb58 <__ascii_mbtowc>:
 800fb58:	b082      	sub	sp, #8
 800fb5a:	b901      	cbnz	r1, 800fb5e <__ascii_mbtowc+0x6>
 800fb5c:	a901      	add	r1, sp, #4
 800fb5e:	b142      	cbz	r2, 800fb72 <__ascii_mbtowc+0x1a>
 800fb60:	b14b      	cbz	r3, 800fb76 <__ascii_mbtowc+0x1e>
 800fb62:	7813      	ldrb	r3, [r2, #0]
 800fb64:	600b      	str	r3, [r1, #0]
 800fb66:	7812      	ldrb	r2, [r2, #0]
 800fb68:	1e10      	subs	r0, r2, #0
 800fb6a:	bf18      	it	ne
 800fb6c:	2001      	movne	r0, #1
 800fb6e:	b002      	add	sp, #8
 800fb70:	4770      	bx	lr
 800fb72:	4610      	mov	r0, r2
 800fb74:	e7fb      	b.n	800fb6e <__ascii_mbtowc+0x16>
 800fb76:	f06f 0001 	mvn.w	r0, #1
 800fb7a:	e7f8      	b.n	800fb6e <__ascii_mbtowc+0x16>

0800fb7c <__ascii_wctomb>:
 800fb7c:	b149      	cbz	r1, 800fb92 <__ascii_wctomb+0x16>
 800fb7e:	2aff      	cmp	r2, #255	; 0xff
 800fb80:	bf85      	ittet	hi
 800fb82:	238a      	movhi	r3, #138	; 0x8a
 800fb84:	6003      	strhi	r3, [r0, #0]
 800fb86:	700a      	strbls	r2, [r1, #0]
 800fb88:	f04f 30ff 	movhi.w	r0, #4294967295
 800fb8c:	bf98      	it	ls
 800fb8e:	2001      	movls	r0, #1
 800fb90:	4770      	bx	lr
 800fb92:	4608      	mov	r0, r1
 800fb94:	4770      	bx	lr
	...

0800fb98 <fiprintf>:
 800fb98:	b40e      	push	{r1, r2, r3}
 800fb9a:	b503      	push	{r0, r1, lr}
 800fb9c:	4601      	mov	r1, r0
 800fb9e:	ab03      	add	r3, sp, #12
 800fba0:	4805      	ldr	r0, [pc, #20]	; (800fbb8 <fiprintf+0x20>)
 800fba2:	f853 2b04 	ldr.w	r2, [r3], #4
 800fba6:	6800      	ldr	r0, [r0, #0]
 800fba8:	9301      	str	r3, [sp, #4]
 800fbaa:	f7ff fd11 	bl	800f5d0 <_vfiprintf_r>
 800fbae:	b002      	add	sp, #8
 800fbb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800fbb4:	b003      	add	sp, #12
 800fbb6:	4770      	bx	lr
 800fbb8:	2000008c 	.word	0x2000008c

0800fbbc <abort>:
 800fbbc:	b508      	push	{r3, lr}
 800fbbe:	2006      	movs	r0, #6
 800fbc0:	f000 f82c 	bl	800fc1c <raise>
 800fbc4:	2001      	movs	r0, #1
 800fbc6:	f7f3 faaa 	bl	800311e <_exit>

0800fbca <_raise_r>:
 800fbca:	291f      	cmp	r1, #31
 800fbcc:	b538      	push	{r3, r4, r5, lr}
 800fbce:	4604      	mov	r4, r0
 800fbd0:	460d      	mov	r5, r1
 800fbd2:	d904      	bls.n	800fbde <_raise_r+0x14>
 800fbd4:	2316      	movs	r3, #22
 800fbd6:	6003      	str	r3, [r0, #0]
 800fbd8:	f04f 30ff 	mov.w	r0, #4294967295
 800fbdc:	bd38      	pop	{r3, r4, r5, pc}
 800fbde:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fbe0:	b112      	cbz	r2, 800fbe8 <_raise_r+0x1e>
 800fbe2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fbe6:	b94b      	cbnz	r3, 800fbfc <_raise_r+0x32>
 800fbe8:	4620      	mov	r0, r4
 800fbea:	f000 f831 	bl	800fc50 <_getpid_r>
 800fbee:	462a      	mov	r2, r5
 800fbf0:	4601      	mov	r1, r0
 800fbf2:	4620      	mov	r0, r4
 800fbf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbf8:	f000 b818 	b.w	800fc2c <_kill_r>
 800fbfc:	2b01      	cmp	r3, #1
 800fbfe:	d00a      	beq.n	800fc16 <_raise_r+0x4c>
 800fc00:	1c59      	adds	r1, r3, #1
 800fc02:	d103      	bne.n	800fc0c <_raise_r+0x42>
 800fc04:	2316      	movs	r3, #22
 800fc06:	6003      	str	r3, [r0, #0]
 800fc08:	2001      	movs	r0, #1
 800fc0a:	e7e7      	b.n	800fbdc <_raise_r+0x12>
 800fc0c:	2400      	movs	r4, #0
 800fc0e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fc12:	4628      	mov	r0, r5
 800fc14:	4798      	blx	r3
 800fc16:	2000      	movs	r0, #0
 800fc18:	e7e0      	b.n	800fbdc <_raise_r+0x12>
	...

0800fc1c <raise>:
 800fc1c:	4b02      	ldr	r3, [pc, #8]	; (800fc28 <raise+0xc>)
 800fc1e:	4601      	mov	r1, r0
 800fc20:	6818      	ldr	r0, [r3, #0]
 800fc22:	f7ff bfd2 	b.w	800fbca <_raise_r>
 800fc26:	bf00      	nop
 800fc28:	2000008c 	.word	0x2000008c

0800fc2c <_kill_r>:
 800fc2c:	b538      	push	{r3, r4, r5, lr}
 800fc2e:	4d07      	ldr	r5, [pc, #28]	; (800fc4c <_kill_r+0x20>)
 800fc30:	2300      	movs	r3, #0
 800fc32:	4604      	mov	r4, r0
 800fc34:	4608      	mov	r0, r1
 800fc36:	4611      	mov	r1, r2
 800fc38:	602b      	str	r3, [r5, #0]
 800fc3a:	f7f3 fa60 	bl	80030fe <_kill>
 800fc3e:	1c43      	adds	r3, r0, #1
 800fc40:	d102      	bne.n	800fc48 <_kill_r+0x1c>
 800fc42:	682b      	ldr	r3, [r5, #0]
 800fc44:	b103      	cbz	r3, 800fc48 <_kill_r+0x1c>
 800fc46:	6023      	str	r3, [r4, #0]
 800fc48:	bd38      	pop	{r3, r4, r5, pc}
 800fc4a:	bf00      	nop
 800fc4c:	200019ac 	.word	0x200019ac

0800fc50 <_getpid_r>:
 800fc50:	f7f3 ba4d 	b.w	80030ee <_getpid>

0800fc54 <_init>:
 800fc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc56:	bf00      	nop
 800fc58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc5a:	bc08      	pop	{r3}
 800fc5c:	469e      	mov	lr, r3
 800fc5e:	4770      	bx	lr

0800fc60 <_fini>:
 800fc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc62:	bf00      	nop
 800fc64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc66:	bc08      	pop	{r3}
 800fc68:	469e      	mov	lr, r3
 800fc6a:	4770      	bx	lr
