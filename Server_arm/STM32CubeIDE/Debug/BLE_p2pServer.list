
BLE_p2pServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd54  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a7c  0800fe98  0800fe98  0001fe98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011914  08011914  00021914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801191c  0801191c  0002191c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011920  08011920  00021920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000020c  20000008  08011924  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000025  20000214  08011b30  00030214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  2000023c  08011b55  0003023c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001770  20000250  08011b66  00030250  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  200019c0  08011b66  000319c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003024d  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000001bc  20030028  20030028  00040000  2**2
                  ALLOC
 14 MB_MEM2       00000883  200301e4  200301e4  00040000  2**2
                  ALLOC
 15 .comment      00000043  00000000  00000000  0003027d  2**0
                  CONTENTS, READONLY
 16 .debug_info   0002feb8  00000000  00000000  000302c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00006ce6  00000000  00000000  00060178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002b30  00000000  00000000  00066e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000020fb  00000000  00000000  00069990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002dd19  00000000  00000000  0006ba8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00034432  00000000  00000000  000997a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000fd030  00000000  00000000  000cdbd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000c364  00000000  00000000  001cac08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 000000c0  00000000  00000000  001d6f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000250 	.word	0x20000250
 800015c:	00000000 	.word	0x00000000
 8000160:	0800fe7c 	.word	0x0800fe7c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000254 	.word	0x20000254
 800017c:	0800fe7c 	.word	0x0800fe7c

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b970 	b.w	8000e70 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9e08      	ldr	r6, [sp, #32]
 8000bae:	460d      	mov	r5, r1
 8000bb0:	4604      	mov	r4, r0
 8000bb2:	460f      	mov	r7, r1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d14a      	bne.n	8000c4e <__udivmoddi4+0xa6>
 8000bb8:	428a      	cmp	r2, r1
 8000bba:	4694      	mov	ip, r2
 8000bbc:	d965      	bls.n	8000c8a <__udivmoddi4+0xe2>
 8000bbe:	fab2 f382 	clz	r3, r2
 8000bc2:	b143      	cbz	r3, 8000bd6 <__udivmoddi4+0x2e>
 8000bc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bc8:	f1c3 0220 	rsb	r2, r3, #32
 8000bcc:	409f      	lsls	r7, r3
 8000bce:	fa20 f202 	lsr.w	r2, r0, r2
 8000bd2:	4317      	orrs	r7, r2
 8000bd4:	409c      	lsls	r4, r3
 8000bd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bda:	fa1f f58c 	uxth.w	r5, ip
 8000bde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000be2:	0c22      	lsrs	r2, r4, #16
 8000be4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000be8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bec:	fb01 f005 	mul.w	r0, r1, r5
 8000bf0:	4290      	cmp	r0, r2
 8000bf2:	d90a      	bls.n	8000c0a <__udivmoddi4+0x62>
 8000bf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bfc:	f080 811c 	bcs.w	8000e38 <__udivmoddi4+0x290>
 8000c00:	4290      	cmp	r0, r2
 8000c02:	f240 8119 	bls.w	8000e38 <__udivmoddi4+0x290>
 8000c06:	3902      	subs	r1, #2
 8000c08:	4462      	add	r2, ip
 8000c0a:	1a12      	subs	r2, r2, r0
 8000c0c:	b2a4      	uxth	r4, r4
 8000c0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c1a:	fb00 f505 	mul.w	r5, r0, r5
 8000c1e:	42a5      	cmp	r5, r4
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x90>
 8000c22:	eb1c 0404 	adds.w	r4, ip, r4
 8000c26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c2a:	f080 8107 	bcs.w	8000e3c <__udivmoddi4+0x294>
 8000c2e:	42a5      	cmp	r5, r4
 8000c30:	f240 8104 	bls.w	8000e3c <__udivmoddi4+0x294>
 8000c34:	4464      	add	r4, ip
 8000c36:	3802      	subs	r0, #2
 8000c38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	2100      	movs	r1, #0
 8000c40:	b11e      	cbz	r6, 8000c4a <__udivmoddi4+0xa2>
 8000c42:	40dc      	lsrs	r4, r3
 8000c44:	2300      	movs	r3, #0
 8000c46:	e9c6 4300 	strd	r4, r3, [r6]
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d908      	bls.n	8000c64 <__udivmoddi4+0xbc>
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	f000 80ed 	beq.w	8000e32 <__udivmoddi4+0x28a>
 8000c58:	2100      	movs	r1, #0
 8000c5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c5e:	4608      	mov	r0, r1
 8000c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c64:	fab3 f183 	clz	r1, r3
 8000c68:	2900      	cmp	r1, #0
 8000c6a:	d149      	bne.n	8000d00 <__udivmoddi4+0x158>
 8000c6c:	42ab      	cmp	r3, r5
 8000c6e:	d302      	bcc.n	8000c76 <__udivmoddi4+0xce>
 8000c70:	4282      	cmp	r2, r0
 8000c72:	f200 80f8 	bhi.w	8000e66 <__udivmoddi4+0x2be>
 8000c76:	1a84      	subs	r4, r0, r2
 8000c78:	eb65 0203 	sbc.w	r2, r5, r3
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	4617      	mov	r7, r2
 8000c80:	2e00      	cmp	r6, #0
 8000c82:	d0e2      	beq.n	8000c4a <__udivmoddi4+0xa2>
 8000c84:	e9c6 4700 	strd	r4, r7, [r6]
 8000c88:	e7df      	b.n	8000c4a <__udivmoddi4+0xa2>
 8000c8a:	b902      	cbnz	r2, 8000c8e <__udivmoddi4+0xe6>
 8000c8c:	deff      	udf	#255	; 0xff
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8090 	bne.w	8000db8 <__udivmoddi4+0x210>
 8000c98:	1a8a      	subs	r2, r1, r2
 8000c9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ca8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cac:	0c22      	lsrs	r2, r4, #16
 8000cae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cb2:	fb0e f005 	mul.w	r0, lr, r5
 8000cb6:	4290      	cmp	r0, r2
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x124>
 8000cba:	eb1c 0202 	adds.w	r2, ip, r2
 8000cbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x122>
 8000cc4:	4290      	cmp	r0, r2
 8000cc6:	f200 80cb 	bhi.w	8000e60 <__udivmoddi4+0x2b8>
 8000cca:	4645      	mov	r5, r8
 8000ccc:	1a12      	subs	r2, r2, r0
 8000cce:	b2a4      	uxth	r4, r4
 8000cd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000cd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cdc:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce0:	45a6      	cmp	lr, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x14e>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x14c>
 8000cee:	45a6      	cmp	lr, r4
 8000cf0:	f200 80bb 	bhi.w	8000e6a <__udivmoddi4+0x2c2>
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	eba4 040e 	sub.w	r4, r4, lr
 8000cfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cfe:	e79f      	b.n	8000c40 <__udivmoddi4+0x98>
 8000d00:	f1c1 0720 	rsb	r7, r1, #32
 8000d04:	408b      	lsls	r3, r1
 8000d06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d12:	fa20 f307 	lsr.w	r3, r0, r7
 8000d16:	40fd      	lsrs	r5, r7
 8000d18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d1c:	4323      	orrs	r3, r4
 8000d1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d22:	fa1f fe8c 	uxth.w	lr, ip
 8000d26:	fb09 5518 	mls	r5, r9, r8, r5
 8000d2a:	0c1c      	lsrs	r4, r3, #16
 8000d2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d30:	fb08 f50e 	mul.w	r5, r8, lr
 8000d34:	42a5      	cmp	r5, r4
 8000d36:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d3e:	d90b      	bls.n	8000d58 <__udivmoddi4+0x1b0>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d48:	f080 8088 	bcs.w	8000e5c <__udivmoddi4+0x2b4>
 8000d4c:	42a5      	cmp	r5, r4
 8000d4e:	f240 8085 	bls.w	8000e5c <__udivmoddi4+0x2b4>
 8000d52:	f1a8 0802 	sub.w	r8, r8, #2
 8000d56:	4464      	add	r4, ip
 8000d58:	1b64      	subs	r4, r4, r5
 8000d5a:	b29d      	uxth	r5, r3
 8000d5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d60:	fb09 4413 	mls	r4, r9, r3, r4
 8000d64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x1da>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d78:	d26c      	bcs.n	8000e54 <__udivmoddi4+0x2ac>
 8000d7a:	45a6      	cmp	lr, r4
 8000d7c:	d96a      	bls.n	8000e54 <__udivmoddi4+0x2ac>
 8000d7e:	3b02      	subs	r3, #2
 8000d80:	4464      	add	r4, ip
 8000d82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d86:	fba3 9502 	umull	r9, r5, r3, r2
 8000d8a:	eba4 040e 	sub.w	r4, r4, lr
 8000d8e:	42ac      	cmp	r4, r5
 8000d90:	46c8      	mov	r8, r9
 8000d92:	46ae      	mov	lr, r5
 8000d94:	d356      	bcc.n	8000e44 <__udivmoddi4+0x29c>
 8000d96:	d053      	beq.n	8000e40 <__udivmoddi4+0x298>
 8000d98:	b156      	cbz	r6, 8000db0 <__udivmoddi4+0x208>
 8000d9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000d9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000da2:	fa04 f707 	lsl.w	r7, r4, r7
 8000da6:	40ca      	lsrs	r2, r1
 8000da8:	40cc      	lsrs	r4, r1
 8000daa:	4317      	orrs	r7, r2
 8000dac:	e9c6 7400 	strd	r7, r4, [r6]
 8000db0:	4618      	mov	r0, r3
 8000db2:	2100      	movs	r1, #0
 8000db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db8:	f1c3 0120 	rsb	r1, r3, #32
 8000dbc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dc0:	fa20 f201 	lsr.w	r2, r0, r1
 8000dc4:	fa25 f101 	lsr.w	r1, r5, r1
 8000dc8:	409d      	lsls	r5, r3
 8000dca:	432a      	orrs	r2, r5
 8000dcc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ddc:	0c11      	lsrs	r1, r2, #16
 8000dde:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000de2:	fb00 f50e 	mul.w	r5, r0, lr
 8000de6:	428d      	cmp	r5, r1
 8000de8:	fa04 f403 	lsl.w	r4, r4, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x258>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000df6:	d22f      	bcs.n	8000e58 <__udivmoddi4+0x2b0>
 8000df8:	428d      	cmp	r5, r1
 8000dfa:	d92d      	bls.n	8000e58 <__udivmoddi4+0x2b0>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	1b49      	subs	r1, r1, r5
 8000e02:	b292      	uxth	r2, r2
 8000e04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e08:	fb07 1115 	mls	r1, r7, r5, r1
 8000e0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e10:	fb05 f10e 	mul.w	r1, r5, lr
 8000e14:	4291      	cmp	r1, r2
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x282>
 8000e18:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e20:	d216      	bcs.n	8000e50 <__udivmoddi4+0x2a8>
 8000e22:	4291      	cmp	r1, r2
 8000e24:	d914      	bls.n	8000e50 <__udivmoddi4+0x2a8>
 8000e26:	3d02      	subs	r5, #2
 8000e28:	4462      	add	r2, ip
 8000e2a:	1a52      	subs	r2, r2, r1
 8000e2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e30:	e738      	b.n	8000ca4 <__udivmoddi4+0xfc>
 8000e32:	4631      	mov	r1, r6
 8000e34:	4630      	mov	r0, r6
 8000e36:	e708      	b.n	8000c4a <__udivmoddi4+0xa2>
 8000e38:	4639      	mov	r1, r7
 8000e3a:	e6e6      	b.n	8000c0a <__udivmoddi4+0x62>
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	e6fb      	b.n	8000c38 <__udivmoddi4+0x90>
 8000e40:	4548      	cmp	r0, r9
 8000e42:	d2a9      	bcs.n	8000d98 <__udivmoddi4+0x1f0>
 8000e44:	ebb9 0802 	subs.w	r8, r9, r2
 8000e48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	e7a3      	b.n	8000d98 <__udivmoddi4+0x1f0>
 8000e50:	4645      	mov	r5, r8
 8000e52:	e7ea      	b.n	8000e2a <__udivmoddi4+0x282>
 8000e54:	462b      	mov	r3, r5
 8000e56:	e794      	b.n	8000d82 <__udivmoddi4+0x1da>
 8000e58:	4640      	mov	r0, r8
 8000e5a:	e7d1      	b.n	8000e00 <__udivmoddi4+0x258>
 8000e5c:	46d0      	mov	r8, sl
 8000e5e:	e77b      	b.n	8000d58 <__udivmoddi4+0x1b0>
 8000e60:	3d02      	subs	r5, #2
 8000e62:	4462      	add	r2, ip
 8000e64:	e732      	b.n	8000ccc <__udivmoddi4+0x124>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e70a      	b.n	8000c80 <__udivmoddi4+0xd8>
 8000e6a:	4464      	add	r4, ip
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	e742      	b.n	8000cf6 <__udivmoddi4+0x14e>

08000e70 <__aeabi_idiv0>:
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <LL_EXTI_EnableIT_32_63+0x24>)
 8000e7e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000e82:	4905      	ldr	r1, [pc, #20]	; (8000e98 <LL_EXTI_EnableIT_32_63+0x24>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	58000800 	.word	0x58000800

08000e9c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
}
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b085      	sub	sp, #20
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eda:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000ede:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eee:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000f0a:	f003 feb7 	bl	8004c7c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000f0e:	f003 febb 	bl	8004c88 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000f12:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000f16:	f7ff ffad 	bl	8000e74 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000f1a:	f00a f9eb 	bl	800b2f4 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000f1e:	f000 f821 	bl	8000f64 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000f22:	f000 f8c1 	bl	80010a8 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000f26:	bf00      	nop
}
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000f2c:	b5b0      	push	{r4, r5, r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <APPD_EnableCPU2+0x34>)
 8000f34:	1d3c      	adds	r4, r7, #4
 8000f36:	461d      	mov	r5, r3
 8000f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f40:	c403      	stmia	r4!, {r0, r1}
 8000f42:	8022      	strh	r2, [r4, #0]
 8000f44:	3402      	adds	r4, #2
 8000f46:	0c13      	lsrs	r3, r2, #16
 8000f48:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000f4a:	f00b ff23 	bl	800cd94 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	4618      	mov	r0, r3
 8000f52:	f00a fd74 	bl	800ba3e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000f56:	bf00      	nop
}
 8000f58:	3720      	adds	r7, #32
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	0800fe98 	.word	0x0800fe98

08000f64 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	77fb      	strb	r3, [r7, #31]
 8000f88:	e036      	b.n	8000ff8 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000f8a:	7ffb      	ldrb	r3, [r7, #31]
 8000f8c:	4a43      	ldr	r2, [pc, #268]	; (800109c <APPD_SetCPU2GpioConfig+0x138>)
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	4413      	add	r3, r2
 8000f92:	799b      	ldrb	r3, [r3, #6]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d02c      	beq.n	8000ff2 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000f98:	7ffb      	ldrb	r3, [r7, #31]
 8000f9a:	4a40      	ldr	r2, [pc, #256]	; (800109c <APPD_SetCPU2GpioConfig+0x138>)
 8000f9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000fa0:	4a3f      	ldr	r2, [pc, #252]	; (80010a0 <APPD_SetCPU2GpioConfig+0x13c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d01b      	beq.n	8000fde <APPD_SetCPU2GpioConfig+0x7a>
 8000fa6:	4a3e      	ldr	r2, [pc, #248]	; (80010a0 <APPD_SetCPU2GpioConfig+0x13c>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d821      	bhi.n	8000ff0 <APPD_SetCPU2GpioConfig+0x8c>
 8000fac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fb0:	d003      	beq.n	8000fba <APPD_SetCPU2GpioConfig+0x56>
 8000fb2:	4a3c      	ldr	r2, [pc, #240]	; (80010a4 <APPD_SetCPU2GpioConfig+0x140>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d009      	beq.n	8000fcc <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000fb8:	e01a      	b.n	8000ff0 <APPD_SetCPU2GpioConfig+0x8c>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000fba:	7ffb      	ldrb	r3, [r7, #31]
 8000fbc:	4a37      	ldr	r2, [pc, #220]	; (800109c <APPD_SetCPU2GpioConfig+0x138>)
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	4413      	add	r3, r2
 8000fc2:	889a      	ldrh	r2, [r3, #4]
 8000fc4:	8bbb      	ldrh	r3, [r7, #28]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	83bb      	strh	r3, [r7, #28]
          break;
 8000fca:	e012      	b.n	8000ff2 <APPD_SetCPU2GpioConfig+0x8e>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000fcc:	7ffb      	ldrb	r3, [r7, #31]
 8000fce:	4a33      	ldr	r2, [pc, #204]	; (800109c <APPD_SetCPU2GpioConfig+0x138>)
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	4413      	add	r3, r2
 8000fd4:	889a      	ldrh	r2, [r3, #4]
 8000fd6:	8b7b      	ldrh	r3, [r7, #26]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	837b      	strh	r3, [r7, #26]
          break;
 8000fdc:	e009      	b.n	8000ff2 <APPD_SetCPU2GpioConfig+0x8e>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000fde:	7ffb      	ldrb	r3, [r7, #31]
 8000fe0:	4a2e      	ldr	r2, [pc, #184]	; (800109c <APPD_SetCPU2GpioConfig+0x138>)
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	889a      	ldrh	r2, [r3, #4]
 8000fe8:	8b3b      	ldrh	r3, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	833b      	strh	r3, [r7, #24]
          break;
 8000fee:	e000      	b.n	8000ff2 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000ff0:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000ff2:	7ffb      	ldrb	r3, [r7, #31]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	77fb      	strb	r3, [r7, #31]
 8000ff8:	7ffb      	ldrb	r3, [r7, #31]
 8000ffa:	2b25      	cmp	r3, #37	; 0x25
 8000ffc:	d9c5      	bls.n	8000f8a <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 800100a:	8bbb      	ldrh	r3, [r7, #28]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d014      	beq.n	800103a <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8001010:	8bbb      	ldrh	r3, [r7, #28]
 8001012:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	2001      	movs	r0, #1
 8001016:	f7ff ff41 	bl	8000e9c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 800101a:	2001      	movs	r0, #1
 800101c:	f7ff ff57 	bl	8000ece <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	4619      	mov	r1, r3
 8001024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001028:	f004 fb62 	bl	80056f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 800102c:	8bbb      	ldrh	r3, [r7, #28]
 800102e:	2200      	movs	r2, #0
 8001030:	4619      	mov	r1, r3
 8001032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001036:	f004 fccb 	bl	80059d0 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 800103a:	8b7b      	ldrh	r3, [r7, #26]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d012      	beq.n	8001066 <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8001040:	8b7b      	ldrh	r3, [r7, #26]
 8001042:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	2002      	movs	r0, #2
 8001046:	f7ff ff29 	bl	8000e9c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 800104a:	2002      	movs	r0, #2
 800104c:	f7ff ff3f 	bl	8000ece <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	4619      	mov	r1, r3
 8001054:	4813      	ldr	r0, [pc, #76]	; (80010a4 <APPD_SetCPU2GpioConfig+0x140>)
 8001056:	f004 fb4b 	bl	80056f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 800105a:	8b7b      	ldrh	r3, [r7, #26]
 800105c:	2200      	movs	r2, #0
 800105e:	4619      	mov	r1, r3
 8001060:	4810      	ldr	r0, [pc, #64]	; (80010a4 <APPD_SetCPU2GpioConfig+0x140>)
 8001062:	f004 fcb5 	bl	80059d0 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8001066:	8b3b      	ldrh	r3, [r7, #24]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d013      	beq.n	8001094 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 800106c:	8b3b      	ldrh	r3, [r7, #24]
 800106e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001070:	2004      	movs	r0, #4
 8001072:	f7ff ff13 	bl	8000e9c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8001076:	2004      	movs	r0, #4
 8001078:	f7ff ff29 	bl	8000ece <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	4619      	mov	r1, r3
 8001080:	4807      	ldr	r0, [pc, #28]	; (80010a0 <APPD_SetCPU2GpioConfig+0x13c>)
 8001082:	f004 fb35 	bl	80056f0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8001086:	8b3b      	ldrh	r3, [r7, #24]
 8001088:	2200      	movs	r2, #0
 800108a:	4619      	mov	r1, r3
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <APPD_SetCPU2GpioConfig+0x13c>)
 800108e:	f004 fc9f 	bl	80059d0 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8001092:	bf00      	nop
 8001094:	bf00      	nop
}
 8001096:	3720      	adds	r7, #32
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	08011354 	.word	0x08011354
 80010a0:	48000800 	.word	0x48000800
 80010a4:	48000400 	.word	0x48000400

080010a8 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80010ac:	bf00      	nop
}
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	af00      	add	r7, sp, #0
#endif
  }
  else if (CFG_DEBUG_TRACE_UART == hw_uart1)
  {
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 80010ba:	f001 fd3b 	bl	8002b34 <MX_USART1_UART_Init>
#endif
  }
#endif

/* USER CODE END DbgOutputInit */
  return;
 80010be:	bf00      	nop
}
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	460b      	mov	r3, r1
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80010d0:	897a      	ldrh	r2, [r7, #10]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68f9      	ldr	r1, [r7, #12]
 80010d6:	2000      	movs	r0, #0
 80010d8:	f001 fb7c 	bl	80027d4 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 80010dc:	bf00      	nop
}
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <LL_C2_PWR_SetPowerMode+0x28>)
 80010ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010f2:	f023 0207 	bic.w	r2, r3, #7
 80010f6:	4905      	ldr	r1, [pc, #20]	; (800110c <LL_C2_PWR_SetPowerMode+0x28>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	58000400 	.word	0x58000400

08001110 <LL_EXTI_EnableIT_32_63>:
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <LL_EXTI_EnableIT_32_63+0x24>)
 800111a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800111e:	4905      	ldr	r1, [pc, #20]	; (8001134 <LL_EXTI_EnableIT_32_63+0x24>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4313      	orrs	r3, r2
 8001124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	58000800 	.word	0x58000800

08001138 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001144:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001146:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800114a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800114e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001152:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800115e:	4313      	orrs	r3, r2
 8001160:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	cafecafe 	.word	0xcafecafe

08001174 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800117c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4313      	orrs	r3, r2
 800118e:	608b      	str	r3, [r1, #8]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80011a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80011c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80011e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80011f4:	d101      	bne.n	80011fa <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800120a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800120e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800121a:	d101      	bne.n	8001220 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <LL_AHB3_GRP1_EnableClock>:
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001238:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800123a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4313      	orrs	r3, r2
 8001242:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001248:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4013      	ands	r3, r2
 800124e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001250:	68fb      	ldr	r3, [r7, #12]
}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <LL_DBGMCU_GetDeviceID+0x18>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e0042000 	.word	0xe0042000

0800127c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <LL_DBGMCU_GetRevisionID+0x18>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	0c1b      	lsrs	r3, r3, #16
 8001286:	b29b      	uxth	r3, r3
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e0042000 	.word	0xe0042000

08001298 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	041b      	lsls	r3, r3, #16
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	605a      	str	r2, [r3, #4]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	431a      	orrs	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	605a      	str	r2, [r3, #4]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	695a      	ldr	r2, [r3, #20]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	041b      	lsls	r3, r3, #16
 80012f0:	431a      	orrs	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	615a      	str	r2, [r3, #20]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	695a      	ldr	r2, [r3, #20]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	615a      	str	r2, [r3, #20]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	609a      	str	r2, [r3, #8]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	619a      	str	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <LL_LPM_EnableSleep+0x1c>)
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <LL_LPM_EnableSleep+0x1c>)
 8001366:	f023 0304 	bic.w	r3, r3, #4
 800136a:	6113      	str	r3, [r2, #16]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	22ff      	movs	r2, #255	; 0xff
 8001388:	625a      	str	r2, [r3, #36]	; 0x24
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	22ca      	movs	r2, #202	; 0xca
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2253      	movs	r2, #83	; 0x53
 80013a8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f023 0207 	bic.w	r2, r3, #7
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	609a      	str	r2, [r3, #8]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <MX_APPE_Config+0x18>)
 80013e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e6:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80013e8:	f000 f830 	bl	800144c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80013ec:	f000 f870 	bl	80014d0 <Config_HSE>

  return;
 80013f0:	bf00      	nop
}
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	58004000 	.word	0x58004000

080013f8 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80013fc:	f000 f87c 	bl	80014f8 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001400:	f000 f894 	bl	800152c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001404:	4909      	ldr	r1, [pc, #36]	; (800142c <MX_APPE_Init+0x34>)
 8001406:	2000      	movs	r0, #0
 8001408:	f000 ff3e 	bl	8002288 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 800140c:	f7ff fd7b 	bl	8000f06 <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001410:	2101      	movs	r1, #1
 8001412:	2001      	movs	r0, #1
 8001414:	f00b fd5c 	bl	800ced0 <UTIL_LPM_SetOffMode>

  Led_Init();
 8001418:	f000 f9ea 	bl	80017f0 <Led_Init>

  Button_Init();
 800141c:	f000 f9f8 	bl	8001810 <Button_Init>
  
  RxUART_Init();
 8001420:	f000 fa86 	bl	8001930 <RxUART_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001424:	f000 f890 	bl	8001548 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001428:	bf00      	nop
}
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000668 	.word	0x20000668

08001430 <Init_Smps>:

void Init_Smps(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001434:	bf00      	nop
}
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <Init_Exti>:

void Init_Exti(void)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001442:	2050      	movs	r0, #80	; 0x50
 8001444:	f7ff fe64 	bl	8001110 <LL_EXTI_EnableIT_32_63>

  return;
 8001448:	bf00      	nop
}
 800144a:	bd80      	pop	{r7, pc}

0800144c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8001450:	f000 f804 	bl	800145c <Reset_BackupDomain>

  Reset_IPCC();
 8001454:	f000 f81a 	bl	800148c <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001458:	bf00      	nop
}
 800145a:	bd80      	pop	{r7, pc}

0800145c <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001460:	f7ff febe 	bl	80011e0 <LL_RCC_IsActiveFlag_PINRST>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00d      	beq.n	8001486 <Reset_BackupDomain+0x2a>
 800146a:	f7ff fecc 	bl	8001206 <LL_RCC_IsActiveFlag_SFTRST>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d108      	bne.n	8001486 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001474:	f004 fb86 	bl	8005b84 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8001478:	f004 fb84 	bl	8005b84 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 800147c:	f7ff fe8e 	bl	800119c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001480:	f7ff fe9d 	bl	80011be <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001484:	bf00      	nop
 8001486:	bf00      	nop
}
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <Reset_IPCC>:

static void Reset_IPCC(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001490:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001494:	f7ff feca 	bl	800122c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8001498:	213f      	movs	r1, #63	; 0x3f
 800149a:	480c      	ldr	r0, [pc, #48]	; (80014cc <Reset_IPCC+0x40>)
 800149c:	f7ff ff42 	bl	8001324 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80014a0:	213f      	movs	r1, #63	; 0x3f
 80014a2:	480a      	ldr	r0, [pc, #40]	; (80014cc <Reset_IPCC+0x40>)
 80014a4:	f7ff ff4c 	bl	8001340 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80014a8:	213f      	movs	r1, #63	; 0x3f
 80014aa:	4808      	ldr	r0, [pc, #32]	; (80014cc <Reset_IPCC+0x40>)
 80014ac:	f7ff fef4 	bl	8001298 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80014b0:	213f      	movs	r1, #63	; 0x3f
 80014b2:	4806      	ldr	r0, [pc, #24]	; (80014cc <Reset_IPCC+0x40>)
 80014b4:	f7ff ff13 	bl	80012de <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80014b8:	213f      	movs	r1, #63	; 0x3f
 80014ba:	4804      	ldr	r0, [pc, #16]	; (80014cc <Reset_IPCC+0x40>)
 80014bc:	f7ff fefe 	bl	80012bc <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80014c0:	213f      	movs	r1, #63	; 0x3f
 80014c2:	4802      	ldr	r0, [pc, #8]	; (80014cc <Reset_IPCC+0x40>)
 80014c4:	f7ff ff1d 	bl	8001302 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80014c8:	bf00      	nop
}
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	58000c00 	.word	0x58000c00

080014d0 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f00a f946 	bl	800b768 <OTP_Read>
 80014dc:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	799b      	ldrb	r3, [r3, #6]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fe25 	bl	8001138 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80014ee:	bf00      	nop
 80014f0:	bf00      	nop
}
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <System_Init>:

static void System_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  Init_Smps();
 80014fc:	f7ff ff98 	bl	8001430 <Init_Smps>

  Init_Exti();
 8001500:	f7ff ff9d 	bl	800143e <Init_Exti>

  Init_Rtc();
 8001504:	f000 f802 	bl	800150c <Init_Rtc>

  return;
 8001508:	bf00      	nop
}
 800150a:	bd80      	pop	{r7, pc}

0800150c <Init_Rtc>:

static void Init_Rtc(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001510:	4805      	ldr	r0, [pc, #20]	; (8001528 <Init_Rtc+0x1c>)
 8001512:	f7ff ff40 	bl	8001396 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001516:	2100      	movs	r1, #0
 8001518:	4803      	ldr	r0, [pc, #12]	; (8001528 <Init_Rtc+0x1c>)
 800151a:	f7ff ff4c 	bl	80013b6 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800151e:	4802      	ldr	r0, [pc, #8]	; (8001528 <Init_Rtc+0x1c>)
 8001520:	f7ff ff2c 	bl	800137c <LL_RTC_EnableWriteProtection>

  return;
 8001524:	bf00      	nop
}
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40002800 	.word	0x40002800

0800152c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001530:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001534:	f7ff fe1e 	bl	8001174 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001538:	f00b fcb8 	bl	800ceac <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800153c:	2004      	movs	r0, #4
 800153e:	f7ff fdd1 	bl	80010e4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001542:	bf00      	nop
}
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800154e:	f00b fa6b 	bl	800ca28 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001552:	4a11      	ldr	r2, [pc, #68]	; (8001598 <appe_Tl_Init+0x50>)
 8001554:	2100      	movs	r1, #0
 8001556:	2040      	movs	r0, #64	; 0x40
 8001558:	f00b fde6 	bl	800d128 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <appe_Tl_Init+0x54>)
 800155e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <appe_Tl_Init+0x58>)
 8001562:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001564:	463b      	mov	r3, r7
 8001566:	4619      	mov	r1, r3
 8001568:	480e      	ldr	r0, [pc, #56]	; (80015a4 <appe_Tl_Init+0x5c>)
 800156a:	f00a fb43 	bl	800bbf4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <appe_Tl_Init+0x60>)
 8001570:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <appe_Tl_Init+0x64>)
 8001574:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <appe_Tl_Init+0x68>)
 8001578:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800157a:	f240 533c 	movw	r3, #1340	; 0x53c
 800157e:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	4618      	mov	r0, r3
 8001586:	f00b fb91 	bl	800ccac <TL_MM_Init>

  TL_Enable();
 800158a:	f00b fa47 	bl	800ca1c <TL_Enable>

  return;
 800158e:	bf00      	nop
}
 8001590:	3720      	adds	r7, #32
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	0800bc2d 	.word	0x0800bc2d
 800159c:	20030734 	.word	0x20030734
 80015a0:	080015b5 	.word	0x080015b5
 80015a4:	080015cd 	.word	0x080015cd
 80015a8:	2003094c 	.word	0x2003094c
 80015ac:	20030840 	.word	0x20030840
 80015b0:	200301f8 	.word	0x200301f8

080015b4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80015be:	bf00      	nop
}
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	330b      	adds	r3, #11
 80015da:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80015e6:	2b07      	cmp	r3, #7
 80015e8:	d860      	bhi.n	80016ac <APPE_SysUserEvtRx+0xe0>
 80015ea:	a201      	add	r2, pc, #4	; (adr r2, 80015f0 <APPE_SysUserEvtRx+0x24>)
 80015ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f0:	08001611 	.word	0x08001611
 80015f4:	08001653 	.word	0x08001653
 80015f8:	08001661 	.word	0x08001661
 80015fc:	080016ad 	.word	0x080016ad
 8001600:	0800167d 	.word	0x0800167d
 8001604:	0800168d 	.word	0x0800168d
 8001608:	08001695 	.word	0x08001695
 800160c:	080016a5 	.word	0x080016a5
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	4618      	mov	r0, r3
 8001616:	f00a fa3f 	bl	800ba98 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 800161a:	7b3b      	ldrb	r3, [r7, #12]
 800161c:	4619      	mov	r1, r3
 800161e:	7b7b      	ldrb	r3, [r7, #13]
 8001620:	461a      	mov	r2, r3
 8001622:	7bbb      	ldrb	r3, [r7, #14]
 8001624:	4824      	ldr	r0, [pc, #144]	; (80016b8 <APPE_SysUserEvtRx+0xec>)
 8001626:	f00c fbe9 	bl	800ddfc <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 800162a:	7c3b      	ldrb	r3, [r7, #16]
 800162c:	4619      	mov	r1, r3
 800162e:	4823      	ldr	r0, [pc, #140]	; (80016bc <APPE_SysUserEvtRx+0xf0>)
 8001630:	f00c fbe4 	bl	800ddfc <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8001634:	7dbb      	ldrb	r3, [r7, #22]
 8001636:	4619      	mov	r1, r3
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	461a      	mov	r2, r3
 800163c:	7e3b      	ldrb	r3, [r7, #24]
 800163e:	4820      	ldr	r0, [pc, #128]	; (80016c0 <APPE_SysUserEvtRx+0xf4>)
 8001640:	f00c fbdc 	bl	800ddfc <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8001644:	481f      	ldr	r0, [pc, #124]	; (80016c4 <APPE_SysUserEvtRx+0xf8>)
 8001646:	f00c fbd9 	bl	800ddfc <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 f870 	bl	8001730 <APPE_SysEvtReadyProcessing>
    break;
 8001650:	e02d      	b.n	80016ae <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8001652:	481d      	ldr	r0, [pc, #116]	; (80016c8 <APPE_SysUserEvtRx+0xfc>)
 8001654:	f00c fbd2 	bl	800ddfc <iprintf>
    APPE_SysEvtError(pPayload);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f843 	bl	80016e4 <APPE_SysEvtError>
    break;
 800165e:	e026      	b.n	80016ae <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001660:	481a      	ldr	r0, [pc, #104]	; (80016cc <APPE_SysUserEvtRx+0x100>)
 8001662:	f00c fc39 	bl	800ded8 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800166a:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	461a      	mov	r2, r3
 8001674:	4816      	ldr	r0, [pc, #88]	; (80016d0 <APPE_SysUserEvtRx+0x104>)
 8001676:	f00c fbc1 	bl	800ddfc <iprintf>
    break;
 800167a:	e018      	b.n	80016ae <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4619      	mov	r1, r3
 8001684:	4813      	ldr	r0, [pc, #76]	; (80016d4 <APPE_SysUserEvtRx+0x108>)
 8001686:	f00c fbb9 	bl	800ddfc <iprintf>
    break;
 800168a:	e010      	b.n	80016ae <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 800168c:	4812      	ldr	r0, [pc, #72]	; (80016d8 <APPE_SysUserEvtRx+0x10c>)
 800168e:	f00c fbb5 	bl	800ddfc <iprintf>
    break;
 8001692:	e00c      	b.n	80016ae <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4619      	mov	r1, r3
 800169c:	480f      	ldr	r0, [pc, #60]	; (80016dc <APPE_SysUserEvtRx+0x110>)
 800169e:	f00c fbad 	bl	800ddfc <iprintf>
    break;
 80016a2:	e004      	b.n	80016ae <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80016a4:	480e      	ldr	r0, [pc, #56]	; (80016e0 <APPE_SysUserEvtRx+0x114>)
 80016a6:	f00c fba9 	bl	800ddfc <iprintf>
    break;
 80016aa:	e000      	b.n	80016ae <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 80016ac:	bf00      	nop
  }

  return;
 80016ae:	bf00      	nop
}
 80016b0:	3720      	adds	r7, #32
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	0800feb4 	.word	0x0800feb4
 80016bc:	0800fed8 	.word	0x0800fed8
 80016c0:	0800fef4 	.word	0x0800fef4
 80016c4:	0800ff0c 	.word	0x0800ff0c
 80016c8:	0800ff2c 	.word	0x0800ff2c
 80016cc:	0800ff50 	.word	0x0800ff50
 80016d0:	0800ffa0 	.word	0x0800ffa0
 80016d4:	0800ffc8 	.word	0x0800ffc8
 80016d8:	08010004 	.word	0x08010004
 80016dc:	08010028 	.word	0x08010028
 80016e0:	08010064 	.word	0x08010064

080016e4 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	330b      	adds	r3, #11
 80016f2:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	3302      	adds	r3, #2
 80016f8:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	4619      	mov	r1, r3
 8001700:	4808      	ldr	r0, [pc, #32]	; (8001724 <APPE_SysEvtError+0x40>)
 8001702:	f00c fb7b 	bl	800ddfc <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d103      	bne.n	8001716 <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800170e:	4806      	ldr	r0, [pc, #24]	; (8001728 <APPE_SysEvtError+0x44>)
 8001710:	f00c fbe2 	bl	800ded8 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001714:	e003      	b.n	800171e <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <APPE_SysEvtError+0x48>)
 8001718:	f00c fbde 	bl	800ded8 <puts>
  return;
 800171c:	bf00      	nop
}
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	08010088 	.word	0x08010088
 8001728:	080100b8 	.word	0x080100b8
 800172c:	080100f4 	.word	0x080100f4

08001730 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	; 0x28
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001746:	2300      	movs	r3, #0
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	330b      	adds	r3, #11
 8001754:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3302      	adds	r3, #2
 800175a:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d128      	bne.n	80017b6 <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001764:	481d      	ldr	r0, [pc, #116]	; (80017dc <APPE_SysEvtReadyProcessing+0xac>)
 8001766:	f00c fbb7 	bl	800ded8 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800176a:	f7ff fbdf 	bl	8000f2c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800176e:	230f      	movs	r3, #15
 8001770:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001772:	237f      	movs	r3, #127	; 0x7f
 8001774:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001776:	f7ff fd81 	bl	800127c <LL_DBGMCU_GetRevisionID>
 800177a:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 800177c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800177e:	4818      	ldr	r0, [pc, #96]	; (80017e0 <APPE_SysEvtReadyProcessing+0xb0>)
 8001780:	f00c fb3c 	bl	800ddfc <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	b29b      	uxth	r3, r3
 8001788:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800178a:	f7ff fd69 	bl	8001260 <LL_DBGMCU_GetDeviceID>
 800178e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001790:	6a39      	ldr	r1, [r7, #32]
 8001792:	4814      	ldr	r0, [pc, #80]	; (80017e4 <APPE_SysEvtReadyProcessing+0xb4>)
 8001794:	f00c fb32 	bl	800ddfc <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001798:	6a3b      	ldr	r3, [r7, #32]
 800179a:	b29b      	uxth	r3, r3
 800179c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	4618      	mov	r0, r3
 80017a4:	f00a f962 	bl	800ba6c <SHCI_C2_Config>

    APP_BLE_Init();
 80017a8:	f001 fdfe 	bl	80033a8 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80017ac:	2100      	movs	r1, #0
 80017ae:	2001      	movs	r0, #1
 80017b0:	f00b fb8e 	bl	800ced0 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80017b4:	e00e      	b.n	80017d4 <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d106      	bne.n	80017cc <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 80017be:	480a      	ldr	r0, [pc, #40]	; (80017e8 <APPE_SysEvtReadyProcessing+0xb8>)
 80017c0:	f00c fb1c 	bl	800ddfc <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
  return;
 80017ca:	e003      	b.n	80017d4 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 80017cc:	4807      	ldr	r0, [pc, #28]	; (80017ec <APPE_SysEvtReadyProcessing+0xbc>)
 80017ce:	f00c fb15 	bl	800ddfc <iprintf>
  return;
 80017d2:	bf00      	nop
}
 80017d4:	3728      	adds	r7, #40	; 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	0801012c 	.word	0x0801012c
 80017e0:	08010148 	.word	0x08010148
 80017e4:	0801016c 	.word	0x0801016c
 80017e8:	0801018c 	.word	0x0801018c
 80017ec:	080101c0 	.word	0x080101c0

080017f0 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 80017f4:	2000      	movs	r0, #0
 80017f6:	f003 f85b 	bl	80048b0 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80017fa:	2001      	movs	r0, #1
 80017fc:	f003 f858 	bl	80048b0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001800:	2002      	movs	r0, #2
 8001802:	f003 f855 	bl	80048b0 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 8001806:	2001      	movs	r0, #1
 8001808:	f003 f88c 	bl	8004924 <BSP_LED_On>
#endif

  return;
 800180c:	bf00      	nop
}
 800180e:	bd80      	pop	{r7, pc}

08001810 <Button_Init>:

static void Button_Init( void )
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8001814:	2101      	movs	r1, #1
 8001816:	2000      	movs	r0, #0
 8001818:	f003 f8b8 	bl	800498c <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 800181c:	2101      	movs	r1, #1
 800181e:	2001      	movs	r0, #1
 8001820:	f003 f8b4 	bl	800498c <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8001824:	2101      	movs	r1, #1
 8001826:	2002      	movs	r0, #2
 8001828:	f003 f8b0 	bl	800498c <BSP_PB_Init>
#endif

  return;
 800182c:	bf00      	nop
}
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001838:	f003 f9fc 	bl	8004c34 <HAL_GetTick>
 800183c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001848:	d00a      	beq.n	8001860 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800184a:	f003 fa0b 	bl	8004c64 <HAL_GetTickFreq>
 800184e:	4603      	mov	r3, r0
 8001850:	461a      	mov	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4413      	add	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001858:	e002      	b.n	8001860 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800185a:	f7ff fd7f 	bl	800135c <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 800185e:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001860:	f003 f9e8 	bl	8004c34 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	429a      	cmp	r2, r3
 800186e:	d8f4      	bhi.n	800185a <HAL_Delay+0x2a>
  }
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800187e:	f04f 30ff 	mov.w	r0, #4294967295
 8001882:	f00b fb55 	bl	800cf30 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}

0800188a <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800188e:	bf00      	nop
}
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80018a2:	f04f 30ff 	mov.w	r0, #4294967295
 80018a6:	f00b fb43 	bl	800cf30 <UTIL_SEQ_Run>

  return;
 80018aa:	bf00      	nop
}
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80018ba:	2100      	movs	r1, #0
 80018bc:	2040      	movs	r0, #64	; 0x40
 80018be:	f00b fc55 	bl	800d16c <UTIL_SEQ_SetTask>
  return;
 80018c2:	bf00      	nop
}
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80018d2:	2002      	movs	r0, #2
 80018d4:	f00b fcb6 	bl	800d244 <UTIL_SEQ_SetEvt>
  return;
 80018d8:	bf00      	nop
}
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80018e8:	2002      	movs	r0, #2
 80018ea:	f00b fccb 	bl	800d284 <UTIL_SEQ_WaitEvt>
  return;
 80018ee:	bf00      	nop
}
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001900:	88fb      	ldrh	r3, [r7, #6]
 8001902:	2b10      	cmp	r3, #16
 8001904:	d006      	beq.n	8001914 <HAL_GPIO_EXTI_Callback+0x1e>
 8001906:	2b10      	cmp	r3, #16
 8001908:	dc0d      	bgt.n	8001926 <HAL_GPIO_EXTI_Callback+0x30>
 800190a:	2b01      	cmp	r3, #1
 800190c:	d005      	beq.n	800191a <HAL_GPIO_EXTI_Callback+0x24>
 800190e:	2b02      	cmp	r3, #2
 8001910:	d006      	beq.n	8001920 <HAL_GPIO_EXTI_Callback+0x2a>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 8001912:	e008      	b.n	8001926 <HAL_GPIO_EXTI_Callback+0x30>
      APP_BLE_Key_Button1_Action();
 8001914:	f002 f852 	bl	80039bc <APP_BLE_Key_Button1_Action>
      break; 
 8001918:	e006      	b.n	8001928 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 800191a:	f002 f855 	bl	80039c8 <APP_BLE_Key_Button2_Action>
      break; 
 800191e:	e003      	b.n	8001928 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 8001920:	f002 f85a 	bl	80039d8 <APP_BLE_Key_Button3_Action>
      break;
 8001924:	e000      	b.n	8001928 <HAL_GPIO_EXTI_Callback+0x32>
      break;
 8001926:	bf00      	nop

  }
  return;
 8001928:	bf00      	nop
}
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <RxUART_Init>:

static void RxUART_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <RxUART_Init+0x14>)
 8001936:	2201      	movs	r2, #1
 8001938:	4903      	ldr	r1, [pc, #12]	; (8001948 <RxUART_Init+0x18>)
 800193a:	2000      	movs	r0, #0
 800193c:	f000 ff10 	bl	8002760 <HW_UART_Receive_IT>
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	0800194d 	.word	0x0800194d
 8001948:	20000274 	.word	0x20000274

0800194c <RxCpltCallback>:

static void RxCpltCallback(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <RxCpltCallback+0x5c>)
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	2bff      	cmp	r3, #255	; 0xff
 8001956:	d81e      	bhi.n	8001996 <RxCpltCallback+0x4a>
  {
    if (aRxBuffer[0] == '\r')
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <RxCpltCallback+0x60>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b0d      	cmp	r3, #13
 800195e:	d10f      	bne.n	8001980 <RxCpltCallback+0x34>
    {
      APP_DBG_MSG("received %s\n", CommandString);
 8001960:	4913      	ldr	r1, [pc, #76]	; (80019b0 <RxCpltCallback+0x64>)
 8001962:	4814      	ldr	r0, [pc, #80]	; (80019b4 <RxCpltCallback+0x68>)
 8001964:	f00c fa4a 	bl	800ddfc <iprintf>

      UartCmdExecute();
 8001968:	f000 f828 	bl	80019bc <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 800196c:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <RxCpltCallback+0x5c>)
 800196e:	2200      	movs	r2, #0
 8001970:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 8001972:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001976:	2100      	movs	r1, #0
 8001978:	480d      	ldr	r0, [pc, #52]	; (80019b0 <RxCpltCallback+0x64>)
 800197a:	f00c fb8d 	bl	800e098 <memset>
 800197e:	e00a      	b.n	8001996 <RxCpltCallback+0x4a>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <RxCpltCallback+0x5c>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	1c5a      	adds	r2, r3, #1
 8001986:	b291      	uxth	r1, r2
 8001988:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <RxCpltCallback+0x5c>)
 800198a:	8011      	strh	r1, [r2, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <RxCpltCallback+0x60>)
 8001990:	7819      	ldrb	r1, [r3, #0]
 8001992:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <RxCpltCallback+0x64>)
 8001994:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <RxCpltCallback+0x6c>)
 8001998:	2201      	movs	r2, #1
 800199a:	4904      	ldr	r1, [pc, #16]	; (80019ac <RxCpltCallback+0x60>)
 800199c:	2000      	movs	r0, #0
 800199e:	f000 fedf 	bl	8002760 <HW_UART_Receive_IT>
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	2000037c 	.word	0x2000037c
 80019ac:	20000274 	.word	0x20000274
 80019b0:	2000027c 	.word	0x2000027c
 80019b4:	080101f4 	.word	0x080101f4
 80019b8:	0800194d 	.word	0x0800194d

080019bc <UartCmdExecute>:

static void UartCmdExecute(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 80019c0:	491c      	ldr	r1, [pc, #112]	; (8001a34 <UartCmdExecute+0x78>)
 80019c2:	481d      	ldr	r0, [pc, #116]	; (8001a38 <UartCmdExecute+0x7c>)
 80019c4:	f7fe fbdc 	bl	8000180 <strcmp>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d109      	bne.n	80019e2 <UartCmdExecute+0x26>
  {
    APP_DBG_MSG("SW1 OK\n");
 80019ce:	481b      	ldr	r0, [pc, #108]	; (8001a3c <UartCmdExecute+0x80>)
 80019d0:	f00c fa82 	bl	800ded8 <puts>
    exti_handle.Line = EXTI_LINE_4;
 80019d4:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <UartCmdExecute+0x84>)
 80019d6:	4a1b      	ldr	r2, [pc, #108]	; (8001a44 <UartCmdExecute+0x88>)
 80019d8:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80019da:	4819      	ldr	r0, [pc, #100]	; (8001a40 <UartCmdExecute+0x84>)
 80019dc:	f003 fe66 	bl	80056ac <HAL_EXTI_GenerateSWI>
  }
  else
  {
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
  }
}
 80019e0:	e026      	b.n	8001a30 <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 80019e2:	4919      	ldr	r1, [pc, #100]	; (8001a48 <UartCmdExecute+0x8c>)
 80019e4:	4814      	ldr	r0, [pc, #80]	; (8001a38 <UartCmdExecute+0x7c>)
 80019e6:	f7fe fbcb 	bl	8000180 <strcmp>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d10a      	bne.n	8001a06 <UartCmdExecute+0x4a>
    APP_DBG_MSG("SW2 OK\n");
 80019f0:	4816      	ldr	r0, [pc, #88]	; (8001a4c <UartCmdExecute+0x90>)
 80019f2:	f00c fa71 	bl	800ded8 <puts>
    exti_handle.Line = EXTI_LINE_0;
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <UartCmdExecute+0x84>)
 80019f8:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 80019fc:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80019fe:	4810      	ldr	r0, [pc, #64]	; (8001a40 <UartCmdExecute+0x84>)
 8001a00:	f003 fe54 	bl	80056ac <HAL_EXTI_GenerateSWI>
}
 8001a04:	e014      	b.n	8001a30 <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW3") == 0)
 8001a06:	4912      	ldr	r1, [pc, #72]	; (8001a50 <UartCmdExecute+0x94>)
 8001a08:	480b      	ldr	r0, [pc, #44]	; (8001a38 <UartCmdExecute+0x7c>)
 8001a0a:	f7fe fbb9 	bl	8000180 <strcmp>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d109      	bne.n	8001a28 <UartCmdExecute+0x6c>
    APP_DBG_MSG("SW3 OK\n");
 8001a14:	480f      	ldr	r0, [pc, #60]	; (8001a54 <UartCmdExecute+0x98>)
 8001a16:	f00c fa5f 	bl	800ded8 <puts>
    exti_handle.Line = EXTI_LINE_1;
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <UartCmdExecute+0x84>)
 8001a1c:	4a0e      	ldr	r2, [pc, #56]	; (8001a58 <UartCmdExecute+0x9c>)
 8001a1e:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8001a20:	4807      	ldr	r0, [pc, #28]	; (8001a40 <UartCmdExecute+0x84>)
 8001a22:	f003 fe43 	bl	80056ac <HAL_EXTI_GenerateSWI>
}
 8001a26:	e003      	b.n	8001a30 <UartCmdExecute+0x74>
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
 8001a28:	4903      	ldr	r1, [pc, #12]	; (8001a38 <UartCmdExecute+0x7c>)
 8001a2a:	480c      	ldr	r0, [pc, #48]	; (8001a5c <UartCmdExecute+0xa0>)
 8001a2c:	f00c f9e6 	bl	800ddfc <iprintf>
}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	08010204 	.word	0x08010204
 8001a38:	2000027c 	.word	0x2000027c
 8001a3c:	08010208 	.word	0x08010208
 8001a40:	2000026c 	.word	0x2000026c
 8001a44:	16000004 	.word	0x16000004
 8001a48:	08010210 	.word	0x08010210
 8001a4c:	08010214 	.word	0x08010214
 8001a50:	0801021c 	.word	0x0801021c
 8001a54:	08010220 	.word	0x08010220
 8001a58:	16000001 	.word	0x16000001
 8001a5c:	08010228 	.word	0x08010228

08001a60 <LL_EXTI_EnableIT_0_31>:
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <LL_EXTI_EnableIT_0_31+0x24>)
 8001a6a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001a6e:	4905      	ldr	r1, [pc, #20]	; (8001a84 <LL_EXTI_EnableIT_0_31+0x24>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	58000800 	.word	0x58000800

08001a88 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4904      	ldr	r1, [pc, #16]	; (8001aa8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	600b      	str	r3, [r1, #0]

}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	58000800 	.word	0x58000800

08001aac <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <ReadRtcSsrValue+0x3c>)
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <ReadRtcSsrValue+0x3c>)
 8001abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001ac2:	e005      	b.n	8001ad0 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001ac8:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <ReadRtcSsrValue+0x3c>)
 8001aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d1f5      	bne.n	8001ac4 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001ad8:	683b      	ldr	r3, [r7, #0]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40002800 	.word	0x40002800

08001aec <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	460a      	mov	r2, r1
 8001af6:	71fb      	strb	r3, [r7, #7]
 8001af8:	4613      	mov	r3, r2
 8001afa:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001afc:	79ba      	ldrb	r2, [r7, #6]
 8001afe:	491d      	ldr	r1, [pc, #116]	; (8001b74 <LinkTimerAfter+0x88>)
 8001b00:	4613      	mov	r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	4413      	add	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	440b      	add	r3, r1
 8001b0a:	3315      	adds	r3, #21
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	2b06      	cmp	r3, #6
 8001b14:	d009      	beq.n	8001b2a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001b16:	7bfa      	ldrb	r2, [r7, #15]
 8001b18:	4916      	ldr	r1, [pc, #88]	; (8001b74 <LinkTimerAfter+0x88>)
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	440b      	add	r3, r1
 8001b24:	3314      	adds	r3, #20
 8001b26:	79fa      	ldrb	r2, [r7, #7]
 8001b28:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001b2a:	79fa      	ldrb	r2, [r7, #7]
 8001b2c:	4911      	ldr	r1, [pc, #68]	; (8001b74 <LinkTimerAfter+0x88>)
 8001b2e:	4613      	mov	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4413      	add	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	440b      	add	r3, r1
 8001b38:	3315      	adds	r3, #21
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001b3e:	79fa      	ldrb	r2, [r7, #7]
 8001b40:	490c      	ldr	r1, [pc, #48]	; (8001b74 <LinkTimerAfter+0x88>)
 8001b42:	4613      	mov	r3, r2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	4413      	add	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	440b      	add	r3, r1
 8001b4c:	3314      	adds	r3, #20
 8001b4e:	79ba      	ldrb	r2, [r7, #6]
 8001b50:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001b52:	79ba      	ldrb	r2, [r7, #6]
 8001b54:	4907      	ldr	r1, [pc, #28]	; (8001b74 <LinkTimerAfter+0x88>)
 8001b56:	4613      	mov	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	440b      	add	r3, r1
 8001b60:	3315      	adds	r3, #21
 8001b62:	79fa      	ldrb	r2, [r7, #7]
 8001b64:	701a      	strb	r2, [r3, #0]

  return;
 8001b66:	bf00      	nop
}
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000380 	.word	0x20000380

08001b78 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	460a      	mov	r2, r1
 8001b82:	71fb      	strb	r3, [r7, #7]
 8001b84:	4613      	mov	r3, r2
 8001b86:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001b88:	4b29      	ldr	r3, [pc, #164]	; (8001c30 <LinkTimerBefore+0xb8>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	79ba      	ldrb	r2, [r7, #6]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d032      	beq.n	8001bfa <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001b94:	79ba      	ldrb	r2, [r7, #6]
 8001b96:	4927      	ldr	r1, [pc, #156]	; (8001c34 <LinkTimerBefore+0xbc>)
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	440b      	add	r3, r1
 8001ba2:	3314      	adds	r3, #20
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001ba8:	7bfa      	ldrb	r2, [r7, #15]
 8001baa:	4922      	ldr	r1, [pc, #136]	; (8001c34 <LinkTimerBefore+0xbc>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3315      	adds	r3, #21
 8001bb8:	79fa      	ldrb	r2, [r7, #7]
 8001bba:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001bbc:	79fa      	ldrb	r2, [r7, #7]
 8001bbe:	491d      	ldr	r1, [pc, #116]	; (8001c34 <LinkTimerBefore+0xbc>)
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	440b      	add	r3, r1
 8001bca:	3315      	adds	r3, #21
 8001bcc:	79ba      	ldrb	r2, [r7, #6]
 8001bce:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001bd0:	79fa      	ldrb	r2, [r7, #7]
 8001bd2:	4918      	ldr	r1, [pc, #96]	; (8001c34 <LinkTimerBefore+0xbc>)
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	440b      	add	r3, r1
 8001bde:	3314      	adds	r3, #20
 8001be0:	7bfa      	ldrb	r2, [r7, #15]
 8001be2:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001be4:	79ba      	ldrb	r2, [r7, #6]
 8001be6:	4913      	ldr	r1, [pc, #76]	; (8001c34 <LinkTimerBefore+0xbc>)
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3314      	adds	r3, #20
 8001bf4:	79fa      	ldrb	r2, [r7, #7]
 8001bf6:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001bf8:	e014      	b.n	8001c24 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001bfa:	79fa      	ldrb	r2, [r7, #7]
 8001bfc:	490d      	ldr	r1, [pc, #52]	; (8001c34 <LinkTimerBefore+0xbc>)
 8001bfe:	4613      	mov	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	3315      	adds	r3, #21
 8001c0a:	79ba      	ldrb	r2, [r7, #6]
 8001c0c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001c0e:	79ba      	ldrb	r2, [r7, #6]
 8001c10:	4908      	ldr	r1, [pc, #32]	; (8001c34 <LinkTimerBefore+0xbc>)
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	440b      	add	r3, r1
 8001c1c:	3314      	adds	r3, #20
 8001c1e:	79fa      	ldrb	r2, [r7, #7]
 8001c20:	701a      	strb	r2, [r3, #0]
  return;
 8001c22:	bf00      	nop
}
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000410 	.word	0x20000410
 8001c34:	20000380 	.word	0x20000380

08001c38 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001c42:	4b4e      	ldr	r3, [pc, #312]	; (8001d7c <linkTimer+0x144>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b06      	cmp	r3, #6
 8001c4a:	d118      	bne.n	8001c7e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001c4c:	4b4b      	ldr	r3, [pc, #300]	; (8001d7c <linkTimer+0x144>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4b4b      	ldr	r3, [pc, #300]	; (8001d80 <linkTimer+0x148>)
 8001c54:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001c56:	4a49      	ldr	r2, [pc, #292]	; (8001d7c <linkTimer+0x144>)
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001c5c:	79fa      	ldrb	r2, [r7, #7]
 8001c5e:	4949      	ldr	r1, [pc, #292]	; (8001d84 <linkTimer+0x14c>)
 8001c60:	4613      	mov	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4413      	add	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	440b      	add	r3, r1
 8001c6a:	3315      	adds	r3, #21
 8001c6c:	2206      	movs	r2, #6
 8001c6e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001c70:	4b45      	ldr	r3, [pc, #276]	; (8001d88 <linkTimer+0x150>)
 8001c72:	f04f 32ff 	mov.w	r2, #4294967295
 8001c76:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	81fb      	strh	r3, [r7, #14]
 8001c7c:	e078      	b.n	8001d70 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001c7e:	f000 f909 	bl	8001e94 <ReturnTimeElapsed>
 8001c82:	4603      	mov	r3, r0
 8001c84:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001c86:	79fa      	ldrb	r2, [r7, #7]
 8001c88:	493e      	ldr	r1, [pc, #248]	; (8001d84 <linkTimer+0x14c>)
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	440b      	add	r3, r1
 8001c94:	3308      	adds	r3, #8
 8001c96:	6819      	ldr	r1, [r3, #0]
 8001c98:	89fb      	ldrh	r3, [r7, #14]
 8001c9a:	79fa      	ldrb	r2, [r7, #7]
 8001c9c:	4419      	add	r1, r3
 8001c9e:	4839      	ldr	r0, [pc, #228]	; (8001d84 <linkTimer+0x14c>)
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4403      	add	r3, r0
 8001caa:	3308      	adds	r3, #8
 8001cac:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001cae:	79fa      	ldrb	r2, [r7, #7]
 8001cb0:	4934      	ldr	r1, [pc, #208]	; (8001d84 <linkTimer+0x14c>)
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	440b      	add	r3, r1
 8001cbc:	3308      	adds	r3, #8
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001cc2:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <linkTimer+0x144>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4a2e      	ldr	r2, [pc, #184]	; (8001d84 <linkTimer+0x14c>)
 8001ccc:	460b      	mov	r3, r1
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	440b      	add	r3, r1
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3308      	adds	r3, #8
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d337      	bcc.n	8001d50 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001ce0:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <linkTimer+0x144>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001ce6:	7b7a      	ldrb	r2, [r7, #13]
 8001ce8:	4926      	ldr	r1, [pc, #152]	; (8001d84 <linkTimer+0x14c>)
 8001cea:	4613      	mov	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3315      	adds	r3, #21
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001cfa:	e013      	b.n	8001d24 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001cfc:	7b7a      	ldrb	r2, [r7, #13]
 8001cfe:	4921      	ldr	r1, [pc, #132]	; (8001d84 <linkTimer+0x14c>)
 8001d00:	4613      	mov	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	4413      	add	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	440b      	add	r3, r1
 8001d0a:	3315      	adds	r3, #21
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001d10:	7b7a      	ldrb	r2, [r7, #13]
 8001d12:	491c      	ldr	r1, [pc, #112]	; (8001d84 <linkTimer+0x14c>)
 8001d14:	4613      	mov	r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4413      	add	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	440b      	add	r3, r1
 8001d1e:	3315      	adds	r3, #21
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001d24:	7b3b      	ldrb	r3, [r7, #12]
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d00b      	beq.n	8001d42 <linkTimer+0x10a>
 8001d2a:	7b3a      	ldrb	r2, [r7, #12]
 8001d2c:	4915      	ldr	r1, [pc, #84]	; (8001d84 <linkTimer+0x14c>)
 8001d2e:	4613      	mov	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	440b      	add	r3, r1
 8001d38:	3308      	adds	r3, #8
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d2dc      	bcs.n	8001cfc <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001d42:	7b7a      	ldrb	r2, [r7, #13]
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	4611      	mov	r1, r2
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff fecf 	bl	8001aec <LinkTimerAfter>
 8001d4e:	e00f      	b.n	8001d70 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <linkTimer+0x144>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	4611      	mov	r1, r2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff ff0c 	bl	8001b78 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <linkTimer+0x144>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <linkTimer+0x148>)
 8001d68:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001d6a:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <linkTimer+0x144>)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001d70:	89fb      	ldrh	r3, [r7, #14]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000410 	.word	0x20000410
 8001d80:	20000411 	.word	0x20000411
 8001d84:	20000380 	.word	0x20000380
 8001d88:	20000414 	.word	0x20000414

08001d8c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	460a      	mov	r2, r1
 8001d96:	71fb      	strb	r3, [r7, #7]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001d9c:	4b39      	ldr	r3, [pc, #228]	; (8001e84 <UnlinkTimer+0xf8>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	79fa      	ldrb	r2, [r7, #7]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d111      	bne.n	8001dcc <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001da8:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <UnlinkTimer+0xf8>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <UnlinkTimer+0xfc>)
 8001db0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001db2:	79fa      	ldrb	r2, [r7, #7]
 8001db4:	4935      	ldr	r1, [pc, #212]	; (8001e8c <UnlinkTimer+0x100>)
 8001db6:	4613      	mov	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	440b      	add	r3, r1
 8001dc0:	3315      	adds	r3, #21
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4b2f      	ldr	r3, [pc, #188]	; (8001e84 <UnlinkTimer+0xf8>)
 8001dc8:	701a      	strb	r2, [r3, #0]
 8001dca:	e03e      	b.n	8001e4a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001dcc:	79fa      	ldrb	r2, [r7, #7]
 8001dce:	492f      	ldr	r1, [pc, #188]	; (8001e8c <UnlinkTimer+0x100>)
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	440b      	add	r3, r1
 8001dda:	3314      	adds	r3, #20
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001de0:	79fa      	ldrb	r2, [r7, #7]
 8001de2:	492a      	ldr	r1, [pc, #168]	; (8001e8c <UnlinkTimer+0x100>)
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	440b      	add	r3, r1
 8001dee:	3315      	adds	r3, #21
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001df4:	79f9      	ldrb	r1, [r7, #7]
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	4824      	ldr	r0, [pc, #144]	; (8001e8c <UnlinkTimer+0x100>)
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	440b      	add	r3, r1
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4403      	add	r3, r0
 8001e04:	3315      	adds	r3, #21
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	b2d8      	uxtb	r0, r3
 8001e0a:	4920      	ldr	r1, [pc, #128]	; (8001e8c <UnlinkTimer+0x100>)
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	440b      	add	r3, r1
 8001e16:	3315      	adds	r3, #21
 8001e18:	4602      	mov	r2, r0
 8001e1a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e1c:	7bbb      	ldrb	r3, [r7, #14]
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d013      	beq.n	8001e4a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001e22:	79f9      	ldrb	r1, [r7, #7]
 8001e24:	7bba      	ldrb	r2, [r7, #14]
 8001e26:	4819      	ldr	r0, [pc, #100]	; (8001e8c <UnlinkTimer+0x100>)
 8001e28:	460b      	mov	r3, r1
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	440b      	add	r3, r1
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4403      	add	r3, r0
 8001e32:	3314      	adds	r3, #20
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	b2d8      	uxtb	r0, r3
 8001e38:	4914      	ldr	r1, [pc, #80]	; (8001e8c <UnlinkTimer+0x100>)
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	440b      	add	r3, r1
 8001e44:	3314      	adds	r3, #20
 8001e46:	4602      	mov	r2, r0
 8001e48:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001e4a:	79fa      	ldrb	r2, [r7, #7]
 8001e4c:	490f      	ldr	r1, [pc, #60]	; (8001e8c <UnlinkTimer+0x100>)
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	440b      	add	r3, r1
 8001e58:	330c      	adds	r3, #12
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <UnlinkTimer+0xf8>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b06      	cmp	r3, #6
 8001e66:	d107      	bne.n	8001e78 <UnlinkTimer+0xec>
 8001e68:	79bb      	ldrb	r3, [r7, #6]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d104      	bne.n	8001e78 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <UnlinkTimer+0x104>)
 8001e70:	f04f 32ff 	mov.w	r2, #4294967295
 8001e74:	601a      	str	r2, [r3, #0]
  }

  return;
 8001e76:	bf00      	nop
 8001e78:	bf00      	nop
}
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	20000410 	.word	0x20000410
 8001e88:	20000411 	.word	0x20000411
 8001e8c:	20000380 	.word	0x20000380
 8001e90:	20000414 	.word	0x20000414

08001e94 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001e9a:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <ReturnTimeElapsed+0x70>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea2:	d026      	beq.n	8001ef2 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001ea4:	f7ff fe02 	bl	8001aac <ReadRtcSsrValue>
 8001ea8:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <ReturnTimeElapsed+0x70>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d805      	bhi.n	8001ec0 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <ReturnTimeElapsed+0x70>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	607b      	str	r3, [r7, #4]
 8001ebe:	e00a      	b.n	8001ed6 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <ReturnTimeElapsed+0x74>)
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001ecc:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <ReturnTimeElapsed+0x70>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <ReturnTimeElapsed+0x78>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <ReturnTimeElapsed+0x7c>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	40d3      	lsrs	r3, r2
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	e001      	b.n	8001ef6 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	b29b      	uxth	r3, r3
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000414 	.word	0x20000414
 8001f08:	2000041c 	.word	0x2000041c
 8001f0c:	2000041a 	.word	0x2000041a
 8001f10:	20000419 	.word	0x20000419

08001f14 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d108      	bne.n	8001f36 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001f24:	f7ff fdc2 	bl	8001aac <ReadRtcSsrValue>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	4a21      	ldr	r2, [pc, #132]	; (8001fb0 <RestartWakeupCounter+0x9c>)
 8001f2c:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001f2e:	2003      	movs	r0, #3
 8001f30:	f003 f82d 	bl	8004f8e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001f34:	e039      	b.n	8001faa <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001f36:	88fb      	ldrh	r3, [r7, #6]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d803      	bhi.n	8001f44 <RestartWakeupCounter+0x30>
 8001f3c:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <RestartWakeupCounter+0xa0>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d002      	beq.n	8001f4a <RestartWakeupCounter+0x36>
      Value -= 1;
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001f4a:	bf00      	nop
 8001f4c:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <RestartWakeupCounter+0xa4>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f8      	beq.n	8001f4c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001f5a:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <RestartWakeupCounter+0xa4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <RestartWakeupCounter+0xa4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001f6a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <RestartWakeupCounter+0xa8>)
 8001f6e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f72:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001f74:	2003      	movs	r0, #3
 8001f76:	f003 f818 	bl	8004faa <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <RestartWakeupCounter+0xac>)
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	0c1b      	lsrs	r3, r3, #16
 8001f80:	041b      	lsls	r3, r3, #16
 8001f82:	88fa      	ldrh	r2, [r7, #6]
 8001f84:	490e      	ldr	r1, [pc, #56]	; (8001fc0 <RestartWakeupCounter+0xac>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001f8a:	f7ff fd8f 	bl	8001aac <ReadRtcSsrValue>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <RestartWakeupCounter+0x9c>)
 8001f92:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001f94:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <RestartWakeupCounter+0xa4>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <RestartWakeupCounter+0xa4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fa2:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001fa4:	f3af 8000 	nop.w
  return ;
 8001fa8:	bf00      	nop
}
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000414 	.word	0x20000414
 8001fb4:	20000419 	.word	0x20000419
 8001fb8:	20000668 	.word	0x20000668
 8001fbc:	58000800 	.word	0x58000800
 8001fc0:	40002800 	.word	0x40002800

08001fc4 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001fca:	4b45      	ldr	r3, [pc, #276]	; (80020e0 <RescheduleTimerList+0x11c>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fd6:	d107      	bne.n	8001fe8 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001fd8:	bf00      	nop
 8001fda:	4b42      	ldr	r3, [pc, #264]	; (80020e4 <RescheduleTimerList+0x120>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f8      	bne.n	8001fda <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001fe8:	4b3e      	ldr	r3, [pc, #248]	; (80020e4 <RescheduleTimerList+0x120>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	4b3d      	ldr	r3, [pc, #244]	; (80020e4 <RescheduleTimerList+0x120>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ff6:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001ff8:	4b3b      	ldr	r3, [pc, #236]	; (80020e8 <RescheduleTimerList+0x124>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001ffe:	7bfa      	ldrb	r2, [r7, #15]
 8002000:	493a      	ldr	r1, [pc, #232]	; (80020ec <RescheduleTimerList+0x128>)
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	440b      	add	r3, r1
 800200c:	3308      	adds	r3, #8
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002012:	f7ff ff3f 	bl	8001e94 <ReturnTimeElapsed>
 8002016:	4603      	mov	r3, r0
 8002018:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	429a      	cmp	r2, r3
 8002020:	d205      	bcs.n	800202e <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002026:	4b32      	ldr	r3, [pc, #200]	; (80020f0 <RescheduleTimerList+0x12c>)
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
 800202c:	e04d      	b.n	80020ca <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	4a30      	ldr	r2, [pc, #192]	; (80020f4 <RescheduleTimerList+0x130>)
 8002032:	8812      	ldrh	r2, [r2, #0]
 8002034:	b292      	uxth	r2, r2
 8002036:	4413      	add	r3, r2
 8002038:	461a      	mov	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	4293      	cmp	r3, r2
 800203e:	d906      	bls.n	800204e <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002040:	4b2c      	ldr	r3, [pc, #176]	; (80020f4 <RescheduleTimerList+0x130>)
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002046:	4b2a      	ldr	r3, [pc, #168]	; (80020f0 <RescheduleTimerList+0x12c>)
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
 800204c:	e03d      	b.n	80020ca <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	b29a      	uxth	r2, r3
 8002052:	88fb      	ldrh	r3, [r7, #6]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002058:	4b25      	ldr	r3, [pc, #148]	; (80020f0 <RescheduleTimerList+0x12c>)
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800205e:	e034      	b.n	80020ca <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002060:	7bfa      	ldrb	r2, [r7, #15]
 8002062:	4922      	ldr	r1, [pc, #136]	; (80020ec <RescheduleTimerList+0x128>)
 8002064:	4613      	mov	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4413      	add	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	440b      	add	r3, r1
 800206e:	3308      	adds	r3, #8
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	429a      	cmp	r2, r3
 8002076:	d20a      	bcs.n	800208e <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002078:	7bfa      	ldrb	r2, [r7, #15]
 800207a:	491c      	ldr	r1, [pc, #112]	; (80020ec <RescheduleTimerList+0x128>)
 800207c:	4613      	mov	r3, r2
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	4413      	add	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	440b      	add	r3, r1
 8002086:	3308      	adds	r3, #8
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	e013      	b.n	80020b6 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	4916      	ldr	r1, [pc, #88]	; (80020ec <RescheduleTimerList+0x128>)
 8002092:	4613      	mov	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	440b      	add	r3, r1
 800209c:	3308      	adds	r3, #8
 800209e:	6819      	ldr	r1, [r3, #0]
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	7bfa      	ldrb	r2, [r7, #15]
 80020a4:	1ac9      	subs	r1, r1, r3
 80020a6:	4811      	ldr	r0, [pc, #68]	; (80020ec <RescheduleTimerList+0x128>)
 80020a8:	4613      	mov	r3, r2
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	4413      	add	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4403      	add	r3, r0
 80020b2:	3308      	adds	r3, #8
 80020b4:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	490c      	ldr	r1, [pc, #48]	; (80020ec <RescheduleTimerList+0x128>)
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	440b      	add	r3, r1
 80020c4:	3315      	adds	r3, #21
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	2b06      	cmp	r3, #6
 80020ce:	d1c7      	bne.n	8002060 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80020d0:	89bb      	ldrh	r3, [r7, #12]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ff1e 	bl	8001f14 <RestartWakeupCounter>

  return ;
 80020d8:	bf00      	nop
}
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40002800 	.word	0x40002800
 80020e4:	20000668 	.word	0x20000668
 80020e8:	20000410 	.word	0x20000410
 80020ec:	20000380 	.word	0x20000380
 80020f0:	20000418 	.word	0x20000418
 80020f4:	2000041e 	.word	0x2000041e

080020f8 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	; 0x28
 80020fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002102:	617b      	str	r3, [r7, #20]
  return(result);
 8002104:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002108:	b672      	cpsid	i
}
 800210a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800210c:	4b59      	ldr	r3, [pc, #356]	; (8002274 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	22ca      	movs	r2, #202	; 0xca
 8002112:	625a      	str	r2, [r3, #36]	; 0x24
 8002114:	4b57      	ldr	r3, [pc, #348]	; (8002274 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2253      	movs	r2, #83	; 0x53
 800211a:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 800211c:	4b55      	ldr	r3, [pc, #340]	; (8002274 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	4b54      	ldr	r3, [pc, #336]	; (8002274 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800212a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800212c:	4b52      	ldr	r3, [pc, #328]	; (8002278 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002134:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002138:	4950      	ldr	r1, [pc, #320]	; (800227c <HW_TS_RTC_Wakeup_Handler+0x184>)
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	440b      	add	r3, r1
 8002144:	330c      	adds	r3, #12
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d16e      	bne.n	800222c <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800214e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002152:	494a      	ldr	r1, [pc, #296]	; (800227c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002154:	4613      	mov	r3, r2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	4413      	add	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	440b      	add	r3, r1
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002162:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002166:	4945      	ldr	r1, [pc, #276]	; (800227c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002168:	4613      	mov	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	440b      	add	r3, r1
 8002172:	3310      	adds	r3, #16
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002178:	4b41      	ldr	r3, [pc, #260]	; (8002280 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d04c      	beq.n	800221c <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002182:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002186:	493d      	ldr	r1, [pc, #244]	; (800227c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002188:	4613      	mov	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4413      	add	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	440b      	add	r3, r1
 8002192:	330d      	adds	r3, #13
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d124      	bne.n	80021e6 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800219c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021a0:	2101      	movs	r1, #1
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fdf2 	bl	8001d8c <UnlinkTimer>
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	f383 8810 	msr	PRIMASK, r3
}
 80021b2:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80021b4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80021b8:	4930      	ldr	r1, [pc, #192]	; (800227c <HW_TS_RTC_Wakeup_Handler+0x184>)
 80021ba:	4613      	mov	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	440b      	add	r3, r1
 80021c4:	3304      	adds	r3, #4
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021cc:	4611      	mov	r1, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 fa32 	bl	8002638 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80021d4:	4b27      	ldr	r3, [pc, #156]	; (8002274 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	22ca      	movs	r2, #202	; 0xca
 80021da:	625a      	str	r2, [r3, #36]	; 0x24
 80021dc:	4b25      	ldr	r3, [pc, #148]	; (8002274 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2253      	movs	r2, #83	; 0x53
 80021e2:	625a      	str	r2, [r3, #36]	; 0x24
 80021e4:	e012      	b.n	800220c <HW_TS_RTC_Wakeup_Handler+0x114>
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f383 8810 	msr	PRIMASK, r3
}
 80021f0:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80021f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 f99a 	bl	8002530 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80021fc:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	22ca      	movs	r2, #202	; 0xca
 8002202:	625a      	str	r2, [r3, #36]	; 0x24
 8002204:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2253      	movs	r2, #83	; 0x53
 800220a:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800220c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002210:	69fa      	ldr	r2, [r7, #28]
 8002212:	4619      	mov	r1, r3
 8002214:	69b8      	ldr	r0, [r7, #24]
 8002216:	f000 fa95 	bl	8002744 <HW_TS_RTC_Int_AppNot>
 800221a:	e022      	b.n	8002262 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 800221c:	f7ff fed2 	bl	8001fc4 <RescheduleTimerList>
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f383 8810 	msr	PRIMASK, r3
}
 800222a:	e01a      	b.n	8002262 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800222c:	bf00      	nop
 800222e:	4b11      	ldr	r3, [pc, #68]	; (8002274 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f8      	beq.n	800222e <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800223c:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	b2da      	uxtb	r2, r3
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800224c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800224e:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002250:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f383 8810 	msr	PRIMASK, r3
}
 8002260:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002262:	4b04      	ldr	r3, [pc, #16]	; (8002274 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	22ff      	movs	r2, #255	; 0xff
 8002268:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800226a:	bf00      	nop
}
 800226c:	3728      	adds	r7, #40	; 0x28
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000668 	.word	0x20000668
 8002278:	20000410 	.word	0x20000410
 800227c:	20000380 	.word	0x20000380
 8002280:	20000418 	.word	0x20000418
 8002284:	58000800 	.word	0x58000800

08002288 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	6039      	str	r1, [r7, #0]
 8002292:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002294:	4b5e      	ldr	r3, [pc, #376]	; (8002410 <HW_TS_Init+0x188>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	22ca      	movs	r2, #202	; 0xca
 800229a:	625a      	str	r2, [r3, #36]	; 0x24
 800229c:	4b5c      	ldr	r3, [pc, #368]	; (8002410 <HW_TS_Init+0x188>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2253      	movs	r2, #83	; 0x53
 80022a2:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80022a4:	4b5b      	ldr	r3, [pc, #364]	; (8002414 <HW_TS_Init+0x18c>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	4a5a      	ldr	r2, [pc, #360]	; (8002414 <HW_TS_Init+0x18c>)
 80022aa:	f043 0320 	orr.w	r3, r3, #32
 80022ae:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80022b0:	4b58      	ldr	r3, [pc, #352]	; (8002414 <HW_TS_Init+0x18c>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	f1c3 0304 	rsb	r3, r3, #4
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4b55      	ldr	r3, [pc, #340]	; (8002418 <HW_TS_Init+0x190>)
 80022c4:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80022c6:	4b53      	ldr	r3, [pc, #332]	; (8002414 <HW_TS_Init+0x18c>)
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80022ce:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80022d2:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	fa92 f2a2 	rbit	r2, r2
 80022da:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	2a00      	cmp	r2, #0
 80022e4:	d101      	bne.n	80022ea <HW_TS_Init+0x62>
  {
    return 32U;
 80022e6:	2220      	movs	r2, #32
 80022e8:	e003      	b.n	80022f2 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	fab2 f282 	clz	r2, r2
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	40d3      	lsrs	r3, r2
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	3301      	adds	r3, #1
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4b48      	ldr	r3, [pc, #288]	; (800241c <HW_TS_Init+0x194>)
 80022fc:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80022fe:	4b45      	ldr	r3, [pc, #276]	; (8002414 <HW_TS_Init+0x18c>)
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	b29b      	uxth	r3, r3
 8002304:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002308:	b29b      	uxth	r3, r3
 800230a:	3301      	adds	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	4b44      	ldr	r3, [pc, #272]	; (8002420 <HW_TS_Init+0x198>)
 8002310:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002312:	4b43      	ldr	r3, [pc, #268]	; (8002420 <HW_TS_Init+0x198>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	3b01      	subs	r3, #1
 8002318:	4a40      	ldr	r2, [pc, #256]	; (800241c <HW_TS_Init+0x194>)
 800231a:	7812      	ldrb	r2, [r2, #0]
 800231c:	fb02 f303 	mul.w	r3, r2, r3
 8002320:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002324:	4a3c      	ldr	r2, [pc, #240]	; (8002418 <HW_TS_Init+0x190>)
 8002326:	7812      	ldrb	r2, [r2, #0]
 8002328:	40d3      	lsrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002332:	4293      	cmp	r3, r2
 8002334:	d904      	bls.n	8002340 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002336:	4b3b      	ldr	r3, [pc, #236]	; (8002424 <HW_TS_Init+0x19c>)
 8002338:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800233c:	801a      	strh	r2, [r3, #0]
 800233e:	e003      	b.n	8002348 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	b29a      	uxth	r2, r3
 8002344:	4b37      	ldr	r3, [pc, #220]	; (8002424 <HW_TS_Init+0x19c>)
 8002346:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002348:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800234c:	f7ff fb9c 	bl	8001a88 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002350:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002354:	f7ff fb84 	bl	8001a60 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d13d      	bne.n	80023da <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800235e:	4b32      	ldr	r3, [pc, #200]	; (8002428 <HW_TS_Init+0x1a0>)
 8002360:	2201      	movs	r2, #1
 8002362:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002364:	4b31      	ldr	r3, [pc, #196]	; (800242c <HW_TS_Init+0x1a4>)
 8002366:	f04f 32ff 	mov.w	r2, #4294967295
 800236a:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800236c:	2300      	movs	r3, #0
 800236e:	77fb      	strb	r3, [r7, #31]
 8002370:	e00c      	b.n	800238c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002372:	7ffa      	ldrb	r2, [r7, #31]
 8002374:	492e      	ldr	r1, [pc, #184]	; (8002430 <HW_TS_Init+0x1a8>)
 8002376:	4613      	mov	r3, r2
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	4413      	add	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	440b      	add	r3, r1
 8002380:	330c      	adds	r3, #12
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002386:	7ffb      	ldrb	r3, [r7, #31]
 8002388:	3301      	adds	r3, #1
 800238a:	77fb      	strb	r3, [r7, #31]
 800238c:	7ffb      	ldrb	r3, [r7, #31]
 800238e:	2b05      	cmp	r3, #5
 8002390:	d9ef      	bls.n	8002372 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002392:	4b28      	ldr	r3, [pc, #160]	; (8002434 <HW_TS_Init+0x1ac>)
 8002394:	2206      	movs	r2, #6
 8002396:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002398:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <HW_TS_Init+0x188>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	4b1c      	ldr	r3, [pc, #112]	; (8002410 <HW_TS_Init+0x188>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023a6:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80023a8:	4b19      	ldr	r3, [pc, #100]	; (8002410 <HW_TS_Init+0x188>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	4b17      	ldr	r3, [pc, #92]	; (8002410 <HW_TS_Init+0x188>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80023b8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80023ba:	4b1f      	ldr	r3, [pc, #124]	; (8002438 <HW_TS_Init+0x1b0>)
 80023bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80023c0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80023c2:	2003      	movs	r0, #3
 80023c4:	f002 fdf1 	bl	8004faa <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <HW_TS_Init+0x188>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	4b10      	ldr	r3, [pc, #64]	; (8002410 <HW_TS_Init+0x188>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	e009      	b.n	80023ee <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80023da:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <HW_TS_Init+0x188>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80023e8:	2003      	movs	r0, #3
 80023ea:	f002 fdd0 	bl	8004f8e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <HW_TS_Init+0x188>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	22ff      	movs	r2, #255	; 0xff
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80023f6:	2200      	movs	r2, #0
 80023f8:	2103      	movs	r1, #3
 80023fa:	2003      	movs	r0, #3
 80023fc:	f002 fd85 	bl	8004f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002400:	2003      	movs	r0, #3
 8002402:	f002 fd9c 	bl	8004f3e <HAL_NVIC_EnableIRQ>

  return;
 8002406:	bf00      	nop
}
 8002408:	3720      	adds	r7, #32
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000668 	.word	0x20000668
 8002414:	40002800 	.word	0x40002800
 8002418:	20000419 	.word	0x20000419
 800241c:	2000041a 	.word	0x2000041a
 8002420:	2000041c 	.word	0x2000041c
 8002424:	2000041e 	.word	0x2000041e
 8002428:	20000418 	.word	0x20000418
 800242c:	20000414 	.word	0x20000414
 8002430:	20000380 	.word	0x20000380
 8002434:	20000410 	.word	0x20000410
 8002438:	58000800 	.word	0x58000800

0800243c <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 800243c:	b480      	push	{r7}
 800243e:	b08b      	sub	sp, #44	; 0x2c
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	4613      	mov	r3, r2
 800244a:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002452:	f3ef 8310 	mrs	r3, PRIMASK
 8002456:	61fb      	str	r3, [r7, #28]
  return(result);
 8002458:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800245a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800245c:	b672      	cpsid	i
}
 800245e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002460:	e004      	b.n	800246c <HW_TS_Create+0x30>
  {
    loop++;
 8002462:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002466:	3301      	adds	r3, #1
 8002468:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800246c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002470:	2b05      	cmp	r3, #5
 8002472:	d80c      	bhi.n	800248e <HW_TS_Create+0x52>
 8002474:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002478:	492c      	ldr	r1, [pc, #176]	; (800252c <HW_TS_Create+0xf0>)
 800247a:	4613      	mov	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	4413      	add	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	440b      	add	r3, r1
 8002484:	330c      	adds	r3, #12
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1e9      	bne.n	8002462 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800248e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002492:	2b06      	cmp	r3, #6
 8002494:	d038      	beq.n	8002508 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8002496:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800249a:	4924      	ldr	r1, [pc, #144]	; (800252c <HW_TS_Create+0xf0>)
 800249c:	4613      	mov	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4413      	add	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	440b      	add	r3, r1
 80024a6:	330c      	adds	r3, #12
 80024a8:	2201      	movs	r2, #1
 80024aa:	701a      	strb	r2, [r3, #0]
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	f383 8810 	msr	PRIMASK, r3
}
 80024b6:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80024b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80024bc:	491b      	ldr	r1, [pc, #108]	; (800252c <HW_TS_Create+0xf0>)
 80024be:	4613      	mov	r3, r2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4413      	add	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	440b      	add	r3, r1
 80024c8:	3310      	adds	r3, #16
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80024ce:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80024d2:	4916      	ldr	r1, [pc, #88]	; (800252c <HW_TS_Create+0xf0>)
 80024d4:	4613      	mov	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4413      	add	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	440b      	add	r3, r1
 80024de:	330d      	adds	r3, #13
 80024e0:	79fa      	ldrb	r2, [r7, #7]
 80024e2:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80024e4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80024e8:	4910      	ldr	r1, [pc, #64]	; (800252c <HW_TS_Create+0xf0>)
 80024ea:	4613      	mov	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	440b      	add	r3, r1
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80024fe:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8002500:	2300      	movs	r3, #0
 8002502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002506:	e008      	b.n	800251a <HW_TS_Create+0xde>
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f383 8810 	msr	PRIMASK, r3
}
 8002512:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002514:	2301      	movs	r3, #1
 8002516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 800251a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800251e:	4618      	mov	r0, r3
 8002520:	372c      	adds	r7, #44	; 0x2c
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	20000380 	.word	0x20000380

08002530 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800253a:	f3ef 8310 	mrs	r3, PRIMASK
 800253e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002540:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002542:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002544:	b672      	cpsid	i
}
 8002546:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002548:	2003      	movs	r0, #3
 800254a:	f002 fd06 	bl	8004f5a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800254e:	4b34      	ldr	r3, [pc, #208]	; (8002620 <HW_TS_Stop+0xf0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	22ca      	movs	r2, #202	; 0xca
 8002554:	625a      	str	r2, [r3, #36]	; 0x24
 8002556:	4b32      	ldr	r3, [pc, #200]	; (8002620 <HW_TS_Stop+0xf0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2253      	movs	r2, #83	; 0x53
 800255c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800255e:	79fa      	ldrb	r2, [r7, #7]
 8002560:	4930      	ldr	r1, [pc, #192]	; (8002624 <HW_TS_Stop+0xf4>)
 8002562:	4613      	mov	r3, r2
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	4413      	add	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	440b      	add	r3, r1
 800256c:	330c      	adds	r3, #12
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d142      	bne.n	80025fc <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	2100      	movs	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fc06 	bl	8001d8c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002580:	4b29      	ldr	r3, [pc, #164]	; (8002628 <HW_TS_Stop+0xf8>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002586:	7cfb      	ldrb	r3, [r7, #19]
 8002588:	2b06      	cmp	r3, #6
 800258a:	d12f      	bne.n	80025ec <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800258c:	4b27      	ldr	r3, [pc, #156]	; (800262c <HW_TS_Stop+0xfc>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002598:	d107      	bne.n	80025aa <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800259a:	bf00      	nop
 800259c:	4b20      	ldr	r3, [pc, #128]	; (8002620 <HW_TS_Stop+0xf0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f003 0304 	and.w	r3, r3, #4
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f8      	bne.n	800259c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80025aa:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <HW_TS_Stop+0xf0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <HW_TS_Stop+0xf0>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b8:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80025ba:	bf00      	nop
 80025bc:	4b18      	ldr	r3, [pc, #96]	; (8002620 <HW_TS_Stop+0xf0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f003 0304 	and.w	r3, r3, #4
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f8      	beq.n	80025bc <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <HW_TS_Stop+0xf0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	4b13      	ldr	r3, [pc, #76]	; (8002620 <HW_TS_Stop+0xf0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80025da:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80025dc:	4b14      	ldr	r3, [pc, #80]	; (8002630 <HW_TS_Stop+0x100>)
 80025de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80025e2:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80025e4:	2003      	movs	r0, #3
 80025e6:	f002 fce0 	bl	8004faa <HAL_NVIC_ClearPendingIRQ>
 80025ea:	e007      	b.n	80025fc <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <HW_TS_Stop+0x104>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	7cfa      	ldrb	r2, [r7, #19]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d001      	beq.n	80025fc <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80025f8:	f7ff fce4 	bl	8001fc4 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <HW_TS_Stop+0xf0>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	22ff      	movs	r2, #255	; 0xff
 8002602:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002604:	2003      	movs	r0, #3
 8002606:	f002 fc9a 	bl	8004f3e <HAL_NVIC_EnableIRQ>
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	f383 8810 	msr	PRIMASK, r3
}
 8002614:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002616:	bf00      	nop
}
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000668 	.word	0x20000668
 8002624:	20000380 	.word	0x20000380
 8002628:	20000410 	.word	0x20000410
 800262c:	40002800 	.word	0x40002800
 8002630:	58000800 	.word	0x58000800
 8002634:	20000411 	.word	0x20000411

08002638 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	6039      	str	r1, [r7, #0]
 8002642:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002644:	79fa      	ldrb	r2, [r7, #7]
 8002646:	493b      	ldr	r1, [pc, #236]	; (8002734 <HW_TS_Start+0xfc>)
 8002648:	4613      	mov	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4413      	add	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	440b      	add	r3, r1
 8002652:	330c      	adds	r3, #12
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d103      	bne.n	8002664 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff ff66 	bl	8002530 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002664:	f3ef 8310 	mrs	r3, PRIMASK
 8002668:	60fb      	str	r3, [r7, #12]
  return(result);
 800266a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800266c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800266e:	b672      	cpsid	i
}
 8002670:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002672:	2003      	movs	r0, #3
 8002674:	f002 fc71 	bl	8004f5a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002678:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <HW_TS_Start+0x100>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	22ca      	movs	r2, #202	; 0xca
 800267e:	625a      	str	r2, [r3, #36]	; 0x24
 8002680:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <HW_TS_Start+0x100>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2253      	movs	r2, #83	; 0x53
 8002686:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002688:	79fa      	ldrb	r2, [r7, #7]
 800268a:	492a      	ldr	r1, [pc, #168]	; (8002734 <HW_TS_Start+0xfc>)
 800268c:	4613      	mov	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4413      	add	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	440b      	add	r3, r1
 8002696:	330c      	adds	r3, #12
 8002698:	2202      	movs	r2, #2
 800269a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800269c:	79fa      	ldrb	r2, [r7, #7]
 800269e:	4925      	ldr	r1, [pc, #148]	; (8002734 <HW_TS_Start+0xfc>)
 80026a0:	4613      	mov	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4413      	add	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	440b      	add	r3, r1
 80026aa:	3308      	adds	r3, #8
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80026b0:	79fa      	ldrb	r2, [r7, #7]
 80026b2:	4920      	ldr	r1, [pc, #128]	; (8002734 <HW_TS_Start+0xfc>)
 80026b4:	4613      	mov	r3, r2
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4413      	add	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	440b      	add	r3, r1
 80026be:	3304      	adds	r3, #4
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fab6 	bl	8001c38 <linkTimer>
 80026cc:	4603      	mov	r3, r0
 80026ce:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80026d0:	4b1a      	ldr	r3, [pc, #104]	; (800273c <HW_TS_Start+0x104>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80026d6:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <HW_TS_Start+0x108>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	7c7a      	ldrb	r2, [r7, #17]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d002      	beq.n	80026e8 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80026e2:	f7ff fc6f 	bl	8001fc4 <RescheduleTimerList>
 80026e6:	e013      	b.n	8002710 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80026e8:	79fa      	ldrb	r2, [r7, #7]
 80026ea:	4912      	ldr	r1, [pc, #72]	; (8002734 <HW_TS_Start+0xfc>)
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	440b      	add	r3, r1
 80026f6:	3308      	adds	r3, #8
 80026f8:	6819      	ldr	r1, [r3, #0]
 80026fa:	8a7b      	ldrh	r3, [r7, #18]
 80026fc:	79fa      	ldrb	r2, [r7, #7]
 80026fe:	1ac9      	subs	r1, r1, r3
 8002700:	480c      	ldr	r0, [pc, #48]	; (8002734 <HW_TS_Start+0xfc>)
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4403      	add	r3, r0
 800270c:	3308      	adds	r3, #8
 800270e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002710:	4b09      	ldr	r3, [pc, #36]	; (8002738 <HW_TS_Start+0x100>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	22ff      	movs	r2, #255	; 0xff
 8002716:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002718:	2003      	movs	r0, #3
 800271a:	f002 fc10 	bl	8004f3e <HAL_NVIC_EnableIRQ>
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	f383 8810 	msr	PRIMASK, r3
}
 8002728:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800272a:	bf00      	nop
}
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20000380 	.word	0x20000380
 8002738:	20000668 	.word	0x20000668
 800273c:	20000410 	.word	0x20000410
 8002740:	20000411 	.word	0x20000411

08002744 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	460b      	mov	r3, r1
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4798      	blx	r3

  return;
 8002756:	bf00      	nop
}
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	607b      	str	r3, [r7, #4]
 800276a:	4603      	mov	r3, r0
 800276c:	73fb      	strb	r3, [r7, #15]
 800276e:	4613      	mov	r3, r2
 8002770:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <HW_UART_Receive_IT+0x1e>
 8002778:	2b02      	cmp	r3, #2
 800277a:	d00d      	beq.n	8002798 <HW_UART_Receive_IT+0x38>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 800277c:	e019      	b.n	80027b2 <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(huart1, USART1);
 800277e:	4a0f      	ldr	r2, [pc, #60]	; (80027bc <HW_UART_Receive_IT+0x5c>)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <HW_UART_Receive_IT+0x60>)
 8002786:	4a0f      	ldr	r2, [pc, #60]	; (80027c4 <HW_UART_Receive_IT+0x64>)
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	89bb      	ldrh	r3, [r7, #12]
 800278c:	461a      	mov	r2, r3
 800278e:	68b9      	ldr	r1, [r7, #8]
 8002790:	480b      	ldr	r0, [pc, #44]	; (80027c0 <HW_UART_Receive_IT+0x60>)
 8002792:	f005 fa5b 	bl	8007c4c <HAL_UART_Receive_IT>
            break;
 8002796:	e00c      	b.n	80027b2 <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(hlpuart1, LPUART1);
 8002798:	4a0b      	ldr	r2, [pc, #44]	; (80027c8 <HW_UART_Receive_IT+0x68>)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HW_UART_Receive_IT+0x6c>)
 80027a0:	4a0b      	ldr	r2, [pc, #44]	; (80027d0 <HW_UART_Receive_IT+0x70>)
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	89bb      	ldrh	r3, [r7, #12]
 80027a6:	461a      	mov	r2, r3
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	4808      	ldr	r0, [pc, #32]	; (80027cc <HW_UART_Receive_IT+0x6c>)
 80027ac:	f005 fa4e 	bl	8007c4c <HAL_UART_Receive_IT>
            break;
 80027b0:	bf00      	nop
    }

    return;
 80027b2:	bf00      	nop
}
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000420 	.word	0x20000420
 80027c0:	20000500 	.word	0x20000500
 80027c4:	40013800 	.word	0x40013800
 80027c8:	20000428 	.word	0x20000428
 80027cc:	2000046c 	.word	0x2000046c
 80027d0:	40008000 	.word	0x40008000

080027d4 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607b      	str	r3, [r7, #4]
 80027de:	4603      	mov	r3, r0
 80027e0:	73fb      	strb	r3, [r7, #15]
 80027e2:	4613      	mov	r3, r2
 80027e4:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80027ea:	2300      	movs	r3, #0
 80027ec:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d002      	beq.n	80027fa <HW_UART_Transmit_DMA+0x26>
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d00f      	beq.n	8002818 <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80027f8:	e01d      	b.n	8002836 <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 80027fa:	4a1f      	ldr	r2, [pc, #124]	; (8002878 <HW_UART_Transmit_DMA+0xa4>)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8002800:	4b1e      	ldr	r3, [pc, #120]	; (800287c <HW_UART_Transmit_DMA+0xa8>)
 8002802:	4a1f      	ldr	r2, [pc, #124]	; (8002880 <HW_UART_Transmit_DMA+0xac>)
 8002804:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002806:	89bb      	ldrh	r3, [r7, #12]
 8002808:	461a      	mov	r2, r3
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	481b      	ldr	r0, [pc, #108]	; (800287c <HW_UART_Transmit_DMA+0xa8>)
 800280e:	f005 fa69 	bl	8007ce4 <HAL_UART_Transmit_DMA>
 8002812:	4603      	mov	r3, r0
 8002814:	75fb      	strb	r3, [r7, #23]
            break;
 8002816:	e00e      	b.n	8002836 <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 8002818:	4a1a      	ldr	r2, [pc, #104]	; (8002884 <HW_UART_Transmit_DMA+0xb0>)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 800281e:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <HW_UART_Transmit_DMA+0xb4>)
 8002820:	4a1a      	ldr	r2, [pc, #104]	; (800288c <HW_UART_Transmit_DMA+0xb8>)
 8002822:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8002824:	89bb      	ldrh	r3, [r7, #12]
 8002826:	461a      	mov	r2, r3
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	4817      	ldr	r0, [pc, #92]	; (8002888 <HW_UART_Transmit_DMA+0xb4>)
 800282c:	f005 fa5a 	bl	8007ce4 <HAL_UART_Transmit_DMA>
 8002830:	4603      	mov	r3, r0
 8002832:	75fb      	strb	r3, [r7, #23]
            break;
 8002834:	bf00      	nop
    }

    switch (hal_status)
 8002836:	7dfb      	ldrb	r3, [r7, #23]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d817      	bhi.n	800286c <HW_UART_Transmit_DMA+0x98>
 800283c:	a201      	add	r2, pc, #4	; (adr r2, 8002844 <HW_UART_Transmit_DMA+0x70>)
 800283e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002842:	bf00      	nop
 8002844:	08002855 	.word	0x08002855
 8002848:	0800285b 	.word	0x0800285b
 800284c:	08002861 	.word	0x08002861
 8002850:	08002867 	.word	0x08002867
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002854:	2300      	movs	r3, #0
 8002856:	75bb      	strb	r3, [r7, #22]
            break;
 8002858:	e009      	b.n	800286e <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800285a:	2301      	movs	r3, #1
 800285c:	75bb      	strb	r3, [r7, #22]
            break;
 800285e:	e006      	b.n	800286e <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002860:	2302      	movs	r3, #2
 8002862:	75bb      	strb	r3, [r7, #22]
            break;
 8002864:	e003      	b.n	800286e <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002866:	2303      	movs	r3, #3
 8002868:	75bb      	strb	r3, [r7, #22]
            break;
 800286a:	e000      	b.n	800286e <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 800286c:	bf00      	nop
    }

    return hw_status;
 800286e:	7dbb      	ldrb	r3, [r7, #22]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000424 	.word	0x20000424
 800287c:	20000500 	.word	0x20000500
 8002880:	40013800 	.word	0x40013800
 8002884:	2000042c 	.word	0x2000042c
 8002888:	2000046c 	.word	0x2000046c
 800288c:	40008000 	.word	0x40008000

08002890 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a0f      	ldr	r2, [pc, #60]	; (80028dc <HAL_UART_RxCpltCallback+0x4c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00a      	beq.n	80028b8 <HAL_UART_RxCpltCallback+0x28>
 80028a2:	4a0f      	ldr	r2, [pc, #60]	; (80028e0 <HAL_UART_RxCpltCallback+0x50>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d10f      	bne.n	80028c8 <HAL_UART_RxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 80028a8:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <HAL_UART_RxCpltCallback+0x54>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00d      	beq.n	80028cc <HAL_UART_RxCpltCallback+0x3c>
            {
                HW_huart1RxCb();
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <HAL_UART_RxCpltCallback+0x54>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4798      	blx	r3
            }
            break;
 80028b6:	e009      	b.n	80028cc <HAL_UART_RxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1RxCb)
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_UART_RxCpltCallback+0x58>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d007      	beq.n	80028d0 <HAL_UART_RxCpltCallback+0x40>
            {
                HW_hlpuart1RxCb();
 80028c0:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <HAL_UART_RxCpltCallback+0x58>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4798      	blx	r3
            }
            break;
 80028c6:	e003      	b.n	80028d0 <HAL_UART_RxCpltCallback+0x40>
#endif

        default:
            break;
 80028c8:	bf00      	nop
 80028ca:	e002      	b.n	80028d2 <HAL_UART_RxCpltCallback+0x42>
            break;
 80028cc:	bf00      	nop
 80028ce:	e000      	b.n	80028d2 <HAL_UART_RxCpltCallback+0x42>
            break;
 80028d0:	bf00      	nop
    }

    return;
 80028d2:	bf00      	nop
}
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40008000 	.word	0x40008000
 80028e0:	40013800 	.word	0x40013800
 80028e4:	20000420 	.word	0x20000420
 80028e8:	20000428 	.word	0x20000428

080028ec <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a0f      	ldr	r2, [pc, #60]	; (8002938 <HAL_UART_TxCpltCallback+0x4c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00a      	beq.n	8002914 <HAL_UART_TxCpltCallback+0x28>
 80028fe:	4a0f      	ldr	r2, [pc, #60]	; (800293c <HAL_UART_TxCpltCallback+0x50>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d10f      	bne.n	8002924 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002904:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <HAL_UART_TxCpltCallback+0x54>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00d      	beq.n	8002928 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <HAL_UART_TxCpltCallback+0x54>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4798      	blx	r3
            }
            break;
 8002912:	e009      	b.n	8002928 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_UART_TxCpltCallback+0x58>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d007      	beq.n	800292c <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 800291c:	4b09      	ldr	r3, [pc, #36]	; (8002944 <HAL_UART_TxCpltCallback+0x58>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4798      	blx	r3
            }
            break;
 8002922:	e003      	b.n	800292c <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 8002924:	bf00      	nop
 8002926:	e002      	b.n	800292e <HAL_UART_TxCpltCallback+0x42>
            break;
 8002928:	bf00      	nop
 800292a:	e000      	b.n	800292e <HAL_UART_TxCpltCallback+0x42>
            break;
 800292c:	bf00      	nop
    }

    return;
 800292e:	bf00      	nop
}
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40008000 	.word	0x40008000
 800293c:	40013800 	.word	0x40013800
 8002940:	20000424 	.word	0x20000424
 8002944:	2000042c 	.word	0x2000042c

08002948 <LL_RCC_LSE_SetDriveCapability>:
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002958:	f023 0218 	bic.w	r2, r3, #24
 800295c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <LL_AHB1_GRP1_EnableClock>:
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800297c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002980:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002982:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4313      	orrs	r3, r2
 800298a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800298c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002990:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4013      	ands	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002998:	68fb      	ldr	r3, [r7, #12]
}
 800299a:	bf00      	nop
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <LL_AHB2_GRP1_EnableClock>:
{
 80029a6:	b480      	push	{r7}
 80029a8:	b085      	sub	sp, #20
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80029ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80029be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4013      	ands	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029ca:	68fb      	ldr	r3, [r7, #12]
}
 80029cc:	bf00      	nop
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029dc:	f002 f8bc 	bl	8004b58 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80029e0:	f7fe fcfc 	bl	80013dc <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029e4:	f000 f814 	bl	8002a10 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80029e8:	f000 f870 	bl	8002acc <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80029ec:	f000 f88e 	bl	8002b0c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029f0:	f000 f95d 	bl	8002cae <MX_GPIO_Init>
  MX_DMA_Init();
 80029f4:	f000 f93e 	bl	8002c74 <MX_DMA_Init>
  MX_RTC_Init();
 80029f8:	f000 f908 	bl	8002c0c <MX_RTC_Init>
  MX_RNG_Init();
 80029fc:	f000 f8f0 	bl	8002be0 <MX_RNG_Init>
  MX_RF_Init();
 8002a00:	f000 f8e6 	bl	8002bd0 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002a04:	f7fe fcf8 	bl	80013f8 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002a08:	f7fe ff37 	bl	800187a <MX_APPE_Process>
 8002a0c:	e7fc      	b.n	8002a08 <main+0x30>
	...

08002a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b09a      	sub	sp, #104	; 0x68
 8002a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a16:	f107 0320 	add.w	r3, r7, #32
 8002a1a:	2248      	movs	r2, #72	; 0x48
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f00b fb3a 	bl	800e098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a24:	1d3b      	adds	r3, r7, #4
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	609a      	str	r2, [r3, #8]
 8002a2e:	60da      	str	r2, [r3, #12]
 8002a30:	611a      	str	r2, [r3, #16]
 8002a32:	615a      	str	r2, [r3, #20]
 8002a34:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002a36:	f003 f8a5 	bl	8005b84 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f7ff ff84 	bl	8002948 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a40:	4b21      	ldr	r3, [pc, #132]	; (8002ac8 <SystemClock_Config+0xb8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a48:	4a1f      	ldr	r2, [pc, #124]	; (8002ac8 <SystemClock_Config+0xb8>)
 8002a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <SystemClock_Config+0xb8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a58:	603b      	str	r3, [r7, #0]
 8002a5a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8002a5c:	2347      	movs	r3, #71	; 0x47
 8002a5e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002a66:	2301      	movs	r3, #1
 8002a68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002a70:	2301      	movs	r3, #1
 8002a72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a74:	2340      	movs	r3, #64	; 0x40
 8002a76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a7c:	f107 0320 	add.w	r3, r7, #32
 8002a80:	4618      	mov	r0, r3
 8002a82:	f003 fc13 	bl	80062ac <HAL_RCC_OscConfig>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002a8c:	f000 f91c 	bl	8002cc8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002a90:	236f      	movs	r3, #111	; 0x6f
 8002a92:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002a94:	2302      	movs	r3, #2
 8002a96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002aac:	1d3b      	adds	r3, r7, #4
 8002aae:	2101      	movs	r1, #1
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f003 ff6f 	bl	8006994 <HAL_RCC_ClockConfig>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002abc:	f000 f904 	bl	8002cc8 <Error_Handler>
  }
}
 8002ac0:	bf00      	nop
 8002ac2:	3768      	adds	r7, #104	; 0x68
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	58000400 	.word	0x58000400

08002acc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b094      	sub	sp, #80	; 0x50
 8002ad0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ad2:	463b      	mov	r3, r7
 8002ad4:	2250      	movs	r2, #80	; 0x50
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f00b fadd 	bl	800e098 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002ade:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002ae2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002ae4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ae8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002aea:	2302      	movs	r3, #2
 8002aec:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002aee:	2310      	movs	r3, #16
 8002af0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002af2:	463b      	mov	r3, r7
 8002af4:	4618      	mov	r0, r3
 8002af6:	f004 fb8a 	bl	800720e <HAL_RCCEx_PeriphCLKConfig>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002b00:	f000 f8e2 	bl	8002cc8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002b04:	bf00      	nop
 8002b06:	3750      	adds	r7, #80	; 0x50
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <MX_IPCC_Init+0x20>)
 8002b12:	4a07      	ldr	r2, [pc, #28]	; (8002b30 <MX_IPCC_Init+0x24>)
 8002b14:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002b16:	4805      	ldr	r0, [pc, #20]	; (8002b2c <MX_IPCC_Init+0x20>)
 8002b18:	f002 ffae 	bl	8005a78 <HAL_IPCC_Init>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002b22:	f000 f8d1 	bl	8002cc8 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000430 	.word	0x20000430
 8002b30:	58000c00 	.word	0x58000c00

08002b34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b38:	4b23      	ldr	r3, [pc, #140]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002b3a:	4a24      	ldr	r2, [pc, #144]	; (8002bcc <MX_USART1_UART_Init+0x98>)
 8002b3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b3e:	4b22      	ldr	r3, [pc, #136]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b46:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b4c:	4b1e      	ldr	r3, [pc, #120]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b52:	4b1d      	ldr	r3, [pc, #116]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b58:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002b5a:	220c      	movs	r2, #12
 8002b5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b5e:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002b64:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002b66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b6a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b6c:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b72:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b78:	4b13      	ldr	r3, [pc, #76]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b7e:	4812      	ldr	r0, [pc, #72]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002b80:	f005 f814 	bl	8007bac <HAL_UART_Init>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002b8a:	f000 f89d 	bl	8002cc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b8e:	2100      	movs	r1, #0
 8002b90:	480d      	ldr	r0, [pc, #52]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002b92:	f007 f866 	bl	8009c62 <HAL_UARTEx_SetTxFifoThreshold>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002b9c:	f000 f894 	bl	8002cc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	4809      	ldr	r0, [pc, #36]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002ba4:	f007 f89b 	bl	8009cde <HAL_UARTEx_SetRxFifoThreshold>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002bae:	f000 f88b 	bl	8002cc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002bb2:	4805      	ldr	r0, [pc, #20]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002bb4:	f007 f81c 	bl	8009bf0 <HAL_UARTEx_DisableFifoMode>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002bbe:	f000 f883 	bl	8002cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000500 	.word	0x20000500
 8002bcc:	40013800 	.word	0x40013800

08002bd0 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002be4:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <MX_RNG_Init+0x24>)
 8002be6:	4a08      	ldr	r2, [pc, #32]	; (8002c08 <MX_RNG_Init+0x28>)
 8002be8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002bea:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <MX_RNG_Init+0x24>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002bf0:	4804      	ldr	r0, [pc, #16]	; (8002c04 <MX_RNG_Init+0x24>)
 8002bf2:	f004 fd93 	bl	800771c <HAL_RNG_Init>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002bfc:	f000 f864 	bl	8002cc8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002c00:	bf00      	nop
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000654 	.word	0x20000654
 8002c08:	58001000 	.word	0x58001000

08002c0c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002c10:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <MX_RTC_Init+0x60>)
 8002c12:	4a17      	ldr	r2, [pc, #92]	; (8002c70 <MX_RTC_Init+0x64>)
 8002c14:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002c16:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <MX_RTC_Init+0x60>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002c1c:	4b13      	ldr	r3, [pc, #76]	; (8002c6c <MX_RTC_Init+0x60>)
 8002c1e:	220f      	movs	r2, #15
 8002c20:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002c22:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <MX_RTC_Init+0x60>)
 8002c24:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002c28:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002c2a:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <MX_RTC_Init+0x60>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002c30:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <MX_RTC_Init+0x60>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002c36:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <MX_RTC_Init+0x60>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <MX_RTC_Init+0x60>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002c42:	480a      	ldr	r0, [pc, #40]	; (8002c6c <MX_RTC_Init+0x60>)
 8002c44:	f004 fda0 	bl	8007788 <HAL_RTC_Init>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002c4e:	f000 f83b 	bl	8002cc8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002c52:	2200      	movs	r2, #0
 8002c54:	2100      	movs	r1, #0
 8002c56:	4805      	ldr	r0, [pc, #20]	; (8002c6c <MX_RTC_Init+0x60>)
 8002c58:	f004 fe96 	bl	8007988 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002c62:	f000 f831 	bl	8002cc8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000668 	.word	0x20000668
 8002c70:	40002800 	.word	0x40002800

08002c74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002c78:	2004      	movs	r0, #4
 8002c7a:	f7ff fe7b 	bl	8002974 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c7e:	2001      	movs	r0, #1
 8002c80:	f7ff fe78 	bl	8002974 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c84:	2002      	movs	r0, #2
 8002c86:	f7ff fe75 	bl	8002974 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	210f      	movs	r1, #15
 8002c8e:	200e      	movs	r0, #14
 8002c90:	f002 f93b 	bl	8004f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002c94:	200e      	movs	r0, #14
 8002c96:	f002 f952 	bl	8004f3e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	210f      	movs	r1, #15
 8002c9e:	203a      	movs	r0, #58	; 0x3a
 8002ca0:	f002 f933 	bl	8004f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002ca4:	203a      	movs	r0, #58	; 0x3a
 8002ca6:	f002 f94a 	bl	8004f3e <HAL_NVIC_EnableIRQ>

}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}

08002cae <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cb2:	2004      	movs	r0, #4
 8002cb4:	f7ff fe77 	bl	80029a6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb8:	2001      	movs	r0, #1
 8002cba:	f7ff fe74 	bl	80029a6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cbe:	2002      	movs	r0, #2
 8002cc0:	f7ff fe71 	bl	80029a6 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cc4:	bf00      	nop
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <LL_RCC_EnableRTC>:
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002cee:	bf00      	nop
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_AHB2_GRP1_EnableClock>:
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
}
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <LL_AHB3_GRP1_EnableClock>:
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b085      	sub	sp, #20
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
}
 8002d50:	bf00      	nop
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_APB1_GRP1_EnableClock>:
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d80:	68fb      	ldr	r3, [r7, #12]
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <LL_APB1_GRP2_EnableClock>:
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b085      	sub	sp, #20
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002daa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4013      	ands	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002db2:	68fb      	ldr	r3, [r7, #12]
}
 8002db4:	bf00      	nop
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <LL_APB2_GRP1_EnableClock>:
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dcc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ddc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4013      	ands	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002de4:	68fb      	ldr	r3, [r7, #12]
}
 8002de6:	bf00      	nop
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002df6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002dfa:	f7ff ff96 	bl	8002d2a <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2100      	movs	r1, #0
 8002e02:	202e      	movs	r0, #46	; 0x2e
 8002e04:	f002 f881 	bl	8004f0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002e08:	202e      	movs	r0, #46	; 0x2e
 8002e0a:	f002 f898 	bl	8004f3e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a0d      	ldr	r2, [pc, #52]	; (8002e58 <HAL_IPCC_MspInit+0x44>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d113      	bne.n	8002e4e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002e26:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002e2a:	f7ff ff7e 	bl	8002d2a <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2100      	movs	r1, #0
 8002e32:	202c      	movs	r0, #44	; 0x2c
 8002e34:	f002 f869 	bl	8004f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002e38:	202c      	movs	r0, #44	; 0x2c
 8002e3a:	f002 f880 	bl	8004f3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2100      	movs	r1, #0
 8002e42:	202d      	movs	r0, #45	; 0x2d
 8002e44:	f002 f861 	bl	8004f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002e48:	202d      	movs	r0, #45	; 0x2d
 8002e4a:	f002 f878 	bl	8004f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	58000c00 	.word	0x58000c00

08002e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b0a0      	sub	sp, #128	; 0x80
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e64:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	60da      	str	r2, [r3, #12]
 8002e72:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e74:	f107 030c 	add.w	r3, r7, #12
 8002e78:	2250      	movs	r2, #80	; 0x50
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f00b f90b 	bl	800e098 <memset>
  if(huart->Instance==LPUART1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a68      	ldr	r2, [pc, #416]	; (8003028 <HAL_UART_MspInit+0x1cc>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d16e      	bne.n	8002f6a <HAL_UART_MspInit+0x10e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002e90:	2300      	movs	r3, #0
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e94:	f107 030c 	add.w	r3, r7, #12
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f004 f9b8 	bl	800720e <HAL_RCCEx_PeriphCLKConfig>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ea4:	f7ff ff10 	bl	8002cc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	f7ff ff70 	bl	8002d8e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eae:	2001      	movs	r0, #1
 8002eb0:	f7ff ff22 	bl	8002cf8 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002eb4:	230c      	movs	r3, #12
 8002eb6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002ec4:	2308      	movs	r3, #8
 8002ec6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ecc:	4619      	mov	r1, r3
 8002ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ed2:	f002 fc0d 	bl	80056f0 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8002ed6:	4b55      	ldr	r3, [pc, #340]	; (800302c <HAL_UART_MspInit+0x1d0>)
 8002ed8:	4a55      	ldr	r2, [pc, #340]	; (8003030 <HAL_UART_MspInit+0x1d4>)
 8002eda:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002edc:	4b53      	ldr	r3, [pc, #332]	; (800302c <HAL_UART_MspInit+0x1d0>)
 8002ede:	2211      	movs	r2, #17
 8002ee0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ee2:	4b52      	ldr	r3, [pc, #328]	; (800302c <HAL_UART_MspInit+0x1d0>)
 8002ee4:	2210      	movs	r2, #16
 8002ee6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ee8:	4b50      	ldr	r3, [pc, #320]	; (800302c <HAL_UART_MspInit+0x1d0>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002eee:	4b4f      	ldr	r3, [pc, #316]	; (800302c <HAL_UART_MspInit+0x1d0>)
 8002ef0:	2280      	movs	r2, #128	; 0x80
 8002ef2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ef4:	4b4d      	ldr	r3, [pc, #308]	; (800302c <HAL_UART_MspInit+0x1d0>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002efa:	4b4c      	ldr	r3, [pc, #304]	; (800302c <HAL_UART_MspInit+0x1d0>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002f00:	4b4a      	ldr	r3, [pc, #296]	; (800302c <HAL_UART_MspInit+0x1d0>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f06:	4b49      	ldr	r3, [pc, #292]	; (800302c <HAL_UART_MspInit+0x1d0>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002f0c:	4847      	ldr	r0, [pc, #284]	; (800302c <HAL_UART_MspInit+0x1d0>)
 8002f0e:	f002 f85b 	bl	8004fc8 <HAL_DMA_Init>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002f18:	f7ff fed6 	bl	8002cc8 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 8002f1c:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8002f20:	65fb      	str	r3, [r7, #92]	; 0x5c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8002f22:	2300      	movs	r3, #0
 8002f24:	663b      	str	r3, [r7, #96]	; 0x60
    pSyncConfig.SyncEnable = DISABLE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    pSyncConfig.EventEnable = DISABLE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
    pSyncConfig.RequestNumber = 1;
 8002f32:	2301      	movs	r3, #1
 8002f34:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 8002f36:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	483b      	ldr	r0, [pc, #236]	; (800302c <HAL_UART_MspInit+0x1d0>)
 8002f3e:	f002 fb75 	bl	800562c <HAL_DMAEx_ConfigMuxSync>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8002f48:	f7ff febe 	bl	8002cc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a37      	ldr	r2, [pc, #220]	; (800302c <HAL_UART_MspInit+0x1d0>)
 8002f50:	67da      	str	r2, [r3, #124]	; 0x7c
 8002f52:	4a36      	ldr	r2, [pc, #216]	; (800302c <HAL_UART_MspInit+0x1d0>)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	2025      	movs	r0, #37	; 0x25
 8002f5e:	f001 ffd4 	bl	8004f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002f62:	2025      	movs	r0, #37	; 0x25
 8002f64:	f001 ffeb 	bl	8004f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002f68:	e05a      	b.n	8003020 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART1)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a31      	ldr	r2, [pc, #196]	; (8003034 <HAL_UART_MspInit+0x1d8>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d155      	bne.n	8003020 <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f74:	2301      	movs	r3, #1
 8002f76:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f7c:	f107 030c 	add.w	r3, r7, #12
 8002f80:	4618      	mov	r0, r3
 8002f82:	f004 f944 	bl	800720e <HAL_RCCEx_PeriphCLKConfig>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_UART_MspInit+0x134>
      Error_Handler();
 8002f8c:	f7ff fe9c 	bl	8002cc8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f90:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002f94:	f7ff ff14 	bl	8002dc0 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f98:	2002      	movs	r0, #2
 8002f9a:	f7ff fead 	bl	8002cf8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f9e:	23c0      	movs	r3, #192	; 0xc0
 8002fa0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002faa:	2303      	movs	r3, #3
 8002fac:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fae:	2307      	movs	r3, #7
 8002fb0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	481f      	ldr	r0, [pc, #124]	; (8003038 <HAL_UART_MspInit+0x1dc>)
 8002fba:	f002 fb99 	bl	80056f0 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8002fbe:	4b1f      	ldr	r3, [pc, #124]	; (800303c <HAL_UART_MspInit+0x1e0>)
 8002fc0:	4a1f      	ldr	r2, [pc, #124]	; (8003040 <HAL_UART_MspInit+0x1e4>)
 8002fc2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002fc4:	4b1d      	ldr	r3, [pc, #116]	; (800303c <HAL_UART_MspInit+0x1e0>)
 8002fc6:	220f      	movs	r2, #15
 8002fc8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fca:	4b1c      	ldr	r3, [pc, #112]	; (800303c <HAL_UART_MspInit+0x1e0>)
 8002fcc:	2210      	movs	r2, #16
 8002fce:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	; (800303c <HAL_UART_MspInit+0x1e0>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fd6:	4b19      	ldr	r3, [pc, #100]	; (800303c <HAL_UART_MspInit+0x1e0>)
 8002fd8:	2280      	movs	r2, #128	; 0x80
 8002fda:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fdc:	4b17      	ldr	r3, [pc, #92]	; (800303c <HAL_UART_MspInit+0x1e0>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fe2:	4b16      	ldr	r3, [pc, #88]	; (800303c <HAL_UART_MspInit+0x1e0>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002fe8:	4b14      	ldr	r3, [pc, #80]	; (800303c <HAL_UART_MspInit+0x1e0>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002fee:	4b13      	ldr	r3, [pc, #76]	; (800303c <HAL_UART_MspInit+0x1e0>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002ff4:	4811      	ldr	r0, [pc, #68]	; (800303c <HAL_UART_MspInit+0x1e0>)
 8002ff6:	f001 ffe7 	bl	8004fc8 <HAL_DMA_Init>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8003000:	f7ff fe62 	bl	8002cc8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a0d      	ldr	r2, [pc, #52]	; (800303c <HAL_UART_MspInit+0x1e0>)
 8003008:	67da      	str	r2, [r3, #124]	; 0x7c
 800300a:	4a0c      	ldr	r2, [pc, #48]	; (800303c <HAL_UART_MspInit+0x1e0>)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003010:	2200      	movs	r2, #0
 8003012:	2100      	movs	r1, #0
 8003014:	2024      	movs	r0, #36	; 0x24
 8003016:	f001 ff78 	bl	8004f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800301a:	2024      	movs	r0, #36	; 0x24
 800301c:	f001 ff8f 	bl	8004f3e <HAL_NVIC_EnableIRQ>
}
 8003020:	bf00      	nop
 8003022:	3780      	adds	r7, #128	; 0x80
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40008000 	.word	0x40008000
 800302c:	20000594 	.word	0x20000594
 8003030:	40020044 	.word	0x40020044
 8003034:	40013800 	.word	0x40013800
 8003038:	48000400 	.word	0x48000400
 800303c:	200005f4 	.word	0x200005f4
 8003040:	40020444 	.word	0x40020444

08003044 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b096      	sub	sp, #88	; 0x58
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800304c:	f107 0308 	add.w	r3, r7, #8
 8003050:	2250      	movs	r2, #80	; 0x50
 8003052:	2100      	movs	r1, #0
 8003054:	4618      	mov	r0, r3
 8003056:	f00b f81f 	bl	800e098 <memset>
  if(hrng->Instance==RNG)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a0d      	ldr	r2, [pc, #52]	; (8003094 <HAL_RNG_MspInit+0x50>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d113      	bne.n	800308c <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8003064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003068:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800306a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800306e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003070:	f107 0308 	add.w	r3, r7, #8
 8003074:	4618      	mov	r0, r3
 8003076:	f004 f8ca 	bl	800720e <HAL_RCCEx_PeriphCLKConfig>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8003080:	f7ff fe22 	bl	8002cc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003084:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003088:	f7ff fe4f 	bl	8002d2a <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800308c:	bf00      	nop
 800308e:	3758      	adds	r7, #88	; 0x58
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	58001000 	.word	0x58001000

08003098 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b096      	sub	sp, #88	; 0x58
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030a0:	f107 0308 	add.w	r3, r7, #8
 80030a4:	2250      	movs	r2, #80	; 0x50
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f00a fff5 	bl	800e098 <memset>
  if(hrtc->Instance==RTC)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a14      	ldr	r2, [pc, #80]	; (8003104 <HAL_RTC_MspInit+0x6c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d120      	bne.n	80030fa <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80030b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030bc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80030be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030c2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030c4:	f107 0308 	add.w	r3, r7, #8
 80030c8:	4618      	mov	r0, r3
 80030ca:	f004 f8a0 	bl	800720e <HAL_RCCEx_PeriphCLKConfig>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80030d4:	f7ff fdf8 	bl	8002cc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80030d8:	f7ff fdfd 	bl	8002cd6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80030dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80030e0:	f7ff fe3c 	bl	8002d5c <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80030e4:	2200      	movs	r2, #0
 80030e6:	2100      	movs	r1, #0
 80030e8:	2003      	movs	r0, #3
 80030ea:	f001 ff0e 	bl	8004f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80030ee:	2003      	movs	r0, #3
 80030f0:	f001 ff25 	bl	8004f3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f004 fd03 	bl	8007b00 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 80030fa:	bf00      	nop
 80030fc:	3758      	adds	r7, #88	; 0x58
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40002800 	.word	0x40002800

08003108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800310c:	bf00      	nop
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003116:	b480      	push	{r7}
 8003118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800311a:	e7fe      	b.n	800311a <HardFault_Handler+0x4>

0800311c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003120:	e7fe      	b.n	8003120 <MemManage_Handler+0x4>

08003122 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003122:	b480      	push	{r7}
 8003124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003126:	e7fe      	b.n	8003126 <BusFault_Handler+0x4>

08003128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800312c:	e7fe      	b.n	800312c <UsageFault_Handler+0x4>

0800312e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800312e:	b480      	push	{r7}
 8003130:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003132:	bf00      	nop
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003140:	bf00      	nop
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800314a:	b480      	push	{r7}
 800314c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800315c:	f001 fd56 	bl	8004c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003160:	bf00      	nop
 8003162:	bd80      	pop	{r7, pc}

08003164 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003168:	f7fe ffc6 	bl	80020f8 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800316c:	bf00      	nop
 800316e:	bd80      	pop	{r7, pc}

08003170 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003174:	4802      	ldr	r0, [pc, #8]	; (8003180 <DMA1_Channel4_IRQHandler+0x10>)
 8003176:	f002 f908 	bl	800538a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800317a:	bf00      	nop
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000594 	.word	0x20000594

08003184 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003188:	4802      	ldr	r0, [pc, #8]	; (8003194 <USART1_IRQHandler+0x10>)
 800318a:	f004 fe2b 	bl	8007de4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000500 	.word	0x20000500

08003198 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800319c:	4802      	ldr	r0, [pc, #8]	; (80031a8 <LPUART1_IRQHandler+0x10>)
 800319e:	f004 fe21 	bl	8007de4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	2000046c 	.word	0x2000046c

080031ac <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80031b0:	f001 f9f0 	bl	8004594 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80031b4:	bf00      	nop
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80031bc:	f001 fa20 	bl	8004600 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80031c8:	f002 fc32 	bl	8005a30 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80031cc:	bf00      	nop
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80031d4:	4802      	ldr	r0, [pc, #8]	; (80031e0 <DMA2_Channel4_IRQHandler+0x10>)
 80031d6:	f002 f8d8 	bl	800538a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	200005f4 	.word	0x200005f4

080031e4 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 80031e8:	2010      	movs	r0, #16
 80031ea:	f002 fc09 	bl	8005a00 <HAL_GPIO_EXTI_IRQHandler>
}
 80031ee:	bf00      	nop
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 80031f6:	2001      	movs	r0, #1
 80031f8:	f002 fc02 	bl	8005a00 <HAL_GPIO_EXTI_IRQHandler>
}
 80031fc:	bf00      	nop
 80031fe:	bd80      	pop	{r7, pc}

08003200 <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8003204:	2002      	movs	r0, #2
 8003206:	f002 fbfb 	bl	8005a00 <HAL_GPIO_EXTI_IRQHandler>
}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}

0800320e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800320e:	b480      	push	{r7}
 8003210:	af00      	add	r7, sp, #0
  return 1;
 8003212:	2301      	movs	r3, #1
}
 8003214:	4618      	mov	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <_kill>:

int _kill(int pid, int sig)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b082      	sub	sp, #8
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
 8003226:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003228:	f00a ff88 	bl	800e13c <__errno>
 800322c:	4603      	mov	r3, r0
 800322e:	2216      	movs	r2, #22
 8003230:	601a      	str	r2, [r3, #0]
  return -1;
 8003232:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <_exit>:

void _exit (int status)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003246:	f04f 31ff 	mov.w	r1, #4294967295
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff ffe7 	bl	800321e <_kill>
  while (1) {}    /* Make sure we hang here */
 8003250:	e7fe      	b.n	8003250 <_exit+0x12>

08003252 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b086      	sub	sp, #24
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	e00a      	b.n	800327a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003264:	f3af 8000 	nop.w
 8003268:	4601      	mov	r1, r0
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	60ba      	str	r2, [r7, #8]
 8003270:	b2ca      	uxtb	r2, r1
 8003272:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	3301      	adds	r3, #1
 8003278:	617b      	str	r3, [r7, #20]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	429a      	cmp	r2, r3
 8003280:	dbf0      	blt.n	8003264 <_read+0x12>
  }

  return len;
 8003282:	687b      	ldr	r3, [r7, #4]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <_close>:
  }
  return len;
}

int _close(int file)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003294:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003298:	4618      	mov	r0, r3
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032b4:	605a      	str	r2, [r3, #4]
  return 0;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <_isatty>:

int _isatty(int file)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80032cc:	2301      	movs	r3, #1
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032da:	b480      	push	{r7}
 80032dc:	b085      	sub	sp, #20
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032fc:	4a14      	ldr	r2, [pc, #80]	; (8003350 <_sbrk+0x5c>)
 80032fe:	4b15      	ldr	r3, [pc, #84]	; (8003354 <_sbrk+0x60>)
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003308:	4b13      	ldr	r3, [pc, #76]	; (8003358 <_sbrk+0x64>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d102      	bne.n	8003316 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003310:	4b11      	ldr	r3, [pc, #68]	; (8003358 <_sbrk+0x64>)
 8003312:	4a12      	ldr	r2, [pc, #72]	; (800335c <_sbrk+0x68>)
 8003314:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003316:	4b10      	ldr	r3, [pc, #64]	; (8003358 <_sbrk+0x64>)
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4413      	add	r3, r2
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	429a      	cmp	r2, r3
 8003322:	d207      	bcs.n	8003334 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003324:	f00a ff0a 	bl	800e13c <__errno>
 8003328:	4603      	mov	r3, r0
 800332a:	220c      	movs	r2, #12
 800332c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800332e:	f04f 33ff 	mov.w	r3, #4294967295
 8003332:	e009      	b.n	8003348 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003334:	4b08      	ldr	r3, [pc, #32]	; (8003358 <_sbrk+0x64>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800333a:	4b07      	ldr	r3, [pc, #28]	; (8003358 <_sbrk+0x64>)
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4413      	add	r3, r2
 8003342:	4a05      	ldr	r2, [pc, #20]	; (8003358 <_sbrk+0x64>)
 8003344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003346:	68fb      	ldr	r3, [r7, #12]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20030000 	.word	0x20030000
 8003354:	00001000 	.word	0x00001000
 8003358:	2000068c 	.word	0x2000068c
 800335c:	200019c0 	.word	0x200019c0

08003360 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8003364:	4b03      	ldr	r3, [pc, #12]	; (8003374 <LL_FLASH_GetUDN+0x14>)
 8003366:	681b      	ldr	r3, [r3, #0]
}
 8003368:	4618      	mov	r0, r3
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	1fff7580 	.word	0x1fff7580

08003378 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800337c:	4b03      	ldr	r3, [pc, #12]	; (800338c <LL_FLASH_GetDeviceID+0x14>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	b2db      	uxtb	r3, r3
}
 8003382:	4618      	mov	r0, r3
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	1fff7584 	.word	0x1fff7584

08003390 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8003394:	4b03      	ldr	r3, [pc, #12]	; (80033a4 <LL_FLASH_GetSTCompanyID+0x14>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	0a1b      	lsrs	r3, r3, #8
}
 800339a:	4618      	mov	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	1fff7584 	.word	0x1fff7584

080033a8 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80033a8:	b5b0      	push	{r4, r5, r7, lr}
 80033aa:	b090      	sub	sp, #64	; 0x40
 80033ac:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80033ae:	2392      	movs	r3, #146	; 0x92
 80033b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80033b4:	4b3f      	ldr	r3, [pc, #252]	; (80034b4 <APP_BLE_Init+0x10c>)
 80033b6:	1d3c      	adds	r4, r7, #4
 80033b8:	461d      	mov	r5, r3
 80033ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80033ca:	c403      	stmia	r4!, {r0, r1}
 80033cc:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80033ce:	f000 fb0b 	bl	80039e8 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80033d2:	2101      	movs	r1, #1
 80033d4:	2002      	movs	r0, #2
 80033d6:	f009 fd7b 	bl	800ced0 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80033da:	4a37      	ldr	r2, [pc, #220]	; (80034b8 <APP_BLE_Init+0x110>)
 80033dc:	2100      	movs	r1, #0
 80033de:	2004      	movs	r0, #4
 80033e0:	f009 fea2 	bl	800d128 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80033e4:	1d3b      	adds	r3, r7, #4
 80033e6:	4618      	mov	r0, r3
 80033e8:	f008 fb12 	bl	800ba10 <SHCI_C2_BLE_Init>
 80033ec:	4603      	mov	r3, r0
 80033ee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 80033f2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d008      	beq.n	800340c <APP_BLE_Init+0x64>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 80033fa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80033fe:	4619      	mov	r1, r3
 8003400:	482e      	ldr	r0, [pc, #184]	; (80034bc <APP_BLE_Init+0x114>)
 8003402:	f00a fcfb 	bl	800ddfc <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8003406:	f7ff fc5f 	bl	8002cc8 <Error_Handler>
 800340a:	e002      	b.n	8003412 <APP_BLE_Init+0x6a>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800340c:	482c      	ldr	r0, [pc, #176]	; (80034c0 <APP_BLE_Init+0x118>)
 800340e:	f00a fcf5 	bl	800ddfc <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8003412:	f000 faff 	bl	8003a14 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8003416:	f009 fa5b 	bl	800c8d0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800341a:	4b2a      	ldr	r3, [pc, #168]	; (80034c4 <APP_BLE_Init+0x11c>)
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8003422:	4b28      	ldr	r3, [pc, #160]	; (80034c4 <APP_BLE_Init+0x11c>)
 8003424:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003428:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800342a:	4a27      	ldr	r2, [pc, #156]	; (80034c8 <APP_BLE_Init+0x120>)
 800342c:	2100      	movs	r1, #0
 800342e:	2001      	movs	r0, #1
 8003430:	f009 fe7a 	bl	800d128 <UTIL_SEQ_RegTask>
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_UPDATE_REG_ID, UTIL_SEQ_RFU, Connection_Interval_Update_Req);
 8003434:	4a25      	ldr	r2, [pc, #148]	; (80034cc <APP_BLE_Init+0x124>)
 8003436:	2100      	movs	r1, #0
 8003438:	2002      	movs	r0, #2
 800343a:	f009 fe75 	bl	800d128 <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800343e:	2006      	movs	r0, #6
 8003440:	f007 fd0d 	bl	800ae5e <aci_hal_set_radio_activity_mask>
 8003444:	4603      	mov	r3, r0
 8003446:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800344a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800344e:	2b00      	cmp	r3, #0
 8003450:	d006      	beq.n	8003460 <APP_BLE_Init+0xb8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8003452:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003456:	4619      	mov	r1, r3
 8003458:	481d      	ldr	r0, [pc, #116]	; (80034d0 <APP_BLE_Init+0x128>)
 800345a:	f00a fccf 	bl	800ddfc <iprintf>
 800345e:	e002      	b.n	8003466 <APP_BLE_Init+0xbe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8003460:	481c      	ldr	r0, [pc, #112]	; (80034d4 <APP_BLE_Init+0x12c>)
 8003462:	f00a fccb 	bl	800ddfc <iprintf>
  }
#endif /* RADIO_ACTIVITY_EVENT != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  index_con_int = 0;
 8003466:	4b1c      	ldr	r3, [pc, #112]	; (80034d8 <APP_BLE_Init+0x130>)
 8003468:	2200      	movs	r2, #0
 800346a:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 800346c:	4b1b      	ldr	r3, [pc, #108]	; (80034dc <APP_BLE_Init+0x134>)
 800346e:	2201      	movs	r2, #1
 8003470:	701a      	strb	r2, [r3, #0]
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8003472:	f000 ff25 	bl	80042c0 <P2PS_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8003476:	4b1a      	ldr	r3, [pc, #104]	; (80034e0 <APP_BLE_Init+0x138>)
 8003478:	2200      	movs	r2, #0
 800347a:	491a      	ldr	r1, [pc, #104]	; (80034e4 <APP_BLE_Init+0x13c>)
 800347c:	2000      	movs	r0, #0
 800347e:	f7fe ffdd 	bl	800243c <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8003482:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <APP_BLE_Init+0x140>)
 8003484:	2200      	movs	r2, #0
 8003486:	4919      	ldr	r1, [pc, #100]	; (80034ec <APP_BLE_Init+0x144>)
 8003488:	2000      	movs	r0, #0
 800348a:	f7fe ffd7 	bl	800243c <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800348e:	4b0d      	ldr	r3, [pc, #52]	; (80034c4 <APP_BLE_Init+0x11c>)
 8003490:	2200      	movs	r2, #0
 8003492:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8003494:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <APP_BLE_Init+0x11c>)
 8003496:	2200      	movs	r2, #0
 8003498:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800349a:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <APP_BLE_Init+0x148>)
 800349c:	2280      	movs	r2, #128	; 0x80
 800349e:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 80034a0:	4b14      	ldr	r3, [pc, #80]	; (80034f4 <APP_BLE_Init+0x14c>)
 80034a2:	22a0      	movs	r2, #160	; 0xa0
 80034a4:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 80034a6:	2001      	movs	r0, #1
 80034a8:	f000 fc64 	bl	8003d74 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80034ac:	bf00      	nop
}
 80034ae:	3740      	adds	r7, #64	; 0x40
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bdb0      	pop	{r4, r5, r7, pc}
 80034b4:	08010324 	.word	0x08010324
 80034b8:	0800b429 	.word	0x0800b429
 80034bc:	08010248 	.word	0x08010248
 80034c0:	08010280 	.word	0x08010280
 80034c4:	20000698 	.word	0x20000698
 80034c8:	08003f55 	.word	0x08003f55
 80034cc:	0800409d 	.word	0x0800409d
 80034d0:	080102a8 	.word	0x080102a8
 80034d4:	080102ec 	.word	0x080102ec
 80034d8:	20000724 	.word	0x20000724
 80034dc:	20000725 	.word	0x20000725
 80034e0:	08003fb5 	.word	0x08003fb5
 80034e4:	20000719 	.word	0x20000719
 80034e8:	08003fc5 	.word	0x08003fc5
 80034ec:	2000071a 	.word	0x2000071a
 80034f0:	2000071c 	.word	0x2000071c
 80034f4:	2000071e 	.word	0x2000071e

080034f8 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80034f8:	b5b0      	push	{r4, r5, r7, lr}
 80034fa:	b090      	sub	sp, #64	; 0x40
 80034fc:	af04      	add	r7, sp, #16
 80034fe:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8003500:	2392      	movs	r3, #146	; 0x92
 8003502:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3301      	adds	r3, #1
 800350a:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (p_event_pckt->evt)
 800350c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2bff      	cmp	r3, #255	; 0xff
 8003512:	f000 8120 	beq.w	8003756 <SVCCTL_App_Notification+0x25e>
 8003516:	2bff      	cmp	r3, #255	; 0xff
 8003518:	f300 8222 	bgt.w	8003960 <SVCCTL_App_Notification+0x468>
 800351c:	2b05      	cmp	r3, #5
 800351e:	d002      	beq.n	8003526 <SVCCTL_App_Notification+0x2e>
 8003520:	2b3e      	cmp	r3, #62	; 0x3e
 8003522:	d02e      	beq.n	8003582 <SVCCTL_App_Notification+0x8a>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8003524:	e21c      	b.n	8003960 <SVCCTL_App_Notification+0x468>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8003526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003528:	3302      	adds	r3, #2
 800352a:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003532:	b29a      	uxth	r2, r3
 8003534:	4bb3      	ldr	r3, [pc, #716]	; (8003804 <SVCCTL_App_Notification+0x30c>)
 8003536:	8adb      	ldrh	r3, [r3, #22]
 8003538:	429a      	cmp	r2, r3
 800353a:	d114      	bne.n	8003566 <SVCCTL_App_Notification+0x6e>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800353c:	4bb1      	ldr	r3, [pc, #708]	; (8003804 <SVCCTL_App_Notification+0x30c>)
 800353e:	2200      	movs	r2, #0
 8003540:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8003542:	4bb0      	ldr	r3, [pc, #704]	; (8003804 <SVCCTL_App_Notification+0x30c>)
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800354a:	48af      	ldr	r0, [pc, #700]	; (8003808 <SVCCTL_App_Notification+0x310>)
 800354c:	f00a fcc4 	bl	800ded8 <puts>
                    p_disconnection_complete_event->Connection_Handle,
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003556:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8003558:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800355e:	461a      	mov	r2, r3
 8003560:	48aa      	ldr	r0, [pc, #680]	; (800380c <SVCCTL_App_Notification+0x314>)
 8003562:	f00a fc4b 	bl	800ddfc <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 8003566:	2001      	movs	r0, #1
 8003568:	f000 fc04 	bl	8003d74 <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800356c:	4ba8      	ldr	r3, [pc, #672]	; (8003810 <SVCCTL_App_Notification+0x318>)
 800356e:	2201      	movs	r2, #1
 8003570:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8003572:	4ba4      	ldr	r3, [pc, #656]	; (8003804 <SVCCTL_App_Notification+0x30c>)
 8003574:	8ada      	ldrh	r2, [r3, #22]
 8003576:	4ba6      	ldr	r3, [pc, #664]	; (8003810 <SVCCTL_App_Notification+0x318>)
 8003578:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 800357a:	48a5      	ldr	r0, [pc, #660]	; (8003810 <SVCCTL_App_Notification+0x318>)
 800357c:	f000 fe8c 	bl	8004298 <P2PS_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8003580:	e1f1      	b.n	8003966 <SVCCTL_App_Notification+0x46e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8003582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003584:	3302      	adds	r3, #2
 8003586:	61fb      	str	r3, [r7, #28]
      switch (p_meta_evt->subevent)
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b0c      	cmp	r3, #12
 800358e:	d033      	beq.n	80035f8 <SVCCTL_App_Notification+0x100>
 8003590:	2b0c      	cmp	r3, #12
 8003592:	f300 80de 	bgt.w	8003752 <SVCCTL_App_Notification+0x25a>
 8003596:	2b01      	cmp	r3, #1
 8003598:	d06c      	beq.n	8003674 <SVCCTL_App_Notification+0x17c>
 800359a:	2b03      	cmp	r3, #3
 800359c:	f040 80d9 	bne.w	8003752 <SVCCTL_App_Notification+0x25a>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	3301      	adds	r3, #1
 80035a4:	617b      	str	r3, [r7, #20]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 80035a6:	489b      	ldr	r0, [pc, #620]	; (8003814 <SVCCTL_App_Notification+0x31c>)
 80035a8:	f00a fc96 	bl	800ded8 <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80035b2:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fc ff9d 	bl	80004f4 <__aeabi_i2d>
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	4b96      	ldr	r3, [pc, #600]	; (8003818 <SVCCTL_App_Notification+0x320>)
 80035c0:	f7fd f802 	bl	80005c8 <__aeabi_dmul>
 80035c4:	4602      	mov	r2, r0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4610      	mov	r0, r2
 80035ca:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80035d2:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80035d4:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80035dc:	b29b      	uxth	r3, r3
 80035de:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	9301      	str	r3, [sp, #4]
 80035ea:	9400      	str	r4, [sp, #0]
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	488a      	ldr	r0, [pc, #552]	; (800381c <SVCCTL_App_Notification+0x324>)
 80035f2:	f00a fc03 	bl	800ddfc <iprintf>
          break;
 80035f6:	e0ad      	b.n	8003754 <SVCCTL_App_Notification+0x25c>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	3301      	adds	r3, #1
 80035fc:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG("==>> HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE - ");
 80035fe:	4888      	ldr	r0, [pc, #544]	; (8003820 <SVCCTL_App_Notification+0x328>)
 8003600:	f00a fbfc 	bl	800ddfc <iprintf>
          if (p_evt_le_phy_update_complete->Status == 0)
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d103      	bne.n	8003614 <SVCCTL_App_Notification+0x11c>
            APP_DBG_MSG("status ok \n");
 800360c:	4885      	ldr	r0, [pc, #532]	; (8003824 <SVCCTL_App_Notification+0x32c>)
 800360e:	f00a fc63 	bl	800ded8 <puts>
 8003612:	e002      	b.n	800361a <SVCCTL_App_Notification+0x122>
            APP_DBG_MSG("status nok \n");
 8003614:	4884      	ldr	r0, [pc, #528]	; (8003828 <SVCCTL_App_Notification+0x330>)
 8003616:	f00a fc5f 	bl	800ded8 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 800361a:	4b7a      	ldr	r3, [pc, #488]	; (8003804 <SVCCTL_App_Notification+0x30c>)
 800361c:	8adb      	ldrh	r3, [r3, #22]
 800361e:	f107 020a 	add.w	r2, r7, #10
 8003622:	f107 010b 	add.w	r1, r7, #11
 8003626:	4618      	mov	r0, r3
 8003628:	f007 fc91 	bl	800af4e <hci_le_read_phy>
 800362c:	4603      	mov	r3, r0
 800362e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 8003632:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003636:	2b00      	cmp	r3, #0
 8003638:	d003      	beq.n	8003642 <SVCCTL_App_Notification+0x14a>
            APP_DBG_MSG("==>> hci_le_read_phy : fail\n\r");
 800363a:	487c      	ldr	r0, [pc, #496]	; (800382c <SVCCTL_App_Notification+0x334>)
 800363c:	f00a fbde 	bl	800ddfc <iprintf>
          break;
 8003640:	e088      	b.n	8003754 <SVCCTL_App_Notification+0x25c>
            APP_DBG_MSG("==>> hci_le_read_phy - Success \n");
 8003642:	487b      	ldr	r0, [pc, #492]	; (8003830 <SVCCTL_App_Notification+0x338>)
 8003644:	f00a fc48 	bl	800ded8 <puts>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 8003648:	7afb      	ldrb	r3, [r7, #11]
 800364a:	2b02      	cmp	r3, #2
 800364c:	d10a      	bne.n	8003664 <SVCCTL_App_Notification+0x16c>
 800364e:	7abb      	ldrb	r3, [r7, #10]
 8003650:	2b02      	cmp	r3, #2
 8003652:	d107      	bne.n	8003664 <SVCCTL_App_Notification+0x16c>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 8003654:	7afb      	ldrb	r3, [r7, #11]
 8003656:	4619      	mov	r1, r3
 8003658:	7abb      	ldrb	r3, [r7, #10]
 800365a:	461a      	mov	r2, r3
 800365c:	4875      	ldr	r0, [pc, #468]	; (8003834 <SVCCTL_App_Notification+0x33c>)
 800365e:	f00a fbcd 	bl	800ddfc <iprintf>
          break;
 8003662:	e077      	b.n	8003754 <SVCCTL_App_Notification+0x25c>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 8003664:	7afb      	ldrb	r3, [r7, #11]
 8003666:	4619      	mov	r1, r3
 8003668:	7abb      	ldrb	r3, [r7, #10]
 800366a:	461a      	mov	r2, r3
 800366c:	4871      	ldr	r0, [pc, #452]	; (8003834 <SVCCTL_App_Notification+0x33c>)
 800366e:	f00a fbc5 	bl	800ddfc <iprintf>
          break;
 8003672:	e06f      	b.n	8003754 <SVCCTL_App_Notification+0x25c>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	3301      	adds	r3, #1
 8003678:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800367a:	4b62      	ldr	r3, [pc, #392]	; (8003804 <SVCCTL_App_Notification+0x30c>)
 800367c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003680:	4618      	mov	r0, r3
 8003682:	f7fe ff55 	bl	8002530 <HW_TS_Stop>
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800368c:	b29b      	uxth	r3, r3
 800368e:	4619      	mov	r1, r3
 8003690:	4869      	ldr	r0, [pc, #420]	; (8003838 <SVCCTL_App_Notification+0x340>)
 8003692:	f00a fbb3 	bl	800ddfc <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800369a:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80036a0:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80036a6:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80036ac:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80036b2:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80036b8:	9302      	str	r3, [sp, #8]
 80036ba:	9101      	str	r1, [sp, #4]
 80036bc:	9200      	str	r2, [sp, #0]
 80036be:	462b      	mov	r3, r5
 80036c0:	4622      	mov	r2, r4
 80036c2:	4601      	mov	r1, r0
 80036c4:	485d      	ldr	r0, [pc, #372]	; (800383c <SVCCTL_App_Notification+0x344>)
 80036c6:	f00a fb99 	bl	800ddfc <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80036d0:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fc ff0e 	bl	80004f4 <__aeabi_i2d>
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	4b4e      	ldr	r3, [pc, #312]	; (8003818 <SVCCTL_App_Notification+0x320>)
 80036de:	f7fc ff73 	bl	80005c8 <__aeabi_dmul>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	4610      	mov	r0, r2
 80036e8:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 80036f0:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80036f2:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	9301      	str	r3, [sp, #4]
 8003708:	9400      	str	r4, [sp, #0]
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4843      	ldr	r0, [pc, #268]	; (800381c <SVCCTL_App_Notification+0x324>)
 8003710:	f00a fb74 	bl	800ddfc <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8003714:	4b3b      	ldr	r3, [pc, #236]	; (8003804 <SVCCTL_App_Notification+0x30c>)
 8003716:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800371a:	2b04      	cmp	r3, #4
 800371c:	d104      	bne.n	8003728 <SVCCTL_App_Notification+0x230>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800371e:	4b39      	ldr	r3, [pc, #228]	; (8003804 <SVCCTL_App_Notification+0x30c>)
 8003720:	2206      	movs	r2, #6
 8003722:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8003726:	e003      	b.n	8003730 <SVCCTL_App_Notification+0x238>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8003728:	4b36      	ldr	r3, [pc, #216]	; (8003804 <SVCCTL_App_Notification+0x30c>)
 800372a:	2205      	movs	r2, #5
 800372c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003736:	b29a      	uxth	r2, r3
 8003738:	4b32      	ldr	r3, [pc, #200]	; (8003804 <SVCCTL_App_Notification+0x30c>)
 800373a:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800373c:	4b34      	ldr	r3, [pc, #208]	; (8003810 <SVCCTL_App_Notification+0x318>)
 800373e:	2200      	movs	r2, #0
 8003740:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8003742:	4b30      	ldr	r3, [pc, #192]	; (8003804 <SVCCTL_App_Notification+0x30c>)
 8003744:	8ada      	ldrh	r2, [r3, #22]
 8003746:	4b32      	ldr	r3, [pc, #200]	; (8003810 <SVCCTL_App_Notification+0x318>)
 8003748:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 800374a:	4831      	ldr	r0, [pc, #196]	; (8003810 <SVCCTL_App_Notification+0x318>)
 800374c:	f000 fda4 	bl	8004298 <P2PS_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8003750:	e000      	b.n	8003754 <SVCCTL_App_Notification+0x25c>
          break;
 8003752:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8003754:	e107      	b.n	8003966 <SVCCTL_App_Notification+0x46e>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8003756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003758:	3302      	adds	r3, #2
 800375a:	627b      	str	r3, [r7, #36]	; 0x24
      switch (p_blecore_evt->ecode)
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	b29b      	uxth	r3, r3
 8003762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003766:	f000 80e7 	beq.w	8003938 <SVCCTL_App_Notification+0x440>
 800376a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800376e:	f300 80f9 	bgt.w	8003964 <SVCCTL_App_Notification+0x46c>
 8003772:	2b04      	cmp	r3, #4
 8003774:	f000 80e8 	beq.w	8003948 <SVCCTL_App_Notification+0x450>
 8003778:	2b04      	cmp	r3, #4
 800377a:	f2c0 80f3 	blt.w	8003964 <SVCCTL_App_Notification+0x46c>
 800377e:	f240 420a 	movw	r2, #1034	; 0x40a
 8003782:	4293      	cmp	r3, r2
 8003784:	f300 80ee 	bgt.w	8003964 <SVCCTL_App_Notification+0x46c>
 8003788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800378c:	f2c0 80ea 	blt.w	8003964 <SVCCTL_App_Notification+0x46c>
 8003790:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003794:	2b0a      	cmp	r3, #10
 8003796:	f200 80e5 	bhi.w	8003964 <SVCCTL_App_Notification+0x46c>
 800379a:	a201      	add	r2, pc, #4	; (adr r2, 80037a0 <SVCCTL_App_Notification+0x2a8>)
 800379c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a0:	080037cd 	.word	0x080037cd
 80037a4:	08003903 	.word	0x08003903
 80037a8:	080037d5 	.word	0x080037d5
 80037ac:	08003859 	.word	0x08003859
 80037b0:	08003861 	.word	0x08003861
 80037b4:	08003869 	.word	0x08003869
 80037b8:	08003965 	.word	0x08003965
 80037bc:	08003941 	.word	0x08003941
 80037c0:	0800389d 	.word	0x0800389d
 80037c4:	080038ad 	.word	0x080038ad
 80037c8:	080038a5 	.word	0x080038a5
          APP_DBG_MSG(">>== ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE \n");
 80037cc:	481c      	ldr	r0, [pc, #112]	; (8003840 <SVCCTL_App_Notification+0x348>)
 80037ce:	f00a fb83 	bl	800ded8 <puts>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 80037d2:	e0c4      	b.n	800395e <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 80037d4:	481b      	ldr	r0, [pc, #108]	; (8003844 <SVCCTL_App_Notification+0x34c>)
 80037d6:	f00a fb7f 	bl	800ded8 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,123456);
 80037da:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <SVCCTL_App_Notification+0x30c>)
 80037dc:	8adb      	ldrh	r3, [r3, #22]
 80037de:	491a      	ldr	r1, [pc, #104]	; (8003848 <SVCCTL_App_Notification+0x350>)
 80037e0:	4618      	mov	r0, r3
 80037e2:	f006 fd3f 	bl	800a264 <aci_gap_pass_key_resp>
 80037e6:	4603      	mov	r3, r0
 80037e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 80037ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d02d      	beq.n	8003850 <SVCCTL_App_Notification+0x358>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 80037f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80037f8:	4619      	mov	r1, r3
 80037fa:	4814      	ldr	r0, [pc, #80]	; (800384c <SVCCTL_App_Notification+0x354>)
 80037fc:	f00a fafe 	bl	800ddfc <iprintf>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 8003800:	e0ad      	b.n	800395e <SVCCTL_App_Notification+0x466>
 8003802:	bf00      	nop
 8003804:	20000698 	.word	0x20000698
 8003808:	08010360 	.word	0x08010360
 800380c:	0801038c 	.word	0x0801038c
 8003810:	20000720 	.word	0x20000720
 8003814:	080103c8 	.word	0x080103c8
 8003818:	3ff40000 	.word	0x3ff40000
 800381c:	080103fc 	.word	0x080103fc
 8003820:	08010468 	.word	0x08010468
 8003824:	08010498 	.word	0x08010498
 8003828:	080104a4 	.word	0x080104a4
 800382c:	080104b0 	.word	0x080104b0
 8003830:	080104d0 	.word	0x080104d0
 8003834:	080104f0 	.word	0x080104f0
 8003838:	08010514 	.word	0x08010514
 800383c:	0801055c 	.word	0x0801055c
 8003840:	080105ac 	.word	0x080105ac
 8003844:	080105dc 	.word	0x080105dc
 8003848:	0001e240 	.word	0x0001e240
 800384c:	08010604 	.word	0x08010604
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 8003850:	4847      	ldr	r0, [pc, #284]	; (8003970 <SVCCTL_App_Notification+0x478>)
 8003852:	f00a fb41 	bl	800ded8 <puts>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 8003856:	e082      	b.n	800395e <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG(">>== ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE\n");
 8003858:	4846      	ldr	r0, [pc, #280]	; (8003974 <SVCCTL_App_Notification+0x47c>)
 800385a:	f00a fb3d 	bl	800ded8 <puts>
          break; /* ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE */
 800385e:	e07e      	b.n	800395e <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG("==>> ACI_GAP_PERIPHERAL_SECURITY_INITIATED_VSEVT_CODE \n");
 8003860:	4845      	ldr	r0, [pc, #276]	; (8003978 <SVCCTL_App_Notification+0x480>)
 8003862:	f00a fb39 	bl	800ded8 <puts>
          break; /* ACI_GAP_PERIPHERAL_SECURITY_INITIATED_VSEVT_CODE */
 8003866:	e07a      	b.n	800395e <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG("==>> ACI_GAP_BOND_LOST_VSEVT_CODE \n");
 8003868:	4844      	ldr	r0, [pc, #272]	; (800397c <SVCCTL_App_Notification+0x484>)
 800386a:	f00a fb35 	bl	800ded8 <puts>
          ret = aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800386e:	4b44      	ldr	r3, [pc, #272]	; (8003980 <SVCCTL_App_Notification+0x488>)
 8003870:	8adb      	ldrh	r3, [r3, #22]
 8003872:	4618      	mov	r0, r3
 8003874:	f006 fea0 	bl	800a5b8 <aci_gap_allow_rebond>
 8003878:	4603      	mov	r3, r0
 800387a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800387e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003882:	2b00      	cmp	r3, #0
 8003884:	d006      	beq.n	8003894 <SVCCTL_App_Notification+0x39c>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Fail, reason: 0x%x\n", ret);
 8003886:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800388a:	4619      	mov	r1, r3
 800388c:	483d      	ldr	r0, [pc, #244]	; (8003984 <SVCCTL_App_Notification+0x48c>)
 800388e:	f00a fab5 	bl	800ddfc <iprintf>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 8003892:	e064      	b.n	800395e <SVCCTL_App_Notification+0x466>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Success \n");
 8003894:	483c      	ldr	r0, [pc, #240]	; (8003988 <SVCCTL_App_Notification+0x490>)
 8003896:	f00a fb1f 	bl	800ded8 <puts>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 800389a:	e060      	b.n	800395e <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG(">>== ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE \n");
 800389c:	483b      	ldr	r0, [pc, #236]	; (800398c <SVCCTL_App_Notification+0x494>)
 800389e:	f00a fb1b 	bl	800ded8 <puts>
          break; /* ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE */
 80038a2:	e05c      	b.n	800395e <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 80038a4:	483a      	ldr	r0, [pc, #232]	; (8003990 <SVCCTL_App_Notification+0x498>)
 80038a6:	f00a fb17 	bl	800ded8 <puts>
          break; /* ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE */    
 80038aa:	e058      	b.n	800395e <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 80038ac:	4839      	ldr	r0, [pc, #228]	; (8003994 <SVCCTL_App_Notification+0x49c>)
 80038ae:	f00a fb13 	bl	800ded8 <puts>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	3302      	adds	r3, #2
          APP_DBG_MSG("     - numeric_value = %ld\n",
 80038b6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80038ba:	4619      	mov	r1, r3
 80038bc:	4836      	ldr	r0, [pc, #216]	; (8003998 <SVCCTL_App_Notification+0x4a0>)
 80038be:	f00a fa9d 	bl	800ddfc <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	3302      	adds	r3, #2
          APP_DBG_MSG("     - Hex_value = %lx\n",
 80038c6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80038ca:	4619      	mov	r1, r3
 80038cc:	4833      	ldr	r0, [pc, #204]	; (800399c <SVCCTL_App_Notification+0x4a4>)
 80038ce:	f00a fa95 	bl	800ddfc <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES); /* CONFIRM_YES = 1 */
 80038d2:	4b2b      	ldr	r3, [pc, #172]	; (8003980 <SVCCTL_App_Notification+0x488>)
 80038d4:	8adb      	ldrh	r3, [r3, #22]
 80038d6:	2101      	movs	r1, #1
 80038d8:	4618      	mov	r0, r3
 80038da:	f006 fec1 	bl	800a660 <aci_gap_numeric_comparison_value_confirm_yesno>
 80038de:	4603      	mov	r3, r0
 80038e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 80038e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d006      	beq.n	80038fa <SVCCTL_App_Notification+0x402>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 80038ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80038f0:	4619      	mov	r1, r3
 80038f2:	482b      	ldr	r0, [pc, #172]	; (80039a0 <SVCCTL_App_Notification+0x4a8>)
 80038f4:	f00a fa82 	bl	800ddfc <iprintf>
          break;
 80038f8:	e031      	b.n	800395e <SVCCTL_App_Notification+0x466>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 80038fa:	482a      	ldr	r0, [pc, #168]	; (80039a4 <SVCCTL_App_Notification+0x4ac>)
 80038fc:	f00a faec 	bl	800ded8 <puts>
          break;
 8003900:	e02d      	b.n	800395e <SVCCTL_App_Notification+0x466>
          pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	3302      	adds	r3, #2
 8003906:	623b      	str	r3, [r7, #32]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 8003908:	4827      	ldr	r0, [pc, #156]	; (80039a8 <SVCCTL_App_Notification+0x4b0>)
 800390a:	f00a fae5 	bl	800ded8 <puts>
          if (pairing_complete->Status == 0)
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	789b      	ldrb	r3, [r3, #2]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d103      	bne.n	800391e <SVCCTL_App_Notification+0x426>
            APP_DBG_MSG("     - Pairing Success\n");
 8003916:	4825      	ldr	r0, [pc, #148]	; (80039ac <SVCCTL_App_Notification+0x4b4>)
 8003918:	f00a fade 	bl	800ded8 <puts>
 800391c:	e008      	b.n	8003930 <SVCCTL_App_Notification+0x438>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n",pairing_complete->Status, pairing_complete->Reason);
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	789b      	ldrb	r3, [r3, #2]
 8003922:	4619      	mov	r1, r3
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	78db      	ldrb	r3, [r3, #3]
 8003928:	461a      	mov	r2, r3
 800392a:	4821      	ldr	r0, [pc, #132]	; (80039b0 <SVCCTL_App_Notification+0x4b8>)
 800392c:	f00a fa66 	bl	800ddfc <iprintf>
          APP_DBG_MSG("\n");
 8003930:	200a      	movs	r0, #10
 8003932:	f00a fa75 	bl	800de20 <putchar>
          break;    
 8003936:	e012      	b.n	800395e <SVCCTL_App_Notification+0x466>
          mutex = 1;
 8003938:	4b1e      	ldr	r3, [pc, #120]	; (80039b4 <SVCCTL_App_Notification+0x4bc>)
 800393a:	2201      	movs	r2, #1
 800393c:	701a      	strb	r2, [r3, #0]
          break;
 800393e:	e00e      	b.n	800395e <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 8003940:	481d      	ldr	r0, [pc, #116]	; (80039b8 <SVCCTL_App_Notification+0x4c0>)
 8003942:	f00a fa5b 	bl	800ddfc <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8003946:	e00a      	b.n	800395e <SVCCTL_App_Notification+0x466>
          BSP_LED_On(LED_GREEN);
 8003948:	2001      	movs	r0, #1
 800394a:	f000 ffeb 	bl	8004924 <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 800394e:	4b0c      	ldr	r3, [pc, #48]	; (8003980 <SVCCTL_App_Notification+0x488>)
 8003950:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8003954:	210a      	movs	r1, #10
 8003956:	4618      	mov	r0, r3
 8003958:	f7fe fe6e 	bl	8002638 <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800395c:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800395e:	e001      	b.n	8003964 <SVCCTL_App_Notification+0x46c>
      break;
 8003960:	bf00      	nop
 8003962:	e000      	b.n	8003966 <SVCCTL_App_Notification+0x46e>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8003964:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8003966:	2301      	movs	r3, #1
}
 8003968:	4618      	mov	r0, r3
 800396a:	3730      	adds	r7, #48	; 0x30
 800396c:	46bd      	mov	sp, r7
 800396e:	bdb0      	pop	{r4, r5, r7, pc}
 8003970:	08010638 	.word	0x08010638
 8003974:	08010660 	.word	0x08010660
 8003978:	0801068c 	.word	0x0801068c
 800397c:	080106c4 	.word	0x080106c4
 8003980:	20000698 	.word	0x20000698
 8003984:	080106e8 	.word	0x080106e8
 8003988:	08010718 	.word	0x08010718
 800398c:	08010740 	.word	0x08010740
 8003990:	0801076c 	.word	0x0801076c
 8003994:	0801079c 	.word	0x0801079c
 8003998:	080107d0 	.word	0x080107d0
 800399c:	080107ec 	.word	0x080107ec
 80039a0:	08010804 	.word	0x08010804
 80039a4:	08010854 	.word	0x08010854
 80039a8:	0801089c 	.word	0x0801089c
 80039ac:	080108c8 	.word	0x080108c8
 80039b0:	080108e0 	.word	0x080108e0
 80039b4:	20000725 	.word	0x20000725
 80039b8:	0801091c 	.word	0x0801091c

080039bc <APP_BLE_Key_Button1_Action>:
  return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 80039c0:	f000 fcaa 	bl	8004318 <P2PS_APP_SW1_Button_Action>
}
 80039c4:	bf00      	nop
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )    
  UTIL_SEQ_SetTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, CFG_SCH_PRIO_0);
 80039cc:	2100      	movs	r1, #0
 80039ce:	2002      	movs	r0, #2
 80039d0:	f009 fbcc 	bl	800d16c <UTIL_SEQ_SetTask>
#endif
  
  return;
 80039d4:	bf00      	nop
}
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
}
 80039dc:	bf00      	nop
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
	...

080039e8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80039ee:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <Ble_Tl_Init+0x20>)
 80039f0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80039f2:	4b06      	ldr	r3, [pc, #24]	; (8003a0c <Ble_Tl_Init+0x24>)
 80039f4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80039f6:	463b      	mov	r3, r7
 80039f8:	4619      	mov	r1, r3
 80039fa:	4805      	ldr	r0, [pc, #20]	; (8003a10 <Ble_Tl_Init+0x28>)
 80039fc:	f007 fcf8 	bl	800b3f0 <hci_init>

  return;
 8003a00:	bf00      	nop
}
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	20030028 	.word	0x20030028
 8003a0c:	08004145 	.word	0x08004145
 8003a10:	0800410d 	.word	0x0800410d

08003a14 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8003a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a16:	b08d      	sub	sp, #52	; 0x34
 8003a18:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8003a1e:	2392      	movs	r3, #146	; 0x92
 8003a20:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 8003a22:	48a5      	ldr	r0, [pc, #660]	; (8003cb8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8003a24:	f00a fa58 	bl	800ded8 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8003a28:	f007 fa6d 	bl	800af06 <hci_reset>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003a30:	7dfb      	ldrb	r3, [r7, #23]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d005      	beq.n	8003a42 <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 8003a36:	7dfb      	ldrb	r3, [r7, #23]
 8003a38:	4619      	mov	r1, r3
 8003a3a:	48a0      	ldr	r0, [pc, #640]	; (8003cbc <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 8003a3c:	f00a f9de 	bl	800ddfc <iprintf>
 8003a40:	e002      	b.n	8003a48 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 8003a42:	489f      	ldr	r0, [pc, #636]	; (8003cc0 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8003a44:	f00a fa48 	bl	800ded8 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8003a48:	f000 fa40 	bl	8003ecc <BleGetBdAddress>
 8003a4c:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	2106      	movs	r1, #6
 8003a52:	2000      	movs	r0, #0
 8003a54:	f007 f917 	bl	800ac86 <aci_hal_write_config_data>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003a5c:	7dfb      	ldrb	r3, [r7, #23]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8003a62:	7dfb      	ldrb	r3, [r7, #23]
 8003a64:	4619      	mov	r1, r3
 8003a66:	4897      	ldr	r0, [pc, #604]	; (8003cc4 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8003a68:	f00a f9c8 	bl	800ddfc <iprintf>
 8003a6c:	e021      	b.n	8003ab2 <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 8003a6e:	4896      	ldr	r0, [pc, #600]	; (8003cc8 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 8003a70:	f00a fa32 	bl	800ded8 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	3305      	adds	r3, #5
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	3304      	adds	r3, #4
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	461c      	mov	r4, r3
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	3303      	adds	r3, #3
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	461d      	mov	r5, r3
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	3302      	adds	r3, #2
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	461a      	mov	r2, r3
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	3301      	adds	r3, #1
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	9302      	str	r3, [sp, #8]
 8003aa2:	9101      	str	r1, [sp, #4]
 8003aa4:	9200      	str	r2, [sp, #0]
 8003aa6:	462b      	mov	r3, r5
 8003aa8:	4622      	mov	r2, r4
 8003aaa:	4601      	mov	r1, r0
 8003aac:	4887      	ldr	r0, [pc, #540]	; (8003ccc <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 8003aae:	f00a f9a5 	bl	800ddfc <iprintf>
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	3305      	adds	r3, #5
 8003ab6:	781a      	ldrb	r2, [r3, #0]
 8003ab8:	4b85      	ldr	r3, [pc, #532]	; (8003cd0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8003aba:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	3304      	adds	r3, #4
 8003ac0:	781a      	ldrb	r2, [r3, #0]
 8003ac2:	4b83      	ldr	r3, [pc, #524]	; (8003cd0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8003ac4:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	3303      	adds	r3, #3
 8003aca:	781a      	ldrb	r2, [r3, #0]
 8003acc:	4b80      	ldr	r3, [pc, #512]	; (8003cd0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8003ace:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	3302      	adds	r3, #2
 8003ad4:	781a      	ldrb	r2, [r3, #0]
 8003ad6:	4b7e      	ldr	r3, [pc, #504]	; (8003cd0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8003ad8:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	3301      	adds	r3, #1
 8003ade:	781a      	ldrb	r2, [r3, #0]
 8003ae0:	4b7b      	ldr	r3, [pc, #492]	; (8003cd0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8003ae2:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	781a      	ldrb	r2, [r3, #0]
 8003ae8:	4b79      	ldr	r3, [pc, #484]	; (8003cd0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8003aea:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8003aec:	4a79      	ldr	r2, [pc, #484]	; (8003cd4 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 8003aee:	2110      	movs	r1, #16
 8003af0:	2018      	movs	r0, #24
 8003af2:	f007 f8c8 	bl	800ac86 <aci_hal_write_config_data>
 8003af6:	4603      	mov	r3, r0
 8003af8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003afa:	7dfb      	ldrb	r3, [r7, #23]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <Ble_Hci_Gap_Gatt_Init+0xf8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 8003b00:	7dfb      	ldrb	r3, [r7, #23]
 8003b02:	4619      	mov	r1, r3
 8003b04:	4874      	ldr	r0, [pc, #464]	; (8003cd8 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8003b06:	f00a f979 	bl	800ddfc <iprintf>
 8003b0a:	e002      	b.n	8003b12 <Ble_Hci_Gap_Gatt_Init+0xfe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 8003b0c:	4873      	ldr	r0, [pc, #460]	; (8003cdc <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 8003b0e:	f00a f9e3 	bl	800ded8 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8003b12:	4a73      	ldr	r2, [pc, #460]	; (8003ce0 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8003b14:	2110      	movs	r1, #16
 8003b16:	2008      	movs	r0, #8
 8003b18:	f007 f8b5 	bl	800ac86 <aci_hal_write_config_data>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003b20:	7dfb      	ldrb	r3, [r7, #23]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d005      	beq.n	8003b32 <Ble_Hci_Gap_Gatt_Init+0x11e>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8003b26:	7dfb      	ldrb	r3, [r7, #23]
 8003b28:	4619      	mov	r1, r3
 8003b2a:	486e      	ldr	r0, [pc, #440]	; (8003ce4 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 8003b2c:	f00a f966 	bl	800ddfc <iprintf>
 8003b30:	e002      	b.n	8003b38 <Ble_Hci_Gap_Gatt_Init+0x124>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8003b32:	486d      	ldr	r0, [pc, #436]	; (8003ce8 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 8003b34:	f00a f9d0 	bl	800ded8 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8003b38:	2118      	movs	r1, #24
 8003b3a:	2001      	movs	r0, #1
 8003b3c:	f007 f928 	bl	800ad90 <aci_hal_set_tx_power_level>
 8003b40:	4603      	mov	r3, r0
 8003b42:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003b44:	7dfb      	ldrb	r3, [r7, #23]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <Ble_Hci_Gap_Gatt_Init+0x142>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 8003b4a:	7dfb      	ldrb	r3, [r7, #23]
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4867      	ldr	r0, [pc, #412]	; (8003cec <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 8003b50:	f00a f954 	bl	800ddfc <iprintf>
 8003b54:	e002      	b.n	8003b5c <Ble_Hci_Gap_Gatt_Init+0x148>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 8003b56:	4866      	ldr	r0, [pc, #408]	; (8003cf0 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8003b58:	f00a f9be 	bl	800ded8 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8003b5c:	f006 fde7 	bl	800a72e <aci_gatt_init>
 8003b60:	4603      	mov	r3, r0
 8003b62:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003b64:	7dfb      	ldrb	r3, [r7, #23]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <Ble_Hci_Gap_Gatt_Init+0x162>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8003b6a:	7dfb      	ldrb	r3, [r7, #23]
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4861      	ldr	r0, [pc, #388]	; (8003cf4 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 8003b70:	f00a f944 	bl	800ddfc <iprintf>
 8003b74:	e002      	b.n	8003b7c <Ble_Hci_Gap_Gatt_Init+0x168>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8003b76:	4860      	ldr	r0, [pc, #384]	; (8003cf8 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 8003b78:	f00a f9ae 	bl	800ded8 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
 8003b82:	f043 0301 	orr.w	r3, r3, #1
 8003b86:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d02b      	beq.n	8003be6 <Ble_Hci_Gap_Gatt_Init+0x1d2>
  {
    const char *name = "P2PSRV1";
 8003b8e:	4b5b      	ldr	r3, [pc, #364]	; (8003cfc <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8003b90:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8003b92:	1dba      	adds	r2, r7, #6
 8003b94:	7bf8      	ldrb	r0, [r7, #15]
 8003b96:	1cbb      	adds	r3, r7, #2
 8003b98:	9301      	str	r3, [sp, #4]
 8003b9a:	1d3b      	adds	r3, r7, #4
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	2207      	movs	r2, #7
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	f006 fbc5 	bl	800a332 <aci_gap_init>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d005      	beq.n	8003bbe <Ble_Hci_Gap_Gatt_Init+0x1aa>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8003bb2:	7dfb      	ldrb	r3, [r7, #23]
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4852      	ldr	r0, [pc, #328]	; (8003d00 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8003bb8:	f00a f920 	bl	800ddfc <iprintf>
 8003bbc:	e002      	b.n	8003bc4 <Ble_Hci_Gap_Gatt_Init+0x1b0>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 8003bbe:	4851      	ldr	r0, [pc, #324]	; (8003d04 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 8003bc0:	f00a f98a 	bl	800ded8 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8003bc4:	88fc      	ldrh	r4, [r7, #6]
 8003bc6:	88bd      	ldrh	r5, [r7, #4]
 8003bc8:	68b8      	ldr	r0, [r7, #8]
 8003bca:	f7fc fb39 	bl	8000240 <strlen>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	2200      	movs	r2, #0
 8003bda:	4629      	mov	r1, r5
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f006 ffa9 	bl	800ab34 <aci_gatt_update_char_value>
 8003be2:	4603      	mov	r3, r0
 8003be4:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8003be6:	88f8      	ldrh	r0, [r7, #6]
 8003be8:	8879      	ldrh	r1, [r7, #2]
 8003bea:	463b      	mov	r3, r7
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	2302      	movs	r3, #2
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f006 ff9f 	bl	800ab34 <aci_gatt_update_char_value>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	2102      	movs	r1, #2
 8003bfe:	2000      	movs	r0, #0
 8003c00:	f007 fa23 	bl	800b04a <hci_le_set_default_phy>
 8003c04:	4603      	mov	r3, r0
 8003c06:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003c08:	7dfb      	ldrb	r3, [r7, #23]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d005      	beq.n	8003c1a <Ble_Hci_Gap_Gatt_Init+0x206>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 8003c0e:	7dfb      	ldrb	r3, [r7, #23]
 8003c10:	4619      	mov	r1, r3
 8003c12:	483d      	ldr	r0, [pc, #244]	; (8003d08 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 8003c14:	f00a f8f2 	bl	800ddfc <iprintf>
 8003c18:	e002      	b.n	8003c20 <Ble_Hci_Gap_Gatt_Init+0x20c>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 8003c1a:	483c      	ldr	r0, [pc, #240]	; (8003d0c <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8003c1c:	f00a f95c 	bl	800ded8 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8003c20:	4b3b      	ldr	r3, [pc, #236]	; (8003d10 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003c22:	2201      	movs	r2, #1
 8003c24:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8003c26:	4b3a      	ldr	r3, [pc, #232]	; (8003d10 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f006 fa02 	bl	800a034 <aci_gap_set_io_capability>
 8003c30:	4603      	mov	r3, r0
 8003c32:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d005      	beq.n	8003c46 <Ble_Hci_Gap_Gatt_Init+0x232>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 8003c3a:	7dfb      	ldrb	r3, [r7, #23]
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4835      	ldr	r0, [pc, #212]	; (8003d14 <Ble_Hci_Gap_Gatt_Init+0x300>)
 8003c40:	f00a f8dc 	bl	800ddfc <iprintf>
 8003c44:	e002      	b.n	8003c4c <Ble_Hci_Gap_Gatt_Init+0x238>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 8003c46:	4834      	ldr	r0, [pc, #208]	; (8003d18 <Ble_Hci_Gap_Gatt_Init+0x304>)
 8003c48:	f00a f946 	bl	800ded8 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8003c4c:	4b30      	ldr	r3, [pc, #192]	; (8003d10 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003c4e:	2201      	movs	r2, #1
 8003c50:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8003c52:	4b2f      	ldr	r3, [pc, #188]	; (8003d10 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003c54:	2208      	movs	r2, #8
 8003c56:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8003c58:	4b2d      	ldr	r3, [pc, #180]	; (8003d10 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003c5a:	2210      	movs	r2, #16
 8003c5c:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8003c5e:	4b2c      	ldr	r3, [pc, #176]	; (8003d10 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8003c64:	4b2a      	ldr	r3, [pc, #168]	; (8003d10 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003c66:	4a2d      	ldr	r2, [pc, #180]	; (8003d1c <Ble_Hci_Gap_Gatt_Init+0x308>)
 8003c68:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8003c6a:	4b29      	ldr	r3, [pc, #164]	; (8003d10 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8003c70:	4b27      	ldr	r3, [pc, #156]	; (8003d10 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003c72:	789c      	ldrb	r4, [r3, #2]
 8003c74:	4b26      	ldr	r3, [pc, #152]	; (8003d10 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003c76:	785d      	ldrb	r5, [r3, #1]
 8003c78:	4b25      	ldr	r3, [pc, #148]	; (8003d10 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003c7a:	791b      	ldrb	r3, [r3, #4]
 8003c7c:	4a24      	ldr	r2, [pc, #144]	; (8003d10 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003c7e:	7952      	ldrb	r2, [r2, #5]
 8003c80:	4923      	ldr	r1, [pc, #140]	; (8003d10 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003c82:	78c9      	ldrb	r1, [r1, #3]
 8003c84:	4822      	ldr	r0, [pc, #136]	; (8003d10 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003c86:	6880      	ldr	r0, [r0, #8]
 8003c88:	2600      	movs	r6, #0
 8003c8a:	9604      	str	r6, [sp, #16]
 8003c8c:	9003      	str	r0, [sp, #12]
 8003c8e:	9102      	str	r1, [sp, #8]
 8003c90:	9201      	str	r2, [sp, #4]
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	2300      	movs	r3, #0
 8003c96:	2201      	movs	r2, #1
 8003c98:	4629      	mov	r1, r5
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	f006 fa1e 	bl	800a0dc <aci_gap_set_authentication_requirement>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 8003ca4:	7dfb      	ldrb	r3, [r7, #23]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d03c      	beq.n	8003d24 <Ble_Hci_Gap_Gatt_Init+0x310>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 8003caa:	7dfb      	ldrb	r3, [r7, #23]
 8003cac:	4619      	mov	r1, r3
 8003cae:	481c      	ldr	r0, [pc, #112]	; (8003d20 <Ble_Hci_Gap_Gatt_Init+0x30c>)
 8003cb0:	f00a f8a4 	bl	800ddfc <iprintf>
 8003cb4:	e039      	b.n	8003d2a <Ble_Hci_Gap_Gatt_Init+0x316>
 8003cb6:	bf00      	nop
 8003cb8:	08010944 	.word	0x08010944
 8003cbc:	08010970 	.word	0x08010970
 8003cc0:	080109a0 	.word	0x080109a0
 8003cc4:	080109c0 	.word	0x080109c0
 8003cc8:	08010a1c 	.word	0x08010a1c
 8003ccc:	08010a68 	.word	0x08010a68
 8003cd0:	20000010 	.word	0x20000010
 8003cd4:	0801148c 	.word	0x0801148c
 8003cd8:	08010aa4 	.word	0x08010aa4
 8003cdc:	08010afc 	.word	0x08010afc
 8003ce0:	0801149c 	.word	0x0801149c
 8003ce4:	08010b44 	.word	0x08010b44
 8003ce8:	08010b9c 	.word	0x08010b9c
 8003cec:	08010be4 	.word	0x08010be4
 8003cf0:	08010c24 	.word	0x08010c24
 8003cf4:	08010c54 	.word	0x08010c54
 8003cf8:	08010c88 	.word	0x08010c88
 8003cfc:	08010cac 	.word	0x08010cac
 8003d00:	08010cb4 	.word	0x08010cb4
 8003d04:	08010ce4 	.word	0x08010ce4
 8003d08:	08010d04 	.word	0x08010d04
 8003d0c:	08010d40 	.word	0x08010d40
 8003d10:	20000698 	.word	0x20000698
 8003d14:	08010d6c 	.word	0x08010d6c
 8003d18:	08010dac 	.word	0x08010dac
 8003d1c:	0001b207 	.word	0x0001b207
 8003d20:	08010ddc 	.word	0x08010ddc
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 8003d24:	480e      	ldr	r0, [pc, #56]	; (8003d60 <Ble_Hci_Gap_Gatt_Init+0x34c>)
 8003d26:	f00a f8d7 	bl	800ded8 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8003d2a:	4b0e      	ldr	r3, [pc, #56]	; (8003d64 <Ble_Hci_Gap_Gatt_Init+0x350>)
 8003d2c:	789b      	ldrb	r3, [r3, #2]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00f      	beq.n	8003d52 <Ble_Hci_Gap_Gatt_Init+0x33e>
  {
    ret = aci_gap_configure_whitelist();
 8003d32:	f006 fc1d 	bl	800a570 <aci_gap_configure_filter_accept_list>
 8003d36:	4603      	mov	r3, r0
 8003d38:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 8003d3a:	7dfb      	ldrb	r3, [r7, #23]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d005      	beq.n	8003d4c <Ble_Hci_Gap_Gatt_Init+0x338>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 8003d40:	7dfb      	ldrb	r3, [r7, #23]
 8003d42:	4619      	mov	r1, r3
 8003d44:	4808      	ldr	r0, [pc, #32]	; (8003d68 <Ble_Hci_Gap_Gatt_Init+0x354>)
 8003d46:	f00a f859 	bl	800ddfc <iprintf>
 8003d4a:	e002      	b.n	8003d52 <Ble_Hci_Gap_Gatt_Init+0x33e>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 8003d4c:	4807      	ldr	r0, [pc, #28]	; (8003d6c <Ble_Hci_Gap_Gatt_Init+0x358>)
 8003d4e:	f00a f8c3 	bl	800ded8 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 8003d52:	4807      	ldr	r0, [pc, #28]	; (8003d70 <Ble_Hci_Gap_Gatt_Init+0x35c>)
 8003d54:	f00a f852 	bl	800ddfc <iprintf>
}
 8003d58:	bf00      	nop
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d60:	08010e28 	.word	0x08010e28
 8003d64:	20000698 	.word	0x20000698
 8003d68:	08010e64 	.word	0x08010e64
 8003d6c:	08010ea4 	.word	0x08010ea4
 8003d70:	08010ed4 	.word	0x08010ed4

08003d74 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08c      	sub	sp, #48	; 0x30
 8003d78:	af08      	add	r7, sp, #32
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8003d7e:	2392      	movs	r3, #146	; 0x92
 8003d80:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 8003d82:	79fb      	ldrb	r3, [r7, #7]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d106      	bne.n	8003d96 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8003d88:	4b41      	ldr	r3, [pc, #260]	; (8003e90 <Adv_Request+0x11c>)
 8003d8a:	881b      	ldrh	r3, [r3, #0]
 8003d8c:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8003d8e:	4b41      	ldr	r3, [pc, #260]	; (8003e94 <Adv_Request+0x120>)
 8003d90:	881b      	ldrh	r3, [r3, #0]
 8003d92:	81bb      	strh	r3, [r7, #12]
 8003d94:	e005      	b.n	8003da2 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8003d96:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8003d9a:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8003d9c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8003da0:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8003da2:	4b3d      	ldr	r3, [pc, #244]	; (8003e98 <Adv_Request+0x124>)
 8003da4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7fe fbc1 	bl	8002530 <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d119      	bne.n	8003de8 <Adv_Request+0x74>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8003db4:	4b38      	ldr	r3, [pc, #224]	; (8003e98 <Adv_Request+0x124>)
 8003db6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d004      	beq.n	8003dc8 <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8003dbe:	4b36      	ldr	r3, [pc, #216]	; (8003e98 <Adv_Request+0x124>)
 8003dc0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d10f      	bne.n	8003de8 <Adv_Request+0x74>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 8003dc8:	f006 f816 	bl	8009df8 <aci_gap_set_non_discoverable>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	72fb      	strb	r3, [r7, #11]
    if (ret != BLE_STATUS_SUCCESS)
 8003dd0:	7afb      	ldrb	r3, [r7, #11]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <Adv_Request+0x6e>
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Stop Advertising Failed , result: %d \n", ret);
 8003dd6:	7afb      	ldrb	r3, [r7, #11]
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4830      	ldr	r0, [pc, #192]	; (8003e9c <Adv_Request+0x128>)
 8003ddc:	f00a f80e 	bl	800ddfc <iprintf>
 8003de0:	e002      	b.n	8003de8 <Adv_Request+0x74>
    }
    else
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
 8003de2:	482f      	ldr	r0, [pc, #188]	; (8003ea0 <Adv_Request+0x12c>)
 8003de4:	f00a f878 	bl	800ded8 <puts>
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8003de8:	4a2b      	ldr	r2, [pc, #172]	; (8003e98 <Adv_Request+0x124>)
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 8003df0:	4b29      	ldr	r3, [pc, #164]	; (8003e98 <Adv_Request+0x124>)
 8003df2:	7e1b      	ldrb	r3, [r3, #24]
 8003df4:	89ba      	ldrh	r2, [r7, #12]
 8003df6:	89f9      	ldrh	r1, [r7, #14]
 8003df8:	2000      	movs	r0, #0
 8003dfa:	9006      	str	r0, [sp, #24]
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	9005      	str	r0, [sp, #20]
 8003e00:	4828      	ldr	r0, [pc, #160]	; (8003ea4 <Adv_Request+0x130>)
 8003e02:	9004      	str	r0, [sp, #16]
 8003e04:	9303      	str	r3, [sp, #12]
 8003e06:	4b28      	ldr	r3, [pc, #160]	; (8003ea8 <Adv_Request+0x134>)
 8003e08:	9302      	str	r3, [sp, #8]
 8003e0a:	2308      	movs	r3, #8
 8003e0c:	9301      	str	r3, [sp, #4]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	2300      	movs	r3, #0
 8003e14:	2000      	movs	r0, #0
 8003e16:	f006 f813 	bl	8009e40 <aci_gap_set_discoverable>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	72fb      	strb	r3, [r7, #11]
                                 (uint8_t*) &a_LocalName,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 8003e1e:	7afb      	ldrb	r3, [r7, #11]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <Adv_Request+0xbc>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 8003e24:	7afb      	ldrb	r3, [r7, #11]
 8003e26:	4619      	mov	r1, r3
 8003e28:	4820      	ldr	r0, [pc, #128]	; (8003eac <Adv_Request+0x138>)
 8003e2a:	f009 ffe7 	bl	800ddfc <iprintf>
 8003e2e:	e002      	b.n	8003e36 <Adv_Request+0xc2>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 8003e30:	481f      	ldr	r0, [pc, #124]	; (8003eb0 <Adv_Request+0x13c>)
 8003e32:	f00a f851 	bl	800ded8 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 8003e36:	491f      	ldr	r1, [pc, #124]	; (8003eb4 <Adv_Request+0x140>)
 8003e38:	200e      	movs	r0, #14
 8003e3a:	f006 fb27 	bl	800a48c <aci_gap_update_adv_data>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 8003e42:	7afb      	ldrb	r3, [r7, #11]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00e      	beq.n	8003e66 <Adv_Request+0xf2>
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 8003e48:	79fb      	ldrb	r3, [r7, #7]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d105      	bne.n	8003e5a <Adv_Request+0xe6>
    {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 8003e4e:	7afb      	ldrb	r3, [r7, #11]
 8003e50:	4619      	mov	r1, r3
 8003e52:	4819      	ldr	r0, [pc, #100]	; (8003eb8 <Adv_Request+0x144>)
 8003e54:	f009 ffd2 	bl	800ddfc <iprintf>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 8003e58:	e017      	b.n	8003e8a <Adv_Request+0x116>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
 8003e5a:	7afb      	ldrb	r3, [r7, #11]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4817      	ldr	r0, [pc, #92]	; (8003ebc <Adv_Request+0x148>)
 8003e60:	f009 ffcc 	bl	800ddfc <iprintf>
  return;
 8003e64:	e011      	b.n	8003e8a <Adv_Request+0x116>
    if (NewStatus == APP_BLE_FAST_ADV)
 8003e66:	79fb      	ldrb	r3, [r7, #7]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d10a      	bne.n	8003e82 <Adv_Request+0x10e>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 8003e6c:	4814      	ldr	r0, [pc, #80]	; (8003ec0 <Adv_Request+0x14c>)
 8003e6e:	f009 ffc5 	bl	800ddfc <iprintf>
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8003e72:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <Adv_Request+0x124>)
 8003e74:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003e78:	4912      	ldr	r1, [pc, #72]	; (8003ec4 <Adv_Request+0x150>)
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fe fbdc 	bl	8002638 <HW_TS_Start>
  return;
 8003e80:	e003      	b.n	8003e8a <Adv_Request+0x116>
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
 8003e82:	4811      	ldr	r0, [pc, #68]	; (8003ec8 <Adv_Request+0x154>)
 8003e84:	f009 ffba 	bl	800ddfc <iprintf>
  return;
 8003e88:	bf00      	nop
}
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	2000071c 	.word	0x2000071c
 8003e94:	2000071e 	.word	0x2000071e
 8003e98:	20000698 	.word	0x20000698
 8003e9c:	08010f00 	.word	0x08010f00
 8003ea0:	08010f4c 	.word	0x08010f4c
 8003ea4:	200006b1 	.word	0x200006b1
 8003ea8:	080114ac 	.word	0x080114ac
 8003eac:	08010f94 	.word	0x08010f94
 8003eb0:	08010fcc 	.word	0x08010fcc
 8003eb4:	20000010 	.word	0x20000010
 8003eb8:	08010ff4 	.word	0x08010ff4
 8003ebc:	08011028 	.word	0x08011028
 8003ec0:	08011060 	.word	0x08011060
 8003ec4:	0001e046 	.word	0x0001e046
 8003ec8:	08011088 	.word	0x08011088

08003ecc <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8003ed2:	f7ff fa45 	bl	8003360 <LL_FLASH_GetUDN>
 8003ed6:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ede:	d023      	beq.n	8003f28 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8003ee0:	f7ff fa56 	bl	8003390 <LL_FLASH_GetSTCompanyID>
 8003ee4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8003ee6:	f7ff fa47 	bl	8003378 <LL_FLASH_GetDeviceID>
 8003eea:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	b2da      	uxtb	r2, r3
 8003ef0:	4b16      	ldr	r3, [pc, #88]	; (8003f4c <BleGetBdAddress+0x80>)
 8003ef2:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	0a1b      	lsrs	r3, r3, #8
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	4b14      	ldr	r3, [pc, #80]	; (8003f4c <BleGetBdAddress+0x80>)
 8003efc:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	4b12      	ldr	r3, [pc, #72]	; (8003f4c <BleGetBdAddress+0x80>)
 8003f04:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	4b10      	ldr	r3, [pc, #64]	; (8003f4c <BleGetBdAddress+0x80>)
 8003f0c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	0a1b      	lsrs	r3, r3, #8
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	4b0d      	ldr	r3, [pc, #52]	; (8003f4c <BleGetBdAddress+0x80>)
 8003f16:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	0c1b      	lsrs	r3, r3, #16
 8003f1c:	b2da      	uxtb	r2, r3
 8003f1e:	4b0b      	ldr	r3, [pc, #44]	; (8003f4c <BleGetBdAddress+0x80>)
 8003f20:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8003f22:	4b0a      	ldr	r3, [pc, #40]	; (8003f4c <BleGetBdAddress+0x80>)
 8003f24:	617b      	str	r3, [r7, #20]
 8003f26:	e00b      	b.n	8003f40 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8003f28:	2000      	movs	r0, #0
 8003f2a:	f007 fc1d 	bl	800b768 <OTP_Read>
 8003f2e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	617b      	str	r3, [r7, #20]
 8003f3a:	e001      	b.n	8003f40 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8003f3c:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <BleGetBdAddress+0x84>)
 8003f3e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8003f40:	697b      	ldr	r3, [r7, #20]
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3718      	adds	r7, #24
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	20000690 	.word	0x20000690
 8003f50:	08011484 	.word	0x08011484

08003f54 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */
  BSP_LED_Off(LED_GREEN);
 8003f5a:	2001      	movs	r0, #1
 8003f5c:	f000 fcfc 	bl	8004958 <BSP_LED_Off>
  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8003f60:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <Adv_Cancel+0x50>)
 8003f62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003f66:	2b05      	cmp	r3, #5
 8003f68:	d017      	beq.n	8003f9a <Adv_Cancel+0x46>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8003f6a:	2392      	movs	r3, #146	; 0x92
 8003f6c:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8003f6e:	f005 ff43 	bl	8009df8 <aci_gap_set_non_discoverable>
 8003f72:	4603      	mov	r3, r0
 8003f74:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8003f76:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <Adv_Cancel+0x50>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 8003f7e:	79fb      	ldrb	r3, [r7, #7]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <Adv_Cancel+0x38>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8003f84:	4808      	ldr	r0, [pc, #32]	; (8003fa8 <Adv_Cancel+0x54>)
 8003f86:	f009 ff39 	bl	800ddfc <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8003f8a:	e006      	b.n	8003f9a <Adv_Cancel+0x46>
      APP_DBG_MSG("  \r\n\r");
 8003f8c:	4807      	ldr	r0, [pc, #28]	; (8003fac <Adv_Cancel+0x58>)
 8003f8e:	f009 ff35 	bl	800ddfc <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8003f92:	4807      	ldr	r0, [pc, #28]	; (8003fb0 <Adv_Cancel+0x5c>)
 8003f94:	f009 ff32 	bl	800ddfc <iprintf>
  return;
 8003f98:	bf00      	nop
 8003f9a:	bf00      	nop
}
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000698 	.word	0x20000698
 8003fa8:	080110b8 	.word	0x080110b8
 8003fac:	080110dc 	.word	0x080110dc
 8003fb0:	080110e4 	.word	0x080110e4

08003fb4 <Adv_Cancel_Req>:

static void Adv_Cancel_Req(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_Req_1 */

  /* USER CODE END Adv_Cancel_Req_1 */

  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8003fb8:	2100      	movs	r1, #0
 8003fba:	2001      	movs	r0, #1
 8003fbc:	f009 f8d6 	bl	800d16c <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN Adv_Cancel_Req_2 */

  /* USER CODE END Adv_Cancel_Req_2 */

  return;
 8003fc0:	bf00      	nop
}
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 8003fc8:	2001      	movs	r0, #1
 8003fca:	f000 fcc5 	bl	8004958 <BSP_LED_Off>
  /* USER CODE END Switch_OFF_GPIO */
}
 8003fce:	bf00      	nop
 8003fd0:	bd80      	pop	{r7, pc}
	...

08003fd4 <BLE_SVC_L2CAP_Conn_Update>:

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t ConnectionHandle)
{
 8003fd4:	b590      	push	{r4, r7, lr}
 8003fd6:	b089      	sub	sp, #36	; 0x24
 8003fd8:	af02      	add	r7, sp, #8
 8003fda:	4603      	mov	r3, r0
 8003fdc:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */

  if (mutex == 1)
 8003fde:	4b29      	ldr	r3, [pc, #164]	; (8004084 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d149      	bne.n	800407a <BLE_SVC_L2CAP_Conn_Update+0xa6>
  {
    mutex = 0;
 8003fe6:	4b27      	ldr	r3, [pc, #156]	; (8004084 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 8003fec:	4b26      	ldr	r3, [pc, #152]	; (8004088 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	bfb8      	it	lt
 8003ffa:	425b      	neglt	r3, r3
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	4b22      	ldr	r3, [pc, #136]	; (8004088 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8004000:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 8004002:	4b21      	ldr	r3, [pc, #132]	; (8004088 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	4a21      	ldr	r2, [pc, #132]	; (800408c <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4413      	add	r3, r2
 800400c:	ed93 7a00 	vldr	s14, [r3]
 8004010:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8004014:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004018:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800401c:	ee17 3a90 	vmov	r3, s15
 8004020:	82fb      	strh	r3, [r7, #22]
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 8004022:	4b19      	ldr	r3, [pc, #100]	; (8004088 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	4a19      	ldr	r2, [pc, #100]	; (800408c <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	ed93 7a00 	vldr	s14, [r3]
 8004030:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8004034:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004038:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800403c:	ee17 3a90 	vmov	r3, s15
 8004040:	82bb      	strh	r3, [r7, #20]
    uint16_t peripheral_latency = L2CAP_PERIPHERAL_LATENCY;
 8004042:	2300      	movs	r3, #0
 8004044:	827b      	strh	r3, [r7, #18]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 8004046:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800404a:	823b      	strh	r3, [r7, #16]
    tBleStatus ret;

    ret = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800404c:	4b10      	ldr	r3, [pc, #64]	; (8004090 <BLE_SVC_L2CAP_Conn_Update+0xbc>)
 800404e:	8ad8      	ldrh	r0, [r3, #22]
 8004050:	8a7c      	ldrh	r4, [r7, #18]
 8004052:	8aba      	ldrh	r2, [r7, #20]
 8004054:	8af9      	ldrh	r1, [r7, #22]
 8004056:	8a3b      	ldrh	r3, [r7, #16]
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	4623      	mov	r3, r4
 800405c:	f007 f872 	bl	800b144 <aci_l2cap_connection_parameter_update_req>
 8004060:	4603      	mov	r3, r0
 8004062:	73fb      	strb	r3, [r7, #15]
                                                    interval_min, interval_max,
                                                    peripheral_latency, timeout_multiplier);
    if (ret != BLE_STATUS_SUCCESS)
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <BLE_SVC_L2CAP_Conn_Update+0x9e>
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 800406a:	480a      	ldr	r0, [pc, #40]	; (8004094 <BLE_SVC_L2CAP_Conn_Update+0xc0>)
 800406c:	f009 fec6 	bl	800ddfc <iprintf>

  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */

  return;
 8004070:	e003      	b.n	800407a <BLE_SVC_L2CAP_Conn_Update+0xa6>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 8004072:	4809      	ldr	r0, [pc, #36]	; (8004098 <BLE_SVC_L2CAP_Conn_Update+0xc4>)
 8004074:	f009 fec2 	bl	800ddfc <iprintf>
  return;
 8004078:	bf00      	nop
 800407a:	bf00      	nop
}
 800407c:	371c      	adds	r7, #28
 800407e:	46bd      	mov	sp, r7
 8004080:	bd90      	pop	{r4, r7, pc}
 8004082:	bf00      	nop
 8004084:	20000725 	.word	0x20000725
 8004088:	20000724 	.word	0x20000724
 800408c:	20000008 	.word	0x20000008
 8004090:	20000698 	.word	0x20000698
 8004094:	08011100 	.word	0x08011100
 8004098:	08011128 	.word	0x08011128

0800409c <Connection_Interval_Update_Req>:
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
static void Connection_Interval_Update_Req(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 80040a0:	4b08      	ldr	r3, [pc, #32]	; (80040c4 <Connection_Interval_Update_Req+0x28>)
 80040a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d00a      	beq.n	80040c0 <Connection_Interval_Update_Req+0x24>
 80040aa:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <Connection_Interval_Update_Req+0x28>)
 80040ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80040b4:	4b03      	ldr	r3, [pc, #12]	; (80040c4 <Connection_Interval_Update_Req+0x28>)
 80040b6:	8adb      	ldrh	r3, [r3, #22]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff ff8b 	bl	8003fd4 <BLE_SVC_L2CAP_Conn_Update>
  }

  return;
 80040be:	bf00      	nop
 80040c0:	bf00      	nop
}
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20000698 	.word	0x20000698

080040c8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80040d0:	2100      	movs	r1, #0
 80040d2:	2004      	movs	r0, #4
 80040d4:	f009 f84a 	bl	800d16c <UTIL_SEQ_SetTask>

  return;
 80040d8:	bf00      	nop
}
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80040e8:	2001      	movs	r0, #1
 80040ea:	f009 f8ab 	bl	800d244 <UTIL_SEQ_SetEvt>

  return;
 80040ee:	bf00      	nop
}
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b082      	sub	sp, #8
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80040fe:	2001      	movs	r0, #1
 8004100:	f009 f8c0 	bl	800d284 <UTIL_SEQ_WaitEvt>

  return;
 8004104:	bf00      	nop
}
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	3308      	adds	r3, #8
 800411e:	4618      	mov	r0, r3
 8004120:	f008 fc28 	bl	800c974 <SVCCTL_UserEvtRx>
 8004124:	4603      	mov	r3, r0
 8004126:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8004128:	7afb      	ldrb	r3, [r7, #11]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8004134:	e003      	b.n	800413e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	701a      	strb	r2, [r3, #0]
  return;
 800413c:	bf00      	nop
}
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800414e:	79fb      	ldrb	r3, [r7, #7]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <BLE_StatusNot+0x16>
 8004154:	2b01      	cmp	r3, #1
 8004156:	d006      	beq.n	8004166 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8004158:	e00b      	b.n	8004172 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800415a:	233f      	movs	r3, #63	; 0x3f
 800415c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f009 f830 	bl	800d1c4 <UTIL_SEQ_PauseTask>
      break;
 8004164:	e005      	b.n	8004172 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8004166:	233f      	movs	r3, #63	; 0x3f
 8004168:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f009 f84a 	bl	800d204 <UTIL_SEQ_ResumeTask>
      break;
 8004170:	bf00      	nop
  }

  return;
 8004172:	bf00      	nop
}
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <P2PS_STM_App_Notification>:
static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	2b03      	cmp	r3, #3
 800418a:	d01a      	beq.n	80041c2 <P2PS_STM_App_Notification+0x46>
 800418c:	2b03      	cmp	r3, #3
 800418e:	dc6b      	bgt.n	8004268 <P2PS_STM_App_Notification+0xec>
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <P2PS_STM_App_Notification+0x1e>
 8004194:	2b01      	cmp	r3, #1
 8004196:	d00a      	beq.n	80041ae <P2PS_STM_App_Notification+0x32>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8004198:	e066      	b.n	8004268 <P2PS_STM_App_Notification+0xec>
      P2P_Server_App_Context.Notification_Status = 1;
 800419a:	4b37      	ldr	r3, [pc, #220]	; (8004278 <P2PS_STM_App_Notification+0xfc>)
 800419c:	2201      	movs	r2, #1
 800419e:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 80041a0:	4836      	ldr	r0, [pc, #216]	; (800427c <P2PS_STM_App_Notification+0x100>)
 80041a2:	f009 fe99 	bl	800ded8 <puts>
      APP_DBG_MSG(" \n\r");
 80041a6:	4836      	ldr	r0, [pc, #216]	; (8004280 <P2PS_STM_App_Notification+0x104>)
 80041a8:	f009 fe28 	bl	800ddfc <iprintf>
      break;
 80041ac:	e05f      	b.n	800426e <P2PS_STM_App_Notification+0xf2>
      P2P_Server_App_Context.Notification_Status = 0;
 80041ae:	4b32      	ldr	r3, [pc, #200]	; (8004278 <P2PS_STM_App_Notification+0xfc>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 80041b4:	4833      	ldr	r0, [pc, #204]	; (8004284 <P2PS_STM_App_Notification+0x108>)
 80041b6:	f009 fe8f 	bl	800ded8 <puts>
      APP_DBG_MSG(" \n\r");
 80041ba:	4831      	ldr	r0, [pc, #196]	; (8004280 <P2PS_STM_App_Notification+0x104>)
 80041bc:	f009 fe1e 	bl	800ddfc <iprintf>
      break;
 80041c0:	e055      	b.n	800426e <P2PS_STM_App_Notification+0xf2>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d123      	bne.n	8004214 <P2PS_STM_App_Notification+0x98>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	3301      	adds	r3, #1
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d10b      	bne.n	80041f0 <P2PS_STM_App_Notification+0x74>
          BSP_LED_On(LED_BLUE);
 80041d8:	2000      	movs	r0, #0
 80041da:	f000 fba3 	bl	8004924 <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 ON\n"); 
 80041de:	482a      	ldr	r0, [pc, #168]	; (8004288 <P2PS_STM_App_Notification+0x10c>)
 80041e0:	f009 fe7a 	bl	800ded8 <puts>
          APP_DBG_MSG(" \n\r");
 80041e4:	4826      	ldr	r0, [pc, #152]	; (8004280 <P2PS_STM_App_Notification+0x104>)
 80041e6:	f009 fe09 	bl	800ddfc <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 80041ea:	4b23      	ldr	r3, [pc, #140]	; (8004278 <P2PS_STM_App_Notification+0xfc>)
 80041ec:	2201      	movs	r2, #1
 80041ee:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	3301      	adds	r3, #1
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10b      	bne.n	8004214 <P2PS_STM_App_Notification+0x98>
          BSP_LED_Off(LED_BLUE);
 80041fc:	2000      	movs	r0, #0
 80041fe:	f000 fbab 	bl	8004958 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 OFF\n"); 
 8004202:	4822      	ldr	r0, [pc, #136]	; (800428c <P2PS_STM_App_Notification+0x110>)
 8004204:	f009 fe68 	bl	800ded8 <puts>
          APP_DBG_MSG(" \n\r");
 8004208:	481d      	ldr	r0, [pc, #116]	; (8004280 <P2PS_STM_App_Notification+0x104>)
 800420a:	f009 fdf7 	bl	800ddfc <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 800420e:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <P2PS_STM_App_Notification+0xfc>)
 8004210:	2200      	movs	r2, #0
 8004212:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d126      	bne.n	800426c <P2PS_STM_App_Notification+0xf0>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	3301      	adds	r3, #1
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d10b      	bne.n	8004242 <P2PS_STM_App_Notification+0xc6>
          BSP_LED_On(LED_BLUE);
 800422a:	2000      	movs	r0, #0
 800422c:	f000 fb7a 	bl	8004924 <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 ON\n"); 
 8004230:	4817      	ldr	r0, [pc, #92]	; (8004290 <P2PS_STM_App_Notification+0x114>)
 8004232:	f009 fe51 	bl	800ded8 <puts>
          APP_DBG_MSG(" \n\r");
 8004236:	4812      	ldr	r0, [pc, #72]	; (8004280 <P2PS_STM_App_Notification+0x104>)
 8004238:	f009 fde0 	bl	800ddfc <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 800423c:	4b0e      	ldr	r3, [pc, #56]	; (8004278 <P2PS_STM_App_Notification+0xfc>)
 800423e:	2201      	movs	r2, #1
 8004240:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	3301      	adds	r3, #1
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10e      	bne.n	800426c <P2PS_STM_App_Notification+0xf0>
          BSP_LED_Off(LED_BLUE);
 800424e:	2000      	movs	r0, #0
 8004250:	f000 fb82 	bl	8004958 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 OFF\n"); 
 8004254:	480f      	ldr	r0, [pc, #60]	; (8004294 <P2PS_STM_App_Notification+0x118>)
 8004256:	f009 fe3f 	bl	800ded8 <puts>
          APP_DBG_MSG(" \n\r");
 800425a:	4809      	ldr	r0, [pc, #36]	; (8004280 <P2PS_STM_App_Notification+0x104>)
 800425c:	f009 fdce 	bl	800ddfc <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8004260:	4b05      	ldr	r3, [pc, #20]	; (8004278 <P2PS_STM_App_Notification+0xfc>)
 8004262:	2200      	movs	r2, #0
 8004264:	709a      	strb	r2, [r3, #2]
      break;
 8004266:	e001      	b.n	800426c <P2PS_STM_App_Notification+0xf0>
      break;
 8004268:	bf00      	nop
 800426a:	e000      	b.n	800426e <P2PS_STM_App_Notification+0xf2>
      break;
 800426c:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800426e:	bf00      	nop
}
 8004270:	3708      	adds	r7, #8
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	20000728 	.word	0x20000728
 800427c:	08011158 	.word	0x08011158
 8004280:	0801118c 	.word	0x0801118c
 8004284:	08011190 	.word	0x08011190
 8004288:	080111c4 	.word	0x080111c4
 800428c:	080111ec 	.word	0x080111ec
 8004290:	08011214 	.word	0x08011214
 8004294:	0801123c 	.word	0x0801123c

08004298 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d005      	beq.n	80042b4 <P2PS_APP_Notification+0x1c>
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d000      	beq.n	80042ae <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 80042ac:	e003      	b.n	80042b6 <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();       
 80042ae:	f000 f819 	bl	80042e4 <P2PS_APP_LED_BUTTON_context_Init>
    break;
 80042b2:	e000      	b.n	80042b6 <P2PS_APP_Notification+0x1e>
    break;
 80042b4:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 80042b6:	bf00      	nop
}
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
	...

080042c0 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
 80042c4:	4a05      	ldr	r2, [pc, #20]	; (80042dc <P2PS_APP_Init+0x1c>)
 80042c6:	2100      	movs	r1, #0
 80042c8:	2008      	movs	r0, #8
 80042ca:	f008 ff2d 	bl	800d128 <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 80042ce:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <P2PS_APP_Init+0x20>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 80042d4:	f000 f806 	bl	80042e4 <P2PS_APP_LED_BUTTON_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 80042d8:	bf00      	nop
}
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	08004329 	.word	0x08004329
 80042e0:	20000728 	.word	0x20000728

080042e4 <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
  
  BSP_LED_Off(LED_BLUE);
 80042e8:	2000      	movs	r0, #0
 80042ea:	f000 fb35 	bl	8004958 <BSP_LED_Off>
  APP_DBG_MSG("LED BLUE OFF\n");
 80042ee:	4808      	ldr	r0, [pc, #32]	; (8004310 <P2PS_APP_LED_BUTTON_context_Init+0x2c>)
 80042f0:	f009 fdf2 	bl	800ded8 <puts>
  
  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 80042f4:	4b07      	ldr	r3, [pc, #28]	; (8004314 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 80042fa:	4b06      	ldr	r3, [pc, #24]	; (8004314 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 8004300:	4b04      	ldr	r3, [pc, #16]	; (8004314 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 8004302:	2201      	movs	r2, #1
 8004304:	70da      	strb	r2, [r3, #3]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8004306:	4b03      	ldr	r3, [pc, #12]	; (8004314 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 8004308:	2200      	movs	r2, #0
 800430a:	711a      	strb	r2, [r3, #4]
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x06; /* device6 */
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x06; /* Device6 */
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif  
}
 800430c:	bf00      	nop
 800430e:	bd80      	pop	{r7, pc}
 8004310:	08011264 	.word	0x08011264
 8004314:	20000728 	.word	0x20000728

08004318 <P2PS_APP_SW1_Button_Action>:

void P2PS_APP_SW1_Button_Action(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800431c:	2100      	movs	r1, #0
 800431e:	2008      	movs	r0, #8
 8004320:	f008 ff24 	bl	800d16c <UTIL_SEQ_SetTask>

  return;
 8004324:	bf00      	nop
}
 8004326:	bd80      	pop	{r7, pc}

08004328 <P2PS_Send_Notification>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_Send_Notification(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
 
  if(P2P_Server_App_Context.ButtonControl.ButtonStatus == 0x00){
 800432c:	4b0f      	ldr	r3, [pc, #60]	; (800436c <P2PS_Send_Notification+0x44>)
 800432e:	791b      	ldrb	r3, [r3, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d103      	bne.n	800433c <P2PS_Send_Notification+0x14>
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x01;
 8004334:	4b0d      	ldr	r3, [pc, #52]	; (800436c <P2PS_Send_Notification+0x44>)
 8004336:	2201      	movs	r2, #1
 8004338:	711a      	strb	r2, [r3, #4]
 800433a:	e002      	b.n	8004342 <P2PS_Send_Notification+0x1a>
  } else {
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 800433c:	4b0b      	ldr	r3, [pc, #44]	; (800436c <P2PS_Send_Notification+0x44>)
 800433e:	2200      	movs	r2, #0
 8004340:	711a      	strb	r2, [r3, #4]
  }
  
   if(P2P_Server_App_Context.Notification_Status){ 
 8004342:	4b0a      	ldr	r3, [pc, #40]	; (800436c <P2PS_Send_Notification+0x44>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00b      	beq.n	8004362 <P2PS_Send_Notification+0x3a>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
 800434a:	4809      	ldr	r0, [pc, #36]	; (8004370 <P2PS_Send_Notification+0x48>)
 800434c:	f009 fd56 	bl	800ddfc <iprintf>
    APP_DBG_MSG(" \n\r");
 8004350:	4808      	ldr	r0, [pc, #32]	; (8004374 <P2PS_Send_Notification+0x4c>)
 8004352:	f009 fd53 	bl	800ddfc <iprintf>
    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.ButtonControl);
 8004356:	4908      	ldr	r1, [pc, #32]	; (8004378 <P2PS_Send_Notification+0x50>)
 8004358:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800435c:	f007 fb36 	bl	800b9cc <P2PS_STM_App_Update_Char>
   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
   }

  return;
 8004360:	e003      	b.n	800436a <P2PS_Send_Notification+0x42>
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
 8004362:	4806      	ldr	r0, [pc, #24]	; (800437c <P2PS_Send_Notification+0x54>)
 8004364:	f009 fd4a 	bl	800ddfc <iprintf>
  return;
 8004368:	bf00      	nop
}
 800436a:	bd80      	pop	{r7, pc}
 800436c:	20000728 	.word	0x20000728
 8004370:	08011274 	.word	0x08011274
 8004374:	0801118c 	.word	0x0801118c
 8004378:	2000072b 	.word	0x2000072b
 800437c:	080112b4 	.word	0x080112b4

08004380 <LL_PWR_EnableBootC2>:
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8004384:	4b05      	ldr	r3, [pc, #20]	; (800439c <LL_PWR_EnableBootC2+0x1c>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	4a04      	ldr	r2, [pc, #16]	; (800439c <LL_PWR_EnableBootC2+0x1c>)
 800438a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800438e:	60d3      	str	r3, [r2, #12]
}
 8004390:	bf00      	nop
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	58000400 	.word	0x58000400

080043a0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80043a8:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80043aa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80043ae:	4905      	ldr	r1, [pc, #20]	; (80043c4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	58000800 	.word	0x58000800

080043c8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80043d0:	4b05      	ldr	r3, [pc, #20]	; (80043e8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80043d2:	6a1a      	ldr	r2, [r3, #32]
 80043d4:	4904      	ldr	r1, [pc, #16]	; (80043e8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4313      	orrs	r3, r2
 80043da:	620b      	str	r3, [r1, #32]
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	58000800 	.word	0x58000800

080043ec <LL_AHB3_GRP1_EnableClock>:
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80043f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4313      	orrs	r3, r2
 8004402:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004408:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4013      	ands	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004410:	68fb      	ldr	r3, [r7, #12]
}
 8004412:	bf00      	nop
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800441e:	b480      	push	{r7}
 8004420:	b085      	sub	sp, #20
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8004426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800442a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800442e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800443a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800443e:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4013      	ands	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004448:	68fb      	ldr	r3, [r7, #12]
}
 800444a:	bf00      	nop
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr

08004456 <LL_C1_IPCC_EnableIT_TXF>:
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	601a      	str	r2, [r3, #0]
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <LL_C1_IPCC_EnableIT_RXO>:
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f043 0201 	orr.w	r2, r3, #1
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	601a      	str	r2, [r3, #0]
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	041b      	lsls	r3, r3, #16
 80044a8:	43db      	mvns	r3, r3
 80044aa:	401a      	ands	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	605a      	str	r2, [r3, #4]
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <LL_C1_IPCC_DisableTransmitChannel>:
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	041b      	lsls	r3, r3, #16
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	605a      	str	r2, [r3, #4]
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	43db      	mvns	r3, r3
 80044f2:	401a      	ands	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	605a      	str	r2, [r3, #4]
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	609a      	str	r2, [r3, #8]
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <LL_C1_IPCC_SetFlag_CHx>:
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	041a      	lsls	r2, r3, #16
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	609a      	str	r2, [r3, #8]
}
 8004532:	bf00      	nop
 8004534:	370c      	adds	r7, #12
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800453e:	b480      	push	{r7}
 8004540:	b083      	sub	sp, #12
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68da      	ldr	r2, [r3, #12]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	4013      	ands	r3, r2
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d101      	bne.n	800455a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69da      	ldr	r2, [r3, #28]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	4013      	ands	r3, r2
 800457a:	683a      	ldr	r2, [r7, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d101      	bne.n	8004584 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8004580:	2301      	movs	r3, #1
 8004582:	e000      	b.n	8004586 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
	...

08004594 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8004598:	2102      	movs	r1, #2
 800459a:	4818      	ldr	r0, [pc, #96]	; (80045fc <HW_IPCC_Rx_Handler+0x68>)
 800459c:	f7ff ffe4 	bl	8004568 <LL_C2_IPCC_IsActiveFlag_CHx>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d008      	beq.n	80045b8 <HW_IPCC_Rx_Handler+0x24>
 80045a6:	4b15      	ldr	r3, [pc, #84]	; (80045fc <HW_IPCC_Rx_Handler+0x68>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d102      	bne.n	80045b8 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80045b2:	f000 f8d5 	bl	8004760 <HW_IPCC_SYS_EvtHandler>
 80045b6:	e01e      	b.n	80045f6 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80045b8:	2101      	movs	r1, #1
 80045ba:	4810      	ldr	r0, [pc, #64]	; (80045fc <HW_IPCC_Rx_Handler+0x68>)
 80045bc:	f7ff ffd4 	bl	8004568 <LL_C2_IPCC_IsActiveFlag_CHx>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d008      	beq.n	80045d8 <HW_IPCC_Rx_Handler+0x44>
 80045c6:	4b0d      	ldr	r3, [pc, #52]	; (80045fc <HW_IPCC_Rx_Handler+0x68>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d102      	bne.n	80045d8 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 80045d2:	f000 f889 	bl	80046e8 <HW_IPCC_BLE_EvtHandler>
 80045d6:	e00e      	b.n	80045f6 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80045d8:	2108      	movs	r1, #8
 80045da:	4808      	ldr	r0, [pc, #32]	; (80045fc <HW_IPCC_Rx_Handler+0x68>)
 80045dc:	f7ff ffc4 	bl	8004568 <LL_C2_IPCC_IsActiveFlag_CHx>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d008      	beq.n	80045f8 <HW_IPCC_Rx_Handler+0x64>
 80045e6:	4b05      	ldr	r3, [pc, #20]	; (80045fc <HW_IPCC_Rx_Handler+0x68>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d102      	bne.n	80045f8 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 80045f2:	f000 f901 	bl	80047f8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80045f6:	bf00      	nop
 80045f8:	bf00      	nop
}
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	58000c00 	.word	0x58000c00

08004600 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8004604:	2102      	movs	r1, #2
 8004606:	4818      	ldr	r0, [pc, #96]	; (8004668 <HW_IPCC_Tx_Handler+0x68>)
 8004608:	f7ff ff99 	bl	800453e <LL_C1_IPCC_IsActiveFlag_CHx>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d108      	bne.n	8004624 <HW_IPCC_Tx_Handler+0x24>
 8004612:	4b15      	ldr	r3, [pc, #84]	; (8004668 <HW_IPCC_Tx_Handler+0x68>)
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d102      	bne.n	8004624 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800461e:	f000 f893 	bl	8004748 <HW_IPCC_SYS_CmdEvtHandler>
 8004622:	e01e      	b.n	8004662 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8004624:	2108      	movs	r1, #8
 8004626:	4810      	ldr	r0, [pc, #64]	; (8004668 <HW_IPCC_Tx_Handler+0x68>)
 8004628:	f7ff ff89 	bl	800453e <LL_C1_IPCC_IsActiveFlag_CHx>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d108      	bne.n	8004644 <HW_IPCC_Tx_Handler+0x44>
 8004632:	4b0d      	ldr	r3, [pc, #52]	; (8004668 <HW_IPCC_Tx_Handler+0x68>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d102      	bne.n	8004644 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800463e:	f000 f8bd 	bl	80047bc <HW_IPCC_MM_FreeBufHandler>
 8004642:	e00e      	b.n	8004662 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8004644:	2120      	movs	r1, #32
 8004646:	4808      	ldr	r0, [pc, #32]	; (8004668 <HW_IPCC_Tx_Handler+0x68>)
 8004648:	f7ff ff79 	bl	800453e <LL_C1_IPCC_IsActiveFlag_CHx>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d108      	bne.n	8004664 <HW_IPCC_Tx_Handler+0x64>
 8004652:	4b05      	ldr	r3, [pc, #20]	; (8004668 <HW_IPCC_Tx_Handler+0x68>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d102      	bne.n	8004664 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800465e:	f000 f84f 	bl	8004700 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8004662:	bf00      	nop
 8004664:	bf00      	nop
}
 8004666:	bd80      	pop	{r7, pc}
 8004668:	58000c00 	.word	0x58000c00

0800466c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8004670:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8004674:	f7ff fed3 	bl	800441e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8004678:	f44f 7000 	mov.w	r0, #512	; 0x200
 800467c:	f7ff fea4 	bl	80043c8 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8004680:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004684:	f7ff fe8c 	bl	80043a0 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8004688:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800468a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800468c:	f7ff fe78 	bl	8004380 <LL_PWR_EnableBootC2>

  return;
 8004690:	bf00      	nop
}
 8004692:	bd80      	pop	{r7, pc}

08004694 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8004698:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800469c:	f7ff fea6 	bl	80043ec <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80046a0:	4806      	ldr	r0, [pc, #24]	; (80046bc <HW_IPCC_Init+0x28>)
 80046a2:	f7ff fee8 	bl	8004476 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80046a6:	4805      	ldr	r0, [pc, #20]	; (80046bc <HW_IPCC_Init+0x28>)
 80046a8:	f7ff fed5 	bl	8004456 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80046ac:	202c      	movs	r0, #44	; 0x2c
 80046ae:	f000 fc46 	bl	8004f3e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80046b2:	202d      	movs	r0, #45	; 0x2d
 80046b4:	f000 fc43 	bl	8004f3e <HAL_NVIC_EnableIRQ>

  return;
 80046b8:	bf00      	nop
}
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	58000c00 	.word	0x58000c00

080046c0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80046c4:	2101      	movs	r1, #1
 80046c6:	4802      	ldr	r0, [pc, #8]	; (80046d0 <HW_IPCC_BLE_Init+0x10>)
 80046c8:	f7ff ff0a 	bl	80044e0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80046cc:	bf00      	nop
}
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	58000c00 	.word	0x58000c00

080046d4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80046d8:	2101      	movs	r1, #1
 80046da:	4802      	ldr	r0, [pc, #8]	; (80046e4 <HW_IPCC_BLE_SendCmd+0x10>)
 80046dc:	f7ff ff20 	bl	8004520 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80046e0:	bf00      	nop
}
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	58000c00 	.word	0x58000c00

080046e8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80046ec:	f008 fa26 	bl	800cb3c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80046f0:	2101      	movs	r1, #1
 80046f2:	4802      	ldr	r0, [pc, #8]	; (80046fc <HW_IPCC_BLE_EvtHandler+0x14>)
 80046f4:	f7ff ff06 	bl	8004504 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80046f8:	bf00      	nop
}
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	58000c00 	.word	0x58000c00

08004700 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8004704:	2120      	movs	r1, #32
 8004706:	4803      	ldr	r0, [pc, #12]	; (8004714 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8004708:	f7ff fed8 	bl	80044bc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800470c:	f008 fa46 	bl	800cb9c <HW_IPCC_BLE_AclDataAckNot>

  return;
 8004710:	bf00      	nop
}
 8004712:	bd80      	pop	{r7, pc}
 8004714:	58000c00 	.word	0x58000c00

08004718 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800471c:	2102      	movs	r1, #2
 800471e:	4802      	ldr	r0, [pc, #8]	; (8004728 <HW_IPCC_SYS_Init+0x10>)
 8004720:	f7ff fede 	bl	80044e0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004724:	bf00      	nop
}
 8004726:	bd80      	pop	{r7, pc}
 8004728:	58000c00 	.word	0x58000c00

0800472c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004730:	2102      	movs	r1, #2
 8004732:	4804      	ldr	r0, [pc, #16]	; (8004744 <HW_IPCC_SYS_SendCmd+0x18>)
 8004734:	f7ff fef4 	bl	8004520 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004738:	2102      	movs	r1, #2
 800473a:	4802      	ldr	r0, [pc, #8]	; (8004744 <HW_IPCC_SYS_SendCmd+0x18>)
 800473c:	f7ff feab 	bl	8004496 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8004740:	bf00      	nop
}
 8004742:	bd80      	pop	{r7, pc}
 8004744:	58000c00 	.word	0x58000c00

08004748 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800474c:	2102      	movs	r1, #2
 800474e:	4803      	ldr	r0, [pc, #12]	; (800475c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8004750:	f7ff feb4 	bl	80044bc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8004754:	f008 fa72 	bl	800cc3c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8004758:	bf00      	nop
}
 800475a:	bd80      	pop	{r7, pc}
 800475c:	58000c00 	.word	0x58000c00

08004760 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8004764:	f008 fa80 	bl	800cc68 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8004768:	2102      	movs	r1, #2
 800476a:	4802      	ldr	r0, [pc, #8]	; (8004774 <HW_IPCC_SYS_EvtHandler+0x14>)
 800476c:	f7ff feca 	bl	8004504 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004770:	bf00      	nop
}
 8004772:	bd80      	pop	{r7, pc}
 8004774:	58000c00 	.word	0x58000c00

08004778 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8004780:	2108      	movs	r1, #8
 8004782:	480c      	ldr	r0, [pc, #48]	; (80047b4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8004784:	f7ff fedb 	bl	800453e <LL_C1_IPCC_IsActiveFlag_CHx>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d007      	beq.n	800479e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800478e:	4a0a      	ldr	r2, [pc, #40]	; (80047b8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8004794:	2108      	movs	r1, #8
 8004796:	4807      	ldr	r0, [pc, #28]	; (80047b4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8004798:	f7ff fe7d 	bl	8004496 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800479c:	e006      	b.n	80047ac <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80047a2:	2108      	movs	r1, #8
 80047a4:	4803      	ldr	r0, [pc, #12]	; (80047b4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80047a6:	f7ff febb 	bl	8004520 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80047aa:	bf00      	nop
}
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	58000c00 	.word	0x58000c00
 80047b8:	20000730 	.word	0x20000730

080047bc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80047c0:	2108      	movs	r1, #8
 80047c2:	4806      	ldr	r0, [pc, #24]	; (80047dc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80047c4:	f7ff fe7a 	bl	80044bc <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80047c8:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80047ce:	2108      	movs	r1, #8
 80047d0:	4802      	ldr	r0, [pc, #8]	; (80047dc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80047d2:	f7ff fea5 	bl	8004520 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80047d6:	bf00      	nop
}
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	58000c00 	.word	0x58000c00
 80047e0:	20000730 	.word	0x20000730

080047e4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80047e8:	2108      	movs	r1, #8
 80047ea:	4802      	ldr	r0, [pc, #8]	; (80047f4 <HW_IPCC_TRACES_Init+0x10>)
 80047ec:	f7ff fe78 	bl	80044e0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80047f0:	bf00      	nop
}
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	58000c00 	.word	0x58000c00

080047f8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80047fc:	f008 fadc 	bl	800cdb8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8004800:	2108      	movs	r1, #8
 8004802:	4802      	ldr	r0, [pc, #8]	; (800480c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8004804:	f7ff fe7e 	bl	8004504 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004808:	bf00      	nop
}
 800480a:	bd80      	pop	{r7, pc}
 800480c:	58000c00 	.word	0x58000c00

08004810 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004810:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004812:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004814:	3304      	adds	r3, #4

08004816 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004816:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004818:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800481a:	d3f9      	bcc.n	8004810 <CopyDataInit>
  bx lr
 800481c:	4770      	bx	lr

0800481e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800481e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004820:	3004      	adds	r0, #4

08004822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004822:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004824:	d3fb      	bcc.n	800481e <FillZerobss>
  bx lr
 8004826:	4770      	bx	lr

08004828 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004828:	480c      	ldr	r0, [pc, #48]	; (800485c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800482a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800482c:	f000 f91e 	bl	8004a6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004830:	480b      	ldr	r0, [pc, #44]	; (8004860 <LoopForever+0x8>)
 8004832:	490c      	ldr	r1, [pc, #48]	; (8004864 <LoopForever+0xc>)
 8004834:	4a0c      	ldr	r2, [pc, #48]	; (8004868 <LoopForever+0x10>)
 8004836:	2300      	movs	r3, #0
 8004838:	f7ff ffed 	bl	8004816 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800483c:	480b      	ldr	r0, [pc, #44]	; (800486c <LoopForever+0x14>)
 800483e:	490c      	ldr	r1, [pc, #48]	; (8004870 <LoopForever+0x18>)
 8004840:	2300      	movs	r3, #0
 8004842:	f7ff ffee 	bl	8004822 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004846:	480b      	ldr	r0, [pc, #44]	; (8004874 <LoopForever+0x1c>)
 8004848:	490b      	ldr	r1, [pc, #44]	; (8004878 <LoopForever+0x20>)
 800484a:	2300      	movs	r3, #0
 800484c:	f7ff ffe9 	bl	8004822 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004850:	f009 fc7a 	bl	800e148 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8004854:	f7fe f8c0 	bl	80029d8 <main>

08004858 <LoopForever>:

LoopForever:
  b LoopForever
 8004858:	e7fe      	b.n	8004858 <LoopForever>
 800485a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800485c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004860:	20000008 	.word	0x20000008
 8004864:	20000214 	.word	0x20000214
 8004868:	08011924 	.word	0x08011924
  INIT_BSS _sbss, _ebss
 800486c:	20000250 	.word	0x20000250
 8004870:	200019c0 	.word	0x200019c0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004874:	200301e4 	.word	0x200301e4
 8004878:	20030a67 	.word	0x20030a67

0800487c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800487c:	e7fe      	b.n	800487c <ADC1_IRQHandler>

0800487e <LL_AHB2_GRP1_EnableClock>:
{
 800487e:	b480      	push	{r7}
 8004880:	b085      	sub	sp, #20
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800488a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800488c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4313      	orrs	r3, r2
 8004894:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800489a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4013      	ands	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80048a2:	68fb      	ldr	r3, [r7, #12]
}
 80048a4:	bf00      	nop
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 80048ba:	f107 030c 	add.w	r3, r7, #12
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	605a      	str	r2, [r3, #4]
 80048c4:	609a      	str	r2, [r3, #8]
 80048c6:	60da      	str	r2, [r3, #12]
 80048c8:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80048ca:	2002      	movs	r0, #2
 80048cc:	f7ff ffd7 	bl	800487e <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 80048d0:	79fb      	ldrb	r3, [r7, #7]
 80048d2:	4a12      	ldr	r2, [pc, #72]	; (800491c <BSP_LED_Init+0x6c>)
 80048d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048d8:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048da:	2301      	movs	r3, #1
 80048dc:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 80048de:	2300      	movs	r3, #0
 80048e0:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80048e2:	2302      	movs	r3, #2
 80048e4:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	4a0d      	ldr	r2, [pc, #52]	; (8004920 <BSP_LED_Init+0x70>)
 80048ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ee:	f107 020c 	add.w	r2, r7, #12
 80048f2:	4611      	mov	r1, r2
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 fefb 	bl	80056f0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80048fa:	79fb      	ldrb	r3, [r7, #7]
 80048fc:	4a08      	ldr	r2, [pc, #32]	; (8004920 <BSP_LED_Init+0x70>)
 80048fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004902:	79fb      	ldrb	r3, [r7, #7]
 8004904:	4a05      	ldr	r2, [pc, #20]	; (800491c <BSP_LED_Init+0x6c>)
 8004906:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800490a:	2200      	movs	r2, #0
 800490c:	4619      	mov	r1, r3
 800490e:	f001 f85f 	bl	80059d0 <HAL_GPIO_WritePin>
}
 8004912:	bf00      	nop
 8004914:	3720      	adds	r7, #32
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	080114b4 	.word	0x080114b4
 8004920:	20000020 	.word	0x20000020

08004924 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	4603      	mov	r3, r0
 800492c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800492e:	79fb      	ldrb	r3, [r7, #7]
 8004930:	4a07      	ldr	r2, [pc, #28]	; (8004950 <BSP_LED_On+0x2c>)
 8004932:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004936:	79fb      	ldrb	r3, [r7, #7]
 8004938:	4a06      	ldr	r2, [pc, #24]	; (8004954 <BSP_LED_On+0x30>)
 800493a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800493e:	2201      	movs	r2, #1
 8004940:	4619      	mov	r1, r3
 8004942:	f001 f845 	bl	80059d0 <HAL_GPIO_WritePin>
}
 8004946:	bf00      	nop
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	20000020 	.word	0x20000020
 8004954:	080114b4 	.word	0x080114b4

08004958 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	4603      	mov	r3, r0
 8004960:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8004962:	79fb      	ldrb	r3, [r7, #7]
 8004964:	4a07      	ldr	r2, [pc, #28]	; (8004984 <BSP_LED_Off+0x2c>)
 8004966:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800496a:	79fb      	ldrb	r3, [r7, #7]
 800496c:	4a06      	ldr	r2, [pc, #24]	; (8004988 <BSP_LED_Off+0x30>)
 800496e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004972:	2200      	movs	r2, #0
 8004974:	4619      	mov	r1, r3
 8004976:	f001 f82b 	bl	80059d0 <HAL_GPIO_WritePin>
}
 800497a:	bf00      	nop
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20000020 	.word	0x20000020
 8004988:	080114b4 	.word	0x080114b4

0800498c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af00      	add	r7, sp, #0
 8004992:	4603      	mov	r3, r0
 8004994:	460a      	mov	r2, r1
 8004996:	71fb      	strb	r3, [r7, #7]
 8004998:	4613      	mov	r3, r2
 800499a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 800499c:	f107 030c 	add.w	r3, r7, #12
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	605a      	str	r2, [r3, #4]
 80049a6:	609a      	str	r2, [r3, #8]
 80049a8:	60da      	str	r2, [r3, #12]
 80049aa:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80049ac:	79fb      	ldrb	r3, [r7, #7]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d103      	bne.n	80049ba <BSP_PB_Init+0x2e>
 80049b2:	2004      	movs	r0, #4
 80049b4:	f7ff ff63 	bl	800487e <LL_AHB2_GRP1_EnableClock>
 80049b8:	e00c      	b.n	80049d4 <BSP_PB_Init+0x48>
 80049ba:	79fb      	ldrb	r3, [r7, #7]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d103      	bne.n	80049c8 <BSP_PB_Init+0x3c>
 80049c0:	2008      	movs	r0, #8
 80049c2:	f7ff ff5c 	bl	800487e <LL_AHB2_GRP1_EnableClock>
 80049c6:	e005      	b.n	80049d4 <BSP_PB_Init+0x48>
 80049c8:	79fb      	ldrb	r3, [r7, #7]
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d102      	bne.n	80049d4 <BSP_PB_Init+0x48>
 80049ce:	2008      	movs	r0, #8
 80049d0:	f7ff ff55 	bl	800487e <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80049d4:	79bb      	ldrb	r3, [r7, #6]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d117      	bne.n	8004a0a <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80049da:	79fb      	ldrb	r3, [r7, #7]
 80049dc:	4a20      	ldr	r2, [pc, #128]	; (8004a60 <BSP_PB_Init+0xd4>)
 80049de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049e2:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 80049e4:	2300      	movs	r3, #0
 80049e6:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80049e8:	2301      	movs	r3, #1
 80049ea:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80049ec:	2302      	movs	r3, #2
 80049ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80049f0:	79fb      	ldrb	r3, [r7, #7]
 80049f2:	4a1c      	ldr	r2, [pc, #112]	; (8004a64 <BSP_PB_Init+0xd8>)
 80049f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049f8:	f107 020c 	add.w	r2, r7, #12
 80049fc:	4611      	mov	r1, r2
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fe76 	bl	80056f0 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8004a04:	2001      	movs	r0, #1
 8004a06:	f7fc ff13 	bl	8001830 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8004a0a:	79bb      	ldrb	r3, [r7, #6]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d123      	bne.n	8004a58 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	4a13      	ldr	r2, [pc, #76]	; (8004a60 <BSP_PB_Init+0xd4>)
 8004a14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a18:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8004a1e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004a22:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8004a24:	79fb      	ldrb	r3, [r7, #7]
 8004a26:	4a0f      	ldr	r2, [pc, #60]	; (8004a64 <BSP_PB_Init+0xd8>)
 8004a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a2c:	f107 020c 	add.w	r2, r7, #12
 8004a30:	4611      	mov	r1, r2
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fe5c 	bl	80056f0 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8004a38:	79fb      	ldrb	r3, [r7, #7]
 8004a3a:	4a0b      	ldr	r2, [pc, #44]	; (8004a68 <BSP_PB_Init+0xdc>)
 8004a3c:	5cd3      	ldrb	r3, [r2, r3]
 8004a3e:	b25b      	sxtb	r3, r3
 8004a40:	2200      	movs	r2, #0
 8004a42:	210f      	movs	r1, #15
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fa60 	bl	8004f0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8004a4a:	79fb      	ldrb	r3, [r7, #7]
 8004a4c:	4a06      	ldr	r2, [pc, #24]	; (8004a68 <BSP_PB_Init+0xdc>)
 8004a4e:	5cd3      	ldrb	r3, [r2, r3]
 8004a50:	b25b      	sxtb	r3, r3
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 fa73 	bl	8004f3e <HAL_NVIC_EnableIRQ>
  }
}
 8004a58:	bf00      	nop
 8004a5a:	3720      	adds	r7, #32
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	080114bc 	.word	0x080114bc
 8004a64:	2000002c 	.word	0x2000002c
 8004a68:	080114c4 	.word	0x080114c4

08004a6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8004a70:	4b26      	ldr	r3, [pc, #152]	; (8004b0c <SystemInit+0xa0>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8004a76:	4b25      	ldr	r3, [pc, #148]	; (8004b0c <SystemInit+0xa0>)
 8004a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7c:	4a23      	ldr	r2, [pc, #140]	; (8004b0c <SystemInit+0xa0>)
 8004a7e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a82:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a90:	f043 0301 	orr.w	r3, r3, #1
 8004a94:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a9a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8004a9e:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004aaa:	4b19      	ldr	r3, [pc, #100]	; (8004b10 <SystemInit+0xa4>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8004ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ab8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004abc:	f023 0305 	bic.w	r3, r3, #5
 8004ac0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004acc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ad0:	f023 0301 	bic.w	r3, r3, #1
 8004ad4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004adc:	4a0d      	ldr	r2, [pc, #52]	; (8004b14 <SystemInit+0xa8>)
 8004ade:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae4:	4a0b      	ldr	r2, [pc, #44]	; (8004b14 <SystemInit+0xa8>)
 8004ae6:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004af6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004afc:	2200      	movs	r2, #0
 8004afe:	619a      	str	r2, [r3, #24]
}
 8004b00:	bf00      	nop
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	e000ed00 	.word	0xe000ed00
 8004b10:	faf6fefb 	.word	0xfaf6fefb
 8004b14:	22041000 	.word	0x22041000

08004b18 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8004b1c:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	4a04      	ldr	r2, [pc, #16]	; (8004b34 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8004b22:	f043 0301 	orr.w	r3, r3, #1
 8004b26:	6053      	str	r3, [r2, #4]
}
 8004b28:	bf00      	nop
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	e0042000 	.word	0xe0042000

08004b38 <LL_DBGMCU_EnableDBGStopMode>:
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8004b3c:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	4a04      	ldr	r2, [pc, #16]	; (8004b54 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8004b42:	f043 0302 	orr.w	r3, r3, #2
 8004b46:	6053      	str	r3, [r2, #4]
}
 8004b48:	bf00      	nop
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	e0042000 	.word	0xe0042000

08004b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b62:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <HAL_Init+0x3c>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a0b      	ldr	r2, [pc, #44]	; (8004b94 <HAL_Init+0x3c>)
 8004b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b6c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b6e:	2003      	movs	r0, #3
 8004b70:	f000 f9c0 	bl	8004ef4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004b74:	2000      	movs	r0, #0
 8004b76:	f000 f80f 	bl	8004b98 <HAL_InitTick>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	71fb      	strb	r3, [r7, #7]
 8004b84:	e001      	b.n	8004b8a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004b86:	f7fe f934 	bl	8002df2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004b8a:	79fb      	ldrb	r3, [r7, #7]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	58004000 	.word	0x58004000

08004b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004ba4:	4b17      	ldr	r3, [pc, #92]	; (8004c04 <HAL_InitTick+0x6c>)
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d024      	beq.n	8004bf6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004bac:	f002 f89e 	bl	8006cec <HAL_RCC_GetHCLKFreq>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	4b14      	ldr	r3, [pc, #80]	; (8004c04 <HAL_InitTick+0x6c>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bbc:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 f9d6 	bl	8004f76 <HAL_SYSTICK_Config>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10f      	bne.n	8004bf0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b0f      	cmp	r3, #15
 8004bd4:	d809      	bhi.n	8004bea <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	6879      	ldr	r1, [r7, #4]
 8004bda:	f04f 30ff 	mov.w	r0, #4294967295
 8004bde:	f000 f994 	bl	8004f0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004be2:	4a09      	ldr	r2, [pc, #36]	; (8004c08 <HAL_InitTick+0x70>)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	e007      	b.n	8004bfa <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	73fb      	strb	r3, [r7, #15]
 8004bee:	e004      	b.n	8004bfa <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	73fb      	strb	r3, [r7, #15]
 8004bf4:	e001      	b.n	8004bfa <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	20000040 	.word	0x20000040
 8004c08:	2000003c 	.word	0x2000003c

08004c0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004c10:	4b06      	ldr	r3, [pc, #24]	; (8004c2c <HAL_IncTick+0x20>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	461a      	mov	r2, r3
 8004c16:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <HAL_IncTick+0x24>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	4a04      	ldr	r2, [pc, #16]	; (8004c30 <HAL_IncTick+0x24>)
 8004c1e:	6013      	str	r3, [r2, #0]
}
 8004c20:	bf00      	nop
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	20000040 	.word	0x20000040
 8004c30:	20000734 	.word	0x20000734

08004c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
  return uwTick;
 8004c38:	4b03      	ldr	r3, [pc, #12]	; (8004c48 <HAL_GetTick+0x14>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	20000734 	.word	0x20000734

08004c4c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004c50:	4b03      	ldr	r3, [pc, #12]	; (8004c60 <HAL_GetTickPrio+0x14>)
 8004c52:	681b      	ldr	r3, [r3, #0]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	2000003c 	.word	0x2000003c

08004c64 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8004c68:	4b03      	ldr	r3, [pc, #12]	; (8004c78 <HAL_GetTickFreq+0x14>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20000040 	.word	0x20000040

08004c7c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8004c80:	f7ff ff4a 	bl	8004b18 <LL_DBGMCU_EnableDBGSleepMode>
}
 8004c84:	bf00      	nop
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8004c8c:	f7ff ff54 	bl	8004b38 <LL_DBGMCU_EnableDBGStopMode>
}
 8004c90:	bf00      	nop
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ca4:	4b0c      	ldr	r3, [pc, #48]	; (8004cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cc6:	4a04      	ldr	r2, [pc, #16]	; (8004cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	60d3      	str	r3, [r2, #12]
}
 8004ccc:	bf00      	nop
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr
 8004cd8:	e000ed00 	.word	0xe000ed00

08004cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ce0:	4b04      	ldr	r3, [pc, #16]	; (8004cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	0a1b      	lsrs	r3, r3, #8
 8004ce6:	f003 0307 	and.w	r3, r3, #7
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	e000ed00 	.word	0xe000ed00

08004cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	4603      	mov	r3, r0
 8004d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	db0b      	blt.n	8004d22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d0a:	79fb      	ldrb	r3, [r7, #7]
 8004d0c:	f003 021f 	and.w	r2, r3, #31
 8004d10:	4907      	ldr	r1, [pc, #28]	; (8004d30 <__NVIC_EnableIRQ+0x38>)
 8004d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d16:	095b      	lsrs	r3, r3, #5
 8004d18:	2001      	movs	r0, #1
 8004d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8004d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	e000e100 	.word	0xe000e100

08004d34 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	db12      	blt.n	8004d6c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d46:	79fb      	ldrb	r3, [r7, #7]
 8004d48:	f003 021f 	and.w	r2, r3, #31
 8004d4c:	490a      	ldr	r1, [pc, #40]	; (8004d78 <__NVIC_DisableIRQ+0x44>)
 8004d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d52:	095b      	lsrs	r3, r3, #5
 8004d54:	2001      	movs	r0, #1
 8004d56:	fa00 f202 	lsl.w	r2, r0, r2
 8004d5a:	3320      	adds	r3, #32
 8004d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004d60:	f3bf 8f4f 	dsb	sy
}
 8004d64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004d66:	f3bf 8f6f 	isb	sy
}
 8004d6a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	e000e100 	.word	0xe000e100

08004d7c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4603      	mov	r3, r0
 8004d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	db0c      	blt.n	8004da8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d8e:	79fb      	ldrb	r3, [r7, #7]
 8004d90:	f003 021f 	and.w	r2, r3, #31
 8004d94:	4907      	ldr	r1, [pc, #28]	; (8004db4 <__NVIC_SetPendingIRQ+0x38>)
 8004d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d9a:	095b      	lsrs	r3, r3, #5
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8004da2:	3340      	adds	r3, #64	; 0x40
 8004da4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr
 8004db4:	e000e100 	.word	0xe000e100

08004db8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	db0c      	blt.n	8004de4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004dca:	79fb      	ldrb	r3, [r7, #7]
 8004dcc:	f003 021f 	and.w	r2, r3, #31
 8004dd0:	4907      	ldr	r1, [pc, #28]	; (8004df0 <__NVIC_ClearPendingIRQ+0x38>)
 8004dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd6:	095b      	lsrs	r3, r3, #5
 8004dd8:	2001      	movs	r0, #1
 8004dda:	fa00 f202 	lsl.w	r2, r0, r2
 8004dde:	3360      	adds	r3, #96	; 0x60
 8004de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	e000e100 	.word	0xe000e100

08004df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	6039      	str	r1, [r7, #0]
 8004dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	db0a      	blt.n	8004e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	490c      	ldr	r1, [pc, #48]	; (8004e40 <__NVIC_SetPriority+0x4c>)
 8004e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e12:	0112      	lsls	r2, r2, #4
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	440b      	add	r3, r1
 8004e18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e1c:	e00a      	b.n	8004e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	4908      	ldr	r1, [pc, #32]	; (8004e44 <__NVIC_SetPriority+0x50>)
 8004e24:	79fb      	ldrb	r3, [r7, #7]
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	3b04      	subs	r3, #4
 8004e2c:	0112      	lsls	r2, r2, #4
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	440b      	add	r3, r1
 8004e32:	761a      	strb	r2, [r3, #24]
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	e000e100 	.word	0xe000e100
 8004e44:	e000ed00 	.word	0xe000ed00

08004e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b089      	sub	sp, #36	; 0x24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	60f8      	str	r0, [r7, #12]
 8004e50:	60b9      	str	r1, [r7, #8]
 8004e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f003 0307 	and.w	r3, r3, #7
 8004e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	f1c3 0307 	rsb	r3, r3, #7
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	bf28      	it	cs
 8004e66:	2304      	movcs	r3, #4
 8004e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	2b06      	cmp	r3, #6
 8004e70:	d902      	bls.n	8004e78 <NVIC_EncodePriority+0x30>
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	3b03      	subs	r3, #3
 8004e76:	e000      	b.n	8004e7a <NVIC_EncodePriority+0x32>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	fa02 f303 	lsl.w	r3, r2, r3
 8004e86:	43da      	mvns	r2, r3
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	401a      	ands	r2, r3
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e90:	f04f 31ff 	mov.w	r1, #4294967295
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9a:	43d9      	mvns	r1, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ea0:	4313      	orrs	r3, r2
         );
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3724      	adds	r7, #36	; 0x24
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr
	...

08004eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ec0:	d301      	bcc.n	8004ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e00f      	b.n	8004ee6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ec6:	4a0a      	ldr	r2, [pc, #40]	; (8004ef0 <SysTick_Config+0x40>)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ece:	210f      	movs	r1, #15
 8004ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed4:	f7ff ff8e 	bl	8004df4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ed8:	4b05      	ldr	r3, [pc, #20]	; (8004ef0 <SysTick_Config+0x40>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ede:	4b04      	ldr	r3, [pc, #16]	; (8004ef0 <SysTick_Config+0x40>)
 8004ee0:	2207      	movs	r2, #7
 8004ee2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	e000e010 	.word	0xe000e010

08004ef4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7ff fec9 	bl	8004c94 <__NVIC_SetPriorityGrouping>
}
 8004f02:	bf00      	nop
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f0a:	b580      	push	{r7, lr}
 8004f0c:	b086      	sub	sp, #24
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	4603      	mov	r3, r0
 8004f12:	60b9      	str	r1, [r7, #8]
 8004f14:	607a      	str	r2, [r7, #4]
 8004f16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004f18:	f7ff fee0 	bl	8004cdc <__NVIC_GetPriorityGrouping>
 8004f1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	68b9      	ldr	r1, [r7, #8]
 8004f22:	6978      	ldr	r0, [r7, #20]
 8004f24:	f7ff ff90 	bl	8004e48 <NVIC_EncodePriority>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f2e:	4611      	mov	r1, r2
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7ff ff5f 	bl	8004df4 <__NVIC_SetPriority>
}
 8004f36:	bf00      	nop
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b082      	sub	sp, #8
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	4603      	mov	r3, r0
 8004f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff fed3 	bl	8004cf8 <__NVIC_EnableIRQ>
}
 8004f52:	bf00      	nop
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b082      	sub	sp, #8
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	4603      	mov	r3, r0
 8004f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff fee3 	bl	8004d34 <__NVIC_DisableIRQ>
}
 8004f6e:	bf00      	nop
 8004f70:	3708      	adds	r7, #8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b082      	sub	sp, #8
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff ff96 	bl	8004eb0 <SysTick_Config>
 8004f84:	4603      	mov	r3, r0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b082      	sub	sp, #8
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	4603      	mov	r3, r0
 8004f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff feed 	bl	8004d7c <__NVIC_SetPendingIRQ>
}
 8004fa2:	bf00      	nop
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b082      	sub	sp, #8
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff fefd 	bl	8004db8 <__NVIC_ClearPendingIRQ>
}
 8004fbe:	bf00      	nop
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
	...

08004fc8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e08e      	b.n	80050f8 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	4b47      	ldr	r3, [pc, #284]	; (8005100 <HAL_DMA_Init+0x138>)
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d80f      	bhi.n	8005006 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	4b45      	ldr	r3, [pc, #276]	; (8005104 <HAL_DMA_Init+0x13c>)
 8004fee:	4413      	add	r3, r2
 8004ff0:	4a45      	ldr	r2, [pc, #276]	; (8005108 <HAL_DMA_Init+0x140>)
 8004ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff6:	091b      	lsrs	r3, r3, #4
 8004ff8:	009a      	lsls	r2, r3, #2
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a42      	ldr	r2, [pc, #264]	; (800510c <HAL_DMA_Init+0x144>)
 8005002:	641a      	str	r2, [r3, #64]	; 0x40
 8005004:	e00e      	b.n	8005024 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	4b40      	ldr	r3, [pc, #256]	; (8005110 <HAL_DMA_Init+0x148>)
 800500e:	4413      	add	r3, r2
 8005010:	4a3d      	ldr	r2, [pc, #244]	; (8005108 <HAL_DMA_Init+0x140>)
 8005012:	fba2 2303 	umull	r2, r3, r2, r3
 8005016:	091b      	lsrs	r3, r3, #4
 8005018:	009a      	lsls	r2, r3, #2
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a3c      	ldr	r2, [pc, #240]	; (8005114 <HAL_DMA_Init+0x14c>)
 8005022:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800503a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800503e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005048:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	691b      	ldr	r3, [r3, #16]
 800504e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005054:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005060:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	4313      	orrs	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fa74 	bl	8005564 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005084:	d102      	bne.n	800508c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005094:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005098:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80050a2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d010      	beq.n	80050ce <HAL_DMA_Init+0x106>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	2b04      	cmp	r3, #4
 80050b2:	d80c      	bhi.n	80050ce <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fa93 	bl	80055e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c6:	687a      	ldr	r2, [r7, #4]
 80050c8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80050ca:	605a      	str	r2, [r3, #4]
 80050cc:	e008      	b.n	80050e0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3710      	adds	r7, #16
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	40020407 	.word	0x40020407
 8005104:	bffdfff8 	.word	0xbffdfff8
 8005108:	cccccccd 	.word	0xcccccccd
 800510c:	40020000 	.word	0x40020000
 8005110:	bffdfbf8 	.word	0xbffdfbf8
 8005114:	40020400 	.word	0x40020400

08005118 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_DMA_Start_IT+0x20>
 8005134:	2302      	movs	r3, #2
 8005136:	e066      	b.n	8005206 <HAL_DMA_Start_IT+0xee>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b01      	cmp	r3, #1
 800514a:	d155      	bne.n	80051f8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0201 	bic.w	r2, r2, #1
 8005168:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	68b9      	ldr	r1, [r7, #8]
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f000 f9b9 	bl	80054e8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517a:	2b00      	cmp	r3, #0
 800517c:	d008      	beq.n	8005190 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f042 020e 	orr.w	r2, r2, #14
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	e00f      	b.n	80051b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f022 0204 	bic.w	r2, r2, #4
 800519e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 020a 	orr.w	r2, r2, #10
 80051ae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d007      	beq.n	80051ce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051cc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d007      	beq.n	80051e6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051e4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0201 	orr.w	r2, r2, #1
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	e005      	b.n	8005204 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005200:	2302      	movs	r3, #2
 8005202:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005204:	7dfb      	ldrb	r3, [r7, #23]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e04f      	b.n	80052c0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b02      	cmp	r3, #2
 800522a:	d008      	beq.n	800523e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2204      	movs	r2, #4
 8005230:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e040      	b.n	80052c0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f022 020e 	bic.w	r2, r2, #14
 800524c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005258:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800525c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0201 	bic.w	r2, r2, #1
 800526c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005272:	f003 021c 	and.w	r2, r3, #28
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	2101      	movs	r1, #1
 800527c:	fa01 f202 	lsl.w	r2, r1, r2
 8005280:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800528a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00c      	beq.n	80052ae <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80052ac:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052d4:	2300      	movs	r3, #0
 80052d6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d005      	beq.n	80052f0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2204      	movs	r2, #4
 80052e8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	73fb      	strb	r3, [r7, #15]
 80052ee:	e047      	b.n	8005380 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 020e 	bic.w	r2, r2, #14
 80052fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f022 0201 	bic.w	r2, r2, #1
 800530e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800531a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800531e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005324:	f003 021c 	and.w	r2, r3, #28
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532c:	2101      	movs	r1, #1
 800532e:	fa01 f202 	lsl.w	r2, r1, r2
 8005332:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800533c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00c      	beq.n	8005360 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005350:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005354:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800535e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	4798      	blx	r3
    }
  }
  return status;
 8005380:	7bfb      	ldrb	r3, [r7, #15]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b084      	sub	sp, #16
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a6:	f003 031c 	and.w	r3, r3, #28
 80053aa:	2204      	movs	r2, #4
 80053ac:	409a      	lsls	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4013      	ands	r3, r2
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d026      	beq.n	8005404 <HAL_DMA_IRQHandler+0x7a>
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d021      	beq.n	8005404 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0320 	and.w	r3, r3, #32
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d107      	bne.n	80053de <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0204 	bic.w	r2, r2, #4
 80053dc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e2:	f003 021c 	and.w	r2, r3, #28
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	2104      	movs	r1, #4
 80053ec:	fa01 f202 	lsl.w	r2, r1, r2
 80053f0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d071      	beq.n	80054de <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005402:	e06c      	b.n	80054de <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005408:	f003 031c 	and.w	r3, r3, #28
 800540c:	2202      	movs	r2, #2
 800540e:	409a      	lsls	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4013      	ands	r3, r2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d02e      	beq.n	8005476 <HAL_DMA_IRQHandler+0xec>
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d029      	beq.n	8005476 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0320 	and.w	r3, r3, #32
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10b      	bne.n	8005448 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 020a 	bic.w	r2, r2, #10
 800543e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800544c:	f003 021c 	and.w	r2, r3, #28
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005454:	2102      	movs	r1, #2
 8005456:	fa01 f202 	lsl.w	r2, r1, r2
 800545a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005468:	2b00      	cmp	r3, #0
 800546a:	d038      	beq.n	80054de <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005474:	e033      	b.n	80054de <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547a:	f003 031c 	and.w	r3, r3, #28
 800547e:	2208      	movs	r2, #8
 8005480:	409a      	lsls	r2, r3
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4013      	ands	r3, r2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d02a      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x156>
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f003 0308 	and.w	r3, r3, #8
 8005490:	2b00      	cmp	r3, #0
 8005492:	d025      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 020e 	bic.w	r2, r2, #14
 80054a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a8:	f003 021c 	and.w	r2, r3, #28
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b0:	2101      	movs	r1, #1
 80054b2:	fa01 f202 	lsl.w	r2, r1, r2
 80054b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d004      	beq.n	80054e0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80054de:	bf00      	nop
 80054e0:	bf00      	nop
}
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80054fe:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005504:	2b00      	cmp	r3, #0
 8005506:	d004      	beq.n	8005512 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005510:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005516:	f003 021c 	and.w	r2, r3, #28
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	2101      	movs	r1, #1
 8005520:	fa01 f202 	lsl.w	r2, r1, r2
 8005524:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	2b10      	cmp	r3, #16
 8005534:	d108      	bne.n	8005548 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005546:	e007      	b.n	8005558 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	60da      	str	r2, [r3, #12]
}
 8005558:	bf00      	nop
 800555a:	3714      	adds	r7, #20
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	461a      	mov	r2, r3
 8005572:	4b17      	ldr	r3, [pc, #92]	; (80055d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005574:	429a      	cmp	r2, r3
 8005576:	d80a      	bhi.n	800558e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800557c:	089b      	lsrs	r3, r3, #2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005584:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6493      	str	r3, [r2, #72]	; 0x48
 800558c:	e007      	b.n	800559e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005592:	089b      	lsrs	r3, r3, #2
 8005594:	009a      	lsls	r2, r3, #2
 8005596:	4b0f      	ldr	r3, [pc, #60]	; (80055d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005598:	4413      	add	r3, r2
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	3b08      	subs	r3, #8
 80055a6:	4a0c      	ldr	r2, [pc, #48]	; (80055d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80055a8:	fba2 2303 	umull	r2, r3, r2, r3
 80055ac:	091b      	lsrs	r3, r3, #4
 80055ae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a0a      	ldr	r2, [pc, #40]	; (80055dc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80055b4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f003 031f 	and.w	r3, r3, #31
 80055bc:	2201      	movs	r2, #1
 80055be:	409a      	lsls	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80055c4:	bf00      	nop
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr
 80055d0:	40020407 	.word	0x40020407
 80055d4:	4002081c 	.word	0x4002081c
 80055d8:	cccccccd 	.word	0xcccccccd
 80055dc:	40020880 	.word	0x40020880

080055e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055f0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	4b0b      	ldr	r3, [pc, #44]	; (8005624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80055f6:	4413      	add	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	461a      	mov	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a09      	ldr	r2, [pc, #36]	; (8005628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8005604:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	3b01      	subs	r3, #1
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	2201      	movs	r2, #1
 8005610:	409a      	lsls	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005616:	bf00      	nop
 8005618:	3714      	adds	r7, #20
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	1000823f 	.word	0x1000823f
 8005628:	40020940 	.word	0x40020940

0800562c <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b01      	cmp	r3, #1
 8005640:	d12b      	bne.n	800569a <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005648:	2b01      	cmp	r3, #1
 800564a:	d101      	bne.n	8005650 <HAL_DMAEx_ConfigMuxSync+0x24>
 800564c:	2302      	movs	r3, #2
 800564e:	e025      	b.n	800569c <HAL_DMAEx_ConfigMuxSync+0x70>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	4b12      	ldr	r3, [pc, #72]	; (80056a8 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8005660:	4013      	ands	r3, r2
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	6811      	ldr	r1, [r2, #0]
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	68d2      	ldr	r2, [r2, #12]
 800566a:	3a01      	subs	r2, #1
 800566c:	04d2      	lsls	r2, r2, #19
 800566e:	4311      	orrs	r1, r2
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	6852      	ldr	r2, [r2, #4]
 8005674:	4311      	orrs	r1, r2
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	7a12      	ldrb	r2, [r2, #8]
 800567a:	0412      	lsls	r2, r2, #16
 800567c:	4311      	orrs	r1, r2
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	7a52      	ldrb	r2, [r2, #9]
 8005682:	0252      	lsls	r2, r2, #9
 8005684:	4311      	orrs	r1, r2
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800568a:	430b      	orrs	r3, r1
 800568c:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8005696:	2300      	movs	r3, #0
 8005698:	e000      	b.n	800569c <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
  }
}
 800569c:	4618      	mov	r0, r3
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	e000fdff 	.word	0xe000fdff

080056ac <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	0c1b      	lsrs	r3, r3, #16
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 031f 	and.w	r3, r3, #31
 80056c8:	2201      	movs	r2, #1
 80056ca:	fa02 f303 	lsl.w	r3, r2, r3
 80056ce:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	015b      	lsls	r3, r3, #5
 80056d4:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 80056d8:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80056dc:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	601a      	str	r2, [r3, #0]
}
 80056e4:	bf00      	nop
 80056e6:	371c      	adds	r7, #28
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80056fa:	2300      	movs	r3, #0
 80056fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80056fe:	e14c      	b.n	800599a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	2101      	movs	r1, #1
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	fa01 f303 	lsl.w	r3, r1, r3
 800570c:	4013      	ands	r3, r2
 800570e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 813e 	beq.w	8005994 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f003 0303 	and.w	r3, r3, #3
 8005720:	2b01      	cmp	r3, #1
 8005722:	d005      	beq.n	8005730 <HAL_GPIO_Init+0x40>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f003 0303 	and.w	r3, r3, #3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d130      	bne.n	8005792 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	2203      	movs	r2, #3
 800573c:	fa02 f303 	lsl.w	r3, r2, r3
 8005740:	43db      	mvns	r3, r3
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4013      	ands	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	fa02 f303 	lsl.w	r3, r2, r3
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	4313      	orrs	r3, r2
 8005758:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005766:	2201      	movs	r2, #1
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
 800576e:	43db      	mvns	r3, r3
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	4013      	ands	r3, r2
 8005774:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	091b      	lsrs	r3, r3, #4
 800577c:	f003 0201 	and.w	r2, r3, #1
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	fa02 f303 	lsl.w	r3, r2, r3
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	4313      	orrs	r3, r2
 800578a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	2b03      	cmp	r3, #3
 800579c:	d017      	beq.n	80057ce <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	2203      	movs	r2, #3
 80057aa:	fa02 f303 	lsl.w	r3, r2, r3
 80057ae:	43db      	mvns	r3, r3
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	4013      	ands	r3, r2
 80057b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	689a      	ldr	r2, [r3, #8]
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	005b      	lsls	r3, r3, #1
 80057be:	fa02 f303 	lsl.w	r3, r2, r3
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f003 0303 	and.w	r3, r3, #3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d123      	bne.n	8005822 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	08da      	lsrs	r2, r3, #3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	3208      	adds	r2, #8
 80057e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	220f      	movs	r2, #15
 80057f2:	fa02 f303 	lsl.w	r3, r2, r3
 80057f6:	43db      	mvns	r3, r3
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4013      	ands	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	691a      	ldr	r2, [r3, #16]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	fa02 f303 	lsl.w	r3, r2, r3
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	08da      	lsrs	r2, r3, #3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3208      	adds	r2, #8
 800581c:	6939      	ldr	r1, [r7, #16]
 800581e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	2203      	movs	r2, #3
 800582e:	fa02 f303 	lsl.w	r3, r2, r3
 8005832:	43db      	mvns	r3, r3
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	4013      	ands	r3, r2
 8005838:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f003 0203 	and.w	r2, r3, #3
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	fa02 f303 	lsl.w	r3, r2, r3
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	4313      	orrs	r3, r2
 800584e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800585e:	2b00      	cmp	r3, #0
 8005860:	f000 8098 	beq.w	8005994 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8005864:	4a54      	ldr	r2, [pc, #336]	; (80059b8 <HAL_GPIO_Init+0x2c8>)
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	089b      	lsrs	r3, r3, #2
 800586a:	3302      	adds	r3, #2
 800586c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005870:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f003 0303 	and.w	r3, r3, #3
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	220f      	movs	r2, #15
 800587c:	fa02 f303 	lsl.w	r3, r2, r3
 8005880:	43db      	mvns	r3, r3
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	4013      	ands	r3, r2
 8005886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800588e:	d019      	beq.n	80058c4 <HAL_GPIO_Init+0x1d4>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a4a      	ldr	r2, [pc, #296]	; (80059bc <HAL_GPIO_Init+0x2cc>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d013      	beq.n	80058c0 <HAL_GPIO_Init+0x1d0>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a49      	ldr	r2, [pc, #292]	; (80059c0 <HAL_GPIO_Init+0x2d0>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d00d      	beq.n	80058bc <HAL_GPIO_Init+0x1cc>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a48      	ldr	r2, [pc, #288]	; (80059c4 <HAL_GPIO_Init+0x2d4>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d007      	beq.n	80058b8 <HAL_GPIO_Init+0x1c8>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a47      	ldr	r2, [pc, #284]	; (80059c8 <HAL_GPIO_Init+0x2d8>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d101      	bne.n	80058b4 <HAL_GPIO_Init+0x1c4>
 80058b0:	2304      	movs	r3, #4
 80058b2:	e008      	b.n	80058c6 <HAL_GPIO_Init+0x1d6>
 80058b4:	2307      	movs	r3, #7
 80058b6:	e006      	b.n	80058c6 <HAL_GPIO_Init+0x1d6>
 80058b8:	2303      	movs	r3, #3
 80058ba:	e004      	b.n	80058c6 <HAL_GPIO_Init+0x1d6>
 80058bc:	2302      	movs	r3, #2
 80058be:	e002      	b.n	80058c6 <HAL_GPIO_Init+0x1d6>
 80058c0:	2301      	movs	r3, #1
 80058c2:	e000      	b.n	80058c6 <HAL_GPIO_Init+0x1d6>
 80058c4:	2300      	movs	r3, #0
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	f002 0203 	and.w	r2, r2, #3
 80058cc:	0092      	lsls	r2, r2, #2
 80058ce:	4093      	lsls	r3, r2
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80058d6:	4938      	ldr	r1, [pc, #224]	; (80059b8 <HAL_GPIO_Init+0x2c8>)
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	089b      	lsrs	r3, r3, #2
 80058dc:	3302      	adds	r3, #2
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058e4:	4b39      	ldr	r3, [pc, #228]	; (80059cc <HAL_GPIO_Init+0x2dc>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	43db      	mvns	r3, r3
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	4013      	ands	r3, r2
 80058f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d003      	beq.n	8005908 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4313      	orrs	r3, r2
 8005906:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005908:	4a30      	ldr	r2, [pc, #192]	; (80059cc <HAL_GPIO_Init+0x2dc>)
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800590e:	4b2f      	ldr	r3, [pc, #188]	; (80059cc <HAL_GPIO_Init+0x2dc>)
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	43db      	mvns	r3, r3
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	4013      	ands	r3, r2
 800591c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005926:	2b00      	cmp	r3, #0
 8005928:	d003      	beq.n	8005932 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800592a:	693a      	ldr	r2, [r7, #16]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4313      	orrs	r3, r2
 8005930:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005932:	4a26      	ldr	r2, [pc, #152]	; (80059cc <HAL_GPIO_Init+0x2dc>)
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005938:	4b24      	ldr	r3, [pc, #144]	; (80059cc <HAL_GPIO_Init+0x2dc>)
 800593a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800593e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	43db      	mvns	r3, r3
 8005944:	693a      	ldr	r2, [r7, #16]
 8005946:	4013      	ands	r3, r2
 8005948:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4313      	orrs	r3, r2
 800595c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800595e:	4a1b      	ldr	r2, [pc, #108]	; (80059cc <HAL_GPIO_Init+0x2dc>)
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8005966:	4b19      	ldr	r3, [pc, #100]	; (80059cc <HAL_GPIO_Init+0x2dc>)
 8005968:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800596c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	43db      	mvns	r3, r3
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	4013      	ands	r3, r2
 8005976:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	4313      	orrs	r3, r2
 800598a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800598c:	4a0f      	ldr	r2, [pc, #60]	; (80059cc <HAL_GPIO_Init+0x2dc>)
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	3301      	adds	r3, #1
 8005998:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	fa22 f303 	lsr.w	r3, r2, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f47f aeab 	bne.w	8005700 <HAL_GPIO_Init+0x10>
  }
}
 80059aa:	bf00      	nop
 80059ac:	bf00      	nop
 80059ae:	371c      	adds	r7, #28
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	40010000 	.word	0x40010000
 80059bc:	48000400 	.word	0x48000400
 80059c0:	48000800 	.word	0x48000800
 80059c4:	48000c00 	.word	0x48000c00
 80059c8:	48001000 	.word	0x48001000
 80059cc:	58000800 	.word	0x58000800

080059d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	460b      	mov	r3, r1
 80059da:	807b      	strh	r3, [r7, #2]
 80059dc:	4613      	mov	r3, r2
 80059de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059e0:	787b      	ldrb	r3, [r7, #1]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80059e6:	887a      	ldrh	r2, [r7, #2]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80059ec:	e002      	b.n	80059f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80059ee:	887a      	ldrh	r2, [r7, #2]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	4603      	mov	r3, r0
 8005a08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005a0a:	4b08      	ldr	r3, [pc, #32]	; (8005a2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a0c:	68da      	ldr	r2, [r3, #12]
 8005a0e:	88fb      	ldrh	r3, [r7, #6]
 8005a10:	4013      	ands	r3, r2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d006      	beq.n	8005a24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a16:	4a05      	ldr	r2, [pc, #20]	; (8005a2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a18:	88fb      	ldrh	r3, [r7, #6]
 8005a1a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a1c:	88fb      	ldrh	r3, [r7, #6]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fb ff69 	bl	80018f6 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a24:	bf00      	nop
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	58000800 	.word	0x58000800

08005a30 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005a36:	4b0a      	ldr	r3, [pc, #40]	; (8005a60 <HAL_HSEM_IRQHandler+0x30>)
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005a3c:	4b08      	ldr	r3, [pc, #32]	; (8005a60 <HAL_HSEM_IRQHandler+0x30>)
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	43db      	mvns	r3, r3
 8005a44:	4906      	ldr	r1, [pc, #24]	; (8005a60 <HAL_HSEM_IRQHandler+0x30>)
 8005a46:	4013      	ands	r3, r2
 8005a48:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005a4a:	4a05      	ldr	r2, [pc, #20]	; (8005a60 <HAL_HSEM_IRQHandler+0x30>)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f807 	bl	8005a64 <HAL_HSEM_FreeCallback>
}
 8005a56:	bf00      	nop
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	58001500 	.word	0x58001500

08005a64 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005a80:	2300      	movs	r3, #0
 8005a82:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d01e      	beq.n	8005ac8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005a8a:	4b13      	ldr	r3, [pc, #76]	; (8005ad8 <HAL_IPCC_Init+0x60>)
 8005a8c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d102      	bne.n	8005aa0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7fd f9ba 	bl	8002e14 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005aa0:	68b8      	ldr	r0, [r7, #8]
 8005aa2:	f000 f85b 	bl	8005b5c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f82c 	bl	8005b10 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8005ac6:	e001      	b.n	8005acc <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3710      	adds	r7, #16
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	58000c00 	.word	0x58000c00

08005adc <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8005aea:	bf00      	nop
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b085      	sub	sp, #20
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	4613      	mov	r3, r2
 8005b02:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	e00f      	b.n	8005b3e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	4a0b      	ldr	r2, [pc, #44]	; (8005b54 <IPCC_SetDefaultCallbacks+0x44>)
 8005b28:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	3306      	adds	r3, #6
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	4a08      	ldr	r2, [pc, #32]	; (8005b58 <IPCC_SetDefaultCallbacks+0x48>)
 8005b36:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2b05      	cmp	r3, #5
 8005b42:	d9ec      	bls.n	8005b1e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	08005add 	.word	0x08005add
 8005b58:	08005af7 	.word	0x08005af7

08005b5c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8005b70:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	223f      	movs	r2, #63	; 0x3f
 8005b76:	609a      	str	r2, [r3, #8]
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005b84:	b480      	push	{r7}
 8005b86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b88:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a04      	ldr	r2, [pc, #16]	; (8005ba0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b92:	6013      	str	r3, [r2, #0]
}
 8005b94:	bf00      	nop
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	58000400 	.word	0x58000400

08005ba4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8005ba8:	4b04      	ldr	r3, [pc, #16]	; (8005bbc <HAL_PWREx_GetVoltageRange+0x18>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	58000400 	.word	0x58000400

08005bc0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bd2:	d101      	bne.n	8005bd8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e000      	b.n	8005bda <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <LL_RCC_HSE_Enable>:
{
 8005be4:	b480      	push	{r7}
 8005be6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bf6:	6013      	str	r3, [r2, #0]
}
 8005bf8:	bf00      	nop
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <LL_RCC_HSE_Disable>:
{
 8005c02:	b480      	push	{r7}
 8005c04:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c14:	6013      	str	r3, [r2, #0]
}
 8005c16:	bf00      	nop
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <LL_RCC_HSE_IsReady>:
{
 8005c20:	b480      	push	{r7}
 8005c22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c32:	d101      	bne.n	8005c38 <LL_RCC_HSE_IsReady+0x18>
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <LL_RCC_HSE_IsReady+0x1a>
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <LL_RCC_HSI_Enable>:
{
 8005c44:	b480      	push	{r7}
 8005c46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c56:	6013      	str	r3, [r2, #0]
}
 8005c58:	bf00      	nop
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <LL_RCC_HSI_Disable>:
{
 8005c62:	b480      	push	{r7}
 8005c64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005c66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c74:	6013      	str	r3, [r2, #0]
}
 8005c76:	bf00      	nop
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <LL_RCC_HSI_IsReady>:
{
 8005c80:	b480      	push	{r7}
 8005c82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c92:	d101      	bne.n	8005c98 <LL_RCC_HSI_IsReady+0x18>
 8005c94:	2301      	movs	r3, #1
 8005c96:	e000      	b.n	8005c9a <LL_RCC_HSI_IsReady+0x1a>
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	061b      	lsls	r3, r3, #24
 8005cba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	604b      	str	r3, [r1, #4]
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <LL_RCC_HSI48_Enable>:
{
 8005cce:	b480      	push	{r7}
 8005cd0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cde:	f043 0301 	orr.w	r3, r3, #1
 8005ce2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005ce6:	bf00      	nop
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <LL_RCC_HSI48_Disable>:
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8005cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005cfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d00:	f023 0301 	bic.w	r3, r3, #1
 8005d04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8005d08:	bf00      	nop
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <LL_RCC_HSI48_IsReady>:
{
 8005d12:	b480      	push	{r7}
 8005d14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8005d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d101      	bne.n	8005d2a <LL_RCC_HSI48_IsReady+0x18>
 8005d26:	2301      	movs	r3, #1
 8005d28:	e000      	b.n	8005d2c <LL_RCC_HSI48_IsReady+0x1a>
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr

08005d36 <LL_RCC_LSE_Enable>:
{
 8005d36:	b480      	push	{r7}
 8005d38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d46:	f043 0301 	orr.w	r3, r3, #1
 8005d4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d4e:	bf00      	nop
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr

08005d58 <LL_RCC_LSE_Disable>:
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d68:	f023 0301 	bic.w	r3, r3, #1
 8005d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d70:	bf00      	nop
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr

08005d7a <LL_RCC_LSE_EnableBypass>:
{
 8005d7a:	b480      	push	{r7}
 8005d7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d8a:	f043 0304 	orr.w	r3, r3, #4
 8005d8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d92:	bf00      	nop
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <LL_RCC_LSE_DisableBypass>:
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dac:	f023 0304 	bic.w	r3, r3, #4
 8005db0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005db4:	bf00      	nop
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <LL_RCC_LSE_IsReady>:
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d101      	bne.n	8005dd6 <LL_RCC_LSE_IsReady+0x18>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e000      	b.n	8005dd8 <LL_RCC_LSE_IsReady+0x1a>
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <LL_RCC_LSI1_Enable>:
{
 8005de2:	b480      	push	{r7}
 8005de4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005df2:	f043 0301 	orr.w	r3, r3, #1
 8005df6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005dfa:	bf00      	nop
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <LL_RCC_LSI1_Disable>:
{
 8005e04:	b480      	push	{r7}
 8005e06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8005e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e14:	f023 0301 	bic.w	r3, r3, #1
 8005e18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005e1c:	bf00      	nop
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <LL_RCC_LSI1_IsReady>:
{
 8005e26:	b480      	push	{r7}
 8005e28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8005e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e32:	f003 0302 	and.w	r3, r3, #2
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d101      	bne.n	8005e3e <LL_RCC_LSI1_IsReady+0x18>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <LL_RCC_LSI1_IsReady+0x1a>
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <LL_RCC_LSI2_Enable>:
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005e4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e5a:	f043 0304 	orr.w	r3, r3, #4
 8005e5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005e62:	bf00      	nop
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <LL_RCC_LSI2_Disable>:
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8005e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e7c:	f023 0304 	bic.w	r3, r3, #4
 8005e80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8005e84:	bf00      	nop
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr

08005e8e <LL_RCC_LSI2_IsReady>:
{
 8005e8e:	b480      	push	{r7}
 8005e90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8005e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e9a:	f003 0308 	and.w	r3, r3, #8
 8005e9e:	2b08      	cmp	r3, #8
 8005ea0:	d101      	bne.n	8005ea6 <LL_RCC_LSI2_IsReady+0x18>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e000      	b.n	8005ea8 <LL_RCC_LSI2_IsReady+0x1a>
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <LL_RCC_LSI2_SetTrimming>:
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8005eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ec2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	021b      	lsls	r3, r3, #8
 8005eca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <LL_RCC_MSI_Enable>:
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005eee:	f043 0301 	orr.w	r3, r3, #1
 8005ef2:	6013      	str	r3, [r2, #0]
}
 8005ef4:	bf00      	nop
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <LL_RCC_MSI_Disable>:
{
 8005efe:	b480      	push	{r7}
 8005f00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8005f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f0c:	f023 0301 	bic.w	r3, r3, #1
 8005f10:	6013      	str	r3, [r2, #0]
}
 8005f12:	bf00      	nop
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <LL_RCC_MSI_IsReady>:
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d101      	bne.n	8005f32 <LL_RCC_MSI_IsReady+0x16>
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e000      	b.n	8005f34 <LL_RCC_MSI_IsReady+0x18>
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <LL_RCC_MSI_SetRange>:
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b083      	sub	sp, #12
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8005f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	600b      	str	r3, [r1, #0]
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <LL_RCC_MSI_GetRange>:
{
 8005f66:	b480      	push	{r7}
 8005f68:	b083      	sub	sp, #12
 8005f6a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8005f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f76:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2bb0      	cmp	r3, #176	; 0xb0
 8005f7c:	d901      	bls.n	8005f82 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8005f7e:	23b0      	movs	r3, #176	; 0xb0
 8005f80:	607b      	str	r3, [r7, #4]
  return msiRange;
 8005f82:	687b      	ldr	r3, [r7, #4]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	021b      	lsls	r3, r3, #8
 8005fa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005faa:	4313      	orrs	r3, r2
 8005fac:	604b      	str	r3, [r1, #4]
}
 8005fae:	bf00      	nop
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr

08005fba <LL_RCC_SetSysClkSource>:
{
 8005fba:	b480      	push	{r7}
 8005fbc:	b083      	sub	sp, #12
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f023 0203 	bic.w	r2, r3, #3
 8005fcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	608b      	str	r3, [r1, #8]
}
 8005fd6:	bf00      	nop
 8005fd8:	370c      	adds	r7, #12
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <LL_RCC_GetSysClkSource>:
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	f003 030c 	and.w	r3, r3, #12
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr

08005ffa <LL_RCC_SetAHBPrescaler>:
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800600c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4313      	orrs	r3, r2
 8006014:	608b      	str	r3, [r1, #8]
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <LL_C2_RCC_SetAHBPrescaler>:
{
 8006022:	b480      	push	{r7}
 8006024:	b083      	sub	sp, #12
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800602a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800602e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006032:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006036:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4313      	orrs	r3, r2
 800603e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006042:	bf00      	nop
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <LL_RCC_SetAHB4Prescaler>:
{
 800604e:	b480      	push	{r7}
 8006050:	b083      	sub	sp, #12
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800605a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800605e:	f023 020f 	bic.w	r2, r3, #15
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	091b      	lsrs	r3, r3, #4
 8006066:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800606a:	4313      	orrs	r3, r2
 800606c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <LL_RCC_SetAPB1Prescaler>:
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800608e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4313      	orrs	r3, r2
 8006096:	608b      	str	r3, [r1, #8]
}
 8006098:	bf00      	nop
 800609a:	370c      	adds	r7, #12
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr

080060a4 <LL_RCC_SetAPB2Prescaler>:
{
 80060a4:	b480      	push	{r7}
 80060a6:	b083      	sub	sp, #12
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80060ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80060b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4313      	orrs	r3, r2
 80060be:	608b      	str	r3, [r1, #8]
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <LL_RCC_GetAHBPrescaler>:
{
 80060cc:	b480      	push	{r7}
 80060ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80060d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <LL_RCC_GetAHB4Prescaler>:
{
 80060e4:	b480      	push	{r7}
 80060e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80060e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80060f0:	011b      	lsls	r3, r3, #4
 80060f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <LL_RCC_GetAPB1Prescaler>:
{
 8006100:	b480      	push	{r7}
 8006102:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800610e:	4618      	mov	r0, r3
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <LL_RCC_GetAPB2Prescaler>:
{
 8006118:	b480      	push	{r7}
 800611a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800611c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8006126:	4618      	mov	r0, r3
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <LL_RCC_PLL_Enable>:
{
 8006130:	b480      	push	{r7}
 8006132:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800613e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006142:	6013      	str	r3, [r2, #0]
}
 8006144:	bf00      	nop
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <LL_RCC_PLL_Disable>:
{
 800614e:	b480      	push	{r7}
 8006150:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800615c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006160:	6013      	str	r3, [r2, #0]
}
 8006162:	bf00      	nop
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <LL_RCC_PLL_IsReady>:
{
 800616c:	b480      	push	{r7}
 800616e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800617a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800617e:	d101      	bne.n	8006184 <LL_RCC_PLL_IsReady+0x18>
 8006180:	2301      	movs	r3, #1
 8006182:	e000      	b.n	8006186 <LL_RCC_PLL_IsReady+0x1a>
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <LL_RCC_PLL_GetN>:
{
 8006190:	b480      	push	{r7}
 8006192:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	0a1b      	lsrs	r3, r3, #8
 800619c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <LL_RCC_PLL_GetR>:
{
 80061aa:	b480      	push	{r7}
 80061ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80061ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <LL_RCC_PLL_GetDivider>:
{
 80061c2:	b480      	push	{r7}
 80061c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80061c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr

080061da <LL_RCC_PLL_GetMainSource>:
{
 80061da:	b480      	push	{r7}
 80061dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80061de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f003 0303 	and.w	r3, r3, #3
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <LL_RCC_IsActiveFlag_HPRE>:
{
 80061f2:	b480      	push	{r7}
 80061f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80061f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006204:	d101      	bne.n	800620a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006206:	2301      	movs	r3, #1
 8006208:	e000      	b.n	800620c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8006216:	b480      	push	{r7}
 8006218:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800621a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800621e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006226:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800622a:	d101      	bne.n	8006230 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800622c:	2301      	movs	r3, #1
 800622e:	e000      	b.n	8006232 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800623c:	b480      	push	{r7}
 800623e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006244:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006248:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800624c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006250:	d101      	bne.n	8006256 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006252:	2301      	movs	r3, #1
 8006254:	e000      	b.n	8006258 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8006262:	b480      	push	{r7}
 8006264:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006270:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006274:	d101      	bne.n	800627a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006276:	2301      	movs	r3, #1
 8006278:	e000      	b.n	800627c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8006286:	b480      	push	{r7}
 8006288:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800628a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006294:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006298:	d101      	bne.n	800629e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800629a:	2301      	movs	r3, #1
 800629c:	e000      	b.n	80062a0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
	...

080062ac <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062ac:	b590      	push	{r4, r7, lr}
 80062ae:	b08d      	sub	sp, #52	; 0x34
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e363      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0320 	and.w	r3, r3, #32
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 808d 	beq.w	80063e6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062cc:	f7ff fe89 	bl	8005fe2 <LL_RCC_GetSysClkSource>
 80062d0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80062d2:	f7ff ff82 	bl	80061da <LL_RCC_PLL_GetMainSource>
 80062d6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80062d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d005      	beq.n	80062ea <HAL_RCC_OscConfig+0x3e>
 80062de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e0:	2b0c      	cmp	r3, #12
 80062e2:	d147      	bne.n	8006374 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80062e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d144      	bne.n	8006374 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	69db      	ldr	r3, [r3, #28]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e347      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80062fa:	f7ff fe34 	bl	8005f66 <LL_RCC_MSI_GetRange>
 80062fe:	4603      	mov	r3, r0
 8006300:	429c      	cmp	r4, r3
 8006302:	d914      	bls.n	800632e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	4618      	mov	r0, r3
 800630a:	f000 fd2f 	bl	8006d6c <RCC_SetFlashLatencyFromMSIRange>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d001      	beq.n	8006318 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e336      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631c:	4618      	mov	r0, r3
 800631e:	f7ff fe0e 	bl	8005f3e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff fe32 	bl	8005f90 <LL_RCC_MSI_SetCalibTrimming>
 800632c:	e013      	b.n	8006356 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006332:	4618      	mov	r0, r3
 8006334:	f7ff fe03 	bl	8005f3e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	4618      	mov	r0, r3
 800633e:	f7ff fe27 	bl	8005f90 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006346:	4618      	mov	r0, r3
 8006348:	f000 fd10 	bl	8006d6c <RCC_SetFlashLatencyFromMSIRange>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e317      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006356:	f000 fcc9 	bl	8006cec <HAL_RCC_GetHCLKFreq>
 800635a:	4603      	mov	r3, r0
 800635c:	4aa4      	ldr	r2, [pc, #656]	; (80065f0 <HAL_RCC_OscConfig+0x344>)
 800635e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006360:	4ba4      	ldr	r3, [pc, #656]	; (80065f4 <HAL_RCC_OscConfig+0x348>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4618      	mov	r0, r3
 8006366:	f7fe fc17 	bl	8004b98 <HAL_InitTick>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d039      	beq.n	80063e4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e308      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d01e      	beq.n	80063ba <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800637c:	f7ff fdb0 	bl	8005ee0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006380:	f7fe fc58 	bl	8004c34 <HAL_GetTick>
 8006384:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8006386:	e008      	b.n	800639a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006388:	f7fe fc54 	bl	8004c34 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e2f5      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800639a:	f7ff fdbf 	bl	8005f1c <LL_RCC_MSI_IsReady>
 800639e:	4603      	mov	r3, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0f1      	beq.n	8006388 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7ff fdc8 	bl	8005f3e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7ff fdec 	bl	8005f90 <LL_RCC_MSI_SetCalibTrimming>
 80063b8:	e015      	b.n	80063e6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80063ba:	f7ff fda0 	bl	8005efe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80063be:	f7fe fc39 	bl	8004c34 <HAL_GetTick>
 80063c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80063c4:	e008      	b.n	80063d8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80063c6:	f7fe fc35 	bl	8004c34 <HAL_GetTick>
 80063ca:	4602      	mov	r2, r0
 80063cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ce:	1ad3      	subs	r3, r2, r3
 80063d0:	2b02      	cmp	r3, #2
 80063d2:	d901      	bls.n	80063d8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e2d6      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80063d8:	f7ff fda0 	bl	8005f1c <LL_RCC_MSI_IsReady>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1f1      	bne.n	80063c6 <HAL_RCC_OscConfig+0x11a>
 80063e2:	e000      	b.n	80063e6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80063e4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d047      	beq.n	8006482 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063f2:	f7ff fdf6 	bl	8005fe2 <LL_RCC_GetSysClkSource>
 80063f6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80063f8:	f7ff feef 	bl	80061da <LL_RCC_PLL_GetMainSource>
 80063fc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	2b08      	cmp	r3, #8
 8006402:	d005      	beq.n	8006410 <HAL_RCC_OscConfig+0x164>
 8006404:	6a3b      	ldr	r3, [r7, #32]
 8006406:	2b0c      	cmp	r3, #12
 8006408:	d108      	bne.n	800641c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	2b03      	cmp	r3, #3
 800640e:	d105      	bne.n	800641c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d134      	bne.n	8006482 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e2b4      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006424:	d102      	bne.n	800642c <HAL_RCC_OscConfig+0x180>
 8006426:	f7ff fbdd 	bl	8005be4 <LL_RCC_HSE_Enable>
 800642a:	e001      	b.n	8006430 <HAL_RCC_OscConfig+0x184>
 800642c:	f7ff fbe9 	bl	8005c02 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d012      	beq.n	800645e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006438:	f7fe fbfc 	bl	8004c34 <HAL_GetTick>
 800643c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800643e:	e008      	b.n	8006452 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006440:	f7fe fbf8 	bl	8004c34 <HAL_GetTick>
 8006444:	4602      	mov	r2, r0
 8006446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	2b64      	cmp	r3, #100	; 0x64
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e299      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8006452:	f7ff fbe5 	bl	8005c20 <LL_RCC_HSE_IsReady>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d0f1      	beq.n	8006440 <HAL_RCC_OscConfig+0x194>
 800645c:	e011      	b.n	8006482 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800645e:	f7fe fbe9 	bl	8004c34 <HAL_GetTick>
 8006462:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8006464:	e008      	b.n	8006478 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006466:	f7fe fbe5 	bl	8004c34 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b64      	cmp	r3, #100	; 0x64
 8006472:	d901      	bls.n	8006478 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e286      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8006478:	f7ff fbd2 	bl	8005c20 <LL_RCC_HSE_IsReady>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1f1      	bne.n	8006466 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d04c      	beq.n	8006528 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800648e:	f7ff fda8 	bl	8005fe2 <LL_RCC_GetSysClkSource>
 8006492:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006494:	f7ff fea1 	bl	80061da <LL_RCC_PLL_GetMainSource>
 8006498:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	2b04      	cmp	r3, #4
 800649e:	d005      	beq.n	80064ac <HAL_RCC_OscConfig+0x200>
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	2b0c      	cmp	r3, #12
 80064a4:	d10e      	bne.n	80064c4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d10b      	bne.n	80064c4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e266      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	4618      	mov	r0, r3
 80064be:	f7ff fbf1 	bl	8005ca4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80064c2:	e031      	b.n	8006528 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	68db      	ldr	r3, [r3, #12]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d019      	beq.n	8006500 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064cc:	f7ff fbba 	bl	8005c44 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064d0:	f7fe fbb0 	bl	8004c34 <HAL_GetTick>
 80064d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80064d6:	e008      	b.n	80064ea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064d8:	f7fe fbac 	bl	8004c34 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d901      	bls.n	80064ea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e24d      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80064ea:	f7ff fbc9 	bl	8005c80 <LL_RCC_HSI_IsReady>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d0f1      	beq.n	80064d8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7ff fbd3 	bl	8005ca4 <LL_RCC_HSI_SetCalibTrimming>
 80064fe:	e013      	b.n	8006528 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006500:	f7ff fbaf 	bl	8005c62 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006504:	f7fe fb96 	bl	8004c34 <HAL_GetTick>
 8006508:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800650a:	e008      	b.n	800651e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800650c:	f7fe fb92 	bl	8004c34 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	2b02      	cmp	r3, #2
 8006518:	d901      	bls.n	800651e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e233      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800651e:	f7ff fbaf 	bl	8005c80 <LL_RCC_HSI_IsReady>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1f1      	bne.n	800650c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b00      	cmp	r3, #0
 8006532:	d106      	bne.n	8006542 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 80a3 	beq.w	8006688 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d076      	beq.n	8006638 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0310 	and.w	r3, r3, #16
 8006552:	2b00      	cmp	r3, #0
 8006554:	d046      	beq.n	80065e4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8006556:	f7ff fc66 	bl	8005e26 <LL_RCC_LSI1_IsReady>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d113      	bne.n	8006588 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8006560:	f7ff fc3f 	bl	8005de2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006564:	f7fe fb66 	bl	8004c34 <HAL_GetTick>
 8006568:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800656a:	e008      	b.n	800657e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800656c:	f7fe fb62 	bl	8004c34 <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	2b02      	cmp	r3, #2
 8006578:	d901      	bls.n	800657e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e203      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800657e:	f7ff fc52 	bl	8005e26 <LL_RCC_LSI1_IsReady>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d0f1      	beq.n	800656c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8006588:	f7ff fc5f 	bl	8005e4a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800658c:	f7fe fb52 	bl	8004c34 <HAL_GetTick>
 8006590:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8006592:	e008      	b.n	80065a6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006594:	f7fe fb4e 	bl	8004c34 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b03      	cmp	r3, #3
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e1ef      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80065a6:	f7ff fc72 	bl	8005e8e <LL_RCC_LSI2_IsReady>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d0f1      	beq.n	8006594 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7ff fc7c 	bl	8005eb2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80065ba:	f7ff fc23 	bl	8005e04 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065be:	f7fe fb39 	bl	8004c34 <HAL_GetTick>
 80065c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80065c4:	e008      	b.n	80065d8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80065c6:	f7fe fb35 	bl	8004c34 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d901      	bls.n	80065d8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e1d6      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80065d8:	f7ff fc25 	bl	8005e26 <LL_RCC_LSI1_IsReady>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d1f1      	bne.n	80065c6 <HAL_RCC_OscConfig+0x31a>
 80065e2:	e051      	b.n	8006688 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80065e4:	f7ff fbfd 	bl	8005de2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065e8:	f7fe fb24 	bl	8004c34 <HAL_GetTick>
 80065ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80065ee:	e00c      	b.n	800660a <HAL_RCC_OscConfig+0x35e>
 80065f0:	20000038 	.word	0x20000038
 80065f4:	2000003c 	.word	0x2000003c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80065f8:	f7fe fb1c 	bl	8004c34 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b02      	cmp	r3, #2
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e1bd      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800660a:	f7ff fc0c 	bl	8005e26 <LL_RCC_LSI1_IsReady>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d0f1      	beq.n	80065f8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8006614:	f7ff fc2a 	bl	8005e6c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8006618:	e008      	b.n	800662c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800661a:	f7fe fb0b 	bl	8004c34 <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	2b03      	cmp	r3, #3
 8006626:	d901      	bls.n	800662c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e1ac      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800662c:	f7ff fc2f 	bl	8005e8e <LL_RCC_LSI2_IsReady>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1f1      	bne.n	800661a <HAL_RCC_OscConfig+0x36e>
 8006636:	e027      	b.n	8006688 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8006638:	f7ff fc18 	bl	8005e6c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800663c:	f7fe fafa 	bl	8004c34 <HAL_GetTick>
 8006640:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006642:	e008      	b.n	8006656 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8006644:	f7fe faf6 	bl	8004c34 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	2b03      	cmp	r3, #3
 8006650:	d901      	bls.n	8006656 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e197      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8006656:	f7ff fc1a 	bl	8005e8e <LL_RCC_LSI2_IsReady>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1f1      	bne.n	8006644 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8006660:	f7ff fbd0 	bl	8005e04 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006664:	f7fe fae6 	bl	8004c34 <HAL_GetTick>
 8006668:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800666a:	e008      	b.n	800667e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800666c:	f7fe fae2 	bl	8004c34 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b02      	cmp	r3, #2
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e183      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800667e:	f7ff fbd2 	bl	8005e26 <LL_RCC_LSI1_IsReady>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1f1      	bne.n	800666c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 0304 	and.w	r3, r3, #4
 8006690:	2b00      	cmp	r3, #0
 8006692:	d05b      	beq.n	800674c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006694:	4ba7      	ldr	r3, [pc, #668]	; (8006934 <HAL_RCC_OscConfig+0x688>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800669c:	2b00      	cmp	r3, #0
 800669e:	d114      	bne.n	80066ca <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80066a0:	f7ff fa70 	bl	8005b84 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066a4:	f7fe fac6 	bl	8004c34 <HAL_GetTick>
 80066a8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066aa:	e008      	b.n	80066be <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066ac:	f7fe fac2 	bl	8004c34 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e163      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80066be:	4b9d      	ldr	r3, [pc, #628]	; (8006934 <HAL_RCC_OscConfig+0x688>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0f0      	beq.n	80066ac <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d102      	bne.n	80066d8 <HAL_RCC_OscConfig+0x42c>
 80066d2:	f7ff fb30 	bl	8005d36 <LL_RCC_LSE_Enable>
 80066d6:	e00c      	b.n	80066f2 <HAL_RCC_OscConfig+0x446>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	2b05      	cmp	r3, #5
 80066de:	d104      	bne.n	80066ea <HAL_RCC_OscConfig+0x43e>
 80066e0:	f7ff fb4b 	bl	8005d7a <LL_RCC_LSE_EnableBypass>
 80066e4:	f7ff fb27 	bl	8005d36 <LL_RCC_LSE_Enable>
 80066e8:	e003      	b.n	80066f2 <HAL_RCC_OscConfig+0x446>
 80066ea:	f7ff fb35 	bl	8005d58 <LL_RCC_LSE_Disable>
 80066ee:	f7ff fb55 	bl	8005d9c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d014      	beq.n	8006724 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066fa:	f7fe fa9b 	bl	8004c34 <HAL_GetTick>
 80066fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8006700:	e00a      	b.n	8006718 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006702:	f7fe fa97 	bl	8004c34 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006710:	4293      	cmp	r3, r2
 8006712:	d901      	bls.n	8006718 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006714:	2303      	movs	r3, #3
 8006716:	e136      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8006718:	f7ff fb51 	bl	8005dbe <LL_RCC_LSE_IsReady>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d0ef      	beq.n	8006702 <HAL_RCC_OscConfig+0x456>
 8006722:	e013      	b.n	800674c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006724:	f7fe fa86 	bl	8004c34 <HAL_GetTick>
 8006728:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800672a:	e00a      	b.n	8006742 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800672c:	f7fe fa82 	bl	8004c34 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	f241 3288 	movw	r2, #5000	; 0x1388
 800673a:	4293      	cmp	r3, r2
 800673c:	d901      	bls.n	8006742 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800673e:	2303      	movs	r3, #3
 8006740:	e121      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8006742:	f7ff fb3c 	bl	8005dbe <LL_RCC_LSE_IsReady>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1ef      	bne.n	800672c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006754:	2b00      	cmp	r3, #0
 8006756:	d02c      	beq.n	80067b2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675c:	2b00      	cmp	r3, #0
 800675e:	d014      	beq.n	800678a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006760:	f7ff fab5 	bl	8005cce <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006764:	f7fe fa66 	bl	8004c34 <HAL_GetTick>
 8006768:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800676a:	e008      	b.n	800677e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800676c:	f7fe fa62 	bl	8004c34 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	2b02      	cmp	r3, #2
 8006778:	d901      	bls.n	800677e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e103      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800677e:	f7ff fac8 	bl	8005d12 <LL_RCC_HSI48_IsReady>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0f1      	beq.n	800676c <HAL_RCC_OscConfig+0x4c0>
 8006788:	e013      	b.n	80067b2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800678a:	f7ff fab1 	bl	8005cf0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800678e:	f7fe fa51 	bl	8004c34 <HAL_GetTick>
 8006792:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8006794:	e008      	b.n	80067a8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006796:	f7fe fa4d 	bl	8004c34 <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d901      	bls.n	80067a8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e0ee      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80067a8:	f7ff fab3 	bl	8005d12 <LL_RCC_HSI48_IsReady>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1f1      	bne.n	8006796 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f000 80e4 	beq.w	8006984 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067bc:	f7ff fc11 	bl	8005fe2 <LL_RCC_GetSysClkSource>
 80067c0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80067c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	f040 80b4 	bne.w	800693c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f003 0203 	and.w	r2, r3, #3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067de:	429a      	cmp	r2, r3
 80067e0:	d123      	bne.n	800682a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d11c      	bne.n	800682a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	0a1b      	lsrs	r3, r3, #8
 80067f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d114      	bne.n	800682a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800680a:	429a      	cmp	r2, r3
 800680c:	d10d      	bne.n	800682a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006818:	429a      	cmp	r2, r3
 800681a:	d106      	bne.n	800682a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006826:	429a      	cmp	r2, r3
 8006828:	d05d      	beq.n	80068e6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	2b0c      	cmp	r3, #12
 800682e:	d058      	beq.n	80068e2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e0a1      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006842:	f7ff fc84 	bl	800614e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006846:	f7fe f9f5 	bl	8004c34 <HAL_GetTick>
 800684a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800684c:	e008      	b.n	8006860 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800684e:	f7fe f9f1 	bl	8004c34 <HAL_GetTick>
 8006852:	4602      	mov	r2, r0
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	2b02      	cmp	r3, #2
 800685a:	d901      	bls.n	8006860 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e092      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006860:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1ef      	bne.n	800684e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800686e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006872:	68da      	ldr	r2, [r3, #12]
 8006874:	4b30      	ldr	r3, [pc, #192]	; (8006938 <HAL_RCC_OscConfig+0x68c>)
 8006876:	4013      	ands	r3, r2
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006880:	4311      	orrs	r1, r2
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006886:	0212      	lsls	r2, r2, #8
 8006888:	4311      	orrs	r1, r2
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800688e:	4311      	orrs	r1, r2
 8006890:	687a      	ldr	r2, [r7, #4]
 8006892:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006894:	4311      	orrs	r1, r2
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800689a:	430a      	orrs	r2, r1
 800689c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80068a0:	4313      	orrs	r3, r2
 80068a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80068a4:	f7ff fc44 	bl	8006130 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80068a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80068b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80068b8:	f7fe f9bc 	bl	8004c34 <HAL_GetTick>
 80068bc:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068c0:	f7fe f9b8 	bl	8004c34 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e059      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d0ef      	beq.n	80068c0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068e0:	e050      	b.n	8006984 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e04f      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80068e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d147      	bne.n	8006984 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80068f4:	f7ff fc1c 	bl	8006130 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80068f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006906:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006908:	f7fe f994 	bl	8004c34 <HAL_GetTick>
 800690c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800690e:	e008      	b.n	8006922 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006910:	f7fe f990 	bl	8004c34 <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	2b02      	cmp	r3, #2
 800691c:	d901      	bls.n	8006922 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800691e:	2303      	movs	r3, #3
 8006920:	e031      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006922:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800692c:	2b00      	cmp	r3, #0
 800692e:	d0ef      	beq.n	8006910 <HAL_RCC_OscConfig+0x664>
 8006930:	e028      	b.n	8006984 <HAL_RCC_OscConfig+0x6d8>
 8006932:	bf00      	nop
 8006934:	58000400 	.word	0x58000400
 8006938:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	2b0c      	cmp	r3, #12
 8006940:	d01e      	beq.n	8006980 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006942:	f7ff fc04 	bl	800614e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006946:	f7fe f975 	bl	8004c34 <HAL_GetTick>
 800694a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800694c:	e008      	b.n	8006960 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800694e:	f7fe f971 	bl	8004c34 <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	2b02      	cmp	r3, #2
 800695a:	d901      	bls.n	8006960 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e012      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1ef      	bne.n	800694e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800696e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006972:	68da      	ldr	r2, [r3, #12]
 8006974:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006978:	4b05      	ldr	r3, [pc, #20]	; (8006990 <HAL_RCC_OscConfig+0x6e4>)
 800697a:	4013      	ands	r3, r2
 800697c:	60cb      	str	r3, [r1, #12]
 800697e:	e001      	b.n	8006984 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e000      	b.n	8006986 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3734      	adds	r7, #52	; 0x34
 800698a:	46bd      	mov	sp, r7
 800698c:	bd90      	pop	{r4, r7, pc}
 800698e:	bf00      	nop
 8006990:	eefefffc 	.word	0xeefefffc

08006994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d101      	bne.n	80069a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e12d      	b.n	8006c04 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069a8:	4b98      	ldr	r3, [pc, #608]	; (8006c0c <HAL_RCC_ClockConfig+0x278>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0307 	and.w	r3, r3, #7
 80069b0:	683a      	ldr	r2, [r7, #0]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d91b      	bls.n	80069ee <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069b6:	4b95      	ldr	r3, [pc, #596]	; (8006c0c <HAL_RCC_ClockConfig+0x278>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f023 0207 	bic.w	r2, r3, #7
 80069be:	4993      	ldr	r1, [pc, #588]	; (8006c0c <HAL_RCC_ClockConfig+0x278>)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069c6:	f7fe f935 	bl	8004c34 <HAL_GetTick>
 80069ca:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069cc:	e008      	b.n	80069e0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80069ce:	f7fe f931 	bl	8004c34 <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d901      	bls.n	80069e0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e111      	b.n	8006c04 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069e0:	4b8a      	ldr	r3, [pc, #552]	; (8006c0c <HAL_RCC_ClockConfig+0x278>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0307 	and.w	r3, r3, #7
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d1ef      	bne.n	80069ce <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0302 	and.w	r3, r3, #2
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d016      	beq.n	8006a28 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7ff fafb 	bl	8005ffa <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a04:	f7fe f916 	bl	8004c34 <HAL_GetTick>
 8006a08:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006a0a:	e008      	b.n	8006a1e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a0c:	f7fe f912 	bl	8004c34 <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	2b02      	cmp	r3, #2
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e0f2      	b.n	8006c04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8006a1e:	f7ff fbe8 	bl	80061f2 <LL_RCC_IsActiveFlag_HPRE>
 8006a22:	4603      	mov	r3, r0
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d0f1      	beq.n	8006a0c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0320 	and.w	r3, r3, #32
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d016      	beq.n	8006a62 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7ff faf2 	bl	8006022 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a3e:	f7fe f8f9 	bl	8004c34 <HAL_GetTick>
 8006a42:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006a44:	e008      	b.n	8006a58 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a46:	f7fe f8f5 	bl	8004c34 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d901      	bls.n	8006a58 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e0d5      	b.n	8006c04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8006a58:	f7ff fbdd 	bl	8006216 <LL_RCC_IsActiveFlag_C2HPRE>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d0f1      	beq.n	8006a46 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d016      	beq.n	8006a9c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7ff faeb 	bl	800604e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006a78:	f7fe f8dc 	bl	8004c34 <HAL_GetTick>
 8006a7c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006a80:	f7fe f8d8 	bl	8004c34 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e0b8      	b.n	8006c04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8006a92:	f7ff fbd3 	bl	800623c <LL_RCC_IsActiveFlag_SHDHPRE>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0f1      	beq.n	8006a80 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0304 	and.w	r3, r3, #4
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d016      	beq.n	8006ad6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	4618      	mov	r0, r3
 8006aae:	f7ff fae5 	bl	800607c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006ab2:	f7fe f8bf 	bl	8004c34 <HAL_GetTick>
 8006ab6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006ab8:	e008      	b.n	8006acc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006aba:	f7fe f8bb 	bl	8004c34 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d901      	bls.n	8006acc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e09b      	b.n	8006c04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8006acc:	f7ff fbc9 	bl	8006262 <LL_RCC_IsActiveFlag_PPRE1>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d0f1      	beq.n	8006aba <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0308 	and.w	r3, r3, #8
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d017      	beq.n	8006b12 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7ff fadb 	bl	80060a4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8006aee:	f7fe f8a1 	bl	8004c34 <HAL_GetTick>
 8006af2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006af4:	e008      	b.n	8006b08 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8006af6:	f7fe f89d 	bl	8004c34 <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d901      	bls.n	8006b08 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e07d      	b.n	8006c04 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8006b08:	f7ff fbbd 	bl	8006286 <LL_RCC_IsActiveFlag_PPRE2>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d0f1      	beq.n	8006af6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d043      	beq.n	8006ba6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d106      	bne.n	8006b34 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8006b26:	f7ff f87b 	bl	8005c20 <LL_RCC_HSE_IsReady>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d11e      	bne.n	8006b6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e067      	b.n	8006c04 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	2b03      	cmp	r3, #3
 8006b3a:	d106      	bne.n	8006b4a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8006b3c:	f7ff fb16 	bl	800616c <LL_RCC_PLL_IsReady>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d113      	bne.n	8006b6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e05c      	b.n	8006c04 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d106      	bne.n	8006b60 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8006b52:	f7ff f9e3 	bl	8005f1c <LL_RCC_MSI_IsReady>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d108      	bne.n	8006b6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e051      	b.n	8006c04 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8006b60:	f7ff f88e 	bl	8005c80 <LL_RCC_HSI_IsReady>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e04a      	b.n	8006c04 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7ff fa21 	bl	8005fba <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b78:	f7fe f85c 	bl	8004c34 <HAL_GetTick>
 8006b7c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b7e:	e00a      	b.n	8006b96 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b80:	f7fe f858 	bl	8004c34 <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e036      	b.n	8006c04 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b96:	f7ff fa24 	bl	8005fe2 <LL_RCC_GetSysClkSource>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d1ec      	bne.n	8006b80 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ba6:	4b19      	ldr	r3, [pc, #100]	; (8006c0c <HAL_RCC_ClockConfig+0x278>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0307 	and.w	r3, r3, #7
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d21b      	bcs.n	8006bec <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bb4:	4b15      	ldr	r3, [pc, #84]	; (8006c0c <HAL_RCC_ClockConfig+0x278>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f023 0207 	bic.w	r2, r3, #7
 8006bbc:	4913      	ldr	r1, [pc, #76]	; (8006c0c <HAL_RCC_ClockConfig+0x278>)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bc4:	f7fe f836 	bl	8004c34 <HAL_GetTick>
 8006bc8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bca:	e008      	b.n	8006bde <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006bcc:	f7fe f832 	bl	8004c34 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d901      	bls.n	8006bde <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8006bda:	2303      	movs	r3, #3
 8006bdc:	e012      	b.n	8006c04 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bde:	4b0b      	ldr	r3, [pc, #44]	; (8006c0c <HAL_RCC_ClockConfig+0x278>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0307 	and.w	r3, r3, #7
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d1ef      	bne.n	8006bcc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006bec:	f000 f87e 	bl	8006cec <HAL_RCC_GetHCLKFreq>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	4a07      	ldr	r2, [pc, #28]	; (8006c10 <HAL_RCC_ClockConfig+0x27c>)
 8006bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8006bf6:	f7fe f829 	bl	8004c4c <HAL_GetTickPrio>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7fd ffcb 	bl	8004b98 <HAL_InitTick>
 8006c02:	4603      	mov	r3, r0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3710      	adds	r7, #16
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	58004000 	.word	0x58004000
 8006c10:	20000038 	.word	0x20000038

08006c14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c14:	b590      	push	{r4, r7, lr}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c1a:	f7ff f9e2 	bl	8005fe2 <LL_RCC_GetSysClkSource>
 8006c1e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10a      	bne.n	8006c3c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006c26:	f7ff f99e 	bl	8005f66 <LL_RCC_MSI_GetRange>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	091b      	lsrs	r3, r3, #4
 8006c2e:	f003 030f 	and.w	r3, r3, #15
 8006c32:	4a2b      	ldr	r2, [pc, #172]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c38:	60fb      	str	r3, [r7, #12]
 8006c3a:	e04b      	b.n	8006cd4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d102      	bne.n	8006c48 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006c42:	4b28      	ldr	r3, [pc, #160]	; (8006ce4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c44:	60fb      	str	r3, [r7, #12]
 8006c46:	e045      	b.n	8006cd4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b08      	cmp	r3, #8
 8006c4c:	d10a      	bne.n	8006c64 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006c4e:	f7fe ffb7 	bl	8005bc0 <LL_RCC_HSE_IsEnabledDiv2>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d102      	bne.n	8006c5e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8006c58:	4b22      	ldr	r3, [pc, #136]	; (8006ce4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c5a:	60fb      	str	r3, [r7, #12]
 8006c5c:	e03a      	b.n	8006cd4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8006c5e:	4b22      	ldr	r3, [pc, #136]	; (8006ce8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006c60:	60fb      	str	r3, [r7, #12]
 8006c62:	e037      	b.n	8006cd4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8006c64:	f7ff fab9 	bl	80061da <LL_RCC_PLL_GetMainSource>
 8006c68:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d003      	beq.n	8006c78 <HAL_RCC_GetSysClockFreq+0x64>
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	2b03      	cmp	r3, #3
 8006c74:	d003      	beq.n	8006c7e <HAL_RCC_GetSysClockFreq+0x6a>
 8006c76:	e00d      	b.n	8006c94 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8006c78:	4b1a      	ldr	r3, [pc, #104]	; (8006ce4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c7a:	60bb      	str	r3, [r7, #8]
        break;
 8006c7c:	e015      	b.n	8006caa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006c7e:	f7fe ff9f 	bl	8005bc0 <LL_RCC_HSE_IsEnabledDiv2>
 8006c82:	4603      	mov	r3, r0
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d102      	bne.n	8006c8e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8006c88:	4b16      	ldr	r3, [pc, #88]	; (8006ce4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8006c8a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8006c8c:	e00d      	b.n	8006caa <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8006c8e:	4b16      	ldr	r3, [pc, #88]	; (8006ce8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8006c90:	60bb      	str	r3, [r7, #8]
        break;
 8006c92:	e00a      	b.n	8006caa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8006c94:	f7ff f967 	bl	8005f66 <LL_RCC_MSI_GetRange>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	091b      	lsrs	r3, r3, #4
 8006c9c:	f003 030f 	and.w	r3, r3, #15
 8006ca0:	4a0f      	ldr	r2, [pc, #60]	; (8006ce0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8006ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ca6:	60bb      	str	r3, [r7, #8]
        break;
 8006ca8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8006caa:	f7ff fa71 	bl	8006190 <LL_RCC_PLL_GetN>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	fb03 f402 	mul.w	r4, r3, r2
 8006cb6:	f7ff fa84 	bl	80061c2 <LL_RCC_PLL_GetDivider>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	091b      	lsrs	r3, r3, #4
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	fbb4 f4f3 	udiv	r4, r4, r3
 8006cc4:	f7ff fa71 	bl	80061aa <LL_RCC_PLL_GetR>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	0f5b      	lsrs	r3, r3, #29
 8006ccc:	3301      	adds	r3, #1
 8006cce:	fbb4 f3f3 	udiv	r3, r4, r3
 8006cd2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd90      	pop	{r4, r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	08011528 	.word	0x08011528
 8006ce4:	00f42400 	.word	0x00f42400
 8006ce8:	01e84800 	.word	0x01e84800

08006cec <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cec:	b598      	push	{r3, r4, r7, lr}
 8006cee:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006cf0:	f7ff ff90 	bl	8006c14 <HAL_RCC_GetSysClockFreq>
 8006cf4:	4604      	mov	r4, r0
 8006cf6:	f7ff f9e9 	bl	80060cc <LL_RCC_GetAHBPrescaler>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	091b      	lsrs	r3, r3, #4
 8006cfe:	f003 030f 	and.w	r3, r3, #15
 8006d02:	4a03      	ldr	r2, [pc, #12]	; (8006d10 <HAL_RCC_GetHCLKFreq+0x24>)
 8006d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d08:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	bd98      	pop	{r3, r4, r7, pc}
 8006d10:	080114c8 	.word	0x080114c8

08006d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d14:	b598      	push	{r3, r4, r7, lr}
 8006d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006d18:	f7ff ffe8 	bl	8006cec <HAL_RCC_GetHCLKFreq>
 8006d1c:	4604      	mov	r4, r0
 8006d1e:	f7ff f9ef 	bl	8006100 <LL_RCC_GetAPB1Prescaler>
 8006d22:	4603      	mov	r3, r0
 8006d24:	0a1b      	lsrs	r3, r3, #8
 8006d26:	f003 0307 	and.w	r3, r3, #7
 8006d2a:	4a04      	ldr	r2, [pc, #16]	; (8006d3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8006d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d30:	f003 031f 	and.w	r3, r3, #31
 8006d34:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	bd98      	pop	{r3, r4, r7, pc}
 8006d3c:	08011508 	.word	0x08011508

08006d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d40:	b598      	push	{r3, r4, r7, lr}
 8006d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8006d44:	f7ff ffd2 	bl	8006cec <HAL_RCC_GetHCLKFreq>
 8006d48:	4604      	mov	r4, r0
 8006d4a:	f7ff f9e5 	bl	8006118 <LL_RCC_GetAPB2Prescaler>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	0adb      	lsrs	r3, r3, #11
 8006d52:	f003 0307 	and.w	r3, r3, #7
 8006d56:	4a04      	ldr	r2, [pc, #16]	; (8006d68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d5c:	f003 031f 	and.w	r3, r3, #31
 8006d60:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	bd98      	pop	{r3, r4, r7, pc}
 8006d68:	08011508 	.word	0x08011508

08006d6c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8006d6c:	b590      	push	{r4, r7, lr}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2bb0      	cmp	r3, #176	; 0xb0
 8006d78:	d903      	bls.n	8006d82 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8006d7a:	4b15      	ldr	r3, [pc, #84]	; (8006dd0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	e007      	b.n	8006d92 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	091b      	lsrs	r3, r3, #4
 8006d86:	f003 030f 	and.w	r3, r3, #15
 8006d8a:	4a11      	ldr	r2, [pc, #68]	; (8006dd0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8006d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d90:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8006d92:	f7ff f9a7 	bl	80060e4 <LL_RCC_GetAHB4Prescaler>
 8006d96:	4603      	mov	r3, r0
 8006d98:	091b      	lsrs	r3, r3, #4
 8006d9a:	f003 030f 	and.w	r3, r3, #15
 8006d9e:	4a0d      	ldr	r2, [pc, #52]	; (8006dd4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8006da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006daa:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	4a0a      	ldr	r2, [pc, #40]	; (8006dd8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8006db0:	fba2 2303 	umull	r2, r3, r2, r3
 8006db4:	0c9c      	lsrs	r4, r3, #18
 8006db6:	f7fe fef5 	bl	8005ba4 <HAL_PWREx_GetVoltageRange>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f000 f80c 	bl	8006ddc <RCC_SetFlashLatency>
 8006dc4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd90      	pop	{r4, r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	08011528 	.word	0x08011528
 8006dd4:	080114c8 	.word	0x080114c8
 8006dd8:	431bde83 	.word	0x431bde83

08006ddc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8006ddc:	b590      	push	{r4, r7, lr}
 8006dde:	b093      	sub	sp, #76	; 0x4c
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8006de6:	4b37      	ldr	r3, [pc, #220]	; (8006ec4 <RCC_SetFlashLatency+0xe8>)
 8006de8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8006dec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006dee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8006df2:	4a35      	ldr	r2, [pc, #212]	; (8006ec8 <RCC_SetFlashLatency+0xec>)
 8006df4:	f107 031c 	add.w	r3, r7, #28
 8006df8:	ca07      	ldmia	r2, {r0, r1, r2}
 8006dfa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8006dfe:	4b33      	ldr	r3, [pc, #204]	; (8006ecc <RCC_SetFlashLatency+0xf0>)
 8006e00:	f107 040c 	add.w	r4, r7, #12
 8006e04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006e06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e14:	d11a      	bne.n	8006e4c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006e16:	2300      	movs	r3, #0
 8006e18:	643b      	str	r3, [r7, #64]	; 0x40
 8006e1a:	e013      	b.n	8006e44 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e1e:	009b      	lsls	r3, r3, #2
 8006e20:	3348      	adds	r3, #72	; 0x48
 8006e22:	443b      	add	r3, r7
 8006e24:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d807      	bhi.n	8006e3e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	3348      	adds	r3, #72	; 0x48
 8006e34:	443b      	add	r3, r7
 8006e36:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006e3a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006e3c:	e020      	b.n	8006e80 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e40:	3301      	adds	r3, #1
 8006e42:	643b      	str	r3, [r7, #64]	; 0x40
 8006e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d9e8      	bls.n	8006e1c <RCC_SetFlashLatency+0x40>
 8006e4a:	e019      	b.n	8006e80 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e50:	e013      	b.n	8006e7a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8006e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	3348      	adds	r3, #72	; 0x48
 8006e58:	443b      	add	r3, r7
 8006e5a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d807      	bhi.n	8006e74 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	3348      	adds	r3, #72	; 0x48
 8006e6a:	443b      	add	r3, r7
 8006e6c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8006e70:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8006e72:	e005      	b.n	8006e80 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e76:	3301      	adds	r3, #1
 8006e78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d9e8      	bls.n	8006e52 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8006e80:	4b13      	ldr	r3, [pc, #76]	; (8006ed0 <RCC_SetFlashLatency+0xf4>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f023 0207 	bic.w	r2, r3, #7
 8006e88:	4911      	ldr	r1, [pc, #68]	; (8006ed0 <RCC_SetFlashLatency+0xf4>)
 8006e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006e90:	f7fd fed0 	bl	8004c34 <HAL_GetTick>
 8006e94:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006e96:	e008      	b.n	8006eaa <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006e98:	f7fd fecc 	bl	8004c34 <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d901      	bls.n	8006eaa <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e007      	b.n	8006eba <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006eaa:	4b09      	ldr	r3, [pc, #36]	; (8006ed0 <RCC_SetFlashLatency+0xf4>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0307 	and.w	r3, r3, #7
 8006eb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d1ef      	bne.n	8006e98 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	374c      	adds	r7, #76	; 0x4c
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd90      	pop	{r4, r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	08011300 	.word	0x08011300
 8006ec8:	08011310 	.word	0x08011310
 8006ecc:	0801131c 	.word	0x0801131c
 8006ed0:	58004000 	.word	0x58004000

08006ed4 <LL_RCC_LSE_IsEnabled>:
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8006ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d101      	bne.n	8006eec <LL_RCC_LSE_IsEnabled+0x18>
 8006ee8:	2301      	movs	r3, #1
 8006eea:	e000      	b.n	8006eee <LL_RCC_LSE_IsEnabled+0x1a>
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <LL_RCC_LSE_IsReady>:
{
 8006ef8:	b480      	push	{r7}
 8006efa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d101      	bne.n	8006f10 <LL_RCC_LSE_IsReady+0x18>
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e000      	b.n	8006f12 <LL_RCC_LSE_IsReady+0x1a>
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <LL_RCC_SetRFWKPClockSource>:
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8006f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8006f3c:	bf00      	nop
 8006f3e:	370c      	adds	r7, #12
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <LL_RCC_SetSMPSClockSource>:
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8006f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f56:	f023 0203 	bic.w	r2, r3, #3
 8006f5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4313      	orrs	r3, r2
 8006f62:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <LL_RCC_SetSMPSPrescaler>:
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8006f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <LL_RCC_SetUSARTClockSource>:
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8006fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fa8:	f023 0203 	bic.w	r2, r3, #3
 8006fac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <LL_RCC_SetLPUARTClockSource>:
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006fd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <LL_RCC_SetI2CClockSource>:
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006ffc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	091b      	lsrs	r3, r3, #4
 8007004:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007008:	43db      	mvns	r3, r3
 800700a:	401a      	ands	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	011b      	lsls	r3, r3, #4
 8007010:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8007014:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007018:	4313      	orrs	r3, r2
 800701a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800701e:	bf00      	nop
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr

0800702a <LL_RCC_SetLPTIMClockSource>:
{
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007036:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	0c1b      	lsrs	r3, r3, #16
 800703e:	041b      	lsls	r3, r3, #16
 8007040:	43db      	mvns	r3, r3
 8007042:	401a      	ands	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	041b      	lsls	r3, r3, #16
 8007048:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800704c:	4313      	orrs	r3, r2
 800704e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007052:	bf00      	nop
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr

0800705e <LL_RCC_SetSAIClockSource>:
{
 800705e:	b480      	push	{r7}
 8007060:	b083      	sub	sp, #12
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800706a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800706e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007072:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4313      	orrs	r3, r2
 800707a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800707e:	bf00      	nop
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr

0800708a <LL_RCC_SetRNGClockSource>:
{
 800708a:	b480      	push	{r7}
 800708c:	b083      	sub	sp, #12
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800709a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800709e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80070aa:	bf00      	nop
 80070ac:	370c      	adds	r7, #12
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr

080070b6 <LL_RCC_SetCLK48ClockSource>:
{
 80070b6:	b480      	push	{r7}
 80070b8:	b083      	sub	sp, #12
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80070be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80070c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80070ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80070d6:	bf00      	nop
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <LL_RCC_SetUSBClockSource>:
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b082      	sub	sp, #8
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7ff ffe3 	bl	80070b6 <LL_RCC_SetCLK48ClockSource>
}
 80070f0:	bf00      	nop
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <LL_RCC_SetADCClockSource>:
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007100:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007108:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800710c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4313      	orrs	r3, r2
 8007114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <LL_RCC_SetRTCClockSource>:
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800712c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007134:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007138:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4313      	orrs	r3, r2
 8007140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <LL_RCC_GetRTCClockSource>:
{
 8007150:	b480      	push	{r7}
 8007152:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800715c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8007160:	4618      	mov	r0, r3
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <LL_RCC_ForceBackupDomainReset>:
{
 800716a:	b480      	push	{r7}
 800716c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800716e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007176:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800717a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800717e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007182:	bf00      	nop
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <LL_RCC_ReleaseBackupDomainReset>:
{
 800718c:	b480      	push	{r7}
 800718e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007198:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800719c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80071a4:	bf00      	nop
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <LL_RCC_PLLSAI1_Enable>:
{
 80071ae:	b480      	push	{r7}
 80071b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80071b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80071c0:	6013      	str	r3, [r2, #0]
}
 80071c2:	bf00      	nop
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <LL_RCC_PLLSAI1_Disable>:
{
 80071cc:	b480      	push	{r7}
 80071ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80071d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80071da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80071de:	6013      	str	r3, [r2, #0]
}
 80071e0:	bf00      	nop
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <LL_RCC_PLLSAI1_IsReady>:
{
 80071ea:	b480      	push	{r7}
 80071ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80071ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80071fc:	d101      	bne.n	8007202 <LL_RCC_PLLSAI1_IsReady+0x18>
 80071fe:	2301      	movs	r3, #1
 8007200:	e000      	b.n	8007204 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b088      	sub	sp, #32
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007216:	2300      	movs	r3, #0
 8007218:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800721a:	2300      	movs	r3, #0
 800721c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007226:	2b00      	cmp	r3, #0
 8007228:	d034      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007232:	d021      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007234:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007238:	d81b      	bhi.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800723a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800723e:	d01d      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007240:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007244:	d815      	bhi.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00b      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800724a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800724e:	d110      	bne.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800725a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800725e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007260:	e00d      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	3304      	adds	r3, #4
 8007266:	4618      	mov	r0, r3
 8007268:	f000 f947 	bl	80074fa <RCCEx_PLLSAI1_ConfigNP>
 800726c:	4603      	mov	r3, r0
 800726e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007270:	e005      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	77fb      	strb	r3, [r7, #31]
        break;
 8007276:	e002      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007278:	bf00      	nop
 800727a:	e000      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800727c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800727e:	7ffb      	ldrb	r3, [r7, #31]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d105      	bne.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007288:	4618      	mov	r0, r3
 800728a:	f7ff fee8 	bl	800705e <LL_RCC_SetSAIClockSource>
 800728e:	e001      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007290:	7ffb      	ldrb	r3, [r7, #31]
 8007292:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800729c:	2b00      	cmp	r3, #0
 800729e:	d046      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80072a0:	f7ff ff56 	bl	8007150 <LL_RCC_GetRTCClockSource>
 80072a4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072aa:	69ba      	ldr	r2, [r7, #24]
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d03c      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80072b0:	f7fe fc68 	bl	8005b84 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d105      	bne.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072be:	4618      	mov	r0, r3
 80072c0:	f7ff ff30 	bl	8007124 <LL_RCC_SetRTCClockSource>
 80072c4:	e02e      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80072c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ce:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80072d0:	f7ff ff4b 	bl	800716a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80072d4:	f7ff ff5a 	bl	800718c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e2:	4313      	orrs	r3, r2
 80072e4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80072e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80072f0:	f7ff fdf0 	bl	8006ed4 <LL_RCC_LSE_IsEnabled>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d114      	bne.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80072fa:	f7fd fc9b 	bl	8004c34 <HAL_GetTick>
 80072fe:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007300:	e00b      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007302:	f7fd fc97 	bl	8004c34 <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007310:	4293      	cmp	r3, r2
 8007312:	d902      	bls.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	77fb      	strb	r3, [r7, #31]
              break;
 8007318:	e004      	b.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800731a:	f7ff fded 	bl	8006ef8 <LL_RCC_LSE_IsReady>
 800731e:	4603      	mov	r3, r0
 8007320:	2b01      	cmp	r3, #1
 8007322:	d1ee      	bne.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007324:	7ffb      	ldrb	r3, [r7, #31]
 8007326:	77bb      	strb	r3, [r7, #30]
 8007328:	e001      	b.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800732a:	7ffb      	ldrb	r3, [r7, #31]
 800732c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f003 0301 	and.w	r3, r3, #1
 8007336:	2b00      	cmp	r3, #0
 8007338:	d004      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	4618      	mov	r0, r3
 8007340:	f7ff fe2a 	bl	8006f98 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 0302 	and.w	r3, r3, #2
 800734c:	2b00      	cmp	r3, #0
 800734e:	d004      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	69db      	ldr	r3, [r3, #28]
 8007354:	4618      	mov	r0, r3
 8007356:	f7ff fe35 	bl	8006fc4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 0310 	and.w	r3, r3, #16
 8007362:	2b00      	cmp	r3, #0
 8007364:	d004      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800736a:	4618      	mov	r0, r3
 800736c:	f7ff fe5d 	bl	800702a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0320 	and.w	r3, r3, #32
 8007378:	2b00      	cmp	r3, #0
 800737a:	d004      	beq.n	8007386 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007380:	4618      	mov	r0, r3
 8007382:	f7ff fe52 	bl	800702a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f003 0304 	and.w	r3, r3, #4
 800738e:	2b00      	cmp	r3, #0
 8007390:	d004      	beq.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	4618      	mov	r0, r3
 8007398:	f7ff fe2a 	bl	8006ff0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f003 0308 	and.w	r3, r3, #8
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d004      	beq.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	4618      	mov	r0, r3
 80073ae:	f7ff fe1f 	bl	8006ff0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d022      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7ff fe8d 	bl	80070e2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073d0:	d107      	bne.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80073d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073e0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073ea:	d10b      	bne.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	3304      	adds	r3, #4
 80073f0:	4618      	mov	r0, r3
 80073f2:	f000 f8dd 	bl	80075b0 <RCCEx_PLLSAI1_ConfigNQ>
 80073f6:	4603      	mov	r3, r0
 80073f8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80073fa:	7ffb      	ldrb	r3, [r7, #31]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d001      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8007400:	7ffb      	ldrb	r3, [r7, #31]
 8007402:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800740c:	2b00      	cmp	r3, #0
 800740e:	d02b      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007418:	d008      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007422:	d003      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007428:	2b00      	cmp	r3, #0
 800742a:	d105      	bne.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007430:	4618      	mov	r0, r3
 8007432:	f7ff fe2a 	bl	800708a <LL_RCC_SetRNGClockSource>
 8007436:	e00a      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	2000      	movs	r0, #0
 8007444:	f7ff fe21 	bl	800708a <LL_RCC_SetRNGClockSource>
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f7ff fe34 	bl	80070b6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007452:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007456:	d107      	bne.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8007458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007466:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007470:	2b00      	cmp	r3, #0
 8007472:	d022      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007478:	4618      	mov	r0, r3
 800747a:	f7ff fe3d 	bl	80070f8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007482:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007486:	d107      	bne.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007496:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074a0:	d10b      	bne.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	3304      	adds	r3, #4
 80074a6:	4618      	mov	r0, r3
 80074a8:	f000 f8dd 	bl	8007666 <RCCEx_PLLSAI1_ConfigNR>
 80074ac:	4603      	mov	r3, r0
 80074ae:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80074b0:	7ffb      	ldrb	r3, [r7, #31]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d001      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80074b6:	7ffb      	ldrb	r3, [r7, #31]
 80074b8:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d004      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7ff fd26 	bl	8006f1c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d009      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff fd45 	bl	8006f70 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7ff fd2c 	bl	8006f48 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80074f0:	7fbb      	ldrb	r3, [r7, #30]
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	3720      	adds	r7, #32
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80074fa:	b580      	push	{r7, lr}
 80074fc:	b084      	sub	sp, #16
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007506:	f7ff fe61 	bl	80071cc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800750a:	f7fd fb93 	bl	8004c34 <HAL_GetTick>
 800750e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007510:	e009      	b.n	8007526 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007512:	f7fd fb8f 	bl	8004c34 <HAL_GetTick>
 8007516:	4602      	mov	r2, r0
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	1ad3      	subs	r3, r2, r3
 800751c:	2b02      	cmp	r3, #2
 800751e:	d902      	bls.n	8007526 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8007520:	2303      	movs	r3, #3
 8007522:	73fb      	strb	r3, [r7, #15]
      break;
 8007524:	e004      	b.n	8007530 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007526:	f7ff fe60 	bl	80071ea <LL_RCC_PLLSAI1_IsReady>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1f0      	bne.n	8007512 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8007530:	7bfb      	ldrb	r3, [r7, #15]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d137      	bne.n	80075a6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8007536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	021b      	lsls	r3, r3, #8
 8007546:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800754a:	4313      	orrs	r3, r2
 800754c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800754e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007560:	4313      	orrs	r3, r2
 8007562:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8007564:	f7ff fe23 	bl	80071ae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007568:	f7fd fb64 	bl	8004c34 <HAL_GetTick>
 800756c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800756e:	e009      	b.n	8007584 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007570:	f7fd fb60 	bl	8004c34 <HAL_GetTick>
 8007574:	4602      	mov	r2, r0
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	1ad3      	subs	r3, r2, r3
 800757a:	2b02      	cmp	r3, #2
 800757c:	d902      	bls.n	8007584 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	73fb      	strb	r3, [r7, #15]
        break;
 8007582:	e004      	b.n	800758e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007584:	f7ff fe31 	bl	80071ea <LL_RCC_PLLSAI1_IsReady>
 8007588:	4603      	mov	r3, r0
 800758a:	2b01      	cmp	r3, #1
 800758c:	d1f0      	bne.n	8007570 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800758e:	7bfb      	ldrb	r3, [r7, #15]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d108      	bne.n	80075a6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007598:	691a      	ldr	r2, [r3, #16]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075a2:	4313      	orrs	r3, r2
 80075a4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80075a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3710      	adds	r7, #16
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075b8:	2300      	movs	r3, #0
 80075ba:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80075bc:	f7ff fe06 	bl	80071cc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80075c0:	f7fd fb38 	bl	8004c34 <HAL_GetTick>
 80075c4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80075c6:	e009      	b.n	80075dc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80075c8:	f7fd fb34 	bl	8004c34 <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d902      	bls.n	80075dc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	73fb      	strb	r3, [r7, #15]
      break;
 80075da:	e004      	b.n	80075e6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80075dc:	f7ff fe05 	bl	80071ea <LL_RCC_PLLSAI1_IsReady>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d1f0      	bne.n	80075c8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d137      	bne.n	800765c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80075ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	021b      	lsls	r3, r3, #8
 80075fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007600:	4313      	orrs	r3, r2
 8007602:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8007604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007608:	691b      	ldr	r3, [r3, #16]
 800760a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007616:	4313      	orrs	r3, r2
 8007618:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800761a:	f7ff fdc8 	bl	80071ae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800761e:	f7fd fb09 	bl	8004c34 <HAL_GetTick>
 8007622:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8007624:	e009      	b.n	800763a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007626:	f7fd fb05 	bl	8004c34 <HAL_GetTick>
 800762a:	4602      	mov	r2, r0
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	1ad3      	subs	r3, r2, r3
 8007630:	2b02      	cmp	r3, #2
 8007632:	d902      	bls.n	800763a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8007634:	2303      	movs	r3, #3
 8007636:	73fb      	strb	r3, [r7, #15]
        break;
 8007638:	e004      	b.n	8007644 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800763a:	f7ff fdd6 	bl	80071ea <LL_RCC_PLLSAI1_IsReady>
 800763e:	4603      	mov	r3, r0
 8007640:	2b01      	cmp	r3, #1
 8007642:	d1f0      	bne.n	8007626 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8007644:	7bfb      	ldrb	r3, [r7, #15]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d108      	bne.n	800765c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800764a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800764e:	691a      	ldr	r2, [r3, #16]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007658:	4313      	orrs	r3, r2
 800765a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800765c:	7bfb      	ldrb	r3, [r7, #15]
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b084      	sub	sp, #16
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8007672:	f7ff fdab 	bl	80071cc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007676:	f7fd fadd 	bl	8004c34 <HAL_GetTick>
 800767a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800767c:	e009      	b.n	8007692 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800767e:	f7fd fad9 	bl	8004c34 <HAL_GetTick>
 8007682:	4602      	mov	r2, r0
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	2b02      	cmp	r3, #2
 800768a:	d902      	bls.n	8007692 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	73fb      	strb	r3, [r7, #15]
      break;
 8007690:	e004      	b.n	800769c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8007692:	f7ff fdaa 	bl	80071ea <LL_RCC_PLLSAI1_IsReady>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1f0      	bne.n	800767e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800769c:	7bfb      	ldrb	r3, [r7, #15]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d137      	bne.n	8007712 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80076a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	021b      	lsls	r3, r3, #8
 80076b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076b6:	4313      	orrs	r3, r2
 80076b8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80076ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80076cc:	4313      	orrs	r3, r2
 80076ce:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80076d0:	f7ff fd6d 	bl	80071ae <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076d4:	f7fd faae 	bl	8004c34 <HAL_GetTick>
 80076d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80076da:	e009      	b.n	80076f0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80076dc:	f7fd faaa 	bl	8004c34 <HAL_GetTick>
 80076e0:	4602      	mov	r2, r0
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d902      	bls.n	80076f0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80076ea:	2303      	movs	r3, #3
 80076ec:	73fb      	strb	r3, [r7, #15]
        break;
 80076ee:	e004      	b.n	80076fa <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80076f0:	f7ff fd7b 	bl	80071ea <LL_RCC_PLLSAI1_IsReady>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d1f0      	bne.n	80076dc <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d108      	bne.n	8007712 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8007700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007704:	691a      	ldr	r2, [r3, #16]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800770e:	4313      	orrs	r3, r2
 8007710:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8007712:	7bfb      	ldrb	r3, [r7, #15]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e027      	b.n	800777e <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	7a5b      	ldrb	r3, [r3, #9]
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b00      	cmp	r3, #0
 8007736:	d105      	bne.n	8007744 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7fb fc80 	bl	8003044 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2202      	movs	r2, #2
 8007748:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f023 0120 	bic.w	r1, r3, #32
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	430a      	orrs	r2, r1
 800775e:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	681a      	ldr	r2, [r3, #0]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f042 0204 	orr.w	r2, r2, #4
 800776e:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3708      	adds	r7, #8
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
	...

08007788 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e09f      	b.n	80078da <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d106      	bne.n	80077b4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f7fb fc72 	bl	8003098 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2202      	movs	r2, #2
 80077b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80077bc:	4b49      	ldr	r3, [pc, #292]	; (80078e4 <HAL_RTC_Init+0x15c>)
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	f003 0310 	and.w	r3, r3, #16
 80077c4:	2b10      	cmp	r3, #16
 80077c6:	d07e      	beq.n	80078c6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	22ca      	movs	r2, #202	; 0xca
 80077ce:	625a      	str	r2, [r3, #36]	; 0x24
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2253      	movs	r2, #83	; 0x53
 80077d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 f8ab 	bl	8007934 <RTC_EnterInitMode>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d00a      	beq.n	80077fa <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	22ff      	movs	r2, #255	; 0xff
 80077ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2204      	movs	r2, #4
 80077f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	73fb      	strb	r3, [r7, #15]
 80077f8:	e067      	b.n	80078ca <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	6812      	ldr	r2, [r2, #0]
 8007804:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800780c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	6899      	ldr	r1, [r3, #8]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685a      	ldr	r2, [r3, #4]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	431a      	orrs	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	431a      	orrs	r2, r3
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	430a      	orrs	r2, r1
 800782a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	68d2      	ldr	r2, [r2, #12]
 8007834:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6919      	ldr	r1, [r3, #16]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	041a      	lsls	r2, r3, #16
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	430a      	orrs	r2, r1
 8007848:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68da      	ldr	r2, [r3, #12]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007858:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f022 0203 	bic.w	r2, r2, #3
 8007868:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	69da      	ldr	r2, [r3, #28]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	695b      	ldr	r3, [r3, #20]
 8007878:	431a      	orrs	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	430a      	orrs	r2, r1
 8007880:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f003 0320 	and.w	r3, r3, #32
 800788c:	2b00      	cmp	r3, #0
 800788e:	d113      	bne.n	80078b8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f829 	bl	80078e8 <HAL_RTC_WaitForSynchro>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00d      	beq.n	80078b8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	22ff      	movs	r2, #255	; 0xff
 80078a2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2204      	movs	r2, #4
 80078a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e010      	b.n	80078da <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	22ff      	movs	r2, #255	; 0xff
 80078be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80078c0:	2300      	movs	r3, #0
 80078c2:	73fb      	strb	r3, [r7, #15]
 80078c4:	e001      	b.n	80078ca <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80078c6:	2300      	movs	r3, #0
 80078c8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d103      	bne.n	80078d8 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	40002800 	.word	0x40002800

080078e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68da      	ldr	r2, [r3, #12]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80078fe:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007900:	f7fd f998 	bl	8004c34 <HAL_GetTick>
 8007904:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007906:	e009      	b.n	800791c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007908:	f7fd f994 	bl	8004c34 <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007916:	d901      	bls.n	800791c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8007918:	2303      	movs	r3, #3
 800791a:	e007      	b.n	800792c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	f003 0320 	and.w	r3, r3, #32
 8007926:	2b00      	cmp	r3, #0
 8007928:	d0ee      	beq.n	8007908 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007946:	2b00      	cmp	r3, #0
 8007948:	d119      	bne.n	800797e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f04f 32ff 	mov.w	r2, #4294967295
 8007952:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007954:	f7fd f96e 	bl	8004c34 <HAL_GetTick>
 8007958:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800795a:	e009      	b.n	8007970 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800795c:	f7fd f96a 	bl	8004c34 <HAL_GetTick>
 8007960:	4602      	mov	r2, r0
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800796a:	d901      	bls.n	8007970 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	e007      	b.n	8007980 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800797a:	2b00      	cmp	r3, #0
 800797c:	d0ee      	beq.n	800795c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f893 3020 	ldrb.w	r3, [r3, #32]
 800799a:	2b01      	cmp	r3, #1
 800799c:	d101      	bne.n	80079a2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800799e:	2302      	movs	r3, #2
 80079a0:	e0a8      	b.n	8007af4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2202      	movs	r2, #2
 80079ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	22ca      	movs	r2, #202	; 0xca
 80079b8:	625a      	str	r2, [r3, #36]	; 0x24
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2253      	movs	r2, #83	; 0x53
 80079c0:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d020      	beq.n	8007a12 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80079d0:	f7fd f930 	bl	8004c34 <HAL_GetTick>
 80079d4:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80079d6:	e015      	b.n	8007a04 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80079d8:	f7fd f92c 	bl	8004c34 <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079e6:	d90d      	bls.n	8007a04 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	22ff      	movs	r2, #255	; 0xff
 80079ee:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2203      	movs	r2, #3
 80079f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e077      	b.n	8007af4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	f003 0304 	and.w	r3, r3, #4
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1e2      	bne.n	80079d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	689a      	ldr	r2, [r3, #8]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a20:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8007a32:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007a34:	f7fd f8fe 	bl	8004c34 <HAL_GetTick>
 8007a38:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007a3a:	e015      	b.n	8007a68 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007a3c:	f7fd f8fa 	bl	8004c34 <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a4a:	d90d      	bls.n	8007a68 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	22ff      	movs	r2, #255	; 0xff
 8007a52:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2203      	movs	r2, #3
 8007a58:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8007a64:	2303      	movs	r3, #3
 8007a66:	e045      	b.n	8007af4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	f003 0304 	and.w	r3, r3, #4
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d0e2      	beq.n	8007a3c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	689a      	ldr	r2, [r3, #8]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f022 0207 	bic.w	r2, r2, #7
 8007a8c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	6899      	ldr	r1, [r3, #8]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007a9e:	4b17      	ldr	r3, [pc, #92]	; (8007afc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007aa4:	4a15      	ldr	r2, [pc, #84]	; (8007afc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007aa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007aaa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8007aae:	4b13      	ldr	r3, [pc, #76]	; (8007afc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a12      	ldr	r2, [pc, #72]	; (8007afc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8007ab4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ab8:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	689a      	ldr	r2, [r3, #8]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ac8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	689a      	ldr	r2, [r3, #8]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ad8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	22ff      	movs	r2, #255	; 0xff
 8007ae0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3718      	adds	r7, #24
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}
 8007afc:	58000800 	.word	0x58000800

08007b00 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d101      	bne.n	8007b16 <HAL_RTCEx_EnableBypassShadow+0x16>
 8007b12:	2302      	movs	r3, #2
 8007b14:	e024      	b.n	8007b60 <HAL_RTCEx_EnableBypassShadow+0x60>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2202      	movs	r2, #2
 8007b22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	22ca      	movs	r2, #202	; 0xca
 8007b2c:	625a      	str	r2, [r3, #36]	; 0x24
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	2253      	movs	r2, #83	; 0x53
 8007b34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	689a      	ldr	r2, [r3, #8]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f042 0220 	orr.w	r2, r2, #32
 8007b44:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	22ff      	movs	r2, #255	; 0xff
 8007b4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	370c      	adds	r7, #12
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <LL_RCC_GetUSARTClockSource>:
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b78:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4013      	ands	r3, r2
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <LL_RCC_GetLPUARTClockSource>:
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b98:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4013      	ands	r3, r2
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e042      	b.n	8007c44 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d106      	bne.n	8007bd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f7fb f943 	bl	8002e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2224      	movs	r2, #36	; 0x24
 8007bda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f022 0201 	bic.w	r2, r2, #1
 8007bec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d002      	beq.n	8007bfc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fe60 	bl	80088bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fc35 	bl	800846c <UART_SetConfig>
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d101      	bne.n	8007c0c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e01b      	b.n	8007c44 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	685a      	ldr	r2, [r3, #4]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	689a      	ldr	r2, [r3, #8]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f042 0201 	orr.w	r2, r2, #1
 8007c3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 fedf 	bl	8008a00 <UART_CheckIdleState>
 8007c42:	4603      	mov	r3, r0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b08a      	sub	sp, #40	; 0x28
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	4613      	mov	r3, r2
 8007c58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c60:	2b20      	cmp	r3, #32
 8007c62:	d137      	bne.n	8007cd4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d002      	beq.n	8007c70 <HAL_UART_Receive_IT+0x24>
 8007c6a:	88fb      	ldrh	r3, [r7, #6]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e030      	b.n	8007cd6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2200      	movs	r2, #0
 8007c78:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a18      	ldr	r2, [pc, #96]	; (8007ce0 <HAL_UART_Receive_IT+0x94>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d01f      	beq.n	8007cc4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d018      	beq.n	8007cc4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	e853 3f00 	ldrex	r3, [r3]
 8007c9e:	613b      	str	r3, [r7, #16]
   return(result);
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	461a      	mov	r2, r3
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	623b      	str	r3, [r7, #32]
 8007cb2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb4:	69f9      	ldr	r1, [r7, #28]
 8007cb6:	6a3a      	ldr	r2, [r7, #32]
 8007cb8:	e841 2300 	strex	r3, r2, [r1]
 8007cbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1e6      	bne.n	8007c92 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007cc4:	88fb      	ldrh	r3, [r7, #6]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	68b9      	ldr	r1, [r7, #8]
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f000 ffb0 	bl	8008c30 <UART_Start_Receive_IT>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	e000      	b.n	8007cd6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007cd4:	2302      	movs	r3, #2
  }
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3728      	adds	r7, #40	; 0x28
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	40008000 	.word	0x40008000

08007ce4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b08a      	sub	sp, #40	; 0x28
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cf8:	2b20      	cmp	r3, #32
 8007cfa:	d167      	bne.n	8007dcc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d002      	beq.n	8007d08 <HAL_UART_Transmit_DMA+0x24>
 8007d02:	88fb      	ldrh	r3, [r7, #6]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e060      	b.n	8007dce <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	88fa      	ldrh	r2, [r7, #6]
 8007d16:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	88fa      	ldrh	r2, [r7, #6]
 8007d1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2200      	movs	r2, #0
 8007d26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2221      	movs	r2, #33	; 0x21
 8007d2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d028      	beq.n	8007d8c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d3e:	4a26      	ldr	r2, [pc, #152]	; (8007dd8 <HAL_UART_Transmit_DMA+0xf4>)
 8007d40:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d46:	4a25      	ldr	r2, [pc, #148]	; (8007ddc <HAL_UART_Transmit_DMA+0xf8>)
 8007d48:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d4e:	4a24      	ldr	r2, [pc, #144]	; (8007de0 <HAL_UART_Transmit_DMA+0xfc>)
 8007d50:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d56:	2200      	movs	r2, #0
 8007d58:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d62:	4619      	mov	r1, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	3328      	adds	r3, #40	; 0x28
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	88fb      	ldrh	r3, [r7, #6]
 8007d6e:	f7fd f9d3 	bl	8005118 <HAL_DMA_Start_IT>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d009      	beq.n	8007d8c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2210      	movs	r2, #16
 8007d7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2220      	movs	r2, #32
 8007d84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8007d88:	2301      	movs	r3, #1
 8007d8a:	e020      	b.n	8007dce <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2240      	movs	r2, #64	; 0x40
 8007d92:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	3308      	adds	r3, #8
 8007d9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	e853 3f00 	ldrex	r3, [r3]
 8007da2:	613b      	str	r3, [r7, #16]
   return(result);
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007daa:	627b      	str	r3, [r7, #36]	; 0x24
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3308      	adds	r3, #8
 8007db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007db4:	623a      	str	r2, [r7, #32]
 8007db6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db8:	69f9      	ldr	r1, [r7, #28]
 8007dba:	6a3a      	ldr	r2, [r7, #32]
 8007dbc:	e841 2300 	strex	r3, r2, [r1]
 8007dc0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d1e5      	bne.n	8007d94 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	e000      	b.n	8007dce <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007dcc:	2302      	movs	r3, #2
  }
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3728      	adds	r7, #40	; 0x28
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	08008fc3 	.word	0x08008fc3
 8007ddc:	0800905d 	.word	0x0800905d
 8007de0:	08009079 	.word	0x08009079

08007de4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b0ba      	sub	sp, #232	; 0xe8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	69db      	ldr	r3, [r3, #28]
 8007df2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007e0e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007e12:	4013      	ands	r3, r2
 8007e14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007e18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d11b      	bne.n	8007e58 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e24:	f003 0320 	and.w	r3, r3, #32
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d015      	beq.n	8007e58 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e30:	f003 0320 	and.w	r3, r3, #32
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d105      	bne.n	8007e44 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d009      	beq.n	8007e58 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 82e3 	beq.w	8008414 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	4798      	blx	r3
      }
      return;
 8007e56:	e2dd      	b.n	8008414 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007e58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f000 8123 	beq.w	80080a8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007e62:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007e66:	4b8d      	ldr	r3, [pc, #564]	; (800809c <HAL_UART_IRQHandler+0x2b8>)
 8007e68:	4013      	ands	r3, r2
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d106      	bne.n	8007e7c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007e6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007e72:	4b8b      	ldr	r3, [pc, #556]	; (80080a0 <HAL_UART_IRQHandler+0x2bc>)
 8007e74:	4013      	ands	r3, r2
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f000 8116 	beq.w	80080a8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e80:	f003 0301 	and.w	r3, r3, #1
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d011      	beq.n	8007eac <HAL_UART_IRQHandler+0xc8>
 8007e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00b      	beq.n	8007eac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ea2:	f043 0201 	orr.w	r2, r3, #1
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb0:	f003 0302 	and.w	r3, r3, #2
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d011      	beq.n	8007edc <HAL_UART_IRQHandler+0xf8>
 8007eb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ebc:	f003 0301 	and.w	r3, r3, #1
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00b      	beq.n	8007edc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2202      	movs	r2, #2
 8007eca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ed2:	f043 0204 	orr.w	r2, r3, #4
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee0:	f003 0304 	and.w	r3, r3, #4
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d011      	beq.n	8007f0c <HAL_UART_IRQHandler+0x128>
 8007ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007eec:	f003 0301 	and.w	r3, r3, #1
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00b      	beq.n	8007f0c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2204      	movs	r2, #4
 8007efa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f02:	f043 0202 	orr.w	r2, r3, #2
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f10:	f003 0308 	and.w	r3, r3, #8
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d017      	beq.n	8007f48 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f1c:	f003 0320 	and.w	r3, r3, #32
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d105      	bne.n	8007f30 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007f24:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007f28:	4b5c      	ldr	r3, [pc, #368]	; (800809c <HAL_UART_IRQHandler+0x2b8>)
 8007f2a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00b      	beq.n	8007f48 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2208      	movs	r2, #8
 8007f36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f3e:	f043 0208 	orr.w	r2, r3, #8
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d012      	beq.n	8007f7a <HAL_UART_IRQHandler+0x196>
 8007f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d00c      	beq.n	8007f7a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f70:	f043 0220 	orr.w	r2, r3, #32
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f000 8249 	beq.w	8008418 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f8a:	f003 0320 	and.w	r3, r3, #32
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d013      	beq.n	8007fba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f96:	f003 0320 	and.w	r3, r3, #32
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d105      	bne.n	8007faa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d007      	beq.n	8007fba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d003      	beq.n	8007fba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fce:	2b40      	cmp	r3, #64	; 0x40
 8007fd0:	d005      	beq.n	8007fde <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007fd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007fd6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d054      	beq.n	8008088 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 ff89 	bl	8008ef6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fee:	2b40      	cmp	r3, #64	; 0x40
 8007ff0:	d146      	bne.n	8008080 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	3308      	adds	r3, #8
 8007ff8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ffc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008000:	e853 3f00 	ldrex	r3, [r3]
 8008004:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008008:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800800c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008010:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	3308      	adds	r3, #8
 800801a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800801e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008022:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008026:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800802a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800802e:	e841 2300 	strex	r3, r2, [r1]
 8008032:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008036:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1d9      	bne.n	8007ff2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008044:	2b00      	cmp	r3, #0
 8008046:	d017      	beq.n	8008078 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800804e:	4a15      	ldr	r2, [pc, #84]	; (80080a4 <HAL_UART_IRQHandler+0x2c0>)
 8008050:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008058:	4618      	mov	r0, r3
 800805a:	f7fd f937 	bl	80052cc <HAL_DMA_Abort_IT>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d019      	beq.n	8008098 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800806a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8008072:	4610      	mov	r0, r2
 8008074:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008076:	e00f      	b.n	8008098 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f9e1 	bl	8008440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800807e:	e00b      	b.n	8008098 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 f9dd 	bl	8008440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008086:	e007      	b.n	8008098 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f9d9 	bl	8008440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8008096:	e1bf      	b.n	8008418 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008098:	bf00      	nop
    return;
 800809a:	e1bd      	b.n	8008418 <HAL_UART_IRQHandler+0x634>
 800809c:	10000001 	.word	0x10000001
 80080a0:	04000120 	.word	0x04000120
 80080a4:	080090f9 	.word	0x080090f9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	f040 8153 	bne.w	8008358 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80080b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080b6:	f003 0310 	and.w	r3, r3, #16
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f000 814c 	beq.w	8008358 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80080c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080c4:	f003 0310 	and.w	r3, r3, #16
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 8145 	beq.w	8008358 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	2210      	movs	r2, #16
 80080d4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e0:	2b40      	cmp	r3, #64	; 0x40
 80080e2:	f040 80bb 	bne.w	800825c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80080f4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 818f 	beq.w	800841c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008104:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008108:	429a      	cmp	r2, r3
 800810a:	f080 8187 	bcs.w	800841c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008114:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0320 	and.w	r3, r3, #32
 8008126:	2b00      	cmp	r3, #0
 8008128:	f040 8087 	bne.w	800823a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008134:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008138:	e853 3f00 	ldrex	r3, [r3]
 800813c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008140:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008148:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	461a      	mov	r2, r3
 8008152:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008156:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800815a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008162:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008166:	e841 2300 	strex	r3, r2, [r1]
 800816a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800816e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1da      	bne.n	800812c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	3308      	adds	r3, #8
 800817c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008180:	e853 3f00 	ldrex	r3, [r3]
 8008184:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008188:	f023 0301 	bic.w	r3, r3, #1
 800818c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	3308      	adds	r3, #8
 8008196:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800819a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800819e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80081a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80081a6:	e841 2300 	strex	r3, r2, [r1]
 80081aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80081ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1e1      	bne.n	8008176 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	3308      	adds	r3, #8
 80081b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081bc:	e853 3f00 	ldrex	r3, [r3]
 80081c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80081c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	3308      	adds	r3, #8
 80081d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80081d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80081d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80081dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80081de:	e841 2300 	strex	r3, r2, [r1]
 80081e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80081e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1e3      	bne.n	80081b2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2220      	movs	r2, #32
 80081ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008200:	e853 3f00 	ldrex	r3, [r3]
 8008204:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008206:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008208:	f023 0310 	bic.w	r3, r3, #16
 800820c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	461a      	mov	r2, r3
 8008216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800821a:	65bb      	str	r3, [r7, #88]	; 0x58
 800821c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800821e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008220:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008222:	e841 2300 	strex	r3, r2, [r1]
 8008226:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008228:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1e4      	bne.n	80081f8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008234:	4618      	mov	r0, r3
 8008236:	f7fc ffea 	bl	800520e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2202      	movs	r2, #2
 800823e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800824c:	b29b      	uxth	r3, r3
 800824e:	1ad3      	subs	r3, r2, r3
 8008250:	b29b      	uxth	r3, r3
 8008252:	4619      	mov	r1, r3
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f000 f8fd 	bl	8008454 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800825a:	e0df      	b.n	800841c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008268:	b29b      	uxth	r3, r3
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008276:	b29b      	uxth	r3, r3
 8008278:	2b00      	cmp	r3, #0
 800827a:	f000 80d1 	beq.w	8008420 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800827e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008282:	2b00      	cmp	r3, #0
 8008284:	f000 80cc 	beq.w	8008420 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008290:	e853 3f00 	ldrex	r3, [r3]
 8008294:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008298:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800829c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	461a      	mov	r2, r3
 80082a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80082aa:	647b      	str	r3, [r7, #68]	; 0x44
 80082ac:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80082b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80082b2:	e841 2300 	strex	r3, r2, [r1]
 80082b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80082b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1e4      	bne.n	8008288 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	3308      	adds	r3, #8
 80082c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	e853 3f00 	ldrex	r3, [r3]
 80082cc:	623b      	str	r3, [r7, #32]
   return(result);
 80082ce:	6a3b      	ldr	r3, [r7, #32]
 80082d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082d4:	f023 0301 	bic.w	r3, r3, #1
 80082d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	3308      	adds	r3, #8
 80082e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80082e6:	633a      	str	r2, [r7, #48]	; 0x30
 80082e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ee:	e841 2300 	strex	r3, r2, [r1]
 80082f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80082f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1e1      	bne.n	80082be <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2220      	movs	r2, #32
 80082fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	e853 3f00 	ldrex	r3, [r3]
 800831a:	60fb      	str	r3, [r7, #12]
   return(result);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f023 0310 	bic.w	r3, r3, #16
 8008322:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	461a      	mov	r2, r3
 800832c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008330:	61fb      	str	r3, [r7, #28]
 8008332:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008334:	69b9      	ldr	r1, [r7, #24]
 8008336:	69fa      	ldr	r2, [r7, #28]
 8008338:	e841 2300 	strex	r3, r2, [r1]
 800833c:	617b      	str	r3, [r7, #20]
   return(result);
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d1e4      	bne.n	800830e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2202      	movs	r2, #2
 8008348:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800834a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800834e:	4619      	mov	r1, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f87f 	bl	8008454 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008356:	e063      	b.n	8008420 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800835c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008360:	2b00      	cmp	r3, #0
 8008362:	d00e      	beq.n	8008382 <HAL_UART_IRQHandler+0x59e>
 8008364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008368:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800836c:	2b00      	cmp	r3, #0
 800836e:	d008      	beq.n	8008382 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008378:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f001 fc1a 	bl	8009bb4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008380:	e051      	b.n	8008426 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800838a:	2b00      	cmp	r3, #0
 800838c:	d014      	beq.n	80083b8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800838e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008396:	2b00      	cmp	r3, #0
 8008398:	d105      	bne.n	80083a6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800839a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800839e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d008      	beq.n	80083b8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d03a      	beq.n	8008424 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	4798      	blx	r3
    }
    return;
 80083b6:	e035      	b.n	8008424 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80083b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d009      	beq.n	80083d8 <HAL_UART_IRQHandler+0x5f4>
 80083c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d003      	beq.n	80083d8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 fea7 	bl	8009124 <UART_EndTransmit_IT>
    return;
 80083d6:	e026      	b.n	8008426 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80083d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d009      	beq.n	80083f8 <HAL_UART_IRQHandler+0x614>
 80083e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d003      	beq.n	80083f8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f001 fbf3 	bl	8009bdc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80083f6:	e016      	b.n	8008426 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80083f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008400:	2b00      	cmp	r3, #0
 8008402:	d010      	beq.n	8008426 <HAL_UART_IRQHandler+0x642>
 8008404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008408:	2b00      	cmp	r3, #0
 800840a:	da0c      	bge.n	8008426 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f001 fbdb 	bl	8009bc8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008412:	e008      	b.n	8008426 <HAL_UART_IRQHandler+0x642>
      return;
 8008414:	bf00      	nop
 8008416:	e006      	b.n	8008426 <HAL_UART_IRQHandler+0x642>
    return;
 8008418:	bf00      	nop
 800841a:	e004      	b.n	8008426 <HAL_UART_IRQHandler+0x642>
      return;
 800841c:	bf00      	nop
 800841e:	e002      	b.n	8008426 <HAL_UART_IRQHandler+0x642>
      return;
 8008420:	bf00      	nop
 8008422:	e000      	b.n	8008426 <HAL_UART_IRQHandler+0x642>
    return;
 8008424:	bf00      	nop
  }
}
 8008426:	37e8      	adds	r7, #232	; 0xe8
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	460b      	mov	r3, r1
 800845e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800846c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008470:	b08c      	sub	sp, #48	; 0x30
 8008472:	af00      	add	r7, sp, #0
 8008474:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008476:	2300      	movs	r3, #0
 8008478:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	689a      	ldr	r2, [r3, #8]
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	691b      	ldr	r3, [r3, #16]
 8008484:	431a      	orrs	r2, r3
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	431a      	orrs	r2, r3
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	69db      	ldr	r3, [r3, #28]
 8008490:	4313      	orrs	r3, r2
 8008492:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	4baf      	ldr	r3, [pc, #700]	; (8008758 <UART_SetConfig+0x2ec>)
 800849c:	4013      	ands	r3, r2
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	6812      	ldr	r2, [r2, #0]
 80084a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084a4:	430b      	orrs	r3, r1
 80084a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	68da      	ldr	r2, [r3, #12]
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	430a      	orrs	r2, r1
 80084bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	699b      	ldr	r3, [r3, #24]
 80084c2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4aa4      	ldr	r2, [pc, #656]	; (800875c <UART_SetConfig+0x2f0>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d004      	beq.n	80084d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084d4:	4313      	orrs	r3, r2
 80084d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80084e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	6812      	ldr	r2, [r2, #0]
 80084ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084ec:	430b      	orrs	r3, r1
 80084ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f6:	f023 010f 	bic.w	r1, r3, #15
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	430a      	orrs	r2, r1
 8008504:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a95      	ldr	r2, [pc, #596]	; (8008760 <UART_SetConfig+0x2f4>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d125      	bne.n	800855c <UART_SetConfig+0xf0>
 8008510:	2003      	movs	r0, #3
 8008512:	f7ff fb2b 	bl	8007b6c <LL_RCC_GetUSARTClockSource>
 8008516:	4603      	mov	r3, r0
 8008518:	2b03      	cmp	r3, #3
 800851a:	d81b      	bhi.n	8008554 <UART_SetConfig+0xe8>
 800851c:	a201      	add	r2, pc, #4	; (adr r2, 8008524 <UART_SetConfig+0xb8>)
 800851e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008522:	bf00      	nop
 8008524:	08008535 	.word	0x08008535
 8008528:	08008545 	.word	0x08008545
 800852c:	0800853d 	.word	0x0800853d
 8008530:	0800854d 	.word	0x0800854d
 8008534:	2301      	movs	r3, #1
 8008536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800853a:	e042      	b.n	80085c2 <UART_SetConfig+0x156>
 800853c:	2302      	movs	r3, #2
 800853e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008542:	e03e      	b.n	80085c2 <UART_SetConfig+0x156>
 8008544:	2304      	movs	r3, #4
 8008546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800854a:	e03a      	b.n	80085c2 <UART_SetConfig+0x156>
 800854c:	2308      	movs	r3, #8
 800854e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008552:	e036      	b.n	80085c2 <UART_SetConfig+0x156>
 8008554:	2310      	movs	r3, #16
 8008556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800855a:	e032      	b.n	80085c2 <UART_SetConfig+0x156>
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a7e      	ldr	r2, [pc, #504]	; (800875c <UART_SetConfig+0x2f0>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d12a      	bne.n	80085bc <UART_SetConfig+0x150>
 8008566:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800856a:	f7ff fb0f 	bl	8007b8c <LL_RCC_GetLPUARTClockSource>
 800856e:	4603      	mov	r3, r0
 8008570:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008574:	d01a      	beq.n	80085ac <UART_SetConfig+0x140>
 8008576:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800857a:	d81b      	bhi.n	80085b4 <UART_SetConfig+0x148>
 800857c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008580:	d00c      	beq.n	800859c <UART_SetConfig+0x130>
 8008582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008586:	d815      	bhi.n	80085b4 <UART_SetConfig+0x148>
 8008588:	2b00      	cmp	r3, #0
 800858a:	d003      	beq.n	8008594 <UART_SetConfig+0x128>
 800858c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008590:	d008      	beq.n	80085a4 <UART_SetConfig+0x138>
 8008592:	e00f      	b.n	80085b4 <UART_SetConfig+0x148>
 8008594:	2300      	movs	r3, #0
 8008596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800859a:	e012      	b.n	80085c2 <UART_SetConfig+0x156>
 800859c:	2302      	movs	r3, #2
 800859e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085a2:	e00e      	b.n	80085c2 <UART_SetConfig+0x156>
 80085a4:	2304      	movs	r3, #4
 80085a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085aa:	e00a      	b.n	80085c2 <UART_SetConfig+0x156>
 80085ac:	2308      	movs	r3, #8
 80085ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085b2:	e006      	b.n	80085c2 <UART_SetConfig+0x156>
 80085b4:	2310      	movs	r3, #16
 80085b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ba:	e002      	b.n	80085c2 <UART_SetConfig+0x156>
 80085bc:	2310      	movs	r3, #16
 80085be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a65      	ldr	r2, [pc, #404]	; (800875c <UART_SetConfig+0x2f0>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	f040 8097 	bne.w	80086fc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80085d2:	2b08      	cmp	r3, #8
 80085d4:	d823      	bhi.n	800861e <UART_SetConfig+0x1b2>
 80085d6:	a201      	add	r2, pc, #4	; (adr r2, 80085dc <UART_SetConfig+0x170>)
 80085d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085dc:	08008601 	.word	0x08008601
 80085e0:	0800861f 	.word	0x0800861f
 80085e4:	08008609 	.word	0x08008609
 80085e8:	0800861f 	.word	0x0800861f
 80085ec:	0800860f 	.word	0x0800860f
 80085f0:	0800861f 	.word	0x0800861f
 80085f4:	0800861f 	.word	0x0800861f
 80085f8:	0800861f 	.word	0x0800861f
 80085fc:	08008617 	.word	0x08008617
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008600:	f7fe fb88 	bl	8006d14 <HAL_RCC_GetPCLK1Freq>
 8008604:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008606:	e010      	b.n	800862a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008608:	4b56      	ldr	r3, [pc, #344]	; (8008764 <UART_SetConfig+0x2f8>)
 800860a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800860c:	e00d      	b.n	800862a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800860e:	f7fe fb01 	bl	8006c14 <HAL_RCC_GetSysClockFreq>
 8008612:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008614:	e009      	b.n	800862a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800861a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800861c:	e005      	b.n	800862a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800861e:	2300      	movs	r3, #0
 8008620:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008628:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	2b00      	cmp	r3, #0
 800862e:	f000 812b 	beq.w	8008888 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008636:	4a4c      	ldr	r2, [pc, #304]	; (8008768 <UART_SetConfig+0x2fc>)
 8008638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800863c:	461a      	mov	r2, r3
 800863e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008640:	fbb3 f3f2 	udiv	r3, r3, r2
 8008644:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	685a      	ldr	r2, [r3, #4]
 800864a:	4613      	mov	r3, r2
 800864c:	005b      	lsls	r3, r3, #1
 800864e:	4413      	add	r3, r2
 8008650:	69ba      	ldr	r2, [r7, #24]
 8008652:	429a      	cmp	r2, r3
 8008654:	d305      	bcc.n	8008662 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800865c:	69ba      	ldr	r2, [r7, #24]
 800865e:	429a      	cmp	r2, r3
 8008660:	d903      	bls.n	800866a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008668:	e10e      	b.n	8008888 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866c:	2200      	movs	r2, #0
 800866e:	60bb      	str	r3, [r7, #8]
 8008670:	60fa      	str	r2, [r7, #12]
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008676:	4a3c      	ldr	r2, [pc, #240]	; (8008768 <UART_SetConfig+0x2fc>)
 8008678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800867c:	b29b      	uxth	r3, r3
 800867e:	2200      	movs	r2, #0
 8008680:	603b      	str	r3, [r7, #0]
 8008682:	607a      	str	r2, [r7, #4]
 8008684:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008688:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800868c:	f7f8 fa74 	bl	8000b78 <__aeabi_uldivmod>
 8008690:	4602      	mov	r2, r0
 8008692:	460b      	mov	r3, r1
 8008694:	4610      	mov	r0, r2
 8008696:	4619      	mov	r1, r3
 8008698:	f04f 0200 	mov.w	r2, #0
 800869c:	f04f 0300 	mov.w	r3, #0
 80086a0:	020b      	lsls	r3, r1, #8
 80086a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80086a6:	0202      	lsls	r2, r0, #8
 80086a8:	6979      	ldr	r1, [r7, #20]
 80086aa:	6849      	ldr	r1, [r1, #4]
 80086ac:	0849      	lsrs	r1, r1, #1
 80086ae:	2000      	movs	r0, #0
 80086b0:	460c      	mov	r4, r1
 80086b2:	4605      	mov	r5, r0
 80086b4:	eb12 0804 	adds.w	r8, r2, r4
 80086b8:	eb43 0905 	adc.w	r9, r3, r5
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	469a      	mov	sl, r3
 80086c4:	4693      	mov	fp, r2
 80086c6:	4652      	mov	r2, sl
 80086c8:	465b      	mov	r3, fp
 80086ca:	4640      	mov	r0, r8
 80086cc:	4649      	mov	r1, r9
 80086ce:	f7f8 fa53 	bl	8000b78 <__aeabi_uldivmod>
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	4613      	mov	r3, r2
 80086d8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80086da:	6a3b      	ldr	r3, [r7, #32]
 80086dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086e0:	d308      	bcc.n	80086f4 <UART_SetConfig+0x288>
 80086e2:	6a3b      	ldr	r3, [r7, #32]
 80086e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086e8:	d204      	bcs.n	80086f4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	6a3a      	ldr	r2, [r7, #32]
 80086f0:	60da      	str	r2, [r3, #12]
 80086f2:	e0c9      	b.n	8008888 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80086f4:	2301      	movs	r3, #1
 80086f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80086fa:	e0c5      	b.n	8008888 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	69db      	ldr	r3, [r3, #28]
 8008700:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008704:	d16d      	bne.n	80087e2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8008706:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800870a:	3b01      	subs	r3, #1
 800870c:	2b07      	cmp	r3, #7
 800870e:	d82d      	bhi.n	800876c <UART_SetConfig+0x300>
 8008710:	a201      	add	r2, pc, #4	; (adr r2, 8008718 <UART_SetConfig+0x2ac>)
 8008712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008716:	bf00      	nop
 8008718:	08008739 	.word	0x08008739
 800871c:	08008741 	.word	0x08008741
 8008720:	0800876d 	.word	0x0800876d
 8008724:	08008747 	.word	0x08008747
 8008728:	0800876d 	.word	0x0800876d
 800872c:	0800876d 	.word	0x0800876d
 8008730:	0800876d 	.word	0x0800876d
 8008734:	0800874f 	.word	0x0800874f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008738:	f7fe fb02 	bl	8006d40 <HAL_RCC_GetPCLK2Freq>
 800873c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800873e:	e01b      	b.n	8008778 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008740:	4b08      	ldr	r3, [pc, #32]	; (8008764 <UART_SetConfig+0x2f8>)
 8008742:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008744:	e018      	b.n	8008778 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008746:	f7fe fa65 	bl	8006c14 <HAL_RCC_GetSysClockFreq>
 800874a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800874c:	e014      	b.n	8008778 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800874e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008752:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008754:	e010      	b.n	8008778 <UART_SetConfig+0x30c>
 8008756:	bf00      	nop
 8008758:	cfff69f3 	.word	0xcfff69f3
 800875c:	40008000 	.word	0x40008000
 8008760:	40013800 	.word	0x40013800
 8008764:	00f42400 	.word	0x00f42400
 8008768:	08011568 	.word	0x08011568
      default:
        pclk = 0U;
 800876c:	2300      	movs	r3, #0
 800876e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008776:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877a:	2b00      	cmp	r3, #0
 800877c:	f000 8084 	beq.w	8008888 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008784:	4a4b      	ldr	r2, [pc, #300]	; (80088b4 <UART_SetConfig+0x448>)
 8008786:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800878a:	461a      	mov	r2, r3
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008792:	005a      	lsls	r2, r3, #1
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	085b      	lsrs	r3, r3, #1
 800879a:	441a      	add	r2, r3
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087a4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087a6:	6a3b      	ldr	r3, [r7, #32]
 80087a8:	2b0f      	cmp	r3, #15
 80087aa:	d916      	bls.n	80087da <UART_SetConfig+0x36e>
 80087ac:	6a3b      	ldr	r3, [r7, #32]
 80087ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087b2:	d212      	bcs.n	80087da <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087b4:	6a3b      	ldr	r3, [r7, #32]
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	f023 030f 	bic.w	r3, r3, #15
 80087bc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	085b      	lsrs	r3, r3, #1
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	f003 0307 	and.w	r3, r3, #7
 80087c8:	b29a      	uxth	r2, r3
 80087ca:	8bfb      	ldrh	r3, [r7, #30]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	8bfa      	ldrh	r2, [r7, #30]
 80087d6:	60da      	str	r2, [r3, #12]
 80087d8:	e056      	b.n	8008888 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80087e0:	e052      	b.n	8008888 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80087e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80087e6:	3b01      	subs	r3, #1
 80087e8:	2b07      	cmp	r3, #7
 80087ea:	d822      	bhi.n	8008832 <UART_SetConfig+0x3c6>
 80087ec:	a201      	add	r2, pc, #4	; (adr r2, 80087f4 <UART_SetConfig+0x388>)
 80087ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f2:	bf00      	nop
 80087f4:	08008815 	.word	0x08008815
 80087f8:	0800881d 	.word	0x0800881d
 80087fc:	08008833 	.word	0x08008833
 8008800:	08008823 	.word	0x08008823
 8008804:	08008833 	.word	0x08008833
 8008808:	08008833 	.word	0x08008833
 800880c:	08008833 	.word	0x08008833
 8008810:	0800882b 	.word	0x0800882b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008814:	f7fe fa94 	bl	8006d40 <HAL_RCC_GetPCLK2Freq>
 8008818:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800881a:	e010      	b.n	800883e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800881c:	4b26      	ldr	r3, [pc, #152]	; (80088b8 <UART_SetConfig+0x44c>)
 800881e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008820:	e00d      	b.n	800883e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008822:	f7fe f9f7 	bl	8006c14 <HAL_RCC_GetSysClockFreq>
 8008826:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008828:	e009      	b.n	800883e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800882a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800882e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008830:	e005      	b.n	800883e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8008832:	2300      	movs	r3, #0
 8008834:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008836:	2301      	movs	r3, #1
 8008838:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800883c:	bf00      	nop
    }

    if (pclk != 0U)
 800883e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008840:	2b00      	cmp	r3, #0
 8008842:	d021      	beq.n	8008888 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008848:	4a1a      	ldr	r2, [pc, #104]	; (80088b4 <UART_SetConfig+0x448>)
 800884a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800884e:	461a      	mov	r2, r3
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	fbb3 f2f2 	udiv	r2, r3, r2
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	085b      	lsrs	r3, r3, #1
 800885c:	441a      	add	r2, r3
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	fbb2 f3f3 	udiv	r3, r2, r3
 8008866:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008868:	6a3b      	ldr	r3, [r7, #32]
 800886a:	2b0f      	cmp	r3, #15
 800886c:	d909      	bls.n	8008882 <UART_SetConfig+0x416>
 800886e:	6a3b      	ldr	r3, [r7, #32]
 8008870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008874:	d205      	bcs.n	8008882 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008876:	6a3b      	ldr	r3, [r7, #32]
 8008878:	b29a      	uxth	r2, r3
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	60da      	str	r2, [r3, #12]
 8008880:	e002      	b.n	8008888 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	2201      	movs	r2, #1
 800888c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	2201      	movs	r2, #1
 8008894:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	2200      	movs	r2, #0
 800889c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	2200      	movs	r2, #0
 80088a2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80088a4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3730      	adds	r7, #48	; 0x30
 80088ac:	46bd      	mov	sp, r7
 80088ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088b2:	bf00      	nop
 80088b4:	08011568 	.word	0x08011568
 80088b8:	00f42400 	.word	0x00f42400

080088bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c8:	f003 0308 	and.w	r3, r3, #8
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00a      	beq.n	80088e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	430a      	orrs	r2, r1
 80088e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ea:	f003 0301 	and.w	r3, r3, #1
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00a      	beq.n	8008908 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	430a      	orrs	r2, r1
 8008906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890c:	f003 0302 	and.w	r3, r3, #2
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00a      	beq.n	800892a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	430a      	orrs	r2, r1
 8008928:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892e:	f003 0304 	and.w	r3, r3, #4
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00a      	beq.n	800894c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	430a      	orrs	r2, r1
 800894a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008950:	f003 0310 	and.w	r3, r3, #16
 8008954:	2b00      	cmp	r3, #0
 8008956:	d00a      	beq.n	800896e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	430a      	orrs	r2, r1
 800896c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008972:	f003 0320 	and.w	r3, r3, #32
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00a      	beq.n	8008990 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	430a      	orrs	r2, r1
 800898e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008998:	2b00      	cmp	r3, #0
 800899a:	d01a      	beq.n	80089d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	430a      	orrs	r2, r1
 80089b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089ba:	d10a      	bne.n	80089d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	430a      	orrs	r2, r1
 80089d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00a      	beq.n	80089f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	430a      	orrs	r2, r1
 80089f2:	605a      	str	r2, [r3, #4]
  }
}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b098      	sub	sp, #96	; 0x60
 8008a04:	af02      	add	r7, sp, #8
 8008a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a10:	f7fc f910 	bl	8004c34 <HAL_GetTick>
 8008a14:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f003 0308 	and.w	r3, r3, #8
 8008a20:	2b08      	cmp	r3, #8
 8008a22:	d12f      	bne.n	8008a84 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f88e 	bl	8008b54 <UART_WaitOnFlagUntilTimeout>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d022      	beq.n	8008a84 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a46:	e853 3f00 	ldrex	r3, [r3]
 8008a4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a52:	653b      	str	r3, [r7, #80]	; 0x50
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	461a      	mov	r2, r3
 8008a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a5c:	647b      	str	r3, [r7, #68]	; 0x44
 8008a5e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a64:	e841 2300 	strex	r3, r2, [r1]
 8008a68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d1e6      	bne.n	8008a3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2220      	movs	r2, #32
 8008a74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a80:	2303      	movs	r3, #3
 8008a82:	e063      	b.n	8008b4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 0304 	and.w	r3, r3, #4
 8008a8e:	2b04      	cmp	r3, #4
 8008a90:	d149      	bne.n	8008b26 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 f857 	bl	8008b54 <UART_WaitOnFlagUntilTimeout>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d03c      	beq.n	8008b26 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab4:	e853 3f00 	ldrex	r3, [r3]
 8008ab8:	623b      	str	r3, [r7, #32]
   return(result);
 8008aba:	6a3b      	ldr	r3, [r7, #32]
 8008abc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aca:	633b      	str	r3, [r7, #48]	; 0x30
 8008acc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ad2:	e841 2300 	strex	r3, r2, [r1]
 8008ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1e6      	bne.n	8008aac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	3308      	adds	r3, #8
 8008ae4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	e853 3f00 	ldrex	r3, [r3]
 8008aec:	60fb      	str	r3, [r7, #12]
   return(result);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f023 0301 	bic.w	r3, r3, #1
 8008af4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	3308      	adds	r3, #8
 8008afc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008afe:	61fa      	str	r2, [r7, #28]
 8008b00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b02:	69b9      	ldr	r1, [r7, #24]
 8008b04:	69fa      	ldr	r2, [r7, #28]
 8008b06:	e841 2300 	strex	r3, r2, [r1]
 8008b0a:	617b      	str	r3, [r7, #20]
   return(result);
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1e5      	bne.n	8008ade <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2220      	movs	r2, #32
 8008b16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b22:	2303      	movs	r3, #3
 8008b24:	e012      	b.n	8008b4c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2220      	movs	r2, #32
 8008b2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2220      	movs	r2, #32
 8008b32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b4a:	2300      	movs	r3, #0
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3758      	adds	r7, #88	; 0x58
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	603b      	str	r3, [r7, #0]
 8008b60:	4613      	mov	r3, r2
 8008b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b64:	e04f      	b.n	8008c06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b66:	69bb      	ldr	r3, [r7, #24]
 8008b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b6c:	d04b      	beq.n	8008c06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b6e:	f7fc f861 	bl	8004c34 <HAL_GetTick>
 8008b72:	4602      	mov	r2, r0
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	1ad3      	subs	r3, r2, r3
 8008b78:	69ba      	ldr	r2, [r7, #24]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d302      	bcc.n	8008b84 <UART_WaitOnFlagUntilTimeout+0x30>
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d101      	bne.n	8008b88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008b84:	2303      	movs	r3, #3
 8008b86:	e04e      	b.n	8008c26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 0304 	and.w	r3, r3, #4
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d037      	beq.n	8008c06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	2b80      	cmp	r3, #128	; 0x80
 8008b9a:	d034      	beq.n	8008c06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2b40      	cmp	r3, #64	; 0x40
 8008ba0:	d031      	beq.n	8008c06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	69db      	ldr	r3, [r3, #28]
 8008ba8:	f003 0308 	and.w	r3, r3, #8
 8008bac:	2b08      	cmp	r3, #8
 8008bae:	d110      	bne.n	8008bd2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2208      	movs	r2, #8
 8008bb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f000 f99c 	bl	8008ef6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2208      	movs	r2, #8
 8008bc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e029      	b.n	8008c26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	69db      	ldr	r3, [r3, #28]
 8008bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008be0:	d111      	bne.n	8008c06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f000 f982 	bl	8008ef6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2220      	movs	r2, #32
 8008bf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008c02:	2303      	movs	r3, #3
 8008c04:	e00f      	b.n	8008c26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	69da      	ldr	r2, [r3, #28]
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	4013      	ands	r3, r2
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	bf0c      	ite	eq
 8008c16:	2301      	moveq	r3, #1
 8008c18:	2300      	movne	r3, #0
 8008c1a:	b2db      	uxtb	r3, r3
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	79fb      	ldrb	r3, [r7, #7]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d0a0      	beq.n	8008b66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
	...

08008c30 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b0a3      	sub	sp, #140	; 0x8c
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	88fa      	ldrh	r2, [r7, #6]
 8008c48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	88fa      	ldrh	r2, [r7, #6]
 8008c50:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2200      	movs	r2, #0
 8008c58:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c62:	d10e      	bne.n	8008c82 <UART_Start_Receive_IT+0x52>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d105      	bne.n	8008c78 <UART_Start_Receive_IT+0x48>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008c72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008c76:	e02d      	b.n	8008cd4 <UART_Start_Receive_IT+0xa4>
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	22ff      	movs	r2, #255	; 0xff
 8008c7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008c80:	e028      	b.n	8008cd4 <UART_Start_Receive_IT+0xa4>
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d10d      	bne.n	8008ca6 <UART_Start_Receive_IT+0x76>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	691b      	ldr	r3, [r3, #16]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d104      	bne.n	8008c9c <UART_Start_Receive_IT+0x6c>
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	22ff      	movs	r2, #255	; 0xff
 8008c96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008c9a:	e01b      	b.n	8008cd4 <UART_Start_Receive_IT+0xa4>
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	227f      	movs	r2, #127	; 0x7f
 8008ca0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008ca4:	e016      	b.n	8008cd4 <UART_Start_Receive_IT+0xa4>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cae:	d10d      	bne.n	8008ccc <UART_Start_Receive_IT+0x9c>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	691b      	ldr	r3, [r3, #16]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d104      	bne.n	8008cc2 <UART_Start_Receive_IT+0x92>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	227f      	movs	r2, #127	; 0x7f
 8008cbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cc0:	e008      	b.n	8008cd4 <UART_Start_Receive_IT+0xa4>
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	223f      	movs	r2, #63	; 0x3f
 8008cc6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008cca:	e003      	b.n	8008cd4 <UART_Start_Receive_IT+0xa4>
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2222      	movs	r2, #34	; 0x22
 8008ce0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	3308      	adds	r3, #8
 8008cea:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cee:	e853 3f00 	ldrex	r3, [r3]
 8008cf2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008cf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008cf6:	f043 0301 	orr.w	r3, r3, #1
 8008cfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	3308      	adds	r3, #8
 8008d04:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008d08:	673a      	str	r2, [r7, #112]	; 0x70
 8008d0a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008d0e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008d10:	e841 2300 	strex	r3, r2, [r1]
 8008d14:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008d16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1e3      	bne.n	8008ce4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d24:	d14f      	bne.n	8008dc6 <UART_Start_Receive_IT+0x196>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008d2c:	88fa      	ldrh	r2, [r7, #6]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d349      	bcc.n	8008dc6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d3a:	d107      	bne.n	8008d4c <UART_Start_Receive_IT+0x11c>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d103      	bne.n	8008d4c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	4a47      	ldr	r2, [pc, #284]	; (8008e64 <UART_Start_Receive_IT+0x234>)
 8008d48:	675a      	str	r2, [r3, #116]	; 0x74
 8008d4a:	e002      	b.n	8008d52 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	4a46      	ldr	r2, [pc, #280]	; (8008e68 <UART_Start_Receive_IT+0x238>)
 8008d50:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d01a      	beq.n	8008d90 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d62:	e853 3f00 	ldrex	r3, [r3]
 8008d66:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	461a      	mov	r2, r3
 8008d78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d7e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d80:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d84:	e841 2300 	strex	r3, r2, [r1]
 8008d88:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008d8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1e4      	bne.n	8008d5a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	3308      	adds	r3, #8
 8008d96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d9a:	e853 3f00 	ldrex	r3, [r3]
 8008d9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008da6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	3308      	adds	r3, #8
 8008dae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008db0:	64ba      	str	r2, [r7, #72]	; 0x48
 8008db2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008db6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008db8:	e841 2300 	strex	r3, r2, [r1]
 8008dbc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d1e5      	bne.n	8008d90 <UART_Start_Receive_IT+0x160>
 8008dc4:	e046      	b.n	8008e54 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dce:	d107      	bne.n	8008de0 <UART_Start_Receive_IT+0x1b0>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d103      	bne.n	8008de0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	4a24      	ldr	r2, [pc, #144]	; (8008e6c <UART_Start_Receive_IT+0x23c>)
 8008ddc:	675a      	str	r2, [r3, #116]	; 0x74
 8008dde:	e002      	b.n	8008de6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	4a23      	ldr	r2, [pc, #140]	; (8008e70 <UART_Start_Receive_IT+0x240>)
 8008de4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d019      	beq.n	8008e22 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df6:	e853 3f00 	ldrex	r3, [r3]
 8008dfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008e02:	677b      	str	r3, [r7, #116]	; 0x74
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	461a      	mov	r2, r3
 8008e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e0e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e14:	e841 2300 	strex	r3, r2, [r1]
 8008e18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d1e6      	bne.n	8008dee <UART_Start_Receive_IT+0x1be>
 8008e20:	e018      	b.n	8008e54 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	e853 3f00 	ldrex	r3, [r3]
 8008e2e:	613b      	str	r3, [r7, #16]
   return(result);
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	f043 0320 	orr.w	r3, r3, #32
 8008e36:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e40:	623b      	str	r3, [r7, #32]
 8008e42:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e44:	69f9      	ldr	r1, [r7, #28]
 8008e46:	6a3a      	ldr	r2, [r7, #32]
 8008e48:	e841 2300 	strex	r3, r2, [r1]
 8008e4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e4e:	69bb      	ldr	r3, [r7, #24]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1e6      	bne.n	8008e22 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	378c      	adds	r7, #140	; 0x8c
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr
 8008e62:	bf00      	nop
 8008e64:	0800984d 	.word	0x0800984d
 8008e68:	080094ed 	.word	0x080094ed
 8008e6c:	08009335 	.word	0x08009335
 8008e70:	0800917d 	.word	0x0800917d

08008e74 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b08f      	sub	sp, #60	; 0x3c
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e82:	6a3b      	ldr	r3, [r7, #32]
 8008e84:	e853 3f00 	ldrex	r3, [r3]
 8008e88:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e8a:	69fb      	ldr	r3, [r7, #28]
 8008e8c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008e90:	637b      	str	r3, [r7, #52]	; 0x34
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	461a      	mov	r2, r3
 8008e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e9c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ea2:	e841 2300 	strex	r3, r2, [r1]
 8008ea6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1e6      	bne.n	8008e7c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	3308      	adds	r3, #8
 8008eb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	e853 3f00 	ldrex	r3, [r3]
 8008ebc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008ec4:	633b      	str	r3, [r7, #48]	; 0x30
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	3308      	adds	r3, #8
 8008ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ece:	61ba      	str	r2, [r7, #24]
 8008ed0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed2:	6979      	ldr	r1, [r7, #20]
 8008ed4:	69ba      	ldr	r2, [r7, #24]
 8008ed6:	e841 2300 	strex	r3, r2, [r1]
 8008eda:	613b      	str	r3, [r7, #16]
   return(result);
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1e5      	bne.n	8008eae <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2220      	movs	r2, #32
 8008ee6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8008eea:	bf00      	nop
 8008eec:	373c      	adds	r7, #60	; 0x3c
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ef6:	b480      	push	{r7}
 8008ef8:	b095      	sub	sp, #84	; 0x54
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f06:	e853 3f00 	ldrex	r3, [r3]
 8008f0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	461a      	mov	r2, r3
 8008f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f1c:	643b      	str	r3, [r7, #64]	; 0x40
 8008f1e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f24:	e841 2300 	strex	r3, r2, [r1]
 8008f28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d1e6      	bne.n	8008efe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	3308      	adds	r3, #8
 8008f36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f38:	6a3b      	ldr	r3, [r7, #32]
 8008f3a:	e853 3f00 	ldrex	r3, [r3]
 8008f3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f40:	69fb      	ldr	r3, [r7, #28]
 8008f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f46:	f023 0301 	bic.w	r3, r3, #1
 8008f4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	3308      	adds	r3, #8
 8008f52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f5c:	e841 2300 	strex	r3, r2, [r1]
 8008f60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d1e3      	bne.n	8008f30 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d118      	bne.n	8008fa2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	e853 3f00 	ldrex	r3, [r3]
 8008f7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	f023 0310 	bic.w	r3, r3, #16
 8008f84:	647b      	str	r3, [r7, #68]	; 0x44
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f8e:	61bb      	str	r3, [r7, #24]
 8008f90:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f92:	6979      	ldr	r1, [r7, #20]
 8008f94:	69ba      	ldr	r2, [r7, #24]
 8008f96:	e841 2300 	strex	r3, r2, [r1]
 8008f9a:	613b      	str	r3, [r7, #16]
   return(result);
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1e6      	bne.n	8008f70 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2220      	movs	r2, #32
 8008fa6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008fb6:	bf00      	nop
 8008fb8:	3754      	adds	r7, #84	; 0x54
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr

08008fc2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b090      	sub	sp, #64	; 0x40
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fce:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f003 0320 	and.w	r3, r3, #32
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d137      	bne.n	800904e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008fe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	3308      	adds	r3, #8
 8008fec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff0:	e853 3f00 	ldrex	r3, [r3]
 8008ff4:	623b      	str	r3, [r7, #32]
   return(result);
 8008ff6:	6a3b      	ldr	r3, [r7, #32]
 8008ff8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ffc:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3308      	adds	r3, #8
 8009004:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009006:	633a      	str	r2, [r7, #48]	; 0x30
 8009008:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800900c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800900e:	e841 2300 	strex	r3, r2, [r1]
 8009012:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1e5      	bne.n	8008fe6 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800901a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	e853 3f00 	ldrex	r3, [r3]
 8009026:	60fb      	str	r3, [r7, #12]
   return(result);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800902e:	637b      	str	r3, [r7, #52]	; 0x34
 8009030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	461a      	mov	r2, r3
 8009036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009038:	61fb      	str	r3, [r7, #28]
 800903a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903c:	69b9      	ldr	r1, [r7, #24]
 800903e:	69fa      	ldr	r2, [r7, #28]
 8009040:	e841 2300 	strex	r3, r2, [r1]
 8009044:	617b      	str	r3, [r7, #20]
   return(result);
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d1e6      	bne.n	800901a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800904c:	e002      	b.n	8009054 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800904e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009050:	f7f9 fc4c 	bl	80028ec <HAL_UART_TxCpltCallback>
}
 8009054:	bf00      	nop
 8009056:	3740      	adds	r7, #64	; 0x40
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}

0800905c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009068:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f7ff f9de 	bl	800842c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009070:	bf00      	nop
 8009072:	3710      	adds	r7, #16
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b086      	sub	sp, #24
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009084:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800908c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009094:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090a0:	2b80      	cmp	r3, #128	; 0x80
 80090a2:	d109      	bne.n	80090b8 <UART_DMAError+0x40>
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	2b21      	cmp	r3, #33	; 0x21
 80090a8:	d106      	bne.n	80090b8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80090b2:	6978      	ldr	r0, [r7, #20]
 80090b4:	f7ff fede 	bl	8008e74 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	689b      	ldr	r3, [r3, #8]
 80090be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c2:	2b40      	cmp	r3, #64	; 0x40
 80090c4:	d109      	bne.n	80090da <UART_DMAError+0x62>
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2b22      	cmp	r3, #34	; 0x22
 80090ca:	d106      	bne.n	80090da <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80090d4:	6978      	ldr	r0, [r7, #20]
 80090d6:	f7ff ff0e 	bl	8008ef6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090e0:	f043 0210 	orr.w	r2, r3, #16
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090ea:	6978      	ldr	r0, [r7, #20]
 80090ec:	f7ff f9a8 	bl	8008440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090f0:	bf00      	nop
 80090f2:	3718      	adds	r7, #24
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}

080090f8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009104:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2200      	movs	r2, #0
 800910a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2200      	movs	r2, #0
 8009112:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f7ff f992 	bl	8008440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800911c:	bf00      	nop
 800911e:	3710      	adds	r7, #16
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b088      	sub	sp, #32
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	e853 3f00 	ldrex	r3, [r3]
 8009138:	60bb      	str	r3, [r7, #8]
   return(result);
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009140:	61fb      	str	r3, [r7, #28]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	461a      	mov	r2, r3
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	61bb      	str	r3, [r7, #24]
 800914c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914e:	6979      	ldr	r1, [r7, #20]
 8009150:	69ba      	ldr	r2, [r7, #24]
 8009152:	e841 2300 	strex	r3, r2, [r1]
 8009156:	613b      	str	r3, [r7, #16]
   return(result);
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1e6      	bne.n	800912c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2220      	movs	r2, #32
 8009162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2200      	movs	r2, #0
 800916a:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7f9 fbbd 	bl	80028ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009172:	bf00      	nop
 8009174:	3720      	adds	r7, #32
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
	...

0800917c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b09c      	sub	sp, #112	; 0x70
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800918a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009194:	2b22      	cmp	r3, #34	; 0x22
 8009196:	f040 80be 	bne.w	8009316 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80091a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80091a8:	b2d9      	uxtb	r1, r3
 80091aa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80091ae:	b2da      	uxtb	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091b4:	400a      	ands	r2, r1
 80091b6:	b2d2      	uxtb	r2, r2
 80091b8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091be:	1c5a      	adds	r2, r3, #1
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	3b01      	subs	r3, #1
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091dc:	b29b      	uxth	r3, r3
 80091de:	2b00      	cmp	r3, #0
 80091e0:	f040 80a1 	bne.w	8009326 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091ec:	e853 3f00 	ldrex	r3, [r3]
 80091f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80091f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80091f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	461a      	mov	r2, r3
 8009200:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009202:	65bb      	str	r3, [r7, #88]	; 0x58
 8009204:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009206:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009208:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800920a:	e841 2300 	strex	r3, r2, [r1]
 800920e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009212:	2b00      	cmp	r3, #0
 8009214:	d1e6      	bne.n	80091e4 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	3308      	adds	r3, #8
 800921c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800921e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009220:	e853 3f00 	ldrex	r3, [r3]
 8009224:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009228:	f023 0301 	bic.w	r3, r3, #1
 800922c:	667b      	str	r3, [r7, #100]	; 0x64
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	3308      	adds	r3, #8
 8009234:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009236:	647a      	str	r2, [r7, #68]	; 0x44
 8009238:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800923a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800923c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800923e:	e841 2300 	strex	r3, r2, [r1]
 8009242:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1e5      	bne.n	8009216 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2220      	movs	r2, #32
 800924e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2200      	movs	r2, #0
 8009256:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2200      	movs	r2, #0
 800925c:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a33      	ldr	r2, [pc, #204]	; (8009330 <UART_RxISR_8BIT+0x1b4>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d01f      	beq.n	80092a8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009272:	2b00      	cmp	r3, #0
 8009274:	d018      	beq.n	80092a8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927e:	e853 3f00 	ldrex	r3, [r3]
 8009282:	623b      	str	r3, [r7, #32]
   return(result);
 8009284:	6a3b      	ldr	r3, [r7, #32]
 8009286:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800928a:	663b      	str	r3, [r7, #96]	; 0x60
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	461a      	mov	r2, r3
 8009292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009294:	633b      	str	r3, [r7, #48]	; 0x30
 8009296:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009298:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800929a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800929c:	e841 2300 	strex	r3, r2, [r1]
 80092a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80092a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d1e6      	bne.n	8009276 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d12e      	bne.n	800930e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	e853 3f00 	ldrex	r3, [r3]
 80092c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f023 0310 	bic.w	r3, r3, #16
 80092ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	461a      	mov	r2, r3
 80092d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092d4:	61fb      	str	r3, [r7, #28]
 80092d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d8:	69b9      	ldr	r1, [r7, #24]
 80092da:	69fa      	ldr	r2, [r7, #28]
 80092dc:	e841 2300 	strex	r3, r2, [r1]
 80092e0:	617b      	str	r3, [r7, #20]
   return(result);
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1e6      	bne.n	80092b6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	69db      	ldr	r3, [r3, #28]
 80092ee:	f003 0310 	and.w	r3, r3, #16
 80092f2:	2b10      	cmp	r3, #16
 80092f4:	d103      	bne.n	80092fe <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2210      	movs	r2, #16
 80092fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009304:	4619      	mov	r1, r3
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7ff f8a4 	bl	8008454 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800930c:	e00b      	b.n	8009326 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7f9 fabe 	bl	8002890 <HAL_UART_RxCpltCallback>
}
 8009314:	e007      	b.n	8009326 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	699a      	ldr	r2, [r3, #24]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f042 0208 	orr.w	r2, r2, #8
 8009324:	619a      	str	r2, [r3, #24]
}
 8009326:	bf00      	nop
 8009328:	3770      	adds	r7, #112	; 0x70
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	40008000 	.word	0x40008000

08009334 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b09c      	sub	sp, #112	; 0x70
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009342:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800934c:	2b22      	cmp	r3, #34	; 0x22
 800934e:	f040 80be 	bne.w	80094ce <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009358:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009360:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009362:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009366:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800936a:	4013      	ands	r3, r2
 800936c:	b29a      	uxth	r2, r3
 800936e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009370:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009376:	1c9a      	adds	r2, r3, #2
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009382:	b29b      	uxth	r3, r3
 8009384:	3b01      	subs	r3, #1
 8009386:	b29a      	uxth	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009394:	b29b      	uxth	r3, r3
 8009396:	2b00      	cmp	r3, #0
 8009398:	f040 80a1 	bne.w	80094de <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093a4:	e853 3f00 	ldrex	r3, [r3]
 80093a8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80093aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093b0:	667b      	str	r3, [r7, #100]	; 0x64
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	461a      	mov	r2, r3
 80093b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093ba:	657b      	str	r3, [r7, #84]	; 0x54
 80093bc:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80093c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80093c2:	e841 2300 	strex	r3, r2, [r1]
 80093c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80093c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1e6      	bne.n	800939c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	3308      	adds	r3, #8
 80093d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d8:	e853 3f00 	ldrex	r3, [r3]
 80093dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80093de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093e0:	f023 0301 	bic.w	r3, r3, #1
 80093e4:	663b      	str	r3, [r7, #96]	; 0x60
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	3308      	adds	r3, #8
 80093ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80093ee:	643a      	str	r2, [r7, #64]	; 0x40
 80093f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80093f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093f6:	e841 2300 	strex	r3, r2, [r1]
 80093fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d1e5      	bne.n	80093ce <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2220      	movs	r2, #32
 8009406:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a33      	ldr	r2, [pc, #204]	; (80094e8 <UART_RxISR_16BIT+0x1b4>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d01f      	beq.n	8009460 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800942a:	2b00      	cmp	r3, #0
 800942c:	d018      	beq.n	8009460 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009434:	6a3b      	ldr	r3, [r7, #32]
 8009436:	e853 3f00 	ldrex	r3, [r3]
 800943a:	61fb      	str	r3, [r7, #28]
   return(result);
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009442:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	461a      	mov	r2, r3
 800944a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800944c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800944e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009450:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009454:	e841 2300 	strex	r3, r2, [r1]
 8009458:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800945a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1e6      	bne.n	800942e <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009464:	2b01      	cmp	r3, #1
 8009466:	d12e      	bne.n	80094c6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	e853 3f00 	ldrex	r3, [r3]
 800947a:	60bb      	str	r3, [r7, #8]
   return(result);
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	f023 0310 	bic.w	r3, r3, #16
 8009482:	65bb      	str	r3, [r7, #88]	; 0x58
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	461a      	mov	r2, r3
 800948a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800948c:	61bb      	str	r3, [r7, #24]
 800948e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009490:	6979      	ldr	r1, [r7, #20]
 8009492:	69ba      	ldr	r2, [r7, #24]
 8009494:	e841 2300 	strex	r3, r2, [r1]
 8009498:	613b      	str	r3, [r7, #16]
   return(result);
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d1e6      	bne.n	800946e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	69db      	ldr	r3, [r3, #28]
 80094a6:	f003 0310 	and.w	r3, r3, #16
 80094aa:	2b10      	cmp	r3, #16
 80094ac:	d103      	bne.n	80094b6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2210      	movs	r2, #16
 80094b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80094bc:	4619      	mov	r1, r3
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f7fe ffc8 	bl	8008454 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80094c4:	e00b      	b.n	80094de <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f7f9 f9e2 	bl	8002890 <HAL_UART_RxCpltCallback>
}
 80094cc:	e007      	b.n	80094de <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	699a      	ldr	r2, [r3, #24]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f042 0208 	orr.w	r2, r2, #8
 80094dc:	619a      	str	r2, [r3, #24]
}
 80094de:	bf00      	nop
 80094e0:	3770      	adds	r7, #112	; 0x70
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	40008000 	.word	0x40008000

080094ec <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b0ac      	sub	sp, #176	; 0xb0
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80094fa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	69db      	ldr	r3, [r3, #28]
 8009504:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009522:	2b22      	cmp	r3, #34	; 0x22
 8009524:	f040 8182 	bne.w	800982c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800952e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009532:	e125      	b.n	8009780 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800953e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8009542:	b2d9      	uxtb	r1, r3
 8009544:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009548:	b2da      	uxtb	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800954e:	400a      	ands	r2, r1
 8009550:	b2d2      	uxtb	r2, r2
 8009552:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009558:	1c5a      	adds	r2, r3, #1
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009564:	b29b      	uxth	r3, r3
 8009566:	3b01      	subs	r3, #1
 8009568:	b29a      	uxth	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	69db      	ldr	r3, [r3, #28]
 8009576:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800957a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800957e:	f003 0307 	and.w	r3, r3, #7
 8009582:	2b00      	cmp	r3, #0
 8009584:	d053      	beq.n	800962e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800958a:	f003 0301 	and.w	r3, r3, #1
 800958e:	2b00      	cmp	r3, #0
 8009590:	d011      	beq.n	80095b6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009592:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00b      	beq.n	80095b6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2201      	movs	r2, #1
 80095a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095ac:	f043 0201 	orr.w	r2, r3, #1
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80095ba:	f003 0302 	and.w	r3, r3, #2
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d011      	beq.n	80095e6 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80095c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d00b      	beq.n	80095e6 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2202      	movs	r2, #2
 80095d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095dc:	f043 0204 	orr.w	r2, r3, #4
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80095ea:	f003 0304 	and.w	r3, r3, #4
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d011      	beq.n	8009616 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80095f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80095f6:	f003 0301 	and.w	r3, r3, #1
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00b      	beq.n	8009616 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2204      	movs	r2, #4
 8009604:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800960c:	f043 0202 	orr.w	r2, r3, #2
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800961c:	2b00      	cmp	r3, #0
 800961e:	d006      	beq.n	800962e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7fe ff0d 	bl	8008440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009634:	b29b      	uxth	r3, r3
 8009636:	2b00      	cmp	r3, #0
 8009638:	f040 80a2 	bne.w	8009780 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009642:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009644:	e853 3f00 	ldrex	r3, [r3]
 8009648:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800964a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800964c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009650:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	461a      	mov	r2, r3
 800965a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800965e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009660:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009662:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009664:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009666:	e841 2300 	strex	r3, r2, [r1]
 800966a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800966c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1e4      	bne.n	800963c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	3308      	adds	r3, #8
 8009678:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800967c:	e853 3f00 	ldrex	r3, [r3]
 8009680:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009688:	f023 0301 	bic.w	r3, r3, #1
 800968c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	3308      	adds	r3, #8
 8009696:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800969a:	66ba      	str	r2, [r7, #104]	; 0x68
 800969c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80096a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80096a2:	e841 2300 	strex	r3, r2, [r1]
 80096a6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80096a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d1e1      	bne.n	8009672 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2220      	movs	r2, #32
 80096b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a5f      	ldr	r2, [pc, #380]	; (8009844 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d021      	beq.n	8009710 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d01a      	beq.n	8009710 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096e2:	e853 3f00 	ldrex	r3, [r3]
 80096e6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80096e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80096ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	461a      	mov	r2, r3
 80096f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80096fc:	657b      	str	r3, [r7, #84]	; 0x54
 80096fe:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009700:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009702:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009704:	e841 2300 	strex	r3, r2, [r1]
 8009708:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800970a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1e4      	bne.n	80096da <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009714:	2b01      	cmp	r3, #1
 8009716:	d130      	bne.n	800977a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009726:	e853 3f00 	ldrex	r3, [r3]
 800972a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800972c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972e:	f023 0310 	bic.w	r3, r3, #16
 8009732:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	461a      	mov	r2, r3
 800973c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009740:	643b      	str	r3, [r7, #64]	; 0x40
 8009742:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009744:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009746:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009748:	e841 2300 	strex	r3, r2, [r1]
 800974c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800974e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1e4      	bne.n	800971e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	69db      	ldr	r3, [r3, #28]
 800975a:	f003 0310 	and.w	r3, r3, #16
 800975e:	2b10      	cmp	r3, #16
 8009760:	d103      	bne.n	800976a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2210      	movs	r2, #16
 8009768:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009770:	4619      	mov	r1, r3
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f7fe fe6e 	bl	8008454 <HAL_UARTEx_RxEventCallback>
 8009778:	e002      	b.n	8009780 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7f9 f888 	bl	8002890 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009780:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009784:	2b00      	cmp	r3, #0
 8009786:	d006      	beq.n	8009796 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009788:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800978c:	f003 0320 	and.w	r3, r3, #32
 8009790:	2b00      	cmp	r3, #0
 8009792:	f47f aecf 	bne.w	8009534 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800979c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80097a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d049      	beq.n	800983c <UART_RxISR_8BIT_FIFOEN+0x350>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80097ae:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d242      	bcs.n	800983c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	3308      	adds	r3, #8
 80097bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097be:	6a3b      	ldr	r3, [r7, #32]
 80097c0:	e853 3f00 	ldrex	r3, [r3]
 80097c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	3308      	adds	r3, #8
 80097d6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80097da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80097dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097e2:	e841 2300 	strex	r3, r2, [r1]
 80097e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1e3      	bne.n	80097b6 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4a15      	ldr	r2, [pc, #84]	; (8009848 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80097f2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	e853 3f00 	ldrex	r3, [r3]
 8009800:	60bb      	str	r3, [r7, #8]
   return(result);
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	f043 0320 	orr.w	r3, r3, #32
 8009808:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	461a      	mov	r2, r3
 8009812:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009816:	61bb      	str	r3, [r7, #24]
 8009818:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800981a:	6979      	ldr	r1, [r7, #20]
 800981c:	69ba      	ldr	r2, [r7, #24]
 800981e:	e841 2300 	strex	r3, r2, [r1]
 8009822:	613b      	str	r3, [r7, #16]
   return(result);
 8009824:	693b      	ldr	r3, [r7, #16]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1e4      	bne.n	80097f4 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800982a:	e007      	b.n	800983c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	699a      	ldr	r2, [r3, #24]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f042 0208 	orr.w	r2, r2, #8
 800983a:	619a      	str	r2, [r3, #24]
}
 800983c:	bf00      	nop
 800983e:	37b0      	adds	r7, #176	; 0xb0
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	40008000 	.word	0x40008000
 8009848:	0800917d 	.word	0x0800917d

0800984c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b0ae      	sub	sp, #184	; 0xb8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800985a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	69db      	ldr	r3, [r3, #28]
 8009864:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009882:	2b22      	cmp	r3, #34	; 0x22
 8009884:	f040 8186 	bne.w	8009b94 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800988e:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009892:	e129      	b.n	8009ae8 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80098a6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80098aa:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80098ae:	4013      	ands	r3, r2
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80098b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098bc:	1c9a      	adds	r2, r3, #2
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	3b01      	subs	r3, #1
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	69db      	ldr	r3, [r3, #28]
 80098da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80098de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80098e2:	f003 0307 	and.w	r3, r3, #7
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d053      	beq.n	8009992 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80098ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80098ee:	f003 0301 	and.w	r3, r3, #1
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d011      	beq.n	800991a <UART_RxISR_16BIT_FIFOEN+0xce>
 80098f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00b      	beq.n	800991a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2201      	movs	r2, #1
 8009908:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009910:	f043 0201 	orr.w	r2, r3, #1
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800991a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800991e:	f003 0302 	and.w	r3, r3, #2
 8009922:	2b00      	cmp	r3, #0
 8009924:	d011      	beq.n	800994a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009926:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800992a:	f003 0301 	and.w	r3, r3, #1
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00b      	beq.n	800994a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2202      	movs	r2, #2
 8009938:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009940:	f043 0204 	orr.w	r2, r3, #4
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800994a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800994e:	f003 0304 	and.w	r3, r3, #4
 8009952:	2b00      	cmp	r3, #0
 8009954:	d011      	beq.n	800997a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009956:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800995a:	f003 0301 	and.w	r3, r3, #1
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00b      	beq.n	800997a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	2204      	movs	r2, #4
 8009968:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009970:	f043 0202 	orr.w	r2, r3, #2
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009980:	2b00      	cmp	r3, #0
 8009982:	d006      	beq.n	8009992 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f7fe fd5b 	bl	8008440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009998:	b29b      	uxth	r3, r3
 800999a:	2b00      	cmp	r3, #0
 800999c:	f040 80a4 	bne.w	8009ae8 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099a8:	e853 3f00 	ldrex	r3, [r3]
 80099ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80099ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80099b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	461a      	mov	r2, r3
 80099be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80099c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80099c6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80099ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80099ce:	e841 2300 	strex	r3, r2, [r1]
 80099d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80099d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d1e2      	bne.n	80099a0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	3308      	adds	r3, #8
 80099e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099e4:	e853 3f00 	ldrex	r3, [r3]
 80099e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80099ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099f0:	f023 0301 	bic.w	r3, r3, #1
 80099f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	3308      	adds	r3, #8
 80099fe:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009a02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009a04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009a08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009a0a:	e841 2300 	strex	r3, r2, [r1]
 8009a0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009a10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1e1      	bne.n	80099da <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2220      	movs	r2, #32
 8009a1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a5f      	ldr	r2, [pc, #380]	; (8009bac <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d021      	beq.n	8009a78 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	685b      	ldr	r3, [r3, #4]
 8009a3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d01a      	beq.n	8009a78 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a4a:	e853 3f00 	ldrex	r3, [r3]
 8009a4e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009a50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009a56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	461a      	mov	r2, r3
 8009a60:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009a64:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a66:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a6c:	e841 2300 	strex	r3, r2, [r1]
 8009a70:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1e4      	bne.n	8009a42 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d130      	bne.n	8009ae2 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8e:	e853 3f00 	ldrex	r3, [r3]
 8009a92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a96:	f023 0310 	bic.w	r3, r3, #16
 8009a9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009aa8:	647b      	str	r3, [r7, #68]	; 0x44
 8009aaa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009aae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009ab0:	e841 2300 	strex	r3, r2, [r1]
 8009ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1e4      	bne.n	8009a86 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	69db      	ldr	r3, [r3, #28]
 8009ac2:	f003 0310 	and.w	r3, r3, #16
 8009ac6:	2b10      	cmp	r3, #16
 8009ac8:	d103      	bne.n	8009ad2 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2210      	movs	r2, #16
 8009ad0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ad8:	4619      	mov	r1, r3
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f7fe fcba 	bl	8008454 <HAL_UARTEx_RxEventCallback>
 8009ae0:	e002      	b.n	8009ae8 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f7f8 fed4 	bl	8002890 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009ae8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d006      	beq.n	8009afe <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009af0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009af4:	f003 0320 	and.w	r3, r3, #32
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	f47f aecb 	bne.w	8009894 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b04:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009b08:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d049      	beq.n	8009ba4 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009b16:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d242      	bcs.n	8009ba4 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	3308      	adds	r3, #8
 8009b24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b28:	e853 3f00 	ldrex	r3, [r3]
 8009b2c:	623b      	str	r3, [r7, #32]
   return(result);
 8009b2e:	6a3b      	ldr	r3, [r7, #32]
 8009b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	3308      	adds	r3, #8
 8009b3e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009b42:	633a      	str	r2, [r7, #48]	; 0x30
 8009b44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b4a:	e841 2300 	strex	r3, r2, [r1]
 8009b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1e3      	bne.n	8009b1e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a15      	ldr	r2, [pc, #84]	; (8009bb0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009b5a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	e853 3f00 	ldrex	r3, [r3]
 8009b68:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f043 0320 	orr.w	r3, r3, #32
 8009b70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	461a      	mov	r2, r3
 8009b7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b7e:	61fb      	str	r3, [r7, #28]
 8009b80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b82:	69b9      	ldr	r1, [r7, #24]
 8009b84:	69fa      	ldr	r2, [r7, #28]
 8009b86:	e841 2300 	strex	r3, r2, [r1]
 8009b8a:	617b      	str	r3, [r7, #20]
   return(result);
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d1e4      	bne.n	8009b5c <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b92:	e007      	b.n	8009ba4 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	699a      	ldr	r2, [r3, #24]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f042 0208 	orr.w	r2, r2, #8
 8009ba2:	619a      	str	r2, [r3, #24]
}
 8009ba4:	bf00      	nop
 8009ba6:	37b8      	adds	r7, #184	; 0xb8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	40008000 	.word	0x40008000
 8009bb0:	08009335 	.word	0x08009335

08009bb4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b083      	sub	sp, #12
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009bbc:	bf00      	nop
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009bd0:	bf00      	nop
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009be4:	bf00      	nop
 8009be6:	370c      	adds	r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d101      	bne.n	8009c06 <HAL_UARTEx_DisableFifoMode+0x16>
 8009c02:	2302      	movs	r3, #2
 8009c04:	e027      	b.n	8009c56 <HAL_UARTEx_DisableFifoMode+0x66>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2201      	movs	r2, #1
 8009c0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2224      	movs	r2, #36	; 0x24
 8009c12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f022 0201 	bic.w	r2, r2, #1
 8009c2c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009c34:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2220      	movs	r2, #32
 8009c48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009c54:	2300      	movs	r3, #0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3714      	adds	r7, #20
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr

08009c62 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b084      	sub	sp, #16
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
 8009c6a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009c72:	2b01      	cmp	r3, #1
 8009c74:	d101      	bne.n	8009c7a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009c76:	2302      	movs	r3, #2
 8009c78:	e02d      	b.n	8009cd6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2224      	movs	r2, #36	; 0x24
 8009c86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f022 0201 	bic.w	r2, r2, #1
 8009ca0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	689b      	ldr	r3, [r3, #8]
 8009ca8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	683a      	ldr	r2, [r7, #0]
 8009cb2:	430a      	orrs	r2, r1
 8009cb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 f850 	bl	8009d5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2220      	movs	r2, #32
 8009cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009cd4:	2300      	movs	r3, #0
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}

08009cde <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b084      	sub	sp, #16
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
 8009ce6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d101      	bne.n	8009cf6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009cf2:	2302      	movs	r3, #2
 8009cf4:	e02d      	b.n	8009d52 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2224      	movs	r2, #36	; 0x24
 8009d02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f022 0201 	bic.w	r2, r2, #1
 8009d1c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	683a      	ldr	r2, [r7, #0]
 8009d2e:	430a      	orrs	r2, r1
 8009d30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 f812 	bl	8009d5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	68fa      	ldr	r2, [r7, #12]
 8009d3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2220      	movs	r2, #32
 8009d44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3710      	adds	r7, #16
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
	...

08009d5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b085      	sub	sp, #20
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d108      	bne.n	8009d7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2201      	movs	r2, #1
 8009d78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d7c:	e031      	b.n	8009de2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d7e:	2308      	movs	r3, #8
 8009d80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d82:	2308      	movs	r3, #8
 8009d84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	0e5b      	lsrs	r3, r3, #25
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	f003 0307 	and.w	r3, r3, #7
 8009d94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	0f5b      	lsrs	r3, r3, #29
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	f003 0307 	and.w	r3, r3, #7
 8009da4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009da6:	7bbb      	ldrb	r3, [r7, #14]
 8009da8:	7b3a      	ldrb	r2, [r7, #12]
 8009daa:	4911      	ldr	r1, [pc, #68]	; (8009df0 <UARTEx_SetNbDataToProcess+0x94>)
 8009dac:	5c8a      	ldrb	r2, [r1, r2]
 8009dae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009db2:	7b3a      	ldrb	r2, [r7, #12]
 8009db4:	490f      	ldr	r1, [pc, #60]	; (8009df4 <UARTEx_SetNbDataToProcess+0x98>)
 8009db6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009db8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
 8009dc6:	7b7a      	ldrb	r2, [r7, #13]
 8009dc8:	4909      	ldr	r1, [pc, #36]	; (8009df0 <UARTEx_SetNbDataToProcess+0x94>)
 8009dca:	5c8a      	ldrb	r2, [r1, r2]
 8009dcc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009dd0:	7b7a      	ldrb	r2, [r7, #13]
 8009dd2:	4908      	ldr	r1, [pc, #32]	; (8009df4 <UARTEx_SetNbDataToProcess+0x98>)
 8009dd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009dd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009dda:	b29a      	uxth	r2, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009de2:	bf00      	nop
 8009de4:	3714      	adds	r7, #20
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr
 8009dee:	bf00      	nop
 8009df0:	08011580 	.word	0x08011580
 8009df4:	08011588 	.word	0x08011588

08009df8 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b088      	sub	sp, #32
 8009dfc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009e02:	f107 0308 	add.w	r3, r7, #8
 8009e06:	2218      	movs	r2, #24
 8009e08:	2100      	movs	r1, #0
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f001 fc9c 	bl	800b748 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009e10:	233f      	movs	r3, #63	; 0x3f
 8009e12:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8009e14:	2381      	movs	r3, #129	; 0x81
 8009e16:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009e18:	1dfb      	adds	r3, r7, #7
 8009e1a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009e20:	f107 0308 	add.w	r3, r7, #8
 8009e24:	2100      	movs	r1, #0
 8009e26:	4618      	mov	r0, r3
 8009e28:	f001 fb4c 	bl	800b4c4 <hci_send_req>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	da01      	bge.n	8009e36 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009e32:	23ff      	movs	r3, #255	; 0xff
 8009e34:	e000      	b.n	8009e38 <aci_gap_set_non_discoverable+0x40>
  return status;
 8009e36:	79fb      	ldrb	r3, [r7, #7]
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3720      	adds	r7, #32
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8009e40:	b5b0      	push	{r4, r5, r7, lr}
 8009e42:	b0ce      	sub	sp, #312	; 0x138
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	4605      	mov	r5, r0
 8009e48:	460c      	mov	r4, r1
 8009e4a:	4610      	mov	r0, r2
 8009e4c:	4619      	mov	r1, r3
 8009e4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009e52:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009e56:	462a      	mov	r2, r5
 8009e58:	701a      	strb	r2, [r3, #0]
 8009e5a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009e5e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009e62:	4622      	mov	r2, r4
 8009e64:	801a      	strh	r2, [r3, #0]
 8009e66:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009e6a:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8009e6e:	4602      	mov	r2, r0
 8009e70:	801a      	strh	r2, [r3, #0]
 8009e72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009e76:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009e7a:	460a      	mov	r2, r1
 8009e7c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8009e7e:	f107 0310 	add.w	r3, r7, #16
 8009e82:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8009e86:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8009e8a:	3308      	adds	r3, #8
 8009e8c:	f107 0210 	add.w	r2, r7, #16
 8009e90:	4413      	add	r3, r2
 8009e92:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8009e96:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009e9a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8009e9e:	4413      	add	r3, r2
 8009ea0:	3309      	adds	r3, #9
 8009ea2:	f107 0210 	add.w	r2, r7, #16
 8009ea6:	4413      	add	r3, r2
 8009ea8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009eac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009eb0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8009ebe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009ec2:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009ec6:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8009eca:	7812      	ldrb	r2, [r2, #0]
 8009ecc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009ece:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8009ed8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009edc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009ee0:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009ee4:	8812      	ldrh	r2, [r2, #0]
 8009ee6:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8009eea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009eee:	3302      	adds	r3, #2
 8009ef0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8009ef4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009ef8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009efc:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8009f00:	8812      	ldrh	r2, [r2, #0]
 8009f02:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8009f06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f0a:	3302      	adds	r3, #2
 8009f0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8009f10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009f14:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009f18:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009f1c:	7812      	ldrb	r2, [r2, #0]
 8009f1e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009f20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f24:	3301      	adds	r3, #1
 8009f26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8009f2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009f2e:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8009f32:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009f34:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f38:	3301      	adds	r3, #1
 8009f3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8009f3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009f42:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009f46:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8009f48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f4c:	3301      	adds	r3, #1
 8009f4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8009f52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009f56:	3308      	adds	r3, #8
 8009f58:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009f5c:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8009f60:	4618      	mov	r0, r3
 8009f62:	f001 fbe1 	bl	800b728 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8009f66:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8009f6a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009f6e:	4413      	add	r3, r2
 8009f70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8009f74:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009f78:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009f7c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009f7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f82:	3301      	adds	r3, #1
 8009f84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8009f88:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009f92:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8009f96:	4618      	mov	r0, r3
 8009f98:	f001 fbc6 	bl	800b728 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8009f9c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8009fa0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009fa4:	4413      	add	r3, r2
 8009fa6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8009faa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fae:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8009fb2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009fb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009fb8:	3302      	adds	r3, #2
 8009fba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8009fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fc2:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8009fc6:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8009fc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009fcc:	3302      	adds	r3, #2
 8009fce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009fd2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009fd6:	2218      	movs	r2, #24
 8009fd8:	2100      	movs	r1, #0
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f001 fbb4 	bl	800b748 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009fe0:	233f      	movs	r3, #63	; 0x3f
 8009fe2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8009fe6:	2383      	movs	r3, #131	; 0x83
 8009fe8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009fec:	f107 0310 	add.w	r3, r7, #16
 8009ff0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009ff4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ff8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009ffc:	f107 030f 	add.w	r3, r7, #15
 800a000:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a004:	2301      	movs	r3, #1
 800a006:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a00a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a00e:	2100      	movs	r1, #0
 800a010:	4618      	mov	r0, r3
 800a012:	f001 fa57 	bl	800b4c4 <hci_send_req>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	da01      	bge.n	800a020 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800a01c:	23ff      	movs	r3, #255	; 0xff
 800a01e:	e004      	b.n	800a02a <aci_gap_set_discoverable+0x1ea>
  return status;
 800a020:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a024:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a028:	781b      	ldrb	r3, [r3, #0]
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800a030:	46bd      	mov	sp, r7
 800a032:	bdb0      	pop	{r4, r5, r7, pc}

0800a034 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b0cc      	sub	sp, #304	; 0x130
 800a038:	af00      	add	r7, sp, #0
 800a03a:	4602      	mov	r2, r0
 800a03c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a040:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a044:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800a046:	f107 0310 	add.w	r3, r7, #16
 800a04a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a04e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a052:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a056:	2200      	movs	r2, #0
 800a058:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a05a:	2300      	movs	r3, #0
 800a05c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800a060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a064:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a068:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a06c:	7812      	ldrb	r2, [r2, #0]
 800a06e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a070:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a074:	3301      	adds	r3, #1
 800a076:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a07a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a07e:	2218      	movs	r2, #24
 800a080:	2100      	movs	r1, #0
 800a082:	4618      	mov	r0, r3
 800a084:	f001 fb60 	bl	800b748 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a088:	233f      	movs	r3, #63	; 0x3f
 800a08a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800a08e:	2385      	movs	r3, #133	; 0x85
 800a090:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a094:	f107 0310 	add.w	r3, r7, #16
 800a098:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a09c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a0a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a0a4:	f107 030f 	add.w	r3, r7, #15
 800a0a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a0ac:	2301      	movs	r3, #1
 800a0ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a0b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a0b6:	2100      	movs	r1, #0
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f001 fa03 	bl	800b4c4 <hci_send_req>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	da01      	bge.n	800a0c8 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800a0c4:	23ff      	movs	r3, #255	; 0xff
 800a0c6:	e004      	b.n	800a0d2 <aci_gap_set_io_capability+0x9e>
  return status;
 800a0c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0cc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a0d0:	781b      	ldrb	r3, [r3, #0]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800a0dc:	b5b0      	push	{r4, r5, r7, lr}
 800a0de:	b0cc      	sub	sp, #304	; 0x130
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	4605      	mov	r5, r0
 800a0e4:	460c      	mov	r4, r1
 800a0e6:	4610      	mov	r0, r2
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0ee:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a0f2:	462a      	mov	r2, r5
 800a0f4:	701a      	strb	r2, [r3, #0]
 800a0f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0fa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a0fe:	4622      	mov	r2, r4
 800a100:	701a      	strb	r2, [r3, #0]
 800a102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a106:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800a10a:	4602      	mov	r2, r0
 800a10c:	701a      	strb	r2, [r3, #0]
 800a10e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a112:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a116:	460a      	mov	r2, r1
 800a118:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800a11a:	f107 0310 	add.w	r3, r7, #16
 800a11e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a126:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a12a:	2200      	movs	r2, #0
 800a12c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a12e:	2300      	movs	r3, #0
 800a130:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800a134:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a138:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a13c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a140:	7812      	ldrb	r2, [r2, #0]
 800a142:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a144:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a148:	3301      	adds	r3, #1
 800a14a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800a14e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a152:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a156:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a15a:	7812      	ldrb	r2, [r2, #0]
 800a15c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a15e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a162:	3301      	adds	r3, #1
 800a164:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800a168:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a16c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a170:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800a174:	7812      	ldrb	r2, [r2, #0]
 800a176:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a178:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a17c:	3301      	adds	r3, #1
 800a17e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800a182:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a186:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a18a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a18e:	7812      	ldrb	r2, [r2, #0]
 800a190:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800a192:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a196:	3301      	adds	r3, #1
 800a198:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800a19c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1a0:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800a1a4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a1a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a1aa:	3301      	adds	r3, #1
 800a1ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800a1b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1b4:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800a1b8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a1ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a1be:	3301      	adds	r3, #1
 800a1c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800a1c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1c8:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800a1cc:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800a1ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800a1d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1dc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800a1e0:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800a1e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a1e8:	3304      	adds	r3, #4
 800a1ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800a1ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1f2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800a1f6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800a1f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a202:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a206:	2218      	movs	r2, #24
 800a208:	2100      	movs	r1, #0
 800a20a:	4618      	mov	r0, r3
 800a20c:	f001 fa9c 	bl	800b748 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a210:	233f      	movs	r3, #63	; 0x3f
 800a212:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800a216:	2386      	movs	r3, #134	; 0x86
 800a218:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a21c:	f107 0310 	add.w	r3, r7, #16
 800a220:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a224:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a228:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a22c:	f107 030f 	add.w	r3, r7, #15
 800a230:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a234:	2301      	movs	r3, #1
 800a236:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a23a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a23e:	2100      	movs	r1, #0
 800a240:	4618      	mov	r0, r3
 800a242:	f001 f93f 	bl	800b4c4 <hci_send_req>
 800a246:	4603      	mov	r3, r0
 800a248:	2b00      	cmp	r3, #0
 800a24a:	da01      	bge.n	800a250 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800a24c:	23ff      	movs	r3, #255	; 0xff
 800a24e:	e004      	b.n	800a25a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800a250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a254:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a258:	781b      	ldrb	r3, [r3, #0]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a260:	46bd      	mov	sp, r7
 800a262:	bdb0      	pop	{r4, r5, r7, pc}

0800a264 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b0cc      	sub	sp, #304	; 0x130
 800a268:	af00      	add	r7, sp, #0
 800a26a:	4602      	mov	r2, r0
 800a26c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a270:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a274:	6019      	str	r1, [r3, #0]
 800a276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a27a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a27e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800a280:	f107 0310 	add.w	r3, r7, #16
 800a284:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a28c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a290:	2200      	movs	r2, #0
 800a292:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a294:	2300      	movs	r3, #0
 800a296:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a29a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a29e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a2a2:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a2a6:	8812      	ldrh	r2, [r2, #0]
 800a2a8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a2aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a2ae:	3302      	adds	r3, #2
 800a2b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800a2b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a2bc:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800a2c0:	6812      	ldr	r2, [r2, #0]
 800a2c2:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800a2c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a2ca:	3304      	adds	r3, #4
 800a2cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a2d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a2d4:	2218      	movs	r2, #24
 800a2d6:	2100      	movs	r1, #0
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f001 fa35 	bl	800b748 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a2de:	233f      	movs	r3, #63	; 0x3f
 800a2e0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800a2e4:	2388      	movs	r3, #136	; 0x88
 800a2e6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a2ea:	f107 0310 	add.w	r3, r7, #16
 800a2ee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a2f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a2f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a2fa:	f107 030f 	add.w	r3, r7, #15
 800a2fe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a302:	2301      	movs	r3, #1
 800a304:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a308:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a30c:	2100      	movs	r1, #0
 800a30e:	4618      	mov	r0, r3
 800a310:	f001 f8d8 	bl	800b4c4 <hci_send_req>
 800a314:	4603      	mov	r3, r0
 800a316:	2b00      	cmp	r3, #0
 800a318:	da01      	bge.n	800a31e <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800a31a:	23ff      	movs	r3, #255	; 0xff
 800a31c:	e004      	b.n	800a328 <aci_gap_pass_key_resp+0xc4>
  return status;
 800a31e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a322:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a326:	781b      	ldrb	r3, [r3, #0]
}
 800a328:	4618      	mov	r0, r3
 800a32a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800a332:	b590      	push	{r4, r7, lr}
 800a334:	b0cd      	sub	sp, #308	; 0x134
 800a336:	af00      	add	r7, sp, #0
 800a338:	4604      	mov	r4, r0
 800a33a:	4608      	mov	r0, r1
 800a33c:	4611      	mov	r1, r2
 800a33e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a342:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800a346:	6013      	str	r3, [r2, #0]
 800a348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a34c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a350:	4622      	mov	r2, r4
 800a352:	701a      	strb	r2, [r3, #0]
 800a354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a358:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a35c:	4602      	mov	r2, r0
 800a35e:	701a      	strb	r2, [r3, #0]
 800a360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a364:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800a368:	460a      	mov	r2, r1
 800a36a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800a36c:	f107 0310 	add.w	r3, r7, #16
 800a370:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a374:	f107 0308 	add.w	r3, r7, #8
 800a378:	2207      	movs	r2, #7
 800a37a:	2100      	movs	r1, #0
 800a37c:	4618      	mov	r0, r3
 800a37e:	f001 f9e3 	bl	800b748 <Osal_MemSet>
  int index_input = 0;
 800a382:	2300      	movs	r3, #0
 800a384:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800a388:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a38c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a390:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a394:	7812      	ldrb	r2, [r2, #0]
 800a396:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a398:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a39c:	3301      	adds	r3, #1
 800a39e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800a3a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a3aa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a3ae:	7812      	ldrb	r2, [r2, #0]
 800a3b0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a3b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800a3bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3c0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a3c4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800a3c8:	7812      	ldrb	r2, [r2, #0]
 800a3ca:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a3cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a3d0:	3301      	adds	r3, #1
 800a3d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a3d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a3da:	2218      	movs	r2, #24
 800a3dc:	2100      	movs	r1, #0
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f001 f9b2 	bl	800b748 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a3e4:	233f      	movs	r3, #63	; 0x3f
 800a3e6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800a3ea:	238a      	movs	r3, #138	; 0x8a
 800a3ec:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a3f0:	f107 0310 	add.w	r3, r7, #16
 800a3f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a3f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a3fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800a400:	f107 0308 	add.w	r3, r7, #8
 800a404:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800a408:	2307      	movs	r3, #7
 800a40a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a40e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a412:	2100      	movs	r1, #0
 800a414:	4618      	mov	r0, r3
 800a416:	f001 f855 	bl	800b4c4 <hci_send_req>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	da01      	bge.n	800a424 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800a420:	23ff      	movs	r3, #255	; 0xff
 800a422:	e02e      	b.n	800a482 <aci_gap_init+0x150>
  if ( resp.Status )
 800a424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a428:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d005      	beq.n	800a43e <aci_gap_init+0x10c>
    return resp.Status;
 800a432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a436:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	e021      	b.n	800a482 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800a43e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a442:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a446:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a44a:	b29a      	uxth	r2, r3
 800a44c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a450:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800a458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a45c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a460:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a464:	b29a      	uxth	r2, r3
 800a466:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800a46a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800a46c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a470:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a474:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800a478:	b29a      	uxth	r2, r3
 800a47a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800a47e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd90      	pop	{r4, r7, pc}

0800a48c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b0cc      	sub	sp, #304	; 0x130
 800a490:	af00      	add	r7, sp, #0
 800a492:	4602      	mov	r2, r0
 800a494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a498:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a49c:	6019      	str	r1, [r3, #0]
 800a49e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4a2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a4a6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800a4a8:	f107 0310 	add.w	r3, r7, #16
 800a4ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a4b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4b4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800a4c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a4ca:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a4ce:	7812      	ldrb	r2, [r2, #0]
 800a4d0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a4d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800a4dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4e0:	1c58      	adds	r0, r3, #1
 800a4e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4e6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a4ea:	781a      	ldrb	r2, [r3, #0]
 800a4ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4f4:	6819      	ldr	r1, [r3, #0]
 800a4f6:	f001 f917 	bl	800b728 <Osal_MemCpy>
  index_input += AdvDataLen;
 800a4fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4fe:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a502:	781b      	ldrb	r3, [r3, #0]
 800a504:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a508:	4413      	add	r3, r2
 800a50a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a50e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a512:	2218      	movs	r2, #24
 800a514:	2100      	movs	r1, #0
 800a516:	4618      	mov	r0, r3
 800a518:	f001 f916 	bl	800b748 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a51c:	233f      	movs	r3, #63	; 0x3f
 800a51e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800a522:	238e      	movs	r3, #142	; 0x8e
 800a524:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a528:	f107 0310 	add.w	r3, r7, #16
 800a52c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a530:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a534:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a538:	f107 030f 	add.w	r3, r7, #15
 800a53c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a540:	2301      	movs	r3, #1
 800a542:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a546:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a54a:	2100      	movs	r1, #0
 800a54c:	4618      	mov	r0, r3
 800a54e:	f000 ffb9 	bl	800b4c4 <hci_send_req>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	da01      	bge.n	800a55c <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800a558:	23ff      	movs	r3, #255	; 0xff
 800a55a:	e004      	b.n	800a566 <aci_gap_update_adv_data+0xda>
  return status;
 800a55c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a560:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a564:	781b      	ldrb	r3, [r3, #0]
}
 800a566:	4618      	mov	r0, r3
 800a568:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b088      	sub	sp, #32
 800a574:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a576:	2300      	movs	r3, #0
 800a578:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a57a:	f107 0308 	add.w	r3, r7, #8
 800a57e:	2218      	movs	r2, #24
 800a580:	2100      	movs	r1, #0
 800a582:	4618      	mov	r0, r3
 800a584:	f001 f8e0 	bl	800b748 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a588:	233f      	movs	r3, #63	; 0x3f
 800a58a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800a58c:	2392      	movs	r3, #146	; 0x92
 800a58e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a590:	1dfb      	adds	r3, r7, #7
 800a592:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a594:	2301      	movs	r3, #1
 800a596:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a598:	f107 0308 	add.w	r3, r7, #8
 800a59c:	2100      	movs	r1, #0
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f000 ff90 	bl	800b4c4 <hci_send_req>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	da01      	bge.n	800a5ae <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a5aa:	23ff      	movs	r3, #255	; 0xff
 800a5ac:	e000      	b.n	800a5b0 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800a5ae:	79fb      	ldrb	r3, [r7, #7]
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3720      	adds	r7, #32
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}

0800a5b8 <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b0cc      	sub	sp, #304	; 0x130
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	4602      	mov	r2, r0
 800a5c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5c4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a5c8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 800a5ca:	f107 0310 	add.w	r3, r7, #16
 800a5ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a5d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5d6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a5da:	2200      	movs	r2, #0
 800a5dc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a5e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a5ec:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a5f0:	8812      	ldrh	r2, [r2, #0]
 800a5f2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a5f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a5f8:	3302      	adds	r3, #2
 800a5fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a5fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a602:	2218      	movs	r2, #24
 800a604:	2100      	movs	r1, #0
 800a606:	4618      	mov	r0, r3
 800a608:	f001 f89e 	bl	800b748 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a60c:	233f      	movs	r3, #63	; 0x3f
 800a60e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 800a612:	2395      	movs	r3, #149	; 0x95
 800a614:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a618:	f107 0310 	add.w	r3, r7, #16
 800a61c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a620:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a624:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a628:	f107 030f 	add.w	r3, r7, #15
 800a62c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a630:	2301      	movs	r3, #1
 800a632:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a636:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a63a:	2100      	movs	r1, #0
 800a63c:	4618      	mov	r0, r3
 800a63e:	f000 ff41 	bl	800b4c4 <hci_send_req>
 800a642:	4603      	mov	r3, r0
 800a644:	2b00      	cmp	r3, #0
 800a646:	da01      	bge.n	800a64c <aci_gap_allow_rebond+0x94>
    return BLE_STATUS_TIMEOUT;
 800a648:	23ff      	movs	r3, #255	; 0xff
 800a64a:	e004      	b.n	800a656 <aci_gap_allow_rebond+0x9e>
  return status;
 800a64c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a650:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a654:	781b      	ldrb	r3, [r3, #0]
}
 800a656:	4618      	mov	r0, r3
 800a658:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b0cc      	sub	sp, #304	; 0x130
 800a664:	af00      	add	r7, sp, #0
 800a666:	4602      	mov	r2, r0
 800a668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a66c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a670:	801a      	strh	r2, [r3, #0]
 800a672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a676:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800a67a:	460a      	mov	r2, r1
 800a67c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800a67e:	f107 0310 	add.w	r3, r7, #16
 800a682:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a68a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a68e:	2200      	movs	r2, #0
 800a690:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a692:	2300      	movs	r3, #0
 800a694:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a698:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a69c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a6a0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a6a4:	8812      	ldrh	r2, [r2, #0]
 800a6a6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a6a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a6ac:	3302      	adds	r3, #2
 800a6ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800a6b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6b6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a6ba:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800a6be:	7812      	ldrb	r2, [r2, #0]
 800a6c0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a6c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a6cc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a6d0:	2218      	movs	r2, #24
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	f001 f837 	bl	800b748 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a6da:	233f      	movs	r3, #63	; 0x3f
 800a6dc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800a6e0:	23a5      	movs	r3, #165	; 0xa5
 800a6e2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a6e6:	f107 0310 	add.w	r3, r7, #16
 800a6ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a6ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a6f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a6f6:	f107 030f 	add.w	r3, r7, #15
 800a6fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a6fe:	2301      	movs	r3, #1
 800a700:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a704:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a708:	2100      	movs	r1, #0
 800a70a:	4618      	mov	r0, r3
 800a70c:	f000 feda 	bl	800b4c4 <hci_send_req>
 800a710:	4603      	mov	r3, r0
 800a712:	2b00      	cmp	r3, #0
 800a714:	da01      	bge.n	800a71a <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800a716:	23ff      	movs	r3, #255	; 0xff
 800a718:	e004      	b.n	800a724 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800a71a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a71e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a722:	781b      	ldrb	r3, [r3, #0]
}
 800a724:	4618      	mov	r0, r3
 800a726:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b088      	sub	sp, #32
 800a732:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a734:	2300      	movs	r3, #0
 800a736:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a738:	f107 0308 	add.w	r3, r7, #8
 800a73c:	2218      	movs	r2, #24
 800a73e:	2100      	movs	r1, #0
 800a740:	4618      	mov	r0, r3
 800a742:	f001 f801 	bl	800b748 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a746:	233f      	movs	r3, #63	; 0x3f
 800a748:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800a74a:	f240 1301 	movw	r3, #257	; 0x101
 800a74e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a750:	1dfb      	adds	r3, r7, #7
 800a752:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a754:	2301      	movs	r3, #1
 800a756:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a758:	f107 0308 	add.w	r3, r7, #8
 800a75c:	2100      	movs	r1, #0
 800a75e:	4618      	mov	r0, r3
 800a760:	f000 feb0 	bl	800b4c4 <hci_send_req>
 800a764:	4603      	mov	r3, r0
 800a766:	2b00      	cmp	r3, #0
 800a768:	da01      	bge.n	800a76e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800a76a:	23ff      	movs	r3, #255	; 0xff
 800a76c:	e000      	b.n	800a770 <aci_gatt_init+0x42>
  return status;
 800a76e:	79fb      	ldrb	r3, [r7, #7]
}
 800a770:	4618      	mov	r0, r3
 800a772:	3720      	adds	r7, #32
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800a778:	b590      	push	{r4, r7, lr}
 800a77a:	b0cf      	sub	sp, #316	; 0x13c
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	4604      	mov	r4, r0
 800a780:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800a784:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800a788:	6001      	str	r1, [r0, #0]
 800a78a:	4610      	mov	r0, r2
 800a78c:	4619      	mov	r1, r3
 800a78e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a792:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800a796:	4622      	mov	r2, r4
 800a798:	701a      	strb	r2, [r3, #0]
 800a79a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a79e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800a7a2:	4602      	mov	r2, r0
 800a7a4:	701a      	strb	r2, [r3, #0]
 800a7a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a7aa:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800a7ae:	460a      	mov	r2, r1
 800a7b0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800a7b2:	f107 0310 	add.w	r3, r7, #16
 800a7b6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800a7ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a7be:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d00a      	beq.n	800a7de <aci_gatt_add_service+0x66>
 800a7c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a7cc:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800a7d0:	781b      	ldrb	r3, [r3, #0]
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d101      	bne.n	800a7da <aci_gatt_add_service+0x62>
 800a7d6:	2311      	movs	r3, #17
 800a7d8:	e002      	b.n	800a7e0 <aci_gatt_add_service+0x68>
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e000      	b.n	800a7e0 <aci_gatt_add_service+0x68>
 800a7de:	2303      	movs	r3, #3
 800a7e0:	f107 0210 	add.w	r2, r7, #16
 800a7e4:	4413      	add	r3, r2
 800a7e6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a7ea:	f107 030c 	add.w	r3, r7, #12
 800a7ee:	2203      	movs	r2, #3
 800a7f0:	2100      	movs	r1, #0
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f000 ffa8 	bl	800b748 <Osal_MemSet>
  int index_input = 0;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800a7fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a802:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a806:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800a80a:	7812      	ldrb	r2, [r2, #0]
 800a80c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a80e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a812:	3301      	adds	r3, #1
 800a814:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800a818:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a81c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800a820:	781b      	ldrb	r3, [r3, #0]
 800a822:	2b01      	cmp	r3, #1
 800a824:	d002      	beq.n	800a82c <aci_gatt_add_service+0xb4>
 800a826:	2b02      	cmp	r3, #2
 800a828:	d004      	beq.n	800a834 <aci_gatt_add_service+0xbc>
 800a82a:	e007      	b.n	800a83c <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800a82c:	2302      	movs	r3, #2
 800a82e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800a832:	e005      	b.n	800a840 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800a834:	2310      	movs	r3, #16
 800a836:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800a83a:	e001      	b.n	800a840 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800a83c:	2397      	movs	r3, #151	; 0x97
 800a83e:	e06c      	b.n	800a91a <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800a840:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a844:	1c58      	adds	r0, r3, #1
 800a846:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800a84a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a84e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a852:	6819      	ldr	r1, [r3, #0]
 800a854:	f000 ff68 	bl	800b728 <Osal_MemCpy>
    index_input += size;
 800a858:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800a85c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a860:	4413      	add	r3, r2
 800a862:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800a866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a86a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a86e:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800a872:	7812      	ldrb	r2, [r2, #0]
 800a874:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800a876:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a87a:	3301      	adds	r3, #1
 800a87c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800a880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a884:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a888:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800a88c:	7812      	ldrb	r2, [r2, #0]
 800a88e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800a890:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a894:	3301      	adds	r3, #1
 800a896:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a89a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a89e:	2218      	movs	r2, #24
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f000 ff50 	bl	800b748 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a8a8:	233f      	movs	r3, #63	; 0x3f
 800a8aa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800a8ae:	f44f 7381 	mov.w	r3, #258	; 0x102
 800a8b2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a8b6:	f107 0310 	add.w	r3, r7, #16
 800a8ba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a8be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8c2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800a8c6:	f107 030c 	add.w	r3, r7, #12
 800a8ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800a8ce:	2303      	movs	r3, #3
 800a8d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a8d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a8d8:	2100      	movs	r1, #0
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f000 fdf2 	bl	800b4c4 <hci_send_req>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	da01      	bge.n	800a8ea <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800a8e6:	23ff      	movs	r3, #255	; 0xff
 800a8e8:	e017      	b.n	800a91a <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800a8ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a8ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d005      	beq.n	800a904 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800a8f8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a8fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	e00a      	b.n	800a91a <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800a904:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a908:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a90c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a910:	b29a      	uxth	r2, r3
 800a912:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a916:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a918:	2300      	movs	r3, #0
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800a920:	46bd      	mov	sp, r7
 800a922:	bd90      	pop	{r4, r7, pc}

0800a924 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800a924:	b590      	push	{r4, r7, lr}
 800a926:	b0d1      	sub	sp, #324	; 0x144
 800a928:	af00      	add	r7, sp, #0
 800a92a:	4604      	mov	r4, r0
 800a92c:	4608      	mov	r0, r1
 800a92e:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800a932:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800a936:	600a      	str	r2, [r1, #0]
 800a938:	4619      	mov	r1, r3
 800a93a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a93e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800a942:	4622      	mov	r2, r4
 800a944:	801a      	strh	r2, [r3, #0]
 800a946:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a94a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800a94e:	4602      	mov	r2, r0
 800a950:	701a      	strb	r2, [r3, #0]
 800a952:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a956:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800a95a:	460a      	mov	r2, r1
 800a95c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800a95e:	f107 0318 	add.w	r3, r7, #24
 800a962:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800a966:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a96a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	2b01      	cmp	r3, #1
 800a972:	d00a      	beq.n	800a98a <aci_gatt_add_char+0x66>
 800a974:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a978:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	2b02      	cmp	r3, #2
 800a980:	d101      	bne.n	800a986 <aci_gatt_add_char+0x62>
 800a982:	2313      	movs	r3, #19
 800a984:	e002      	b.n	800a98c <aci_gatt_add_char+0x68>
 800a986:	2303      	movs	r3, #3
 800a988:	e000      	b.n	800a98c <aci_gatt_add_char+0x68>
 800a98a:	2305      	movs	r3, #5
 800a98c:	f107 0218 	add.w	r2, r7, #24
 800a990:	4413      	add	r3, r2
 800a992:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a996:	f107 0314 	add.w	r3, r7, #20
 800a99a:	2203      	movs	r2, #3
 800a99c:	2100      	movs	r1, #0
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f000 fed2 	bl	800b748 <Osal_MemSet>
  int index_input = 0;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800a9aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a9ae:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a9b2:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800a9b6:	8812      	ldrh	r2, [r2, #0]
 800a9b8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a9ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a9be:	3302      	adds	r3, #2
 800a9c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800a9c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a9c8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800a9cc:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800a9d0:	7812      	ldrb	r2, [r2, #0]
 800a9d2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a9d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a9d8:	3301      	adds	r3, #1
 800a9da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800a9de:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a9e2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	2b01      	cmp	r3, #1
 800a9ea:	d002      	beq.n	800a9f2 <aci_gatt_add_char+0xce>
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	d004      	beq.n	800a9fa <aci_gatt_add_char+0xd6>
 800a9f0:	e007      	b.n	800aa02 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800a9f2:	2302      	movs	r3, #2
 800a9f4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800a9f8:	e005      	b.n	800aa06 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800a9fa:	2310      	movs	r3, #16
 800a9fc:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800aa00:	e001      	b.n	800aa06 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800aa02:	2397      	movs	r3, #151	; 0x97
 800aa04:	e091      	b.n	800ab2a <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800aa06:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800aa0a:	1cd8      	adds	r0, r3, #3
 800aa0c:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800aa10:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800aa14:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800aa18:	6819      	ldr	r1, [r3, #0]
 800aa1a:	f000 fe85 	bl	800b728 <Osal_MemCpy>
    index_input += size;
 800aa1e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800aa22:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800aa26:	4413      	add	r3, r2
 800aa28:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800aa2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aa30:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800aa34:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800aa38:	8812      	ldrh	r2, [r2, #0]
 800aa3a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800aa3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aa40:	3302      	adds	r3, #2
 800aa42:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800aa46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aa4a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800aa4e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800aa50:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aa54:	3301      	adds	r3, #1
 800aa56:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800aa5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aa5e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800aa62:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800aa64:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aa68:	3301      	adds	r3, #1
 800aa6a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800aa6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aa72:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800aa76:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800aa78:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aa7c:	3301      	adds	r3, #1
 800aa7e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800aa82:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aa86:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800aa8a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800aa8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aa90:	3301      	adds	r3, #1
 800aa92:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800aa96:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aa9a:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800aa9e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800aaa0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800aaaa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800aaae:	2218      	movs	r2, #24
 800aab0:	2100      	movs	r1, #0
 800aab2:	4618      	mov	r0, r3
 800aab4:	f000 fe48 	bl	800b748 <Osal_MemSet>
  rq.ogf = 0x3f;
 800aab8:	233f      	movs	r3, #63	; 0x3f
 800aaba:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800aabe:	f44f 7382 	mov.w	r3, #260	; 0x104
 800aac2:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800aac6:	f107 0318 	add.w	r3, r7, #24
 800aaca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800aace:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aad2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800aad6:	f107 0314 	add.w	r3, r7, #20
 800aada:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800aade:	2303      	movs	r3, #3
 800aae0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800aae4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800aae8:	2100      	movs	r1, #0
 800aaea:	4618      	mov	r0, r3
 800aaec:	f000 fcea 	bl	800b4c4 <hci_send_req>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	da01      	bge.n	800aafa <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800aaf6:	23ff      	movs	r3, #255	; 0xff
 800aaf8:	e017      	b.n	800ab2a <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800aafa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800aafe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab02:	781b      	ldrb	r3, [r3, #0]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d005      	beq.n	800ab14 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800ab08:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ab0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	e00a      	b.n	800ab2a <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800ab14:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ab18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab1c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ab20:	b29a      	uxth	r2, r3
 800ab22:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800ab26:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ab28:	2300      	movs	r3, #0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd90      	pop	{r4, r7, pc}

0800ab34 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800ab34:	b5b0      	push	{r4, r5, r7, lr}
 800ab36:	b0cc      	sub	sp, #304	; 0x130
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	4605      	mov	r5, r0
 800ab3c:	460c      	mov	r4, r1
 800ab3e:	4610      	mov	r0, r2
 800ab40:	4619      	mov	r1, r3
 800ab42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab46:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ab4a:	462a      	mov	r2, r5
 800ab4c:	801a      	strh	r2, [r3, #0]
 800ab4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab56:	4622      	mov	r2, r4
 800ab58:	801a      	strh	r2, [r3, #0]
 800ab5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab5e:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800ab62:	4602      	mov	r2, r0
 800ab64:	701a      	strb	r2, [r3, #0]
 800ab66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab6a:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800ab6e:	460a      	mov	r2, r1
 800ab70:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800ab72:	f107 0310 	add.w	r3, r7, #16
 800ab76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ab7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab7e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ab82:	2200      	movs	r2, #0
 800ab84:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ab86:	2300      	movs	r3, #0
 800ab88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800ab8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab90:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ab94:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ab98:	8812      	ldrh	r2, [r2, #0]
 800ab9a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ab9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aba0:	3302      	adds	r3, #2
 800aba2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800aba6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abaa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800abae:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800abb2:	8812      	ldrh	r2, [r2, #0]
 800abb4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800abb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800abba:	3302      	adds	r3, #2
 800abbc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800abc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abc4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800abc8:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800abcc:	7812      	ldrb	r2, [r2, #0]
 800abce:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800abd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800abd4:	3301      	adds	r3, #1
 800abd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800abda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abde:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800abe2:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800abe6:	7812      	ldrb	r2, [r2, #0]
 800abe8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800abea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800abee:	3301      	adds	r3, #1
 800abf0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800abf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abf8:	1d98      	adds	r0, r3, #6
 800abfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abfe:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	461a      	mov	r2, r3
 800ac06:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800ac0a:	f000 fd8d 	bl	800b728 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800ac0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac12:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ac1c:	4413      	add	r3, r2
 800ac1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ac22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ac26:	2218      	movs	r2, #24
 800ac28:	2100      	movs	r1, #0
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f000 fd8c 	bl	800b748 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ac30:	233f      	movs	r3, #63	; 0x3f
 800ac32:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800ac36:	f44f 7383 	mov.w	r3, #262	; 0x106
 800ac3a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ac3e:	f107 0310 	add.w	r3, r7, #16
 800ac42:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ac46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac4a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ac4e:	f107 030f 	add.w	r3, r7, #15
 800ac52:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ac56:	2301      	movs	r3, #1
 800ac58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ac5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ac60:	2100      	movs	r1, #0
 800ac62:	4618      	mov	r0, r3
 800ac64:	f000 fc2e 	bl	800b4c4 <hci_send_req>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	da01      	bge.n	800ac72 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800ac6e:	23ff      	movs	r3, #255	; 0xff
 800ac70:	e004      	b.n	800ac7c <aci_gatt_update_char_value+0x148>
  return status;
 800ac72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac76:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ac7a:	781b      	ldrb	r3, [r3, #0]
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bdb0      	pop	{r4, r5, r7, pc}

0800ac86 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b0cc      	sub	sp, #304	; 0x130
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac94:	601a      	str	r2, [r3, #0]
 800ac96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac9a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ac9e:	4602      	mov	r2, r0
 800aca0:	701a      	strb	r2, [r3, #0]
 800aca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aca6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800acaa:	460a      	mov	r2, r1
 800acac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800acae:	f107 0310 	add.w	r3, r7, #16
 800acb2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800acb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800acbe:	2200      	movs	r2, #0
 800acc0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800acc2:	2300      	movs	r3, #0
 800acc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800acc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800accc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800acd0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800acd4:	7812      	ldrb	r2, [r2, #0]
 800acd6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800acd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acdc:	3301      	adds	r3, #1
 800acde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800ace2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ace6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800acea:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800acee:	7812      	ldrb	r2, [r2, #0]
 800acf0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800acf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acf6:	3301      	adds	r3, #1
 800acf8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800acfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad00:	1c98      	adds	r0, r3, #2
 800ad02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad06:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ad0a:	781a      	ldrb	r2, [r3, #0]
 800ad0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad14:	6819      	ldr	r1, [r3, #0]
 800ad16:	f000 fd07 	bl	800b728 <Osal_MemCpy>
  index_input += Length;
 800ad1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad1e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ad28:	4413      	add	r3, r2
 800ad2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ad2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ad32:	2218      	movs	r2, #24
 800ad34:	2100      	movs	r1, #0
 800ad36:	4618      	mov	r0, r3
 800ad38:	f000 fd06 	bl	800b748 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ad3c:	233f      	movs	r3, #63	; 0x3f
 800ad3e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800ad42:	230c      	movs	r3, #12
 800ad44:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ad48:	f107 0310 	add.w	r3, r7, #16
 800ad4c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ad50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad54:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ad58:	f107 030f 	add.w	r3, r7, #15
 800ad5c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ad60:	2301      	movs	r3, #1
 800ad62:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ad66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ad6a:	2100      	movs	r1, #0
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f000 fba9 	bl	800b4c4 <hci_send_req>
 800ad72:	4603      	mov	r3, r0
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	da01      	bge.n	800ad7c <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800ad78:	23ff      	movs	r3, #255	; 0xff
 800ad7a:	e004      	b.n	800ad86 <aci_hal_write_config_data+0x100>
  return status;
 800ad7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad80:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ad84:	781b      	ldrb	r3, [r3, #0]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b0cc      	sub	sp, #304	; 0x130
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	4602      	mov	r2, r0
 800ad98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad9c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ada0:	701a      	strb	r2, [r3, #0]
 800ada2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ada6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800adaa:	460a      	mov	r2, r1
 800adac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800adae:	f107 0310 	add.w	r3, r7, #16
 800adb2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800adb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800adba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800adbe:	2200      	movs	r2, #0
 800adc0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800adc2:	2300      	movs	r3, #0
 800adc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800adc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adcc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800add0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800add4:	7812      	ldrb	r2, [r2, #0]
 800add6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800add8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800addc:	3301      	adds	r3, #1
 800adde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800ade2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ade6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800adea:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800adee:	7812      	ldrb	r2, [r2, #0]
 800adf0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800adf2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800adf6:	3301      	adds	r3, #1
 800adf8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800adfc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ae00:	2218      	movs	r2, #24
 800ae02:	2100      	movs	r1, #0
 800ae04:	4618      	mov	r0, r3
 800ae06:	f000 fc9f 	bl	800b748 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ae0a:	233f      	movs	r3, #63	; 0x3f
 800ae0c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800ae10:	230f      	movs	r3, #15
 800ae12:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ae16:	f107 0310 	add.w	r3, r7, #16
 800ae1a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ae1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae22:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ae26:	f107 030f 	add.w	r3, r7, #15
 800ae2a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ae34:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ae38:	2100      	movs	r1, #0
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f000 fb42 	bl	800b4c4 <hci_send_req>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	da01      	bge.n	800ae4a <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800ae46:	23ff      	movs	r3, #255	; 0xff
 800ae48:	e004      	b.n	800ae54 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800ae4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae4e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ae52:	781b      	ldrb	r3, [r3, #0]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}

0800ae5e <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800ae5e:	b580      	push	{r7, lr}
 800ae60:	b0cc      	sub	sp, #304	; 0x130
 800ae62:	af00      	add	r7, sp, #0
 800ae64:	4602      	mov	r2, r0
 800ae66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae6a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ae6e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800ae70:	f107 0310 	add.w	r3, r7, #16
 800ae74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ae78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae7c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ae80:	2200      	movs	r2, #0
 800ae82:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ae84:	2300      	movs	r3, #0
 800ae86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800ae8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae8e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ae92:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ae96:	8812      	ldrh	r2, [r2, #0]
 800ae98:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ae9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae9e:	3302      	adds	r3, #2
 800aea0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800aea4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aea8:	2218      	movs	r2, #24
 800aeaa:	2100      	movs	r1, #0
 800aeac:	4618      	mov	r0, r3
 800aeae:	f000 fc4b 	bl	800b748 <Osal_MemSet>
  rq.ogf = 0x3f;
 800aeb2:	233f      	movs	r3, #63	; 0x3f
 800aeb4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800aeb8:	2318      	movs	r3, #24
 800aeba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800aebe:	f107 0310 	add.w	r3, r7, #16
 800aec2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800aec6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aeca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800aece:	f107 030f 	add.w	r3, r7, #15
 800aed2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800aed6:	2301      	movs	r3, #1
 800aed8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800aedc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aee0:	2100      	movs	r1, #0
 800aee2:	4618      	mov	r0, r3
 800aee4:	f000 faee 	bl	800b4c4 <hci_send_req>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	da01      	bge.n	800aef2 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800aeee:	23ff      	movs	r3, #255	; 0xff
 800aef0:	e004      	b.n	800aefc <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800aef2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aef6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800aefa:	781b      	ldrb	r3, [r3, #0]
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b088      	sub	sp, #32
 800af0a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800af0c:	2300      	movs	r3, #0
 800af0e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800af10:	f107 0308 	add.w	r3, r7, #8
 800af14:	2218      	movs	r2, #24
 800af16:	2100      	movs	r1, #0
 800af18:	4618      	mov	r0, r3
 800af1a:	f000 fc15 	bl	800b748 <Osal_MemSet>
  rq.ogf = 0x03;
 800af1e:	2303      	movs	r3, #3
 800af20:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800af22:	2303      	movs	r3, #3
 800af24:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800af26:	1dfb      	adds	r3, r7, #7
 800af28:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800af2a:	2301      	movs	r3, #1
 800af2c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800af2e:	f107 0308 	add.w	r3, r7, #8
 800af32:	2100      	movs	r1, #0
 800af34:	4618      	mov	r0, r3
 800af36:	f000 fac5 	bl	800b4c4 <hci_send_req>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	da01      	bge.n	800af44 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800af40:	23ff      	movs	r3, #255	; 0xff
 800af42:	e000      	b.n	800af46 <hci_reset+0x40>
  return status;
 800af44:	79fb      	ldrb	r3, [r7, #7]
}
 800af46:	4618      	mov	r0, r3
 800af48:	3720      	adds	r7, #32
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}

0800af4e <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800af4e:	b580      	push	{r7, lr}
 800af50:	b0ce      	sub	sp, #312	; 0x138
 800af52:	af00      	add	r7, sp, #0
 800af54:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800af58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af5c:	6019      	str	r1, [r3, #0]
 800af5e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800af62:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800af66:	601a      	str	r2, [r3, #0]
 800af68:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800af6c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800af70:	4602      	mov	r2, r0
 800af72:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800af74:	f107 0318 	add.w	r3, r7, #24
 800af78:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800af7c:	f107 0310 	add.w	r3, r7, #16
 800af80:	2205      	movs	r2, #5
 800af82:	2100      	movs	r1, #0
 800af84:	4618      	mov	r0, r3
 800af86:	f000 fbdf 	bl	800b748 <Osal_MemSet>
  int index_input = 0;
 800af8a:	2300      	movs	r3, #0
 800af8c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800af90:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800af94:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800af98:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800af9c:	8812      	ldrh	r2, [r2, #0]
 800af9e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800afa0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800afa4:	3302      	adds	r3, #2
 800afa6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800afaa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800afae:	2218      	movs	r2, #24
 800afb0:	2100      	movs	r1, #0
 800afb2:	4618      	mov	r0, r3
 800afb4:	f000 fbc8 	bl	800b748 <Osal_MemSet>
  rq.ogf = 0x08;
 800afb8:	2308      	movs	r3, #8
 800afba:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800afbe:	2330      	movs	r3, #48	; 0x30
 800afc0:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800afc4:	f107 0318 	add.w	r3, r7, #24
 800afc8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800afcc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800afd0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800afd4:	f107 0310 	add.w	r3, r7, #16
 800afd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800afdc:	2305      	movs	r3, #5
 800afde:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800afe2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800afe6:	2100      	movs	r1, #0
 800afe8:	4618      	mov	r0, r3
 800afea:	f000 fa6b 	bl	800b4c4 <hci_send_req>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	da01      	bge.n	800aff8 <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 800aff4:	23ff      	movs	r3, #255	; 0xff
 800aff6:	e023      	b.n	800b040 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 800aff8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800affc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d005      	beq.n	800b012 <hci_le_read_phy+0xc4>
    return resp.Status;
 800b006:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b00a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	e016      	b.n	800b040 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 800b012:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b016:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800b01a:	78da      	ldrb	r2, [r3, #3]
 800b01c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b020:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800b028:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b02c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800b030:	791a      	ldrb	r2, [r3, #4]
 800b032:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b036:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}

0800b04a <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800b04a:	b590      	push	{r4, r7, lr}
 800b04c:	b0cd      	sub	sp, #308	; 0x134
 800b04e:	af00      	add	r7, sp, #0
 800b050:	4604      	mov	r4, r0
 800b052:	4608      	mov	r0, r1
 800b054:	4611      	mov	r1, r2
 800b056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b05a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b05e:	4622      	mov	r2, r4
 800b060:	701a      	strb	r2, [r3, #0]
 800b062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b066:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b06a:	4602      	mov	r2, r0
 800b06c:	701a      	strb	r2, [r3, #0]
 800b06e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b072:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800b076:	460a      	mov	r2, r1
 800b078:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800b07a:	f107 0310 	add.w	r3, r7, #16
 800b07e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b086:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b08a:	2200      	movs	r2, #0
 800b08c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b08e:	2300      	movs	r3, #0
 800b090:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800b094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b098:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b09c:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800b0a0:	7812      	ldrb	r2, [r2, #0]
 800b0a2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b0a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800b0ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b0b6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800b0ba:	7812      	ldrb	r2, [r2, #0]
 800b0bc:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b0be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800b0c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b0d0:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800b0d4:	7812      	ldrb	r2, [r2, #0]
 800b0d6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b0d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b0dc:	3301      	adds	r3, #1
 800b0de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b0e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b0e6:	2218      	movs	r2, #24
 800b0e8:	2100      	movs	r1, #0
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f000 fb2c 	bl	800b748 <Osal_MemSet>
  rq.ogf = 0x08;
 800b0f0:	2308      	movs	r3, #8
 800b0f2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800b0f6:	2331      	movs	r3, #49	; 0x31
 800b0f8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b0fc:	f107 0310 	add.w	r3, r7, #16
 800b100:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b104:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b108:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b10c:	f107 030f 	add.w	r3, r7, #15
 800b110:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b114:	2301      	movs	r3, #1
 800b116:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b11a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b11e:	2100      	movs	r1, #0
 800b120:	4618      	mov	r0, r3
 800b122:	f000 f9cf 	bl	800b4c4 <hci_send_req>
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	da01      	bge.n	800b130 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800b12c:	23ff      	movs	r3, #255	; 0xff
 800b12e:	e004      	b.n	800b13a <hci_le_set_default_phy+0xf0>
  return status;
 800b130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b134:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b138:	781b      	ldrb	r3, [r3, #0]
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800b140:	46bd      	mov	sp, r7
 800b142:	bd90      	pop	{r4, r7, pc}

0800b144 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 800b144:	b5b0      	push	{r4, r5, r7, lr}
 800b146:	b0cc      	sub	sp, #304	; 0x130
 800b148:	af00      	add	r7, sp, #0
 800b14a:	4605      	mov	r5, r0
 800b14c:	460c      	mov	r4, r1
 800b14e:	4610      	mov	r0, r2
 800b150:	4619      	mov	r1, r3
 800b152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b156:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b15a:	462a      	mov	r2, r5
 800b15c:	801a      	strh	r2, [r3, #0]
 800b15e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b162:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b166:	4622      	mov	r2, r4
 800b168:	801a      	strh	r2, [r3, #0]
 800b16a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b16e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800b172:	4602      	mov	r2, r0
 800b174:	801a      	strh	r2, [r3, #0]
 800b176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b17a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b17e:	460a      	mov	r2, r1
 800b180:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 800b182:	f107 0310 	add.w	r3, r7, #16
 800b186:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b18a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b18e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b192:	2200      	movs	r2, #0
 800b194:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b196:	2300      	movs	r3, #0
 800b198:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800b19c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b1a4:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800b1a8:	8812      	ldrh	r2, [r2, #0]
 800b1aa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b1ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b1b0:	3302      	adds	r3, #2
 800b1b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 800b1b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b1be:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b1c2:	8812      	ldrh	r2, [r2, #0]
 800b1c4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b1c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b1ca:	3302      	adds	r3, #2
 800b1cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 800b1d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b1d8:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800b1dc:	8812      	ldrh	r2, [r2, #0]
 800b1de:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800b1e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b1e4:	3302      	adds	r3, #2
 800b1e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Latency = Latency;
 800b1ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b1f2:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800b1f6:	8812      	ldrh	r2, [r2, #0]
 800b1f8:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 800b1fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b1fe:	3302      	adds	r3, #2
 800b200:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 800b204:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b208:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800b20c:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 800b20e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b212:	3302      	adds	r3, #2
 800b214:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b218:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b21c:	2218      	movs	r2, #24
 800b21e:	2100      	movs	r1, #0
 800b220:	4618      	mov	r0, r3
 800b222:	f000 fa91 	bl	800b748 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b226:	233f      	movs	r3, #63	; 0x3f
 800b228:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x181;
 800b22c:	f240 1381 	movw	r3, #385	; 0x181
 800b230:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800b234:	230f      	movs	r3, #15
 800b236:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800b23a:	f107 0310 	add.w	r3, r7, #16
 800b23e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b242:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b246:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b24a:	f107 030f 	add.w	r3, r7, #15
 800b24e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b252:	2301      	movs	r3, #1
 800b254:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b258:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b25c:	2100      	movs	r1, #0
 800b25e:	4618      	mov	r0, r3
 800b260:	f000 f930 	bl	800b4c4 <hci_send_req>
 800b264:	4603      	mov	r3, r0
 800b266:	2b00      	cmp	r3, #0
 800b268:	da01      	bge.n	800b26e <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 800b26a:	23ff      	movs	r3, #255	; 0xff
 800b26c:	e004      	b.n	800b278 <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 800b26e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b272:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b276:	781b      	ldrb	r3, [r3, #0]
}
 800b278:	4618      	mov	r0, r3
 800b27a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b27e:	46bd      	mov	sp, r7
 800b280:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b284 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b086      	sub	sp, #24
 800b288:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b28a:	f3ef 8310 	mrs	r3, PRIMASK
 800b28e:	60fb      	str	r3, [r7, #12]
  return(result);
 800b290:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800b292:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b294:	b672      	cpsid	i
}
 800b296:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800b298:	1cbb      	adds	r3, r7, #2
 800b29a:	4619      	mov	r1, r3
 800b29c:	4812      	ldr	r0, [pc, #72]	; (800b2e8 <DbgTrace_TxCpltCallback+0x64>)
 800b29e:	f001 f8f8 	bl	800c492 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800b2a2:	1cbb      	adds	r3, r7, #2
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	4810      	ldr	r0, [pc, #64]	; (800b2e8 <DbgTrace_TxCpltCallback+0x64>)
 800b2a8:	f001 f9e4 	bl	800c674 <CircularQueue_Sense>
 800b2ac:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d00c      	beq.n	800b2ce <DbgTrace_TxCpltCallback+0x4a>
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	f383 8810 	msr	PRIMASK, r3
}
 800b2be:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800b2c0:	887b      	ldrh	r3, [r7, #2]
 800b2c2:	4a0a      	ldr	r2, [pc, #40]	; (800b2ec <DbgTrace_TxCpltCallback+0x68>)
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	6938      	ldr	r0, [r7, #16]
 800b2c8:	f7f5 fefb 	bl	80010c2 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800b2cc:	e008      	b.n	800b2e0 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800b2ce:	4b08      	ldr	r3, [pc, #32]	; (800b2f0 <DbgTrace_TxCpltCallback+0x6c>)
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	701a      	strb	r2, [r3, #0]
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f383 8810 	msr	PRIMASK, r3
}
 800b2de:	bf00      	nop
}
 800b2e0:	bf00      	nop
 800b2e2:	3718      	adds	r7, #24
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	20000738 	.word	0x20000738
 800b2ec:	0800b285 	.word	0x0800b285
 800b2f0:	20000041 	.word	0x20000041

0800b2f4 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b082      	sub	sp, #8
 800b2f8:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800b2fa:	f7f5 fedc 	bl	80010b6 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800b2fe:	2302      	movs	r3, #2
 800b300:	9300      	str	r3, [sp, #0]
 800b302:	2300      	movs	r3, #0
 800b304:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b308:	4903      	ldr	r1, [pc, #12]	; (800b318 <DbgTraceInit+0x24>)
 800b30a:	4804      	ldr	r0, [pc, #16]	; (800b31c <DbgTraceInit+0x28>)
 800b30c:	f000 fe68 	bl	800bfe0 <CircularQueue_Init>
#endif 
#endif
  return;
 800b310:	bf00      	nop
}
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	20000758 	.word	0x20000758
 800b31c:	20000738 	.word	0x20000738

0800b320 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	60f8      	str	r0, [r7, #12]
 800b328:	60b9      	str	r1, [r7, #8]
 800b32a:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	68b9      	ldr	r1, [r7, #8]
 800b330:	68f8      	ldr	r0, [r7, #12]
 800b332:	f000 f805 	bl	800b340 <DbgTraceWrite>
 800b336:	4603      	mov	r3, r0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3710      	adds	r7, #16
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b08a      	sub	sp, #40	; 0x28
 800b344:	af00      	add	r7, sp, #0
 800b346:	60f8      	str	r0, [r7, #12]
 800b348:	60b9      	str	r1, [r7, #8]
 800b34a:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800b34c:	2300      	movs	r3, #0
 800b34e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b350:	f3ef 8310 	mrs	r3, PRIMASK
 800b354:	61bb      	str	r3, [r7, #24]
  return(result);
 800b356:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800b358:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b360:	d102      	bne.n	800b368 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800b362:	2300      	movs	r3, #0
 800b364:	627b      	str	r3, [r7, #36]	; 0x24
 800b366:	e037      	b.n	800b3d8 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2b01      	cmp	r3, #1
 800b36c:	d006      	beq.n	800b37c <DbgTraceWrite+0x3c>
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2b02      	cmp	r3, #2
 800b372:	d003      	beq.n	800b37c <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800b374:	f04f 33ff 	mov.w	r3, #4294967295
 800b378:	627b      	str	r3, [r7, #36]	; 0x24
 800b37a:	e02d      	b.n	800b3d8 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d02a      	beq.n	800b3d8 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800b386:	b672      	cpsid	i
}
 800b388:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	b29a      	uxth	r2, r3
 800b38e:	2301      	movs	r3, #1
 800b390:	68b9      	ldr	r1, [r7, #8]
 800b392:	4814      	ldr	r0, [pc, #80]	; (800b3e4 <DbgTraceWrite+0xa4>)
 800b394:	f000 fe56 	bl	800c044 <CircularQueue_Add>
 800b398:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800b39a:	69fb      	ldr	r3, [r7, #28]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d015      	beq.n	800b3cc <DbgTraceWrite+0x8c>
 800b3a0:	4b11      	ldr	r3, [pc, #68]	; (800b3e8 <DbgTraceWrite+0xa8>)
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	b2db      	uxtb	r3, r3
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d010      	beq.n	800b3cc <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800b3aa:	4b0f      	ldr	r3, [pc, #60]	; (800b3e8 <DbgTraceWrite+0xa8>)
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	701a      	strb	r2, [r3, #0]
 800b3b0:	6a3b      	ldr	r3, [r7, #32]
 800b3b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	f383 8810 	msr	PRIMASK, r3
}
 800b3ba:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	4a0a      	ldr	r2, [pc, #40]	; (800b3ec <DbgTraceWrite+0xac>)
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	69f8      	ldr	r0, [r7, #28]
 800b3c6:	f7f5 fe7c 	bl	80010c2 <DbgOutputTraces>
 800b3ca:	e005      	b.n	800b3d8 <DbgTraceWrite+0x98>
 800b3cc:	6a3b      	ldr	r3, [r7, #32]
 800b3ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	f383 8810 	msr	PRIMASK, r3
}
 800b3d6:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800b3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3728      	adds	r7, #40	; 0x28
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	20000738 	.word	0x20000738
 800b3e8:	20000041 	.word	0x20000041
 800b3ec:	0800b285 	.word	0x0800b285

0800b3f0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	4a08      	ldr	r2, [pc, #32]	; (800b420 <hci_init+0x30>)
 800b400:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800b402:	4a08      	ldr	r2, [pc, #32]	; (800b424 <hci_init+0x34>)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800b408:	4806      	ldr	r0, [pc, #24]	; (800b424 <hci_init+0x34>)
 800b40a:	f000 f979 	bl	800b700 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4618      	mov	r0, r3
 800b414:	f000 f8da 	bl	800b5cc <TlInit>

  return;
 800b418:	bf00      	nop
}
 800b41a:	3708      	adds	r7, #8
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	20001780 	.word	0x20001780
 800b424:	20001758 	.word	0x20001758

0800b428 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800b42e:	4822      	ldr	r0, [pc, #136]	; (800b4b8 <hci_user_evt_proc+0x90>)
 800b430:	f000 fd28 	bl	800be84 <LST_is_empty>
 800b434:	4603      	mov	r3, r0
 800b436:	2b00      	cmp	r3, #0
 800b438:	d12b      	bne.n	800b492 <hci_user_evt_proc+0x6a>
 800b43a:	4b20      	ldr	r3, [pc, #128]	; (800b4bc <hci_user_evt_proc+0x94>)
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d027      	beq.n	800b492 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b442:	f107 030c 	add.w	r3, r7, #12
 800b446:	4619      	mov	r1, r3
 800b448:	481b      	ldr	r0, [pc, #108]	; (800b4b8 <hci_user_evt_proc+0x90>)
 800b44a:	f000 fdaa 	bl	800bfa2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800b44e:	4b1c      	ldr	r3, [pc, #112]	; (800b4c0 <hci_user_evt_proc+0x98>)
 800b450:	69db      	ldr	r3, [r3, #28]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d00c      	beq.n	800b470 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800b45a:	2301      	movs	r3, #1
 800b45c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b45e:	4b18      	ldr	r3, [pc, #96]	; (800b4c0 <hci_user_evt_proc+0x98>)
 800b460:	69db      	ldr	r3, [r3, #28]
 800b462:	1d3a      	adds	r2, r7, #4
 800b464:	4610      	mov	r0, r2
 800b466:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800b468:	793a      	ldrb	r2, [r7, #4]
 800b46a:	4b14      	ldr	r3, [pc, #80]	; (800b4bc <hci_user_evt_proc+0x94>)
 800b46c:	701a      	strb	r2, [r3, #0]
 800b46e:	e002      	b.n	800b476 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800b470:	4b12      	ldr	r3, [pc, #72]	; (800b4bc <hci_user_evt_proc+0x94>)
 800b472:	2201      	movs	r2, #1
 800b474:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800b476:	4b11      	ldr	r3, [pc, #68]	; (800b4bc <hci_user_evt_proc+0x94>)
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d004      	beq.n	800b488 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	4618      	mov	r0, r3
 800b482:	f001 fc4f 	bl	800cd24 <TL_MM_EvtDone>
 800b486:	e004      	b.n	800b492 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	4619      	mov	r1, r3
 800b48c:	480a      	ldr	r0, [pc, #40]	; (800b4b8 <hci_user_evt_proc+0x90>)
 800b48e:	f000 fd1b 	bl	800bec8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800b492:	4809      	ldr	r0, [pc, #36]	; (800b4b8 <hci_user_evt_proc+0x90>)
 800b494:	f000 fcf6 	bl	800be84 <LST_is_empty>
 800b498:	4603      	mov	r3, r0
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d107      	bne.n	800b4ae <hci_user_evt_proc+0x86>
 800b49e:	4b07      	ldr	r3, [pc, #28]	; (800b4bc <hci_user_evt_proc+0x94>)
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d003      	beq.n	800b4ae <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800b4a6:	4804      	ldr	r0, [pc, #16]	; (800b4b8 <hci_user_evt_proc+0x90>)
 800b4a8:	f7f8 fe0e 	bl	80040c8 <hci_notify_asynch_evt>
  }


  return;
 800b4ac:	bf00      	nop
 800b4ae:	bf00      	nop
}
 800b4b0:	3710      	adds	r7, #16
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	20000218 	.word	0x20000218
 800b4bc:	20000224 	.word	0x20000224
 800b4c0:	20001758 	.word	0x20001758

0800b4c4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b088      	sub	sp, #32
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	f000 f8d1 	bl	800b678 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	885b      	ldrh	r3, [r3, #2]
 800b4de:	b21b      	sxth	r3, r3
 800b4e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b4e4:	b21a      	sxth	r2, r3
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	881b      	ldrh	r3, [r3, #0]
 800b4ea:	029b      	lsls	r3, r3, #10
 800b4ec:	b21b      	sxth	r3, r3
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	b21b      	sxth	r3, r3
 800b4f2:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800b4f4:	4b33      	ldr	r3, [pc, #204]	; (800b5c4 <hci_send_req+0x100>)
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	68db      	ldr	r3, [r3, #12]
 800b4fe:	b2d9      	uxtb	r1, r3
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	689a      	ldr	r2, [r3, #8]
 800b504:	8bbb      	ldrh	r3, [r7, #28]
 800b506:	4618      	mov	r0, r3
 800b508:	f000 f890 	bl	800b62c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800b50c:	e04e      	b.n	800b5ac <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800b50e:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800b512:	f7f8 fdf0 	bl	80040f6 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800b516:	e043      	b.n	800b5a0 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800b518:	f107 030c 	add.w	r3, r7, #12
 800b51c:	4619      	mov	r1, r3
 800b51e:	482a      	ldr	r0, [pc, #168]	; (800b5c8 <hci_send_req+0x104>)
 800b520:	f000 fd3f 	bl	800bfa2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	7a5b      	ldrb	r3, [r3, #9]
 800b528:	2b0f      	cmp	r3, #15
 800b52a:	d114      	bne.n	800b556 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	330b      	adds	r3, #11
 800b530:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	885b      	ldrh	r3, [r3, #2]
 800b536:	b29b      	uxth	r3, r3
 800b538:	8bba      	ldrh	r2, [r7, #28]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d104      	bne.n	800b548 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	691b      	ldr	r3, [r3, #16]
 800b542:	693a      	ldr	r2, [r7, #16]
 800b544:	7812      	ldrb	r2, [r2, #0]
 800b546:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	785b      	ldrb	r3, [r3, #1]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d027      	beq.n	800b5a0 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800b550:	2301      	movs	r3, #1
 800b552:	77fb      	strb	r3, [r7, #31]
 800b554:	e024      	b.n	800b5a0 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	330b      	adds	r3, #11
 800b55a:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800b55c:	69bb      	ldr	r3, [r7, #24]
 800b55e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b562:	b29b      	uxth	r3, r3
 800b564:	8bba      	ldrh	r2, [r7, #28]
 800b566:	429a      	cmp	r2, r3
 800b568:	d114      	bne.n	800b594 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	7a9b      	ldrb	r3, [r3, #10]
 800b56e:	3b03      	subs	r3, #3
 800b570:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	695a      	ldr	r2, [r3, #20]
 800b576:	7dfb      	ldrb	r3, [r7, #23]
 800b578:	429a      	cmp	r2, r3
 800b57a:	bfa8      	it	ge
 800b57c:	461a      	movge	r2, r3
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6918      	ldr	r0, [r3, #16]
 800b586:	69bb      	ldr	r3, [r7, #24]
 800b588:	1cd9      	adds	r1, r3, #3
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	695b      	ldr	r3, [r3, #20]
 800b58e:	461a      	mov	r2, r3
 800b590:	f002 fe01 	bl	800e196 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800b594:	69bb      	ldr	r3, [r7, #24]
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d001      	beq.n	800b5a0 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800b59c:	2301      	movs	r3, #1
 800b59e:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800b5a0:	4809      	ldr	r0, [pc, #36]	; (800b5c8 <hci_send_req+0x104>)
 800b5a2:	f000 fc6f 	bl	800be84 <LST_is_empty>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d0b5      	beq.n	800b518 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800b5ac:	7ffb      	ldrb	r3, [r7, #31]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d0ad      	beq.n	800b50e <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800b5b2:	2001      	movs	r0, #1
 800b5b4:	f000 f860 	bl	800b678 <NotifyCmdStatus>

  return 0;
 800b5b8:	2300      	movs	r3, #0
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3720      	adds	r7, #32
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	20001784 	.word	0x20001784
 800b5c8:	20001778 	.word	0x20001778

0800b5cc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b086      	sub	sp, #24
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800b5d4:	480f      	ldr	r0, [pc, #60]	; (800b614 <TlInit+0x48>)
 800b5d6:	f000 fc45 	bl	800be64 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800b5da:	4a0f      	ldr	r2, [pc, #60]	; (800b618 <TlInit+0x4c>)
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800b5e0:	480e      	ldr	r0, [pc, #56]	; (800b61c <TlInit+0x50>)
 800b5e2:	f000 fc3f 	bl	800be64 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800b5e6:	4b0e      	ldr	r3, [pc, #56]	; (800b620 <TlInit+0x54>)
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800b5ec:	4b0d      	ldr	r3, [pc, #52]	; (800b624 <TlInit+0x58>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00a      	beq.n	800b60a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800b5f8:	4b0b      	ldr	r3, [pc, #44]	; (800b628 <TlInit+0x5c>)
 800b5fa:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800b5fc:	4b09      	ldr	r3, [pc, #36]	; (800b624 <TlInit+0x58>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f107 0208 	add.w	r2, r7, #8
 800b604:	4610      	mov	r0, r2
 800b606:	4798      	blx	r3
  }

  return;
 800b608:	bf00      	nop
 800b60a:	bf00      	nop
}
 800b60c:	3718      	adds	r7, #24
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	20001778 	.word	0x20001778
 800b618:	20000220 	.word	0x20000220
 800b61c:	20000218 	.word	0x20000218
 800b620:	20000224 	.word	0x20000224
 800b624:	20001758 	.word	0x20001758
 800b628:	0800b6b9 	.word	0x0800b6b9

0800b62c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	4603      	mov	r3, r0
 800b634:	603a      	str	r2, [r7, #0]
 800b636:	80fb      	strh	r3, [r7, #6]
 800b638:	460b      	mov	r3, r1
 800b63a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800b63c:	4b0c      	ldr	r3, [pc, #48]	; (800b670 <SendCmd+0x44>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	88fa      	ldrh	r2, [r7, #6]
 800b642:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800b646:	4b0a      	ldr	r3, [pc, #40]	; (800b670 <SendCmd+0x44>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	797a      	ldrb	r2, [r7, #5]
 800b64c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800b64e:	4b08      	ldr	r3, [pc, #32]	; (800b670 <SendCmd+0x44>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	330c      	adds	r3, #12
 800b654:	797a      	ldrb	r2, [r7, #5]
 800b656:	6839      	ldr	r1, [r7, #0]
 800b658:	4618      	mov	r0, r3
 800b65a:	f002 fd9c 	bl	800e196 <memcpy>

  hciContext.io.Send(0,0);
 800b65e:	4b05      	ldr	r3, [pc, #20]	; (800b674 <SendCmd+0x48>)
 800b660:	691b      	ldr	r3, [r3, #16]
 800b662:	2100      	movs	r1, #0
 800b664:	2000      	movs	r0, #0
 800b666:	4798      	blx	r3

  return;
 800b668:	bf00      	nop
}
 800b66a:	3708      	adds	r7, #8
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	20000220 	.word	0x20000220
 800b674:	20001758 	.word	0x20001758

0800b678 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b082      	sub	sp, #8
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	4603      	mov	r3, r0
 800b680:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800b682:	79fb      	ldrb	r3, [r7, #7]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d108      	bne.n	800b69a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800b688:	4b0a      	ldr	r3, [pc, #40]	; (800b6b4 <NotifyCmdStatus+0x3c>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d00d      	beq.n	800b6ac <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800b690:	4b08      	ldr	r3, [pc, #32]	; (800b6b4 <NotifyCmdStatus+0x3c>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	2000      	movs	r0, #0
 800b696:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800b698:	e008      	b.n	800b6ac <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800b69a:	4b06      	ldr	r3, [pc, #24]	; (800b6b4 <NotifyCmdStatus+0x3c>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d004      	beq.n	800b6ac <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800b6a2:	4b04      	ldr	r3, [pc, #16]	; (800b6b4 <NotifyCmdStatus+0x3c>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	2001      	movs	r0, #1
 800b6a8:	4798      	blx	r3
  return;
 800b6aa:	bf00      	nop
 800b6ac:	bf00      	nop
}
 800b6ae:	3708      	adds	r7, #8
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	20001780 	.word	0x20001780

0800b6b8 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b082      	sub	sp, #8
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	7a5b      	ldrb	r3, [r3, #9]
 800b6c4:	2b0f      	cmp	r3, #15
 800b6c6:	d003      	beq.n	800b6d0 <TlEvtReceived+0x18>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	7a5b      	ldrb	r3, [r3, #9]
 800b6cc:	2b0e      	cmp	r3, #14
 800b6ce:	d107      	bne.n	800b6e0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800b6d0:	6879      	ldr	r1, [r7, #4]
 800b6d2:	4809      	ldr	r0, [pc, #36]	; (800b6f8 <TlEvtReceived+0x40>)
 800b6d4:	f000 fc1e 	bl	800bf14 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800b6d8:	2000      	movs	r0, #0
 800b6da:	f7f8 fd01 	bl	80040e0 <hci_cmd_resp_release>
 800b6de:	e006      	b.n	800b6ee <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800b6e0:	6879      	ldr	r1, [r7, #4]
 800b6e2:	4806      	ldr	r0, [pc, #24]	; (800b6fc <TlEvtReceived+0x44>)
 800b6e4:	f000 fc16 	bl	800bf14 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800b6e8:	4804      	ldr	r0, [pc, #16]	; (800b6fc <TlEvtReceived+0x44>)
 800b6ea:	f7f8 fced 	bl	80040c8 <hci_notify_asynch_evt>
  }

  return;
 800b6ee:	bf00      	nop
}
 800b6f0:	3708      	adds	r7, #8
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	20001778 	.word	0x20001778
 800b6fc:	20000218 	.word	0x20000218

0800b700 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800b700:	b480      	push	{r7}
 800b702:	b083      	sub	sp, #12
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	4a05      	ldr	r2, [pc, #20]	; (800b720 <hci_register_io_bus+0x20>)
 800b70c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	4a04      	ldr	r2, [pc, #16]	; (800b724 <hci_register_io_bus+0x24>)
 800b712:	611a      	str	r2, [r3, #16]

  return;
 800b714:	bf00      	nop
}
 800b716:	370c      	adds	r7, #12
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr
 800b720:	0800ca9d 	.word	0x0800ca9d
 800b724:	0800cb05 	.word	0x0800cb05

0800b728 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	60f8      	str	r0, [r7, #12]
 800b730:	60b9      	str	r1, [r7, #8]
 800b732:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800b734:	687a      	ldr	r2, [r7, #4]
 800b736:	68b9      	ldr	r1, [r7, #8]
 800b738:	68f8      	ldr	r0, [r7, #12]
 800b73a:	f002 fd2c 	bl	800e196 <memcpy>
 800b73e:	4603      	mov	r3, r0
}
 800b740:	4618      	mov	r0, r3
 800b742:	3710      	adds	r7, #16
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800b754:	687a      	ldr	r2, [r7, #4]
 800b756:	68b9      	ldr	r1, [r7, #8]
 800b758:	68f8      	ldr	r0, [r7, #12]
 800b75a:	f002 fc9d 	bl	800e098 <memset>
 800b75e:	4603      	mov	r3, r0
}
 800b760:	4618      	mov	r0, r3
 800b762:	3710      	adds	r7, #16
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800b768:	b480      	push	{r7}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	4603      	mov	r3, r0
 800b770:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800b772:	4b0f      	ldr	r3, [pc, #60]	; (800b7b0 <OTP_Read+0x48>)
 800b774:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b776:	e002      	b.n	800b77e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	3b08      	subs	r3, #8
 800b77c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	3307      	adds	r3, #7
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	79fa      	ldrb	r2, [r7, #7]
 800b786:	429a      	cmp	r2, r3
 800b788:	d003      	beq.n	800b792 <OTP_Read+0x2a>
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	4a09      	ldr	r2, [pc, #36]	; (800b7b4 <OTP_Read+0x4c>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d1f2      	bne.n	800b778 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	3307      	adds	r3, #7
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	79fa      	ldrb	r2, [r7, #7]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d001      	beq.n	800b7a2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3714      	adds	r7, #20
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr
 800b7b0:	1fff73f8 	.word	0x1fff73f8
 800b7b4:	1fff7000 	.word	0x1fff7000

0800b7b8 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b08a      	sub	sp, #40	; 0x28
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	3301      	adds	r3, #1
 800b7ca:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800b7cc:	6a3b      	ldr	r3, [r7, #32]
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	2bff      	cmp	r3, #255	; 0xff
 800b7d2:	d14f      	bne.n	800b874 <PeerToPeer_Event_Handler+0xbc>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800b7d4:	6a3b      	ldr	r3, [r7, #32]
 800b7d6:	3302      	adds	r3, #2
 800b7d8:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 800b7da:	69fb      	ldr	r3, [r7, #28]
 800b7dc:	881b      	ldrh	r3, [r3, #0]
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	f640 4301 	movw	r3, #3073	; 0xc01
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d140      	bne.n	800b86c <PeerToPeer_Event_Handler+0xb4>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800b7ea:	69fb      	ldr	r3, [r7, #28]
 800b7ec:	3302      	adds	r3, #2
 800b7ee:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800b7f0:	69bb      	ldr	r3, [r7, #24]
 800b7f2:	885b      	ldrh	r3, [r3, #2]
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	4b22      	ldr	r3, [pc, #136]	; (800b884 <PeerToPeer_Event_Handler+0xcc>)
 800b7fa:	889b      	ldrh	r3, [r3, #4]
 800b7fc:	3302      	adds	r3, #2
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d118      	bne.n	800b834 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 800b802:	2301      	movs	r3, #1
 800b804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800b808:	69bb      	ldr	r3, [r7, #24]
 800b80a:	7a1b      	ldrb	r3, [r3, #8]
 800b80c:	f003 0301 	and.w	r3, r3, #1
 800b810:	2b00      	cmp	r3, #0
 800b812:	d007      	beq.n	800b824 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800b814:	2300      	movs	r3, #0
 800b816:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800b818:	f107 0308 	add.w	r3, r7, #8
 800b81c:	4618      	mov	r0, r3
 800b81e:	f7f8 fcad 	bl	800417c <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 800b822:	e025      	b.n	800b870 <PeerToPeer_Event_Handler+0xb8>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800b824:	2301      	movs	r3, #1
 800b826:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800b828:	f107 0308 	add.w	r3, r7, #8
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7f8 fca5 	bl	800417c <P2PS_STM_App_Notification>
        break;
 800b832:	e01d      	b.n	800b870 <PeerToPeer_Event_Handler+0xb8>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800b834:	69bb      	ldr	r3, [r7, #24]
 800b836:	885b      	ldrh	r3, [r3, #2]
 800b838:	b29b      	uxth	r3, r3
 800b83a:	461a      	mov	r2, r3
 800b83c:	4b11      	ldr	r3, [pc, #68]	; (800b884 <PeerToPeer_Event_Handler+0xcc>)
 800b83e:	885b      	ldrh	r3, [r3, #2]
 800b840:	3301      	adds	r3, #1
 800b842:	429a      	cmp	r2, r3
 800b844:	d114      	bne.n	800b870 <PeerToPeer_Event_Handler+0xb8>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 800b846:	4810      	ldr	r0, [pc, #64]	; (800b888 <PeerToPeer_Event_Handler+0xd0>)
 800b848:	f002 fb46 	bl	800ded8 <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800b84c:	2303      	movs	r3, #3
 800b84e:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800b850:	69bb      	ldr	r3, [r7, #24]
 800b852:	88db      	ldrh	r3, [r3, #6]
 800b854:	b29b      	uxth	r3, r3
 800b856:	b2db      	uxtb	r3, r3
 800b858:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	3308      	adds	r3, #8
 800b85e:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800b860:	f107 0308 	add.w	r3, r7, #8
 800b864:	4618      	mov	r0, r3
 800b866:	f7f8 fc89 	bl	800417c <P2PS_STM_App_Notification>
        break;
 800b86a:	e001      	b.n	800b870 <PeerToPeer_Event_Handler+0xb8>

        default:
          break;
 800b86c:	bf00      	nop
 800b86e:	e002      	b.n	800b876 <PeerToPeer_Event_Handler+0xbe>
        break;
 800b870:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800b872:	e000      	b.n	800b876 <PeerToPeer_Event_Handler+0xbe>

    default:
      break;
 800b874:	bf00      	nop
  }

  return(return_value);
 800b876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800b87a:	4618      	mov	r0, r3
 800b87c:	3728      	adds	r7, #40	; 0x28
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	20000228 	.word	0x20000228
 800b888:	0801132c 	.word	0x0801132c

0800b88c <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b08a      	sub	sp, #40	; 0x28
 800b890:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800b892:	484a      	ldr	r0, [pc, #296]	; (800b9bc <P2PS_STM_Init+0x130>)
 800b894:	f001 f854 	bl	800c940 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800b898:	238f      	movs	r3, #143	; 0x8f
 800b89a:	703b      	strb	r3, [r7, #0]
 800b89c:	23e5      	movs	r3, #229	; 0xe5
 800b89e:	707b      	strb	r3, [r7, #1]
 800b8a0:	23b3      	movs	r3, #179	; 0xb3
 800b8a2:	70bb      	strb	r3, [r7, #2]
 800b8a4:	23d5      	movs	r3, #213	; 0xd5
 800b8a6:	70fb      	strb	r3, [r7, #3]
 800b8a8:	232e      	movs	r3, #46	; 0x2e
 800b8aa:	713b      	strb	r3, [r7, #4]
 800b8ac:	237f      	movs	r3, #127	; 0x7f
 800b8ae:	717b      	strb	r3, [r7, #5]
 800b8b0:	234a      	movs	r3, #74	; 0x4a
 800b8b2:	71bb      	strb	r3, [r7, #6]
 800b8b4:	2398      	movs	r3, #152	; 0x98
 800b8b6:	71fb      	strb	r3, [r7, #7]
 800b8b8:	232a      	movs	r3, #42	; 0x2a
 800b8ba:	723b      	strb	r3, [r7, #8]
 800b8bc:	2348      	movs	r3, #72	; 0x48
 800b8be:	727b      	strb	r3, [r7, #9]
 800b8c0:	237a      	movs	r3, #122	; 0x7a
 800b8c2:	72bb      	strb	r3, [r7, #10]
 800b8c4:	23cc      	movs	r3, #204	; 0xcc
 800b8c6:	72fb      	strb	r3, [r7, #11]
 800b8c8:	2340      	movs	r3, #64	; 0x40
 800b8ca:	733b      	strb	r3, [r7, #12]
 800b8cc:	23fe      	movs	r3, #254	; 0xfe
 800b8ce:	737b      	strb	r3, [r7, #13]
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	73bb      	strb	r3, [r7, #14]
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800b8d8:	4639      	mov	r1, r7
 800b8da:	4b39      	ldr	r3, [pc, #228]	; (800b9c0 <P2PS_STM_Init+0x134>)
 800b8dc:	9300      	str	r3, [sp, #0]
 800b8de:	2306      	movs	r3, #6
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	2002      	movs	r0, #2
 800b8e4:	f7fe ff48 	bl	800a778 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800b8e8:	2319      	movs	r3, #25
 800b8ea:	703b      	strb	r3, [r7, #0]
 800b8ec:	23ed      	movs	r3, #237	; 0xed
 800b8ee:	707b      	strb	r3, [r7, #1]
 800b8f0:	2382      	movs	r3, #130	; 0x82
 800b8f2:	70bb      	strb	r3, [r7, #2]
 800b8f4:	23ae      	movs	r3, #174	; 0xae
 800b8f6:	70fb      	strb	r3, [r7, #3]
 800b8f8:	23ed      	movs	r3, #237	; 0xed
 800b8fa:	713b      	strb	r3, [r7, #4]
 800b8fc:	2321      	movs	r3, #33	; 0x21
 800b8fe:	717b      	strb	r3, [r7, #5]
 800b900:	234c      	movs	r3, #76	; 0x4c
 800b902:	71bb      	strb	r3, [r7, #6]
 800b904:	239d      	movs	r3, #157	; 0x9d
 800b906:	71fb      	strb	r3, [r7, #7]
 800b908:	2341      	movs	r3, #65	; 0x41
 800b90a:	723b      	strb	r3, [r7, #8]
 800b90c:	2345      	movs	r3, #69	; 0x45
 800b90e:	727b      	strb	r3, [r7, #9]
 800b910:	2322      	movs	r3, #34	; 0x22
 800b912:	72bb      	strb	r3, [r7, #10]
 800b914:	238e      	movs	r3, #142	; 0x8e
 800b916:	72fb      	strb	r3, [r7, #11]
 800b918:	2341      	movs	r3, #65	; 0x41
 800b91a:	733b      	strb	r3, [r7, #12]
 800b91c:	23fe      	movs	r3, #254	; 0xfe
 800b91e:	737b      	strb	r3, [r7, #13]
 800b920:	2300      	movs	r3, #0
 800b922:	73bb      	strb	r3, [r7, #14]
 800b924:	2300      	movs	r3, #0
 800b926:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800b928:	4b25      	ldr	r3, [pc, #148]	; (800b9c0 <P2PS_STM_Init+0x134>)
 800b92a:	8818      	ldrh	r0, [r3, #0]
 800b92c:	463a      	mov	r2, r7
 800b92e:	4b25      	ldr	r3, [pc, #148]	; (800b9c4 <P2PS_STM_Init+0x138>)
 800b930:	9305      	str	r3, [sp, #20]
 800b932:	2301      	movs	r3, #1
 800b934:	9304      	str	r3, [sp, #16]
 800b936:	230a      	movs	r3, #10
 800b938:	9303      	str	r3, [sp, #12]
 800b93a:	2301      	movs	r3, #1
 800b93c:	9302      	str	r3, [sp, #8]
 800b93e:	2300      	movs	r3, #0
 800b940:	9301      	str	r3, [sp, #4]
 800b942:	2306      	movs	r3, #6
 800b944:	9300      	str	r3, [sp, #0]
 800b946:	2302      	movs	r3, #2
 800b948:	2102      	movs	r1, #2
 800b94a:	f7fe ffeb 	bl	800a924 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800b94e:	2319      	movs	r3, #25
 800b950:	703b      	strb	r3, [r7, #0]
 800b952:	23ed      	movs	r3, #237	; 0xed
 800b954:	707b      	strb	r3, [r7, #1]
 800b956:	2382      	movs	r3, #130	; 0x82
 800b958:	70bb      	strb	r3, [r7, #2]
 800b95a:	23ae      	movs	r3, #174	; 0xae
 800b95c:	70fb      	strb	r3, [r7, #3]
 800b95e:	23ed      	movs	r3, #237	; 0xed
 800b960:	713b      	strb	r3, [r7, #4]
 800b962:	2321      	movs	r3, #33	; 0x21
 800b964:	717b      	strb	r3, [r7, #5]
 800b966:	234c      	movs	r3, #76	; 0x4c
 800b968:	71bb      	strb	r3, [r7, #6]
 800b96a:	239d      	movs	r3, #157	; 0x9d
 800b96c:	71fb      	strb	r3, [r7, #7]
 800b96e:	2341      	movs	r3, #65	; 0x41
 800b970:	723b      	strb	r3, [r7, #8]
 800b972:	2345      	movs	r3, #69	; 0x45
 800b974:	727b      	strb	r3, [r7, #9]
 800b976:	2322      	movs	r3, #34	; 0x22
 800b978:	72bb      	strb	r3, [r7, #10]
 800b97a:	238e      	movs	r3, #142	; 0x8e
 800b97c:	72fb      	strb	r3, [r7, #11]
 800b97e:	2342      	movs	r3, #66	; 0x42
 800b980:	733b      	strb	r3, [r7, #12]
 800b982:	23fe      	movs	r3, #254	; 0xfe
 800b984:	737b      	strb	r3, [r7, #13]
 800b986:	2300      	movs	r3, #0
 800b988:	73bb      	strb	r3, [r7, #14]
 800b98a:	2300      	movs	r3, #0
 800b98c:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800b98e:	4b0c      	ldr	r3, [pc, #48]	; (800b9c0 <P2PS_STM_Init+0x134>)
 800b990:	8818      	ldrh	r0, [r3, #0]
 800b992:	463a      	mov	r2, r7
 800b994:	4b0c      	ldr	r3, [pc, #48]	; (800b9c8 <P2PS_STM_Init+0x13c>)
 800b996:	9305      	str	r3, [sp, #20]
 800b998:	2301      	movs	r3, #1
 800b99a:	9304      	str	r3, [sp, #16]
 800b99c:	230a      	movs	r3, #10
 800b99e:	9303      	str	r3, [sp, #12]
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	9302      	str	r3, [sp, #8]
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	9301      	str	r3, [sp, #4]
 800b9a8:	2310      	movs	r3, #16
 800b9aa:	9300      	str	r3, [sp, #0]
 800b9ac:	2302      	movs	r3, #2
 800b9ae:	2102      	movs	r1, #2
 800b9b0:	f7fe ffb8 	bl	800a924 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800b9b4:	bf00      	nop
}
 800b9b6:	3710      	adds	r7, #16
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	0800b7b9 	.word	0x0800b7b9
 800b9c0:	20000228 	.word	0x20000228
 800b9c4:	2000022a 	.word	0x2000022a
 800b9c8:	2000022c 	.word	0x2000022c

0800b9cc <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b086      	sub	sp, #24
 800b9d0:	af02      	add	r7, sp, #8
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	6039      	str	r1, [r7, #0]
 800b9d6:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800b9d8:	2392      	movs	r3, #146	; 0x92
 800b9da:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800b9dc:	88fb      	ldrh	r3, [r7, #6]
 800b9de:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d10c      	bne.n	800ba00 <P2PS_STM_App_Update_Char+0x34>
  {
    case P2P_NOTIFY_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800b9e6:	4b09      	ldr	r3, [pc, #36]	; (800ba0c <P2PS_STM_App_Update_Char+0x40>)
 800b9e8:	8818      	ldrh	r0, [r3, #0]
 800b9ea:	4b08      	ldr	r3, [pc, #32]	; (800ba0c <P2PS_STM_App_Update_Char+0x40>)
 800b9ec:	8899      	ldrh	r1, [r3, #4]
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	9300      	str	r3, [sp, #0]
 800b9f2:	2302      	movs	r3, #2
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	f7ff f89d 	bl	800ab34 <aci_gatt_update_char_value>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	73fb      	strb	r3, [r7, #15]
                             aPeerToPeerContext.P2PNotifyServerToClientCharHdle,
                              0, /* charValOffset */
                             2, /* charValueLen */
                             (uint8_t *)  pPayload);
    
      break;
 800b9fe:	e000      	b.n	800ba02 <P2PS_STM_App_Update_Char+0x36>

    default:
      break;
 800ba00:	bf00      	nop
  }

  return result;
 800ba02:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800ba04:	4618      	mov	r0, r3
 800ba06:	3710      	adds	r7, #16
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}
 800ba0c:	20000228 	.word	0x20000228

0800ba10 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b088      	sub	sp, #32
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ba18:	f107 030c 	add.w	r3, r7, #12
 800ba1c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	212e      	movs	r1, #46	; 0x2e
 800ba28:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800ba2c:	f000 f94c 	bl	800bcc8 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	330b      	adds	r3, #11
 800ba34:	78db      	ldrb	r3, [r3, #3]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3720      	adds	r7, #32
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}

0800ba3e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800ba3e:	b580      	push	{r7, lr}
 800ba40:	b088      	sub	sp, #32
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ba46:	f107 030c 	add.w	r3, r7, #12
 800ba4a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800ba52:	69fb      	ldr	r3, [r7, #28]
 800ba54:	210f      	movs	r1, #15
 800ba56:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800ba5a:	f000 f935 	bl	800bcc8 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ba5e:	69fb      	ldr	r3, [r7, #28]
 800ba60:	330b      	adds	r3, #11
 800ba62:	78db      	ldrb	r3, [r3, #3]
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3720      	adds	r7, #32
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b088      	sub	sp, #32
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ba74:	f107 030c 	add.w	r3, r7, #12
 800ba78:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800ba7a:	69fb      	ldr	r3, [r7, #28]
 800ba7c:	687a      	ldr	r2, [r7, #4]
 800ba7e:	2110      	movs	r1, #16
 800ba80:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800ba84:	f000 f920 	bl	800bcc8 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	330b      	adds	r3, #11
 800ba8c:	78db      	ldrb	r3, [r3, #3]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3720      	adds	r7, #32
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
	...

0800ba98 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b08b      	sub	sp, #44	; 0x2c
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800baa0:	2300      	movs	r3, #0
 800baa2:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800baa4:	2300      	movs	r3, #0
 800baa6:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800baa8:	2300      	movs	r3, #0
 800baaa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800baac:	2300      	movs	r3, #0
 800baae:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800bab0:	2300      	movs	r3, #0
 800bab2:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800bab4:	2300      	movs	r3, #0
 800bab6:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800bab8:	2300      	movs	r3, #0
 800baba:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800babc:	2300      	movs	r3, #0
 800babe:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800bac0:	4b4a      	ldr	r3, [pc, #296]	; (800bbec <SHCI_GetWirelessFwInfo+0x154>)
 800bac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bac4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800bac8:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800bad2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4a44      	ldr	r2, [pc, #272]	; (800bbf0 <SHCI_GetWirelessFwInfo+0x158>)
 800bae0:	4293      	cmp	r3, r2
 800bae2:	d10f      	bne.n	800bb04 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	695b      	ldr	r3, [r3, #20]
 800bae8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	699b      	ldr	r3, [r3, #24]
 800baee:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	69db      	ldr	r3, [r3, #28]
 800baf4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	68db      	ldr	r3, [r3, #12]
 800bafa:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	691b      	ldr	r3, [r3, #16]
 800bb00:	617b      	str	r3, [r7, #20]
 800bb02:	e01a      	b.n	800bb3a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	009b      	lsls	r3, r3, #2
 800bb08:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800bb0c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800bb10:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	691b      	ldr	r3, [r3, #16]
 800bb18:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	695b      	ldr	r3, [r3, #20]
 800bb20:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	699b      	ldr	r3, [r3, #24]
 800bb28:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	685b      	ldr	r3, [r3, #4]
 800bb30:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800bb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3c:	0e1b      	lsrs	r3, r3, #24
 800bb3e:	b2da      	uxtb	r2, r3
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800bb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb46:	0c1b      	lsrs	r3, r3, #16
 800bb48:	b2da      	uxtb	r2, r3
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800bb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb50:	0a1b      	lsrs	r3, r3, #8
 800bb52:	b2da      	uxtb	r2, r3
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800bb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb5a:	091b      	lsrs	r3, r3, #4
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	f003 030f 	and.w	r3, r3, #15
 800bb62:	b2da      	uxtb	r2, r3
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800bb68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb6a:	b2db      	uxtb	r3, r3
 800bb6c:	f003 030f 	and.w	r3, r3, #15
 800bb70:	b2da      	uxtb	r2, r3
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800bb76:	6a3b      	ldr	r3, [r7, #32]
 800bb78:	0e1b      	lsrs	r3, r3, #24
 800bb7a:	b2da      	uxtb	r2, r3
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800bb80:	6a3b      	ldr	r3, [r7, #32]
 800bb82:	0c1b      	lsrs	r3, r3, #16
 800bb84:	b2da      	uxtb	r2, r3
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800bb8a:	6a3b      	ldr	r3, [r7, #32]
 800bb8c:	0a1b      	lsrs	r3, r3, #8
 800bb8e:	b2da      	uxtb	r2, r3
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800bb94:	6a3b      	ldr	r3, [r7, #32]
 800bb96:	b2da      	uxtb	r2, r3
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	b2da      	uxtb	r2, r3
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800bba4:	69bb      	ldr	r3, [r7, #24]
 800bba6:	0e1b      	lsrs	r3, r3, #24
 800bba8:	b2da      	uxtb	r2, r3
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800bbae:	69bb      	ldr	r3, [r7, #24]
 800bbb0:	0c1b      	lsrs	r3, r3, #16
 800bbb2:	b2da      	uxtb	r2, r3
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	0a1b      	lsrs	r3, r3, #8
 800bbbc:	b2da      	uxtb	r2, r3
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	0e1b      	lsrs	r3, r3, #24
 800bbc6:	b2da      	uxtb	r2, r3
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	0c1b      	lsrs	r3, r3, #16
 800bbd0:	b2da      	uxtb	r2, r3
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	b2da      	uxtb	r2, r3
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800bbde:	2300      	movs	r3, #0
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	372c      	adds	r7, #44	; 0x2c
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr
 800bbec:	58004000 	.word	0x58004000
 800bbf0:	a94656b9 	.word	0xa94656b9

0800bbf4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	4a08      	ldr	r2, [pc, #32]	; (800bc24 <shci_init+0x30>)
 800bc04:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800bc06:	4a08      	ldr	r2, [pc, #32]	; (800bc28 <shci_init+0x34>)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800bc0c:	4806      	ldr	r0, [pc, #24]	; (800bc28 <shci_init+0x34>)
 800bc0e:	f000 f915 	bl	800be3c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4618      	mov	r0, r3
 800bc18:	f000 f898 	bl	800bd4c <TlInit>

  return;
 800bc1c:	bf00      	nop
}
 800bc1e:	3708      	adds	r7, #8
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	200017a8 	.word	0x200017a8
 800bc28:	20001788 	.word	0x20001788

0800bc2c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800bc32:	4822      	ldr	r0, [pc, #136]	; (800bcbc <shci_user_evt_proc+0x90>)
 800bc34:	f000 f926 	bl	800be84 <LST_is_empty>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d12b      	bne.n	800bc96 <shci_user_evt_proc+0x6a>
 800bc3e:	4b20      	ldr	r3, [pc, #128]	; (800bcc0 <shci_user_evt_proc+0x94>)
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d027      	beq.n	800bc96 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800bc46:	f107 030c 	add.w	r3, r7, #12
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	481b      	ldr	r0, [pc, #108]	; (800bcbc <shci_user_evt_proc+0x90>)
 800bc4e:	f000 f9a8 	bl	800bfa2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800bc52:	4b1c      	ldr	r3, [pc, #112]	; (800bcc4 <shci_user_evt_proc+0x98>)
 800bc54:	69db      	ldr	r3, [r3, #28]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d00c      	beq.n	800bc74 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800bc62:	4b18      	ldr	r3, [pc, #96]	; (800bcc4 <shci_user_evt_proc+0x98>)
 800bc64:	69db      	ldr	r3, [r3, #28]
 800bc66:	1d3a      	adds	r2, r7, #4
 800bc68:	4610      	mov	r0, r2
 800bc6a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800bc6c:	793a      	ldrb	r2, [r7, #4]
 800bc6e:	4b14      	ldr	r3, [pc, #80]	; (800bcc0 <shci_user_evt_proc+0x94>)
 800bc70:	701a      	strb	r2, [r3, #0]
 800bc72:	e002      	b.n	800bc7a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800bc74:	4b12      	ldr	r3, [pc, #72]	; (800bcc0 <shci_user_evt_proc+0x94>)
 800bc76:	2201      	movs	r2, #1
 800bc78:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800bc7a:	4b11      	ldr	r3, [pc, #68]	; (800bcc0 <shci_user_evt_proc+0x94>)
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d004      	beq.n	800bc8c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	4618      	mov	r0, r3
 800bc86:	f001 f84d 	bl	800cd24 <TL_MM_EvtDone>
 800bc8a:	e004      	b.n	800bc96 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	4619      	mov	r1, r3
 800bc90:	480a      	ldr	r0, [pc, #40]	; (800bcbc <shci_user_evt_proc+0x90>)
 800bc92:	f000 f919 	bl	800bec8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800bc96:	4809      	ldr	r0, [pc, #36]	; (800bcbc <shci_user_evt_proc+0x90>)
 800bc98:	f000 f8f4 	bl	800be84 <LST_is_empty>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d107      	bne.n	800bcb2 <shci_user_evt_proc+0x86>
 800bca2:	4b07      	ldr	r3, [pc, #28]	; (800bcc0 <shci_user_evt_proc+0x94>)
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d003      	beq.n	800bcb2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800bcaa:	4804      	ldr	r0, [pc, #16]	; (800bcbc <shci_user_evt_proc+0x90>)
 800bcac:	f7f5 fe01 	bl	80018b2 <shci_notify_asynch_evt>
  }


  return;
 800bcb0:	bf00      	nop
 800bcb2:	bf00      	nop
}
 800bcb4:	3710      	adds	r7, #16
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	2000023c 	.word	0x2000023c
 800bcc0:	2000024c 	.word	0x2000024c
 800bcc4:	20001788 	.word	0x20001788

0800bcc8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60ba      	str	r2, [r7, #8]
 800bcd0:	607b      	str	r3, [r7, #4]
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	81fb      	strh	r3, [r7, #14]
 800bcd6:	460b      	mov	r3, r1
 800bcd8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800bcda:	2000      	movs	r0, #0
 800bcdc:	f000 f868 	bl	800bdb0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800bce0:	4b17      	ldr	r3, [pc, #92]	; (800bd40 <shci_send+0x78>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	89fa      	ldrh	r2, [r7, #14]
 800bce6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800bcea:	4b15      	ldr	r3, [pc, #84]	; (800bd40 <shci_send+0x78>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	7b7a      	ldrb	r2, [r7, #13]
 800bcf0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800bcf2:	4b13      	ldr	r3, [pc, #76]	; (800bd40 <shci_send+0x78>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	330c      	adds	r3, #12
 800bcf8:	7b7a      	ldrb	r2, [r7, #13]
 800bcfa:	68b9      	ldr	r1, [r7, #8]
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	f002 fa4a 	bl	800e196 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800bd02:	4b10      	ldr	r3, [pc, #64]	; (800bd44 <shci_send+0x7c>)
 800bd04:	2201      	movs	r2, #1
 800bd06:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800bd08:	4b0f      	ldr	r3, [pc, #60]	; (800bd48 <shci_send+0x80>)
 800bd0a:	691b      	ldr	r3, [r3, #16]
 800bd0c:	2100      	movs	r1, #0
 800bd0e:	2000      	movs	r0, #0
 800bd10:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800bd12:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800bd16:	f7f5 fde3 	bl	80018e0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f103 0008 	add.w	r0, r3, #8
 800bd20:	4b07      	ldr	r3, [pc, #28]	; (800bd40 <shci_send+0x78>)
 800bd22:	6819      	ldr	r1, [r3, #0]
 800bd24:	4b06      	ldr	r3, [pc, #24]	; (800bd40 <shci_send+0x78>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	789b      	ldrb	r3, [r3, #2]
 800bd2a:	3303      	adds	r3, #3
 800bd2c:	461a      	mov	r2, r3
 800bd2e:	f002 fa32 	bl	800e196 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800bd32:	2001      	movs	r0, #1
 800bd34:	f000 f83c 	bl	800bdb0 <Cmd_SetStatus>

  return;
 800bd38:	bf00      	nop
}
 800bd3a:	3710      	adds	r7, #16
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	20000248 	.word	0x20000248
 800bd44:	200017ac 	.word	0x200017ac
 800bd48:	20001788 	.word	0x20001788

0800bd4c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b086      	sub	sp, #24
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800bd54:	4a10      	ldr	r2, [pc, #64]	; (800bd98 <TlInit+0x4c>)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800bd5a:	4810      	ldr	r0, [pc, #64]	; (800bd9c <TlInit+0x50>)
 800bd5c:	f000 f882 	bl	800be64 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800bd60:	2001      	movs	r0, #1
 800bd62:	f000 f825 	bl	800bdb0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800bd66:	4b0e      	ldr	r3, [pc, #56]	; (800bda0 <TlInit+0x54>)
 800bd68:	2201      	movs	r2, #1
 800bd6a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800bd6c:	4b0d      	ldr	r3, [pc, #52]	; (800bda4 <TlInit+0x58>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d00c      	beq.n	800bd8e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800bd78:	4b0b      	ldr	r3, [pc, #44]	; (800bda8 <TlInit+0x5c>)
 800bd7a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800bd7c:	4b0b      	ldr	r3, [pc, #44]	; (800bdac <TlInit+0x60>)
 800bd7e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800bd80:	4b08      	ldr	r3, [pc, #32]	; (800bda4 <TlInit+0x58>)
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f107 020c 	add.w	r2, r7, #12
 800bd88:	4610      	mov	r0, r2
 800bd8a:	4798      	blx	r3
  }

  return;
 800bd8c:	bf00      	nop
 800bd8e:	bf00      	nop
}
 800bd90:	3718      	adds	r7, #24
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
 800bd96:	bf00      	nop
 800bd98:	20000248 	.word	0x20000248
 800bd9c:	2000023c 	.word	0x2000023c
 800bda0:	2000024c 	.word	0x2000024c
 800bda4:	20001788 	.word	0x20001788
 800bda8:	0800be01 	.word	0x0800be01
 800bdac:	0800be19 	.word	0x0800be19

0800bdb0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b082      	sub	sp, #8
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800bdba:	79fb      	ldrb	r3, [r7, #7]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d10b      	bne.n	800bdd8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800bdc0:	4b0d      	ldr	r3, [pc, #52]	; (800bdf8 <Cmd_SetStatus+0x48>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d003      	beq.n	800bdd0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800bdc8:	4b0b      	ldr	r3, [pc, #44]	; (800bdf8 <Cmd_SetStatus+0x48>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	2000      	movs	r0, #0
 800bdce:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800bdd0:	4b0a      	ldr	r3, [pc, #40]	; (800bdfc <Cmd_SetStatus+0x4c>)
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800bdd6:	e00b      	b.n	800bdf0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800bdd8:	4b08      	ldr	r3, [pc, #32]	; (800bdfc <Cmd_SetStatus+0x4c>)
 800bdda:	2201      	movs	r2, #1
 800bddc:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800bdde:	4b06      	ldr	r3, [pc, #24]	; (800bdf8 <Cmd_SetStatus+0x48>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d004      	beq.n	800bdf0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800bde6:	4b04      	ldr	r3, [pc, #16]	; (800bdf8 <Cmd_SetStatus+0x48>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	2001      	movs	r0, #1
 800bdec:	4798      	blx	r3
  return;
 800bdee:	bf00      	nop
 800bdf0:	bf00      	nop
}
 800bdf2:	3708      	adds	r7, #8
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	200017a8 	.word	0x200017a8
 800bdfc:	20000244 	.word	0x20000244

0800be00 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800be08:	2000      	movs	r0, #0
 800be0a:	f7f5 fd5e 	bl	80018ca <shci_cmd_resp_release>

  return;
 800be0e:	bf00      	nop
}
 800be10:	3708      	adds	r7, #8
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
	...

0800be18 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800be20:	6879      	ldr	r1, [r7, #4]
 800be22:	4805      	ldr	r0, [pc, #20]	; (800be38 <TlUserEvtReceived+0x20>)
 800be24:	f000 f876 	bl	800bf14 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800be28:	4803      	ldr	r0, [pc, #12]	; (800be38 <TlUserEvtReceived+0x20>)
 800be2a:	f7f5 fd42 	bl	80018b2 <shci_notify_asynch_evt>

  return;
 800be2e:	bf00      	nop
}
 800be30:	3708      	adds	r7, #8
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	2000023c 	.word	0x2000023c

0800be3c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b083      	sub	sp, #12
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	4a05      	ldr	r2, [pc, #20]	; (800be5c <shci_register_io_bus+0x20>)
 800be48:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	4a04      	ldr	r2, [pc, #16]	; (800be60 <shci_register_io_bus+0x24>)
 800be4e:	611a      	str	r2, [r3, #16]

  return;
 800be50:	bf00      	nop
}
 800be52:	370c      	adds	r7, #12
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr
 800be5c:	0800cbb1 	.word	0x0800cbb1
 800be60:	0800cc05 	.word	0x0800cc05

0800be64 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800be64:	b480      	push	{r7}
 800be66:	b083      	sub	sp, #12
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	687a      	ldr	r2, [r7, #4]
 800be76:	605a      	str	r2, [r3, #4]
}
 800be78:	bf00      	nop
 800be7a:	370c      	adds	r7, #12
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr

0800be84 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800be84:	b480      	push	{r7}
 800be86:	b087      	sub	sp, #28
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be8c:	f3ef 8310 	mrs	r3, PRIMASK
 800be90:	60fb      	str	r3, [r7, #12]
  return(result);
 800be92:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800be94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800be96:	b672      	cpsid	i
}
 800be98:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d102      	bne.n	800beaa <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800bea4:	2301      	movs	r3, #1
 800bea6:	75fb      	strb	r3, [r7, #23]
 800bea8:	e001      	b.n	800beae <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800beaa:	2300      	movs	r3, #0
 800beac:	75fb      	strb	r3, [r7, #23]
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	f383 8810 	msr	PRIMASK, r3
}
 800beb8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800beba:	7dfb      	ldrb	r3, [r7, #23]
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	371c      	adds	r7, #28
 800bec0:	46bd      	mov	sp, r7
 800bec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec6:	4770      	bx	lr

0800bec8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800bec8:	b480      	push	{r7}
 800beca:	b087      	sub	sp, #28
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bed2:	f3ef 8310 	mrs	r3, PRIMASK
 800bed6:	60fb      	str	r3, [r7, #12]
  return(result);
 800bed8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800beda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bedc:	b672      	cpsid	i
}
 800bede:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	683a      	ldr	r2, [r7, #0]
 800bef2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	683a      	ldr	r2, [r7, #0]
 800befa:	605a      	str	r2, [r3, #4]
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	f383 8810 	msr	PRIMASK, r3
}
 800bf06:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bf08:	bf00      	nop
 800bf0a:	371c      	adds	r7, #28
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf12:	4770      	bx	lr

0800bf14 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b087      	sub	sp, #28
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf1e:	f3ef 8310 	mrs	r3, PRIMASK
 800bf22:	60fb      	str	r3, [r7, #12]
  return(result);
 800bf24:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bf26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bf28:	b672      	cpsid	i
}
 800bf2a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	685a      	ldr	r2, [r3, #4]
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	683a      	ldr	r2, [r7, #0]
 800bf3e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	683a      	ldr	r2, [r7, #0]
 800bf46:	601a      	str	r2, [r3, #0]
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	f383 8810 	msr	PRIMASK, r3
}
 800bf52:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bf54:	bf00      	nop
 800bf56:	371c      	adds	r7, #28
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr

0800bf60 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b087      	sub	sp, #28
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf68:	f3ef 8310 	mrs	r3, PRIMASK
 800bf6c:	60fb      	str	r3, [r7, #12]
  return(result);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bf70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bf72:	b672      	cpsid	i
}
 800bf74:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	687a      	ldr	r2, [r7, #4]
 800bf7c:	6812      	ldr	r2, [r2, #0]
 800bf7e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	687a      	ldr	r2, [r7, #4]
 800bf86:	6852      	ldr	r2, [r2, #4]
 800bf88:	605a      	str	r2, [r3, #4]
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	f383 8810 	msr	PRIMASK, r3
}
 800bf94:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bf96:	bf00      	nop
 800bf98:	371c      	adds	r7, #28
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr

0800bfa2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800bfa2:	b580      	push	{r7, lr}
 800bfa4:	b086      	sub	sp, #24
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
 800bfaa:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bfac:	f3ef 8310 	mrs	r3, PRIMASK
 800bfb0:	60fb      	str	r3, [r7, #12]
  return(result);
 800bfb2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800bfb4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800bfb6:	b672      	cpsid	i
}
 800bfb8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681a      	ldr	r2, [r3, #0]
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7ff ffca 	bl	800bf60 <LST_remove_node>
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	f383 8810 	msr	PRIMASK, r3
}
 800bfd6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800bfd8:	bf00      	nop
 800bfda:	3718      	adds	r7, #24
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}

0800bfe0 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b085      	sub	sp, #20
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	60b9      	str	r1, [r7, #8]
 800bfea:	607a      	str	r2, [r7, #4]
 800bfec:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	68ba      	ldr	r2, [r7, #8]
 800bff2:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2200      	movs	r2, #0
 800bff8:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2200      	movs	r2, #0
 800bffe:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2200      	movs	r2, #0
 800c004:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2200      	movs	r2, #0
 800c00a:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	887a      	ldrh	r2, [r7, #2]
 800c016:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	7e3a      	ldrb	r2, [r7, #24]
 800c01c:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800c01e:	7e3b      	ldrb	r3, [r7, #24]
 800c020:	f003 0302 	and.w	r3, r3, #2
 800c024:	2b00      	cmp	r3, #0
 800c026:	d006      	beq.n	800c036 <CircularQueue_Init+0x56>
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	891b      	ldrh	r3, [r3, #8]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d002      	beq.n	800c036 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800c030:	f04f 33ff 	mov.w	r3, #4294967295
 800c034:	e000      	b.n	800c038 <CircularQueue_Init+0x58>
  }
  return 0;
 800c036:	2300      	movs	r3, #0
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3714      	adds	r7, #20
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr

0800c044 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b08e      	sub	sp, #56	; 0x38
 800c048:	af00      	add	r7, sp, #0
 800c04a:	60f8      	str	r0, [r7, #12]
 800c04c:	60b9      	str	r1, [r7, #8]
 800c04e:	603b      	str	r3, [r7, #0]
 800c050:	4613      	mov	r3, r2
 800c052:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800c054:	2300      	movs	r3, #0
 800c056:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800c058:	2300      	movs	r3, #0
 800c05a:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800c05c:	2300      	movs	r3, #0
 800c05e:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800c060:	2300      	movs	r3, #0
 800c062:	62bb      	str	r3, [r7, #40]	; 0x28
 800c064:	2300      	movs	r3, #0
 800c066:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800c068:	2300      	movs	r3, #0
 800c06a:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800c06c:	2300      	movs	r3, #0
 800c06e:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	891b      	ldrh	r3, [r3, #8]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d101      	bne.n	800c07c <CircularQueue_Add+0x38>
 800c078:	2302      	movs	r3, #2
 800c07a:	e000      	b.n	800c07e <CircularQueue_Add+0x3a>
 800c07c:	2300      	movs	r3, #0
 800c07e:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	695b      	ldr	r3, [r3, #20]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d02a      	beq.n	800c0de <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	891b      	ldrh	r3, [r3, #8]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d123      	bne.n	800c0d8 <CircularQueue_Add+0x94>
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	691b      	ldr	r3, [r3, #16]
 800c098:	4413      	add	r3, r2
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	b29a      	uxth	r2, r3
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	6819      	ldr	r1, [r3, #0]
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	691b      	ldr	r3, [r3, #16]
 800c0a6:	1c58      	adds	r0, r3, #1
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	4298      	cmp	r0, r3
 800c0ae:	d306      	bcc.n	800c0be <CircularQueue_Add+0x7a>
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	6918      	ldr	r0, [r3, #16]
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	1ac3      	subs	r3, r0, r3
 800c0ba:	3301      	adds	r3, #1
 800c0bc:	e002      	b.n	800c0c4 <CircularQueue_Add+0x80>
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	691b      	ldr	r3, [r3, #16]
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	440b      	add	r3, r1
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	021b      	lsls	r3, r3, #8
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	4413      	add	r3, r2
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	3302      	adds	r3, #2
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	e001      	b.n	800c0dc <CircularQueue_Add+0x98>
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	891b      	ldrh	r3, [r3, #8]
 800c0dc:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	891b      	ldrh	r3, [r3, #8]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d002      	beq.n	800c0ec <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	891b      	ldrh	r3, [r3, #8]
 800c0ea:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	691a      	ldr	r2, [r3, #16]
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d307      	bcc.n	800c108 <CircularQueue_Add+0xc4>
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	685a      	ldr	r2, [r3, #4]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	6919      	ldr	r1, [r3, #16]
 800c100:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c102:	440b      	add	r3, r1
 800c104:	1ad3      	subs	r3, r2, r3
 800c106:	e000      	b.n	800c10a <CircularQueue_Add+0xc6>
 800c108:	2300      	movs	r3, #0
 800c10a:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800c10c:	88fa      	ldrh	r2, [r7, #6]
 800c10e:	7ffb      	ldrb	r3, [r7, #31]
 800c110:	4413      	add	r3, r2
 800c112:	461a      	mov	r2, r3
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	fb02 f303 	mul.w	r3, r2, r3
 800c11a:	69ba      	ldr	r2, [r7, #24]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d80b      	bhi.n	800c138 <CircularQueue_Add+0xf4>
 800c120:	88fa      	ldrh	r2, [r7, #6]
 800c122:	7ffb      	ldrb	r3, [r7, #31]
 800c124:	4413      	add	r3, r2
 800c126:	461a      	mov	r2, r3
 800c128:	69bb      	ldr	r3, [r7, #24]
 800c12a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c12e:	fb01 f202 	mul.w	r2, r1, r2
 800c132:	1a9b      	subs	r3, r3, r2
 800c134:	b2db      	uxtb	r3, r3
 800c136:	e000      	b.n	800c13a <CircularQueue_Add+0xf6>
 800c138:	2300      	movs	r3, #0
 800c13a:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800c13c:	7dfa      	ldrb	r2, [r7, #23]
 800c13e:	7ffb      	ldrb	r3, [r7, #31]
 800c140:	429a      	cmp	r2, r3
 800c142:	bf8c      	ite	hi
 800c144:	2301      	movhi	r3, #1
 800c146:	2300      	movls	r3, #0
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800c14c:	7fbb      	ldrb	r3, [r7, #30]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d008      	beq.n	800c164 <CircularQueue_Add+0x120>
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	7f1b      	ldrb	r3, [r3, #28]
 800c156:	f003 0301 	and.w	r3, r3, #1
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d002      	beq.n	800c164 <CircularQueue_Add+0x120>
 800c15e:	7dfb      	ldrb	r3, [r7, #23]
 800c160:	b29b      	uxth	r3, r3
 800c162:	e000      	b.n	800c166 <CircularQueue_Add+0x122>
 800c164:	8bbb      	ldrh	r3, [r7, #28]
 800c166:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800c168:	7fbb      	ldrb	r3, [r7, #30]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d008      	beq.n	800c180 <CircularQueue_Add+0x13c>
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	7f1b      	ldrb	r3, [r3, #28]
 800c172:	f003 0302 	and.w	r3, r3, #2
 800c176:	2b00      	cmp	r3, #0
 800c178:	d002      	beq.n	800c180 <CircularQueue_Add+0x13c>
 800c17a:	7ffb      	ldrb	r3, [r7, #31]
 800c17c:	b29b      	uxth	r3, r3
 800c17e:	e000      	b.n	800c182 <CircularQueue_Add+0x13e>
 800c180:	8bbb      	ldrh	r3, [r7, #28]
 800c182:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800c184:	88fb      	ldrh	r3, [r7, #6]
 800c186:	2b00      	cmp	r3, #0
 800c188:	f000 817e 	beq.w	800c488 <CircularQueue_Add+0x444>
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	695a      	ldr	r2, [r3, #20]
 800c190:	88f9      	ldrh	r1, [r7, #6]
 800c192:	7ffb      	ldrb	r3, [r7, #31]
 800c194:	440b      	add	r3, r1
 800c196:	4619      	mov	r1, r3
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	fb01 f303 	mul.w	r3, r1, r3
 800c19e:	441a      	add	r2, r3
 800c1a0:	8bbb      	ldrh	r3, [r7, #28]
 800c1a2:	441a      	add	r2, r3
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	f200 816d 	bhi.w	800c488 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1b2:	e14a      	b.n	800c44a <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	691a      	ldr	r2, [r3, #16]
 800c1b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c1ba:	441a      	add	r2, r3
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d307      	bcc.n	800c1d4 <CircularQueue_Add+0x190>
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	691a      	ldr	r2, [r3, #16]
 800c1c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c1ca:	441a      	add	r2, r3
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	1ad3      	subs	r3, r2, r3
 800c1d2:	e003      	b.n	800c1dc <CircularQueue_Add+0x198>
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	691a      	ldr	r2, [r3, #16]
 800c1d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c1da:	4413      	add	r3, r2
 800c1dc:	68fa      	ldr	r2, [r7, #12]
 800c1de:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	691b      	ldr	r3, [r3, #16]
 800c1e4:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	891b      	ldrh	r3, [r3, #8]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d130      	bne.n	800c250 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681a      	ldr	r2, [r3, #0]
 800c1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f4:	1c59      	adds	r1, r3, #1
 800c1f6:	6339      	str	r1, [r7, #48]	; 0x30
 800c1f8:	4413      	add	r3, r2
 800c1fa:	88fa      	ldrh	r2, [r7, #6]
 800c1fc:	b2d2      	uxtb	r2, r2
 800c1fe:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c206:	429a      	cmp	r2, r3
 800c208:	d304      	bcc.n	800c214 <CircularQueue_Add+0x1d0>
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	685b      	ldr	r3, [r3, #4]
 800c20e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c210:	1ad3      	subs	r3, r2, r3
 800c212:	e000      	b.n	800c216 <CircularQueue_Add+0x1d2>
 800c214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c216:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800c218:	88fb      	ldrh	r3, [r7, #6]
 800c21a:	0a1b      	lsrs	r3, r3, #8
 800c21c:	b298      	uxth	r0, r3
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681a      	ldr	r2, [r3, #0]
 800c222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c224:	1c59      	adds	r1, r3, #1
 800c226:	6339      	str	r1, [r7, #48]	; 0x30
 800c228:	4413      	add	r3, r2
 800c22a:	b2c2      	uxtb	r2, r0
 800c22c:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c234:	429a      	cmp	r2, r3
 800c236:	d304      	bcc.n	800c242 <CircularQueue_Add+0x1fe>
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	685b      	ldr	r3, [r3, #4]
 800c23c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c23e:	1ad3      	subs	r3, r2, r3
 800c240:	e000      	b.n	800c244 <CircularQueue_Add+0x200>
 800c242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c244:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	695b      	ldr	r3, [r3, #20]
 800c24a:	1c9a      	adds	r2, r3, #2
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800c250:	88fa      	ldrh	r2, [r7, #6]
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	6859      	ldr	r1, [r3, #4]
 800c256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c258:	1acb      	subs	r3, r1, r3
 800c25a:	4293      	cmp	r3, r2
 800c25c:	bf28      	it	cs
 800c25e:	4613      	movcs	r3, r2
 800c260:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800c262:	88fb      	ldrh	r3, [r7, #6]
 800c264:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c266:	429a      	cmp	r2, r3
 800c268:	d007      	beq.n	800c27a <CircularQueue_Add+0x236>
 800c26a:	88fb      	ldrh	r3, [r7, #6]
 800c26c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c26e:	429a      	cmp	r2, r3
 800c270:	d225      	bcs.n	800c2be <CircularQueue_Add+0x27a>
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	7f1b      	ldrb	r3, [r3, #28]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d121      	bne.n	800c2be <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c280:	18d0      	adds	r0, r2, r3
 800c282:	88fb      	ldrh	r3, [r7, #6]
 800c284:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c286:	fb02 f303 	mul.w	r3, r2, r3
 800c28a:	68ba      	ldr	r2, [r7, #8]
 800c28c:	4413      	add	r3, r2
 800c28e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c290:	4619      	mov	r1, r3
 800c292:	f001 ff80 	bl	800e196 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	695a      	ldr	r2, [r3, #20]
 800c29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29c:	441a      	add	r2, r3
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800c2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a8:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800c2aa:	88fa      	ldrh	r2, [r7, #6]
 800c2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ae:	1ad3      	subs	r3, r2, r3
 800c2b0:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800c2b2:	7ffb      	ldrb	r3, [r7, #31]
 800c2b4:	b29a      	uxth	r2, r3
 800c2b6:	88fb      	ldrh	r3, [r7, #6]
 800c2b8:	4413      	add	r3, r2
 800c2ba:	86fb      	strh	r3, [r7, #54]	; 0x36
 800c2bc:	e0a4      	b.n	800c408 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800c2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	f000 80a1 	beq.w	800c408 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	7f1b      	ldrb	r3, [r3, #28]
 800c2ca:	f003 0301 	and.w	r3, r3, #1
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d03a      	beq.n	800c348 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	891b      	ldrh	r3, [r3, #8]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d10d      	bne.n	800c2f6 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681a      	ldr	r2, [r3, #0]
 800c2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2e0:	3b02      	subs	r3, #2
 800c2e2:	4413      	add	r3, r2
 800c2e4:	22ff      	movs	r2, #255	; 0xff
 800c2e6:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681a      	ldr	r2, [r3, #0]
 800c2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ee:	3b01      	subs	r3, #1
 800c2f0:	4413      	add	r3, r2
 800c2f2:	22ff      	movs	r2, #255	; 0xff
 800c2f4:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	695a      	ldr	r2, [r3, #20]
 800c2fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fc:	441a      	add	r2, r3
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800c302:	2300      	movs	r3, #0
 800c304:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800c306:	88fb      	ldrh	r3, [r7, #6]
 800c308:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800c30a:	2300      	movs	r3, #0
 800c30c:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	891b      	ldrh	r3, [r3, #8]
 800c312:	2b00      	cmp	r3, #0
 800c314:	d16f      	bne.n	800c3f6 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	681a      	ldr	r2, [r3, #0]
 800c31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31c:	1c59      	adds	r1, r3, #1
 800c31e:	6339      	str	r1, [r7, #48]	; 0x30
 800c320:	4413      	add	r3, r2
 800c322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c324:	b2d2      	uxtb	r2, r2
 800c326:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800c328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c32a:	0a18      	lsrs	r0, r3, #8
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c332:	1c59      	adds	r1, r3, #1
 800c334:	6339      	str	r1, [r7, #48]	; 0x30
 800c336:	4413      	add	r3, r2
 800c338:	b2c2      	uxtb	r2, r0
 800c33a:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	695b      	ldr	r3, [r3, #20]
 800c340:	1c9a      	adds	r2, r3, #2
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	615a      	str	r2, [r3, #20]
 800c346:	e056      	b.n	800c3f6 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	7f1b      	ldrb	r3, [r3, #28]
 800c34c:	f003 0302 	and.w	r3, r3, #2
 800c350:	2b00      	cmp	r3, #0
 800c352:	d050      	beq.n	800c3f6 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	891b      	ldrh	r3, [r3, #8]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d14a      	bne.n	800c3f2 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681a      	ldr	r2, [r3, #0]
 800c360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c362:	3b02      	subs	r3, #2
 800c364:	4413      	add	r3, r2
 800c366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c368:	b2d2      	uxtb	r2, r2
 800c36a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800c36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36e:	0a19      	lsrs	r1, r3, #8
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c376:	3b01      	subs	r3, #1
 800c378:	4413      	add	r3, r2
 800c37a:	b2ca      	uxtb	r2, r1
 800c37c:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681a      	ldr	r2, [r3, #0]
 800c382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c384:	18d0      	adds	r0, r2, r3
 800c386:	88fb      	ldrh	r3, [r7, #6]
 800c388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c38a:	fb02 f303 	mul.w	r3, r2, r3
 800c38e:	68ba      	ldr	r2, [r7, #8]
 800c390:	4413      	add	r3, r2
 800c392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c394:	4619      	mov	r1, r3
 800c396:	f001 fefe 	bl	800e196 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	695a      	ldr	r2, [r3, #20]
 800c39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a0:	441a      	add	r2, r3
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800c3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a8:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800c3aa:	88fa      	ldrh	r2, [r7, #6]
 800c3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ae:	1ad3      	subs	r3, r2, r3
 800c3b0:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	699b      	ldr	r3, [r3, #24]
 800c3b6:	1c5a      	adds	r2, r3, #1
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800c3bc:	2300      	movs	r3, #0
 800c3be:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c6:	1c59      	adds	r1, r3, #1
 800c3c8:	6339      	str	r1, [r7, #48]	; 0x30
 800c3ca:	4413      	add	r3, r2
 800c3cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c3ce:	b2d2      	uxtb	r2, r2
 800c3d0:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800c3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d4:	0a18      	lsrs	r0, r3, #8
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3dc:	1c59      	adds	r1, r3, #1
 800c3de:	6339      	str	r1, [r7, #48]	; 0x30
 800c3e0:	4413      	add	r3, r2
 800c3e2:	b2c2      	uxtb	r2, r0
 800c3e4:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	695b      	ldr	r3, [r3, #20]
 800c3ea:	1c9a      	adds	r2, r3, #2
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	615a      	str	r2, [r3, #20]
 800c3f0:	e001      	b.n	800c3f6 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	e049      	b.n	800c48a <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800c3f6:	7ffb      	ldrb	r3, [r7, #31]
 800c3f8:	b29a      	uxth	r2, r3
 800c3fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3fc:	b29b      	uxth	r3, r3
 800c3fe:	4413      	add	r3, r2
 800c400:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	2200      	movs	r2, #0
 800c406:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800c408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d015      	beq.n	800c43a <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c414:	18d0      	adds	r0, r2, r3
 800c416:	88fb      	ldrh	r3, [r7, #6]
 800c418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c41a:	fb03 f202 	mul.w	r2, r3, r2
 800c41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c420:	4413      	add	r3, r2
 800c422:	68ba      	ldr	r2, [r7, #8]
 800c424:	4413      	add	r3, r2
 800c426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c428:	4619      	mov	r1, r3
 800c42a:	f001 feb4 	bl	800e196 <memcpy>
        q->byteCount += NbBytesToCopy;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	695a      	ldr	r2, [r3, #20]
 800c432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c434:	441a      	add	r2, r3
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	699b      	ldr	r3, [r3, #24]
 800c43e:	1c5a      	adds	r2, r3, #1
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800c444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c446:	3301      	adds	r3, #1
 800c448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c44a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	429a      	cmp	r2, r3
 800c450:	f4ff aeb0 	bcc.w	800c1b4 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	681a      	ldr	r2, [r3, #0]
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	6919      	ldr	r1, [r3, #16]
 800c45c:	7ffb      	ldrb	r3, [r7, #31]
 800c45e:	4419      	add	r1, r3
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	4299      	cmp	r1, r3
 800c466:	d307      	bcc.n	800c478 <CircularQueue_Add+0x434>
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	6919      	ldr	r1, [r3, #16]
 800c46c:	7ffb      	ldrb	r3, [r7, #31]
 800c46e:	4419      	add	r1, r3
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	685b      	ldr	r3, [r3, #4]
 800c474:	1acb      	subs	r3, r1, r3
 800c476:	e003      	b.n	800c480 <CircularQueue_Add+0x43c>
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	6919      	ldr	r1, [r3, #16]
 800c47c:	7ffb      	ldrb	r3, [r7, #31]
 800c47e:	440b      	add	r3, r1
 800c480:	4413      	add	r3, r2
 800c482:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800c484:	6a3b      	ldr	r3, [r7, #32]
 800c486:	e000      	b.n	800c48a <CircularQueue_Add+0x446>
    return NULL;
 800c488:	2300      	movs	r3, #0
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3738      	adds	r7, #56	; 0x38
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}

0800c492 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800c492:	b480      	push	{r7}
 800c494:	b085      	sub	sp, #20
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
 800c49a:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800c49c:	2300      	movs	r3, #0
 800c49e:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	891b      	ldrh	r3, [r3, #8]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d101      	bne.n	800c4b0 <CircularQueue_Remove+0x1e>
 800c4ac:	2302      	movs	r3, #2
 800c4ae:	e000      	b.n	800c4b2 <CircularQueue_Remove+0x20>
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	695b      	ldr	r3, [r3, #20]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	f000 80cc 	beq.w	800c65a <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	891b      	ldrh	r3, [r3, #8]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d121      	bne.n	800c50e <CircularQueue_Remove+0x7c>
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681a      	ldr	r2, [r3, #0]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	4413      	add	r3, r2
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	b29a      	uxth	r2, r3
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6819      	ldr	r1, [r3, #0]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	68db      	ldr	r3, [r3, #12]
 800c4e0:	1c58      	adds	r0, r3, #1
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	4298      	cmp	r0, r3
 800c4e8:	d306      	bcc.n	800c4f8 <CircularQueue_Remove+0x66>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	68d8      	ldr	r0, [r3, #12]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	1ac3      	subs	r3, r0, r3
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	e002      	b.n	800c4fe <CircularQueue_Remove+0x6c>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	68db      	ldr	r3, [r3, #12]
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	440b      	add	r3, r1
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	b29b      	uxth	r3, r3
 800c504:	021b      	lsls	r3, r3, #8
 800c506:	b29b      	uxth	r3, r3
 800c508:	4413      	add	r3, r2
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	e001      	b.n	800c512 <CircularQueue_Remove+0x80>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	891b      	ldrh	r3, [r3, #8]
 800c512:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	7f1b      	ldrb	r3, [r3, #28]
 800c518:	f003 0301 	and.w	r3, r3, #1
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d057      	beq.n	800c5d0 <CircularQueue_Remove+0x13e>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	7f1b      	ldrb	r3, [r3, #28]
 800c524:	f003 0302 	and.w	r3, r3, #2
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d151      	bne.n	800c5d0 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c52c:	897b      	ldrh	r3, [r7, #10]
 800c52e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c532:	4293      	cmp	r3, r2
 800c534:	d103      	bne.n	800c53e <CircularQueue_Remove+0xac>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	891b      	ldrh	r3, [r3, #8]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d012      	beq.n	800c564 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	68da      	ldr	r2, [r3, #12]
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c546:	429a      	cmp	r2, r3
 800c548:	d942      	bls.n	800c5d0 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	891b      	ldrh	r3, [r3, #8]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d03e      	beq.n	800c5d0 <CircularQueue_Remove+0x13e>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	685a      	ldr	r2, [r3, #4]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	68db      	ldr	r3, [r3, #12]
 800c55a:	1ad3      	subs	r3, r2, r3
 800c55c:	687a      	ldr	r2, [r7, #4]
 800c55e:	8912      	ldrh	r2, [r2, #8]
 800c560:	4293      	cmp	r3, r2
 800c562:	d235      	bcs.n	800c5d0 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	695a      	ldr	r2, [r3, #20]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	68d9      	ldr	r1, [r3, #12]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	1acb      	subs	r3, r1, r3
 800c572:	441a      	add	r2, r3
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2200      	movs	r2, #0
 800c57c:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	891b      	ldrh	r3, [r3, #8]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d121      	bne.n	800c5ca <CircularQueue_Remove+0x138>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681a      	ldr	r2, [r3, #0]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	4413      	add	r3, r2
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	b29a      	uxth	r2, r3
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6819      	ldr	r1, [r3, #0]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	1c58      	adds	r0, r3, #1
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	4298      	cmp	r0, r3
 800c5a4:	d306      	bcc.n	800c5b4 <CircularQueue_Remove+0x122>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	68d8      	ldr	r0, [r3, #12]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	685b      	ldr	r3, [r3, #4]
 800c5ae:	1ac3      	subs	r3, r0, r3
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	e002      	b.n	800c5ba <CircularQueue_Remove+0x128>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	68db      	ldr	r3, [r3, #12]
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	440b      	add	r3, r1
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	021b      	lsls	r3, r3, #8
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	4413      	add	r3, r2
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	e001      	b.n	800c5ce <CircularQueue_Remove+0x13c>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	891b      	ldrh	r3, [r3, #8]
 800c5ce:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	68d9      	ldr	r1, [r3, #12]
 800c5d8:	7a7b      	ldrb	r3, [r7, #9]
 800c5da:	4419      	add	r1, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	4299      	cmp	r1, r3
 800c5e2:	d307      	bcc.n	800c5f4 <CircularQueue_Remove+0x162>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	68d9      	ldr	r1, [r3, #12]
 800c5e8:	7a7b      	ldrb	r3, [r7, #9]
 800c5ea:	4419      	add	r1, r3
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	1acb      	subs	r3, r1, r3
 800c5f2:	e003      	b.n	800c5fc <CircularQueue_Remove+0x16a>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	68d9      	ldr	r1, [r3, #12]
 800c5f8:	7a7b      	ldrb	r3, [r7, #9]
 800c5fa:	440b      	add	r3, r1
 800c5fc:	4413      	add	r3, r2
 800c5fe:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	695b      	ldr	r3, [r3, #20]
 800c604:	8979      	ldrh	r1, [r7, #10]
 800c606:	7a7a      	ldrb	r2, [r7, #9]
 800c608:	440a      	add	r2, r1
 800c60a:	1a9a      	subs	r2, r3, r2
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	695b      	ldr	r3, [r3, #20]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d01b      	beq.n	800c650 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	68da      	ldr	r2, [r3, #12]
 800c61c:	897b      	ldrh	r3, [r7, #10]
 800c61e:	441a      	add	r2, r3
 800c620:	7a7b      	ldrb	r3, [r7, #9]
 800c622:	441a      	add	r2, r3
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d309      	bcc.n	800c640 <CircularQueue_Remove+0x1ae>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	68da      	ldr	r2, [r3, #12]
 800c630:	897b      	ldrh	r3, [r7, #10]
 800c632:	441a      	add	r2, r3
 800c634:	7a7b      	ldrb	r3, [r7, #9]
 800c636:	441a      	add	r2, r3
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	1ad3      	subs	r3, r2, r3
 800c63e:	e005      	b.n	800c64c <CircularQueue_Remove+0x1ba>
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	68da      	ldr	r2, [r3, #12]
 800c644:	897b      	ldrh	r3, [r7, #10]
 800c646:	441a      	add	r2, r3
 800c648:	7a7b      	ldrb	r3, [r7, #9]
 800c64a:	4413      	add	r3, r2
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	699b      	ldr	r3, [r3, #24]
 800c654:	1e5a      	subs	r2, r3, #1
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d002      	beq.n	800c666 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	897a      	ldrh	r2, [r7, #10]
 800c664:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800c666:	68fb      	ldr	r3, [r7, #12]
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3714      	adds	r7, #20
 800c66c:	46bd      	mov	sp, r7
 800c66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c672:	4770      	bx	lr

0800c674 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800c674:	b480      	push	{r7}
 800c676:	b087      	sub	sp, #28
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800c67e:	2300      	movs	r3, #0
 800c680:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800c682:	2300      	movs	r3, #0
 800c684:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	891b      	ldrh	r3, [r3, #8]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d101      	bne.n	800c692 <CircularQueue_Sense+0x1e>
 800c68e:	2302      	movs	r3, #2
 800c690:	e000      	b.n	800c694 <CircularQueue_Sense+0x20>
 800c692:	2300      	movs	r3, #0
 800c694:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800c696:	2300      	movs	r3, #0
 800c698:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800c69a:	2300      	movs	r3, #0
 800c69c:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	695b      	ldr	r3, [r3, #20]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	f000 8090 	beq.w	800c7c8 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	68db      	ldr	r3, [r3, #12]
 800c6ac:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	891b      	ldrh	r3, [r3, #8]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d121      	bne.n	800c6fa <CircularQueue_Sense+0x86>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681a      	ldr	r2, [r3, #0]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	68db      	ldr	r3, [r3, #12]
 800c6be:	4413      	add	r3, r2
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	b29a      	uxth	r2, r3
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6819      	ldr	r1, [r3, #0]
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	68db      	ldr	r3, [r3, #12]
 800c6cc:	1c58      	adds	r0, r3, #1
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	4298      	cmp	r0, r3
 800c6d4:	d306      	bcc.n	800c6e4 <CircularQueue_Sense+0x70>
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	68d8      	ldr	r0, [r3, #12]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	1ac3      	subs	r3, r0, r3
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	e002      	b.n	800c6ea <CircularQueue_Sense+0x76>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	68db      	ldr	r3, [r3, #12]
 800c6e8:	3301      	adds	r3, #1
 800c6ea:	440b      	add	r3, r1
 800c6ec:	781b      	ldrb	r3, [r3, #0]
 800c6ee:	b29b      	uxth	r3, r3
 800c6f0:	021b      	lsls	r3, r3, #8
 800c6f2:	b29b      	uxth	r3, r3
 800c6f4:	4413      	add	r3, r2
 800c6f6:	b29b      	uxth	r3, r3
 800c6f8:	e001      	b.n	800c6fe <CircularQueue_Sense+0x8a>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	891b      	ldrh	r3, [r3, #8]
 800c6fe:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	7f1b      	ldrb	r3, [r3, #28]
 800c704:	f003 0301 	and.w	r3, r3, #1
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d048      	beq.n	800c79e <CircularQueue_Sense+0x12a>
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	7f1b      	ldrb	r3, [r3, #28]
 800c710:	f003 0302 	and.w	r3, r3, #2
 800c714:	2b00      	cmp	r3, #0
 800c716:	d142      	bne.n	800c79e <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c718:	8a7b      	ldrh	r3, [r7, #18]
 800c71a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c71e:	4293      	cmp	r3, r2
 800c720:	d103      	bne.n	800c72a <CircularQueue_Sense+0xb6>
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	891b      	ldrh	r3, [r3, #8]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d012      	beq.n	800c750 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	68da      	ldr	r2, [r3, #12]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c732:	429a      	cmp	r2, r3
 800c734:	d933      	bls.n	800c79e <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	891b      	ldrh	r3, [r3, #8]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d02f      	beq.n	800c79e <CircularQueue_Sense+0x12a>
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	685a      	ldr	r2, [r3, #4]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	68db      	ldr	r3, [r3, #12]
 800c746:	1ad3      	subs	r3, r2, r3
 800c748:	687a      	ldr	r2, [r7, #4]
 800c74a:	8912      	ldrh	r2, [r2, #8]
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d226      	bcs.n	800c79e <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800c750:	2300      	movs	r3, #0
 800c752:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	891b      	ldrh	r3, [r3, #8]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d11d      	bne.n	800c798 <CircularQueue_Sense+0x124>
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681a      	ldr	r2, [r3, #0]
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	4413      	add	r3, r2
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	b29a      	uxth	r2, r3
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	6819      	ldr	r1, [r3, #0]
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	1c58      	adds	r0, r3, #1
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	685b      	ldr	r3, [r3, #4]
 800c774:	4298      	cmp	r0, r3
 800c776:	d305      	bcc.n	800c784 <CircularQueue_Sense+0x110>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	1ac3      	subs	r3, r0, r3
 800c780:	3301      	adds	r3, #1
 800c782:	e001      	b.n	800c788 <CircularQueue_Sense+0x114>
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	3301      	adds	r3, #1
 800c788:	440b      	add	r3, r1
 800c78a:	781b      	ldrb	r3, [r3, #0]
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	021b      	lsls	r3, r3, #8
 800c790:	b29b      	uxth	r3, r3
 800c792:	4413      	add	r3, r2
 800c794:	b29b      	uxth	r3, r3
 800c796:	e001      	b.n	800c79c <CircularQueue_Sense+0x128>
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	891b      	ldrh	r3, [r3, #8]
 800c79c:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681a      	ldr	r2, [r3, #0]
 800c7a2:	7af9      	ldrb	r1, [r7, #11]
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	4419      	add	r1, r3
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	4299      	cmp	r1, r3
 800c7ae:	d306      	bcc.n	800c7be <CircularQueue_Sense+0x14a>
 800c7b0:	7af9      	ldrb	r1, [r7, #11]
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	4419      	add	r1, r3
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	685b      	ldr	r3, [r3, #4]
 800c7ba:	1acb      	subs	r3, r1, r3
 800c7bc:	e002      	b.n	800c7c4 <CircularQueue_Sense+0x150>
 800c7be:	7af9      	ldrb	r1, [r7, #11]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	440b      	add	r3, r1
 800c7c4:	4413      	add	r3, r2
 800c7c6:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d002      	beq.n	800c7d4 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	8a7a      	ldrh	r2, [r7, #18]
 800c7d2:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800c7d4:	697b      	ldr	r3, [r7, #20]
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	371c      	adds	r7, #28
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr

0800c7e2 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800c7e2:	b480      	push	{r7}
 800c7e4:	af00      	add	r7, sp, #0
  return;
 800c7e6:	bf00      	nop
}
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr

0800c7f0 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	af00      	add	r7, sp, #0
  return;
 800c7f4:	bf00      	nop
}
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fc:	4770      	bx	lr

0800c7fe <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800c7fe:	b480      	push	{r7}
 800c800:	af00      	add	r7, sp, #0
  return;
 800c802:	bf00      	nop
}
 800c804:	46bd      	mov	sp, r7
 800c806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80a:	4770      	bx	lr

0800c80c <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800c80c:	b480      	push	{r7}
 800c80e:	af00      	add	r7, sp, #0
  return;
 800c810:	bf00      	nop
}
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr

0800c81a <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800c81a:	b480      	push	{r7}
 800c81c:	af00      	add	r7, sp, #0
  return;
 800c81e:	bf00      	nop
}
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr

0800c828 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800c828:	b480      	push	{r7}
 800c82a:	af00      	add	r7, sp, #0
  return;
 800c82c:	bf00      	nop
}
 800c82e:	46bd      	mov	sp, r7
 800c830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c834:	4770      	bx	lr

0800c836 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800c836:	b480      	push	{r7}
 800c838:	af00      	add	r7, sp, #0
  return;
 800c83a:	bf00      	nop
}
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800c844:	b480      	push	{r7}
 800c846:	af00      	add	r7, sp, #0
  return;
 800c848:	bf00      	nop
}
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr

0800c852 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800c852:	b480      	push	{r7}
 800c854:	af00      	add	r7, sp, #0
  return;
 800c856:	bf00      	nop
}
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr

0800c860 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800c860:	b480      	push	{r7}
 800c862:	af00      	add	r7, sp, #0
  return;
 800c864:	bf00      	nop
}
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr

0800c86e <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800c86e:	b480      	push	{r7}
 800c870:	af00      	add	r7, sp, #0
  return;
 800c872:	bf00      	nop
}
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr

0800c87c <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800c87c:	b480      	push	{r7}
 800c87e:	af00      	add	r7, sp, #0
  return;
 800c880:	bf00      	nop
}
 800c882:	46bd      	mov	sp, r7
 800c884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c888:	4770      	bx	lr

0800c88a <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 800c88a:	b480      	push	{r7}
 800c88c:	af00      	add	r7, sp, #0
  return;
 800c88e:	bf00      	nop
}
 800c890:	46bd      	mov	sp, r7
 800c892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c896:	4770      	bx	lr

0800c898 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800c898:	b480      	push	{r7}
 800c89a:	af00      	add	r7, sp, #0
  return;
 800c89c:	bf00      	nop
}
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr

0800c8a6 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800c8a6:	b480      	push	{r7}
 800c8a8:	af00      	add	r7, sp, #0
  return;
 800c8aa:	bf00      	nop
}
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr

0800c8b4 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	af00      	add	r7, sp, #0
  return;
 800c8b8:	bf00      	nop
}
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr

0800c8c2 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800c8c2:	b480      	push	{r7}
 800c8c4:	af00      	add	r7, sp, #0
  return;
 800c8c6:	bf00      	nop
}
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ce:	4770      	bx	lr

0800c8d0 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800c8d4:	4b04      	ldr	r3, [pc, #16]	; (800c8e8 <SVCCTL_Init+0x18>)
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800c8da:	4b04      	ldr	r3, [pc, #16]	; (800c8ec <SVCCTL_Init+0x1c>)
 800c8dc:	2200      	movs	r2, #0
 800c8de:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800c8e0:	f000 f806 	bl	800c8f0 <SVCCTL_SvcInit>

  return;
 800c8e4:	bf00      	nop
}
 800c8e6:	bd80      	pop	{r7, pc}
 800c8e8:	20000230 	.word	0x20000230
 800c8ec:	20000238 	.word	0x20000238

0800c8f0 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	af00      	add	r7, sp, #0
  BAS_Init();
 800c8f4:	f7ff ff75 	bl	800c7e2 <BAS_Init>

  BLS_Init();
 800c8f8:	f7ff ff7a 	bl	800c7f0 <BLS_Init>

  CRS_STM_Init();
 800c8fc:	f7ff ff7f 	bl	800c7fe <CRS_STM_Init>

  DIS_Init();
 800c900:	f7ff ff84 	bl	800c80c <DIS_Init>

  EDS_STM_Init();
 800c904:	f7ff ff89 	bl	800c81a <EDS_STM_Init>

  HIDS_Init();
 800c908:	f7ff ff8e 	bl	800c828 <HIDS_Init>

  HRS_Init();
 800c90c:	f7ff ff93 	bl	800c836 <HRS_Init>

  HTS_Init();
 800c910:	f7ff ff98 	bl	800c844 <HTS_Init>

  IAS_Init();
 800c914:	f7ff ff9d 	bl	800c852 <IAS_Init>

  LLS_Init();
 800c918:	f7ff ffa2 	bl	800c860 <LLS_Init>

  TPS_Init();
 800c91c:	f7ff ffa7 	bl	800c86e <TPS_Init>

  MOTENV_STM_Init();
 800c920:	f7ff ffac 	bl	800c87c <MOTENV_STM_Init>

  P2PS_STM_Init();
 800c924:	f7fe ffb2 	bl	800b88c <P2PS_STM_Init>

  ZDD_STM_Init();
 800c928:	f7ff ffaf 	bl	800c88a <ZDD_STM_Init>

  OTAS_STM_Init();
 800c92c:	f7ff ffb4 	bl	800c898 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800c930:	f7ff ffc0 	bl	800c8b4 <BVOPUS_STM_Init>

  MESH_Init();
 800c934:	f7ff ffb7 	bl	800c8a6 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800c938:	f7ff ffc3 	bl	800c8c2 <SVCCTL_InitCustomSvc>
  
  return;
 800c93c:	bf00      	nop
}
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800c940:	b480      	push	{r7}
 800c942:	b083      	sub	sp, #12
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800c948:	4b09      	ldr	r3, [pc, #36]	; (800c970 <SVCCTL_RegisterSvcHandler+0x30>)
 800c94a:	791b      	ldrb	r3, [r3, #4]
 800c94c:	4619      	mov	r1, r3
 800c94e:	4a08      	ldr	r2, [pc, #32]	; (800c970 <SVCCTL_RegisterSvcHandler+0x30>)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800c956:	4b06      	ldr	r3, [pc, #24]	; (800c970 <SVCCTL_RegisterSvcHandler+0x30>)
 800c958:	791b      	ldrb	r3, [r3, #4]
 800c95a:	3301      	adds	r3, #1
 800c95c:	b2da      	uxtb	r2, r3
 800c95e:	4b04      	ldr	r3, [pc, #16]	; (800c970 <SVCCTL_RegisterSvcHandler+0x30>)
 800c960:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800c962:	bf00      	nop
}
 800c964:	370c      	adds	r7, #12
 800c966:	46bd      	mov	sp, r7
 800c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96c:	4770      	bx	lr
 800c96e:	bf00      	nop
 800c970:	20000230 	.word	0x20000230

0800c974 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b086      	sub	sp, #24
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	3301      	adds	r3, #1
 800c980:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800c982:	2300      	movs	r3, #0
 800c984:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	2bff      	cmp	r3, #255	; 0xff
 800c98c:	d125      	bne.n	800c9da <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	3302      	adds	r3, #2
 800c992:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	881b      	ldrh	r3, [r3, #0]
 800c998:	b29b      	uxth	r3, r3
 800c99a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c99e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c9a2:	d118      	bne.n	800c9d6 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	757b      	strb	r3, [r7, #21]
 800c9a8:	e00d      	b.n	800c9c6 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800c9aa:	7d7b      	ldrb	r3, [r7, #21]
 800c9ac:	4a1a      	ldr	r2, [pc, #104]	; (800ca18 <SVCCTL_UserEvtRx+0xa4>)
 800c9ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	4798      	blx	r3
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800c9ba:	7dfb      	ldrb	r3, [r7, #23]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d108      	bne.n	800c9d2 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800c9c0:	7d7b      	ldrb	r3, [r7, #21]
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	757b      	strb	r3, [r7, #21]
 800c9c6:	4b14      	ldr	r3, [pc, #80]	; (800ca18 <SVCCTL_UserEvtRx+0xa4>)
 800c9c8:	791b      	ldrb	r3, [r3, #4]
 800c9ca:	7d7a      	ldrb	r2, [r7, #21]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d3ec      	bcc.n	800c9aa <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800c9d0:	e002      	b.n	800c9d8 <SVCCTL_UserEvtRx+0x64>
              break;
 800c9d2:	bf00      	nop
          break;
 800c9d4:	e000      	b.n	800c9d8 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800c9d6:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800c9d8:	e000      	b.n	800c9dc <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800c9da:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800c9dc:	7dfb      	ldrb	r3, [r7, #23]
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	d00f      	beq.n	800ca02 <SVCCTL_UserEvtRx+0x8e>
 800c9e2:	2b02      	cmp	r3, #2
 800c9e4:	dc10      	bgt.n	800ca08 <SVCCTL_UserEvtRx+0x94>
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d002      	beq.n	800c9f0 <SVCCTL_UserEvtRx+0x7c>
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	d006      	beq.n	800c9fc <SVCCTL_UserEvtRx+0x88>
 800c9ee:	e00b      	b.n	800ca08 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f7f6 fd81 	bl	80034f8 <SVCCTL_App_Notification>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	75bb      	strb	r3, [r7, #22]
      break;
 800c9fa:	e008      	b.n	800ca0e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	75bb      	strb	r3, [r7, #22]
      break;
 800ca00:	e005      	b.n	800ca0e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800ca02:	2300      	movs	r3, #0
 800ca04:	75bb      	strb	r3, [r7, #22]
      break;
 800ca06:	e002      	b.n	800ca0e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800ca08:	2301      	movs	r3, #1
 800ca0a:	75bb      	strb	r3, [r7, #22]
      break;
 800ca0c:	bf00      	nop
  }

  return (return_status);
 800ca0e:	7dbb      	ldrb	r3, [r7, #22]
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3718      	adds	r7, #24
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}
 800ca18:	20000230 	.word	0x20000230

0800ca1c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800ca20:	f7f7 fe24 	bl	800466c <HW_IPCC_Enable>

  return;
 800ca24:	bf00      	nop
}
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <TL_Init>:


void TL_Init( void )
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800ca2c:	4b10      	ldr	r3, [pc, #64]	; (800ca70 <TL_Init+0x48>)
 800ca2e:	4a11      	ldr	r2, [pc, #68]	; (800ca74 <TL_Init+0x4c>)
 800ca30:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800ca32:	4b0f      	ldr	r3, [pc, #60]	; (800ca70 <TL_Init+0x48>)
 800ca34:	4a10      	ldr	r2, [pc, #64]	; (800ca78 <TL_Init+0x50>)
 800ca36:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800ca38:	4b0d      	ldr	r3, [pc, #52]	; (800ca70 <TL_Init+0x48>)
 800ca3a:	4a10      	ldr	r2, [pc, #64]	; (800ca7c <TL_Init+0x54>)
 800ca3c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800ca3e:	4b0c      	ldr	r3, [pc, #48]	; (800ca70 <TL_Init+0x48>)
 800ca40:	4a0f      	ldr	r2, [pc, #60]	; (800ca80 <TL_Init+0x58>)
 800ca42:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800ca44:	4b0a      	ldr	r3, [pc, #40]	; (800ca70 <TL_Init+0x48>)
 800ca46:	4a0f      	ldr	r2, [pc, #60]	; (800ca84 <TL_Init+0x5c>)
 800ca48:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800ca4a:	4b09      	ldr	r3, [pc, #36]	; (800ca70 <TL_Init+0x48>)
 800ca4c:	4a0e      	ldr	r2, [pc, #56]	; (800ca88 <TL_Init+0x60>)
 800ca4e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800ca50:	4b07      	ldr	r3, [pc, #28]	; (800ca70 <TL_Init+0x48>)
 800ca52:	4a0e      	ldr	r2, [pc, #56]	; (800ca8c <TL_Init+0x64>)
 800ca54:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800ca56:	4b06      	ldr	r3, [pc, #24]	; (800ca70 <TL_Init+0x48>)
 800ca58:	4a0d      	ldr	r2, [pc, #52]	; (800ca90 <TL_Init+0x68>)
 800ca5a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800ca5c:	4b04      	ldr	r3, [pc, #16]	; (800ca70 <TL_Init+0x48>)
 800ca5e:	4a0d      	ldr	r2, [pc, #52]	; (800ca94 <TL_Init+0x6c>)
 800ca60:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800ca62:	4b03      	ldr	r3, [pc, #12]	; (800ca70 <TL_Init+0x48>)
 800ca64:	4a0c      	ldr	r2, [pc, #48]	; (800ca98 <TL_Init+0x70>)
 800ca66:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800ca68:	f7f7 fe14 	bl	8004694 <HW_IPCC_Init>

  return;
 800ca6c:	bf00      	nop
}
 800ca6e:	bd80      	pop	{r7, pc}
 800ca70:	20030000 	.word	0x20030000
 800ca74:	20030134 	.word	0x20030134
 800ca78:	20030154 	.word	0x20030154
 800ca7c:	20030164 	.word	0x20030164
 800ca80:	20030174 	.word	0x20030174
 800ca84:	2003017c 	.word	0x2003017c
 800ca88:	20030184 	.word	0x20030184
 800ca8c:	2003018c 	.word	0x2003018c
 800ca90:	200301a8 	.word	0x200301a8
 800ca94:	200301ac 	.word	0x200301ac
 800ca98:	200301b8 	.word	0x200301b8

0800ca9c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b084      	sub	sp, #16
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800caa8:	4811      	ldr	r0, [pc, #68]	; (800caf0 <TL_BLE_Init+0x54>)
 800caaa:	f7ff f9db 	bl	800be64 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800caae:	4b11      	ldr	r3, [pc, #68]	; (800caf4 <TL_BLE_Init+0x58>)
 800cab0:	685b      	ldr	r3, [r3, #4]
 800cab2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	689a      	ldr	r2, [r3, #8]
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	68da      	ldr	r2, [r3, #12]
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	4a0c      	ldr	r2, [pc, #48]	; (800caf8 <TL_BLE_Init+0x5c>)
 800cac8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	4a08      	ldr	r2, [pc, #32]	; (800caf0 <TL_BLE_Init+0x54>)
 800cace:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800cad0:	f7f7 fdf6 	bl	80046c0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a08      	ldr	r2, [pc, #32]	; (800cafc <TL_BLE_Init+0x60>)
 800cada:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	685b      	ldr	r3, [r3, #4]
 800cae0:	4a07      	ldr	r2, [pc, #28]	; (800cb00 <TL_BLE_Init+0x64>)
 800cae2:	6013      	str	r3, [r2, #0]

  return 0;
 800cae4:	2300      	movs	r3, #0
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3710      	adds	r7, #16
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	200301d4 	.word	0x200301d4
 800caf4:	20030000 	.word	0x20030000
 800caf8:	20030a58 	.word	0x20030a58
 800cafc:	200017b8 	.word	0x200017b8
 800cb00:	200017bc 	.word	0x200017bc

0800cb04 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800cb10:	4b09      	ldr	r3, [pc, #36]	; (800cb38 <TL_BLE_SendCmd+0x34>)
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	2201      	movs	r2, #1
 800cb18:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800cb1a:	4b07      	ldr	r3, [pc, #28]	; (800cb38 <TL_BLE_SendCmd+0x34>)
 800cb1c:	685b      	ldr	r3, [r3, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4619      	mov	r1, r3
 800cb22:	2001      	movs	r0, #1
 800cb24:	f000 f96c 	bl	800ce00 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800cb28:	f7f7 fdd4 	bl	80046d4 <HW_IPCC_BLE_SendCmd>

  return 0;
 800cb2c:	2300      	movs	r3, #0
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3708      	adds	r7, #8
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop
 800cb38:	20030000 	.word	0x20030000

0800cb3c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800cb42:	e01c      	b.n	800cb7e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800cb44:	1d3b      	adds	r3, r7, #4
 800cb46:	4619      	mov	r1, r3
 800cb48:	4812      	ldr	r0, [pc, #72]	; (800cb94 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800cb4a:	f7ff fa2a 	bl	800bfa2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	7a5b      	ldrb	r3, [r3, #9]
 800cb52:	2b0f      	cmp	r3, #15
 800cb54:	d003      	beq.n	800cb5e <HW_IPCC_BLE_RxEvtNot+0x22>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	7a5b      	ldrb	r3, [r3, #9]
 800cb5a:	2b0e      	cmp	r3, #14
 800cb5c:	d105      	bne.n	800cb6a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	4619      	mov	r1, r3
 800cb62:	2002      	movs	r0, #2
 800cb64:	f000 f94c 	bl	800ce00 <OutputDbgTrace>
 800cb68:	e004      	b.n	800cb74 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	4619      	mov	r1, r3
 800cb6e:	2003      	movs	r0, #3
 800cb70:	f000 f946 	bl	800ce00 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800cb74:	4b08      	ldr	r3, [pc, #32]	; (800cb98 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	687a      	ldr	r2, [r7, #4]
 800cb7a:	4610      	mov	r0, r2
 800cb7c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800cb7e:	4805      	ldr	r0, [pc, #20]	; (800cb94 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800cb80:	f7ff f980 	bl	800be84 <LST_is_empty>
 800cb84:	4603      	mov	r3, r0
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d0dc      	beq.n	800cb44 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800cb8a:	bf00      	nop
}
 800cb8c:	3708      	adds	r7, #8
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	bf00      	nop
 800cb94:	200301d4 	.word	0x200301d4
 800cb98:	200017b8 	.word	0x200017b8

0800cb9c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800cba0:	4b02      	ldr	r3, [pc, #8]	; (800cbac <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4798      	blx	r3

  return;
 800cba6:	bf00      	nop
}
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	200017bc 	.word	0x200017bc

0800cbb0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b084      	sub	sp, #16
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800cbbc:	480d      	ldr	r0, [pc, #52]	; (800cbf4 <TL_SYS_Init+0x44>)
 800cbbe:	f7ff f951 	bl	800be64 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800cbc2:	4b0d      	ldr	r3, [pc, #52]	; (800cbf8 <TL_SYS_Init+0x48>)
 800cbc4:	68db      	ldr	r3, [r3, #12]
 800cbc6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	689a      	ldr	r2, [r3, #8]
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	4a08      	ldr	r2, [pc, #32]	; (800cbf4 <TL_SYS_Init+0x44>)
 800cbd4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800cbd6:	f7f7 fd9f 	bl	8004718 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	4a07      	ldr	r2, [pc, #28]	; (800cbfc <TL_SYS_Init+0x4c>)
 800cbe0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	685b      	ldr	r3, [r3, #4]
 800cbe6:	4a06      	ldr	r2, [pc, #24]	; (800cc00 <TL_SYS_Init+0x50>)
 800cbe8:	6013      	str	r3, [r2, #0]

  return 0;
 800cbea:	2300      	movs	r3, #0
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3710      	adds	r7, #16
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	200301dc 	.word	0x200301dc
 800cbf8:	20030000 	.word	0x20030000
 800cbfc:	200017c0 	.word	0x200017c0
 800cc00:	200017c4 	.word	0x200017c4

0800cc04 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800cc10:	4b09      	ldr	r3, [pc, #36]	; (800cc38 <TL_SYS_SendCmd+0x34>)
 800cc12:	68db      	ldr	r3, [r3, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	2210      	movs	r2, #16
 800cc18:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800cc1a:	4b07      	ldr	r3, [pc, #28]	; (800cc38 <TL_SYS_SendCmd+0x34>)
 800cc1c:	68db      	ldr	r3, [r3, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4619      	mov	r1, r3
 800cc22:	2004      	movs	r0, #4
 800cc24:	f000 f8ec 	bl	800ce00 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800cc28:	f7f7 fd80 	bl	800472c <HW_IPCC_SYS_SendCmd>

  return 0;
 800cc2c:	2300      	movs	r3, #0
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3708      	adds	r7, #8
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	20030000 	.word	0x20030000

0800cc3c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800cc3c:	b580      	push	{r7, lr}
 800cc3e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800cc40:	4b07      	ldr	r3, [pc, #28]	; (800cc60 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800cc42:	68db      	ldr	r3, [r3, #12]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4619      	mov	r1, r3
 800cc48:	2005      	movs	r0, #5
 800cc4a:	f000 f8d9 	bl	800ce00 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800cc4e:	4b05      	ldr	r3, [pc, #20]	; (800cc64 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	4a03      	ldr	r2, [pc, #12]	; (800cc60 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800cc54:	68d2      	ldr	r2, [r2, #12]
 800cc56:	6812      	ldr	r2, [r2, #0]
 800cc58:	4610      	mov	r0, r2
 800cc5a:	4798      	blx	r3

  return;
 800cc5c:	bf00      	nop
}
 800cc5e:	bd80      	pop	{r7, pc}
 800cc60:	20030000 	.word	0x20030000
 800cc64:	200017c0 	.word	0x200017c0

0800cc68 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b082      	sub	sp, #8
 800cc6c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800cc6e:	e00e      	b.n	800cc8e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800cc70:	1d3b      	adds	r3, r7, #4
 800cc72:	4619      	mov	r1, r3
 800cc74:	480b      	ldr	r0, [pc, #44]	; (800cca4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800cc76:	f7ff f994 	bl	800bfa2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	4619      	mov	r1, r3
 800cc7e:	2006      	movs	r0, #6
 800cc80:	f000 f8be 	bl	800ce00 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800cc84:	4b08      	ldr	r3, [pc, #32]	; (800cca8 <HW_IPCC_SYS_EvtNot+0x40>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	687a      	ldr	r2, [r7, #4]
 800cc8a:	4610      	mov	r0, r2
 800cc8c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800cc8e:	4805      	ldr	r0, [pc, #20]	; (800cca4 <HW_IPCC_SYS_EvtNot+0x3c>)
 800cc90:	f7ff f8f8 	bl	800be84 <LST_is_empty>
 800cc94:	4603      	mov	r3, r0
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d0ea      	beq.n	800cc70 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800cc9a:	bf00      	nop
}
 800cc9c:	3708      	adds	r7, #8
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
 800cca2:	bf00      	nop
 800cca4:	200301dc 	.word	0x200301dc
 800cca8:	200017c4 	.word	0x200017c4

0800ccac <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b082      	sub	sp, #8
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800ccb4:	4817      	ldr	r0, [pc, #92]	; (800cd14 <TL_MM_Init+0x68>)
 800ccb6:	f7ff f8d5 	bl	800be64 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800ccba:	4817      	ldr	r0, [pc, #92]	; (800cd18 <TL_MM_Init+0x6c>)
 800ccbc:	f7ff f8d2 	bl	800be64 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800ccc0:	4b16      	ldr	r3, [pc, #88]	; (800cd1c <TL_MM_Init+0x70>)
 800ccc2:	691b      	ldr	r3, [r3, #16]
 800ccc4:	4a16      	ldr	r2, [pc, #88]	; (800cd20 <TL_MM_Init+0x74>)
 800ccc6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800ccc8:	4b15      	ldr	r3, [pc, #84]	; (800cd20 <TL_MM_Init+0x74>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	687a      	ldr	r2, [r7, #4]
 800ccce:	6892      	ldr	r2, [r2, #8]
 800ccd0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800ccd2:	4b13      	ldr	r3, [pc, #76]	; (800cd20 <TL_MM_Init+0x74>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	687a      	ldr	r2, [r7, #4]
 800ccd8:	68d2      	ldr	r2, [r2, #12]
 800ccda:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800ccdc:	4b10      	ldr	r3, [pc, #64]	; (800cd20 <TL_MM_Init+0x74>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	4a0c      	ldr	r2, [pc, #48]	; (800cd14 <TL_MM_Init+0x68>)
 800cce2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800cce4:	4b0e      	ldr	r3, [pc, #56]	; (800cd20 <TL_MM_Init+0x74>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	687a      	ldr	r2, [r7, #4]
 800ccea:	6812      	ldr	r2, [r2, #0]
 800ccec:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800ccee:	4b0c      	ldr	r3, [pc, #48]	; (800cd20 <TL_MM_Init+0x74>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	687a      	ldr	r2, [r7, #4]
 800ccf4:	6852      	ldr	r2, [r2, #4]
 800ccf6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800ccf8:	4b09      	ldr	r3, [pc, #36]	; (800cd20 <TL_MM_Init+0x74>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	687a      	ldr	r2, [r7, #4]
 800ccfe:	6912      	ldr	r2, [r2, #16]
 800cd00:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800cd02:	4b07      	ldr	r3, [pc, #28]	; (800cd20 <TL_MM_Init+0x74>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	687a      	ldr	r2, [r7, #4]
 800cd08:	6952      	ldr	r2, [r2, #20]
 800cd0a:	619a      	str	r2, [r3, #24]

  return;
 800cd0c:	bf00      	nop
}
 800cd0e:	3708      	adds	r7, #8
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}
 800cd14:	200301c4 	.word	0x200301c4
 800cd18:	200017b0 	.word	0x200017b0
 800cd1c:	20030000 	.word	0x20030000
 800cd20:	200017c8 	.word	0x200017c8

0800cd24 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b082      	sub	sp, #8
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800cd2c:	6879      	ldr	r1, [r7, #4]
 800cd2e:	4807      	ldr	r0, [pc, #28]	; (800cd4c <TL_MM_EvtDone+0x28>)
 800cd30:	f7ff f8f0 	bl	800bf14 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800cd34:	6879      	ldr	r1, [r7, #4]
 800cd36:	2000      	movs	r0, #0
 800cd38:	f000 f862 	bl	800ce00 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800cd3c:	4804      	ldr	r0, [pc, #16]	; (800cd50 <TL_MM_EvtDone+0x2c>)
 800cd3e:	f7f7 fd1b 	bl	8004778 <HW_IPCC_MM_SendFreeBuf>

  return;
 800cd42:	bf00      	nop
}
 800cd44:	3708      	adds	r7, #8
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	200017b0 	.word	0x200017b0
 800cd50:	0800cd55 	.word	0x0800cd55

0800cd54 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b082      	sub	sp, #8
 800cd58:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800cd5a:	e00c      	b.n	800cd76 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800cd5c:	1d3b      	adds	r3, r7, #4
 800cd5e:	4619      	mov	r1, r3
 800cd60:	480a      	ldr	r0, [pc, #40]	; (800cd8c <SendFreeBuf+0x38>)
 800cd62:	f7ff f91e 	bl	800bfa2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800cd66:	4b0a      	ldr	r3, [pc, #40]	; (800cd90 <SendFreeBuf+0x3c>)
 800cd68:	691b      	ldr	r3, [r3, #16]
 800cd6a:	691b      	ldr	r3, [r3, #16]
 800cd6c:	687a      	ldr	r2, [r7, #4]
 800cd6e:	4611      	mov	r1, r2
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7ff f8cf 	bl	800bf14 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800cd76:	4805      	ldr	r0, [pc, #20]	; (800cd8c <SendFreeBuf+0x38>)
 800cd78:	f7ff f884 	bl	800be84 <LST_is_empty>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d0ec      	beq.n	800cd5c <SendFreeBuf+0x8>
  }

  return;
 800cd82:	bf00      	nop
}
 800cd84:	3708      	adds	r7, #8
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}
 800cd8a:	bf00      	nop
 800cd8c:	200017b0 	.word	0x200017b0
 800cd90:	20030000 	.word	0x20030000

0800cd94 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800cd98:	4805      	ldr	r0, [pc, #20]	; (800cdb0 <TL_TRACES_Init+0x1c>)
 800cd9a:	f7ff f863 	bl	800be64 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800cd9e:	4b05      	ldr	r3, [pc, #20]	; (800cdb4 <TL_TRACES_Init+0x20>)
 800cda0:	695b      	ldr	r3, [r3, #20]
 800cda2:	4a03      	ldr	r2, [pc, #12]	; (800cdb0 <TL_TRACES_Init+0x1c>)
 800cda4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800cda6:	f7f7 fd1d 	bl	80047e4 <HW_IPCC_TRACES_Init>

  return;
 800cdaa:	bf00      	nop
}
 800cdac:	bd80      	pop	{r7, pc}
 800cdae:	bf00      	nop
 800cdb0:	200301cc 	.word	0x200301cc
 800cdb4:	20030000 	.word	0x20030000

0800cdb8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b082      	sub	sp, #8
 800cdbc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800cdbe:	e008      	b.n	800cdd2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800cdc0:	1d3b      	adds	r3, r7, #4
 800cdc2:	4619      	mov	r1, r3
 800cdc4:	4808      	ldr	r0, [pc, #32]	; (800cde8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800cdc6:	f7ff f8ec 	bl	800bfa2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f000 f80d 	bl	800cdec <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800cdd2:	4805      	ldr	r0, [pc, #20]	; (800cde8 <HW_IPCC_TRACES_EvtNot+0x30>)
 800cdd4:	f7ff f856 	bl	800be84 <LST_is_empty>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d0f0      	beq.n	800cdc0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800cdde:	bf00      	nop
}
 800cde0:	3708      	adds	r7, #8
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop
 800cde8:	200301cc 	.word	0x200301cc

0800cdec <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800cdec:	b480      	push	{r7}
 800cdee:	b083      	sub	sp, #12
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800cdf4:	bf00      	nop
 800cdf6:	370c      	adds	r7, #12
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800ce00:	b480      	push	{r7}
 800ce02:	b085      	sub	sp, #20
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	4603      	mov	r3, r0
 800ce08:	6039      	str	r1, [r7, #0]
 800ce0a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800ce0c:	79fb      	ldrb	r3, [r7, #7]
 800ce0e:	2b06      	cmp	r3, #6
 800ce10:	d845      	bhi.n	800ce9e <OutputDbgTrace+0x9e>
 800ce12:	a201      	add	r2, pc, #4	; (adr r2, 800ce18 <OutputDbgTrace+0x18>)
 800ce14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce18:	0800ce35 	.word	0x0800ce35
 800ce1c:	0800ce59 	.word	0x0800ce59
 800ce20:	0800ce5f 	.word	0x0800ce5f
 800ce24:	0800ce73 	.word	0x0800ce73
 800ce28:	0800ce7f 	.word	0x0800ce7f
 800ce2c:	0800ce85 	.word	0x0800ce85
 800ce30:	0800ce93 	.word	0x0800ce93
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	7a5b      	ldrb	r3, [r3, #9]
 800ce3c:	2bff      	cmp	r3, #255	; 0xff
 800ce3e:	d005      	beq.n	800ce4c <OutputDbgTrace+0x4c>
 800ce40:	2bff      	cmp	r3, #255	; 0xff
 800ce42:	dc05      	bgt.n	800ce50 <OutputDbgTrace+0x50>
 800ce44:	2b0e      	cmp	r3, #14
 800ce46:	d005      	beq.n	800ce54 <OutputDbgTrace+0x54>
 800ce48:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800ce4a:	e001      	b.n	800ce50 <OutputDbgTrace+0x50>
          break;
 800ce4c:	bf00      	nop
 800ce4e:	e027      	b.n	800cea0 <OutputDbgTrace+0xa0>
          break;
 800ce50:	bf00      	nop
 800ce52:	e025      	b.n	800cea0 <OutputDbgTrace+0xa0>
          break;
 800ce54:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800ce56:	e023      	b.n	800cea0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ce5c:	e020      	b.n	800cea0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	7a5b      	ldrb	r3, [r3, #9]
 800ce66:	2b0e      	cmp	r3, #14
 800ce68:	d001      	beq.n	800ce6e <OutputDbgTrace+0x6e>
 800ce6a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ce6c:	e000      	b.n	800ce70 <OutputDbgTrace+0x70>
          break;
 800ce6e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ce70:	e016      	b.n	800cea0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	7a5b      	ldrb	r3, [r3, #9]
 800ce7a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ce7c:	e010      	b.n	800cea0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ce82:	e00d      	b.n	800cea0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	7a5b      	ldrb	r3, [r3, #9]
 800ce8c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ce8e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ce90:	e006      	b.n	800cea0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	7a5b      	ldrb	r3, [r3, #9]
 800ce9a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ce9c:	e000      	b.n	800cea0 <OutputDbgTrace+0xa0>

    default:
      break;
 800ce9e:	bf00      	nop
  }

  return;
 800cea0:	bf00      	nop
}
 800cea2:	3714      	adds	r7, #20
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800ceac:	b480      	push	{r7}
 800ceae:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800ceb0:	4b05      	ldr	r3, [pc, #20]	; (800cec8 <UTIL_LPM_Init+0x1c>)
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800ceb6:	4b05      	ldr	r3, [pc, #20]	; (800cecc <UTIL_LPM_Init+0x20>)
 800ceb8:	2200      	movs	r2, #0
 800ceba:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800cebc:	bf00      	nop
 800cebe:	46bd      	mov	sp, r7
 800cec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec4:	4770      	bx	lr
 800cec6:	bf00      	nop
 800cec8:	200017cc 	.word	0x200017cc
 800cecc:	200017d0 	.word	0x200017d0

0800ced0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ced0:	b480      	push	{r7}
 800ced2:	b087      	sub	sp, #28
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	460b      	mov	r3, r1
 800ceda:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cedc:	f3ef 8310 	mrs	r3, PRIMASK
 800cee0:	613b      	str	r3, [r7, #16]
  return(result);
 800cee2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800cee4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cee6:	b672      	cpsid	i
}
 800cee8:	bf00      	nop
  
  switch(state)
 800ceea:	78fb      	ldrb	r3, [r7, #3]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d008      	beq.n	800cf02 <UTIL_LPM_SetOffMode+0x32>
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	d10e      	bne.n	800cf12 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800cef4:	4b0d      	ldr	r3, [pc, #52]	; (800cf2c <UTIL_LPM_SetOffMode+0x5c>)
 800cef6:	681a      	ldr	r2, [r3, #0]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	4313      	orrs	r3, r2
 800cefc:	4a0b      	ldr	r2, [pc, #44]	; (800cf2c <UTIL_LPM_SetOffMode+0x5c>)
 800cefe:	6013      	str	r3, [r2, #0]
      break;
 800cf00:	e008      	b.n	800cf14 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	43da      	mvns	r2, r3
 800cf06:	4b09      	ldr	r3, [pc, #36]	; (800cf2c <UTIL_LPM_SetOffMode+0x5c>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4013      	ands	r3, r2
 800cf0c:	4a07      	ldr	r2, [pc, #28]	; (800cf2c <UTIL_LPM_SetOffMode+0x5c>)
 800cf0e:	6013      	str	r3, [r2, #0]
      break;
 800cf10:	e000      	b.n	800cf14 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800cf12:	bf00      	nop
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	f383 8810 	msr	PRIMASK, r3
}
 800cf1e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800cf20:	bf00      	nop
 800cf22:	371c      	adds	r7, #28
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr
 800cf2c:	200017d0 	.word	0x200017d0

0800cf30 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b090      	sub	sp, #64	; 0x40
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800cf38:	4b73      	ldr	r3, [pc, #460]	; (800d108 <UTIL_SEQ_Run+0x1d8>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800cf3e:	4b72      	ldr	r3, [pc, #456]	; (800d108 <UTIL_SEQ_Run+0x1d8>)
 800cf40:	681a      	ldr	r2, [r3, #0]
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	4013      	ands	r3, r2
 800cf46:	4a70      	ldr	r2, [pc, #448]	; (800d108 <UTIL_SEQ_Run+0x1d8>)
 800cf48:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800cf4a:	4b70      	ldr	r3, [pc, #448]	; (800d10c <UTIL_SEQ_Run+0x1dc>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800cf50:	4b6f      	ldr	r3, [pc, #444]	; (800d110 <UTIL_SEQ_Run+0x1e0>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800cf56:	4b6f      	ldr	r3, [pc, #444]	; (800d114 <UTIL_SEQ_Run+0x1e4>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800cf5c:	4b6e      	ldr	r3, [pc, #440]	; (800d118 <UTIL_SEQ_Run+0x1e8>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800cf62:	e08d      	b.n	800d080 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800cf64:	2300      	movs	r3, #0
 800cf66:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800cf68:	e002      	b.n	800cf70 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800cf6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800cf70:	4a6a      	ldr	r2, [pc, #424]	; (800d11c <UTIL_SEQ_Run+0x1ec>)
 800cf72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf74:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cf78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf7a:	401a      	ands	r2, r3
 800cf7c:	4b62      	ldr	r3, [pc, #392]	; (800d108 <UTIL_SEQ_Run+0x1d8>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	4013      	ands	r3, r2
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d0f1      	beq.n	800cf6a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800cf86:	4a65      	ldr	r2, [pc, #404]	; (800d11c <UTIL_SEQ_Run+0x1ec>)
 800cf88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf8a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cf8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf90:	401a      	ands	r2, r3
 800cf92:	4b5d      	ldr	r3, [pc, #372]	; (800d108 <UTIL_SEQ_Run+0x1d8>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4013      	ands	r3, r2
 800cf98:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800cf9a:	4a60      	ldr	r2, [pc, #384]	; (800d11c <UTIL_SEQ_Run+0x1ec>)
 800cf9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf9e:	00db      	lsls	r3, r3, #3
 800cfa0:	4413      	add	r3, r2
 800cfa2:	685a      	ldr	r2, [r3, #4]
 800cfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa6:	4013      	ands	r3, r2
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d106      	bne.n	800cfba <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800cfac:	4a5b      	ldr	r2, [pc, #364]	; (800d11c <UTIL_SEQ_Run+0x1ec>)
 800cfae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfb0:	00db      	lsls	r3, r3, #3
 800cfb2:	4413      	add	r3, r2
 800cfb4:	f04f 32ff 	mov.w	r2, #4294967295
 800cfb8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800cfba:	4a58      	ldr	r2, [pc, #352]	; (800d11c <UTIL_SEQ_Run+0x1ec>)
 800cfbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfbe:	00db      	lsls	r3, r3, #3
 800cfc0:	4413      	add	r3, r2
 800cfc2:	685a      	ldr	r2, [r3, #4]
 800cfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc6:	4013      	ands	r3, r2
 800cfc8:	4618      	mov	r0, r3
 800cfca:	f000 f9b3 	bl	800d334 <SEQ_BitPosition>
 800cfce:	4603      	mov	r3, r0
 800cfd0:	461a      	mov	r2, r3
 800cfd2:	4b53      	ldr	r3, [pc, #332]	; (800d120 <UTIL_SEQ_Run+0x1f0>)
 800cfd4:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800cfd6:	4a51      	ldr	r2, [pc, #324]	; (800d11c <UTIL_SEQ_Run+0x1ec>)
 800cfd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfda:	00db      	lsls	r3, r3, #3
 800cfdc:	4413      	add	r3, r2
 800cfde:	685a      	ldr	r2, [r3, #4]
 800cfe0:	4b4f      	ldr	r3, [pc, #316]	; (800d120 <UTIL_SEQ_Run+0x1f0>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	2101      	movs	r1, #1
 800cfe6:	fa01 f303 	lsl.w	r3, r1, r3
 800cfea:	43db      	mvns	r3, r3
 800cfec:	401a      	ands	r2, r3
 800cfee:	494b      	ldr	r1, [pc, #300]	; (800d11c <UTIL_SEQ_Run+0x1ec>)
 800cff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cff2:	00db      	lsls	r3, r3, #3
 800cff4:	440b      	add	r3, r1
 800cff6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cff8:	f3ef 8310 	mrs	r3, PRIMASK
 800cffc:	61bb      	str	r3, [r7, #24]
  return(result);
 800cffe:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d000:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800d002:	b672      	cpsid	i
}
 800d004:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800d006:	4b46      	ldr	r3, [pc, #280]	; (800d120 <UTIL_SEQ_Run+0x1f0>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	2201      	movs	r2, #1
 800d00c:	fa02 f303 	lsl.w	r3, r2, r3
 800d010:	43da      	mvns	r2, r3
 800d012:	4b3e      	ldr	r3, [pc, #248]	; (800d10c <UTIL_SEQ_Run+0x1dc>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	4013      	ands	r3, r2
 800d018:	4a3c      	ldr	r2, [pc, #240]	; (800d10c <UTIL_SEQ_Run+0x1dc>)
 800d01a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d01c:	2302      	movs	r3, #2
 800d01e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d020:	e013      	b.n	800d04a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800d022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d024:	3b01      	subs	r3, #1
 800d026:	4a3d      	ldr	r2, [pc, #244]	; (800d11c <UTIL_SEQ_Run+0x1ec>)
 800d028:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800d02c:	4b3c      	ldr	r3, [pc, #240]	; (800d120 <UTIL_SEQ_Run+0x1f0>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	2201      	movs	r2, #1
 800d032:	fa02 f303 	lsl.w	r3, r2, r3
 800d036:	43da      	mvns	r2, r3
 800d038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d03a:	3b01      	subs	r3, #1
 800d03c:	400a      	ands	r2, r1
 800d03e:	4937      	ldr	r1, [pc, #220]	; (800d11c <UTIL_SEQ_Run+0x1ec>)
 800d040:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d046:	3b01      	subs	r3, #1
 800d048:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d1e8      	bne.n	800d022 <UTIL_SEQ_Run+0xf2>
 800d050:	6a3b      	ldr	r3, [r7, #32]
 800d052:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	f383 8810 	msr	PRIMASK, r3
}
 800d05a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800d05c:	4b30      	ldr	r3, [pc, #192]	; (800d120 <UTIL_SEQ_Run+0x1f0>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4a30      	ldr	r2, [pc, #192]	; (800d124 <UTIL_SEQ_Run+0x1f4>)
 800d062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d066:	4798      	blx	r3

    local_taskset = TaskSet;
 800d068:	4b28      	ldr	r3, [pc, #160]	; (800d10c <UTIL_SEQ_Run+0x1dc>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800d06e:	4b28      	ldr	r3, [pc, #160]	; (800d110 <UTIL_SEQ_Run+0x1e0>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800d074:	4b27      	ldr	r3, [pc, #156]	; (800d114 <UTIL_SEQ_Run+0x1e4>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800d07a:	4b27      	ldr	r3, [pc, #156]	; (800d118 <UTIL_SEQ_Run+0x1e8>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800d080:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d084:	401a      	ands	r2, r3
 800d086:	4b20      	ldr	r3, [pc, #128]	; (800d108 <UTIL_SEQ_Run+0x1d8>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4013      	ands	r3, r2
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d005      	beq.n	800d09c <UTIL_SEQ_Run+0x16c>
 800d090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d094:	4013      	ands	r3, r2
 800d096:	2b00      	cmp	r3, #0
 800d098:	f43f af64 	beq.w	800cf64 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800d09c:	4b20      	ldr	r3, [pc, #128]	; (800d120 <UTIL_SEQ_Run+0x1f0>)
 800d09e:	f04f 32ff 	mov.w	r2, #4294967295
 800d0a2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800d0a4:	f000 f938 	bl	800d318 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0a8:	f3ef 8310 	mrs	r3, PRIMASK
 800d0ac:	613b      	str	r3, [r7, #16]
  return(result);
 800d0ae:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800d0b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d0b2:	b672      	cpsid	i
}
 800d0b4:	bf00      	nop
  local_taskset = TaskSet;
 800d0b6:	4b15      	ldr	r3, [pc, #84]	; (800d10c <UTIL_SEQ_Run+0x1dc>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800d0bc:	4b14      	ldr	r3, [pc, #80]	; (800d110 <UTIL_SEQ_Run+0x1e0>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800d0c2:	4b14      	ldr	r3, [pc, #80]	; (800d114 <UTIL_SEQ_Run+0x1e4>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800d0c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0cc:	401a      	ands	r2, r3
 800d0ce:	4b0e      	ldr	r3, [pc, #56]	; (800d108 <UTIL_SEQ_Run+0x1d8>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	4013      	ands	r3, r2
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d107      	bne.n	800d0e8 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800d0d8:	4b0f      	ldr	r3, [pc, #60]	; (800d118 <UTIL_SEQ_Run+0x1e8>)
 800d0da:	681a      	ldr	r2, [r3, #0]
 800d0dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0de:	4013      	ands	r3, r2
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d101      	bne.n	800d0e8 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800d0e4:	f7f4 fbd1 	bl	800188a <UTIL_SEQ_Idle>
 800d0e8:	69fb      	ldr	r3, [r7, #28]
 800d0ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	f383 8810 	msr	PRIMASK, r3
}
 800d0f2:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800d0f4:	f000 f917 	bl	800d326 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800d0f8:	4a03      	ldr	r2, [pc, #12]	; (800d108 <UTIL_SEQ_Run+0x1d8>)
 800d0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fc:	6013      	str	r3, [r2, #0]

  return;
 800d0fe:	bf00      	nop
}
 800d100:	3740      	adds	r7, #64	; 0x40
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	20000048 	.word	0x20000048
 800d10c:	200017d4 	.word	0x200017d4
 800d110:	200017d8 	.word	0x200017d8
 800d114:	20000044 	.word	0x20000044
 800d118:	200017dc 	.word	0x200017dc
 800d11c:	20001864 	.word	0x20001864
 800d120:	200017e0 	.word	0x200017e0
 800d124:	200017e4 	.word	0x200017e4

0800d128 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b088      	sub	sp, #32
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	60f8      	str	r0, [r7, #12]
 800d130:	60b9      	str	r1, [r7, #8]
 800d132:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d134:	f3ef 8310 	mrs	r3, PRIMASK
 800d138:	617b      	str	r3, [r7, #20]
  return(result);
 800d13a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800d13c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d13e:	b672      	cpsid	i
}
 800d140:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800d142:	68f8      	ldr	r0, [r7, #12]
 800d144:	f000 f8f6 	bl	800d334 <SEQ_BitPosition>
 800d148:	4603      	mov	r3, r0
 800d14a:	4619      	mov	r1, r3
 800d14c:	4a06      	ldr	r2, [pc, #24]	; (800d168 <UTIL_SEQ_RegTask+0x40>)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d154:	69fb      	ldr	r3, [r7, #28]
 800d156:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d158:	69bb      	ldr	r3, [r7, #24]
 800d15a:	f383 8810 	msr	PRIMASK, r3
}
 800d15e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800d160:	bf00      	nop
}
 800d162:	3720      	adds	r7, #32
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	200017e4 	.word	0x200017e4

0800d16c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800d16c:	b480      	push	{r7}
 800d16e:	b087      	sub	sp, #28
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d176:	f3ef 8310 	mrs	r3, PRIMASK
 800d17a:	60fb      	str	r3, [r7, #12]
  return(result);
 800d17c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d17e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d180:	b672      	cpsid	i
}
 800d182:	bf00      	nop

  TaskSet |= TaskId_bm;
 800d184:	4b0d      	ldr	r3, [pc, #52]	; (800d1bc <UTIL_SEQ_SetTask+0x50>)
 800d186:	681a      	ldr	r2, [r3, #0]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	4313      	orrs	r3, r2
 800d18c:	4a0b      	ldr	r2, [pc, #44]	; (800d1bc <UTIL_SEQ_SetTask+0x50>)
 800d18e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800d190:	4a0b      	ldr	r2, [pc, #44]	; (800d1c0 <UTIL_SEQ_SetTask+0x54>)
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	431a      	orrs	r2, r3
 800d19c:	4908      	ldr	r1, [pc, #32]	; (800d1c0 <UTIL_SEQ_SetTask+0x54>)
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	f383 8810 	msr	PRIMASK, r3
}
 800d1ae:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d1b0:	bf00      	nop
}
 800d1b2:	371c      	adds	r7, #28
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ba:	4770      	bx	lr
 800d1bc:	200017d4 	.word	0x200017d4
 800d1c0:	20001864 	.word	0x20001864

0800d1c4 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800d1c4:	b480      	push	{r7}
 800d1c6:	b087      	sub	sp, #28
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1cc:	f3ef 8310 	mrs	r3, PRIMASK
 800d1d0:	60fb      	str	r3, [r7, #12]
  return(result);
 800d1d2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d1d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d1d6:	b672      	cpsid	i
}
 800d1d8:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	43da      	mvns	r2, r3
 800d1de:	4b08      	ldr	r3, [pc, #32]	; (800d200 <UTIL_SEQ_PauseTask+0x3c>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4013      	ands	r3, r2
 800d1e4:	4a06      	ldr	r2, [pc, #24]	; (800d200 <UTIL_SEQ_PauseTask+0x3c>)
 800d1e6:	6013      	str	r3, [r2, #0]
 800d1e8:	697b      	ldr	r3, [r7, #20]
 800d1ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d1ec:	693b      	ldr	r3, [r7, #16]
 800d1ee:	f383 8810 	msr	PRIMASK, r3
}
 800d1f2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d1f4:	bf00      	nop
}
 800d1f6:	371c      	adds	r7, #28
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr
 800d200:	20000044 	.word	0x20000044

0800d204 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800d204:	b480      	push	{r7}
 800d206:	b087      	sub	sp, #28
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d20c:	f3ef 8310 	mrs	r3, PRIMASK
 800d210:	60fb      	str	r3, [r7, #12]
  return(result);
 800d212:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d214:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d216:	b672      	cpsid	i
}
 800d218:	bf00      	nop

  TaskMask |= TaskId_bm;
 800d21a:	4b09      	ldr	r3, [pc, #36]	; (800d240 <UTIL_SEQ_ResumeTask+0x3c>)
 800d21c:	681a      	ldr	r2, [r3, #0]
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	4313      	orrs	r3, r2
 800d222:	4a07      	ldr	r2, [pc, #28]	; (800d240 <UTIL_SEQ_ResumeTask+0x3c>)
 800d224:	6013      	str	r3, [r2, #0]
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d22a:	693b      	ldr	r3, [r7, #16]
 800d22c:	f383 8810 	msr	PRIMASK, r3
}
 800d230:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d232:	bf00      	nop
}
 800d234:	371c      	adds	r7, #28
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop
 800d240:	20000044 	.word	0x20000044

0800d244 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800d244:	b480      	push	{r7}
 800d246:	b087      	sub	sp, #28
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d24c:	f3ef 8310 	mrs	r3, PRIMASK
 800d250:	60fb      	str	r3, [r7, #12]
  return(result);
 800d252:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d254:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d256:	b672      	cpsid	i
}
 800d258:	bf00      	nop

  EvtSet |= EvtId_bm;
 800d25a:	4b09      	ldr	r3, [pc, #36]	; (800d280 <UTIL_SEQ_SetEvt+0x3c>)
 800d25c:	681a      	ldr	r2, [r3, #0]
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	4313      	orrs	r3, r2
 800d262:	4a07      	ldr	r2, [pc, #28]	; (800d280 <UTIL_SEQ_SetEvt+0x3c>)
 800d264:	6013      	str	r3, [r2, #0]
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	f383 8810 	msr	PRIMASK, r3
}
 800d270:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d272:	bf00      	nop
}
 800d274:	371c      	adds	r7, #28
 800d276:	46bd      	mov	sp, r7
 800d278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27c:	4770      	bx	lr
 800d27e:	bf00      	nop
 800d280:	200017d8 	.word	0x200017d8

0800d284 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b088      	sub	sp, #32
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800d28c:	4b1f      	ldr	r3, [pc, #124]	; (800d30c <UTIL_SEQ_WaitEvt+0x88>)
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800d292:	4b1e      	ldr	r3, [pc, #120]	; (800d30c <UTIL_SEQ_WaitEvt+0x88>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d29a:	d102      	bne.n	800d2a2 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800d29c:	2300      	movs	r3, #0
 800d29e:	61fb      	str	r3, [r7, #28]
 800d2a0:	e005      	b.n	800d2ae <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800d2a2:	4b1a      	ldr	r3, [pc, #104]	; (800d30c <UTIL_SEQ_WaitEvt+0x88>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	2201      	movs	r2, #1
 800d2a8:	fa02 f303 	lsl.w	r3, r2, r3
 800d2ac:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800d2ae:	4b18      	ldr	r3, [pc, #96]	; (800d310 <UTIL_SEQ_WaitEvt+0x8c>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800d2b4:	4a16      	ldr	r2, [pc, #88]	; (800d310 <UTIL_SEQ_WaitEvt+0x8c>)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800d2ba:	e003      	b.n	800d2c4 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800d2bc:	6879      	ldr	r1, [r7, #4]
 800d2be:	69f8      	ldr	r0, [r7, #28]
 800d2c0:	f7f4 faea 	bl	8001898 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800d2c4:	4b13      	ldr	r3, [pc, #76]	; (800d314 <UTIL_SEQ_WaitEvt+0x90>)
 800d2c6:	681a      	ldr	r2, [r3, #0]
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	4013      	ands	r3, r2
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d0f5      	beq.n	800d2bc <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800d2d0:	4a0e      	ldr	r2, [pc, #56]	; (800d30c <UTIL_SEQ_WaitEvt+0x88>)
 800d2d2:	69bb      	ldr	r3, [r7, #24]
 800d2d4:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d2d6:	f3ef 8310 	mrs	r3, PRIMASK
 800d2da:	60bb      	str	r3, [r7, #8]
  return(result);
 800d2dc:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d2de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d2e0:	b672      	cpsid	i
}
 800d2e2:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	43da      	mvns	r2, r3
 800d2e8:	4b0a      	ldr	r3, [pc, #40]	; (800d314 <UTIL_SEQ_WaitEvt+0x90>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	4013      	ands	r3, r2
 800d2ee:	4a09      	ldr	r2, [pc, #36]	; (800d314 <UTIL_SEQ_WaitEvt+0x90>)
 800d2f0:	6013      	str	r3, [r2, #0]
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	f383 8810 	msr	PRIMASK, r3
}
 800d2fc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800d2fe:	4a04      	ldr	r2, [pc, #16]	; (800d310 <UTIL_SEQ_WaitEvt+0x8c>)
 800d300:	697b      	ldr	r3, [r7, #20]
 800d302:	6013      	str	r3, [r2, #0]
  return;
 800d304:	bf00      	nop
}
 800d306:	3720      	adds	r7, #32
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}
 800d30c:	200017e0 	.word	0x200017e0
 800d310:	200017dc 	.word	0x200017dc
 800d314:	200017d8 	.word	0x200017d8

0800d318 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800d318:	b480      	push	{r7}
 800d31a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d31c:	bf00      	nop
}
 800d31e:	46bd      	mov	sp, r7
 800d320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d324:	4770      	bx	lr

0800d326 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800d326:	b480      	push	{r7}
 800d328:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d32a:	bf00      	nop
}
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr

0800d334 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800d334:	b480      	push	{r7}
 800d336:	b085      	sub	sp, #20
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800d33c:	2300      	movs	r3, #0
 800d33e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	0c1b      	lsrs	r3, r3, #16
 800d348:	041b      	lsls	r3, r3, #16
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d104      	bne.n	800d358 <SEQ_BitPosition+0x24>
 800d34e:	2310      	movs	r3, #16
 800d350:	73fb      	strb	r3, [r7, #15]
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	041b      	lsls	r3, r3, #16
 800d356:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d105      	bne.n	800d36e <SEQ_BitPosition+0x3a>
 800d362:	7bfb      	ldrb	r3, [r7, #15]
 800d364:	3308      	adds	r3, #8
 800d366:	73fb      	strb	r3, [r7, #15]
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	021b      	lsls	r3, r3, #8
 800d36c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800d36e:	68bb      	ldr	r3, [r7, #8]
 800d370:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d374:	2b00      	cmp	r3, #0
 800d376:	d105      	bne.n	800d384 <SEQ_BitPosition+0x50>
 800d378:	7bfb      	ldrb	r3, [r7, #15]
 800d37a:	3304      	adds	r3, #4
 800d37c:	73fb      	strb	r3, [r7, #15]
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	011b      	lsls	r3, r3, #4
 800d382:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	0f1b      	lsrs	r3, r3, #28
 800d388:	4a07      	ldr	r2, [pc, #28]	; (800d3a8 <SEQ_BitPosition+0x74>)
 800d38a:	5cd2      	ldrb	r2, [r2, r3]
 800d38c:	7bfb      	ldrb	r3, [r7, #15]
 800d38e:	4413      	add	r3, r2
 800d390:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800d392:	7bfb      	ldrb	r3, [r7, #15]
 800d394:	f1c3 031f 	rsb	r3, r3, #31
 800d398:	b2db      	uxtb	r3, r3
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3714      	adds	r7, #20
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a4:	4770      	bx	lr
 800d3a6:	bf00      	nop
 800d3a8:	08011590 	.word	0x08011590

0800d3ac <__cvt>:
 800d3ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3b0:	ec55 4b10 	vmov	r4, r5, d0
 800d3b4:	2d00      	cmp	r5, #0
 800d3b6:	460e      	mov	r6, r1
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	462b      	mov	r3, r5
 800d3bc:	bfbb      	ittet	lt
 800d3be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d3c2:	461d      	movlt	r5, r3
 800d3c4:	2300      	movge	r3, #0
 800d3c6:	232d      	movlt	r3, #45	; 0x2d
 800d3c8:	700b      	strb	r3, [r1, #0]
 800d3ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d3cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d3d0:	4691      	mov	r9, r2
 800d3d2:	f023 0820 	bic.w	r8, r3, #32
 800d3d6:	bfbc      	itt	lt
 800d3d8:	4622      	movlt	r2, r4
 800d3da:	4614      	movlt	r4, r2
 800d3dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d3e0:	d005      	beq.n	800d3ee <__cvt+0x42>
 800d3e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d3e6:	d100      	bne.n	800d3ea <__cvt+0x3e>
 800d3e8:	3601      	adds	r6, #1
 800d3ea:	2102      	movs	r1, #2
 800d3ec:	e000      	b.n	800d3f0 <__cvt+0x44>
 800d3ee:	2103      	movs	r1, #3
 800d3f0:	ab03      	add	r3, sp, #12
 800d3f2:	9301      	str	r3, [sp, #4]
 800d3f4:	ab02      	add	r3, sp, #8
 800d3f6:	9300      	str	r3, [sp, #0]
 800d3f8:	ec45 4b10 	vmov	d0, r4, r5
 800d3fc:	4653      	mov	r3, sl
 800d3fe:	4632      	mov	r2, r6
 800d400:	f000 ff62 	bl	800e2c8 <_dtoa_r>
 800d404:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d408:	4607      	mov	r7, r0
 800d40a:	d102      	bne.n	800d412 <__cvt+0x66>
 800d40c:	f019 0f01 	tst.w	r9, #1
 800d410:	d022      	beq.n	800d458 <__cvt+0xac>
 800d412:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d416:	eb07 0906 	add.w	r9, r7, r6
 800d41a:	d110      	bne.n	800d43e <__cvt+0x92>
 800d41c:	783b      	ldrb	r3, [r7, #0]
 800d41e:	2b30      	cmp	r3, #48	; 0x30
 800d420:	d10a      	bne.n	800d438 <__cvt+0x8c>
 800d422:	2200      	movs	r2, #0
 800d424:	2300      	movs	r3, #0
 800d426:	4620      	mov	r0, r4
 800d428:	4629      	mov	r1, r5
 800d42a:	f7f3 fb35 	bl	8000a98 <__aeabi_dcmpeq>
 800d42e:	b918      	cbnz	r0, 800d438 <__cvt+0x8c>
 800d430:	f1c6 0601 	rsb	r6, r6, #1
 800d434:	f8ca 6000 	str.w	r6, [sl]
 800d438:	f8da 3000 	ldr.w	r3, [sl]
 800d43c:	4499      	add	r9, r3
 800d43e:	2200      	movs	r2, #0
 800d440:	2300      	movs	r3, #0
 800d442:	4620      	mov	r0, r4
 800d444:	4629      	mov	r1, r5
 800d446:	f7f3 fb27 	bl	8000a98 <__aeabi_dcmpeq>
 800d44a:	b108      	cbz	r0, 800d450 <__cvt+0xa4>
 800d44c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d450:	2230      	movs	r2, #48	; 0x30
 800d452:	9b03      	ldr	r3, [sp, #12]
 800d454:	454b      	cmp	r3, r9
 800d456:	d307      	bcc.n	800d468 <__cvt+0xbc>
 800d458:	9b03      	ldr	r3, [sp, #12]
 800d45a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d45c:	1bdb      	subs	r3, r3, r7
 800d45e:	4638      	mov	r0, r7
 800d460:	6013      	str	r3, [r2, #0]
 800d462:	b004      	add	sp, #16
 800d464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d468:	1c59      	adds	r1, r3, #1
 800d46a:	9103      	str	r1, [sp, #12]
 800d46c:	701a      	strb	r2, [r3, #0]
 800d46e:	e7f0      	b.n	800d452 <__cvt+0xa6>

0800d470 <__exponent>:
 800d470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d472:	4603      	mov	r3, r0
 800d474:	2900      	cmp	r1, #0
 800d476:	bfb8      	it	lt
 800d478:	4249      	neglt	r1, r1
 800d47a:	f803 2b02 	strb.w	r2, [r3], #2
 800d47e:	bfb4      	ite	lt
 800d480:	222d      	movlt	r2, #45	; 0x2d
 800d482:	222b      	movge	r2, #43	; 0x2b
 800d484:	2909      	cmp	r1, #9
 800d486:	7042      	strb	r2, [r0, #1]
 800d488:	dd2a      	ble.n	800d4e0 <__exponent+0x70>
 800d48a:	f10d 0207 	add.w	r2, sp, #7
 800d48e:	4617      	mov	r7, r2
 800d490:	260a      	movs	r6, #10
 800d492:	4694      	mov	ip, r2
 800d494:	fb91 f5f6 	sdiv	r5, r1, r6
 800d498:	fb06 1415 	mls	r4, r6, r5, r1
 800d49c:	3430      	adds	r4, #48	; 0x30
 800d49e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800d4a2:	460c      	mov	r4, r1
 800d4a4:	2c63      	cmp	r4, #99	; 0x63
 800d4a6:	f102 32ff 	add.w	r2, r2, #4294967295
 800d4aa:	4629      	mov	r1, r5
 800d4ac:	dcf1      	bgt.n	800d492 <__exponent+0x22>
 800d4ae:	3130      	adds	r1, #48	; 0x30
 800d4b0:	f1ac 0402 	sub.w	r4, ip, #2
 800d4b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d4b8:	1c41      	adds	r1, r0, #1
 800d4ba:	4622      	mov	r2, r4
 800d4bc:	42ba      	cmp	r2, r7
 800d4be:	d30a      	bcc.n	800d4d6 <__exponent+0x66>
 800d4c0:	f10d 0209 	add.w	r2, sp, #9
 800d4c4:	eba2 020c 	sub.w	r2, r2, ip
 800d4c8:	42bc      	cmp	r4, r7
 800d4ca:	bf88      	it	hi
 800d4cc:	2200      	movhi	r2, #0
 800d4ce:	4413      	add	r3, r2
 800d4d0:	1a18      	subs	r0, r3, r0
 800d4d2:	b003      	add	sp, #12
 800d4d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d4d6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d4da:	f801 5f01 	strb.w	r5, [r1, #1]!
 800d4de:	e7ed      	b.n	800d4bc <__exponent+0x4c>
 800d4e0:	2330      	movs	r3, #48	; 0x30
 800d4e2:	3130      	adds	r1, #48	; 0x30
 800d4e4:	7083      	strb	r3, [r0, #2]
 800d4e6:	70c1      	strb	r1, [r0, #3]
 800d4e8:	1d03      	adds	r3, r0, #4
 800d4ea:	e7f1      	b.n	800d4d0 <__exponent+0x60>

0800d4ec <_printf_float>:
 800d4ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f0:	ed2d 8b02 	vpush	{d8}
 800d4f4:	b08d      	sub	sp, #52	; 0x34
 800d4f6:	460c      	mov	r4, r1
 800d4f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d4fc:	4616      	mov	r6, r2
 800d4fe:	461f      	mov	r7, r3
 800d500:	4605      	mov	r5, r0
 800d502:	f000 fdd1 	bl	800e0a8 <_localeconv_r>
 800d506:	f8d0 a000 	ldr.w	sl, [r0]
 800d50a:	4650      	mov	r0, sl
 800d50c:	f7f2 fe98 	bl	8000240 <strlen>
 800d510:	2300      	movs	r3, #0
 800d512:	930a      	str	r3, [sp, #40]	; 0x28
 800d514:	6823      	ldr	r3, [r4, #0]
 800d516:	9305      	str	r3, [sp, #20]
 800d518:	f8d8 3000 	ldr.w	r3, [r8]
 800d51c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d520:	3307      	adds	r3, #7
 800d522:	f023 0307 	bic.w	r3, r3, #7
 800d526:	f103 0208 	add.w	r2, r3, #8
 800d52a:	f8c8 2000 	str.w	r2, [r8]
 800d52e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d532:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d536:	9307      	str	r3, [sp, #28]
 800d538:	f8cd 8018 	str.w	r8, [sp, #24]
 800d53c:	ee08 0a10 	vmov	s16, r0
 800d540:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800d544:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d548:	4b9e      	ldr	r3, [pc, #632]	; (800d7c4 <_printf_float+0x2d8>)
 800d54a:	f04f 32ff 	mov.w	r2, #4294967295
 800d54e:	f7f3 fad5 	bl	8000afc <__aeabi_dcmpun>
 800d552:	bb88      	cbnz	r0, 800d5b8 <_printf_float+0xcc>
 800d554:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d558:	4b9a      	ldr	r3, [pc, #616]	; (800d7c4 <_printf_float+0x2d8>)
 800d55a:	f04f 32ff 	mov.w	r2, #4294967295
 800d55e:	f7f3 faaf 	bl	8000ac0 <__aeabi_dcmple>
 800d562:	bb48      	cbnz	r0, 800d5b8 <_printf_float+0xcc>
 800d564:	2200      	movs	r2, #0
 800d566:	2300      	movs	r3, #0
 800d568:	4640      	mov	r0, r8
 800d56a:	4649      	mov	r1, r9
 800d56c:	f7f3 fa9e 	bl	8000aac <__aeabi_dcmplt>
 800d570:	b110      	cbz	r0, 800d578 <_printf_float+0x8c>
 800d572:	232d      	movs	r3, #45	; 0x2d
 800d574:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d578:	4a93      	ldr	r2, [pc, #588]	; (800d7c8 <_printf_float+0x2dc>)
 800d57a:	4b94      	ldr	r3, [pc, #592]	; (800d7cc <_printf_float+0x2e0>)
 800d57c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d580:	bf94      	ite	ls
 800d582:	4690      	movls	r8, r2
 800d584:	4698      	movhi	r8, r3
 800d586:	2303      	movs	r3, #3
 800d588:	6123      	str	r3, [r4, #16]
 800d58a:	9b05      	ldr	r3, [sp, #20]
 800d58c:	f023 0304 	bic.w	r3, r3, #4
 800d590:	6023      	str	r3, [r4, #0]
 800d592:	f04f 0900 	mov.w	r9, #0
 800d596:	9700      	str	r7, [sp, #0]
 800d598:	4633      	mov	r3, r6
 800d59a:	aa0b      	add	r2, sp, #44	; 0x2c
 800d59c:	4621      	mov	r1, r4
 800d59e:	4628      	mov	r0, r5
 800d5a0:	f000 f9da 	bl	800d958 <_printf_common>
 800d5a4:	3001      	adds	r0, #1
 800d5a6:	f040 8090 	bne.w	800d6ca <_printf_float+0x1de>
 800d5aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d5ae:	b00d      	add	sp, #52	; 0x34
 800d5b0:	ecbd 8b02 	vpop	{d8}
 800d5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5b8:	4642      	mov	r2, r8
 800d5ba:	464b      	mov	r3, r9
 800d5bc:	4640      	mov	r0, r8
 800d5be:	4649      	mov	r1, r9
 800d5c0:	f7f3 fa9c 	bl	8000afc <__aeabi_dcmpun>
 800d5c4:	b140      	cbz	r0, 800d5d8 <_printf_float+0xec>
 800d5c6:	464b      	mov	r3, r9
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	bfbc      	itt	lt
 800d5cc:	232d      	movlt	r3, #45	; 0x2d
 800d5ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d5d2:	4a7f      	ldr	r2, [pc, #508]	; (800d7d0 <_printf_float+0x2e4>)
 800d5d4:	4b7f      	ldr	r3, [pc, #508]	; (800d7d4 <_printf_float+0x2e8>)
 800d5d6:	e7d1      	b.n	800d57c <_printf_float+0x90>
 800d5d8:	6863      	ldr	r3, [r4, #4]
 800d5da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d5de:	9206      	str	r2, [sp, #24]
 800d5e0:	1c5a      	adds	r2, r3, #1
 800d5e2:	d13f      	bne.n	800d664 <_printf_float+0x178>
 800d5e4:	2306      	movs	r3, #6
 800d5e6:	6063      	str	r3, [r4, #4]
 800d5e8:	9b05      	ldr	r3, [sp, #20]
 800d5ea:	6861      	ldr	r1, [r4, #4]
 800d5ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	9303      	str	r3, [sp, #12]
 800d5f4:	ab0a      	add	r3, sp, #40	; 0x28
 800d5f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d5fa:	ab09      	add	r3, sp, #36	; 0x24
 800d5fc:	ec49 8b10 	vmov	d0, r8, r9
 800d600:	9300      	str	r3, [sp, #0]
 800d602:	6022      	str	r2, [r4, #0]
 800d604:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d608:	4628      	mov	r0, r5
 800d60a:	f7ff fecf 	bl	800d3ac <__cvt>
 800d60e:	9b06      	ldr	r3, [sp, #24]
 800d610:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d612:	2b47      	cmp	r3, #71	; 0x47
 800d614:	4680      	mov	r8, r0
 800d616:	d108      	bne.n	800d62a <_printf_float+0x13e>
 800d618:	1cc8      	adds	r0, r1, #3
 800d61a:	db02      	blt.n	800d622 <_printf_float+0x136>
 800d61c:	6863      	ldr	r3, [r4, #4]
 800d61e:	4299      	cmp	r1, r3
 800d620:	dd41      	ble.n	800d6a6 <_printf_float+0x1ba>
 800d622:	f1ab 0302 	sub.w	r3, fp, #2
 800d626:	fa5f fb83 	uxtb.w	fp, r3
 800d62a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d62e:	d820      	bhi.n	800d672 <_printf_float+0x186>
 800d630:	3901      	subs	r1, #1
 800d632:	465a      	mov	r2, fp
 800d634:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d638:	9109      	str	r1, [sp, #36]	; 0x24
 800d63a:	f7ff ff19 	bl	800d470 <__exponent>
 800d63e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d640:	1813      	adds	r3, r2, r0
 800d642:	2a01      	cmp	r2, #1
 800d644:	4681      	mov	r9, r0
 800d646:	6123      	str	r3, [r4, #16]
 800d648:	dc02      	bgt.n	800d650 <_printf_float+0x164>
 800d64a:	6822      	ldr	r2, [r4, #0]
 800d64c:	07d2      	lsls	r2, r2, #31
 800d64e:	d501      	bpl.n	800d654 <_printf_float+0x168>
 800d650:	3301      	adds	r3, #1
 800d652:	6123      	str	r3, [r4, #16]
 800d654:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d09c      	beq.n	800d596 <_printf_float+0xaa>
 800d65c:	232d      	movs	r3, #45	; 0x2d
 800d65e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d662:	e798      	b.n	800d596 <_printf_float+0xaa>
 800d664:	9a06      	ldr	r2, [sp, #24]
 800d666:	2a47      	cmp	r2, #71	; 0x47
 800d668:	d1be      	bne.n	800d5e8 <_printf_float+0xfc>
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d1bc      	bne.n	800d5e8 <_printf_float+0xfc>
 800d66e:	2301      	movs	r3, #1
 800d670:	e7b9      	b.n	800d5e6 <_printf_float+0xfa>
 800d672:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d676:	d118      	bne.n	800d6aa <_printf_float+0x1be>
 800d678:	2900      	cmp	r1, #0
 800d67a:	6863      	ldr	r3, [r4, #4]
 800d67c:	dd0b      	ble.n	800d696 <_printf_float+0x1aa>
 800d67e:	6121      	str	r1, [r4, #16]
 800d680:	b913      	cbnz	r3, 800d688 <_printf_float+0x19c>
 800d682:	6822      	ldr	r2, [r4, #0]
 800d684:	07d0      	lsls	r0, r2, #31
 800d686:	d502      	bpl.n	800d68e <_printf_float+0x1a2>
 800d688:	3301      	adds	r3, #1
 800d68a:	440b      	add	r3, r1
 800d68c:	6123      	str	r3, [r4, #16]
 800d68e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d690:	f04f 0900 	mov.w	r9, #0
 800d694:	e7de      	b.n	800d654 <_printf_float+0x168>
 800d696:	b913      	cbnz	r3, 800d69e <_printf_float+0x1b2>
 800d698:	6822      	ldr	r2, [r4, #0]
 800d69a:	07d2      	lsls	r2, r2, #31
 800d69c:	d501      	bpl.n	800d6a2 <_printf_float+0x1b6>
 800d69e:	3302      	adds	r3, #2
 800d6a0:	e7f4      	b.n	800d68c <_printf_float+0x1a0>
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	e7f2      	b.n	800d68c <_printf_float+0x1a0>
 800d6a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d6aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6ac:	4299      	cmp	r1, r3
 800d6ae:	db05      	blt.n	800d6bc <_printf_float+0x1d0>
 800d6b0:	6823      	ldr	r3, [r4, #0]
 800d6b2:	6121      	str	r1, [r4, #16]
 800d6b4:	07d8      	lsls	r0, r3, #31
 800d6b6:	d5ea      	bpl.n	800d68e <_printf_float+0x1a2>
 800d6b8:	1c4b      	adds	r3, r1, #1
 800d6ba:	e7e7      	b.n	800d68c <_printf_float+0x1a0>
 800d6bc:	2900      	cmp	r1, #0
 800d6be:	bfd4      	ite	le
 800d6c0:	f1c1 0202 	rsble	r2, r1, #2
 800d6c4:	2201      	movgt	r2, #1
 800d6c6:	4413      	add	r3, r2
 800d6c8:	e7e0      	b.n	800d68c <_printf_float+0x1a0>
 800d6ca:	6823      	ldr	r3, [r4, #0]
 800d6cc:	055a      	lsls	r2, r3, #21
 800d6ce:	d407      	bmi.n	800d6e0 <_printf_float+0x1f4>
 800d6d0:	6923      	ldr	r3, [r4, #16]
 800d6d2:	4642      	mov	r2, r8
 800d6d4:	4631      	mov	r1, r6
 800d6d6:	4628      	mov	r0, r5
 800d6d8:	47b8      	blx	r7
 800d6da:	3001      	adds	r0, #1
 800d6dc:	d12c      	bne.n	800d738 <_printf_float+0x24c>
 800d6de:	e764      	b.n	800d5aa <_printf_float+0xbe>
 800d6e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d6e4:	f240 80e0 	bls.w	800d8a8 <_printf_float+0x3bc>
 800d6e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	f7f3 f9d2 	bl	8000a98 <__aeabi_dcmpeq>
 800d6f4:	2800      	cmp	r0, #0
 800d6f6:	d034      	beq.n	800d762 <_printf_float+0x276>
 800d6f8:	4a37      	ldr	r2, [pc, #220]	; (800d7d8 <_printf_float+0x2ec>)
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	4631      	mov	r1, r6
 800d6fe:	4628      	mov	r0, r5
 800d700:	47b8      	blx	r7
 800d702:	3001      	adds	r0, #1
 800d704:	f43f af51 	beq.w	800d5aa <_printf_float+0xbe>
 800d708:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d70c:	429a      	cmp	r2, r3
 800d70e:	db02      	blt.n	800d716 <_printf_float+0x22a>
 800d710:	6823      	ldr	r3, [r4, #0]
 800d712:	07d8      	lsls	r0, r3, #31
 800d714:	d510      	bpl.n	800d738 <_printf_float+0x24c>
 800d716:	ee18 3a10 	vmov	r3, s16
 800d71a:	4652      	mov	r2, sl
 800d71c:	4631      	mov	r1, r6
 800d71e:	4628      	mov	r0, r5
 800d720:	47b8      	blx	r7
 800d722:	3001      	adds	r0, #1
 800d724:	f43f af41 	beq.w	800d5aa <_printf_float+0xbe>
 800d728:	f04f 0800 	mov.w	r8, #0
 800d72c:	f104 091a 	add.w	r9, r4, #26
 800d730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d732:	3b01      	subs	r3, #1
 800d734:	4543      	cmp	r3, r8
 800d736:	dc09      	bgt.n	800d74c <_printf_float+0x260>
 800d738:	6823      	ldr	r3, [r4, #0]
 800d73a:	079b      	lsls	r3, r3, #30
 800d73c:	f100 8107 	bmi.w	800d94e <_printf_float+0x462>
 800d740:	68e0      	ldr	r0, [r4, #12]
 800d742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d744:	4298      	cmp	r0, r3
 800d746:	bfb8      	it	lt
 800d748:	4618      	movlt	r0, r3
 800d74a:	e730      	b.n	800d5ae <_printf_float+0xc2>
 800d74c:	2301      	movs	r3, #1
 800d74e:	464a      	mov	r2, r9
 800d750:	4631      	mov	r1, r6
 800d752:	4628      	mov	r0, r5
 800d754:	47b8      	blx	r7
 800d756:	3001      	adds	r0, #1
 800d758:	f43f af27 	beq.w	800d5aa <_printf_float+0xbe>
 800d75c:	f108 0801 	add.w	r8, r8, #1
 800d760:	e7e6      	b.n	800d730 <_printf_float+0x244>
 800d762:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d764:	2b00      	cmp	r3, #0
 800d766:	dc39      	bgt.n	800d7dc <_printf_float+0x2f0>
 800d768:	4a1b      	ldr	r2, [pc, #108]	; (800d7d8 <_printf_float+0x2ec>)
 800d76a:	2301      	movs	r3, #1
 800d76c:	4631      	mov	r1, r6
 800d76e:	4628      	mov	r0, r5
 800d770:	47b8      	blx	r7
 800d772:	3001      	adds	r0, #1
 800d774:	f43f af19 	beq.w	800d5aa <_printf_float+0xbe>
 800d778:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d77c:	4313      	orrs	r3, r2
 800d77e:	d102      	bne.n	800d786 <_printf_float+0x29a>
 800d780:	6823      	ldr	r3, [r4, #0]
 800d782:	07d9      	lsls	r1, r3, #31
 800d784:	d5d8      	bpl.n	800d738 <_printf_float+0x24c>
 800d786:	ee18 3a10 	vmov	r3, s16
 800d78a:	4652      	mov	r2, sl
 800d78c:	4631      	mov	r1, r6
 800d78e:	4628      	mov	r0, r5
 800d790:	47b8      	blx	r7
 800d792:	3001      	adds	r0, #1
 800d794:	f43f af09 	beq.w	800d5aa <_printf_float+0xbe>
 800d798:	f04f 0900 	mov.w	r9, #0
 800d79c:	f104 0a1a 	add.w	sl, r4, #26
 800d7a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7a2:	425b      	negs	r3, r3
 800d7a4:	454b      	cmp	r3, r9
 800d7a6:	dc01      	bgt.n	800d7ac <_printf_float+0x2c0>
 800d7a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7aa:	e792      	b.n	800d6d2 <_printf_float+0x1e6>
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	4652      	mov	r2, sl
 800d7b0:	4631      	mov	r1, r6
 800d7b2:	4628      	mov	r0, r5
 800d7b4:	47b8      	blx	r7
 800d7b6:	3001      	adds	r0, #1
 800d7b8:	f43f aef7 	beq.w	800d5aa <_printf_float+0xbe>
 800d7bc:	f109 0901 	add.w	r9, r9, #1
 800d7c0:	e7ee      	b.n	800d7a0 <_printf_float+0x2b4>
 800d7c2:	bf00      	nop
 800d7c4:	7fefffff 	.word	0x7fefffff
 800d7c8:	080115a0 	.word	0x080115a0
 800d7cc:	080115a4 	.word	0x080115a4
 800d7d0:	080115a8 	.word	0x080115a8
 800d7d4:	080115ac 	.word	0x080115ac
 800d7d8:	080115b0 	.word	0x080115b0
 800d7dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d7de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d7e0:	429a      	cmp	r2, r3
 800d7e2:	bfa8      	it	ge
 800d7e4:	461a      	movge	r2, r3
 800d7e6:	2a00      	cmp	r2, #0
 800d7e8:	4691      	mov	r9, r2
 800d7ea:	dc37      	bgt.n	800d85c <_printf_float+0x370>
 800d7ec:	f04f 0b00 	mov.w	fp, #0
 800d7f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d7f4:	f104 021a 	add.w	r2, r4, #26
 800d7f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d7fa:	9305      	str	r3, [sp, #20]
 800d7fc:	eba3 0309 	sub.w	r3, r3, r9
 800d800:	455b      	cmp	r3, fp
 800d802:	dc33      	bgt.n	800d86c <_printf_float+0x380>
 800d804:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d808:	429a      	cmp	r2, r3
 800d80a:	db3b      	blt.n	800d884 <_printf_float+0x398>
 800d80c:	6823      	ldr	r3, [r4, #0]
 800d80e:	07da      	lsls	r2, r3, #31
 800d810:	d438      	bmi.n	800d884 <_printf_float+0x398>
 800d812:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d816:	eba2 0903 	sub.w	r9, r2, r3
 800d81a:	9b05      	ldr	r3, [sp, #20]
 800d81c:	1ad2      	subs	r2, r2, r3
 800d81e:	4591      	cmp	r9, r2
 800d820:	bfa8      	it	ge
 800d822:	4691      	movge	r9, r2
 800d824:	f1b9 0f00 	cmp.w	r9, #0
 800d828:	dc35      	bgt.n	800d896 <_printf_float+0x3aa>
 800d82a:	f04f 0800 	mov.w	r8, #0
 800d82e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d832:	f104 0a1a 	add.w	sl, r4, #26
 800d836:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d83a:	1a9b      	subs	r3, r3, r2
 800d83c:	eba3 0309 	sub.w	r3, r3, r9
 800d840:	4543      	cmp	r3, r8
 800d842:	f77f af79 	ble.w	800d738 <_printf_float+0x24c>
 800d846:	2301      	movs	r3, #1
 800d848:	4652      	mov	r2, sl
 800d84a:	4631      	mov	r1, r6
 800d84c:	4628      	mov	r0, r5
 800d84e:	47b8      	blx	r7
 800d850:	3001      	adds	r0, #1
 800d852:	f43f aeaa 	beq.w	800d5aa <_printf_float+0xbe>
 800d856:	f108 0801 	add.w	r8, r8, #1
 800d85a:	e7ec      	b.n	800d836 <_printf_float+0x34a>
 800d85c:	4613      	mov	r3, r2
 800d85e:	4631      	mov	r1, r6
 800d860:	4642      	mov	r2, r8
 800d862:	4628      	mov	r0, r5
 800d864:	47b8      	blx	r7
 800d866:	3001      	adds	r0, #1
 800d868:	d1c0      	bne.n	800d7ec <_printf_float+0x300>
 800d86a:	e69e      	b.n	800d5aa <_printf_float+0xbe>
 800d86c:	2301      	movs	r3, #1
 800d86e:	4631      	mov	r1, r6
 800d870:	4628      	mov	r0, r5
 800d872:	9205      	str	r2, [sp, #20]
 800d874:	47b8      	blx	r7
 800d876:	3001      	adds	r0, #1
 800d878:	f43f ae97 	beq.w	800d5aa <_printf_float+0xbe>
 800d87c:	9a05      	ldr	r2, [sp, #20]
 800d87e:	f10b 0b01 	add.w	fp, fp, #1
 800d882:	e7b9      	b.n	800d7f8 <_printf_float+0x30c>
 800d884:	ee18 3a10 	vmov	r3, s16
 800d888:	4652      	mov	r2, sl
 800d88a:	4631      	mov	r1, r6
 800d88c:	4628      	mov	r0, r5
 800d88e:	47b8      	blx	r7
 800d890:	3001      	adds	r0, #1
 800d892:	d1be      	bne.n	800d812 <_printf_float+0x326>
 800d894:	e689      	b.n	800d5aa <_printf_float+0xbe>
 800d896:	9a05      	ldr	r2, [sp, #20]
 800d898:	464b      	mov	r3, r9
 800d89a:	4442      	add	r2, r8
 800d89c:	4631      	mov	r1, r6
 800d89e:	4628      	mov	r0, r5
 800d8a0:	47b8      	blx	r7
 800d8a2:	3001      	adds	r0, #1
 800d8a4:	d1c1      	bne.n	800d82a <_printf_float+0x33e>
 800d8a6:	e680      	b.n	800d5aa <_printf_float+0xbe>
 800d8a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8aa:	2a01      	cmp	r2, #1
 800d8ac:	dc01      	bgt.n	800d8b2 <_printf_float+0x3c6>
 800d8ae:	07db      	lsls	r3, r3, #31
 800d8b0:	d53a      	bpl.n	800d928 <_printf_float+0x43c>
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	4642      	mov	r2, r8
 800d8b6:	4631      	mov	r1, r6
 800d8b8:	4628      	mov	r0, r5
 800d8ba:	47b8      	blx	r7
 800d8bc:	3001      	adds	r0, #1
 800d8be:	f43f ae74 	beq.w	800d5aa <_printf_float+0xbe>
 800d8c2:	ee18 3a10 	vmov	r3, s16
 800d8c6:	4652      	mov	r2, sl
 800d8c8:	4631      	mov	r1, r6
 800d8ca:	4628      	mov	r0, r5
 800d8cc:	47b8      	blx	r7
 800d8ce:	3001      	adds	r0, #1
 800d8d0:	f43f ae6b 	beq.w	800d5aa <_printf_float+0xbe>
 800d8d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d8d8:	2200      	movs	r2, #0
 800d8da:	2300      	movs	r3, #0
 800d8dc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800d8e0:	f7f3 f8da 	bl	8000a98 <__aeabi_dcmpeq>
 800d8e4:	b9d8      	cbnz	r0, 800d91e <_printf_float+0x432>
 800d8e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d8ea:	f108 0201 	add.w	r2, r8, #1
 800d8ee:	4631      	mov	r1, r6
 800d8f0:	4628      	mov	r0, r5
 800d8f2:	47b8      	blx	r7
 800d8f4:	3001      	adds	r0, #1
 800d8f6:	d10e      	bne.n	800d916 <_printf_float+0x42a>
 800d8f8:	e657      	b.n	800d5aa <_printf_float+0xbe>
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	4652      	mov	r2, sl
 800d8fe:	4631      	mov	r1, r6
 800d900:	4628      	mov	r0, r5
 800d902:	47b8      	blx	r7
 800d904:	3001      	adds	r0, #1
 800d906:	f43f ae50 	beq.w	800d5aa <_printf_float+0xbe>
 800d90a:	f108 0801 	add.w	r8, r8, #1
 800d90e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d910:	3b01      	subs	r3, #1
 800d912:	4543      	cmp	r3, r8
 800d914:	dcf1      	bgt.n	800d8fa <_printf_float+0x40e>
 800d916:	464b      	mov	r3, r9
 800d918:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d91c:	e6da      	b.n	800d6d4 <_printf_float+0x1e8>
 800d91e:	f04f 0800 	mov.w	r8, #0
 800d922:	f104 0a1a 	add.w	sl, r4, #26
 800d926:	e7f2      	b.n	800d90e <_printf_float+0x422>
 800d928:	2301      	movs	r3, #1
 800d92a:	4642      	mov	r2, r8
 800d92c:	e7df      	b.n	800d8ee <_printf_float+0x402>
 800d92e:	2301      	movs	r3, #1
 800d930:	464a      	mov	r2, r9
 800d932:	4631      	mov	r1, r6
 800d934:	4628      	mov	r0, r5
 800d936:	47b8      	blx	r7
 800d938:	3001      	adds	r0, #1
 800d93a:	f43f ae36 	beq.w	800d5aa <_printf_float+0xbe>
 800d93e:	f108 0801 	add.w	r8, r8, #1
 800d942:	68e3      	ldr	r3, [r4, #12]
 800d944:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d946:	1a5b      	subs	r3, r3, r1
 800d948:	4543      	cmp	r3, r8
 800d94a:	dcf0      	bgt.n	800d92e <_printf_float+0x442>
 800d94c:	e6f8      	b.n	800d740 <_printf_float+0x254>
 800d94e:	f04f 0800 	mov.w	r8, #0
 800d952:	f104 0919 	add.w	r9, r4, #25
 800d956:	e7f4      	b.n	800d942 <_printf_float+0x456>

0800d958 <_printf_common>:
 800d958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d95c:	4616      	mov	r6, r2
 800d95e:	4699      	mov	r9, r3
 800d960:	688a      	ldr	r2, [r1, #8]
 800d962:	690b      	ldr	r3, [r1, #16]
 800d964:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d968:	4293      	cmp	r3, r2
 800d96a:	bfb8      	it	lt
 800d96c:	4613      	movlt	r3, r2
 800d96e:	6033      	str	r3, [r6, #0]
 800d970:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d974:	4607      	mov	r7, r0
 800d976:	460c      	mov	r4, r1
 800d978:	b10a      	cbz	r2, 800d97e <_printf_common+0x26>
 800d97a:	3301      	adds	r3, #1
 800d97c:	6033      	str	r3, [r6, #0]
 800d97e:	6823      	ldr	r3, [r4, #0]
 800d980:	0699      	lsls	r1, r3, #26
 800d982:	bf42      	ittt	mi
 800d984:	6833      	ldrmi	r3, [r6, #0]
 800d986:	3302      	addmi	r3, #2
 800d988:	6033      	strmi	r3, [r6, #0]
 800d98a:	6825      	ldr	r5, [r4, #0]
 800d98c:	f015 0506 	ands.w	r5, r5, #6
 800d990:	d106      	bne.n	800d9a0 <_printf_common+0x48>
 800d992:	f104 0a19 	add.w	sl, r4, #25
 800d996:	68e3      	ldr	r3, [r4, #12]
 800d998:	6832      	ldr	r2, [r6, #0]
 800d99a:	1a9b      	subs	r3, r3, r2
 800d99c:	42ab      	cmp	r3, r5
 800d99e:	dc26      	bgt.n	800d9ee <_printf_common+0x96>
 800d9a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d9a4:	1e13      	subs	r3, r2, #0
 800d9a6:	6822      	ldr	r2, [r4, #0]
 800d9a8:	bf18      	it	ne
 800d9aa:	2301      	movne	r3, #1
 800d9ac:	0692      	lsls	r2, r2, #26
 800d9ae:	d42b      	bmi.n	800da08 <_printf_common+0xb0>
 800d9b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d9b4:	4649      	mov	r1, r9
 800d9b6:	4638      	mov	r0, r7
 800d9b8:	47c0      	blx	r8
 800d9ba:	3001      	adds	r0, #1
 800d9bc:	d01e      	beq.n	800d9fc <_printf_common+0xa4>
 800d9be:	6823      	ldr	r3, [r4, #0]
 800d9c0:	6922      	ldr	r2, [r4, #16]
 800d9c2:	f003 0306 	and.w	r3, r3, #6
 800d9c6:	2b04      	cmp	r3, #4
 800d9c8:	bf02      	ittt	eq
 800d9ca:	68e5      	ldreq	r5, [r4, #12]
 800d9cc:	6833      	ldreq	r3, [r6, #0]
 800d9ce:	1aed      	subeq	r5, r5, r3
 800d9d0:	68a3      	ldr	r3, [r4, #8]
 800d9d2:	bf0c      	ite	eq
 800d9d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d9d8:	2500      	movne	r5, #0
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	bfc4      	itt	gt
 800d9de:	1a9b      	subgt	r3, r3, r2
 800d9e0:	18ed      	addgt	r5, r5, r3
 800d9e2:	2600      	movs	r6, #0
 800d9e4:	341a      	adds	r4, #26
 800d9e6:	42b5      	cmp	r5, r6
 800d9e8:	d11a      	bne.n	800da20 <_printf_common+0xc8>
 800d9ea:	2000      	movs	r0, #0
 800d9ec:	e008      	b.n	800da00 <_printf_common+0xa8>
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	4652      	mov	r2, sl
 800d9f2:	4649      	mov	r1, r9
 800d9f4:	4638      	mov	r0, r7
 800d9f6:	47c0      	blx	r8
 800d9f8:	3001      	adds	r0, #1
 800d9fa:	d103      	bne.n	800da04 <_printf_common+0xac>
 800d9fc:	f04f 30ff 	mov.w	r0, #4294967295
 800da00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da04:	3501      	adds	r5, #1
 800da06:	e7c6      	b.n	800d996 <_printf_common+0x3e>
 800da08:	18e1      	adds	r1, r4, r3
 800da0a:	1c5a      	adds	r2, r3, #1
 800da0c:	2030      	movs	r0, #48	; 0x30
 800da0e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800da12:	4422      	add	r2, r4
 800da14:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800da18:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800da1c:	3302      	adds	r3, #2
 800da1e:	e7c7      	b.n	800d9b0 <_printf_common+0x58>
 800da20:	2301      	movs	r3, #1
 800da22:	4622      	mov	r2, r4
 800da24:	4649      	mov	r1, r9
 800da26:	4638      	mov	r0, r7
 800da28:	47c0      	blx	r8
 800da2a:	3001      	adds	r0, #1
 800da2c:	d0e6      	beq.n	800d9fc <_printf_common+0xa4>
 800da2e:	3601      	adds	r6, #1
 800da30:	e7d9      	b.n	800d9e6 <_printf_common+0x8e>
	...

0800da34 <_printf_i>:
 800da34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da38:	7e0f      	ldrb	r7, [r1, #24]
 800da3a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800da3c:	2f78      	cmp	r7, #120	; 0x78
 800da3e:	4691      	mov	r9, r2
 800da40:	4680      	mov	r8, r0
 800da42:	460c      	mov	r4, r1
 800da44:	469a      	mov	sl, r3
 800da46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800da4a:	d807      	bhi.n	800da5c <_printf_i+0x28>
 800da4c:	2f62      	cmp	r7, #98	; 0x62
 800da4e:	d80a      	bhi.n	800da66 <_printf_i+0x32>
 800da50:	2f00      	cmp	r7, #0
 800da52:	f000 80d4 	beq.w	800dbfe <_printf_i+0x1ca>
 800da56:	2f58      	cmp	r7, #88	; 0x58
 800da58:	f000 80c0 	beq.w	800dbdc <_printf_i+0x1a8>
 800da5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800da64:	e03a      	b.n	800dadc <_printf_i+0xa8>
 800da66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800da6a:	2b15      	cmp	r3, #21
 800da6c:	d8f6      	bhi.n	800da5c <_printf_i+0x28>
 800da6e:	a101      	add	r1, pc, #4	; (adr r1, 800da74 <_printf_i+0x40>)
 800da70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da74:	0800dacd 	.word	0x0800dacd
 800da78:	0800dae1 	.word	0x0800dae1
 800da7c:	0800da5d 	.word	0x0800da5d
 800da80:	0800da5d 	.word	0x0800da5d
 800da84:	0800da5d 	.word	0x0800da5d
 800da88:	0800da5d 	.word	0x0800da5d
 800da8c:	0800dae1 	.word	0x0800dae1
 800da90:	0800da5d 	.word	0x0800da5d
 800da94:	0800da5d 	.word	0x0800da5d
 800da98:	0800da5d 	.word	0x0800da5d
 800da9c:	0800da5d 	.word	0x0800da5d
 800daa0:	0800dbe5 	.word	0x0800dbe5
 800daa4:	0800db0d 	.word	0x0800db0d
 800daa8:	0800db9f 	.word	0x0800db9f
 800daac:	0800da5d 	.word	0x0800da5d
 800dab0:	0800da5d 	.word	0x0800da5d
 800dab4:	0800dc07 	.word	0x0800dc07
 800dab8:	0800da5d 	.word	0x0800da5d
 800dabc:	0800db0d 	.word	0x0800db0d
 800dac0:	0800da5d 	.word	0x0800da5d
 800dac4:	0800da5d 	.word	0x0800da5d
 800dac8:	0800dba7 	.word	0x0800dba7
 800dacc:	682b      	ldr	r3, [r5, #0]
 800dace:	1d1a      	adds	r2, r3, #4
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	602a      	str	r2, [r5, #0]
 800dad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dad8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dadc:	2301      	movs	r3, #1
 800dade:	e09f      	b.n	800dc20 <_printf_i+0x1ec>
 800dae0:	6820      	ldr	r0, [r4, #0]
 800dae2:	682b      	ldr	r3, [r5, #0]
 800dae4:	0607      	lsls	r7, r0, #24
 800dae6:	f103 0104 	add.w	r1, r3, #4
 800daea:	6029      	str	r1, [r5, #0]
 800daec:	d501      	bpl.n	800daf2 <_printf_i+0xbe>
 800daee:	681e      	ldr	r6, [r3, #0]
 800daf0:	e003      	b.n	800dafa <_printf_i+0xc6>
 800daf2:	0646      	lsls	r6, r0, #25
 800daf4:	d5fb      	bpl.n	800daee <_printf_i+0xba>
 800daf6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800dafa:	2e00      	cmp	r6, #0
 800dafc:	da03      	bge.n	800db06 <_printf_i+0xd2>
 800dafe:	232d      	movs	r3, #45	; 0x2d
 800db00:	4276      	negs	r6, r6
 800db02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db06:	485a      	ldr	r0, [pc, #360]	; (800dc70 <_printf_i+0x23c>)
 800db08:	230a      	movs	r3, #10
 800db0a:	e012      	b.n	800db32 <_printf_i+0xfe>
 800db0c:	682b      	ldr	r3, [r5, #0]
 800db0e:	6820      	ldr	r0, [r4, #0]
 800db10:	1d19      	adds	r1, r3, #4
 800db12:	6029      	str	r1, [r5, #0]
 800db14:	0605      	lsls	r5, r0, #24
 800db16:	d501      	bpl.n	800db1c <_printf_i+0xe8>
 800db18:	681e      	ldr	r6, [r3, #0]
 800db1a:	e002      	b.n	800db22 <_printf_i+0xee>
 800db1c:	0641      	lsls	r1, r0, #25
 800db1e:	d5fb      	bpl.n	800db18 <_printf_i+0xe4>
 800db20:	881e      	ldrh	r6, [r3, #0]
 800db22:	4853      	ldr	r0, [pc, #332]	; (800dc70 <_printf_i+0x23c>)
 800db24:	2f6f      	cmp	r7, #111	; 0x6f
 800db26:	bf0c      	ite	eq
 800db28:	2308      	moveq	r3, #8
 800db2a:	230a      	movne	r3, #10
 800db2c:	2100      	movs	r1, #0
 800db2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800db32:	6865      	ldr	r5, [r4, #4]
 800db34:	60a5      	str	r5, [r4, #8]
 800db36:	2d00      	cmp	r5, #0
 800db38:	bfa2      	ittt	ge
 800db3a:	6821      	ldrge	r1, [r4, #0]
 800db3c:	f021 0104 	bicge.w	r1, r1, #4
 800db40:	6021      	strge	r1, [r4, #0]
 800db42:	b90e      	cbnz	r6, 800db48 <_printf_i+0x114>
 800db44:	2d00      	cmp	r5, #0
 800db46:	d04b      	beq.n	800dbe0 <_printf_i+0x1ac>
 800db48:	4615      	mov	r5, r2
 800db4a:	fbb6 f1f3 	udiv	r1, r6, r3
 800db4e:	fb03 6711 	mls	r7, r3, r1, r6
 800db52:	5dc7      	ldrb	r7, [r0, r7]
 800db54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800db58:	4637      	mov	r7, r6
 800db5a:	42bb      	cmp	r3, r7
 800db5c:	460e      	mov	r6, r1
 800db5e:	d9f4      	bls.n	800db4a <_printf_i+0x116>
 800db60:	2b08      	cmp	r3, #8
 800db62:	d10b      	bne.n	800db7c <_printf_i+0x148>
 800db64:	6823      	ldr	r3, [r4, #0]
 800db66:	07de      	lsls	r6, r3, #31
 800db68:	d508      	bpl.n	800db7c <_printf_i+0x148>
 800db6a:	6923      	ldr	r3, [r4, #16]
 800db6c:	6861      	ldr	r1, [r4, #4]
 800db6e:	4299      	cmp	r1, r3
 800db70:	bfde      	ittt	le
 800db72:	2330      	movle	r3, #48	; 0x30
 800db74:	f805 3c01 	strble.w	r3, [r5, #-1]
 800db78:	f105 35ff 	addle.w	r5, r5, #4294967295
 800db7c:	1b52      	subs	r2, r2, r5
 800db7e:	6122      	str	r2, [r4, #16]
 800db80:	f8cd a000 	str.w	sl, [sp]
 800db84:	464b      	mov	r3, r9
 800db86:	aa03      	add	r2, sp, #12
 800db88:	4621      	mov	r1, r4
 800db8a:	4640      	mov	r0, r8
 800db8c:	f7ff fee4 	bl	800d958 <_printf_common>
 800db90:	3001      	adds	r0, #1
 800db92:	d14a      	bne.n	800dc2a <_printf_i+0x1f6>
 800db94:	f04f 30ff 	mov.w	r0, #4294967295
 800db98:	b004      	add	sp, #16
 800db9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db9e:	6823      	ldr	r3, [r4, #0]
 800dba0:	f043 0320 	orr.w	r3, r3, #32
 800dba4:	6023      	str	r3, [r4, #0]
 800dba6:	4833      	ldr	r0, [pc, #204]	; (800dc74 <_printf_i+0x240>)
 800dba8:	2778      	movs	r7, #120	; 0x78
 800dbaa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dbae:	6823      	ldr	r3, [r4, #0]
 800dbb0:	6829      	ldr	r1, [r5, #0]
 800dbb2:	061f      	lsls	r7, r3, #24
 800dbb4:	f851 6b04 	ldr.w	r6, [r1], #4
 800dbb8:	d402      	bmi.n	800dbc0 <_printf_i+0x18c>
 800dbba:	065f      	lsls	r7, r3, #25
 800dbbc:	bf48      	it	mi
 800dbbe:	b2b6      	uxthmi	r6, r6
 800dbc0:	07df      	lsls	r7, r3, #31
 800dbc2:	bf48      	it	mi
 800dbc4:	f043 0320 	orrmi.w	r3, r3, #32
 800dbc8:	6029      	str	r1, [r5, #0]
 800dbca:	bf48      	it	mi
 800dbcc:	6023      	strmi	r3, [r4, #0]
 800dbce:	b91e      	cbnz	r6, 800dbd8 <_printf_i+0x1a4>
 800dbd0:	6823      	ldr	r3, [r4, #0]
 800dbd2:	f023 0320 	bic.w	r3, r3, #32
 800dbd6:	6023      	str	r3, [r4, #0]
 800dbd8:	2310      	movs	r3, #16
 800dbda:	e7a7      	b.n	800db2c <_printf_i+0xf8>
 800dbdc:	4824      	ldr	r0, [pc, #144]	; (800dc70 <_printf_i+0x23c>)
 800dbde:	e7e4      	b.n	800dbaa <_printf_i+0x176>
 800dbe0:	4615      	mov	r5, r2
 800dbe2:	e7bd      	b.n	800db60 <_printf_i+0x12c>
 800dbe4:	682b      	ldr	r3, [r5, #0]
 800dbe6:	6826      	ldr	r6, [r4, #0]
 800dbe8:	6961      	ldr	r1, [r4, #20]
 800dbea:	1d18      	adds	r0, r3, #4
 800dbec:	6028      	str	r0, [r5, #0]
 800dbee:	0635      	lsls	r5, r6, #24
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	d501      	bpl.n	800dbf8 <_printf_i+0x1c4>
 800dbf4:	6019      	str	r1, [r3, #0]
 800dbf6:	e002      	b.n	800dbfe <_printf_i+0x1ca>
 800dbf8:	0670      	lsls	r0, r6, #25
 800dbfa:	d5fb      	bpl.n	800dbf4 <_printf_i+0x1c0>
 800dbfc:	8019      	strh	r1, [r3, #0]
 800dbfe:	2300      	movs	r3, #0
 800dc00:	6123      	str	r3, [r4, #16]
 800dc02:	4615      	mov	r5, r2
 800dc04:	e7bc      	b.n	800db80 <_printf_i+0x14c>
 800dc06:	682b      	ldr	r3, [r5, #0]
 800dc08:	1d1a      	adds	r2, r3, #4
 800dc0a:	602a      	str	r2, [r5, #0]
 800dc0c:	681d      	ldr	r5, [r3, #0]
 800dc0e:	6862      	ldr	r2, [r4, #4]
 800dc10:	2100      	movs	r1, #0
 800dc12:	4628      	mov	r0, r5
 800dc14:	f7f2 fac4 	bl	80001a0 <memchr>
 800dc18:	b108      	cbz	r0, 800dc1e <_printf_i+0x1ea>
 800dc1a:	1b40      	subs	r0, r0, r5
 800dc1c:	6060      	str	r0, [r4, #4]
 800dc1e:	6863      	ldr	r3, [r4, #4]
 800dc20:	6123      	str	r3, [r4, #16]
 800dc22:	2300      	movs	r3, #0
 800dc24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc28:	e7aa      	b.n	800db80 <_printf_i+0x14c>
 800dc2a:	6923      	ldr	r3, [r4, #16]
 800dc2c:	462a      	mov	r2, r5
 800dc2e:	4649      	mov	r1, r9
 800dc30:	4640      	mov	r0, r8
 800dc32:	47d0      	blx	sl
 800dc34:	3001      	adds	r0, #1
 800dc36:	d0ad      	beq.n	800db94 <_printf_i+0x160>
 800dc38:	6823      	ldr	r3, [r4, #0]
 800dc3a:	079b      	lsls	r3, r3, #30
 800dc3c:	d413      	bmi.n	800dc66 <_printf_i+0x232>
 800dc3e:	68e0      	ldr	r0, [r4, #12]
 800dc40:	9b03      	ldr	r3, [sp, #12]
 800dc42:	4298      	cmp	r0, r3
 800dc44:	bfb8      	it	lt
 800dc46:	4618      	movlt	r0, r3
 800dc48:	e7a6      	b.n	800db98 <_printf_i+0x164>
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	4632      	mov	r2, r6
 800dc4e:	4649      	mov	r1, r9
 800dc50:	4640      	mov	r0, r8
 800dc52:	47d0      	blx	sl
 800dc54:	3001      	adds	r0, #1
 800dc56:	d09d      	beq.n	800db94 <_printf_i+0x160>
 800dc58:	3501      	adds	r5, #1
 800dc5a:	68e3      	ldr	r3, [r4, #12]
 800dc5c:	9903      	ldr	r1, [sp, #12]
 800dc5e:	1a5b      	subs	r3, r3, r1
 800dc60:	42ab      	cmp	r3, r5
 800dc62:	dcf2      	bgt.n	800dc4a <_printf_i+0x216>
 800dc64:	e7eb      	b.n	800dc3e <_printf_i+0x20a>
 800dc66:	2500      	movs	r5, #0
 800dc68:	f104 0619 	add.w	r6, r4, #25
 800dc6c:	e7f5      	b.n	800dc5a <_printf_i+0x226>
 800dc6e:	bf00      	nop
 800dc70:	080115b2 	.word	0x080115b2
 800dc74:	080115c3 	.word	0x080115c3

0800dc78 <std>:
 800dc78:	2300      	movs	r3, #0
 800dc7a:	b510      	push	{r4, lr}
 800dc7c:	4604      	mov	r4, r0
 800dc7e:	e9c0 3300 	strd	r3, r3, [r0]
 800dc82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dc86:	6083      	str	r3, [r0, #8]
 800dc88:	8181      	strh	r1, [r0, #12]
 800dc8a:	6643      	str	r3, [r0, #100]	; 0x64
 800dc8c:	81c2      	strh	r2, [r0, #14]
 800dc8e:	6183      	str	r3, [r0, #24]
 800dc90:	4619      	mov	r1, r3
 800dc92:	2208      	movs	r2, #8
 800dc94:	305c      	adds	r0, #92	; 0x5c
 800dc96:	f000 f9ff 	bl	800e098 <memset>
 800dc9a:	4b0d      	ldr	r3, [pc, #52]	; (800dcd0 <std+0x58>)
 800dc9c:	6263      	str	r3, [r4, #36]	; 0x24
 800dc9e:	4b0d      	ldr	r3, [pc, #52]	; (800dcd4 <std+0x5c>)
 800dca0:	62a3      	str	r3, [r4, #40]	; 0x28
 800dca2:	4b0d      	ldr	r3, [pc, #52]	; (800dcd8 <std+0x60>)
 800dca4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dca6:	4b0d      	ldr	r3, [pc, #52]	; (800dcdc <std+0x64>)
 800dca8:	6323      	str	r3, [r4, #48]	; 0x30
 800dcaa:	4b0d      	ldr	r3, [pc, #52]	; (800dce0 <std+0x68>)
 800dcac:	6224      	str	r4, [r4, #32]
 800dcae:	429c      	cmp	r4, r3
 800dcb0:	d006      	beq.n	800dcc0 <std+0x48>
 800dcb2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800dcb6:	4294      	cmp	r4, r2
 800dcb8:	d002      	beq.n	800dcc0 <std+0x48>
 800dcba:	33d0      	adds	r3, #208	; 0xd0
 800dcbc:	429c      	cmp	r4, r3
 800dcbe:	d105      	bne.n	800dccc <std+0x54>
 800dcc0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dcc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcc8:	f000 ba62 	b.w	800e190 <__retarget_lock_init_recursive>
 800dccc:	bd10      	pop	{r4, pc}
 800dcce:	bf00      	nop
 800dcd0:	0800dee9 	.word	0x0800dee9
 800dcd4:	0800df0b 	.word	0x0800df0b
 800dcd8:	0800df43 	.word	0x0800df43
 800dcdc:	0800df67 	.word	0x0800df67
 800dce0:	20001874 	.word	0x20001874

0800dce4 <stdio_exit_handler>:
 800dce4:	4a02      	ldr	r2, [pc, #8]	; (800dcf0 <stdio_exit_handler+0xc>)
 800dce6:	4903      	ldr	r1, [pc, #12]	; (800dcf4 <stdio_exit_handler+0x10>)
 800dce8:	4803      	ldr	r0, [pc, #12]	; (800dcf8 <stdio_exit_handler+0x14>)
 800dcea:	f000 b869 	b.w	800ddc0 <_fwalk_sglue>
 800dcee:	bf00      	nop
 800dcf0:	2000004c 	.word	0x2000004c
 800dcf4:	0800fb39 	.word	0x0800fb39
 800dcf8:	20000058 	.word	0x20000058

0800dcfc <cleanup_stdio>:
 800dcfc:	6841      	ldr	r1, [r0, #4]
 800dcfe:	4b0c      	ldr	r3, [pc, #48]	; (800dd30 <cleanup_stdio+0x34>)
 800dd00:	4299      	cmp	r1, r3
 800dd02:	b510      	push	{r4, lr}
 800dd04:	4604      	mov	r4, r0
 800dd06:	d001      	beq.n	800dd0c <cleanup_stdio+0x10>
 800dd08:	f001 ff16 	bl	800fb38 <_fflush_r>
 800dd0c:	68a1      	ldr	r1, [r4, #8]
 800dd0e:	4b09      	ldr	r3, [pc, #36]	; (800dd34 <cleanup_stdio+0x38>)
 800dd10:	4299      	cmp	r1, r3
 800dd12:	d002      	beq.n	800dd1a <cleanup_stdio+0x1e>
 800dd14:	4620      	mov	r0, r4
 800dd16:	f001 ff0f 	bl	800fb38 <_fflush_r>
 800dd1a:	68e1      	ldr	r1, [r4, #12]
 800dd1c:	4b06      	ldr	r3, [pc, #24]	; (800dd38 <cleanup_stdio+0x3c>)
 800dd1e:	4299      	cmp	r1, r3
 800dd20:	d004      	beq.n	800dd2c <cleanup_stdio+0x30>
 800dd22:	4620      	mov	r0, r4
 800dd24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd28:	f001 bf06 	b.w	800fb38 <_fflush_r>
 800dd2c:	bd10      	pop	{r4, pc}
 800dd2e:	bf00      	nop
 800dd30:	20001874 	.word	0x20001874
 800dd34:	200018dc 	.word	0x200018dc
 800dd38:	20001944 	.word	0x20001944

0800dd3c <global_stdio_init.part.0>:
 800dd3c:	b510      	push	{r4, lr}
 800dd3e:	4b0b      	ldr	r3, [pc, #44]	; (800dd6c <global_stdio_init.part.0+0x30>)
 800dd40:	4c0b      	ldr	r4, [pc, #44]	; (800dd70 <global_stdio_init.part.0+0x34>)
 800dd42:	4a0c      	ldr	r2, [pc, #48]	; (800dd74 <global_stdio_init.part.0+0x38>)
 800dd44:	601a      	str	r2, [r3, #0]
 800dd46:	4620      	mov	r0, r4
 800dd48:	2200      	movs	r2, #0
 800dd4a:	2104      	movs	r1, #4
 800dd4c:	f7ff ff94 	bl	800dc78 <std>
 800dd50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800dd54:	2201      	movs	r2, #1
 800dd56:	2109      	movs	r1, #9
 800dd58:	f7ff ff8e 	bl	800dc78 <std>
 800dd5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800dd60:	2202      	movs	r2, #2
 800dd62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd66:	2112      	movs	r1, #18
 800dd68:	f7ff bf86 	b.w	800dc78 <std>
 800dd6c:	200019ac 	.word	0x200019ac
 800dd70:	20001874 	.word	0x20001874
 800dd74:	0800dce5 	.word	0x0800dce5

0800dd78 <__sfp_lock_acquire>:
 800dd78:	4801      	ldr	r0, [pc, #4]	; (800dd80 <__sfp_lock_acquire+0x8>)
 800dd7a:	f000 ba0a 	b.w	800e192 <__retarget_lock_acquire_recursive>
 800dd7e:	bf00      	nop
 800dd80:	200019b5 	.word	0x200019b5

0800dd84 <__sfp_lock_release>:
 800dd84:	4801      	ldr	r0, [pc, #4]	; (800dd8c <__sfp_lock_release+0x8>)
 800dd86:	f000 ba05 	b.w	800e194 <__retarget_lock_release_recursive>
 800dd8a:	bf00      	nop
 800dd8c:	200019b5 	.word	0x200019b5

0800dd90 <__sinit>:
 800dd90:	b510      	push	{r4, lr}
 800dd92:	4604      	mov	r4, r0
 800dd94:	f7ff fff0 	bl	800dd78 <__sfp_lock_acquire>
 800dd98:	6a23      	ldr	r3, [r4, #32]
 800dd9a:	b11b      	cbz	r3, 800dda4 <__sinit+0x14>
 800dd9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dda0:	f7ff bff0 	b.w	800dd84 <__sfp_lock_release>
 800dda4:	4b04      	ldr	r3, [pc, #16]	; (800ddb8 <__sinit+0x28>)
 800dda6:	6223      	str	r3, [r4, #32]
 800dda8:	4b04      	ldr	r3, [pc, #16]	; (800ddbc <__sinit+0x2c>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d1f5      	bne.n	800dd9c <__sinit+0xc>
 800ddb0:	f7ff ffc4 	bl	800dd3c <global_stdio_init.part.0>
 800ddb4:	e7f2      	b.n	800dd9c <__sinit+0xc>
 800ddb6:	bf00      	nop
 800ddb8:	0800dcfd 	.word	0x0800dcfd
 800ddbc:	200019ac 	.word	0x200019ac

0800ddc0 <_fwalk_sglue>:
 800ddc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddc4:	4607      	mov	r7, r0
 800ddc6:	4688      	mov	r8, r1
 800ddc8:	4614      	mov	r4, r2
 800ddca:	2600      	movs	r6, #0
 800ddcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ddd0:	f1b9 0901 	subs.w	r9, r9, #1
 800ddd4:	d505      	bpl.n	800dde2 <_fwalk_sglue+0x22>
 800ddd6:	6824      	ldr	r4, [r4, #0]
 800ddd8:	2c00      	cmp	r4, #0
 800ddda:	d1f7      	bne.n	800ddcc <_fwalk_sglue+0xc>
 800dddc:	4630      	mov	r0, r6
 800ddde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dde2:	89ab      	ldrh	r3, [r5, #12]
 800dde4:	2b01      	cmp	r3, #1
 800dde6:	d907      	bls.n	800ddf8 <_fwalk_sglue+0x38>
 800dde8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ddec:	3301      	adds	r3, #1
 800ddee:	d003      	beq.n	800ddf8 <_fwalk_sglue+0x38>
 800ddf0:	4629      	mov	r1, r5
 800ddf2:	4638      	mov	r0, r7
 800ddf4:	47c0      	blx	r8
 800ddf6:	4306      	orrs	r6, r0
 800ddf8:	3568      	adds	r5, #104	; 0x68
 800ddfa:	e7e9      	b.n	800ddd0 <_fwalk_sglue+0x10>

0800ddfc <iprintf>:
 800ddfc:	b40f      	push	{r0, r1, r2, r3}
 800ddfe:	b507      	push	{r0, r1, r2, lr}
 800de00:	4906      	ldr	r1, [pc, #24]	; (800de1c <iprintf+0x20>)
 800de02:	ab04      	add	r3, sp, #16
 800de04:	6808      	ldr	r0, [r1, #0]
 800de06:	f853 2b04 	ldr.w	r2, [r3], #4
 800de0a:	6881      	ldr	r1, [r0, #8]
 800de0c:	9301      	str	r3, [sp, #4]
 800de0e:	f001 fcf3 	bl	800f7f8 <_vfiprintf_r>
 800de12:	b003      	add	sp, #12
 800de14:	f85d eb04 	ldr.w	lr, [sp], #4
 800de18:	b004      	add	sp, #16
 800de1a:	4770      	bx	lr
 800de1c:	200000a4 	.word	0x200000a4

0800de20 <putchar>:
 800de20:	4b02      	ldr	r3, [pc, #8]	; (800de2c <putchar+0xc>)
 800de22:	4601      	mov	r1, r0
 800de24:	6818      	ldr	r0, [r3, #0]
 800de26:	6882      	ldr	r2, [r0, #8]
 800de28:	f001 bf10 	b.w	800fc4c <_putc_r>
 800de2c:	200000a4 	.word	0x200000a4

0800de30 <_puts_r>:
 800de30:	6a03      	ldr	r3, [r0, #32]
 800de32:	b570      	push	{r4, r5, r6, lr}
 800de34:	6884      	ldr	r4, [r0, #8]
 800de36:	4605      	mov	r5, r0
 800de38:	460e      	mov	r6, r1
 800de3a:	b90b      	cbnz	r3, 800de40 <_puts_r+0x10>
 800de3c:	f7ff ffa8 	bl	800dd90 <__sinit>
 800de40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de42:	07db      	lsls	r3, r3, #31
 800de44:	d405      	bmi.n	800de52 <_puts_r+0x22>
 800de46:	89a3      	ldrh	r3, [r4, #12]
 800de48:	0598      	lsls	r0, r3, #22
 800de4a:	d402      	bmi.n	800de52 <_puts_r+0x22>
 800de4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de4e:	f000 f9a0 	bl	800e192 <__retarget_lock_acquire_recursive>
 800de52:	89a3      	ldrh	r3, [r4, #12]
 800de54:	0719      	lsls	r1, r3, #28
 800de56:	d513      	bpl.n	800de80 <_puts_r+0x50>
 800de58:	6923      	ldr	r3, [r4, #16]
 800de5a:	b18b      	cbz	r3, 800de80 <_puts_r+0x50>
 800de5c:	3e01      	subs	r6, #1
 800de5e:	68a3      	ldr	r3, [r4, #8]
 800de60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800de64:	3b01      	subs	r3, #1
 800de66:	60a3      	str	r3, [r4, #8]
 800de68:	b9e9      	cbnz	r1, 800dea6 <_puts_r+0x76>
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	da2e      	bge.n	800decc <_puts_r+0x9c>
 800de6e:	4622      	mov	r2, r4
 800de70:	210a      	movs	r1, #10
 800de72:	4628      	mov	r0, r5
 800de74:	f000 f87b 	bl	800df6e <__swbuf_r>
 800de78:	3001      	adds	r0, #1
 800de7a:	d007      	beq.n	800de8c <_puts_r+0x5c>
 800de7c:	250a      	movs	r5, #10
 800de7e:	e007      	b.n	800de90 <_puts_r+0x60>
 800de80:	4621      	mov	r1, r4
 800de82:	4628      	mov	r0, r5
 800de84:	f000 f8b0 	bl	800dfe8 <__swsetup_r>
 800de88:	2800      	cmp	r0, #0
 800de8a:	d0e7      	beq.n	800de5c <_puts_r+0x2c>
 800de8c:	f04f 35ff 	mov.w	r5, #4294967295
 800de90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de92:	07da      	lsls	r2, r3, #31
 800de94:	d405      	bmi.n	800dea2 <_puts_r+0x72>
 800de96:	89a3      	ldrh	r3, [r4, #12]
 800de98:	059b      	lsls	r3, r3, #22
 800de9a:	d402      	bmi.n	800dea2 <_puts_r+0x72>
 800de9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de9e:	f000 f979 	bl	800e194 <__retarget_lock_release_recursive>
 800dea2:	4628      	mov	r0, r5
 800dea4:	bd70      	pop	{r4, r5, r6, pc}
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	da04      	bge.n	800deb4 <_puts_r+0x84>
 800deaa:	69a2      	ldr	r2, [r4, #24]
 800deac:	429a      	cmp	r2, r3
 800deae:	dc06      	bgt.n	800debe <_puts_r+0x8e>
 800deb0:	290a      	cmp	r1, #10
 800deb2:	d004      	beq.n	800debe <_puts_r+0x8e>
 800deb4:	6823      	ldr	r3, [r4, #0]
 800deb6:	1c5a      	adds	r2, r3, #1
 800deb8:	6022      	str	r2, [r4, #0]
 800deba:	7019      	strb	r1, [r3, #0]
 800debc:	e7cf      	b.n	800de5e <_puts_r+0x2e>
 800debe:	4622      	mov	r2, r4
 800dec0:	4628      	mov	r0, r5
 800dec2:	f000 f854 	bl	800df6e <__swbuf_r>
 800dec6:	3001      	adds	r0, #1
 800dec8:	d1c9      	bne.n	800de5e <_puts_r+0x2e>
 800deca:	e7df      	b.n	800de8c <_puts_r+0x5c>
 800decc:	6823      	ldr	r3, [r4, #0]
 800dece:	250a      	movs	r5, #10
 800ded0:	1c5a      	adds	r2, r3, #1
 800ded2:	6022      	str	r2, [r4, #0]
 800ded4:	701d      	strb	r5, [r3, #0]
 800ded6:	e7db      	b.n	800de90 <_puts_r+0x60>

0800ded8 <puts>:
 800ded8:	4b02      	ldr	r3, [pc, #8]	; (800dee4 <puts+0xc>)
 800deda:	4601      	mov	r1, r0
 800dedc:	6818      	ldr	r0, [r3, #0]
 800dede:	f7ff bfa7 	b.w	800de30 <_puts_r>
 800dee2:	bf00      	nop
 800dee4:	200000a4 	.word	0x200000a4

0800dee8 <__sread>:
 800dee8:	b510      	push	{r4, lr}
 800deea:	460c      	mov	r4, r1
 800deec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800def0:	f000 f900 	bl	800e0f4 <_read_r>
 800def4:	2800      	cmp	r0, #0
 800def6:	bfab      	itete	ge
 800def8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800defa:	89a3      	ldrhlt	r3, [r4, #12]
 800defc:	181b      	addge	r3, r3, r0
 800defe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800df02:	bfac      	ite	ge
 800df04:	6563      	strge	r3, [r4, #84]	; 0x54
 800df06:	81a3      	strhlt	r3, [r4, #12]
 800df08:	bd10      	pop	{r4, pc}

0800df0a <__swrite>:
 800df0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df0e:	461f      	mov	r7, r3
 800df10:	898b      	ldrh	r3, [r1, #12]
 800df12:	05db      	lsls	r3, r3, #23
 800df14:	4605      	mov	r5, r0
 800df16:	460c      	mov	r4, r1
 800df18:	4616      	mov	r6, r2
 800df1a:	d505      	bpl.n	800df28 <__swrite+0x1e>
 800df1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df20:	2302      	movs	r3, #2
 800df22:	2200      	movs	r2, #0
 800df24:	f000 f8d4 	bl	800e0d0 <_lseek_r>
 800df28:	89a3      	ldrh	r3, [r4, #12]
 800df2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df32:	81a3      	strh	r3, [r4, #12]
 800df34:	4632      	mov	r2, r6
 800df36:	463b      	mov	r3, r7
 800df38:	4628      	mov	r0, r5
 800df3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df3e:	f000 b8eb 	b.w	800e118 <_write_r>

0800df42 <__sseek>:
 800df42:	b510      	push	{r4, lr}
 800df44:	460c      	mov	r4, r1
 800df46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df4a:	f000 f8c1 	bl	800e0d0 <_lseek_r>
 800df4e:	1c43      	adds	r3, r0, #1
 800df50:	89a3      	ldrh	r3, [r4, #12]
 800df52:	bf15      	itete	ne
 800df54:	6560      	strne	r0, [r4, #84]	; 0x54
 800df56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800df5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800df5e:	81a3      	strheq	r3, [r4, #12]
 800df60:	bf18      	it	ne
 800df62:	81a3      	strhne	r3, [r4, #12]
 800df64:	bd10      	pop	{r4, pc}

0800df66 <__sclose>:
 800df66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df6a:	f000 b8a1 	b.w	800e0b0 <_close_r>

0800df6e <__swbuf_r>:
 800df6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df70:	460e      	mov	r6, r1
 800df72:	4614      	mov	r4, r2
 800df74:	4605      	mov	r5, r0
 800df76:	b118      	cbz	r0, 800df80 <__swbuf_r+0x12>
 800df78:	6a03      	ldr	r3, [r0, #32]
 800df7a:	b90b      	cbnz	r3, 800df80 <__swbuf_r+0x12>
 800df7c:	f7ff ff08 	bl	800dd90 <__sinit>
 800df80:	69a3      	ldr	r3, [r4, #24]
 800df82:	60a3      	str	r3, [r4, #8]
 800df84:	89a3      	ldrh	r3, [r4, #12]
 800df86:	071a      	lsls	r2, r3, #28
 800df88:	d525      	bpl.n	800dfd6 <__swbuf_r+0x68>
 800df8a:	6923      	ldr	r3, [r4, #16]
 800df8c:	b31b      	cbz	r3, 800dfd6 <__swbuf_r+0x68>
 800df8e:	6823      	ldr	r3, [r4, #0]
 800df90:	6922      	ldr	r2, [r4, #16]
 800df92:	1a98      	subs	r0, r3, r2
 800df94:	6963      	ldr	r3, [r4, #20]
 800df96:	b2f6      	uxtb	r6, r6
 800df98:	4283      	cmp	r3, r0
 800df9a:	4637      	mov	r7, r6
 800df9c:	dc04      	bgt.n	800dfa8 <__swbuf_r+0x3a>
 800df9e:	4621      	mov	r1, r4
 800dfa0:	4628      	mov	r0, r5
 800dfa2:	f001 fdc9 	bl	800fb38 <_fflush_r>
 800dfa6:	b9e0      	cbnz	r0, 800dfe2 <__swbuf_r+0x74>
 800dfa8:	68a3      	ldr	r3, [r4, #8]
 800dfaa:	3b01      	subs	r3, #1
 800dfac:	60a3      	str	r3, [r4, #8]
 800dfae:	6823      	ldr	r3, [r4, #0]
 800dfb0:	1c5a      	adds	r2, r3, #1
 800dfb2:	6022      	str	r2, [r4, #0]
 800dfb4:	701e      	strb	r6, [r3, #0]
 800dfb6:	6962      	ldr	r2, [r4, #20]
 800dfb8:	1c43      	adds	r3, r0, #1
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	d004      	beq.n	800dfc8 <__swbuf_r+0x5a>
 800dfbe:	89a3      	ldrh	r3, [r4, #12]
 800dfc0:	07db      	lsls	r3, r3, #31
 800dfc2:	d506      	bpl.n	800dfd2 <__swbuf_r+0x64>
 800dfc4:	2e0a      	cmp	r6, #10
 800dfc6:	d104      	bne.n	800dfd2 <__swbuf_r+0x64>
 800dfc8:	4621      	mov	r1, r4
 800dfca:	4628      	mov	r0, r5
 800dfcc:	f001 fdb4 	bl	800fb38 <_fflush_r>
 800dfd0:	b938      	cbnz	r0, 800dfe2 <__swbuf_r+0x74>
 800dfd2:	4638      	mov	r0, r7
 800dfd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfd6:	4621      	mov	r1, r4
 800dfd8:	4628      	mov	r0, r5
 800dfda:	f000 f805 	bl	800dfe8 <__swsetup_r>
 800dfde:	2800      	cmp	r0, #0
 800dfe0:	d0d5      	beq.n	800df8e <__swbuf_r+0x20>
 800dfe2:	f04f 37ff 	mov.w	r7, #4294967295
 800dfe6:	e7f4      	b.n	800dfd2 <__swbuf_r+0x64>

0800dfe8 <__swsetup_r>:
 800dfe8:	b538      	push	{r3, r4, r5, lr}
 800dfea:	4b2a      	ldr	r3, [pc, #168]	; (800e094 <__swsetup_r+0xac>)
 800dfec:	4605      	mov	r5, r0
 800dfee:	6818      	ldr	r0, [r3, #0]
 800dff0:	460c      	mov	r4, r1
 800dff2:	b118      	cbz	r0, 800dffc <__swsetup_r+0x14>
 800dff4:	6a03      	ldr	r3, [r0, #32]
 800dff6:	b90b      	cbnz	r3, 800dffc <__swsetup_r+0x14>
 800dff8:	f7ff feca 	bl	800dd90 <__sinit>
 800dffc:	89a3      	ldrh	r3, [r4, #12]
 800dffe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e002:	0718      	lsls	r0, r3, #28
 800e004:	d422      	bmi.n	800e04c <__swsetup_r+0x64>
 800e006:	06d9      	lsls	r1, r3, #27
 800e008:	d407      	bmi.n	800e01a <__swsetup_r+0x32>
 800e00a:	2309      	movs	r3, #9
 800e00c:	602b      	str	r3, [r5, #0]
 800e00e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e012:	81a3      	strh	r3, [r4, #12]
 800e014:	f04f 30ff 	mov.w	r0, #4294967295
 800e018:	e034      	b.n	800e084 <__swsetup_r+0x9c>
 800e01a:	0758      	lsls	r0, r3, #29
 800e01c:	d512      	bpl.n	800e044 <__swsetup_r+0x5c>
 800e01e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e020:	b141      	cbz	r1, 800e034 <__swsetup_r+0x4c>
 800e022:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e026:	4299      	cmp	r1, r3
 800e028:	d002      	beq.n	800e030 <__swsetup_r+0x48>
 800e02a:	4628      	mov	r0, r5
 800e02c:	f000 ff3e 	bl	800eeac <_free_r>
 800e030:	2300      	movs	r3, #0
 800e032:	6363      	str	r3, [r4, #52]	; 0x34
 800e034:	89a3      	ldrh	r3, [r4, #12]
 800e036:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e03a:	81a3      	strh	r3, [r4, #12]
 800e03c:	2300      	movs	r3, #0
 800e03e:	6063      	str	r3, [r4, #4]
 800e040:	6923      	ldr	r3, [r4, #16]
 800e042:	6023      	str	r3, [r4, #0]
 800e044:	89a3      	ldrh	r3, [r4, #12]
 800e046:	f043 0308 	orr.w	r3, r3, #8
 800e04a:	81a3      	strh	r3, [r4, #12]
 800e04c:	6923      	ldr	r3, [r4, #16]
 800e04e:	b94b      	cbnz	r3, 800e064 <__swsetup_r+0x7c>
 800e050:	89a3      	ldrh	r3, [r4, #12]
 800e052:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e05a:	d003      	beq.n	800e064 <__swsetup_r+0x7c>
 800e05c:	4621      	mov	r1, r4
 800e05e:	4628      	mov	r0, r5
 800e060:	f001 fdb8 	bl	800fbd4 <__smakebuf_r>
 800e064:	89a0      	ldrh	r0, [r4, #12]
 800e066:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e06a:	f010 0301 	ands.w	r3, r0, #1
 800e06e:	d00a      	beq.n	800e086 <__swsetup_r+0x9e>
 800e070:	2300      	movs	r3, #0
 800e072:	60a3      	str	r3, [r4, #8]
 800e074:	6963      	ldr	r3, [r4, #20]
 800e076:	425b      	negs	r3, r3
 800e078:	61a3      	str	r3, [r4, #24]
 800e07a:	6923      	ldr	r3, [r4, #16]
 800e07c:	b943      	cbnz	r3, 800e090 <__swsetup_r+0xa8>
 800e07e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e082:	d1c4      	bne.n	800e00e <__swsetup_r+0x26>
 800e084:	bd38      	pop	{r3, r4, r5, pc}
 800e086:	0781      	lsls	r1, r0, #30
 800e088:	bf58      	it	pl
 800e08a:	6963      	ldrpl	r3, [r4, #20]
 800e08c:	60a3      	str	r3, [r4, #8]
 800e08e:	e7f4      	b.n	800e07a <__swsetup_r+0x92>
 800e090:	2000      	movs	r0, #0
 800e092:	e7f7      	b.n	800e084 <__swsetup_r+0x9c>
 800e094:	200000a4 	.word	0x200000a4

0800e098 <memset>:
 800e098:	4402      	add	r2, r0
 800e09a:	4603      	mov	r3, r0
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d100      	bne.n	800e0a2 <memset+0xa>
 800e0a0:	4770      	bx	lr
 800e0a2:	f803 1b01 	strb.w	r1, [r3], #1
 800e0a6:	e7f9      	b.n	800e09c <memset+0x4>

0800e0a8 <_localeconv_r>:
 800e0a8:	4800      	ldr	r0, [pc, #0]	; (800e0ac <_localeconv_r+0x4>)
 800e0aa:	4770      	bx	lr
 800e0ac:	20000198 	.word	0x20000198

0800e0b0 <_close_r>:
 800e0b0:	b538      	push	{r3, r4, r5, lr}
 800e0b2:	4d06      	ldr	r5, [pc, #24]	; (800e0cc <_close_r+0x1c>)
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	4604      	mov	r4, r0
 800e0b8:	4608      	mov	r0, r1
 800e0ba:	602b      	str	r3, [r5, #0]
 800e0bc:	f7f5 f8e6 	bl	800328c <_close>
 800e0c0:	1c43      	adds	r3, r0, #1
 800e0c2:	d102      	bne.n	800e0ca <_close_r+0x1a>
 800e0c4:	682b      	ldr	r3, [r5, #0]
 800e0c6:	b103      	cbz	r3, 800e0ca <_close_r+0x1a>
 800e0c8:	6023      	str	r3, [r4, #0]
 800e0ca:	bd38      	pop	{r3, r4, r5, pc}
 800e0cc:	200019b0 	.word	0x200019b0

0800e0d0 <_lseek_r>:
 800e0d0:	b538      	push	{r3, r4, r5, lr}
 800e0d2:	4d07      	ldr	r5, [pc, #28]	; (800e0f0 <_lseek_r+0x20>)
 800e0d4:	4604      	mov	r4, r0
 800e0d6:	4608      	mov	r0, r1
 800e0d8:	4611      	mov	r1, r2
 800e0da:	2200      	movs	r2, #0
 800e0dc:	602a      	str	r2, [r5, #0]
 800e0de:	461a      	mov	r2, r3
 800e0e0:	f7f5 f8fb 	bl	80032da <_lseek>
 800e0e4:	1c43      	adds	r3, r0, #1
 800e0e6:	d102      	bne.n	800e0ee <_lseek_r+0x1e>
 800e0e8:	682b      	ldr	r3, [r5, #0]
 800e0ea:	b103      	cbz	r3, 800e0ee <_lseek_r+0x1e>
 800e0ec:	6023      	str	r3, [r4, #0]
 800e0ee:	bd38      	pop	{r3, r4, r5, pc}
 800e0f0:	200019b0 	.word	0x200019b0

0800e0f4 <_read_r>:
 800e0f4:	b538      	push	{r3, r4, r5, lr}
 800e0f6:	4d07      	ldr	r5, [pc, #28]	; (800e114 <_read_r+0x20>)
 800e0f8:	4604      	mov	r4, r0
 800e0fa:	4608      	mov	r0, r1
 800e0fc:	4611      	mov	r1, r2
 800e0fe:	2200      	movs	r2, #0
 800e100:	602a      	str	r2, [r5, #0]
 800e102:	461a      	mov	r2, r3
 800e104:	f7f5 f8a5 	bl	8003252 <_read>
 800e108:	1c43      	adds	r3, r0, #1
 800e10a:	d102      	bne.n	800e112 <_read_r+0x1e>
 800e10c:	682b      	ldr	r3, [r5, #0]
 800e10e:	b103      	cbz	r3, 800e112 <_read_r+0x1e>
 800e110:	6023      	str	r3, [r4, #0]
 800e112:	bd38      	pop	{r3, r4, r5, pc}
 800e114:	200019b0 	.word	0x200019b0

0800e118 <_write_r>:
 800e118:	b538      	push	{r3, r4, r5, lr}
 800e11a:	4d07      	ldr	r5, [pc, #28]	; (800e138 <_write_r+0x20>)
 800e11c:	4604      	mov	r4, r0
 800e11e:	4608      	mov	r0, r1
 800e120:	4611      	mov	r1, r2
 800e122:	2200      	movs	r2, #0
 800e124:	602a      	str	r2, [r5, #0]
 800e126:	461a      	mov	r2, r3
 800e128:	f7fd f8fa 	bl	800b320 <_write>
 800e12c:	1c43      	adds	r3, r0, #1
 800e12e:	d102      	bne.n	800e136 <_write_r+0x1e>
 800e130:	682b      	ldr	r3, [r5, #0]
 800e132:	b103      	cbz	r3, 800e136 <_write_r+0x1e>
 800e134:	6023      	str	r3, [r4, #0]
 800e136:	bd38      	pop	{r3, r4, r5, pc}
 800e138:	200019b0 	.word	0x200019b0

0800e13c <__errno>:
 800e13c:	4b01      	ldr	r3, [pc, #4]	; (800e144 <__errno+0x8>)
 800e13e:	6818      	ldr	r0, [r3, #0]
 800e140:	4770      	bx	lr
 800e142:	bf00      	nop
 800e144:	200000a4 	.word	0x200000a4

0800e148 <__libc_init_array>:
 800e148:	b570      	push	{r4, r5, r6, lr}
 800e14a:	4d0d      	ldr	r5, [pc, #52]	; (800e180 <__libc_init_array+0x38>)
 800e14c:	4c0d      	ldr	r4, [pc, #52]	; (800e184 <__libc_init_array+0x3c>)
 800e14e:	1b64      	subs	r4, r4, r5
 800e150:	10a4      	asrs	r4, r4, #2
 800e152:	2600      	movs	r6, #0
 800e154:	42a6      	cmp	r6, r4
 800e156:	d109      	bne.n	800e16c <__libc_init_array+0x24>
 800e158:	4d0b      	ldr	r5, [pc, #44]	; (800e188 <__libc_init_array+0x40>)
 800e15a:	4c0c      	ldr	r4, [pc, #48]	; (800e18c <__libc_init_array+0x44>)
 800e15c:	f001 fe8e 	bl	800fe7c <_init>
 800e160:	1b64      	subs	r4, r4, r5
 800e162:	10a4      	asrs	r4, r4, #2
 800e164:	2600      	movs	r6, #0
 800e166:	42a6      	cmp	r6, r4
 800e168:	d105      	bne.n	800e176 <__libc_init_array+0x2e>
 800e16a:	bd70      	pop	{r4, r5, r6, pc}
 800e16c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e170:	4798      	blx	r3
 800e172:	3601      	adds	r6, #1
 800e174:	e7ee      	b.n	800e154 <__libc_init_array+0xc>
 800e176:	f855 3b04 	ldr.w	r3, [r5], #4
 800e17a:	4798      	blx	r3
 800e17c:	3601      	adds	r6, #1
 800e17e:	e7f2      	b.n	800e166 <__libc_init_array+0x1e>
 800e180:	0801191c 	.word	0x0801191c
 800e184:	0801191c 	.word	0x0801191c
 800e188:	0801191c 	.word	0x0801191c
 800e18c:	08011920 	.word	0x08011920

0800e190 <__retarget_lock_init_recursive>:
 800e190:	4770      	bx	lr

0800e192 <__retarget_lock_acquire_recursive>:
 800e192:	4770      	bx	lr

0800e194 <__retarget_lock_release_recursive>:
 800e194:	4770      	bx	lr

0800e196 <memcpy>:
 800e196:	440a      	add	r2, r1
 800e198:	4291      	cmp	r1, r2
 800e19a:	f100 33ff 	add.w	r3, r0, #4294967295
 800e19e:	d100      	bne.n	800e1a2 <memcpy+0xc>
 800e1a0:	4770      	bx	lr
 800e1a2:	b510      	push	{r4, lr}
 800e1a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e1ac:	4291      	cmp	r1, r2
 800e1ae:	d1f9      	bne.n	800e1a4 <memcpy+0xe>
 800e1b0:	bd10      	pop	{r4, pc}

0800e1b2 <quorem>:
 800e1b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1b6:	6903      	ldr	r3, [r0, #16]
 800e1b8:	690c      	ldr	r4, [r1, #16]
 800e1ba:	42a3      	cmp	r3, r4
 800e1bc:	4607      	mov	r7, r0
 800e1be:	db7e      	blt.n	800e2be <quorem+0x10c>
 800e1c0:	3c01      	subs	r4, #1
 800e1c2:	f101 0814 	add.w	r8, r1, #20
 800e1c6:	f100 0514 	add.w	r5, r0, #20
 800e1ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e1ce:	9301      	str	r3, [sp, #4]
 800e1d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e1d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e1d8:	3301      	adds	r3, #1
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e1e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e1e4:	fbb2 f6f3 	udiv	r6, r2, r3
 800e1e8:	d331      	bcc.n	800e24e <quorem+0x9c>
 800e1ea:	f04f 0e00 	mov.w	lr, #0
 800e1ee:	4640      	mov	r0, r8
 800e1f0:	46ac      	mov	ip, r5
 800e1f2:	46f2      	mov	sl, lr
 800e1f4:	f850 2b04 	ldr.w	r2, [r0], #4
 800e1f8:	b293      	uxth	r3, r2
 800e1fa:	fb06 e303 	mla	r3, r6, r3, lr
 800e1fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e202:	0c1a      	lsrs	r2, r3, #16
 800e204:	b29b      	uxth	r3, r3
 800e206:	ebaa 0303 	sub.w	r3, sl, r3
 800e20a:	f8dc a000 	ldr.w	sl, [ip]
 800e20e:	fa13 f38a 	uxtah	r3, r3, sl
 800e212:	fb06 220e 	mla	r2, r6, lr, r2
 800e216:	9300      	str	r3, [sp, #0]
 800e218:	9b00      	ldr	r3, [sp, #0]
 800e21a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e21e:	b292      	uxth	r2, r2
 800e220:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e224:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e228:	f8bd 3000 	ldrh.w	r3, [sp]
 800e22c:	4581      	cmp	r9, r0
 800e22e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e232:	f84c 3b04 	str.w	r3, [ip], #4
 800e236:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e23a:	d2db      	bcs.n	800e1f4 <quorem+0x42>
 800e23c:	f855 300b 	ldr.w	r3, [r5, fp]
 800e240:	b92b      	cbnz	r3, 800e24e <quorem+0x9c>
 800e242:	9b01      	ldr	r3, [sp, #4]
 800e244:	3b04      	subs	r3, #4
 800e246:	429d      	cmp	r5, r3
 800e248:	461a      	mov	r2, r3
 800e24a:	d32c      	bcc.n	800e2a6 <quorem+0xf4>
 800e24c:	613c      	str	r4, [r7, #16]
 800e24e:	4638      	mov	r0, r7
 800e250:	f001 f9a8 	bl	800f5a4 <__mcmp>
 800e254:	2800      	cmp	r0, #0
 800e256:	db22      	blt.n	800e29e <quorem+0xec>
 800e258:	3601      	adds	r6, #1
 800e25a:	4629      	mov	r1, r5
 800e25c:	2000      	movs	r0, #0
 800e25e:	f858 2b04 	ldr.w	r2, [r8], #4
 800e262:	f8d1 c000 	ldr.w	ip, [r1]
 800e266:	b293      	uxth	r3, r2
 800e268:	1ac3      	subs	r3, r0, r3
 800e26a:	0c12      	lsrs	r2, r2, #16
 800e26c:	fa13 f38c 	uxtah	r3, r3, ip
 800e270:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800e274:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e278:	b29b      	uxth	r3, r3
 800e27a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e27e:	45c1      	cmp	r9, r8
 800e280:	f841 3b04 	str.w	r3, [r1], #4
 800e284:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e288:	d2e9      	bcs.n	800e25e <quorem+0xac>
 800e28a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e28e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e292:	b922      	cbnz	r2, 800e29e <quorem+0xec>
 800e294:	3b04      	subs	r3, #4
 800e296:	429d      	cmp	r5, r3
 800e298:	461a      	mov	r2, r3
 800e29a:	d30a      	bcc.n	800e2b2 <quorem+0x100>
 800e29c:	613c      	str	r4, [r7, #16]
 800e29e:	4630      	mov	r0, r6
 800e2a0:	b003      	add	sp, #12
 800e2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2a6:	6812      	ldr	r2, [r2, #0]
 800e2a8:	3b04      	subs	r3, #4
 800e2aa:	2a00      	cmp	r2, #0
 800e2ac:	d1ce      	bne.n	800e24c <quorem+0x9a>
 800e2ae:	3c01      	subs	r4, #1
 800e2b0:	e7c9      	b.n	800e246 <quorem+0x94>
 800e2b2:	6812      	ldr	r2, [r2, #0]
 800e2b4:	3b04      	subs	r3, #4
 800e2b6:	2a00      	cmp	r2, #0
 800e2b8:	d1f0      	bne.n	800e29c <quorem+0xea>
 800e2ba:	3c01      	subs	r4, #1
 800e2bc:	e7eb      	b.n	800e296 <quorem+0xe4>
 800e2be:	2000      	movs	r0, #0
 800e2c0:	e7ee      	b.n	800e2a0 <quorem+0xee>
 800e2c2:	0000      	movs	r0, r0
 800e2c4:	0000      	movs	r0, r0
	...

0800e2c8 <_dtoa_r>:
 800e2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2cc:	ed2d 8b04 	vpush	{d8-d9}
 800e2d0:	69c5      	ldr	r5, [r0, #28]
 800e2d2:	b093      	sub	sp, #76	; 0x4c
 800e2d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e2d8:	ec57 6b10 	vmov	r6, r7, d0
 800e2dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e2e0:	9107      	str	r1, [sp, #28]
 800e2e2:	4604      	mov	r4, r0
 800e2e4:	920a      	str	r2, [sp, #40]	; 0x28
 800e2e6:	930d      	str	r3, [sp, #52]	; 0x34
 800e2e8:	b975      	cbnz	r5, 800e308 <_dtoa_r+0x40>
 800e2ea:	2010      	movs	r0, #16
 800e2ec:	f000 fe2a 	bl	800ef44 <malloc>
 800e2f0:	4602      	mov	r2, r0
 800e2f2:	61e0      	str	r0, [r4, #28]
 800e2f4:	b920      	cbnz	r0, 800e300 <_dtoa_r+0x38>
 800e2f6:	4bae      	ldr	r3, [pc, #696]	; (800e5b0 <_dtoa_r+0x2e8>)
 800e2f8:	21ef      	movs	r1, #239	; 0xef
 800e2fa:	48ae      	ldr	r0, [pc, #696]	; (800e5b4 <_dtoa_r+0x2ec>)
 800e2fc:	f001 fd0c 	bl	800fd18 <__assert_func>
 800e300:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e304:	6005      	str	r5, [r0, #0]
 800e306:	60c5      	str	r5, [r0, #12]
 800e308:	69e3      	ldr	r3, [r4, #28]
 800e30a:	6819      	ldr	r1, [r3, #0]
 800e30c:	b151      	cbz	r1, 800e324 <_dtoa_r+0x5c>
 800e30e:	685a      	ldr	r2, [r3, #4]
 800e310:	604a      	str	r2, [r1, #4]
 800e312:	2301      	movs	r3, #1
 800e314:	4093      	lsls	r3, r2
 800e316:	608b      	str	r3, [r1, #8]
 800e318:	4620      	mov	r0, r4
 800e31a:	f000 ff07 	bl	800f12c <_Bfree>
 800e31e:	69e3      	ldr	r3, [r4, #28]
 800e320:	2200      	movs	r2, #0
 800e322:	601a      	str	r2, [r3, #0]
 800e324:	1e3b      	subs	r3, r7, #0
 800e326:	bfbb      	ittet	lt
 800e328:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e32c:	9303      	strlt	r3, [sp, #12]
 800e32e:	2300      	movge	r3, #0
 800e330:	2201      	movlt	r2, #1
 800e332:	bfac      	ite	ge
 800e334:	f8c8 3000 	strge.w	r3, [r8]
 800e338:	f8c8 2000 	strlt.w	r2, [r8]
 800e33c:	4b9e      	ldr	r3, [pc, #632]	; (800e5b8 <_dtoa_r+0x2f0>)
 800e33e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800e342:	ea33 0308 	bics.w	r3, r3, r8
 800e346:	d11b      	bne.n	800e380 <_dtoa_r+0xb8>
 800e348:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e34a:	f242 730f 	movw	r3, #9999	; 0x270f
 800e34e:	6013      	str	r3, [r2, #0]
 800e350:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800e354:	4333      	orrs	r3, r6
 800e356:	f000 8593 	beq.w	800ee80 <_dtoa_r+0xbb8>
 800e35a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e35c:	b963      	cbnz	r3, 800e378 <_dtoa_r+0xb0>
 800e35e:	4b97      	ldr	r3, [pc, #604]	; (800e5bc <_dtoa_r+0x2f4>)
 800e360:	e027      	b.n	800e3b2 <_dtoa_r+0xea>
 800e362:	4b97      	ldr	r3, [pc, #604]	; (800e5c0 <_dtoa_r+0x2f8>)
 800e364:	9300      	str	r3, [sp, #0]
 800e366:	3308      	adds	r3, #8
 800e368:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e36a:	6013      	str	r3, [r2, #0]
 800e36c:	9800      	ldr	r0, [sp, #0]
 800e36e:	b013      	add	sp, #76	; 0x4c
 800e370:	ecbd 8b04 	vpop	{d8-d9}
 800e374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e378:	4b90      	ldr	r3, [pc, #576]	; (800e5bc <_dtoa_r+0x2f4>)
 800e37a:	9300      	str	r3, [sp, #0]
 800e37c:	3303      	adds	r3, #3
 800e37e:	e7f3      	b.n	800e368 <_dtoa_r+0xa0>
 800e380:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e384:	2200      	movs	r2, #0
 800e386:	ec51 0b17 	vmov	r0, r1, d7
 800e38a:	eeb0 8a47 	vmov.f32	s16, s14
 800e38e:	eef0 8a67 	vmov.f32	s17, s15
 800e392:	2300      	movs	r3, #0
 800e394:	f7f2 fb80 	bl	8000a98 <__aeabi_dcmpeq>
 800e398:	4681      	mov	r9, r0
 800e39a:	b160      	cbz	r0, 800e3b6 <_dtoa_r+0xee>
 800e39c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e39e:	2301      	movs	r3, #1
 800e3a0:	6013      	str	r3, [r2, #0]
 800e3a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	f000 8568 	beq.w	800ee7a <_dtoa_r+0xbb2>
 800e3aa:	4b86      	ldr	r3, [pc, #536]	; (800e5c4 <_dtoa_r+0x2fc>)
 800e3ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e3ae:	6013      	str	r3, [r2, #0]
 800e3b0:	3b01      	subs	r3, #1
 800e3b2:	9300      	str	r3, [sp, #0]
 800e3b4:	e7da      	b.n	800e36c <_dtoa_r+0xa4>
 800e3b6:	aa10      	add	r2, sp, #64	; 0x40
 800e3b8:	a911      	add	r1, sp, #68	; 0x44
 800e3ba:	4620      	mov	r0, r4
 800e3bc:	eeb0 0a48 	vmov.f32	s0, s16
 800e3c0:	eef0 0a68 	vmov.f32	s1, s17
 800e3c4:	f001 f994 	bl	800f6f0 <__d2b>
 800e3c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e3cc:	4682      	mov	sl, r0
 800e3ce:	2d00      	cmp	r5, #0
 800e3d0:	d07f      	beq.n	800e4d2 <_dtoa_r+0x20a>
 800e3d2:	ee18 3a90 	vmov	r3, s17
 800e3d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e3da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800e3de:	ec51 0b18 	vmov	r0, r1, d8
 800e3e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e3e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e3ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	4b75      	ldr	r3, [pc, #468]	; (800e5c8 <_dtoa_r+0x300>)
 800e3f4:	f7f1 ff30 	bl	8000258 <__aeabi_dsub>
 800e3f8:	a367      	add	r3, pc, #412	; (adr r3, 800e598 <_dtoa_r+0x2d0>)
 800e3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3fe:	f7f2 f8e3 	bl	80005c8 <__aeabi_dmul>
 800e402:	a367      	add	r3, pc, #412	; (adr r3, 800e5a0 <_dtoa_r+0x2d8>)
 800e404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e408:	f7f1 ff28 	bl	800025c <__adddf3>
 800e40c:	4606      	mov	r6, r0
 800e40e:	4628      	mov	r0, r5
 800e410:	460f      	mov	r7, r1
 800e412:	f7f2 f86f 	bl	80004f4 <__aeabi_i2d>
 800e416:	a364      	add	r3, pc, #400	; (adr r3, 800e5a8 <_dtoa_r+0x2e0>)
 800e418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e41c:	f7f2 f8d4 	bl	80005c8 <__aeabi_dmul>
 800e420:	4602      	mov	r2, r0
 800e422:	460b      	mov	r3, r1
 800e424:	4630      	mov	r0, r6
 800e426:	4639      	mov	r1, r7
 800e428:	f7f1 ff18 	bl	800025c <__adddf3>
 800e42c:	4606      	mov	r6, r0
 800e42e:	460f      	mov	r7, r1
 800e430:	f7f2 fb7a 	bl	8000b28 <__aeabi_d2iz>
 800e434:	2200      	movs	r2, #0
 800e436:	4683      	mov	fp, r0
 800e438:	2300      	movs	r3, #0
 800e43a:	4630      	mov	r0, r6
 800e43c:	4639      	mov	r1, r7
 800e43e:	f7f2 fb35 	bl	8000aac <__aeabi_dcmplt>
 800e442:	b148      	cbz	r0, 800e458 <_dtoa_r+0x190>
 800e444:	4658      	mov	r0, fp
 800e446:	f7f2 f855 	bl	80004f4 <__aeabi_i2d>
 800e44a:	4632      	mov	r2, r6
 800e44c:	463b      	mov	r3, r7
 800e44e:	f7f2 fb23 	bl	8000a98 <__aeabi_dcmpeq>
 800e452:	b908      	cbnz	r0, 800e458 <_dtoa_r+0x190>
 800e454:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e458:	f1bb 0f16 	cmp.w	fp, #22
 800e45c:	d857      	bhi.n	800e50e <_dtoa_r+0x246>
 800e45e:	4b5b      	ldr	r3, [pc, #364]	; (800e5cc <_dtoa_r+0x304>)
 800e460:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e464:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e468:	ec51 0b18 	vmov	r0, r1, d8
 800e46c:	f7f2 fb1e 	bl	8000aac <__aeabi_dcmplt>
 800e470:	2800      	cmp	r0, #0
 800e472:	d04e      	beq.n	800e512 <_dtoa_r+0x24a>
 800e474:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e478:	2300      	movs	r3, #0
 800e47a:	930c      	str	r3, [sp, #48]	; 0x30
 800e47c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e47e:	1b5b      	subs	r3, r3, r5
 800e480:	1e5a      	subs	r2, r3, #1
 800e482:	bf45      	ittet	mi
 800e484:	f1c3 0301 	rsbmi	r3, r3, #1
 800e488:	9305      	strmi	r3, [sp, #20]
 800e48a:	2300      	movpl	r3, #0
 800e48c:	2300      	movmi	r3, #0
 800e48e:	9206      	str	r2, [sp, #24]
 800e490:	bf54      	ite	pl
 800e492:	9305      	strpl	r3, [sp, #20]
 800e494:	9306      	strmi	r3, [sp, #24]
 800e496:	f1bb 0f00 	cmp.w	fp, #0
 800e49a:	db3c      	blt.n	800e516 <_dtoa_r+0x24e>
 800e49c:	9b06      	ldr	r3, [sp, #24]
 800e49e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800e4a2:	445b      	add	r3, fp
 800e4a4:	9306      	str	r3, [sp, #24]
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	9308      	str	r3, [sp, #32]
 800e4aa:	9b07      	ldr	r3, [sp, #28]
 800e4ac:	2b09      	cmp	r3, #9
 800e4ae:	d868      	bhi.n	800e582 <_dtoa_r+0x2ba>
 800e4b0:	2b05      	cmp	r3, #5
 800e4b2:	bfc4      	itt	gt
 800e4b4:	3b04      	subgt	r3, #4
 800e4b6:	9307      	strgt	r3, [sp, #28]
 800e4b8:	9b07      	ldr	r3, [sp, #28]
 800e4ba:	f1a3 0302 	sub.w	r3, r3, #2
 800e4be:	bfcc      	ite	gt
 800e4c0:	2500      	movgt	r5, #0
 800e4c2:	2501      	movle	r5, #1
 800e4c4:	2b03      	cmp	r3, #3
 800e4c6:	f200 8085 	bhi.w	800e5d4 <_dtoa_r+0x30c>
 800e4ca:	e8df f003 	tbb	[pc, r3]
 800e4ce:	3b2e      	.short	0x3b2e
 800e4d0:	5839      	.short	0x5839
 800e4d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e4d6:	441d      	add	r5, r3
 800e4d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e4dc:	2b20      	cmp	r3, #32
 800e4de:	bfc1      	itttt	gt
 800e4e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e4e4:	fa08 f803 	lslgt.w	r8, r8, r3
 800e4e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800e4ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 800e4f0:	bfd6      	itet	le
 800e4f2:	f1c3 0320 	rsble	r3, r3, #32
 800e4f6:	ea48 0003 	orrgt.w	r0, r8, r3
 800e4fa:	fa06 f003 	lslle.w	r0, r6, r3
 800e4fe:	f7f1 ffe9 	bl	80004d4 <__aeabi_ui2d>
 800e502:	2201      	movs	r2, #1
 800e504:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800e508:	3d01      	subs	r5, #1
 800e50a:	920e      	str	r2, [sp, #56]	; 0x38
 800e50c:	e76f      	b.n	800e3ee <_dtoa_r+0x126>
 800e50e:	2301      	movs	r3, #1
 800e510:	e7b3      	b.n	800e47a <_dtoa_r+0x1b2>
 800e512:	900c      	str	r0, [sp, #48]	; 0x30
 800e514:	e7b2      	b.n	800e47c <_dtoa_r+0x1b4>
 800e516:	9b05      	ldr	r3, [sp, #20]
 800e518:	eba3 030b 	sub.w	r3, r3, fp
 800e51c:	9305      	str	r3, [sp, #20]
 800e51e:	f1cb 0300 	rsb	r3, fp, #0
 800e522:	9308      	str	r3, [sp, #32]
 800e524:	2300      	movs	r3, #0
 800e526:	930b      	str	r3, [sp, #44]	; 0x2c
 800e528:	e7bf      	b.n	800e4aa <_dtoa_r+0x1e2>
 800e52a:	2300      	movs	r3, #0
 800e52c:	9309      	str	r3, [sp, #36]	; 0x24
 800e52e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e530:	2b00      	cmp	r3, #0
 800e532:	dc52      	bgt.n	800e5da <_dtoa_r+0x312>
 800e534:	2301      	movs	r3, #1
 800e536:	9301      	str	r3, [sp, #4]
 800e538:	9304      	str	r3, [sp, #16]
 800e53a:	461a      	mov	r2, r3
 800e53c:	920a      	str	r2, [sp, #40]	; 0x28
 800e53e:	e00b      	b.n	800e558 <_dtoa_r+0x290>
 800e540:	2301      	movs	r3, #1
 800e542:	e7f3      	b.n	800e52c <_dtoa_r+0x264>
 800e544:	2300      	movs	r3, #0
 800e546:	9309      	str	r3, [sp, #36]	; 0x24
 800e548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e54a:	445b      	add	r3, fp
 800e54c:	9301      	str	r3, [sp, #4]
 800e54e:	3301      	adds	r3, #1
 800e550:	2b01      	cmp	r3, #1
 800e552:	9304      	str	r3, [sp, #16]
 800e554:	bfb8      	it	lt
 800e556:	2301      	movlt	r3, #1
 800e558:	69e0      	ldr	r0, [r4, #28]
 800e55a:	2100      	movs	r1, #0
 800e55c:	2204      	movs	r2, #4
 800e55e:	f102 0614 	add.w	r6, r2, #20
 800e562:	429e      	cmp	r6, r3
 800e564:	d93d      	bls.n	800e5e2 <_dtoa_r+0x31a>
 800e566:	6041      	str	r1, [r0, #4]
 800e568:	4620      	mov	r0, r4
 800e56a:	f000 fd9f 	bl	800f0ac <_Balloc>
 800e56e:	9000      	str	r0, [sp, #0]
 800e570:	2800      	cmp	r0, #0
 800e572:	d139      	bne.n	800e5e8 <_dtoa_r+0x320>
 800e574:	4b16      	ldr	r3, [pc, #88]	; (800e5d0 <_dtoa_r+0x308>)
 800e576:	4602      	mov	r2, r0
 800e578:	f240 11af 	movw	r1, #431	; 0x1af
 800e57c:	e6bd      	b.n	800e2fa <_dtoa_r+0x32>
 800e57e:	2301      	movs	r3, #1
 800e580:	e7e1      	b.n	800e546 <_dtoa_r+0x27e>
 800e582:	2501      	movs	r5, #1
 800e584:	2300      	movs	r3, #0
 800e586:	9307      	str	r3, [sp, #28]
 800e588:	9509      	str	r5, [sp, #36]	; 0x24
 800e58a:	f04f 33ff 	mov.w	r3, #4294967295
 800e58e:	9301      	str	r3, [sp, #4]
 800e590:	9304      	str	r3, [sp, #16]
 800e592:	2200      	movs	r2, #0
 800e594:	2312      	movs	r3, #18
 800e596:	e7d1      	b.n	800e53c <_dtoa_r+0x274>
 800e598:	636f4361 	.word	0x636f4361
 800e59c:	3fd287a7 	.word	0x3fd287a7
 800e5a0:	8b60c8b3 	.word	0x8b60c8b3
 800e5a4:	3fc68a28 	.word	0x3fc68a28
 800e5a8:	509f79fb 	.word	0x509f79fb
 800e5ac:	3fd34413 	.word	0x3fd34413
 800e5b0:	080115e1 	.word	0x080115e1
 800e5b4:	080115f8 	.word	0x080115f8
 800e5b8:	7ff00000 	.word	0x7ff00000
 800e5bc:	080115dd 	.word	0x080115dd
 800e5c0:	080115d4 	.word	0x080115d4
 800e5c4:	080115b1 	.word	0x080115b1
 800e5c8:	3ff80000 	.word	0x3ff80000
 800e5cc:	080116e8 	.word	0x080116e8
 800e5d0:	08011650 	.word	0x08011650
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	9309      	str	r3, [sp, #36]	; 0x24
 800e5d8:	e7d7      	b.n	800e58a <_dtoa_r+0x2c2>
 800e5da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5dc:	9301      	str	r3, [sp, #4]
 800e5de:	9304      	str	r3, [sp, #16]
 800e5e0:	e7ba      	b.n	800e558 <_dtoa_r+0x290>
 800e5e2:	3101      	adds	r1, #1
 800e5e4:	0052      	lsls	r2, r2, #1
 800e5e6:	e7ba      	b.n	800e55e <_dtoa_r+0x296>
 800e5e8:	69e3      	ldr	r3, [r4, #28]
 800e5ea:	9a00      	ldr	r2, [sp, #0]
 800e5ec:	601a      	str	r2, [r3, #0]
 800e5ee:	9b04      	ldr	r3, [sp, #16]
 800e5f0:	2b0e      	cmp	r3, #14
 800e5f2:	f200 80a8 	bhi.w	800e746 <_dtoa_r+0x47e>
 800e5f6:	2d00      	cmp	r5, #0
 800e5f8:	f000 80a5 	beq.w	800e746 <_dtoa_r+0x47e>
 800e5fc:	f1bb 0f00 	cmp.w	fp, #0
 800e600:	dd38      	ble.n	800e674 <_dtoa_r+0x3ac>
 800e602:	4bc0      	ldr	r3, [pc, #768]	; (800e904 <_dtoa_r+0x63c>)
 800e604:	f00b 020f 	and.w	r2, fp, #15
 800e608:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e60c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800e610:	e9d3 6700 	ldrd	r6, r7, [r3]
 800e614:	ea4f 182b 	mov.w	r8, fp, asr #4
 800e618:	d019      	beq.n	800e64e <_dtoa_r+0x386>
 800e61a:	4bbb      	ldr	r3, [pc, #748]	; (800e908 <_dtoa_r+0x640>)
 800e61c:	ec51 0b18 	vmov	r0, r1, d8
 800e620:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e624:	f7f2 f8fa 	bl	800081c <__aeabi_ddiv>
 800e628:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e62c:	f008 080f 	and.w	r8, r8, #15
 800e630:	2503      	movs	r5, #3
 800e632:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800e908 <_dtoa_r+0x640>
 800e636:	f1b8 0f00 	cmp.w	r8, #0
 800e63a:	d10a      	bne.n	800e652 <_dtoa_r+0x38a>
 800e63c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e640:	4632      	mov	r2, r6
 800e642:	463b      	mov	r3, r7
 800e644:	f7f2 f8ea 	bl	800081c <__aeabi_ddiv>
 800e648:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e64c:	e02b      	b.n	800e6a6 <_dtoa_r+0x3de>
 800e64e:	2502      	movs	r5, #2
 800e650:	e7ef      	b.n	800e632 <_dtoa_r+0x36a>
 800e652:	f018 0f01 	tst.w	r8, #1
 800e656:	d008      	beq.n	800e66a <_dtoa_r+0x3a2>
 800e658:	4630      	mov	r0, r6
 800e65a:	4639      	mov	r1, r7
 800e65c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800e660:	f7f1 ffb2 	bl	80005c8 <__aeabi_dmul>
 800e664:	3501      	adds	r5, #1
 800e666:	4606      	mov	r6, r0
 800e668:	460f      	mov	r7, r1
 800e66a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e66e:	f109 0908 	add.w	r9, r9, #8
 800e672:	e7e0      	b.n	800e636 <_dtoa_r+0x36e>
 800e674:	f000 809f 	beq.w	800e7b6 <_dtoa_r+0x4ee>
 800e678:	f1cb 0600 	rsb	r6, fp, #0
 800e67c:	4ba1      	ldr	r3, [pc, #644]	; (800e904 <_dtoa_r+0x63c>)
 800e67e:	4fa2      	ldr	r7, [pc, #648]	; (800e908 <_dtoa_r+0x640>)
 800e680:	f006 020f 	and.w	r2, r6, #15
 800e684:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e68c:	ec51 0b18 	vmov	r0, r1, d8
 800e690:	f7f1 ff9a 	bl	80005c8 <__aeabi_dmul>
 800e694:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e698:	1136      	asrs	r6, r6, #4
 800e69a:	2300      	movs	r3, #0
 800e69c:	2502      	movs	r5, #2
 800e69e:	2e00      	cmp	r6, #0
 800e6a0:	d17e      	bne.n	800e7a0 <_dtoa_r+0x4d8>
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d1d0      	bne.n	800e648 <_dtoa_r+0x380>
 800e6a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e6a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	f000 8084 	beq.w	800e7ba <_dtoa_r+0x4f2>
 800e6b2:	4b96      	ldr	r3, [pc, #600]	; (800e90c <_dtoa_r+0x644>)
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	4640      	mov	r0, r8
 800e6b8:	4649      	mov	r1, r9
 800e6ba:	f7f2 f9f7 	bl	8000aac <__aeabi_dcmplt>
 800e6be:	2800      	cmp	r0, #0
 800e6c0:	d07b      	beq.n	800e7ba <_dtoa_r+0x4f2>
 800e6c2:	9b04      	ldr	r3, [sp, #16]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d078      	beq.n	800e7ba <_dtoa_r+0x4f2>
 800e6c8:	9b01      	ldr	r3, [sp, #4]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	dd39      	ble.n	800e742 <_dtoa_r+0x47a>
 800e6ce:	4b90      	ldr	r3, [pc, #576]	; (800e910 <_dtoa_r+0x648>)
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	4640      	mov	r0, r8
 800e6d4:	4649      	mov	r1, r9
 800e6d6:	f7f1 ff77 	bl	80005c8 <__aeabi_dmul>
 800e6da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e6de:	9e01      	ldr	r6, [sp, #4]
 800e6e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800e6e4:	3501      	adds	r5, #1
 800e6e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e6ea:	4628      	mov	r0, r5
 800e6ec:	f7f1 ff02 	bl	80004f4 <__aeabi_i2d>
 800e6f0:	4642      	mov	r2, r8
 800e6f2:	464b      	mov	r3, r9
 800e6f4:	f7f1 ff68 	bl	80005c8 <__aeabi_dmul>
 800e6f8:	4b86      	ldr	r3, [pc, #536]	; (800e914 <_dtoa_r+0x64c>)
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	f7f1 fdae 	bl	800025c <__adddf3>
 800e700:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800e704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e708:	9303      	str	r3, [sp, #12]
 800e70a:	2e00      	cmp	r6, #0
 800e70c:	d158      	bne.n	800e7c0 <_dtoa_r+0x4f8>
 800e70e:	4b82      	ldr	r3, [pc, #520]	; (800e918 <_dtoa_r+0x650>)
 800e710:	2200      	movs	r2, #0
 800e712:	4640      	mov	r0, r8
 800e714:	4649      	mov	r1, r9
 800e716:	f7f1 fd9f 	bl	8000258 <__aeabi_dsub>
 800e71a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e71e:	4680      	mov	r8, r0
 800e720:	4689      	mov	r9, r1
 800e722:	f7f2 f9e1 	bl	8000ae8 <__aeabi_dcmpgt>
 800e726:	2800      	cmp	r0, #0
 800e728:	f040 8296 	bne.w	800ec58 <_dtoa_r+0x990>
 800e72c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e730:	4640      	mov	r0, r8
 800e732:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e736:	4649      	mov	r1, r9
 800e738:	f7f2 f9b8 	bl	8000aac <__aeabi_dcmplt>
 800e73c:	2800      	cmp	r0, #0
 800e73e:	f040 8289 	bne.w	800ec54 <_dtoa_r+0x98c>
 800e742:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e746:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e748:	2b00      	cmp	r3, #0
 800e74a:	f2c0 814e 	blt.w	800e9ea <_dtoa_r+0x722>
 800e74e:	f1bb 0f0e 	cmp.w	fp, #14
 800e752:	f300 814a 	bgt.w	800e9ea <_dtoa_r+0x722>
 800e756:	4b6b      	ldr	r3, [pc, #428]	; (800e904 <_dtoa_r+0x63c>)
 800e758:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800e75c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e762:	2b00      	cmp	r3, #0
 800e764:	f280 80dc 	bge.w	800e920 <_dtoa_r+0x658>
 800e768:	9b04      	ldr	r3, [sp, #16]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	f300 80d8 	bgt.w	800e920 <_dtoa_r+0x658>
 800e770:	f040 826f 	bne.w	800ec52 <_dtoa_r+0x98a>
 800e774:	4b68      	ldr	r3, [pc, #416]	; (800e918 <_dtoa_r+0x650>)
 800e776:	2200      	movs	r2, #0
 800e778:	4640      	mov	r0, r8
 800e77a:	4649      	mov	r1, r9
 800e77c:	f7f1 ff24 	bl	80005c8 <__aeabi_dmul>
 800e780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e784:	f7f2 f9a6 	bl	8000ad4 <__aeabi_dcmpge>
 800e788:	9e04      	ldr	r6, [sp, #16]
 800e78a:	4637      	mov	r7, r6
 800e78c:	2800      	cmp	r0, #0
 800e78e:	f040 8245 	bne.w	800ec1c <_dtoa_r+0x954>
 800e792:	9d00      	ldr	r5, [sp, #0]
 800e794:	2331      	movs	r3, #49	; 0x31
 800e796:	f805 3b01 	strb.w	r3, [r5], #1
 800e79a:	f10b 0b01 	add.w	fp, fp, #1
 800e79e:	e241      	b.n	800ec24 <_dtoa_r+0x95c>
 800e7a0:	07f2      	lsls	r2, r6, #31
 800e7a2:	d505      	bpl.n	800e7b0 <_dtoa_r+0x4e8>
 800e7a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7a8:	f7f1 ff0e 	bl	80005c8 <__aeabi_dmul>
 800e7ac:	3501      	adds	r5, #1
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	1076      	asrs	r6, r6, #1
 800e7b2:	3708      	adds	r7, #8
 800e7b4:	e773      	b.n	800e69e <_dtoa_r+0x3d6>
 800e7b6:	2502      	movs	r5, #2
 800e7b8:	e775      	b.n	800e6a6 <_dtoa_r+0x3de>
 800e7ba:	9e04      	ldr	r6, [sp, #16]
 800e7bc:	465f      	mov	r7, fp
 800e7be:	e792      	b.n	800e6e6 <_dtoa_r+0x41e>
 800e7c0:	9900      	ldr	r1, [sp, #0]
 800e7c2:	4b50      	ldr	r3, [pc, #320]	; (800e904 <_dtoa_r+0x63c>)
 800e7c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e7c8:	4431      	add	r1, r6
 800e7ca:	9102      	str	r1, [sp, #8]
 800e7cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e7ce:	eeb0 9a47 	vmov.f32	s18, s14
 800e7d2:	eef0 9a67 	vmov.f32	s19, s15
 800e7d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e7da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e7de:	2900      	cmp	r1, #0
 800e7e0:	d044      	beq.n	800e86c <_dtoa_r+0x5a4>
 800e7e2:	494e      	ldr	r1, [pc, #312]	; (800e91c <_dtoa_r+0x654>)
 800e7e4:	2000      	movs	r0, #0
 800e7e6:	f7f2 f819 	bl	800081c <__aeabi_ddiv>
 800e7ea:	ec53 2b19 	vmov	r2, r3, d9
 800e7ee:	f7f1 fd33 	bl	8000258 <__aeabi_dsub>
 800e7f2:	9d00      	ldr	r5, [sp, #0]
 800e7f4:	ec41 0b19 	vmov	d9, r0, r1
 800e7f8:	4649      	mov	r1, r9
 800e7fa:	4640      	mov	r0, r8
 800e7fc:	f7f2 f994 	bl	8000b28 <__aeabi_d2iz>
 800e800:	4606      	mov	r6, r0
 800e802:	f7f1 fe77 	bl	80004f4 <__aeabi_i2d>
 800e806:	4602      	mov	r2, r0
 800e808:	460b      	mov	r3, r1
 800e80a:	4640      	mov	r0, r8
 800e80c:	4649      	mov	r1, r9
 800e80e:	f7f1 fd23 	bl	8000258 <__aeabi_dsub>
 800e812:	3630      	adds	r6, #48	; 0x30
 800e814:	f805 6b01 	strb.w	r6, [r5], #1
 800e818:	ec53 2b19 	vmov	r2, r3, d9
 800e81c:	4680      	mov	r8, r0
 800e81e:	4689      	mov	r9, r1
 800e820:	f7f2 f944 	bl	8000aac <__aeabi_dcmplt>
 800e824:	2800      	cmp	r0, #0
 800e826:	d164      	bne.n	800e8f2 <_dtoa_r+0x62a>
 800e828:	4642      	mov	r2, r8
 800e82a:	464b      	mov	r3, r9
 800e82c:	4937      	ldr	r1, [pc, #220]	; (800e90c <_dtoa_r+0x644>)
 800e82e:	2000      	movs	r0, #0
 800e830:	f7f1 fd12 	bl	8000258 <__aeabi_dsub>
 800e834:	ec53 2b19 	vmov	r2, r3, d9
 800e838:	f7f2 f938 	bl	8000aac <__aeabi_dcmplt>
 800e83c:	2800      	cmp	r0, #0
 800e83e:	f040 80b6 	bne.w	800e9ae <_dtoa_r+0x6e6>
 800e842:	9b02      	ldr	r3, [sp, #8]
 800e844:	429d      	cmp	r5, r3
 800e846:	f43f af7c 	beq.w	800e742 <_dtoa_r+0x47a>
 800e84a:	4b31      	ldr	r3, [pc, #196]	; (800e910 <_dtoa_r+0x648>)
 800e84c:	ec51 0b19 	vmov	r0, r1, d9
 800e850:	2200      	movs	r2, #0
 800e852:	f7f1 feb9 	bl	80005c8 <__aeabi_dmul>
 800e856:	4b2e      	ldr	r3, [pc, #184]	; (800e910 <_dtoa_r+0x648>)
 800e858:	ec41 0b19 	vmov	d9, r0, r1
 800e85c:	2200      	movs	r2, #0
 800e85e:	4640      	mov	r0, r8
 800e860:	4649      	mov	r1, r9
 800e862:	f7f1 feb1 	bl	80005c8 <__aeabi_dmul>
 800e866:	4680      	mov	r8, r0
 800e868:	4689      	mov	r9, r1
 800e86a:	e7c5      	b.n	800e7f8 <_dtoa_r+0x530>
 800e86c:	ec51 0b17 	vmov	r0, r1, d7
 800e870:	f7f1 feaa 	bl	80005c8 <__aeabi_dmul>
 800e874:	9b02      	ldr	r3, [sp, #8]
 800e876:	9d00      	ldr	r5, [sp, #0]
 800e878:	930f      	str	r3, [sp, #60]	; 0x3c
 800e87a:	ec41 0b19 	vmov	d9, r0, r1
 800e87e:	4649      	mov	r1, r9
 800e880:	4640      	mov	r0, r8
 800e882:	f7f2 f951 	bl	8000b28 <__aeabi_d2iz>
 800e886:	4606      	mov	r6, r0
 800e888:	f7f1 fe34 	bl	80004f4 <__aeabi_i2d>
 800e88c:	3630      	adds	r6, #48	; 0x30
 800e88e:	4602      	mov	r2, r0
 800e890:	460b      	mov	r3, r1
 800e892:	4640      	mov	r0, r8
 800e894:	4649      	mov	r1, r9
 800e896:	f7f1 fcdf 	bl	8000258 <__aeabi_dsub>
 800e89a:	f805 6b01 	strb.w	r6, [r5], #1
 800e89e:	9b02      	ldr	r3, [sp, #8]
 800e8a0:	429d      	cmp	r5, r3
 800e8a2:	4680      	mov	r8, r0
 800e8a4:	4689      	mov	r9, r1
 800e8a6:	f04f 0200 	mov.w	r2, #0
 800e8aa:	d124      	bne.n	800e8f6 <_dtoa_r+0x62e>
 800e8ac:	4b1b      	ldr	r3, [pc, #108]	; (800e91c <_dtoa_r+0x654>)
 800e8ae:	ec51 0b19 	vmov	r0, r1, d9
 800e8b2:	f7f1 fcd3 	bl	800025c <__adddf3>
 800e8b6:	4602      	mov	r2, r0
 800e8b8:	460b      	mov	r3, r1
 800e8ba:	4640      	mov	r0, r8
 800e8bc:	4649      	mov	r1, r9
 800e8be:	f7f2 f913 	bl	8000ae8 <__aeabi_dcmpgt>
 800e8c2:	2800      	cmp	r0, #0
 800e8c4:	d173      	bne.n	800e9ae <_dtoa_r+0x6e6>
 800e8c6:	ec53 2b19 	vmov	r2, r3, d9
 800e8ca:	4914      	ldr	r1, [pc, #80]	; (800e91c <_dtoa_r+0x654>)
 800e8cc:	2000      	movs	r0, #0
 800e8ce:	f7f1 fcc3 	bl	8000258 <__aeabi_dsub>
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	460b      	mov	r3, r1
 800e8d6:	4640      	mov	r0, r8
 800e8d8:	4649      	mov	r1, r9
 800e8da:	f7f2 f8e7 	bl	8000aac <__aeabi_dcmplt>
 800e8de:	2800      	cmp	r0, #0
 800e8e0:	f43f af2f 	beq.w	800e742 <_dtoa_r+0x47a>
 800e8e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e8e6:	1e6b      	subs	r3, r5, #1
 800e8e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800e8ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e8ee:	2b30      	cmp	r3, #48	; 0x30
 800e8f0:	d0f8      	beq.n	800e8e4 <_dtoa_r+0x61c>
 800e8f2:	46bb      	mov	fp, r7
 800e8f4:	e04a      	b.n	800e98c <_dtoa_r+0x6c4>
 800e8f6:	4b06      	ldr	r3, [pc, #24]	; (800e910 <_dtoa_r+0x648>)
 800e8f8:	f7f1 fe66 	bl	80005c8 <__aeabi_dmul>
 800e8fc:	4680      	mov	r8, r0
 800e8fe:	4689      	mov	r9, r1
 800e900:	e7bd      	b.n	800e87e <_dtoa_r+0x5b6>
 800e902:	bf00      	nop
 800e904:	080116e8 	.word	0x080116e8
 800e908:	080116c0 	.word	0x080116c0
 800e90c:	3ff00000 	.word	0x3ff00000
 800e910:	40240000 	.word	0x40240000
 800e914:	401c0000 	.word	0x401c0000
 800e918:	40140000 	.word	0x40140000
 800e91c:	3fe00000 	.word	0x3fe00000
 800e920:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800e924:	9d00      	ldr	r5, [sp, #0]
 800e926:	4642      	mov	r2, r8
 800e928:	464b      	mov	r3, r9
 800e92a:	4630      	mov	r0, r6
 800e92c:	4639      	mov	r1, r7
 800e92e:	f7f1 ff75 	bl	800081c <__aeabi_ddiv>
 800e932:	f7f2 f8f9 	bl	8000b28 <__aeabi_d2iz>
 800e936:	9001      	str	r0, [sp, #4]
 800e938:	f7f1 fddc 	bl	80004f4 <__aeabi_i2d>
 800e93c:	4642      	mov	r2, r8
 800e93e:	464b      	mov	r3, r9
 800e940:	f7f1 fe42 	bl	80005c8 <__aeabi_dmul>
 800e944:	4602      	mov	r2, r0
 800e946:	460b      	mov	r3, r1
 800e948:	4630      	mov	r0, r6
 800e94a:	4639      	mov	r1, r7
 800e94c:	f7f1 fc84 	bl	8000258 <__aeabi_dsub>
 800e950:	9e01      	ldr	r6, [sp, #4]
 800e952:	9f04      	ldr	r7, [sp, #16]
 800e954:	3630      	adds	r6, #48	; 0x30
 800e956:	f805 6b01 	strb.w	r6, [r5], #1
 800e95a:	9e00      	ldr	r6, [sp, #0]
 800e95c:	1bae      	subs	r6, r5, r6
 800e95e:	42b7      	cmp	r7, r6
 800e960:	4602      	mov	r2, r0
 800e962:	460b      	mov	r3, r1
 800e964:	d134      	bne.n	800e9d0 <_dtoa_r+0x708>
 800e966:	f7f1 fc79 	bl	800025c <__adddf3>
 800e96a:	4642      	mov	r2, r8
 800e96c:	464b      	mov	r3, r9
 800e96e:	4606      	mov	r6, r0
 800e970:	460f      	mov	r7, r1
 800e972:	f7f2 f8b9 	bl	8000ae8 <__aeabi_dcmpgt>
 800e976:	b9c8      	cbnz	r0, 800e9ac <_dtoa_r+0x6e4>
 800e978:	4642      	mov	r2, r8
 800e97a:	464b      	mov	r3, r9
 800e97c:	4630      	mov	r0, r6
 800e97e:	4639      	mov	r1, r7
 800e980:	f7f2 f88a 	bl	8000a98 <__aeabi_dcmpeq>
 800e984:	b110      	cbz	r0, 800e98c <_dtoa_r+0x6c4>
 800e986:	9b01      	ldr	r3, [sp, #4]
 800e988:	07db      	lsls	r3, r3, #31
 800e98a:	d40f      	bmi.n	800e9ac <_dtoa_r+0x6e4>
 800e98c:	4651      	mov	r1, sl
 800e98e:	4620      	mov	r0, r4
 800e990:	f000 fbcc 	bl	800f12c <_Bfree>
 800e994:	2300      	movs	r3, #0
 800e996:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e998:	702b      	strb	r3, [r5, #0]
 800e99a:	f10b 0301 	add.w	r3, fp, #1
 800e99e:	6013      	str	r3, [r2, #0]
 800e9a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	f43f ace2 	beq.w	800e36c <_dtoa_r+0xa4>
 800e9a8:	601d      	str	r5, [r3, #0]
 800e9aa:	e4df      	b.n	800e36c <_dtoa_r+0xa4>
 800e9ac:	465f      	mov	r7, fp
 800e9ae:	462b      	mov	r3, r5
 800e9b0:	461d      	mov	r5, r3
 800e9b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e9b6:	2a39      	cmp	r2, #57	; 0x39
 800e9b8:	d106      	bne.n	800e9c8 <_dtoa_r+0x700>
 800e9ba:	9a00      	ldr	r2, [sp, #0]
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d1f7      	bne.n	800e9b0 <_dtoa_r+0x6e8>
 800e9c0:	9900      	ldr	r1, [sp, #0]
 800e9c2:	2230      	movs	r2, #48	; 0x30
 800e9c4:	3701      	adds	r7, #1
 800e9c6:	700a      	strb	r2, [r1, #0]
 800e9c8:	781a      	ldrb	r2, [r3, #0]
 800e9ca:	3201      	adds	r2, #1
 800e9cc:	701a      	strb	r2, [r3, #0]
 800e9ce:	e790      	b.n	800e8f2 <_dtoa_r+0x62a>
 800e9d0:	4ba3      	ldr	r3, [pc, #652]	; (800ec60 <_dtoa_r+0x998>)
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	f7f1 fdf8 	bl	80005c8 <__aeabi_dmul>
 800e9d8:	2200      	movs	r2, #0
 800e9da:	2300      	movs	r3, #0
 800e9dc:	4606      	mov	r6, r0
 800e9de:	460f      	mov	r7, r1
 800e9e0:	f7f2 f85a 	bl	8000a98 <__aeabi_dcmpeq>
 800e9e4:	2800      	cmp	r0, #0
 800e9e6:	d09e      	beq.n	800e926 <_dtoa_r+0x65e>
 800e9e8:	e7d0      	b.n	800e98c <_dtoa_r+0x6c4>
 800e9ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9ec:	2a00      	cmp	r2, #0
 800e9ee:	f000 80ca 	beq.w	800eb86 <_dtoa_r+0x8be>
 800e9f2:	9a07      	ldr	r2, [sp, #28]
 800e9f4:	2a01      	cmp	r2, #1
 800e9f6:	f300 80ad 	bgt.w	800eb54 <_dtoa_r+0x88c>
 800e9fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e9fc:	2a00      	cmp	r2, #0
 800e9fe:	f000 80a5 	beq.w	800eb4c <_dtoa_r+0x884>
 800ea02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ea06:	9e08      	ldr	r6, [sp, #32]
 800ea08:	9d05      	ldr	r5, [sp, #20]
 800ea0a:	9a05      	ldr	r2, [sp, #20]
 800ea0c:	441a      	add	r2, r3
 800ea0e:	9205      	str	r2, [sp, #20]
 800ea10:	9a06      	ldr	r2, [sp, #24]
 800ea12:	2101      	movs	r1, #1
 800ea14:	441a      	add	r2, r3
 800ea16:	4620      	mov	r0, r4
 800ea18:	9206      	str	r2, [sp, #24]
 800ea1a:	f000 fc3d 	bl	800f298 <__i2b>
 800ea1e:	4607      	mov	r7, r0
 800ea20:	b165      	cbz	r5, 800ea3c <_dtoa_r+0x774>
 800ea22:	9b06      	ldr	r3, [sp, #24]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	dd09      	ble.n	800ea3c <_dtoa_r+0x774>
 800ea28:	42ab      	cmp	r3, r5
 800ea2a:	9a05      	ldr	r2, [sp, #20]
 800ea2c:	bfa8      	it	ge
 800ea2e:	462b      	movge	r3, r5
 800ea30:	1ad2      	subs	r2, r2, r3
 800ea32:	9205      	str	r2, [sp, #20]
 800ea34:	9a06      	ldr	r2, [sp, #24]
 800ea36:	1aed      	subs	r5, r5, r3
 800ea38:	1ad3      	subs	r3, r2, r3
 800ea3a:	9306      	str	r3, [sp, #24]
 800ea3c:	9b08      	ldr	r3, [sp, #32]
 800ea3e:	b1f3      	cbz	r3, 800ea7e <_dtoa_r+0x7b6>
 800ea40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	f000 80a3 	beq.w	800eb8e <_dtoa_r+0x8c6>
 800ea48:	2e00      	cmp	r6, #0
 800ea4a:	dd10      	ble.n	800ea6e <_dtoa_r+0x7a6>
 800ea4c:	4639      	mov	r1, r7
 800ea4e:	4632      	mov	r2, r6
 800ea50:	4620      	mov	r0, r4
 800ea52:	f000 fce1 	bl	800f418 <__pow5mult>
 800ea56:	4652      	mov	r2, sl
 800ea58:	4601      	mov	r1, r0
 800ea5a:	4607      	mov	r7, r0
 800ea5c:	4620      	mov	r0, r4
 800ea5e:	f000 fc31 	bl	800f2c4 <__multiply>
 800ea62:	4651      	mov	r1, sl
 800ea64:	4680      	mov	r8, r0
 800ea66:	4620      	mov	r0, r4
 800ea68:	f000 fb60 	bl	800f12c <_Bfree>
 800ea6c:	46c2      	mov	sl, r8
 800ea6e:	9b08      	ldr	r3, [sp, #32]
 800ea70:	1b9a      	subs	r2, r3, r6
 800ea72:	d004      	beq.n	800ea7e <_dtoa_r+0x7b6>
 800ea74:	4651      	mov	r1, sl
 800ea76:	4620      	mov	r0, r4
 800ea78:	f000 fcce 	bl	800f418 <__pow5mult>
 800ea7c:	4682      	mov	sl, r0
 800ea7e:	2101      	movs	r1, #1
 800ea80:	4620      	mov	r0, r4
 800ea82:	f000 fc09 	bl	800f298 <__i2b>
 800ea86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	4606      	mov	r6, r0
 800ea8c:	f340 8081 	ble.w	800eb92 <_dtoa_r+0x8ca>
 800ea90:	461a      	mov	r2, r3
 800ea92:	4601      	mov	r1, r0
 800ea94:	4620      	mov	r0, r4
 800ea96:	f000 fcbf 	bl	800f418 <__pow5mult>
 800ea9a:	9b07      	ldr	r3, [sp, #28]
 800ea9c:	2b01      	cmp	r3, #1
 800ea9e:	4606      	mov	r6, r0
 800eaa0:	dd7a      	ble.n	800eb98 <_dtoa_r+0x8d0>
 800eaa2:	f04f 0800 	mov.w	r8, #0
 800eaa6:	6933      	ldr	r3, [r6, #16]
 800eaa8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800eaac:	6918      	ldr	r0, [r3, #16]
 800eaae:	f000 fba5 	bl	800f1fc <__hi0bits>
 800eab2:	f1c0 0020 	rsb	r0, r0, #32
 800eab6:	9b06      	ldr	r3, [sp, #24]
 800eab8:	4418      	add	r0, r3
 800eaba:	f010 001f 	ands.w	r0, r0, #31
 800eabe:	f000 8094 	beq.w	800ebea <_dtoa_r+0x922>
 800eac2:	f1c0 0320 	rsb	r3, r0, #32
 800eac6:	2b04      	cmp	r3, #4
 800eac8:	f340 8085 	ble.w	800ebd6 <_dtoa_r+0x90e>
 800eacc:	9b05      	ldr	r3, [sp, #20]
 800eace:	f1c0 001c 	rsb	r0, r0, #28
 800ead2:	4403      	add	r3, r0
 800ead4:	9305      	str	r3, [sp, #20]
 800ead6:	9b06      	ldr	r3, [sp, #24]
 800ead8:	4403      	add	r3, r0
 800eada:	4405      	add	r5, r0
 800eadc:	9306      	str	r3, [sp, #24]
 800eade:	9b05      	ldr	r3, [sp, #20]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	dd05      	ble.n	800eaf0 <_dtoa_r+0x828>
 800eae4:	4651      	mov	r1, sl
 800eae6:	461a      	mov	r2, r3
 800eae8:	4620      	mov	r0, r4
 800eaea:	f000 fcef 	bl	800f4cc <__lshift>
 800eaee:	4682      	mov	sl, r0
 800eaf0:	9b06      	ldr	r3, [sp, #24]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	dd05      	ble.n	800eb02 <_dtoa_r+0x83a>
 800eaf6:	4631      	mov	r1, r6
 800eaf8:	461a      	mov	r2, r3
 800eafa:	4620      	mov	r0, r4
 800eafc:	f000 fce6 	bl	800f4cc <__lshift>
 800eb00:	4606      	mov	r6, r0
 800eb02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d072      	beq.n	800ebee <_dtoa_r+0x926>
 800eb08:	4631      	mov	r1, r6
 800eb0a:	4650      	mov	r0, sl
 800eb0c:	f000 fd4a 	bl	800f5a4 <__mcmp>
 800eb10:	2800      	cmp	r0, #0
 800eb12:	da6c      	bge.n	800ebee <_dtoa_r+0x926>
 800eb14:	2300      	movs	r3, #0
 800eb16:	4651      	mov	r1, sl
 800eb18:	220a      	movs	r2, #10
 800eb1a:	4620      	mov	r0, r4
 800eb1c:	f000 fb28 	bl	800f170 <__multadd>
 800eb20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb22:	f10b 3bff 	add.w	fp, fp, #4294967295
 800eb26:	4682      	mov	sl, r0
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	f000 81b0 	beq.w	800ee8e <_dtoa_r+0xbc6>
 800eb2e:	2300      	movs	r3, #0
 800eb30:	4639      	mov	r1, r7
 800eb32:	220a      	movs	r2, #10
 800eb34:	4620      	mov	r0, r4
 800eb36:	f000 fb1b 	bl	800f170 <__multadd>
 800eb3a:	9b01      	ldr	r3, [sp, #4]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	4607      	mov	r7, r0
 800eb40:	f300 8096 	bgt.w	800ec70 <_dtoa_r+0x9a8>
 800eb44:	9b07      	ldr	r3, [sp, #28]
 800eb46:	2b02      	cmp	r3, #2
 800eb48:	dc59      	bgt.n	800ebfe <_dtoa_r+0x936>
 800eb4a:	e091      	b.n	800ec70 <_dtoa_r+0x9a8>
 800eb4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800eb4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eb52:	e758      	b.n	800ea06 <_dtoa_r+0x73e>
 800eb54:	9b04      	ldr	r3, [sp, #16]
 800eb56:	1e5e      	subs	r6, r3, #1
 800eb58:	9b08      	ldr	r3, [sp, #32]
 800eb5a:	42b3      	cmp	r3, r6
 800eb5c:	bfbf      	itttt	lt
 800eb5e:	9b08      	ldrlt	r3, [sp, #32]
 800eb60:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800eb62:	9608      	strlt	r6, [sp, #32]
 800eb64:	1af3      	sublt	r3, r6, r3
 800eb66:	bfb4      	ite	lt
 800eb68:	18d2      	addlt	r2, r2, r3
 800eb6a:	1b9e      	subge	r6, r3, r6
 800eb6c:	9b04      	ldr	r3, [sp, #16]
 800eb6e:	bfbc      	itt	lt
 800eb70:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800eb72:	2600      	movlt	r6, #0
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	bfb7      	itett	lt
 800eb78:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800eb7c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800eb80:	1a9d      	sublt	r5, r3, r2
 800eb82:	2300      	movlt	r3, #0
 800eb84:	e741      	b.n	800ea0a <_dtoa_r+0x742>
 800eb86:	9e08      	ldr	r6, [sp, #32]
 800eb88:	9d05      	ldr	r5, [sp, #20]
 800eb8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800eb8c:	e748      	b.n	800ea20 <_dtoa_r+0x758>
 800eb8e:	9a08      	ldr	r2, [sp, #32]
 800eb90:	e770      	b.n	800ea74 <_dtoa_r+0x7ac>
 800eb92:	9b07      	ldr	r3, [sp, #28]
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	dc19      	bgt.n	800ebcc <_dtoa_r+0x904>
 800eb98:	9b02      	ldr	r3, [sp, #8]
 800eb9a:	b9bb      	cbnz	r3, 800ebcc <_dtoa_r+0x904>
 800eb9c:	9b03      	ldr	r3, [sp, #12]
 800eb9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eba2:	b99b      	cbnz	r3, 800ebcc <_dtoa_r+0x904>
 800eba4:	9b03      	ldr	r3, [sp, #12]
 800eba6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ebaa:	0d1b      	lsrs	r3, r3, #20
 800ebac:	051b      	lsls	r3, r3, #20
 800ebae:	b183      	cbz	r3, 800ebd2 <_dtoa_r+0x90a>
 800ebb0:	9b05      	ldr	r3, [sp, #20]
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	9305      	str	r3, [sp, #20]
 800ebb6:	9b06      	ldr	r3, [sp, #24]
 800ebb8:	3301      	adds	r3, #1
 800ebba:	9306      	str	r3, [sp, #24]
 800ebbc:	f04f 0801 	mov.w	r8, #1
 800ebc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	f47f af6f 	bne.w	800eaa6 <_dtoa_r+0x7de>
 800ebc8:	2001      	movs	r0, #1
 800ebca:	e774      	b.n	800eab6 <_dtoa_r+0x7ee>
 800ebcc:	f04f 0800 	mov.w	r8, #0
 800ebd0:	e7f6      	b.n	800ebc0 <_dtoa_r+0x8f8>
 800ebd2:	4698      	mov	r8, r3
 800ebd4:	e7f4      	b.n	800ebc0 <_dtoa_r+0x8f8>
 800ebd6:	d082      	beq.n	800eade <_dtoa_r+0x816>
 800ebd8:	9a05      	ldr	r2, [sp, #20]
 800ebda:	331c      	adds	r3, #28
 800ebdc:	441a      	add	r2, r3
 800ebde:	9205      	str	r2, [sp, #20]
 800ebe0:	9a06      	ldr	r2, [sp, #24]
 800ebe2:	441a      	add	r2, r3
 800ebe4:	441d      	add	r5, r3
 800ebe6:	9206      	str	r2, [sp, #24]
 800ebe8:	e779      	b.n	800eade <_dtoa_r+0x816>
 800ebea:	4603      	mov	r3, r0
 800ebec:	e7f4      	b.n	800ebd8 <_dtoa_r+0x910>
 800ebee:	9b04      	ldr	r3, [sp, #16]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	dc37      	bgt.n	800ec64 <_dtoa_r+0x99c>
 800ebf4:	9b07      	ldr	r3, [sp, #28]
 800ebf6:	2b02      	cmp	r3, #2
 800ebf8:	dd34      	ble.n	800ec64 <_dtoa_r+0x99c>
 800ebfa:	9b04      	ldr	r3, [sp, #16]
 800ebfc:	9301      	str	r3, [sp, #4]
 800ebfe:	9b01      	ldr	r3, [sp, #4]
 800ec00:	b963      	cbnz	r3, 800ec1c <_dtoa_r+0x954>
 800ec02:	4631      	mov	r1, r6
 800ec04:	2205      	movs	r2, #5
 800ec06:	4620      	mov	r0, r4
 800ec08:	f000 fab2 	bl	800f170 <__multadd>
 800ec0c:	4601      	mov	r1, r0
 800ec0e:	4606      	mov	r6, r0
 800ec10:	4650      	mov	r0, sl
 800ec12:	f000 fcc7 	bl	800f5a4 <__mcmp>
 800ec16:	2800      	cmp	r0, #0
 800ec18:	f73f adbb 	bgt.w	800e792 <_dtoa_r+0x4ca>
 800ec1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec1e:	9d00      	ldr	r5, [sp, #0]
 800ec20:	ea6f 0b03 	mvn.w	fp, r3
 800ec24:	f04f 0800 	mov.w	r8, #0
 800ec28:	4631      	mov	r1, r6
 800ec2a:	4620      	mov	r0, r4
 800ec2c:	f000 fa7e 	bl	800f12c <_Bfree>
 800ec30:	2f00      	cmp	r7, #0
 800ec32:	f43f aeab 	beq.w	800e98c <_dtoa_r+0x6c4>
 800ec36:	f1b8 0f00 	cmp.w	r8, #0
 800ec3a:	d005      	beq.n	800ec48 <_dtoa_r+0x980>
 800ec3c:	45b8      	cmp	r8, r7
 800ec3e:	d003      	beq.n	800ec48 <_dtoa_r+0x980>
 800ec40:	4641      	mov	r1, r8
 800ec42:	4620      	mov	r0, r4
 800ec44:	f000 fa72 	bl	800f12c <_Bfree>
 800ec48:	4639      	mov	r1, r7
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	f000 fa6e 	bl	800f12c <_Bfree>
 800ec50:	e69c      	b.n	800e98c <_dtoa_r+0x6c4>
 800ec52:	2600      	movs	r6, #0
 800ec54:	4637      	mov	r7, r6
 800ec56:	e7e1      	b.n	800ec1c <_dtoa_r+0x954>
 800ec58:	46bb      	mov	fp, r7
 800ec5a:	4637      	mov	r7, r6
 800ec5c:	e599      	b.n	800e792 <_dtoa_r+0x4ca>
 800ec5e:	bf00      	nop
 800ec60:	40240000 	.word	0x40240000
 800ec64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	f000 80c8 	beq.w	800edfc <_dtoa_r+0xb34>
 800ec6c:	9b04      	ldr	r3, [sp, #16]
 800ec6e:	9301      	str	r3, [sp, #4]
 800ec70:	2d00      	cmp	r5, #0
 800ec72:	dd05      	ble.n	800ec80 <_dtoa_r+0x9b8>
 800ec74:	4639      	mov	r1, r7
 800ec76:	462a      	mov	r2, r5
 800ec78:	4620      	mov	r0, r4
 800ec7a:	f000 fc27 	bl	800f4cc <__lshift>
 800ec7e:	4607      	mov	r7, r0
 800ec80:	f1b8 0f00 	cmp.w	r8, #0
 800ec84:	d05b      	beq.n	800ed3e <_dtoa_r+0xa76>
 800ec86:	6879      	ldr	r1, [r7, #4]
 800ec88:	4620      	mov	r0, r4
 800ec8a:	f000 fa0f 	bl	800f0ac <_Balloc>
 800ec8e:	4605      	mov	r5, r0
 800ec90:	b928      	cbnz	r0, 800ec9e <_dtoa_r+0x9d6>
 800ec92:	4b83      	ldr	r3, [pc, #524]	; (800eea0 <_dtoa_r+0xbd8>)
 800ec94:	4602      	mov	r2, r0
 800ec96:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ec9a:	f7ff bb2e 	b.w	800e2fa <_dtoa_r+0x32>
 800ec9e:	693a      	ldr	r2, [r7, #16]
 800eca0:	3202      	adds	r2, #2
 800eca2:	0092      	lsls	r2, r2, #2
 800eca4:	f107 010c 	add.w	r1, r7, #12
 800eca8:	300c      	adds	r0, #12
 800ecaa:	f7ff fa74 	bl	800e196 <memcpy>
 800ecae:	2201      	movs	r2, #1
 800ecb0:	4629      	mov	r1, r5
 800ecb2:	4620      	mov	r0, r4
 800ecb4:	f000 fc0a 	bl	800f4cc <__lshift>
 800ecb8:	9b00      	ldr	r3, [sp, #0]
 800ecba:	3301      	adds	r3, #1
 800ecbc:	9304      	str	r3, [sp, #16]
 800ecbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ecc2:	4413      	add	r3, r2
 800ecc4:	9308      	str	r3, [sp, #32]
 800ecc6:	9b02      	ldr	r3, [sp, #8]
 800ecc8:	f003 0301 	and.w	r3, r3, #1
 800eccc:	46b8      	mov	r8, r7
 800ecce:	9306      	str	r3, [sp, #24]
 800ecd0:	4607      	mov	r7, r0
 800ecd2:	9b04      	ldr	r3, [sp, #16]
 800ecd4:	4631      	mov	r1, r6
 800ecd6:	3b01      	subs	r3, #1
 800ecd8:	4650      	mov	r0, sl
 800ecda:	9301      	str	r3, [sp, #4]
 800ecdc:	f7ff fa69 	bl	800e1b2 <quorem>
 800ece0:	4641      	mov	r1, r8
 800ece2:	9002      	str	r0, [sp, #8]
 800ece4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ece8:	4650      	mov	r0, sl
 800ecea:	f000 fc5b 	bl	800f5a4 <__mcmp>
 800ecee:	463a      	mov	r2, r7
 800ecf0:	9005      	str	r0, [sp, #20]
 800ecf2:	4631      	mov	r1, r6
 800ecf4:	4620      	mov	r0, r4
 800ecf6:	f000 fc71 	bl	800f5dc <__mdiff>
 800ecfa:	68c2      	ldr	r2, [r0, #12]
 800ecfc:	4605      	mov	r5, r0
 800ecfe:	bb02      	cbnz	r2, 800ed42 <_dtoa_r+0xa7a>
 800ed00:	4601      	mov	r1, r0
 800ed02:	4650      	mov	r0, sl
 800ed04:	f000 fc4e 	bl	800f5a4 <__mcmp>
 800ed08:	4602      	mov	r2, r0
 800ed0a:	4629      	mov	r1, r5
 800ed0c:	4620      	mov	r0, r4
 800ed0e:	9209      	str	r2, [sp, #36]	; 0x24
 800ed10:	f000 fa0c 	bl	800f12c <_Bfree>
 800ed14:	9b07      	ldr	r3, [sp, #28]
 800ed16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed18:	9d04      	ldr	r5, [sp, #16]
 800ed1a:	ea43 0102 	orr.w	r1, r3, r2
 800ed1e:	9b06      	ldr	r3, [sp, #24]
 800ed20:	4319      	orrs	r1, r3
 800ed22:	d110      	bne.n	800ed46 <_dtoa_r+0xa7e>
 800ed24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ed28:	d029      	beq.n	800ed7e <_dtoa_r+0xab6>
 800ed2a:	9b05      	ldr	r3, [sp, #20]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	dd02      	ble.n	800ed36 <_dtoa_r+0xa6e>
 800ed30:	9b02      	ldr	r3, [sp, #8]
 800ed32:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ed36:	9b01      	ldr	r3, [sp, #4]
 800ed38:	f883 9000 	strb.w	r9, [r3]
 800ed3c:	e774      	b.n	800ec28 <_dtoa_r+0x960>
 800ed3e:	4638      	mov	r0, r7
 800ed40:	e7ba      	b.n	800ecb8 <_dtoa_r+0x9f0>
 800ed42:	2201      	movs	r2, #1
 800ed44:	e7e1      	b.n	800ed0a <_dtoa_r+0xa42>
 800ed46:	9b05      	ldr	r3, [sp, #20]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	db04      	blt.n	800ed56 <_dtoa_r+0xa8e>
 800ed4c:	9907      	ldr	r1, [sp, #28]
 800ed4e:	430b      	orrs	r3, r1
 800ed50:	9906      	ldr	r1, [sp, #24]
 800ed52:	430b      	orrs	r3, r1
 800ed54:	d120      	bne.n	800ed98 <_dtoa_r+0xad0>
 800ed56:	2a00      	cmp	r2, #0
 800ed58:	dded      	ble.n	800ed36 <_dtoa_r+0xa6e>
 800ed5a:	4651      	mov	r1, sl
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	4620      	mov	r0, r4
 800ed60:	f000 fbb4 	bl	800f4cc <__lshift>
 800ed64:	4631      	mov	r1, r6
 800ed66:	4682      	mov	sl, r0
 800ed68:	f000 fc1c 	bl	800f5a4 <__mcmp>
 800ed6c:	2800      	cmp	r0, #0
 800ed6e:	dc03      	bgt.n	800ed78 <_dtoa_r+0xab0>
 800ed70:	d1e1      	bne.n	800ed36 <_dtoa_r+0xa6e>
 800ed72:	f019 0f01 	tst.w	r9, #1
 800ed76:	d0de      	beq.n	800ed36 <_dtoa_r+0xa6e>
 800ed78:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ed7c:	d1d8      	bne.n	800ed30 <_dtoa_r+0xa68>
 800ed7e:	9a01      	ldr	r2, [sp, #4]
 800ed80:	2339      	movs	r3, #57	; 0x39
 800ed82:	7013      	strb	r3, [r2, #0]
 800ed84:	462b      	mov	r3, r5
 800ed86:	461d      	mov	r5, r3
 800ed88:	3b01      	subs	r3, #1
 800ed8a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ed8e:	2a39      	cmp	r2, #57	; 0x39
 800ed90:	d06c      	beq.n	800ee6c <_dtoa_r+0xba4>
 800ed92:	3201      	adds	r2, #1
 800ed94:	701a      	strb	r2, [r3, #0]
 800ed96:	e747      	b.n	800ec28 <_dtoa_r+0x960>
 800ed98:	2a00      	cmp	r2, #0
 800ed9a:	dd07      	ble.n	800edac <_dtoa_r+0xae4>
 800ed9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800eda0:	d0ed      	beq.n	800ed7e <_dtoa_r+0xab6>
 800eda2:	9a01      	ldr	r2, [sp, #4]
 800eda4:	f109 0301 	add.w	r3, r9, #1
 800eda8:	7013      	strb	r3, [r2, #0]
 800edaa:	e73d      	b.n	800ec28 <_dtoa_r+0x960>
 800edac:	9b04      	ldr	r3, [sp, #16]
 800edae:	9a08      	ldr	r2, [sp, #32]
 800edb0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800edb4:	4293      	cmp	r3, r2
 800edb6:	d043      	beq.n	800ee40 <_dtoa_r+0xb78>
 800edb8:	4651      	mov	r1, sl
 800edba:	2300      	movs	r3, #0
 800edbc:	220a      	movs	r2, #10
 800edbe:	4620      	mov	r0, r4
 800edc0:	f000 f9d6 	bl	800f170 <__multadd>
 800edc4:	45b8      	cmp	r8, r7
 800edc6:	4682      	mov	sl, r0
 800edc8:	f04f 0300 	mov.w	r3, #0
 800edcc:	f04f 020a 	mov.w	r2, #10
 800edd0:	4641      	mov	r1, r8
 800edd2:	4620      	mov	r0, r4
 800edd4:	d107      	bne.n	800ede6 <_dtoa_r+0xb1e>
 800edd6:	f000 f9cb 	bl	800f170 <__multadd>
 800edda:	4680      	mov	r8, r0
 800eddc:	4607      	mov	r7, r0
 800edde:	9b04      	ldr	r3, [sp, #16]
 800ede0:	3301      	adds	r3, #1
 800ede2:	9304      	str	r3, [sp, #16]
 800ede4:	e775      	b.n	800ecd2 <_dtoa_r+0xa0a>
 800ede6:	f000 f9c3 	bl	800f170 <__multadd>
 800edea:	4639      	mov	r1, r7
 800edec:	4680      	mov	r8, r0
 800edee:	2300      	movs	r3, #0
 800edf0:	220a      	movs	r2, #10
 800edf2:	4620      	mov	r0, r4
 800edf4:	f000 f9bc 	bl	800f170 <__multadd>
 800edf8:	4607      	mov	r7, r0
 800edfa:	e7f0      	b.n	800edde <_dtoa_r+0xb16>
 800edfc:	9b04      	ldr	r3, [sp, #16]
 800edfe:	9301      	str	r3, [sp, #4]
 800ee00:	9d00      	ldr	r5, [sp, #0]
 800ee02:	4631      	mov	r1, r6
 800ee04:	4650      	mov	r0, sl
 800ee06:	f7ff f9d4 	bl	800e1b2 <quorem>
 800ee0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ee0e:	9b00      	ldr	r3, [sp, #0]
 800ee10:	f805 9b01 	strb.w	r9, [r5], #1
 800ee14:	1aea      	subs	r2, r5, r3
 800ee16:	9b01      	ldr	r3, [sp, #4]
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	dd07      	ble.n	800ee2c <_dtoa_r+0xb64>
 800ee1c:	4651      	mov	r1, sl
 800ee1e:	2300      	movs	r3, #0
 800ee20:	220a      	movs	r2, #10
 800ee22:	4620      	mov	r0, r4
 800ee24:	f000 f9a4 	bl	800f170 <__multadd>
 800ee28:	4682      	mov	sl, r0
 800ee2a:	e7ea      	b.n	800ee02 <_dtoa_r+0xb3a>
 800ee2c:	9b01      	ldr	r3, [sp, #4]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	bfc8      	it	gt
 800ee32:	461d      	movgt	r5, r3
 800ee34:	9b00      	ldr	r3, [sp, #0]
 800ee36:	bfd8      	it	le
 800ee38:	2501      	movle	r5, #1
 800ee3a:	441d      	add	r5, r3
 800ee3c:	f04f 0800 	mov.w	r8, #0
 800ee40:	4651      	mov	r1, sl
 800ee42:	2201      	movs	r2, #1
 800ee44:	4620      	mov	r0, r4
 800ee46:	f000 fb41 	bl	800f4cc <__lshift>
 800ee4a:	4631      	mov	r1, r6
 800ee4c:	4682      	mov	sl, r0
 800ee4e:	f000 fba9 	bl	800f5a4 <__mcmp>
 800ee52:	2800      	cmp	r0, #0
 800ee54:	dc96      	bgt.n	800ed84 <_dtoa_r+0xabc>
 800ee56:	d102      	bne.n	800ee5e <_dtoa_r+0xb96>
 800ee58:	f019 0f01 	tst.w	r9, #1
 800ee5c:	d192      	bne.n	800ed84 <_dtoa_r+0xabc>
 800ee5e:	462b      	mov	r3, r5
 800ee60:	461d      	mov	r5, r3
 800ee62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee66:	2a30      	cmp	r2, #48	; 0x30
 800ee68:	d0fa      	beq.n	800ee60 <_dtoa_r+0xb98>
 800ee6a:	e6dd      	b.n	800ec28 <_dtoa_r+0x960>
 800ee6c:	9a00      	ldr	r2, [sp, #0]
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d189      	bne.n	800ed86 <_dtoa_r+0xabe>
 800ee72:	f10b 0b01 	add.w	fp, fp, #1
 800ee76:	2331      	movs	r3, #49	; 0x31
 800ee78:	e796      	b.n	800eda8 <_dtoa_r+0xae0>
 800ee7a:	4b0a      	ldr	r3, [pc, #40]	; (800eea4 <_dtoa_r+0xbdc>)
 800ee7c:	f7ff ba99 	b.w	800e3b2 <_dtoa_r+0xea>
 800ee80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	f47f aa6d 	bne.w	800e362 <_dtoa_r+0x9a>
 800ee88:	4b07      	ldr	r3, [pc, #28]	; (800eea8 <_dtoa_r+0xbe0>)
 800ee8a:	f7ff ba92 	b.w	800e3b2 <_dtoa_r+0xea>
 800ee8e:	9b01      	ldr	r3, [sp, #4]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	dcb5      	bgt.n	800ee00 <_dtoa_r+0xb38>
 800ee94:	9b07      	ldr	r3, [sp, #28]
 800ee96:	2b02      	cmp	r3, #2
 800ee98:	f73f aeb1 	bgt.w	800ebfe <_dtoa_r+0x936>
 800ee9c:	e7b0      	b.n	800ee00 <_dtoa_r+0xb38>
 800ee9e:	bf00      	nop
 800eea0:	08011650 	.word	0x08011650
 800eea4:	080115b0 	.word	0x080115b0
 800eea8:	080115d4 	.word	0x080115d4

0800eeac <_free_r>:
 800eeac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eeae:	2900      	cmp	r1, #0
 800eeb0:	d044      	beq.n	800ef3c <_free_r+0x90>
 800eeb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eeb6:	9001      	str	r0, [sp, #4]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	f1a1 0404 	sub.w	r4, r1, #4
 800eebe:	bfb8      	it	lt
 800eec0:	18e4      	addlt	r4, r4, r3
 800eec2:	f000 f8e7 	bl	800f094 <__malloc_lock>
 800eec6:	4a1e      	ldr	r2, [pc, #120]	; (800ef40 <_free_r+0x94>)
 800eec8:	9801      	ldr	r0, [sp, #4]
 800eeca:	6813      	ldr	r3, [r2, #0]
 800eecc:	b933      	cbnz	r3, 800eedc <_free_r+0x30>
 800eece:	6063      	str	r3, [r4, #4]
 800eed0:	6014      	str	r4, [r2, #0]
 800eed2:	b003      	add	sp, #12
 800eed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eed8:	f000 b8e2 	b.w	800f0a0 <__malloc_unlock>
 800eedc:	42a3      	cmp	r3, r4
 800eede:	d908      	bls.n	800eef2 <_free_r+0x46>
 800eee0:	6825      	ldr	r5, [r4, #0]
 800eee2:	1961      	adds	r1, r4, r5
 800eee4:	428b      	cmp	r3, r1
 800eee6:	bf01      	itttt	eq
 800eee8:	6819      	ldreq	r1, [r3, #0]
 800eeea:	685b      	ldreq	r3, [r3, #4]
 800eeec:	1949      	addeq	r1, r1, r5
 800eeee:	6021      	streq	r1, [r4, #0]
 800eef0:	e7ed      	b.n	800eece <_free_r+0x22>
 800eef2:	461a      	mov	r2, r3
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	b10b      	cbz	r3, 800eefc <_free_r+0x50>
 800eef8:	42a3      	cmp	r3, r4
 800eefa:	d9fa      	bls.n	800eef2 <_free_r+0x46>
 800eefc:	6811      	ldr	r1, [r2, #0]
 800eefe:	1855      	adds	r5, r2, r1
 800ef00:	42a5      	cmp	r5, r4
 800ef02:	d10b      	bne.n	800ef1c <_free_r+0x70>
 800ef04:	6824      	ldr	r4, [r4, #0]
 800ef06:	4421      	add	r1, r4
 800ef08:	1854      	adds	r4, r2, r1
 800ef0a:	42a3      	cmp	r3, r4
 800ef0c:	6011      	str	r1, [r2, #0]
 800ef0e:	d1e0      	bne.n	800eed2 <_free_r+0x26>
 800ef10:	681c      	ldr	r4, [r3, #0]
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	6053      	str	r3, [r2, #4]
 800ef16:	440c      	add	r4, r1
 800ef18:	6014      	str	r4, [r2, #0]
 800ef1a:	e7da      	b.n	800eed2 <_free_r+0x26>
 800ef1c:	d902      	bls.n	800ef24 <_free_r+0x78>
 800ef1e:	230c      	movs	r3, #12
 800ef20:	6003      	str	r3, [r0, #0]
 800ef22:	e7d6      	b.n	800eed2 <_free_r+0x26>
 800ef24:	6825      	ldr	r5, [r4, #0]
 800ef26:	1961      	adds	r1, r4, r5
 800ef28:	428b      	cmp	r3, r1
 800ef2a:	bf04      	itt	eq
 800ef2c:	6819      	ldreq	r1, [r3, #0]
 800ef2e:	685b      	ldreq	r3, [r3, #4]
 800ef30:	6063      	str	r3, [r4, #4]
 800ef32:	bf04      	itt	eq
 800ef34:	1949      	addeq	r1, r1, r5
 800ef36:	6021      	streq	r1, [r4, #0]
 800ef38:	6054      	str	r4, [r2, #4]
 800ef3a:	e7ca      	b.n	800eed2 <_free_r+0x26>
 800ef3c:	b003      	add	sp, #12
 800ef3e:	bd30      	pop	{r4, r5, pc}
 800ef40:	200019b8 	.word	0x200019b8

0800ef44 <malloc>:
 800ef44:	4b02      	ldr	r3, [pc, #8]	; (800ef50 <malloc+0xc>)
 800ef46:	4601      	mov	r1, r0
 800ef48:	6818      	ldr	r0, [r3, #0]
 800ef4a:	f000 b823 	b.w	800ef94 <_malloc_r>
 800ef4e:	bf00      	nop
 800ef50:	200000a4 	.word	0x200000a4

0800ef54 <sbrk_aligned>:
 800ef54:	b570      	push	{r4, r5, r6, lr}
 800ef56:	4e0e      	ldr	r6, [pc, #56]	; (800ef90 <sbrk_aligned+0x3c>)
 800ef58:	460c      	mov	r4, r1
 800ef5a:	6831      	ldr	r1, [r6, #0]
 800ef5c:	4605      	mov	r5, r0
 800ef5e:	b911      	cbnz	r1, 800ef66 <sbrk_aligned+0x12>
 800ef60:	f000 feca 	bl	800fcf8 <_sbrk_r>
 800ef64:	6030      	str	r0, [r6, #0]
 800ef66:	4621      	mov	r1, r4
 800ef68:	4628      	mov	r0, r5
 800ef6a:	f000 fec5 	bl	800fcf8 <_sbrk_r>
 800ef6e:	1c43      	adds	r3, r0, #1
 800ef70:	d00a      	beq.n	800ef88 <sbrk_aligned+0x34>
 800ef72:	1cc4      	adds	r4, r0, #3
 800ef74:	f024 0403 	bic.w	r4, r4, #3
 800ef78:	42a0      	cmp	r0, r4
 800ef7a:	d007      	beq.n	800ef8c <sbrk_aligned+0x38>
 800ef7c:	1a21      	subs	r1, r4, r0
 800ef7e:	4628      	mov	r0, r5
 800ef80:	f000 feba 	bl	800fcf8 <_sbrk_r>
 800ef84:	3001      	adds	r0, #1
 800ef86:	d101      	bne.n	800ef8c <sbrk_aligned+0x38>
 800ef88:	f04f 34ff 	mov.w	r4, #4294967295
 800ef8c:	4620      	mov	r0, r4
 800ef8e:	bd70      	pop	{r4, r5, r6, pc}
 800ef90:	200019bc 	.word	0x200019bc

0800ef94 <_malloc_r>:
 800ef94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef98:	1ccd      	adds	r5, r1, #3
 800ef9a:	f025 0503 	bic.w	r5, r5, #3
 800ef9e:	3508      	adds	r5, #8
 800efa0:	2d0c      	cmp	r5, #12
 800efa2:	bf38      	it	cc
 800efa4:	250c      	movcc	r5, #12
 800efa6:	2d00      	cmp	r5, #0
 800efa8:	4607      	mov	r7, r0
 800efaa:	db01      	blt.n	800efb0 <_malloc_r+0x1c>
 800efac:	42a9      	cmp	r1, r5
 800efae:	d905      	bls.n	800efbc <_malloc_r+0x28>
 800efb0:	230c      	movs	r3, #12
 800efb2:	603b      	str	r3, [r7, #0]
 800efb4:	2600      	movs	r6, #0
 800efb6:	4630      	mov	r0, r6
 800efb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f090 <_malloc_r+0xfc>
 800efc0:	f000 f868 	bl	800f094 <__malloc_lock>
 800efc4:	f8d8 3000 	ldr.w	r3, [r8]
 800efc8:	461c      	mov	r4, r3
 800efca:	bb5c      	cbnz	r4, 800f024 <_malloc_r+0x90>
 800efcc:	4629      	mov	r1, r5
 800efce:	4638      	mov	r0, r7
 800efd0:	f7ff ffc0 	bl	800ef54 <sbrk_aligned>
 800efd4:	1c43      	adds	r3, r0, #1
 800efd6:	4604      	mov	r4, r0
 800efd8:	d155      	bne.n	800f086 <_malloc_r+0xf2>
 800efda:	f8d8 4000 	ldr.w	r4, [r8]
 800efde:	4626      	mov	r6, r4
 800efe0:	2e00      	cmp	r6, #0
 800efe2:	d145      	bne.n	800f070 <_malloc_r+0xdc>
 800efe4:	2c00      	cmp	r4, #0
 800efe6:	d048      	beq.n	800f07a <_malloc_r+0xe6>
 800efe8:	6823      	ldr	r3, [r4, #0]
 800efea:	4631      	mov	r1, r6
 800efec:	4638      	mov	r0, r7
 800efee:	eb04 0903 	add.w	r9, r4, r3
 800eff2:	f000 fe81 	bl	800fcf8 <_sbrk_r>
 800eff6:	4581      	cmp	r9, r0
 800eff8:	d13f      	bne.n	800f07a <_malloc_r+0xe6>
 800effa:	6821      	ldr	r1, [r4, #0]
 800effc:	1a6d      	subs	r5, r5, r1
 800effe:	4629      	mov	r1, r5
 800f000:	4638      	mov	r0, r7
 800f002:	f7ff ffa7 	bl	800ef54 <sbrk_aligned>
 800f006:	3001      	adds	r0, #1
 800f008:	d037      	beq.n	800f07a <_malloc_r+0xe6>
 800f00a:	6823      	ldr	r3, [r4, #0]
 800f00c:	442b      	add	r3, r5
 800f00e:	6023      	str	r3, [r4, #0]
 800f010:	f8d8 3000 	ldr.w	r3, [r8]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d038      	beq.n	800f08a <_malloc_r+0xf6>
 800f018:	685a      	ldr	r2, [r3, #4]
 800f01a:	42a2      	cmp	r2, r4
 800f01c:	d12b      	bne.n	800f076 <_malloc_r+0xe2>
 800f01e:	2200      	movs	r2, #0
 800f020:	605a      	str	r2, [r3, #4]
 800f022:	e00f      	b.n	800f044 <_malloc_r+0xb0>
 800f024:	6822      	ldr	r2, [r4, #0]
 800f026:	1b52      	subs	r2, r2, r5
 800f028:	d41f      	bmi.n	800f06a <_malloc_r+0xd6>
 800f02a:	2a0b      	cmp	r2, #11
 800f02c:	d917      	bls.n	800f05e <_malloc_r+0xca>
 800f02e:	1961      	adds	r1, r4, r5
 800f030:	42a3      	cmp	r3, r4
 800f032:	6025      	str	r5, [r4, #0]
 800f034:	bf18      	it	ne
 800f036:	6059      	strne	r1, [r3, #4]
 800f038:	6863      	ldr	r3, [r4, #4]
 800f03a:	bf08      	it	eq
 800f03c:	f8c8 1000 	streq.w	r1, [r8]
 800f040:	5162      	str	r2, [r4, r5]
 800f042:	604b      	str	r3, [r1, #4]
 800f044:	4638      	mov	r0, r7
 800f046:	f104 060b 	add.w	r6, r4, #11
 800f04a:	f000 f829 	bl	800f0a0 <__malloc_unlock>
 800f04e:	f026 0607 	bic.w	r6, r6, #7
 800f052:	1d23      	adds	r3, r4, #4
 800f054:	1af2      	subs	r2, r6, r3
 800f056:	d0ae      	beq.n	800efb6 <_malloc_r+0x22>
 800f058:	1b9b      	subs	r3, r3, r6
 800f05a:	50a3      	str	r3, [r4, r2]
 800f05c:	e7ab      	b.n	800efb6 <_malloc_r+0x22>
 800f05e:	42a3      	cmp	r3, r4
 800f060:	6862      	ldr	r2, [r4, #4]
 800f062:	d1dd      	bne.n	800f020 <_malloc_r+0x8c>
 800f064:	f8c8 2000 	str.w	r2, [r8]
 800f068:	e7ec      	b.n	800f044 <_malloc_r+0xb0>
 800f06a:	4623      	mov	r3, r4
 800f06c:	6864      	ldr	r4, [r4, #4]
 800f06e:	e7ac      	b.n	800efca <_malloc_r+0x36>
 800f070:	4634      	mov	r4, r6
 800f072:	6876      	ldr	r6, [r6, #4]
 800f074:	e7b4      	b.n	800efe0 <_malloc_r+0x4c>
 800f076:	4613      	mov	r3, r2
 800f078:	e7cc      	b.n	800f014 <_malloc_r+0x80>
 800f07a:	230c      	movs	r3, #12
 800f07c:	603b      	str	r3, [r7, #0]
 800f07e:	4638      	mov	r0, r7
 800f080:	f000 f80e 	bl	800f0a0 <__malloc_unlock>
 800f084:	e797      	b.n	800efb6 <_malloc_r+0x22>
 800f086:	6025      	str	r5, [r4, #0]
 800f088:	e7dc      	b.n	800f044 <_malloc_r+0xb0>
 800f08a:	605b      	str	r3, [r3, #4]
 800f08c:	deff      	udf	#255	; 0xff
 800f08e:	bf00      	nop
 800f090:	200019b8 	.word	0x200019b8

0800f094 <__malloc_lock>:
 800f094:	4801      	ldr	r0, [pc, #4]	; (800f09c <__malloc_lock+0x8>)
 800f096:	f7ff b87c 	b.w	800e192 <__retarget_lock_acquire_recursive>
 800f09a:	bf00      	nop
 800f09c:	200019b4 	.word	0x200019b4

0800f0a0 <__malloc_unlock>:
 800f0a0:	4801      	ldr	r0, [pc, #4]	; (800f0a8 <__malloc_unlock+0x8>)
 800f0a2:	f7ff b877 	b.w	800e194 <__retarget_lock_release_recursive>
 800f0a6:	bf00      	nop
 800f0a8:	200019b4 	.word	0x200019b4

0800f0ac <_Balloc>:
 800f0ac:	b570      	push	{r4, r5, r6, lr}
 800f0ae:	69c6      	ldr	r6, [r0, #28]
 800f0b0:	4604      	mov	r4, r0
 800f0b2:	460d      	mov	r5, r1
 800f0b4:	b976      	cbnz	r6, 800f0d4 <_Balloc+0x28>
 800f0b6:	2010      	movs	r0, #16
 800f0b8:	f7ff ff44 	bl	800ef44 <malloc>
 800f0bc:	4602      	mov	r2, r0
 800f0be:	61e0      	str	r0, [r4, #28]
 800f0c0:	b920      	cbnz	r0, 800f0cc <_Balloc+0x20>
 800f0c2:	4b18      	ldr	r3, [pc, #96]	; (800f124 <_Balloc+0x78>)
 800f0c4:	4818      	ldr	r0, [pc, #96]	; (800f128 <_Balloc+0x7c>)
 800f0c6:	216b      	movs	r1, #107	; 0x6b
 800f0c8:	f000 fe26 	bl	800fd18 <__assert_func>
 800f0cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f0d0:	6006      	str	r6, [r0, #0]
 800f0d2:	60c6      	str	r6, [r0, #12]
 800f0d4:	69e6      	ldr	r6, [r4, #28]
 800f0d6:	68f3      	ldr	r3, [r6, #12]
 800f0d8:	b183      	cbz	r3, 800f0fc <_Balloc+0x50>
 800f0da:	69e3      	ldr	r3, [r4, #28]
 800f0dc:	68db      	ldr	r3, [r3, #12]
 800f0de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f0e2:	b9b8      	cbnz	r0, 800f114 <_Balloc+0x68>
 800f0e4:	2101      	movs	r1, #1
 800f0e6:	fa01 f605 	lsl.w	r6, r1, r5
 800f0ea:	1d72      	adds	r2, r6, #5
 800f0ec:	0092      	lsls	r2, r2, #2
 800f0ee:	4620      	mov	r0, r4
 800f0f0:	f000 fe30 	bl	800fd54 <_calloc_r>
 800f0f4:	b160      	cbz	r0, 800f110 <_Balloc+0x64>
 800f0f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f0fa:	e00e      	b.n	800f11a <_Balloc+0x6e>
 800f0fc:	2221      	movs	r2, #33	; 0x21
 800f0fe:	2104      	movs	r1, #4
 800f100:	4620      	mov	r0, r4
 800f102:	f000 fe27 	bl	800fd54 <_calloc_r>
 800f106:	69e3      	ldr	r3, [r4, #28]
 800f108:	60f0      	str	r0, [r6, #12]
 800f10a:	68db      	ldr	r3, [r3, #12]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d1e4      	bne.n	800f0da <_Balloc+0x2e>
 800f110:	2000      	movs	r0, #0
 800f112:	bd70      	pop	{r4, r5, r6, pc}
 800f114:	6802      	ldr	r2, [r0, #0]
 800f116:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f11a:	2300      	movs	r3, #0
 800f11c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f120:	e7f7      	b.n	800f112 <_Balloc+0x66>
 800f122:	bf00      	nop
 800f124:	080115e1 	.word	0x080115e1
 800f128:	08011661 	.word	0x08011661

0800f12c <_Bfree>:
 800f12c:	b570      	push	{r4, r5, r6, lr}
 800f12e:	69c6      	ldr	r6, [r0, #28]
 800f130:	4605      	mov	r5, r0
 800f132:	460c      	mov	r4, r1
 800f134:	b976      	cbnz	r6, 800f154 <_Bfree+0x28>
 800f136:	2010      	movs	r0, #16
 800f138:	f7ff ff04 	bl	800ef44 <malloc>
 800f13c:	4602      	mov	r2, r0
 800f13e:	61e8      	str	r0, [r5, #28]
 800f140:	b920      	cbnz	r0, 800f14c <_Bfree+0x20>
 800f142:	4b09      	ldr	r3, [pc, #36]	; (800f168 <_Bfree+0x3c>)
 800f144:	4809      	ldr	r0, [pc, #36]	; (800f16c <_Bfree+0x40>)
 800f146:	218f      	movs	r1, #143	; 0x8f
 800f148:	f000 fde6 	bl	800fd18 <__assert_func>
 800f14c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f150:	6006      	str	r6, [r0, #0]
 800f152:	60c6      	str	r6, [r0, #12]
 800f154:	b13c      	cbz	r4, 800f166 <_Bfree+0x3a>
 800f156:	69eb      	ldr	r3, [r5, #28]
 800f158:	6862      	ldr	r2, [r4, #4]
 800f15a:	68db      	ldr	r3, [r3, #12]
 800f15c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f160:	6021      	str	r1, [r4, #0]
 800f162:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f166:	bd70      	pop	{r4, r5, r6, pc}
 800f168:	080115e1 	.word	0x080115e1
 800f16c:	08011661 	.word	0x08011661

0800f170 <__multadd>:
 800f170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f174:	690d      	ldr	r5, [r1, #16]
 800f176:	4607      	mov	r7, r0
 800f178:	460c      	mov	r4, r1
 800f17a:	461e      	mov	r6, r3
 800f17c:	f101 0c14 	add.w	ip, r1, #20
 800f180:	2000      	movs	r0, #0
 800f182:	f8dc 3000 	ldr.w	r3, [ip]
 800f186:	b299      	uxth	r1, r3
 800f188:	fb02 6101 	mla	r1, r2, r1, r6
 800f18c:	0c1e      	lsrs	r6, r3, #16
 800f18e:	0c0b      	lsrs	r3, r1, #16
 800f190:	fb02 3306 	mla	r3, r2, r6, r3
 800f194:	b289      	uxth	r1, r1
 800f196:	3001      	adds	r0, #1
 800f198:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f19c:	4285      	cmp	r5, r0
 800f19e:	f84c 1b04 	str.w	r1, [ip], #4
 800f1a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f1a6:	dcec      	bgt.n	800f182 <__multadd+0x12>
 800f1a8:	b30e      	cbz	r6, 800f1ee <__multadd+0x7e>
 800f1aa:	68a3      	ldr	r3, [r4, #8]
 800f1ac:	42ab      	cmp	r3, r5
 800f1ae:	dc19      	bgt.n	800f1e4 <__multadd+0x74>
 800f1b0:	6861      	ldr	r1, [r4, #4]
 800f1b2:	4638      	mov	r0, r7
 800f1b4:	3101      	adds	r1, #1
 800f1b6:	f7ff ff79 	bl	800f0ac <_Balloc>
 800f1ba:	4680      	mov	r8, r0
 800f1bc:	b928      	cbnz	r0, 800f1ca <__multadd+0x5a>
 800f1be:	4602      	mov	r2, r0
 800f1c0:	4b0c      	ldr	r3, [pc, #48]	; (800f1f4 <__multadd+0x84>)
 800f1c2:	480d      	ldr	r0, [pc, #52]	; (800f1f8 <__multadd+0x88>)
 800f1c4:	21ba      	movs	r1, #186	; 0xba
 800f1c6:	f000 fda7 	bl	800fd18 <__assert_func>
 800f1ca:	6922      	ldr	r2, [r4, #16]
 800f1cc:	3202      	adds	r2, #2
 800f1ce:	f104 010c 	add.w	r1, r4, #12
 800f1d2:	0092      	lsls	r2, r2, #2
 800f1d4:	300c      	adds	r0, #12
 800f1d6:	f7fe ffde 	bl	800e196 <memcpy>
 800f1da:	4621      	mov	r1, r4
 800f1dc:	4638      	mov	r0, r7
 800f1de:	f7ff ffa5 	bl	800f12c <_Bfree>
 800f1e2:	4644      	mov	r4, r8
 800f1e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f1e8:	3501      	adds	r5, #1
 800f1ea:	615e      	str	r6, [r3, #20]
 800f1ec:	6125      	str	r5, [r4, #16]
 800f1ee:	4620      	mov	r0, r4
 800f1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1f4:	08011650 	.word	0x08011650
 800f1f8:	08011661 	.word	0x08011661

0800f1fc <__hi0bits>:
 800f1fc:	0c03      	lsrs	r3, r0, #16
 800f1fe:	041b      	lsls	r3, r3, #16
 800f200:	b9d3      	cbnz	r3, 800f238 <__hi0bits+0x3c>
 800f202:	0400      	lsls	r0, r0, #16
 800f204:	2310      	movs	r3, #16
 800f206:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f20a:	bf04      	itt	eq
 800f20c:	0200      	lsleq	r0, r0, #8
 800f20e:	3308      	addeq	r3, #8
 800f210:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f214:	bf04      	itt	eq
 800f216:	0100      	lsleq	r0, r0, #4
 800f218:	3304      	addeq	r3, #4
 800f21a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f21e:	bf04      	itt	eq
 800f220:	0080      	lsleq	r0, r0, #2
 800f222:	3302      	addeq	r3, #2
 800f224:	2800      	cmp	r0, #0
 800f226:	db05      	blt.n	800f234 <__hi0bits+0x38>
 800f228:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f22c:	f103 0301 	add.w	r3, r3, #1
 800f230:	bf08      	it	eq
 800f232:	2320      	moveq	r3, #32
 800f234:	4618      	mov	r0, r3
 800f236:	4770      	bx	lr
 800f238:	2300      	movs	r3, #0
 800f23a:	e7e4      	b.n	800f206 <__hi0bits+0xa>

0800f23c <__lo0bits>:
 800f23c:	6803      	ldr	r3, [r0, #0]
 800f23e:	f013 0207 	ands.w	r2, r3, #7
 800f242:	d00c      	beq.n	800f25e <__lo0bits+0x22>
 800f244:	07d9      	lsls	r1, r3, #31
 800f246:	d422      	bmi.n	800f28e <__lo0bits+0x52>
 800f248:	079a      	lsls	r2, r3, #30
 800f24a:	bf49      	itett	mi
 800f24c:	085b      	lsrmi	r3, r3, #1
 800f24e:	089b      	lsrpl	r3, r3, #2
 800f250:	6003      	strmi	r3, [r0, #0]
 800f252:	2201      	movmi	r2, #1
 800f254:	bf5c      	itt	pl
 800f256:	6003      	strpl	r3, [r0, #0]
 800f258:	2202      	movpl	r2, #2
 800f25a:	4610      	mov	r0, r2
 800f25c:	4770      	bx	lr
 800f25e:	b299      	uxth	r1, r3
 800f260:	b909      	cbnz	r1, 800f266 <__lo0bits+0x2a>
 800f262:	0c1b      	lsrs	r3, r3, #16
 800f264:	2210      	movs	r2, #16
 800f266:	b2d9      	uxtb	r1, r3
 800f268:	b909      	cbnz	r1, 800f26e <__lo0bits+0x32>
 800f26a:	3208      	adds	r2, #8
 800f26c:	0a1b      	lsrs	r3, r3, #8
 800f26e:	0719      	lsls	r1, r3, #28
 800f270:	bf04      	itt	eq
 800f272:	091b      	lsreq	r3, r3, #4
 800f274:	3204      	addeq	r2, #4
 800f276:	0799      	lsls	r1, r3, #30
 800f278:	bf04      	itt	eq
 800f27a:	089b      	lsreq	r3, r3, #2
 800f27c:	3202      	addeq	r2, #2
 800f27e:	07d9      	lsls	r1, r3, #31
 800f280:	d403      	bmi.n	800f28a <__lo0bits+0x4e>
 800f282:	085b      	lsrs	r3, r3, #1
 800f284:	f102 0201 	add.w	r2, r2, #1
 800f288:	d003      	beq.n	800f292 <__lo0bits+0x56>
 800f28a:	6003      	str	r3, [r0, #0]
 800f28c:	e7e5      	b.n	800f25a <__lo0bits+0x1e>
 800f28e:	2200      	movs	r2, #0
 800f290:	e7e3      	b.n	800f25a <__lo0bits+0x1e>
 800f292:	2220      	movs	r2, #32
 800f294:	e7e1      	b.n	800f25a <__lo0bits+0x1e>
	...

0800f298 <__i2b>:
 800f298:	b510      	push	{r4, lr}
 800f29a:	460c      	mov	r4, r1
 800f29c:	2101      	movs	r1, #1
 800f29e:	f7ff ff05 	bl	800f0ac <_Balloc>
 800f2a2:	4602      	mov	r2, r0
 800f2a4:	b928      	cbnz	r0, 800f2b2 <__i2b+0x1a>
 800f2a6:	4b05      	ldr	r3, [pc, #20]	; (800f2bc <__i2b+0x24>)
 800f2a8:	4805      	ldr	r0, [pc, #20]	; (800f2c0 <__i2b+0x28>)
 800f2aa:	f240 1145 	movw	r1, #325	; 0x145
 800f2ae:	f000 fd33 	bl	800fd18 <__assert_func>
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	6144      	str	r4, [r0, #20]
 800f2b6:	6103      	str	r3, [r0, #16]
 800f2b8:	bd10      	pop	{r4, pc}
 800f2ba:	bf00      	nop
 800f2bc:	08011650 	.word	0x08011650
 800f2c0:	08011661 	.word	0x08011661

0800f2c4 <__multiply>:
 800f2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2c8:	4691      	mov	r9, r2
 800f2ca:	690a      	ldr	r2, [r1, #16]
 800f2cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f2d0:	429a      	cmp	r2, r3
 800f2d2:	bfb8      	it	lt
 800f2d4:	460b      	movlt	r3, r1
 800f2d6:	460c      	mov	r4, r1
 800f2d8:	bfbc      	itt	lt
 800f2da:	464c      	movlt	r4, r9
 800f2dc:	4699      	movlt	r9, r3
 800f2de:	6927      	ldr	r7, [r4, #16]
 800f2e0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f2e4:	68a3      	ldr	r3, [r4, #8]
 800f2e6:	6861      	ldr	r1, [r4, #4]
 800f2e8:	eb07 060a 	add.w	r6, r7, sl
 800f2ec:	42b3      	cmp	r3, r6
 800f2ee:	b085      	sub	sp, #20
 800f2f0:	bfb8      	it	lt
 800f2f2:	3101      	addlt	r1, #1
 800f2f4:	f7ff feda 	bl	800f0ac <_Balloc>
 800f2f8:	b930      	cbnz	r0, 800f308 <__multiply+0x44>
 800f2fa:	4602      	mov	r2, r0
 800f2fc:	4b44      	ldr	r3, [pc, #272]	; (800f410 <__multiply+0x14c>)
 800f2fe:	4845      	ldr	r0, [pc, #276]	; (800f414 <__multiply+0x150>)
 800f300:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800f304:	f000 fd08 	bl	800fd18 <__assert_func>
 800f308:	f100 0514 	add.w	r5, r0, #20
 800f30c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f310:	462b      	mov	r3, r5
 800f312:	2200      	movs	r2, #0
 800f314:	4543      	cmp	r3, r8
 800f316:	d321      	bcc.n	800f35c <__multiply+0x98>
 800f318:	f104 0314 	add.w	r3, r4, #20
 800f31c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f320:	f109 0314 	add.w	r3, r9, #20
 800f324:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f328:	9202      	str	r2, [sp, #8]
 800f32a:	1b3a      	subs	r2, r7, r4
 800f32c:	3a15      	subs	r2, #21
 800f32e:	f022 0203 	bic.w	r2, r2, #3
 800f332:	3204      	adds	r2, #4
 800f334:	f104 0115 	add.w	r1, r4, #21
 800f338:	428f      	cmp	r7, r1
 800f33a:	bf38      	it	cc
 800f33c:	2204      	movcc	r2, #4
 800f33e:	9201      	str	r2, [sp, #4]
 800f340:	9a02      	ldr	r2, [sp, #8]
 800f342:	9303      	str	r3, [sp, #12]
 800f344:	429a      	cmp	r2, r3
 800f346:	d80c      	bhi.n	800f362 <__multiply+0x9e>
 800f348:	2e00      	cmp	r6, #0
 800f34a:	dd03      	ble.n	800f354 <__multiply+0x90>
 800f34c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f350:	2b00      	cmp	r3, #0
 800f352:	d05b      	beq.n	800f40c <__multiply+0x148>
 800f354:	6106      	str	r6, [r0, #16]
 800f356:	b005      	add	sp, #20
 800f358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f35c:	f843 2b04 	str.w	r2, [r3], #4
 800f360:	e7d8      	b.n	800f314 <__multiply+0x50>
 800f362:	f8b3 a000 	ldrh.w	sl, [r3]
 800f366:	f1ba 0f00 	cmp.w	sl, #0
 800f36a:	d024      	beq.n	800f3b6 <__multiply+0xf2>
 800f36c:	f104 0e14 	add.w	lr, r4, #20
 800f370:	46a9      	mov	r9, r5
 800f372:	f04f 0c00 	mov.w	ip, #0
 800f376:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f37a:	f8d9 1000 	ldr.w	r1, [r9]
 800f37e:	fa1f fb82 	uxth.w	fp, r2
 800f382:	b289      	uxth	r1, r1
 800f384:	fb0a 110b 	mla	r1, sl, fp, r1
 800f388:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f38c:	f8d9 2000 	ldr.w	r2, [r9]
 800f390:	4461      	add	r1, ip
 800f392:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f396:	fb0a c20b 	mla	r2, sl, fp, ip
 800f39a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f39e:	b289      	uxth	r1, r1
 800f3a0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f3a4:	4577      	cmp	r7, lr
 800f3a6:	f849 1b04 	str.w	r1, [r9], #4
 800f3aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f3ae:	d8e2      	bhi.n	800f376 <__multiply+0xb2>
 800f3b0:	9a01      	ldr	r2, [sp, #4]
 800f3b2:	f845 c002 	str.w	ip, [r5, r2]
 800f3b6:	9a03      	ldr	r2, [sp, #12]
 800f3b8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f3bc:	3304      	adds	r3, #4
 800f3be:	f1b9 0f00 	cmp.w	r9, #0
 800f3c2:	d021      	beq.n	800f408 <__multiply+0x144>
 800f3c4:	6829      	ldr	r1, [r5, #0]
 800f3c6:	f104 0c14 	add.w	ip, r4, #20
 800f3ca:	46ae      	mov	lr, r5
 800f3cc:	f04f 0a00 	mov.w	sl, #0
 800f3d0:	f8bc b000 	ldrh.w	fp, [ip]
 800f3d4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f3d8:	fb09 220b 	mla	r2, r9, fp, r2
 800f3dc:	4452      	add	r2, sl
 800f3de:	b289      	uxth	r1, r1
 800f3e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f3e4:	f84e 1b04 	str.w	r1, [lr], #4
 800f3e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f3ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f3f0:	f8be 1000 	ldrh.w	r1, [lr]
 800f3f4:	fb09 110a 	mla	r1, r9, sl, r1
 800f3f8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800f3fc:	4567      	cmp	r7, ip
 800f3fe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f402:	d8e5      	bhi.n	800f3d0 <__multiply+0x10c>
 800f404:	9a01      	ldr	r2, [sp, #4]
 800f406:	50a9      	str	r1, [r5, r2]
 800f408:	3504      	adds	r5, #4
 800f40a:	e799      	b.n	800f340 <__multiply+0x7c>
 800f40c:	3e01      	subs	r6, #1
 800f40e:	e79b      	b.n	800f348 <__multiply+0x84>
 800f410:	08011650 	.word	0x08011650
 800f414:	08011661 	.word	0x08011661

0800f418 <__pow5mult>:
 800f418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f41c:	4615      	mov	r5, r2
 800f41e:	f012 0203 	ands.w	r2, r2, #3
 800f422:	4606      	mov	r6, r0
 800f424:	460f      	mov	r7, r1
 800f426:	d007      	beq.n	800f438 <__pow5mult+0x20>
 800f428:	4c25      	ldr	r4, [pc, #148]	; (800f4c0 <__pow5mult+0xa8>)
 800f42a:	3a01      	subs	r2, #1
 800f42c:	2300      	movs	r3, #0
 800f42e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f432:	f7ff fe9d 	bl	800f170 <__multadd>
 800f436:	4607      	mov	r7, r0
 800f438:	10ad      	asrs	r5, r5, #2
 800f43a:	d03d      	beq.n	800f4b8 <__pow5mult+0xa0>
 800f43c:	69f4      	ldr	r4, [r6, #28]
 800f43e:	b97c      	cbnz	r4, 800f460 <__pow5mult+0x48>
 800f440:	2010      	movs	r0, #16
 800f442:	f7ff fd7f 	bl	800ef44 <malloc>
 800f446:	4602      	mov	r2, r0
 800f448:	61f0      	str	r0, [r6, #28]
 800f44a:	b928      	cbnz	r0, 800f458 <__pow5mult+0x40>
 800f44c:	4b1d      	ldr	r3, [pc, #116]	; (800f4c4 <__pow5mult+0xac>)
 800f44e:	481e      	ldr	r0, [pc, #120]	; (800f4c8 <__pow5mult+0xb0>)
 800f450:	f240 11b3 	movw	r1, #435	; 0x1b3
 800f454:	f000 fc60 	bl	800fd18 <__assert_func>
 800f458:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f45c:	6004      	str	r4, [r0, #0]
 800f45e:	60c4      	str	r4, [r0, #12]
 800f460:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800f464:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f468:	b94c      	cbnz	r4, 800f47e <__pow5mult+0x66>
 800f46a:	f240 2171 	movw	r1, #625	; 0x271
 800f46e:	4630      	mov	r0, r6
 800f470:	f7ff ff12 	bl	800f298 <__i2b>
 800f474:	2300      	movs	r3, #0
 800f476:	f8c8 0008 	str.w	r0, [r8, #8]
 800f47a:	4604      	mov	r4, r0
 800f47c:	6003      	str	r3, [r0, #0]
 800f47e:	f04f 0900 	mov.w	r9, #0
 800f482:	07eb      	lsls	r3, r5, #31
 800f484:	d50a      	bpl.n	800f49c <__pow5mult+0x84>
 800f486:	4639      	mov	r1, r7
 800f488:	4622      	mov	r2, r4
 800f48a:	4630      	mov	r0, r6
 800f48c:	f7ff ff1a 	bl	800f2c4 <__multiply>
 800f490:	4639      	mov	r1, r7
 800f492:	4680      	mov	r8, r0
 800f494:	4630      	mov	r0, r6
 800f496:	f7ff fe49 	bl	800f12c <_Bfree>
 800f49a:	4647      	mov	r7, r8
 800f49c:	106d      	asrs	r5, r5, #1
 800f49e:	d00b      	beq.n	800f4b8 <__pow5mult+0xa0>
 800f4a0:	6820      	ldr	r0, [r4, #0]
 800f4a2:	b938      	cbnz	r0, 800f4b4 <__pow5mult+0x9c>
 800f4a4:	4622      	mov	r2, r4
 800f4a6:	4621      	mov	r1, r4
 800f4a8:	4630      	mov	r0, r6
 800f4aa:	f7ff ff0b 	bl	800f2c4 <__multiply>
 800f4ae:	6020      	str	r0, [r4, #0]
 800f4b0:	f8c0 9000 	str.w	r9, [r0]
 800f4b4:	4604      	mov	r4, r0
 800f4b6:	e7e4      	b.n	800f482 <__pow5mult+0x6a>
 800f4b8:	4638      	mov	r0, r7
 800f4ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f4be:	bf00      	nop
 800f4c0:	080117b0 	.word	0x080117b0
 800f4c4:	080115e1 	.word	0x080115e1
 800f4c8:	08011661 	.word	0x08011661

0800f4cc <__lshift>:
 800f4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4d0:	460c      	mov	r4, r1
 800f4d2:	6849      	ldr	r1, [r1, #4]
 800f4d4:	6923      	ldr	r3, [r4, #16]
 800f4d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f4da:	68a3      	ldr	r3, [r4, #8]
 800f4dc:	4607      	mov	r7, r0
 800f4de:	4691      	mov	r9, r2
 800f4e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f4e4:	f108 0601 	add.w	r6, r8, #1
 800f4e8:	42b3      	cmp	r3, r6
 800f4ea:	db0b      	blt.n	800f504 <__lshift+0x38>
 800f4ec:	4638      	mov	r0, r7
 800f4ee:	f7ff fddd 	bl	800f0ac <_Balloc>
 800f4f2:	4605      	mov	r5, r0
 800f4f4:	b948      	cbnz	r0, 800f50a <__lshift+0x3e>
 800f4f6:	4602      	mov	r2, r0
 800f4f8:	4b28      	ldr	r3, [pc, #160]	; (800f59c <__lshift+0xd0>)
 800f4fa:	4829      	ldr	r0, [pc, #164]	; (800f5a0 <__lshift+0xd4>)
 800f4fc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800f500:	f000 fc0a 	bl	800fd18 <__assert_func>
 800f504:	3101      	adds	r1, #1
 800f506:	005b      	lsls	r3, r3, #1
 800f508:	e7ee      	b.n	800f4e8 <__lshift+0x1c>
 800f50a:	2300      	movs	r3, #0
 800f50c:	f100 0114 	add.w	r1, r0, #20
 800f510:	f100 0210 	add.w	r2, r0, #16
 800f514:	4618      	mov	r0, r3
 800f516:	4553      	cmp	r3, sl
 800f518:	db33      	blt.n	800f582 <__lshift+0xb6>
 800f51a:	6920      	ldr	r0, [r4, #16]
 800f51c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f520:	f104 0314 	add.w	r3, r4, #20
 800f524:	f019 091f 	ands.w	r9, r9, #31
 800f528:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f52c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f530:	d02b      	beq.n	800f58a <__lshift+0xbe>
 800f532:	f1c9 0e20 	rsb	lr, r9, #32
 800f536:	468a      	mov	sl, r1
 800f538:	2200      	movs	r2, #0
 800f53a:	6818      	ldr	r0, [r3, #0]
 800f53c:	fa00 f009 	lsl.w	r0, r0, r9
 800f540:	4310      	orrs	r0, r2
 800f542:	f84a 0b04 	str.w	r0, [sl], #4
 800f546:	f853 2b04 	ldr.w	r2, [r3], #4
 800f54a:	459c      	cmp	ip, r3
 800f54c:	fa22 f20e 	lsr.w	r2, r2, lr
 800f550:	d8f3      	bhi.n	800f53a <__lshift+0x6e>
 800f552:	ebac 0304 	sub.w	r3, ip, r4
 800f556:	3b15      	subs	r3, #21
 800f558:	f023 0303 	bic.w	r3, r3, #3
 800f55c:	3304      	adds	r3, #4
 800f55e:	f104 0015 	add.w	r0, r4, #21
 800f562:	4584      	cmp	ip, r0
 800f564:	bf38      	it	cc
 800f566:	2304      	movcc	r3, #4
 800f568:	50ca      	str	r2, [r1, r3]
 800f56a:	b10a      	cbz	r2, 800f570 <__lshift+0xa4>
 800f56c:	f108 0602 	add.w	r6, r8, #2
 800f570:	3e01      	subs	r6, #1
 800f572:	4638      	mov	r0, r7
 800f574:	612e      	str	r6, [r5, #16]
 800f576:	4621      	mov	r1, r4
 800f578:	f7ff fdd8 	bl	800f12c <_Bfree>
 800f57c:	4628      	mov	r0, r5
 800f57e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f582:	f842 0f04 	str.w	r0, [r2, #4]!
 800f586:	3301      	adds	r3, #1
 800f588:	e7c5      	b.n	800f516 <__lshift+0x4a>
 800f58a:	3904      	subs	r1, #4
 800f58c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f590:	f841 2f04 	str.w	r2, [r1, #4]!
 800f594:	459c      	cmp	ip, r3
 800f596:	d8f9      	bhi.n	800f58c <__lshift+0xc0>
 800f598:	e7ea      	b.n	800f570 <__lshift+0xa4>
 800f59a:	bf00      	nop
 800f59c:	08011650 	.word	0x08011650
 800f5a0:	08011661 	.word	0x08011661

0800f5a4 <__mcmp>:
 800f5a4:	b530      	push	{r4, r5, lr}
 800f5a6:	6902      	ldr	r2, [r0, #16]
 800f5a8:	690c      	ldr	r4, [r1, #16]
 800f5aa:	1b12      	subs	r2, r2, r4
 800f5ac:	d10e      	bne.n	800f5cc <__mcmp+0x28>
 800f5ae:	f100 0314 	add.w	r3, r0, #20
 800f5b2:	3114      	adds	r1, #20
 800f5b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f5b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f5bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f5c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f5c4:	42a5      	cmp	r5, r4
 800f5c6:	d003      	beq.n	800f5d0 <__mcmp+0x2c>
 800f5c8:	d305      	bcc.n	800f5d6 <__mcmp+0x32>
 800f5ca:	2201      	movs	r2, #1
 800f5cc:	4610      	mov	r0, r2
 800f5ce:	bd30      	pop	{r4, r5, pc}
 800f5d0:	4283      	cmp	r3, r0
 800f5d2:	d3f3      	bcc.n	800f5bc <__mcmp+0x18>
 800f5d4:	e7fa      	b.n	800f5cc <__mcmp+0x28>
 800f5d6:	f04f 32ff 	mov.w	r2, #4294967295
 800f5da:	e7f7      	b.n	800f5cc <__mcmp+0x28>

0800f5dc <__mdiff>:
 800f5dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5e0:	460c      	mov	r4, r1
 800f5e2:	4606      	mov	r6, r0
 800f5e4:	4611      	mov	r1, r2
 800f5e6:	4620      	mov	r0, r4
 800f5e8:	4690      	mov	r8, r2
 800f5ea:	f7ff ffdb 	bl	800f5a4 <__mcmp>
 800f5ee:	1e05      	subs	r5, r0, #0
 800f5f0:	d110      	bne.n	800f614 <__mdiff+0x38>
 800f5f2:	4629      	mov	r1, r5
 800f5f4:	4630      	mov	r0, r6
 800f5f6:	f7ff fd59 	bl	800f0ac <_Balloc>
 800f5fa:	b930      	cbnz	r0, 800f60a <__mdiff+0x2e>
 800f5fc:	4b3a      	ldr	r3, [pc, #232]	; (800f6e8 <__mdiff+0x10c>)
 800f5fe:	4602      	mov	r2, r0
 800f600:	f240 2137 	movw	r1, #567	; 0x237
 800f604:	4839      	ldr	r0, [pc, #228]	; (800f6ec <__mdiff+0x110>)
 800f606:	f000 fb87 	bl	800fd18 <__assert_func>
 800f60a:	2301      	movs	r3, #1
 800f60c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f610:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f614:	bfa4      	itt	ge
 800f616:	4643      	movge	r3, r8
 800f618:	46a0      	movge	r8, r4
 800f61a:	4630      	mov	r0, r6
 800f61c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f620:	bfa6      	itte	ge
 800f622:	461c      	movge	r4, r3
 800f624:	2500      	movge	r5, #0
 800f626:	2501      	movlt	r5, #1
 800f628:	f7ff fd40 	bl	800f0ac <_Balloc>
 800f62c:	b920      	cbnz	r0, 800f638 <__mdiff+0x5c>
 800f62e:	4b2e      	ldr	r3, [pc, #184]	; (800f6e8 <__mdiff+0x10c>)
 800f630:	4602      	mov	r2, r0
 800f632:	f240 2145 	movw	r1, #581	; 0x245
 800f636:	e7e5      	b.n	800f604 <__mdiff+0x28>
 800f638:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f63c:	6926      	ldr	r6, [r4, #16]
 800f63e:	60c5      	str	r5, [r0, #12]
 800f640:	f104 0914 	add.w	r9, r4, #20
 800f644:	f108 0514 	add.w	r5, r8, #20
 800f648:	f100 0e14 	add.w	lr, r0, #20
 800f64c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f650:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f654:	f108 0210 	add.w	r2, r8, #16
 800f658:	46f2      	mov	sl, lr
 800f65a:	2100      	movs	r1, #0
 800f65c:	f859 3b04 	ldr.w	r3, [r9], #4
 800f660:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f664:	fa11 f88b 	uxtah	r8, r1, fp
 800f668:	b299      	uxth	r1, r3
 800f66a:	0c1b      	lsrs	r3, r3, #16
 800f66c:	eba8 0801 	sub.w	r8, r8, r1
 800f670:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f674:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f678:	fa1f f888 	uxth.w	r8, r8
 800f67c:	1419      	asrs	r1, r3, #16
 800f67e:	454e      	cmp	r6, r9
 800f680:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f684:	f84a 3b04 	str.w	r3, [sl], #4
 800f688:	d8e8      	bhi.n	800f65c <__mdiff+0x80>
 800f68a:	1b33      	subs	r3, r6, r4
 800f68c:	3b15      	subs	r3, #21
 800f68e:	f023 0303 	bic.w	r3, r3, #3
 800f692:	3304      	adds	r3, #4
 800f694:	3415      	adds	r4, #21
 800f696:	42a6      	cmp	r6, r4
 800f698:	bf38      	it	cc
 800f69a:	2304      	movcc	r3, #4
 800f69c:	441d      	add	r5, r3
 800f69e:	4473      	add	r3, lr
 800f6a0:	469e      	mov	lr, r3
 800f6a2:	462e      	mov	r6, r5
 800f6a4:	4566      	cmp	r6, ip
 800f6a6:	d30e      	bcc.n	800f6c6 <__mdiff+0xea>
 800f6a8:	f10c 0203 	add.w	r2, ip, #3
 800f6ac:	1b52      	subs	r2, r2, r5
 800f6ae:	f022 0203 	bic.w	r2, r2, #3
 800f6b2:	3d03      	subs	r5, #3
 800f6b4:	45ac      	cmp	ip, r5
 800f6b6:	bf38      	it	cc
 800f6b8:	2200      	movcc	r2, #0
 800f6ba:	4413      	add	r3, r2
 800f6bc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800f6c0:	b17a      	cbz	r2, 800f6e2 <__mdiff+0x106>
 800f6c2:	6107      	str	r7, [r0, #16]
 800f6c4:	e7a4      	b.n	800f610 <__mdiff+0x34>
 800f6c6:	f856 8b04 	ldr.w	r8, [r6], #4
 800f6ca:	fa11 f288 	uxtah	r2, r1, r8
 800f6ce:	1414      	asrs	r4, r2, #16
 800f6d0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f6d4:	b292      	uxth	r2, r2
 800f6d6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f6da:	f84e 2b04 	str.w	r2, [lr], #4
 800f6de:	1421      	asrs	r1, r4, #16
 800f6e0:	e7e0      	b.n	800f6a4 <__mdiff+0xc8>
 800f6e2:	3f01      	subs	r7, #1
 800f6e4:	e7ea      	b.n	800f6bc <__mdiff+0xe0>
 800f6e6:	bf00      	nop
 800f6e8:	08011650 	.word	0x08011650
 800f6ec:	08011661 	.word	0x08011661

0800f6f0 <__d2b>:
 800f6f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f6f4:	460f      	mov	r7, r1
 800f6f6:	2101      	movs	r1, #1
 800f6f8:	ec59 8b10 	vmov	r8, r9, d0
 800f6fc:	4616      	mov	r6, r2
 800f6fe:	f7ff fcd5 	bl	800f0ac <_Balloc>
 800f702:	4604      	mov	r4, r0
 800f704:	b930      	cbnz	r0, 800f714 <__d2b+0x24>
 800f706:	4602      	mov	r2, r0
 800f708:	4b24      	ldr	r3, [pc, #144]	; (800f79c <__d2b+0xac>)
 800f70a:	4825      	ldr	r0, [pc, #148]	; (800f7a0 <__d2b+0xb0>)
 800f70c:	f240 310f 	movw	r1, #783	; 0x30f
 800f710:	f000 fb02 	bl	800fd18 <__assert_func>
 800f714:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f718:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f71c:	bb2d      	cbnz	r5, 800f76a <__d2b+0x7a>
 800f71e:	9301      	str	r3, [sp, #4]
 800f720:	f1b8 0300 	subs.w	r3, r8, #0
 800f724:	d026      	beq.n	800f774 <__d2b+0x84>
 800f726:	4668      	mov	r0, sp
 800f728:	9300      	str	r3, [sp, #0]
 800f72a:	f7ff fd87 	bl	800f23c <__lo0bits>
 800f72e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f732:	b1e8      	cbz	r0, 800f770 <__d2b+0x80>
 800f734:	f1c0 0320 	rsb	r3, r0, #32
 800f738:	fa02 f303 	lsl.w	r3, r2, r3
 800f73c:	430b      	orrs	r3, r1
 800f73e:	40c2      	lsrs	r2, r0
 800f740:	6163      	str	r3, [r4, #20]
 800f742:	9201      	str	r2, [sp, #4]
 800f744:	9b01      	ldr	r3, [sp, #4]
 800f746:	61a3      	str	r3, [r4, #24]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	bf14      	ite	ne
 800f74c:	2202      	movne	r2, #2
 800f74e:	2201      	moveq	r2, #1
 800f750:	6122      	str	r2, [r4, #16]
 800f752:	b1bd      	cbz	r5, 800f784 <__d2b+0x94>
 800f754:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f758:	4405      	add	r5, r0
 800f75a:	603d      	str	r5, [r7, #0]
 800f75c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f760:	6030      	str	r0, [r6, #0]
 800f762:	4620      	mov	r0, r4
 800f764:	b003      	add	sp, #12
 800f766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f76a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f76e:	e7d6      	b.n	800f71e <__d2b+0x2e>
 800f770:	6161      	str	r1, [r4, #20]
 800f772:	e7e7      	b.n	800f744 <__d2b+0x54>
 800f774:	a801      	add	r0, sp, #4
 800f776:	f7ff fd61 	bl	800f23c <__lo0bits>
 800f77a:	9b01      	ldr	r3, [sp, #4]
 800f77c:	6163      	str	r3, [r4, #20]
 800f77e:	3020      	adds	r0, #32
 800f780:	2201      	movs	r2, #1
 800f782:	e7e5      	b.n	800f750 <__d2b+0x60>
 800f784:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f788:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f78c:	6038      	str	r0, [r7, #0]
 800f78e:	6918      	ldr	r0, [r3, #16]
 800f790:	f7ff fd34 	bl	800f1fc <__hi0bits>
 800f794:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f798:	e7e2      	b.n	800f760 <__d2b+0x70>
 800f79a:	bf00      	nop
 800f79c:	08011650 	.word	0x08011650
 800f7a0:	08011661 	.word	0x08011661

0800f7a4 <__sfputc_r>:
 800f7a4:	6893      	ldr	r3, [r2, #8]
 800f7a6:	3b01      	subs	r3, #1
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	b410      	push	{r4}
 800f7ac:	6093      	str	r3, [r2, #8]
 800f7ae:	da08      	bge.n	800f7c2 <__sfputc_r+0x1e>
 800f7b0:	6994      	ldr	r4, [r2, #24]
 800f7b2:	42a3      	cmp	r3, r4
 800f7b4:	db01      	blt.n	800f7ba <__sfputc_r+0x16>
 800f7b6:	290a      	cmp	r1, #10
 800f7b8:	d103      	bne.n	800f7c2 <__sfputc_r+0x1e>
 800f7ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7be:	f7fe bbd6 	b.w	800df6e <__swbuf_r>
 800f7c2:	6813      	ldr	r3, [r2, #0]
 800f7c4:	1c58      	adds	r0, r3, #1
 800f7c6:	6010      	str	r0, [r2, #0]
 800f7c8:	7019      	strb	r1, [r3, #0]
 800f7ca:	4608      	mov	r0, r1
 800f7cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7d0:	4770      	bx	lr

0800f7d2 <__sfputs_r>:
 800f7d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7d4:	4606      	mov	r6, r0
 800f7d6:	460f      	mov	r7, r1
 800f7d8:	4614      	mov	r4, r2
 800f7da:	18d5      	adds	r5, r2, r3
 800f7dc:	42ac      	cmp	r4, r5
 800f7de:	d101      	bne.n	800f7e4 <__sfputs_r+0x12>
 800f7e0:	2000      	movs	r0, #0
 800f7e2:	e007      	b.n	800f7f4 <__sfputs_r+0x22>
 800f7e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7e8:	463a      	mov	r2, r7
 800f7ea:	4630      	mov	r0, r6
 800f7ec:	f7ff ffda 	bl	800f7a4 <__sfputc_r>
 800f7f0:	1c43      	adds	r3, r0, #1
 800f7f2:	d1f3      	bne.n	800f7dc <__sfputs_r+0xa>
 800f7f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f7f8 <_vfiprintf_r>:
 800f7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7fc:	460d      	mov	r5, r1
 800f7fe:	b09d      	sub	sp, #116	; 0x74
 800f800:	4614      	mov	r4, r2
 800f802:	4698      	mov	r8, r3
 800f804:	4606      	mov	r6, r0
 800f806:	b118      	cbz	r0, 800f810 <_vfiprintf_r+0x18>
 800f808:	6a03      	ldr	r3, [r0, #32]
 800f80a:	b90b      	cbnz	r3, 800f810 <_vfiprintf_r+0x18>
 800f80c:	f7fe fac0 	bl	800dd90 <__sinit>
 800f810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f812:	07d9      	lsls	r1, r3, #31
 800f814:	d405      	bmi.n	800f822 <_vfiprintf_r+0x2a>
 800f816:	89ab      	ldrh	r3, [r5, #12]
 800f818:	059a      	lsls	r2, r3, #22
 800f81a:	d402      	bmi.n	800f822 <_vfiprintf_r+0x2a>
 800f81c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f81e:	f7fe fcb8 	bl	800e192 <__retarget_lock_acquire_recursive>
 800f822:	89ab      	ldrh	r3, [r5, #12]
 800f824:	071b      	lsls	r3, r3, #28
 800f826:	d501      	bpl.n	800f82c <_vfiprintf_r+0x34>
 800f828:	692b      	ldr	r3, [r5, #16]
 800f82a:	b99b      	cbnz	r3, 800f854 <_vfiprintf_r+0x5c>
 800f82c:	4629      	mov	r1, r5
 800f82e:	4630      	mov	r0, r6
 800f830:	f7fe fbda 	bl	800dfe8 <__swsetup_r>
 800f834:	b170      	cbz	r0, 800f854 <_vfiprintf_r+0x5c>
 800f836:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f838:	07dc      	lsls	r4, r3, #31
 800f83a:	d504      	bpl.n	800f846 <_vfiprintf_r+0x4e>
 800f83c:	f04f 30ff 	mov.w	r0, #4294967295
 800f840:	b01d      	add	sp, #116	; 0x74
 800f842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f846:	89ab      	ldrh	r3, [r5, #12]
 800f848:	0598      	lsls	r0, r3, #22
 800f84a:	d4f7      	bmi.n	800f83c <_vfiprintf_r+0x44>
 800f84c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f84e:	f7fe fca1 	bl	800e194 <__retarget_lock_release_recursive>
 800f852:	e7f3      	b.n	800f83c <_vfiprintf_r+0x44>
 800f854:	2300      	movs	r3, #0
 800f856:	9309      	str	r3, [sp, #36]	; 0x24
 800f858:	2320      	movs	r3, #32
 800f85a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f85e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f862:	2330      	movs	r3, #48	; 0x30
 800f864:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800fa18 <_vfiprintf_r+0x220>
 800f868:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f86c:	f04f 0901 	mov.w	r9, #1
 800f870:	4623      	mov	r3, r4
 800f872:	469a      	mov	sl, r3
 800f874:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f878:	b10a      	cbz	r2, 800f87e <_vfiprintf_r+0x86>
 800f87a:	2a25      	cmp	r2, #37	; 0x25
 800f87c:	d1f9      	bne.n	800f872 <_vfiprintf_r+0x7a>
 800f87e:	ebba 0b04 	subs.w	fp, sl, r4
 800f882:	d00b      	beq.n	800f89c <_vfiprintf_r+0xa4>
 800f884:	465b      	mov	r3, fp
 800f886:	4622      	mov	r2, r4
 800f888:	4629      	mov	r1, r5
 800f88a:	4630      	mov	r0, r6
 800f88c:	f7ff ffa1 	bl	800f7d2 <__sfputs_r>
 800f890:	3001      	adds	r0, #1
 800f892:	f000 80a9 	beq.w	800f9e8 <_vfiprintf_r+0x1f0>
 800f896:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f898:	445a      	add	r2, fp
 800f89a:	9209      	str	r2, [sp, #36]	; 0x24
 800f89c:	f89a 3000 	ldrb.w	r3, [sl]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	f000 80a1 	beq.w	800f9e8 <_vfiprintf_r+0x1f0>
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	f04f 32ff 	mov.w	r2, #4294967295
 800f8ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f8b0:	f10a 0a01 	add.w	sl, sl, #1
 800f8b4:	9304      	str	r3, [sp, #16]
 800f8b6:	9307      	str	r3, [sp, #28]
 800f8b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f8bc:	931a      	str	r3, [sp, #104]	; 0x68
 800f8be:	4654      	mov	r4, sl
 800f8c0:	2205      	movs	r2, #5
 800f8c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8c6:	4854      	ldr	r0, [pc, #336]	; (800fa18 <_vfiprintf_r+0x220>)
 800f8c8:	f7f0 fc6a 	bl	80001a0 <memchr>
 800f8cc:	9a04      	ldr	r2, [sp, #16]
 800f8ce:	b9d8      	cbnz	r0, 800f908 <_vfiprintf_r+0x110>
 800f8d0:	06d1      	lsls	r1, r2, #27
 800f8d2:	bf44      	itt	mi
 800f8d4:	2320      	movmi	r3, #32
 800f8d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8da:	0713      	lsls	r3, r2, #28
 800f8dc:	bf44      	itt	mi
 800f8de:	232b      	movmi	r3, #43	; 0x2b
 800f8e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f8e4:	f89a 3000 	ldrb.w	r3, [sl]
 800f8e8:	2b2a      	cmp	r3, #42	; 0x2a
 800f8ea:	d015      	beq.n	800f918 <_vfiprintf_r+0x120>
 800f8ec:	9a07      	ldr	r2, [sp, #28]
 800f8ee:	4654      	mov	r4, sl
 800f8f0:	2000      	movs	r0, #0
 800f8f2:	f04f 0c0a 	mov.w	ip, #10
 800f8f6:	4621      	mov	r1, r4
 800f8f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8fc:	3b30      	subs	r3, #48	; 0x30
 800f8fe:	2b09      	cmp	r3, #9
 800f900:	d94d      	bls.n	800f99e <_vfiprintf_r+0x1a6>
 800f902:	b1b0      	cbz	r0, 800f932 <_vfiprintf_r+0x13a>
 800f904:	9207      	str	r2, [sp, #28]
 800f906:	e014      	b.n	800f932 <_vfiprintf_r+0x13a>
 800f908:	eba0 0308 	sub.w	r3, r0, r8
 800f90c:	fa09 f303 	lsl.w	r3, r9, r3
 800f910:	4313      	orrs	r3, r2
 800f912:	9304      	str	r3, [sp, #16]
 800f914:	46a2      	mov	sl, r4
 800f916:	e7d2      	b.n	800f8be <_vfiprintf_r+0xc6>
 800f918:	9b03      	ldr	r3, [sp, #12]
 800f91a:	1d19      	adds	r1, r3, #4
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	9103      	str	r1, [sp, #12]
 800f920:	2b00      	cmp	r3, #0
 800f922:	bfbb      	ittet	lt
 800f924:	425b      	neglt	r3, r3
 800f926:	f042 0202 	orrlt.w	r2, r2, #2
 800f92a:	9307      	strge	r3, [sp, #28]
 800f92c:	9307      	strlt	r3, [sp, #28]
 800f92e:	bfb8      	it	lt
 800f930:	9204      	strlt	r2, [sp, #16]
 800f932:	7823      	ldrb	r3, [r4, #0]
 800f934:	2b2e      	cmp	r3, #46	; 0x2e
 800f936:	d10c      	bne.n	800f952 <_vfiprintf_r+0x15a>
 800f938:	7863      	ldrb	r3, [r4, #1]
 800f93a:	2b2a      	cmp	r3, #42	; 0x2a
 800f93c:	d134      	bne.n	800f9a8 <_vfiprintf_r+0x1b0>
 800f93e:	9b03      	ldr	r3, [sp, #12]
 800f940:	1d1a      	adds	r2, r3, #4
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	9203      	str	r2, [sp, #12]
 800f946:	2b00      	cmp	r3, #0
 800f948:	bfb8      	it	lt
 800f94a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f94e:	3402      	adds	r4, #2
 800f950:	9305      	str	r3, [sp, #20]
 800f952:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800fa28 <_vfiprintf_r+0x230>
 800f956:	7821      	ldrb	r1, [r4, #0]
 800f958:	2203      	movs	r2, #3
 800f95a:	4650      	mov	r0, sl
 800f95c:	f7f0 fc20 	bl	80001a0 <memchr>
 800f960:	b138      	cbz	r0, 800f972 <_vfiprintf_r+0x17a>
 800f962:	9b04      	ldr	r3, [sp, #16]
 800f964:	eba0 000a 	sub.w	r0, r0, sl
 800f968:	2240      	movs	r2, #64	; 0x40
 800f96a:	4082      	lsls	r2, r0
 800f96c:	4313      	orrs	r3, r2
 800f96e:	3401      	adds	r4, #1
 800f970:	9304      	str	r3, [sp, #16]
 800f972:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f976:	4829      	ldr	r0, [pc, #164]	; (800fa1c <_vfiprintf_r+0x224>)
 800f978:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f97c:	2206      	movs	r2, #6
 800f97e:	f7f0 fc0f 	bl	80001a0 <memchr>
 800f982:	2800      	cmp	r0, #0
 800f984:	d03f      	beq.n	800fa06 <_vfiprintf_r+0x20e>
 800f986:	4b26      	ldr	r3, [pc, #152]	; (800fa20 <_vfiprintf_r+0x228>)
 800f988:	bb1b      	cbnz	r3, 800f9d2 <_vfiprintf_r+0x1da>
 800f98a:	9b03      	ldr	r3, [sp, #12]
 800f98c:	3307      	adds	r3, #7
 800f98e:	f023 0307 	bic.w	r3, r3, #7
 800f992:	3308      	adds	r3, #8
 800f994:	9303      	str	r3, [sp, #12]
 800f996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f998:	443b      	add	r3, r7
 800f99a:	9309      	str	r3, [sp, #36]	; 0x24
 800f99c:	e768      	b.n	800f870 <_vfiprintf_r+0x78>
 800f99e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f9a2:	460c      	mov	r4, r1
 800f9a4:	2001      	movs	r0, #1
 800f9a6:	e7a6      	b.n	800f8f6 <_vfiprintf_r+0xfe>
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	3401      	adds	r4, #1
 800f9ac:	9305      	str	r3, [sp, #20]
 800f9ae:	4619      	mov	r1, r3
 800f9b0:	f04f 0c0a 	mov.w	ip, #10
 800f9b4:	4620      	mov	r0, r4
 800f9b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9ba:	3a30      	subs	r2, #48	; 0x30
 800f9bc:	2a09      	cmp	r2, #9
 800f9be:	d903      	bls.n	800f9c8 <_vfiprintf_r+0x1d0>
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d0c6      	beq.n	800f952 <_vfiprintf_r+0x15a>
 800f9c4:	9105      	str	r1, [sp, #20]
 800f9c6:	e7c4      	b.n	800f952 <_vfiprintf_r+0x15a>
 800f9c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f9cc:	4604      	mov	r4, r0
 800f9ce:	2301      	movs	r3, #1
 800f9d0:	e7f0      	b.n	800f9b4 <_vfiprintf_r+0x1bc>
 800f9d2:	ab03      	add	r3, sp, #12
 800f9d4:	9300      	str	r3, [sp, #0]
 800f9d6:	462a      	mov	r2, r5
 800f9d8:	4b12      	ldr	r3, [pc, #72]	; (800fa24 <_vfiprintf_r+0x22c>)
 800f9da:	a904      	add	r1, sp, #16
 800f9dc:	4630      	mov	r0, r6
 800f9de:	f7fd fd85 	bl	800d4ec <_printf_float>
 800f9e2:	4607      	mov	r7, r0
 800f9e4:	1c78      	adds	r0, r7, #1
 800f9e6:	d1d6      	bne.n	800f996 <_vfiprintf_r+0x19e>
 800f9e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f9ea:	07d9      	lsls	r1, r3, #31
 800f9ec:	d405      	bmi.n	800f9fa <_vfiprintf_r+0x202>
 800f9ee:	89ab      	ldrh	r3, [r5, #12]
 800f9f0:	059a      	lsls	r2, r3, #22
 800f9f2:	d402      	bmi.n	800f9fa <_vfiprintf_r+0x202>
 800f9f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f9f6:	f7fe fbcd 	bl	800e194 <__retarget_lock_release_recursive>
 800f9fa:	89ab      	ldrh	r3, [r5, #12]
 800f9fc:	065b      	lsls	r3, r3, #25
 800f9fe:	f53f af1d 	bmi.w	800f83c <_vfiprintf_r+0x44>
 800fa02:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa04:	e71c      	b.n	800f840 <_vfiprintf_r+0x48>
 800fa06:	ab03      	add	r3, sp, #12
 800fa08:	9300      	str	r3, [sp, #0]
 800fa0a:	462a      	mov	r2, r5
 800fa0c:	4b05      	ldr	r3, [pc, #20]	; (800fa24 <_vfiprintf_r+0x22c>)
 800fa0e:	a904      	add	r1, sp, #16
 800fa10:	4630      	mov	r0, r6
 800fa12:	f7fe f80f 	bl	800da34 <_printf_i>
 800fa16:	e7e4      	b.n	800f9e2 <_vfiprintf_r+0x1ea>
 800fa18:	080117bc 	.word	0x080117bc
 800fa1c:	080117c6 	.word	0x080117c6
 800fa20:	0800d4ed 	.word	0x0800d4ed
 800fa24:	0800f7d3 	.word	0x0800f7d3
 800fa28:	080117c2 	.word	0x080117c2

0800fa2c <__sflush_r>:
 800fa2c:	898a      	ldrh	r2, [r1, #12]
 800fa2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa32:	4605      	mov	r5, r0
 800fa34:	0710      	lsls	r0, r2, #28
 800fa36:	460c      	mov	r4, r1
 800fa38:	d458      	bmi.n	800faec <__sflush_r+0xc0>
 800fa3a:	684b      	ldr	r3, [r1, #4]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	dc05      	bgt.n	800fa4c <__sflush_r+0x20>
 800fa40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	dc02      	bgt.n	800fa4c <__sflush_r+0x20>
 800fa46:	2000      	movs	r0, #0
 800fa48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fa4e:	2e00      	cmp	r6, #0
 800fa50:	d0f9      	beq.n	800fa46 <__sflush_r+0x1a>
 800fa52:	2300      	movs	r3, #0
 800fa54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fa58:	682f      	ldr	r7, [r5, #0]
 800fa5a:	6a21      	ldr	r1, [r4, #32]
 800fa5c:	602b      	str	r3, [r5, #0]
 800fa5e:	d032      	beq.n	800fac6 <__sflush_r+0x9a>
 800fa60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fa62:	89a3      	ldrh	r3, [r4, #12]
 800fa64:	075a      	lsls	r2, r3, #29
 800fa66:	d505      	bpl.n	800fa74 <__sflush_r+0x48>
 800fa68:	6863      	ldr	r3, [r4, #4]
 800fa6a:	1ac0      	subs	r0, r0, r3
 800fa6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fa6e:	b10b      	cbz	r3, 800fa74 <__sflush_r+0x48>
 800fa70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fa72:	1ac0      	subs	r0, r0, r3
 800fa74:	2300      	movs	r3, #0
 800fa76:	4602      	mov	r2, r0
 800fa78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fa7a:	6a21      	ldr	r1, [r4, #32]
 800fa7c:	4628      	mov	r0, r5
 800fa7e:	47b0      	blx	r6
 800fa80:	1c43      	adds	r3, r0, #1
 800fa82:	89a3      	ldrh	r3, [r4, #12]
 800fa84:	d106      	bne.n	800fa94 <__sflush_r+0x68>
 800fa86:	6829      	ldr	r1, [r5, #0]
 800fa88:	291d      	cmp	r1, #29
 800fa8a:	d82b      	bhi.n	800fae4 <__sflush_r+0xb8>
 800fa8c:	4a29      	ldr	r2, [pc, #164]	; (800fb34 <__sflush_r+0x108>)
 800fa8e:	410a      	asrs	r2, r1
 800fa90:	07d6      	lsls	r6, r2, #31
 800fa92:	d427      	bmi.n	800fae4 <__sflush_r+0xb8>
 800fa94:	2200      	movs	r2, #0
 800fa96:	6062      	str	r2, [r4, #4]
 800fa98:	04d9      	lsls	r1, r3, #19
 800fa9a:	6922      	ldr	r2, [r4, #16]
 800fa9c:	6022      	str	r2, [r4, #0]
 800fa9e:	d504      	bpl.n	800faaa <__sflush_r+0x7e>
 800faa0:	1c42      	adds	r2, r0, #1
 800faa2:	d101      	bne.n	800faa8 <__sflush_r+0x7c>
 800faa4:	682b      	ldr	r3, [r5, #0]
 800faa6:	b903      	cbnz	r3, 800faaa <__sflush_r+0x7e>
 800faa8:	6560      	str	r0, [r4, #84]	; 0x54
 800faaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800faac:	602f      	str	r7, [r5, #0]
 800faae:	2900      	cmp	r1, #0
 800fab0:	d0c9      	beq.n	800fa46 <__sflush_r+0x1a>
 800fab2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fab6:	4299      	cmp	r1, r3
 800fab8:	d002      	beq.n	800fac0 <__sflush_r+0x94>
 800faba:	4628      	mov	r0, r5
 800fabc:	f7ff f9f6 	bl	800eeac <_free_r>
 800fac0:	2000      	movs	r0, #0
 800fac2:	6360      	str	r0, [r4, #52]	; 0x34
 800fac4:	e7c0      	b.n	800fa48 <__sflush_r+0x1c>
 800fac6:	2301      	movs	r3, #1
 800fac8:	4628      	mov	r0, r5
 800faca:	47b0      	blx	r6
 800facc:	1c41      	adds	r1, r0, #1
 800face:	d1c8      	bne.n	800fa62 <__sflush_r+0x36>
 800fad0:	682b      	ldr	r3, [r5, #0]
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d0c5      	beq.n	800fa62 <__sflush_r+0x36>
 800fad6:	2b1d      	cmp	r3, #29
 800fad8:	d001      	beq.n	800fade <__sflush_r+0xb2>
 800fada:	2b16      	cmp	r3, #22
 800fadc:	d101      	bne.n	800fae2 <__sflush_r+0xb6>
 800fade:	602f      	str	r7, [r5, #0]
 800fae0:	e7b1      	b.n	800fa46 <__sflush_r+0x1a>
 800fae2:	89a3      	ldrh	r3, [r4, #12]
 800fae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fae8:	81a3      	strh	r3, [r4, #12]
 800faea:	e7ad      	b.n	800fa48 <__sflush_r+0x1c>
 800faec:	690f      	ldr	r7, [r1, #16]
 800faee:	2f00      	cmp	r7, #0
 800faf0:	d0a9      	beq.n	800fa46 <__sflush_r+0x1a>
 800faf2:	0793      	lsls	r3, r2, #30
 800faf4:	680e      	ldr	r6, [r1, #0]
 800faf6:	bf08      	it	eq
 800faf8:	694b      	ldreq	r3, [r1, #20]
 800fafa:	600f      	str	r7, [r1, #0]
 800fafc:	bf18      	it	ne
 800fafe:	2300      	movne	r3, #0
 800fb00:	eba6 0807 	sub.w	r8, r6, r7
 800fb04:	608b      	str	r3, [r1, #8]
 800fb06:	f1b8 0f00 	cmp.w	r8, #0
 800fb0a:	dd9c      	ble.n	800fa46 <__sflush_r+0x1a>
 800fb0c:	6a21      	ldr	r1, [r4, #32]
 800fb0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fb10:	4643      	mov	r3, r8
 800fb12:	463a      	mov	r2, r7
 800fb14:	4628      	mov	r0, r5
 800fb16:	47b0      	blx	r6
 800fb18:	2800      	cmp	r0, #0
 800fb1a:	dc06      	bgt.n	800fb2a <__sflush_r+0xfe>
 800fb1c:	89a3      	ldrh	r3, [r4, #12]
 800fb1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb22:	81a3      	strh	r3, [r4, #12]
 800fb24:	f04f 30ff 	mov.w	r0, #4294967295
 800fb28:	e78e      	b.n	800fa48 <__sflush_r+0x1c>
 800fb2a:	4407      	add	r7, r0
 800fb2c:	eba8 0800 	sub.w	r8, r8, r0
 800fb30:	e7e9      	b.n	800fb06 <__sflush_r+0xda>
 800fb32:	bf00      	nop
 800fb34:	dfbffffe 	.word	0xdfbffffe

0800fb38 <_fflush_r>:
 800fb38:	b538      	push	{r3, r4, r5, lr}
 800fb3a:	690b      	ldr	r3, [r1, #16]
 800fb3c:	4605      	mov	r5, r0
 800fb3e:	460c      	mov	r4, r1
 800fb40:	b913      	cbnz	r3, 800fb48 <_fflush_r+0x10>
 800fb42:	2500      	movs	r5, #0
 800fb44:	4628      	mov	r0, r5
 800fb46:	bd38      	pop	{r3, r4, r5, pc}
 800fb48:	b118      	cbz	r0, 800fb52 <_fflush_r+0x1a>
 800fb4a:	6a03      	ldr	r3, [r0, #32]
 800fb4c:	b90b      	cbnz	r3, 800fb52 <_fflush_r+0x1a>
 800fb4e:	f7fe f91f 	bl	800dd90 <__sinit>
 800fb52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d0f3      	beq.n	800fb42 <_fflush_r+0xa>
 800fb5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fb5c:	07d0      	lsls	r0, r2, #31
 800fb5e:	d404      	bmi.n	800fb6a <_fflush_r+0x32>
 800fb60:	0599      	lsls	r1, r3, #22
 800fb62:	d402      	bmi.n	800fb6a <_fflush_r+0x32>
 800fb64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb66:	f7fe fb14 	bl	800e192 <__retarget_lock_acquire_recursive>
 800fb6a:	4628      	mov	r0, r5
 800fb6c:	4621      	mov	r1, r4
 800fb6e:	f7ff ff5d 	bl	800fa2c <__sflush_r>
 800fb72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fb74:	07da      	lsls	r2, r3, #31
 800fb76:	4605      	mov	r5, r0
 800fb78:	d4e4      	bmi.n	800fb44 <_fflush_r+0xc>
 800fb7a:	89a3      	ldrh	r3, [r4, #12]
 800fb7c:	059b      	lsls	r3, r3, #22
 800fb7e:	d4e1      	bmi.n	800fb44 <_fflush_r+0xc>
 800fb80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fb82:	f7fe fb07 	bl	800e194 <__retarget_lock_release_recursive>
 800fb86:	e7dd      	b.n	800fb44 <_fflush_r+0xc>

0800fb88 <__swhatbuf_r>:
 800fb88:	b570      	push	{r4, r5, r6, lr}
 800fb8a:	460c      	mov	r4, r1
 800fb8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb90:	2900      	cmp	r1, #0
 800fb92:	b096      	sub	sp, #88	; 0x58
 800fb94:	4615      	mov	r5, r2
 800fb96:	461e      	mov	r6, r3
 800fb98:	da0d      	bge.n	800fbb6 <__swhatbuf_r+0x2e>
 800fb9a:	89a3      	ldrh	r3, [r4, #12]
 800fb9c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800fba0:	f04f 0100 	mov.w	r1, #0
 800fba4:	bf0c      	ite	eq
 800fba6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800fbaa:	2340      	movne	r3, #64	; 0x40
 800fbac:	2000      	movs	r0, #0
 800fbae:	6031      	str	r1, [r6, #0]
 800fbb0:	602b      	str	r3, [r5, #0]
 800fbb2:	b016      	add	sp, #88	; 0x58
 800fbb4:	bd70      	pop	{r4, r5, r6, pc}
 800fbb6:	466a      	mov	r2, sp
 800fbb8:	f000 f87c 	bl	800fcb4 <_fstat_r>
 800fbbc:	2800      	cmp	r0, #0
 800fbbe:	dbec      	blt.n	800fb9a <__swhatbuf_r+0x12>
 800fbc0:	9901      	ldr	r1, [sp, #4]
 800fbc2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800fbc6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800fbca:	4259      	negs	r1, r3
 800fbcc:	4159      	adcs	r1, r3
 800fbce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fbd2:	e7eb      	b.n	800fbac <__swhatbuf_r+0x24>

0800fbd4 <__smakebuf_r>:
 800fbd4:	898b      	ldrh	r3, [r1, #12]
 800fbd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fbd8:	079d      	lsls	r5, r3, #30
 800fbda:	4606      	mov	r6, r0
 800fbdc:	460c      	mov	r4, r1
 800fbde:	d507      	bpl.n	800fbf0 <__smakebuf_r+0x1c>
 800fbe0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fbe4:	6023      	str	r3, [r4, #0]
 800fbe6:	6123      	str	r3, [r4, #16]
 800fbe8:	2301      	movs	r3, #1
 800fbea:	6163      	str	r3, [r4, #20]
 800fbec:	b002      	add	sp, #8
 800fbee:	bd70      	pop	{r4, r5, r6, pc}
 800fbf0:	ab01      	add	r3, sp, #4
 800fbf2:	466a      	mov	r2, sp
 800fbf4:	f7ff ffc8 	bl	800fb88 <__swhatbuf_r>
 800fbf8:	9900      	ldr	r1, [sp, #0]
 800fbfa:	4605      	mov	r5, r0
 800fbfc:	4630      	mov	r0, r6
 800fbfe:	f7ff f9c9 	bl	800ef94 <_malloc_r>
 800fc02:	b948      	cbnz	r0, 800fc18 <__smakebuf_r+0x44>
 800fc04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc08:	059a      	lsls	r2, r3, #22
 800fc0a:	d4ef      	bmi.n	800fbec <__smakebuf_r+0x18>
 800fc0c:	f023 0303 	bic.w	r3, r3, #3
 800fc10:	f043 0302 	orr.w	r3, r3, #2
 800fc14:	81a3      	strh	r3, [r4, #12]
 800fc16:	e7e3      	b.n	800fbe0 <__smakebuf_r+0xc>
 800fc18:	89a3      	ldrh	r3, [r4, #12]
 800fc1a:	6020      	str	r0, [r4, #0]
 800fc1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc20:	81a3      	strh	r3, [r4, #12]
 800fc22:	9b00      	ldr	r3, [sp, #0]
 800fc24:	6163      	str	r3, [r4, #20]
 800fc26:	9b01      	ldr	r3, [sp, #4]
 800fc28:	6120      	str	r0, [r4, #16]
 800fc2a:	b15b      	cbz	r3, 800fc44 <__smakebuf_r+0x70>
 800fc2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc30:	4630      	mov	r0, r6
 800fc32:	f000 f851 	bl	800fcd8 <_isatty_r>
 800fc36:	b128      	cbz	r0, 800fc44 <__smakebuf_r+0x70>
 800fc38:	89a3      	ldrh	r3, [r4, #12]
 800fc3a:	f023 0303 	bic.w	r3, r3, #3
 800fc3e:	f043 0301 	orr.w	r3, r3, #1
 800fc42:	81a3      	strh	r3, [r4, #12]
 800fc44:	89a3      	ldrh	r3, [r4, #12]
 800fc46:	431d      	orrs	r5, r3
 800fc48:	81a5      	strh	r5, [r4, #12]
 800fc4a:	e7cf      	b.n	800fbec <__smakebuf_r+0x18>

0800fc4c <_putc_r>:
 800fc4c:	b570      	push	{r4, r5, r6, lr}
 800fc4e:	460d      	mov	r5, r1
 800fc50:	4614      	mov	r4, r2
 800fc52:	4606      	mov	r6, r0
 800fc54:	b118      	cbz	r0, 800fc5e <_putc_r+0x12>
 800fc56:	6a03      	ldr	r3, [r0, #32]
 800fc58:	b90b      	cbnz	r3, 800fc5e <_putc_r+0x12>
 800fc5a:	f7fe f899 	bl	800dd90 <__sinit>
 800fc5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc60:	07d8      	lsls	r0, r3, #31
 800fc62:	d405      	bmi.n	800fc70 <_putc_r+0x24>
 800fc64:	89a3      	ldrh	r3, [r4, #12]
 800fc66:	0599      	lsls	r1, r3, #22
 800fc68:	d402      	bmi.n	800fc70 <_putc_r+0x24>
 800fc6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc6c:	f7fe fa91 	bl	800e192 <__retarget_lock_acquire_recursive>
 800fc70:	68a3      	ldr	r3, [r4, #8]
 800fc72:	3b01      	subs	r3, #1
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	60a3      	str	r3, [r4, #8]
 800fc78:	da05      	bge.n	800fc86 <_putc_r+0x3a>
 800fc7a:	69a2      	ldr	r2, [r4, #24]
 800fc7c:	4293      	cmp	r3, r2
 800fc7e:	db12      	blt.n	800fca6 <_putc_r+0x5a>
 800fc80:	b2eb      	uxtb	r3, r5
 800fc82:	2b0a      	cmp	r3, #10
 800fc84:	d00f      	beq.n	800fca6 <_putc_r+0x5a>
 800fc86:	6823      	ldr	r3, [r4, #0]
 800fc88:	1c5a      	adds	r2, r3, #1
 800fc8a:	6022      	str	r2, [r4, #0]
 800fc8c:	701d      	strb	r5, [r3, #0]
 800fc8e:	b2ed      	uxtb	r5, r5
 800fc90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fc92:	07da      	lsls	r2, r3, #31
 800fc94:	d405      	bmi.n	800fca2 <_putc_r+0x56>
 800fc96:	89a3      	ldrh	r3, [r4, #12]
 800fc98:	059b      	lsls	r3, r3, #22
 800fc9a:	d402      	bmi.n	800fca2 <_putc_r+0x56>
 800fc9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc9e:	f7fe fa79 	bl	800e194 <__retarget_lock_release_recursive>
 800fca2:	4628      	mov	r0, r5
 800fca4:	bd70      	pop	{r4, r5, r6, pc}
 800fca6:	4629      	mov	r1, r5
 800fca8:	4622      	mov	r2, r4
 800fcaa:	4630      	mov	r0, r6
 800fcac:	f7fe f95f 	bl	800df6e <__swbuf_r>
 800fcb0:	4605      	mov	r5, r0
 800fcb2:	e7ed      	b.n	800fc90 <_putc_r+0x44>

0800fcb4 <_fstat_r>:
 800fcb4:	b538      	push	{r3, r4, r5, lr}
 800fcb6:	4d07      	ldr	r5, [pc, #28]	; (800fcd4 <_fstat_r+0x20>)
 800fcb8:	2300      	movs	r3, #0
 800fcba:	4604      	mov	r4, r0
 800fcbc:	4608      	mov	r0, r1
 800fcbe:	4611      	mov	r1, r2
 800fcc0:	602b      	str	r3, [r5, #0]
 800fcc2:	f7f3 faef 	bl	80032a4 <_fstat>
 800fcc6:	1c43      	adds	r3, r0, #1
 800fcc8:	d102      	bne.n	800fcd0 <_fstat_r+0x1c>
 800fcca:	682b      	ldr	r3, [r5, #0]
 800fccc:	b103      	cbz	r3, 800fcd0 <_fstat_r+0x1c>
 800fcce:	6023      	str	r3, [r4, #0]
 800fcd0:	bd38      	pop	{r3, r4, r5, pc}
 800fcd2:	bf00      	nop
 800fcd4:	200019b0 	.word	0x200019b0

0800fcd8 <_isatty_r>:
 800fcd8:	b538      	push	{r3, r4, r5, lr}
 800fcda:	4d06      	ldr	r5, [pc, #24]	; (800fcf4 <_isatty_r+0x1c>)
 800fcdc:	2300      	movs	r3, #0
 800fcde:	4604      	mov	r4, r0
 800fce0:	4608      	mov	r0, r1
 800fce2:	602b      	str	r3, [r5, #0]
 800fce4:	f7f3 faee 	bl	80032c4 <_isatty>
 800fce8:	1c43      	adds	r3, r0, #1
 800fcea:	d102      	bne.n	800fcf2 <_isatty_r+0x1a>
 800fcec:	682b      	ldr	r3, [r5, #0]
 800fcee:	b103      	cbz	r3, 800fcf2 <_isatty_r+0x1a>
 800fcf0:	6023      	str	r3, [r4, #0]
 800fcf2:	bd38      	pop	{r3, r4, r5, pc}
 800fcf4:	200019b0 	.word	0x200019b0

0800fcf8 <_sbrk_r>:
 800fcf8:	b538      	push	{r3, r4, r5, lr}
 800fcfa:	4d06      	ldr	r5, [pc, #24]	; (800fd14 <_sbrk_r+0x1c>)
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	4604      	mov	r4, r0
 800fd00:	4608      	mov	r0, r1
 800fd02:	602b      	str	r3, [r5, #0]
 800fd04:	f7f3 faf6 	bl	80032f4 <_sbrk>
 800fd08:	1c43      	adds	r3, r0, #1
 800fd0a:	d102      	bne.n	800fd12 <_sbrk_r+0x1a>
 800fd0c:	682b      	ldr	r3, [r5, #0]
 800fd0e:	b103      	cbz	r3, 800fd12 <_sbrk_r+0x1a>
 800fd10:	6023      	str	r3, [r4, #0]
 800fd12:	bd38      	pop	{r3, r4, r5, pc}
 800fd14:	200019b0 	.word	0x200019b0

0800fd18 <__assert_func>:
 800fd18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd1a:	4614      	mov	r4, r2
 800fd1c:	461a      	mov	r2, r3
 800fd1e:	4b09      	ldr	r3, [pc, #36]	; (800fd44 <__assert_func+0x2c>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	4605      	mov	r5, r0
 800fd24:	68d8      	ldr	r0, [r3, #12]
 800fd26:	b14c      	cbz	r4, 800fd3c <__assert_func+0x24>
 800fd28:	4b07      	ldr	r3, [pc, #28]	; (800fd48 <__assert_func+0x30>)
 800fd2a:	9100      	str	r1, [sp, #0]
 800fd2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd30:	4906      	ldr	r1, [pc, #24]	; (800fd4c <__assert_func+0x34>)
 800fd32:	462b      	mov	r3, r5
 800fd34:	f000 f844 	bl	800fdc0 <fiprintf>
 800fd38:	f000 f854 	bl	800fde4 <abort>
 800fd3c:	4b04      	ldr	r3, [pc, #16]	; (800fd50 <__assert_func+0x38>)
 800fd3e:	461c      	mov	r4, r3
 800fd40:	e7f3      	b.n	800fd2a <__assert_func+0x12>
 800fd42:	bf00      	nop
 800fd44:	200000a4 	.word	0x200000a4
 800fd48:	080117d7 	.word	0x080117d7
 800fd4c:	080117e4 	.word	0x080117e4
 800fd50:	08011812 	.word	0x08011812

0800fd54 <_calloc_r>:
 800fd54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd56:	fba1 2402 	umull	r2, r4, r1, r2
 800fd5a:	b94c      	cbnz	r4, 800fd70 <_calloc_r+0x1c>
 800fd5c:	4611      	mov	r1, r2
 800fd5e:	9201      	str	r2, [sp, #4]
 800fd60:	f7ff f918 	bl	800ef94 <_malloc_r>
 800fd64:	9a01      	ldr	r2, [sp, #4]
 800fd66:	4605      	mov	r5, r0
 800fd68:	b930      	cbnz	r0, 800fd78 <_calloc_r+0x24>
 800fd6a:	4628      	mov	r0, r5
 800fd6c:	b003      	add	sp, #12
 800fd6e:	bd30      	pop	{r4, r5, pc}
 800fd70:	220c      	movs	r2, #12
 800fd72:	6002      	str	r2, [r0, #0]
 800fd74:	2500      	movs	r5, #0
 800fd76:	e7f8      	b.n	800fd6a <_calloc_r+0x16>
 800fd78:	4621      	mov	r1, r4
 800fd7a:	f7fe f98d 	bl	800e098 <memset>
 800fd7e:	e7f4      	b.n	800fd6a <_calloc_r+0x16>

0800fd80 <__ascii_mbtowc>:
 800fd80:	b082      	sub	sp, #8
 800fd82:	b901      	cbnz	r1, 800fd86 <__ascii_mbtowc+0x6>
 800fd84:	a901      	add	r1, sp, #4
 800fd86:	b142      	cbz	r2, 800fd9a <__ascii_mbtowc+0x1a>
 800fd88:	b14b      	cbz	r3, 800fd9e <__ascii_mbtowc+0x1e>
 800fd8a:	7813      	ldrb	r3, [r2, #0]
 800fd8c:	600b      	str	r3, [r1, #0]
 800fd8e:	7812      	ldrb	r2, [r2, #0]
 800fd90:	1e10      	subs	r0, r2, #0
 800fd92:	bf18      	it	ne
 800fd94:	2001      	movne	r0, #1
 800fd96:	b002      	add	sp, #8
 800fd98:	4770      	bx	lr
 800fd9a:	4610      	mov	r0, r2
 800fd9c:	e7fb      	b.n	800fd96 <__ascii_mbtowc+0x16>
 800fd9e:	f06f 0001 	mvn.w	r0, #1
 800fda2:	e7f8      	b.n	800fd96 <__ascii_mbtowc+0x16>

0800fda4 <__ascii_wctomb>:
 800fda4:	b149      	cbz	r1, 800fdba <__ascii_wctomb+0x16>
 800fda6:	2aff      	cmp	r2, #255	; 0xff
 800fda8:	bf85      	ittet	hi
 800fdaa:	238a      	movhi	r3, #138	; 0x8a
 800fdac:	6003      	strhi	r3, [r0, #0]
 800fdae:	700a      	strbls	r2, [r1, #0]
 800fdb0:	f04f 30ff 	movhi.w	r0, #4294967295
 800fdb4:	bf98      	it	ls
 800fdb6:	2001      	movls	r0, #1
 800fdb8:	4770      	bx	lr
 800fdba:	4608      	mov	r0, r1
 800fdbc:	4770      	bx	lr
	...

0800fdc0 <fiprintf>:
 800fdc0:	b40e      	push	{r1, r2, r3}
 800fdc2:	b503      	push	{r0, r1, lr}
 800fdc4:	4601      	mov	r1, r0
 800fdc6:	ab03      	add	r3, sp, #12
 800fdc8:	4805      	ldr	r0, [pc, #20]	; (800fde0 <fiprintf+0x20>)
 800fdca:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdce:	6800      	ldr	r0, [r0, #0]
 800fdd0:	9301      	str	r3, [sp, #4]
 800fdd2:	f7ff fd11 	bl	800f7f8 <_vfiprintf_r>
 800fdd6:	b002      	add	sp, #8
 800fdd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800fddc:	b003      	add	sp, #12
 800fdde:	4770      	bx	lr
 800fde0:	200000a4 	.word	0x200000a4

0800fde4 <abort>:
 800fde4:	b508      	push	{r3, lr}
 800fde6:	2006      	movs	r0, #6
 800fde8:	f000 f82c 	bl	800fe44 <raise>
 800fdec:	2001      	movs	r0, #1
 800fdee:	f7f3 fa26 	bl	800323e <_exit>

0800fdf2 <_raise_r>:
 800fdf2:	291f      	cmp	r1, #31
 800fdf4:	b538      	push	{r3, r4, r5, lr}
 800fdf6:	4604      	mov	r4, r0
 800fdf8:	460d      	mov	r5, r1
 800fdfa:	d904      	bls.n	800fe06 <_raise_r+0x14>
 800fdfc:	2316      	movs	r3, #22
 800fdfe:	6003      	str	r3, [r0, #0]
 800fe00:	f04f 30ff 	mov.w	r0, #4294967295
 800fe04:	bd38      	pop	{r3, r4, r5, pc}
 800fe06:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800fe08:	b112      	cbz	r2, 800fe10 <_raise_r+0x1e>
 800fe0a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fe0e:	b94b      	cbnz	r3, 800fe24 <_raise_r+0x32>
 800fe10:	4620      	mov	r0, r4
 800fe12:	f000 f831 	bl	800fe78 <_getpid_r>
 800fe16:	462a      	mov	r2, r5
 800fe18:	4601      	mov	r1, r0
 800fe1a:	4620      	mov	r0, r4
 800fe1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe20:	f000 b818 	b.w	800fe54 <_kill_r>
 800fe24:	2b01      	cmp	r3, #1
 800fe26:	d00a      	beq.n	800fe3e <_raise_r+0x4c>
 800fe28:	1c59      	adds	r1, r3, #1
 800fe2a:	d103      	bne.n	800fe34 <_raise_r+0x42>
 800fe2c:	2316      	movs	r3, #22
 800fe2e:	6003      	str	r3, [r0, #0]
 800fe30:	2001      	movs	r0, #1
 800fe32:	e7e7      	b.n	800fe04 <_raise_r+0x12>
 800fe34:	2400      	movs	r4, #0
 800fe36:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fe3a:	4628      	mov	r0, r5
 800fe3c:	4798      	blx	r3
 800fe3e:	2000      	movs	r0, #0
 800fe40:	e7e0      	b.n	800fe04 <_raise_r+0x12>
	...

0800fe44 <raise>:
 800fe44:	4b02      	ldr	r3, [pc, #8]	; (800fe50 <raise+0xc>)
 800fe46:	4601      	mov	r1, r0
 800fe48:	6818      	ldr	r0, [r3, #0]
 800fe4a:	f7ff bfd2 	b.w	800fdf2 <_raise_r>
 800fe4e:	bf00      	nop
 800fe50:	200000a4 	.word	0x200000a4

0800fe54 <_kill_r>:
 800fe54:	b538      	push	{r3, r4, r5, lr}
 800fe56:	4d07      	ldr	r5, [pc, #28]	; (800fe74 <_kill_r+0x20>)
 800fe58:	2300      	movs	r3, #0
 800fe5a:	4604      	mov	r4, r0
 800fe5c:	4608      	mov	r0, r1
 800fe5e:	4611      	mov	r1, r2
 800fe60:	602b      	str	r3, [r5, #0]
 800fe62:	f7f3 f9dc 	bl	800321e <_kill>
 800fe66:	1c43      	adds	r3, r0, #1
 800fe68:	d102      	bne.n	800fe70 <_kill_r+0x1c>
 800fe6a:	682b      	ldr	r3, [r5, #0]
 800fe6c:	b103      	cbz	r3, 800fe70 <_kill_r+0x1c>
 800fe6e:	6023      	str	r3, [r4, #0]
 800fe70:	bd38      	pop	{r3, r4, r5, pc}
 800fe72:	bf00      	nop
 800fe74:	200019b0 	.word	0x200019b0

0800fe78 <_getpid_r>:
 800fe78:	f7f3 b9c9 	b.w	800320e <_getpid>

0800fe7c <_init>:
 800fe7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe7e:	bf00      	nop
 800fe80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe82:	bc08      	pop	{r3}
 800fe84:	469e      	mov	lr, r3
 800fe86:	4770      	bx	lr

0800fe88 <_fini>:
 800fe88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe8a:	bf00      	nop
 800fe8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe8e:	bc08      	pop	{r3}
 800fe90:	469e      	mov	lr, r3
 800fe92:	4770      	bx	lr
