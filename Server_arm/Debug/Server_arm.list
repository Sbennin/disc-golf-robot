
Server_arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f898  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001764  0800f9d8  0800f9d8  0001f9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801113c  0801113c  0002113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011144  08011144  00021144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011148  08011148  00021148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  20000008  0801114c  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000025  200000a8  080111ec  000300a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000d0  08011211  000300d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001808  200000e4  08011222  000300e4  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  200018ec  08011222  000318ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00040000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08011222  000301e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .comment      00000043  00000000  00000000  00030a97  2**0
                  CONTENTS, READONLY
 16 .debug_info   00035034  00000000  00000000  00030ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00007203  00000000  00000000  00065b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000030e0  00000000  00000000  0006cd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 000025b0  00000000  00000000  0006fdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002e680  00000000  00000000  000723a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0003810b  00000000  00000000  000a0a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0010517f  00000000  00000000  000d8b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000d688  00000000  00000000  001ddcb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000007e  00000000  00000000  001eb33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000e4 	.word	0x200000e4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800f9c0 	.word	0x0800f9c0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000e8 	.word	0x200000e8
 800017c:	0800f9c0 	.word	0x0800f9c0

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__aeabi_d2uiz>:
 80009ec:	004a      	lsls	r2, r1, #1
 80009ee:	d211      	bcs.n	8000a14 <__aeabi_d2uiz+0x28>
 80009f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009f4:	d211      	bcs.n	8000a1a <__aeabi_d2uiz+0x2e>
 80009f6:	d50d      	bpl.n	8000a14 <__aeabi_d2uiz+0x28>
 80009f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a00:	d40e      	bmi.n	8000a20 <__aeabi_d2uiz+0x34>
 8000a02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a12:	4770      	bx	lr
 8000a14:	f04f 0000 	mov.w	r0, #0
 8000a18:	4770      	bx	lr
 8000a1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a1e:	d102      	bne.n	8000a26 <__aeabi_d2uiz+0x3a>
 8000a20:	f04f 30ff 	mov.w	r0, #4294967295
 8000a24:	4770      	bx	lr
 8000a26:	f04f 0000 	mov.w	r0, #0
 8000a2a:	4770      	bx	lr

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a40:	f000 b970 	b.w	8000d24 <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f000 f806 	bl	8000a5c <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__udivmoddi4>:
 8000a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a60:	9e08      	ldr	r6, [sp, #32]
 8000a62:	460d      	mov	r5, r1
 8000a64:	4604      	mov	r4, r0
 8000a66:	460f      	mov	r7, r1
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d14a      	bne.n	8000b02 <__udivmoddi4+0xa6>
 8000a6c:	428a      	cmp	r2, r1
 8000a6e:	4694      	mov	ip, r2
 8000a70:	d965      	bls.n	8000b3e <__udivmoddi4+0xe2>
 8000a72:	fab2 f382 	clz	r3, r2
 8000a76:	b143      	cbz	r3, 8000a8a <__udivmoddi4+0x2e>
 8000a78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a7c:	f1c3 0220 	rsb	r2, r3, #32
 8000a80:	409f      	lsls	r7, r3
 8000a82:	fa20 f202 	lsr.w	r2, r0, r2
 8000a86:	4317      	orrs	r7, r2
 8000a88:	409c      	lsls	r4, r3
 8000a8a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a8e:	fa1f f58c 	uxth.w	r5, ip
 8000a92:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a96:	0c22      	lsrs	r2, r4, #16
 8000a98:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a9c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000aa0:	fb01 f005 	mul.w	r0, r1, r5
 8000aa4:	4290      	cmp	r0, r2
 8000aa6:	d90a      	bls.n	8000abe <__udivmoddi4+0x62>
 8000aa8:	eb1c 0202 	adds.w	r2, ip, r2
 8000aac:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ab0:	f080 811c 	bcs.w	8000cec <__udivmoddi4+0x290>
 8000ab4:	4290      	cmp	r0, r2
 8000ab6:	f240 8119 	bls.w	8000cec <__udivmoddi4+0x290>
 8000aba:	3902      	subs	r1, #2
 8000abc:	4462      	add	r2, ip
 8000abe:	1a12      	subs	r2, r2, r0
 8000ac0:	b2a4      	uxth	r4, r4
 8000ac2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ac6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ace:	fb00 f505 	mul.w	r5, r0, r5
 8000ad2:	42a5      	cmp	r5, r4
 8000ad4:	d90a      	bls.n	8000aec <__udivmoddi4+0x90>
 8000ad6:	eb1c 0404 	adds.w	r4, ip, r4
 8000ada:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ade:	f080 8107 	bcs.w	8000cf0 <__udivmoddi4+0x294>
 8000ae2:	42a5      	cmp	r5, r4
 8000ae4:	f240 8104 	bls.w	8000cf0 <__udivmoddi4+0x294>
 8000ae8:	4464      	add	r4, ip
 8000aea:	3802      	subs	r0, #2
 8000aec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000af0:	1b64      	subs	r4, r4, r5
 8000af2:	2100      	movs	r1, #0
 8000af4:	b11e      	cbz	r6, 8000afe <__udivmoddi4+0xa2>
 8000af6:	40dc      	lsrs	r4, r3
 8000af8:	2300      	movs	r3, #0
 8000afa:	e9c6 4300 	strd	r4, r3, [r6]
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0xbc>
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	f000 80ed 	beq.w	8000ce6 <__udivmoddi4+0x28a>
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b12:	4608      	mov	r0, r1
 8000b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b18:	fab3 f183 	clz	r1, r3
 8000b1c:	2900      	cmp	r1, #0
 8000b1e:	d149      	bne.n	8000bb4 <__udivmoddi4+0x158>
 8000b20:	42ab      	cmp	r3, r5
 8000b22:	d302      	bcc.n	8000b2a <__udivmoddi4+0xce>
 8000b24:	4282      	cmp	r2, r0
 8000b26:	f200 80f8 	bhi.w	8000d1a <__udivmoddi4+0x2be>
 8000b2a:	1a84      	subs	r4, r0, r2
 8000b2c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b30:	2001      	movs	r0, #1
 8000b32:	4617      	mov	r7, r2
 8000b34:	2e00      	cmp	r6, #0
 8000b36:	d0e2      	beq.n	8000afe <__udivmoddi4+0xa2>
 8000b38:	e9c6 4700 	strd	r4, r7, [r6]
 8000b3c:	e7df      	b.n	8000afe <__udivmoddi4+0xa2>
 8000b3e:	b902      	cbnz	r2, 8000b42 <__udivmoddi4+0xe6>
 8000b40:	deff      	udf	#255	; 0xff
 8000b42:	fab2 f382 	clz	r3, r2
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f040 8090 	bne.w	8000c6c <__udivmoddi4+0x210>
 8000b4c:	1a8a      	subs	r2, r1, r2
 8000b4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b52:	fa1f fe8c 	uxth.w	lr, ip
 8000b56:	2101      	movs	r1, #1
 8000b58:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b5c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b60:	0c22      	lsrs	r2, r4, #16
 8000b62:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b66:	fb0e f005 	mul.w	r0, lr, r5
 8000b6a:	4290      	cmp	r0, r2
 8000b6c:	d908      	bls.n	8000b80 <__udivmoddi4+0x124>
 8000b6e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b72:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x122>
 8000b78:	4290      	cmp	r0, r2
 8000b7a:	f200 80cb 	bhi.w	8000d14 <__udivmoddi4+0x2b8>
 8000b7e:	4645      	mov	r5, r8
 8000b80:	1a12      	subs	r2, r2, r0
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b88:	fb07 2210 	mls	r2, r7, r0, r2
 8000b8c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b90:	fb0e fe00 	mul.w	lr, lr, r0
 8000b94:	45a6      	cmp	lr, r4
 8000b96:	d908      	bls.n	8000baa <__udivmoddi4+0x14e>
 8000b98:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ba0:	d202      	bcs.n	8000ba8 <__udivmoddi4+0x14c>
 8000ba2:	45a6      	cmp	lr, r4
 8000ba4:	f200 80bb 	bhi.w	8000d1e <__udivmoddi4+0x2c2>
 8000ba8:	4610      	mov	r0, r2
 8000baa:	eba4 040e 	sub.w	r4, r4, lr
 8000bae:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bb2:	e79f      	b.n	8000af4 <__udivmoddi4+0x98>
 8000bb4:	f1c1 0720 	rsb	r7, r1, #32
 8000bb8:	408b      	lsls	r3, r1
 8000bba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bbe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bc2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bc6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bca:	40fd      	lsrs	r5, r7
 8000bcc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bd0:	4323      	orrs	r3, r4
 8000bd2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bd6:	fa1f fe8c 	uxth.w	lr, ip
 8000bda:	fb09 5518 	mls	r5, r9, r8, r5
 8000bde:	0c1c      	lsrs	r4, r3, #16
 8000be0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000be4:	fb08 f50e 	mul.w	r5, r8, lr
 8000be8:	42a5      	cmp	r5, r4
 8000bea:	fa02 f201 	lsl.w	r2, r2, r1
 8000bee:	fa00 f001 	lsl.w	r0, r0, r1
 8000bf2:	d90b      	bls.n	8000c0c <__udivmoddi4+0x1b0>
 8000bf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bfc:	f080 8088 	bcs.w	8000d10 <__udivmoddi4+0x2b4>
 8000c00:	42a5      	cmp	r5, r4
 8000c02:	f240 8085 	bls.w	8000d10 <__udivmoddi4+0x2b4>
 8000c06:	f1a8 0802 	sub.w	r8, r8, #2
 8000c0a:	4464      	add	r4, ip
 8000c0c:	1b64      	subs	r4, r4, r5
 8000c0e:	b29d      	uxth	r5, r3
 8000c10:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c14:	fb09 4413 	mls	r4, r9, r3, r4
 8000c18:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c1c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	d908      	bls.n	8000c36 <__udivmoddi4+0x1da>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c2c:	d26c      	bcs.n	8000d08 <__udivmoddi4+0x2ac>
 8000c2e:	45a6      	cmp	lr, r4
 8000c30:	d96a      	bls.n	8000d08 <__udivmoddi4+0x2ac>
 8000c32:	3b02      	subs	r3, #2
 8000c34:	4464      	add	r4, ip
 8000c36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c3e:	eba4 040e 	sub.w	r4, r4, lr
 8000c42:	42ac      	cmp	r4, r5
 8000c44:	46c8      	mov	r8, r9
 8000c46:	46ae      	mov	lr, r5
 8000c48:	d356      	bcc.n	8000cf8 <__udivmoddi4+0x29c>
 8000c4a:	d053      	beq.n	8000cf4 <__udivmoddi4+0x298>
 8000c4c:	b156      	cbz	r6, 8000c64 <__udivmoddi4+0x208>
 8000c4e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c52:	eb64 040e 	sbc.w	r4, r4, lr
 8000c56:	fa04 f707 	lsl.w	r7, r4, r7
 8000c5a:	40ca      	lsrs	r2, r1
 8000c5c:	40cc      	lsrs	r4, r1
 8000c5e:	4317      	orrs	r7, r2
 8000c60:	e9c6 7400 	strd	r7, r4, [r6]
 8000c64:	4618      	mov	r0, r3
 8000c66:	2100      	movs	r1, #0
 8000c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6c:	f1c3 0120 	rsb	r1, r3, #32
 8000c70:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c74:	fa20 f201 	lsr.w	r2, r0, r1
 8000c78:	fa25 f101 	lsr.w	r1, r5, r1
 8000c7c:	409d      	lsls	r5, r3
 8000c7e:	432a      	orrs	r2, r5
 8000c80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c84:	fa1f fe8c 	uxth.w	lr, ip
 8000c88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c8c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c90:	0c11      	lsrs	r1, r2, #16
 8000c92:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c96:	fb00 f50e 	mul.w	r5, r0, lr
 8000c9a:	428d      	cmp	r5, r1
 8000c9c:	fa04 f403 	lsl.w	r4, r4, r3
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x258>
 8000ca2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000caa:	d22f      	bcs.n	8000d0c <__udivmoddi4+0x2b0>
 8000cac:	428d      	cmp	r5, r1
 8000cae:	d92d      	bls.n	8000d0c <__udivmoddi4+0x2b0>
 8000cb0:	3802      	subs	r0, #2
 8000cb2:	4461      	add	r1, ip
 8000cb4:	1b49      	subs	r1, r1, r5
 8000cb6:	b292      	uxth	r2, r2
 8000cb8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cbc:	fb07 1115 	mls	r1, r7, r5, r1
 8000cc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cc4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cc8:	4291      	cmp	r1, r2
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x282>
 8000ccc:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cd4:	d216      	bcs.n	8000d04 <__udivmoddi4+0x2a8>
 8000cd6:	4291      	cmp	r1, r2
 8000cd8:	d914      	bls.n	8000d04 <__udivmoddi4+0x2a8>
 8000cda:	3d02      	subs	r5, #2
 8000cdc:	4462      	add	r2, ip
 8000cde:	1a52      	subs	r2, r2, r1
 8000ce0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ce4:	e738      	b.n	8000b58 <__udivmoddi4+0xfc>
 8000ce6:	4631      	mov	r1, r6
 8000ce8:	4630      	mov	r0, r6
 8000cea:	e708      	b.n	8000afe <__udivmoddi4+0xa2>
 8000cec:	4639      	mov	r1, r7
 8000cee:	e6e6      	b.n	8000abe <__udivmoddi4+0x62>
 8000cf0:	4610      	mov	r0, r2
 8000cf2:	e6fb      	b.n	8000aec <__udivmoddi4+0x90>
 8000cf4:	4548      	cmp	r0, r9
 8000cf6:	d2a9      	bcs.n	8000c4c <__udivmoddi4+0x1f0>
 8000cf8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cfc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d00:	3b01      	subs	r3, #1
 8000d02:	e7a3      	b.n	8000c4c <__udivmoddi4+0x1f0>
 8000d04:	4645      	mov	r5, r8
 8000d06:	e7ea      	b.n	8000cde <__udivmoddi4+0x282>
 8000d08:	462b      	mov	r3, r5
 8000d0a:	e794      	b.n	8000c36 <__udivmoddi4+0x1da>
 8000d0c:	4640      	mov	r0, r8
 8000d0e:	e7d1      	b.n	8000cb4 <__udivmoddi4+0x258>
 8000d10:	46d0      	mov	r8, sl
 8000d12:	e77b      	b.n	8000c0c <__udivmoddi4+0x1b0>
 8000d14:	3d02      	subs	r5, #2
 8000d16:	4462      	add	r2, ip
 8000d18:	e732      	b.n	8000b80 <__udivmoddi4+0x124>
 8000d1a:	4608      	mov	r0, r1
 8000d1c:	e70a      	b.n	8000b34 <__udivmoddi4+0xd8>
 8000d1e:	4464      	add	r4, ip
 8000d20:	3802      	subs	r0, #2
 8000d22:	e742      	b.n	8000baa <__udivmoddi4+0x14e>

08000d24 <__aeabi_idiv0>:
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop

08000d28 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <LL_EXTI_EnableIT_32_63+0x24>)
 8000d32:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000d36:	4905      	ldr	r1, [pc, #20]	; (8000d4c <LL_EXTI_EnableIT_32_63+0x24>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	58000800 	.word	0x58000800

08000d50 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4013      	ands	r3, r2
 8000d72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d74:	68fb      	ldr	r3, [r7, #12]
}
 8000d76:	bf00      	nop
 8000d78:	3714      	adds	r7, #20
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b085      	sub	sp, #20
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d8e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000d92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000da2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4013      	ands	r3, r2
 8000daa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dac:	68fb      	ldr	r3, [r7, #12]
}
 8000dae:	bf00      	nop
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000dbe:	f002 ff6d 	bl	8003c9c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000dc2:	f002 ff71 	bl	8003ca8 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000dc6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000dca:	f7ff ffad 	bl	8000d28 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000dce:	f00b fb53 	bl	800c478 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000dd2:	f000 f821 	bl	8000e18 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000dd6:	f000 f8c1 	bl	8000f5c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000dda:	bf00      	nop
}
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <APPD_EnableCPU2+0x34>)
 8000de8:	1d3c      	adds	r4, r7, #4
 8000dea:	461d      	mov	r5, r3
 8000dec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000df4:	c403      	stmia	r4!, {r0, r1}
 8000df6:	8022      	strh	r2, [r4, #0]
 8000df8:	3402      	adds	r4, #2
 8000dfa:	0c13      	lsrs	r3, r2, #16
 8000dfc:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000dfe:	f00b fa77 	bl	800c2f0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	4618      	mov	r0, r3
 8000e06:	f00a fd08 	bl	800b81a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000e0a:	bf00      	nop
}
 8000e0c:	3720      	adds	r7, #32
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bdb0      	pop	{r4, r5, r7, pc}
 8000e12:	bf00      	nop
 8000e14:	0800f9d8 	.word	0x0800f9d8

08000e18 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000e38:	2300      	movs	r3, #0
 8000e3a:	77fb      	strb	r3, [r7, #31]
 8000e3c:	e036      	b.n	8000eac <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000e3e:	7ffb      	ldrb	r3, [r7, #31]
 8000e40:	4a43      	ldr	r2, [pc, #268]	; (8000f50 <APPD_SetCPU2GpioConfig+0x138>)
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	4413      	add	r3, r2
 8000e46:	799b      	ldrb	r3, [r3, #6]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d02c      	beq.n	8000ea6 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000e4c:	7ffb      	ldrb	r3, [r7, #31]
 8000e4e:	4a40      	ldr	r2, [pc, #256]	; (8000f50 <APPD_SetCPU2GpioConfig+0x138>)
 8000e50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000e54:	4a3f      	ldr	r2, [pc, #252]	; (8000f54 <APPD_SetCPU2GpioConfig+0x13c>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d01b      	beq.n	8000e92 <APPD_SetCPU2GpioConfig+0x7a>
 8000e5a:	4a3e      	ldr	r2, [pc, #248]	; (8000f54 <APPD_SetCPU2GpioConfig+0x13c>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d821      	bhi.n	8000ea4 <APPD_SetCPU2GpioConfig+0x8c>
 8000e60:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e64:	d003      	beq.n	8000e6e <APPD_SetCPU2GpioConfig+0x56>
 8000e66:	4a3c      	ldr	r2, [pc, #240]	; (8000f58 <APPD_SetCPU2GpioConfig+0x140>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d009      	beq.n	8000e80 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000e6c:	e01a      	b.n	8000ea4 <APPD_SetCPU2GpioConfig+0x8c>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000e6e:	7ffb      	ldrb	r3, [r7, #31]
 8000e70:	4a37      	ldr	r2, [pc, #220]	; (8000f50 <APPD_SetCPU2GpioConfig+0x138>)
 8000e72:	00db      	lsls	r3, r3, #3
 8000e74:	4413      	add	r3, r2
 8000e76:	889a      	ldrh	r2, [r3, #4]
 8000e78:	8bbb      	ldrh	r3, [r7, #28]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	83bb      	strh	r3, [r7, #28]
          break;
 8000e7e:	e012      	b.n	8000ea6 <APPD_SetCPU2GpioConfig+0x8e>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000e80:	7ffb      	ldrb	r3, [r7, #31]
 8000e82:	4a33      	ldr	r2, [pc, #204]	; (8000f50 <APPD_SetCPU2GpioConfig+0x138>)
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	4413      	add	r3, r2
 8000e88:	889a      	ldrh	r2, [r3, #4]
 8000e8a:	8b7b      	ldrh	r3, [r7, #26]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	837b      	strh	r3, [r7, #26]
          break;
 8000e90:	e009      	b.n	8000ea6 <APPD_SetCPU2GpioConfig+0x8e>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000e92:	7ffb      	ldrb	r3, [r7, #31]
 8000e94:	4a2e      	ldr	r2, [pc, #184]	; (8000f50 <APPD_SetCPU2GpioConfig+0x138>)
 8000e96:	00db      	lsls	r3, r3, #3
 8000e98:	4413      	add	r3, r2
 8000e9a:	889a      	ldrh	r2, [r3, #4]
 8000e9c:	8b3b      	ldrh	r3, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	833b      	strh	r3, [r7, #24]
          break;
 8000ea2:	e000      	b.n	8000ea6 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000ea4:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000ea6:	7ffb      	ldrb	r3, [r7, #31]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	77fb      	strb	r3, [r7, #31]
 8000eac:	7ffb      	ldrb	r3, [r7, #31]
 8000eae:	2b25      	cmp	r3, #37	; 0x25
 8000eb0:	d9c5      	bls.n	8000e3e <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000ebe:	8bbb      	ldrh	r3, [r7, #28]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d014      	beq.n	8000eee <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000ec4:	8bbb      	ldrh	r3, [r7, #28]
 8000ec6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f7ff ff41 	bl	8000d50 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f7ff ff57 	bl	8000d82 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000edc:	f003 fc18 	bl	8004710 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000ee0:	8bbb      	ldrh	r3, [r7, #28]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eea:	f003 fd81 	bl	80049f0 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000eee:	8b7b      	ldrh	r3, [r7, #26]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d012      	beq.n	8000f1a <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000ef4:	8b7b      	ldrh	r3, [r7, #26]
 8000ef6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef8:	2002      	movs	r0, #2
 8000efa:	f7ff ff29 	bl	8000d50 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000efe:	2002      	movs	r0, #2
 8000f00:	f7ff ff3f 	bl	8000d82 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	4619      	mov	r1, r3
 8000f08:	4813      	ldr	r0, [pc, #76]	; (8000f58 <APPD_SetCPU2GpioConfig+0x140>)
 8000f0a:	f003 fc01 	bl	8004710 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000f0e:	8b7b      	ldrh	r3, [r7, #26]
 8000f10:	2200      	movs	r2, #0
 8000f12:	4619      	mov	r1, r3
 8000f14:	4810      	ldr	r0, [pc, #64]	; (8000f58 <APPD_SetCPU2GpioConfig+0x140>)
 8000f16:	f003 fd6b 	bl	80049f0 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000f1a:	8b3b      	ldrh	r3, [r7, #24]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d013      	beq.n	8000f48 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000f20:	8b3b      	ldrh	r3, [r7, #24]
 8000f22:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f24:	2004      	movs	r0, #4
 8000f26:	f7ff ff13 	bl	8000d50 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000f2a:	2004      	movs	r0, #4
 8000f2c:	f7ff ff29 	bl	8000d82 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	4619      	mov	r1, r3
 8000f34:	4807      	ldr	r0, [pc, #28]	; (8000f54 <APPD_SetCPU2GpioConfig+0x13c>)
 8000f36:	f003 fbeb 	bl	8004710 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000f3a:	8b3b      	ldrh	r3, [r7, #24]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4804      	ldr	r0, [pc, #16]	; (8000f54 <APPD_SetCPU2GpioConfig+0x13c>)
 8000f42:	f003 fd55 	bl	80049f0 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000f46:	bf00      	nop
 8000f48:	bf00      	nop
}
 8000f4a:	3720      	adds	r7, #32
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	08010ebc 	.word	0x08010ebc
 8000f54:	48000800 	.word	0x48000800
 8000f58:	48000400 	.word	0x48000400

08000f5c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000f60:	bf00      	nop
}
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	af00      	add	r7, sp, #0
#endif
  }
  else if (CFG_DEBUG_TRACE_UART == hw_uart1)
  {
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000f6e:	f001 ff07 	bl	8002d80 <MX_USART1_UART_Init>
#endif
  }
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000f72:	bf00      	nop
}
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b084      	sub	sp, #16
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	60f8      	str	r0, [r7, #12]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000f84:	897a      	ldrh	r2, [r7, #10]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	68f9      	ldr	r1, [r7, #12]
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f001 fd44 	bl	8002a18 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000f90:	bf00      	nop
}
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000fa0:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <LL_C2_PWR_SetPowerMode+0x28>)
 8000fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fa6:	f023 0207 	bic.w	r2, r3, #7
 8000faa:	4905      	ldr	r1, [pc, #20]	; (8000fc0 <LL_C2_PWR_SetPowerMode+0x28>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	58000400 	.word	0x58000400

08000fc4 <LL_EXTI_EnableIT_32_63>:
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000fce:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000fd2:	4905      	ldr	r1, [pc, #20]	; (8000fe8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	58000800 	.word	0x58000800

08000fec <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000ffa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001002:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001006:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	021b      	lsls	r3, r3, #8
 800100e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001012:	4313      	orrs	r3, r2
 8001014:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	cafecafe 	.word	0xcafecafe

08001028 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800103a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4313      	orrs	r3, r2
 8001042:	608b      	str	r3, [r1, #8]
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800105c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800107a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800107e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800109c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80010a8:	d101      	bne.n	80010ae <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80010be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80010ce:	d101      	bne.n	80010d4 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80010d0:	2301      	movs	r3, #1
 80010d2:	e000      	b.n	80010d6 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_AHB3_GRP1_EnableClock>:
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80010e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80010f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4013      	ands	r3, r2
 8001102:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001104:	68fb      	ldr	r3, [r7, #12]
}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <LL_DBGMCU_GetDeviceID+0x18>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e0042000 	.word	0xe0042000

08001130 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <LL_DBGMCU_GetRevisionID+0x18>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	0c1b      	lsrs	r3, r3, #16
 800113a:	b29b      	uxth	r3, r3
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e0042000 	.word	0xe0042000

0800114c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	041b      	lsls	r3, r3, #16
 800115e:	431a      	orrs	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	605a      	str	r2, [r3, #4]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	431a      	orrs	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	605a      	str	r2, [r3, #4]
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	695a      	ldr	r2, [r3, #20]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	041b      	lsls	r3, r3, #16
 80011a4:	431a      	orrs	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	615a      	str	r2, [r3, #20]
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b083      	sub	sp, #12
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
 80011be:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	695a      	ldr	r2, [r3, #20]
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	431a      	orrs	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	615a      	str	r2, [r3, #20]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	609a      	str	r2, [r3, #8]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	619a      	str	r2, [r3, #24]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <LL_LPM_EnableSleep+0x1c>)
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	4a04      	ldr	r2, [pc, #16]	; (800122c <LL_LPM_EnableSleep+0x1c>)
 800121a:	f023 0304 	bic.w	r3, r3, #4
 800121e:	6113      	str	r3, [r2, #16]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	22ff      	movs	r2, #255	; 0xff
 800123c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	22ca      	movs	r2, #202	; 0xca
 8001256:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2253      	movs	r2, #83	; 0x53
 800125c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f023 0207 	bic.w	r2, r3, #7
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	431a      	orrs	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	609a      	str	r2, [r3, #8]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001294:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <MX_APPE_Config+0x18>)
 8001296:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800129a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800129c:	f000 f830 	bl	8001300 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80012a0:	f000 f870 	bl	8001384 <Config_HSE>

  return;
 80012a4:	bf00      	nop
}
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	58004000 	.word	0x58004000

080012ac <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80012b0:	f000 f87c 	bl	80013ac <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80012b4:	f000 f894 	bl	80013e0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80012b8:	4909      	ldr	r1, [pc, #36]	; (80012e0 <MX_APPE_Init+0x34>)
 80012ba:	2000      	movs	r0, #0
 80012bc:	f001 f906 	bl	80024cc <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 80012c0:	f7ff fd7b 	bl	8000dba <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80012c4:	2101      	movs	r1, #1
 80012c6:	2001      	movs	r0, #1
 80012c8:	f00d f900 	bl	800e4cc <UTIL_LPM_SetOffMode>

  Led_Init();
 80012cc:	f000 f9ea 	bl	80016a4 <Led_Init>

  Button_Init();
 80012d0:	f000 f9f8 	bl	80016c4 <Button_Init>
  
  RxUART_Init();
 80012d4:	f000 fa88 	bl	80017e8 <RxUART_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80012d8:	f000 f890 	bl	80013fc <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80012dc:	bf00      	nop
}
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200004fc 	.word	0x200004fc

080012e4 <Init_Smps>:

void Init_Smps(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80012e8:	bf00      	nop
}
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <Init_Exti>:

void Init_Exti(void)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80012f6:	2050      	movs	r0, #80	; 0x50
 80012f8:	f7ff fe64 	bl	8000fc4 <LL_EXTI_EnableIT_32_63>

  return;
 80012fc:	bf00      	nop
}
 80012fe:	bd80      	pop	{r7, pc}

08001300 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8001304:	f000 f804 	bl	8001310 <Reset_BackupDomain>

  Reset_IPCC();
 8001308:	f000 f81a 	bl	8001340 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800130c:	bf00      	nop
}
 800130e:	bd80      	pop	{r7, pc}

08001310 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001314:	f7ff febe 	bl	8001094 <LL_RCC_IsActiveFlag_PINRST>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00d      	beq.n	800133a <Reset_BackupDomain+0x2a>
 800131e:	f7ff fecc 	bl	80010ba <LL_RCC_IsActiveFlag_SFTRST>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d108      	bne.n	800133a <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001328:	f003 fc3c 	bl	8004ba4 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800132c:	f003 fc3a 	bl	8004ba4 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001330:	f7ff fe8e 	bl	8001050 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001334:	f7ff fe9d 	bl	8001072 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001338:	bf00      	nop
 800133a:	bf00      	nop
}
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001344:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001348:	f7ff feca 	bl	80010e0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 800134c:	213f      	movs	r1, #63	; 0x3f
 800134e:	480c      	ldr	r0, [pc, #48]	; (8001380 <Reset_IPCC+0x40>)
 8001350:	f7ff ff42 	bl	80011d8 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001354:	213f      	movs	r1, #63	; 0x3f
 8001356:	480a      	ldr	r0, [pc, #40]	; (8001380 <Reset_IPCC+0x40>)
 8001358:	f7ff ff4c 	bl	80011f4 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 800135c:	213f      	movs	r1, #63	; 0x3f
 800135e:	4808      	ldr	r0, [pc, #32]	; (8001380 <Reset_IPCC+0x40>)
 8001360:	f7ff fef4 	bl	800114c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001364:	213f      	movs	r1, #63	; 0x3f
 8001366:	4806      	ldr	r0, [pc, #24]	; (8001380 <Reset_IPCC+0x40>)
 8001368:	f7ff ff13 	bl	8001192 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 800136c:	213f      	movs	r1, #63	; 0x3f
 800136e:	4804      	ldr	r0, [pc, #16]	; (8001380 <Reset_IPCC+0x40>)
 8001370:	f7ff fefe 	bl	8001170 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001374:	213f      	movs	r1, #63	; 0x3f
 8001376:	4802      	ldr	r0, [pc, #8]	; (8001380 <Reset_IPCC+0x40>)
 8001378:	f7ff ff1d 	bl	80011b6 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 800137c:	bf00      	nop
}
 800137e:	bd80      	pop	{r7, pc}
 8001380:	58000c00 	.word	0x58000c00

08001384 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800138a:	2000      	movs	r0, #0
 800138c:	f00b f8f2 	bl	800c574 <OTP_Read>
 8001390:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d005      	beq.n	80013a4 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	799b      	ldrb	r3, [r3, #6]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fe25 	bl	8000fec <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80013a2:	bf00      	nop
 80013a4:	bf00      	nop
}
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <System_Init>:

static void System_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  Init_Smps();
 80013b0:	f7ff ff98 	bl	80012e4 <Init_Smps>

  Init_Exti();
 80013b4:	f7ff ff9d 	bl	80012f2 <Init_Exti>

  Init_Rtc();
 80013b8:	f000 f802 	bl	80013c0 <Init_Rtc>

  return;
 80013bc:	bf00      	nop
}
 80013be:	bd80      	pop	{r7, pc}

080013c0 <Init_Rtc>:

static void Init_Rtc(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80013c4:	4805      	ldr	r0, [pc, #20]	; (80013dc <Init_Rtc+0x1c>)
 80013c6:	f7ff ff40 	bl	800124a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80013ca:	2100      	movs	r1, #0
 80013cc:	4803      	ldr	r0, [pc, #12]	; (80013dc <Init_Rtc+0x1c>)
 80013ce:	f7ff ff4c 	bl	800126a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80013d2:	4802      	ldr	r0, [pc, #8]	; (80013dc <Init_Rtc+0x1c>)
 80013d4:	f7ff ff2c 	bl	8001230 <LL_RTC_EnableWriteProtection>

  return;
 80013d8:	bf00      	nop
}
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40002800 	.word	0x40002800

080013e0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80013e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80013e8:	f7ff fe1e 	bl	8001028 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80013ec:	f00d f85c 	bl	800e4a8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80013f0:	2004      	movs	r0, #4
 80013f2:	f7ff fdd1 	bl	8000f98 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80013f6:	bf00      	nop
}
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 8001402:	f00a fdbf 	bl	800bf84 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001406:	4a11      	ldr	r2, [pc, #68]	; (800144c <appe_Tl_Init+0x50>)
 8001408:	2100      	movs	r1, #0
 800140a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800140e:	f00d f989 	bl	800e724 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <appe_Tl_Init+0x54>)
 8001414:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <appe_Tl_Init+0x58>)
 8001418:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800141a:	463b      	mov	r3, r7
 800141c:	4619      	mov	r1, r3
 800141e:	480e      	ldr	r0, [pc, #56]	; (8001458 <appe_Tl_Init+0x5c>)
 8001420:	f00a fc72 	bl	800bd08 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001424:	4b0d      	ldr	r3, [pc, #52]	; (800145c <appe_Tl_Init+0x60>)
 8001426:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001428:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <appe_Tl_Init+0x64>)
 800142a:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800142c:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <appe_Tl_Init+0x68>)
 800142e:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001430:	f240 533c 	movw	r3, #1340	; 0x53c
 8001434:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	4618      	mov	r0, r3
 800143c:	f00a fee4 	bl	800c208 <TL_MM_Init>

  TL_Enable();
 8001440:	f00a fd9a 	bl	800bf78 <TL_Enable>

  return;
 8001444:	bf00      	nop
}
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	0800bd41 	.word	0x0800bd41
 8001450:	20030734 	.word	0x20030734
 8001454:	08001469 	.word	0x08001469
 8001458:	08001481 	.word	0x08001481
 800145c:	2003094c 	.word	0x2003094c
 8001460:	20030840 	.word	0x20030840
 8001464:	200301f8 	.word	0x200301f8

08001468 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001472:	bf00      	nop
}
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	330b      	adds	r3, #11
 800148e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	b29b      	uxth	r3, r3
 8001496:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800149a:	2b07      	cmp	r3, #7
 800149c:	d860      	bhi.n	8001560 <APPE_SysUserEvtRx+0xe0>
 800149e:	a201      	add	r2, pc, #4	; (adr r2, 80014a4 <APPE_SysUserEvtRx+0x24>)
 80014a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a4:	080014c5 	.word	0x080014c5
 80014a8:	08001507 	.word	0x08001507
 80014ac:	08001515 	.word	0x08001515
 80014b0:	08001561 	.word	0x08001561
 80014b4:	08001531 	.word	0x08001531
 80014b8:	08001541 	.word	0x08001541
 80014bc:	08001549 	.word	0x08001549
 80014c0:	08001559 	.word	0x08001559
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	4618      	mov	r0, r3
 80014ca:	f00a f9d3 	bl	800b874 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 80014ce:	7b3b      	ldrb	r3, [r7, #12]
 80014d0:	4619      	mov	r1, r3
 80014d2:	7b7b      	ldrb	r3, [r7, #13]
 80014d4:	461a      	mov	r2, r3
 80014d6:	7bbb      	ldrb	r3, [r7, #14]
 80014d8:	4824      	ldr	r0, [pc, #144]	; (800156c <APPE_SysUserEvtRx+0xec>)
 80014da:	f00d fb27 	bl	800eb2c <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 80014de:	7c3b      	ldrb	r3, [r7, #16]
 80014e0:	4619      	mov	r1, r3
 80014e2:	4823      	ldr	r0, [pc, #140]	; (8001570 <APPE_SysUserEvtRx+0xf0>)
 80014e4:	f00d fb22 	bl	800eb2c <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80014e8:	7dbb      	ldrb	r3, [r7, #22]
 80014ea:	4619      	mov	r1, r3
 80014ec:	7dfb      	ldrb	r3, [r7, #23]
 80014ee:	461a      	mov	r2, r3
 80014f0:	7e3b      	ldrb	r3, [r7, #24]
 80014f2:	4820      	ldr	r0, [pc, #128]	; (8001574 <APPE_SysUserEvtRx+0xf4>)
 80014f4:	f00d fb1a 	bl	800eb2c <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80014f8:	481f      	ldr	r0, [pc, #124]	; (8001578 <APPE_SysUserEvtRx+0xf8>)
 80014fa:	f00d fb17 	bl	800eb2c <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f870 	bl	80015e4 <APPE_SysEvtReadyProcessing>
    break;
 8001504:	e02d      	b.n	8001562 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8001506:	481d      	ldr	r0, [pc, #116]	; (800157c <APPE_SysUserEvtRx+0xfc>)
 8001508:	f00d fb10 	bl	800eb2c <iprintf>
    APPE_SysEvtError(pPayload);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f000 f843 	bl	8001598 <APPE_SysEvtError>
    break;
 8001512:	e026      	b.n	8001562 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001514:	481a      	ldr	r0, [pc, #104]	; (8001580 <APPE_SysUserEvtRx+0x100>)
 8001516:	f00d fb77 	bl	800ec08 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800151e:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	461a      	mov	r2, r3
 8001528:	4816      	ldr	r0, [pc, #88]	; (8001584 <APPE_SysUserEvtRx+0x104>)
 800152a:	f00d faff 	bl	800eb2c <iprintf>
    break;
 800152e:	e018      	b.n	8001562 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4619      	mov	r1, r3
 8001538:	4813      	ldr	r0, [pc, #76]	; (8001588 <APPE_SysUserEvtRx+0x108>)
 800153a:	f00d faf7 	bl	800eb2c <iprintf>
    break;
 800153e:	e010      	b.n	8001562 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001540:	4812      	ldr	r0, [pc, #72]	; (800158c <APPE_SysUserEvtRx+0x10c>)
 8001542:	f00d faf3 	bl	800eb2c <iprintf>
    break;
 8001546:	e00c      	b.n	8001562 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4619      	mov	r1, r3
 8001550:	480f      	ldr	r0, [pc, #60]	; (8001590 <APPE_SysUserEvtRx+0x110>)
 8001552:	f00d faeb 	bl	800eb2c <iprintf>
    break;
 8001556:	e004      	b.n	8001562 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001558:	480e      	ldr	r0, [pc, #56]	; (8001594 <APPE_SysUserEvtRx+0x114>)
 800155a:	f00d fae7 	bl	800eb2c <iprintf>
    break;
 800155e:	e000      	b.n	8001562 <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 8001560:	bf00      	nop
  }

  return;
 8001562:	bf00      	nop
}
 8001564:	3720      	adds	r7, #32
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	0800f9f4 	.word	0x0800f9f4
 8001570:	0800fa18 	.word	0x0800fa18
 8001574:	0800fa34 	.word	0x0800fa34
 8001578:	0800fa4c 	.word	0x0800fa4c
 800157c:	0800fa6c 	.word	0x0800fa6c
 8001580:	0800fa90 	.word	0x0800fa90
 8001584:	0800fae0 	.word	0x0800fae0
 8001588:	0800fb08 	.word	0x0800fb08
 800158c:	0800fb44 	.word	0x0800fb44
 8001590:	0800fb68 	.word	0x0800fb68
 8001594:	0800fba4 	.word	0x0800fba4

08001598 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	330b      	adds	r3, #11
 80015a6:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	3302      	adds	r3, #2
 80015ac:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	4619      	mov	r1, r3
 80015b4:	4808      	ldr	r0, [pc, #32]	; (80015d8 <APPE_SysEvtError+0x40>)
 80015b6:	f00d fab9 	bl	800eb2c <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d103      	bne.n	80015ca <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 80015c2:	4806      	ldr	r0, [pc, #24]	; (80015dc <APPE_SysEvtError+0x44>)
 80015c4:	f00d fb20 	bl	800ec08 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80015c8:	e003      	b.n	80015d2 <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <APPE_SysEvtError+0x48>)
 80015cc:	f00d fb1c 	bl	800ec08 <puts>
  return;
 80015d0:	bf00      	nop
}
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	0800fbc8 	.word	0x0800fbc8
 80015dc:	0800fbf8 	.word	0x0800fbf8
 80015e0:	0800fc34 	.word	0x0800fc34

080015e4 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08a      	sub	sp, #40	; 0x28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80015ec:	f107 0308 	add.w	r3, r7, #8
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 80015fe:	2300      	movs	r3, #0
 8001600:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	330b      	adds	r3, #11
 8001608:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3302      	adds	r3, #2
 800160e:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d128      	bne.n	800166a <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001618:	481d      	ldr	r0, [pc, #116]	; (8001690 <APPE_SysEvtReadyProcessing+0xac>)
 800161a:	f00d faf5 	bl	800ec08 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800161e:	f7ff fbdf 	bl	8000de0 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001622:	230f      	movs	r3, #15
 8001624:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001626:	237f      	movs	r3, #127	; 0x7f
 8001628:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800162a:	f7ff fd81 	bl	8001130 <LL_DBGMCU_GetRevisionID>
 800162e:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001630:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001632:	4818      	ldr	r0, [pc, #96]	; (8001694 <APPE_SysEvtReadyProcessing+0xb0>)
 8001634:	f00d fa7a 	bl	800eb2c <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	b29b      	uxth	r3, r3
 800163c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800163e:	f7ff fd69 	bl	8001114 <LL_DBGMCU_GetDeviceID>
 8001642:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001644:	6a39      	ldr	r1, [r7, #32]
 8001646:	4814      	ldr	r0, [pc, #80]	; (8001698 <APPE_SysEvtReadyProcessing+0xb4>)
 8001648:	f00d fa70 	bl	800eb2c <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 800164c:	6a3b      	ldr	r3, [r7, #32]
 800164e:	b29b      	uxth	r3, r3
 8001650:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001652:	f107 0308 	add.w	r3, r7, #8
 8001656:	4618      	mov	r0, r3
 8001658:	f00a f8f6 	bl	800b848 <SHCI_C2_Config>

    APP_BLE_Init();
 800165c:	f00b fc96 	bl	800cf8c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001660:	2100      	movs	r1, #0
 8001662:	2001      	movs	r0, #1
 8001664:	f00c ff32 	bl	800e4cc <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001668:	e00e      	b.n	8001688 <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d106      	bne.n	8001680 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001672:	480a      	ldr	r0, [pc, #40]	; (800169c <APPE_SysEvtReadyProcessing+0xb8>)
 8001674:	f00d fa5a 	bl	800eb2c <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	701a      	strb	r2, [r3, #0]
  return;
 800167e:	e003      	b.n	8001688 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001680:	4807      	ldr	r0, [pc, #28]	; (80016a0 <APPE_SysEvtReadyProcessing+0xbc>)
 8001682:	f00d fa53 	bl	800eb2c <iprintf>
  return;
 8001686:	bf00      	nop
}
 8001688:	3728      	adds	r7, #40	; 0x28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	0800fc6c 	.word	0x0800fc6c
 8001694:	0800fc88 	.word	0x0800fc88
 8001698:	0800fcac 	.word	0x0800fcac
 800169c:	0800fccc 	.word	0x0800fccc
 80016a0:	0800fd00 	.word	0x0800fd00

080016a4 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 80016a8:	2000      	movs	r0, #0
 80016aa:	f002 f8d7 	bl	800385c <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80016ae:	2001      	movs	r0, #1
 80016b0:	f002 f8d4 	bl	800385c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80016b4:	2002      	movs	r0, #2
 80016b6:	f002 f8d1 	bl	800385c <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 80016ba:	2001      	movs	r0, #1
 80016bc:	f002 f908 	bl	80038d0 <BSP_LED_On>
#endif

  return;
 80016c0:	bf00      	nop
}
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <Button_Init>:

static void Button_Init( void )
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80016c8:	2101      	movs	r1, #1
 80016ca:	2000      	movs	r0, #0
 80016cc:	f002 f934 	bl	8003938 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80016d0:	2101      	movs	r1, #1
 80016d2:	2001      	movs	r0, #1
 80016d4:	f002 f930 	bl	8003938 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 80016d8:	2101      	movs	r1, #1
 80016da:	2002      	movs	r0, #2
 80016dc:	f002 f92c 	bl	8003938 <BSP_PB_Init>
#endif

  return;
 80016e0:	bf00      	nop
}
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016ec:	f002 fab2 	bl	8003c54 <HAL_GetTick>
 80016f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016fc:	d00a      	beq.n	8001714 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80016fe:	f002 fac1 	bl	8003c84 <HAL_GetTickFreq>
 8001702:	4603      	mov	r3, r0
 8001704:	461a      	mov	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4413      	add	r3, r2
 800170a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800170c:	e002      	b.n	8001714 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800170e:	f7ff fd7f 	bl	8001210 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8001712:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001714:	f002 fa9e 	bl	8003c54 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	429a      	cmp	r2, r3
 8001722:	d8f4      	bhi.n	800170e <HAL_Delay+0x2a>
  }
}
 8001724:	bf00      	nop
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001732:	f04f 30ff 	mov.w	r0, #4294967295
 8001736:	f00c fef9 	bl	800e52c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}

0800173e <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001742:	bf00      	nop
}
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001756:	f04f 30ff 	mov.w	r0, #4294967295
 800175a:	f00c fee7 	bl	800e52c <UTIL_SEQ_Run>
  return;
 800175e:	bf00      	nop
}
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800176e:	2100      	movs	r1, #0
 8001770:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001774:	f00c fff8 	bl	800e768 <UTIL_SEQ_SetTask>
  return;
 8001778:	bf00      	nop
}
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001788:	2002      	movs	r0, #2
 800178a:	f00d f859 	bl	800e840 <UTIL_SEQ_SetEvt>
  return;
 800178e:	bf00      	nop
}
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800179e:	2002      	movs	r0, #2
 80017a0:	f00d f86e 	bl	800e880 <UTIL_SEQ_WaitEvt>
  return;
 80017a4:	bf00      	nop
}
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80017b6:	88fb      	ldrh	r3, [r7, #6]
 80017b8:	2b10      	cmp	r3, #16
 80017ba:	d006      	beq.n	80017ca <HAL_GPIO_EXTI_Callback+0x1e>
 80017bc:	2b10      	cmp	r3, #16
 80017be:	dc0d      	bgt.n	80017dc <HAL_GPIO_EXTI_Callback+0x30>
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d005      	beq.n	80017d0 <HAL_GPIO_EXTI_Callback+0x24>
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d006      	beq.n	80017d6 <HAL_GPIO_EXTI_Callback+0x2a>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 80017c8:	e008      	b.n	80017dc <HAL_GPIO_EXTI_Callback+0x30>
      APP_BLE_Key_Button1_Action();
 80017ca:	f00b fee9 	bl	800d5a0 <APP_BLE_Key_Button1_Action>
      break; 
 80017ce:	e006      	b.n	80017de <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 80017d0:	f00b feec 	bl	800d5ac <APP_BLE_Key_Button2_Action>
      break; 
 80017d4:	e003      	b.n	80017de <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 80017d6:	f00b fef1 	bl	800d5bc <APP_BLE_Key_Button3_Action>
      break;
 80017da:	e000      	b.n	80017de <HAL_GPIO_EXTI_Callback+0x32>
      break;
 80017dc:	bf00      	nop

  }
  return;
 80017de:	bf00      	nop
}
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <RxUART_Init>:

static void RxUART_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <RxUART_Init+0x14>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	4903      	ldr	r1, [pc, #12]	; (8001800 <RxUART_Init+0x18>)
 80017f2:	2000      	movs	r0, #0
 80017f4:	f001 f8d6 	bl	80029a4 <HW_UART_Receive_IT>
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	08001805 	.word	0x08001805
 8001800:	20000108 	.word	0x20000108

08001804 <RxCpltCallback>:

static void RxCpltCallback(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8001808:	4b15      	ldr	r3, [pc, #84]	; (8001860 <RxCpltCallback+0x5c>)
 800180a:	881b      	ldrh	r3, [r3, #0]
 800180c:	2bff      	cmp	r3, #255	; 0xff
 800180e:	d81e      	bhi.n	800184e <RxCpltCallback+0x4a>
  {
    if (aRxBuffer[0] == '\r')
 8001810:	4b14      	ldr	r3, [pc, #80]	; (8001864 <RxCpltCallback+0x60>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b0d      	cmp	r3, #13
 8001816:	d10f      	bne.n	8001838 <RxCpltCallback+0x34>
    {
      APP_DBG_MSG("received %s\n", CommandString);
 8001818:	4913      	ldr	r1, [pc, #76]	; (8001868 <RxCpltCallback+0x64>)
 800181a:	4814      	ldr	r0, [pc, #80]	; (800186c <RxCpltCallback+0x68>)
 800181c:	f00d f986 	bl	800eb2c <iprintf>

      UartCmdExecute();
 8001820:	f000 f828 	bl	8001874 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 8001824:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <RxCpltCallback+0x5c>)
 8001826:	2200      	movs	r2, #0
 8001828:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 800182a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800182e:	2100      	movs	r1, #0
 8001830:	480d      	ldr	r0, [pc, #52]	; (8001868 <RxCpltCallback+0x64>)
 8001832:	f00d fac9 	bl	800edc8 <memset>
 8001836:	e00a      	b.n	800184e <RxCpltCallback+0x4a>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <RxCpltCallback+0x5c>)
 800183a:	881b      	ldrh	r3, [r3, #0]
 800183c:	1c5a      	adds	r2, r3, #1
 800183e:	b291      	uxth	r1, r2
 8001840:	4a07      	ldr	r2, [pc, #28]	; (8001860 <RxCpltCallback+0x5c>)
 8001842:	8011      	strh	r1, [r2, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	4b07      	ldr	r3, [pc, #28]	; (8001864 <RxCpltCallback+0x60>)
 8001848:	7819      	ldrb	r1, [r3, #0]
 800184a:	4b07      	ldr	r3, [pc, #28]	; (8001868 <RxCpltCallback+0x64>)
 800184c:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <RxCpltCallback+0x6c>)
 8001850:	2201      	movs	r2, #1
 8001852:	4904      	ldr	r1, [pc, #16]	; (8001864 <RxCpltCallback+0x60>)
 8001854:	2000      	movs	r0, #0
 8001856:	f001 f8a5 	bl	80029a4 <HW_UART_Receive_IT>
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20000210 	.word	0x20000210
 8001864:	20000108 	.word	0x20000108
 8001868:	20000110 	.word	0x20000110
 800186c:	0800fd34 	.word	0x0800fd34
 8001870:	08001805 	.word	0x08001805

08001874 <UartCmdExecute>:

static void UartCmdExecute(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 8001878:	491c      	ldr	r1, [pc, #112]	; (80018ec <UartCmdExecute+0x78>)
 800187a:	481d      	ldr	r0, [pc, #116]	; (80018f0 <UartCmdExecute+0x7c>)
 800187c:	f7fe fc80 	bl	8000180 <strcmp>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d109      	bne.n	800189a <UartCmdExecute+0x26>
  {
    APP_DBG_MSG("SW1 OK\n");
 8001886:	481b      	ldr	r0, [pc, #108]	; (80018f4 <UartCmdExecute+0x80>)
 8001888:	f00d f9be 	bl	800ec08 <puts>
    exti_handle.Line = EXTI_LINE_4;
 800188c:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <UartCmdExecute+0x84>)
 800188e:	4a1b      	ldr	r2, [pc, #108]	; (80018fc <UartCmdExecute+0x88>)
 8001890:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8001892:	4819      	ldr	r0, [pc, #100]	; (80018f8 <UartCmdExecute+0x84>)
 8001894:	f002 ff1a 	bl	80046cc <HAL_EXTI_GenerateSWI>
  }
  else
  {
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
  }
}
 8001898:	e026      	b.n	80018e8 <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 800189a:	4919      	ldr	r1, [pc, #100]	; (8001900 <UartCmdExecute+0x8c>)
 800189c:	4814      	ldr	r0, [pc, #80]	; (80018f0 <UartCmdExecute+0x7c>)
 800189e:	f7fe fc6f 	bl	8000180 <strcmp>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d10a      	bne.n	80018be <UartCmdExecute+0x4a>
    APP_DBG_MSG("SW2 OK\n");
 80018a8:	4816      	ldr	r0, [pc, #88]	; (8001904 <UartCmdExecute+0x90>)
 80018aa:	f00d f9ad 	bl	800ec08 <puts>
    exti_handle.Line = EXTI_LINE_0;
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <UartCmdExecute+0x84>)
 80018b0:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 80018b4:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80018b6:	4810      	ldr	r0, [pc, #64]	; (80018f8 <UartCmdExecute+0x84>)
 80018b8:	f002 ff08 	bl	80046cc <HAL_EXTI_GenerateSWI>
}
 80018bc:	e014      	b.n	80018e8 <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW3") == 0)
 80018be:	4912      	ldr	r1, [pc, #72]	; (8001908 <UartCmdExecute+0x94>)
 80018c0:	480b      	ldr	r0, [pc, #44]	; (80018f0 <UartCmdExecute+0x7c>)
 80018c2:	f7fe fc5d 	bl	8000180 <strcmp>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d109      	bne.n	80018e0 <UartCmdExecute+0x6c>
    APP_DBG_MSG("SW3 OK\n");
 80018cc:	480f      	ldr	r0, [pc, #60]	; (800190c <UartCmdExecute+0x98>)
 80018ce:	f00d f99b 	bl	800ec08 <puts>
    exti_handle.Line = EXTI_LINE_1;
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <UartCmdExecute+0x84>)
 80018d4:	4a0e      	ldr	r2, [pc, #56]	; (8001910 <UartCmdExecute+0x9c>)
 80018d6:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80018d8:	4807      	ldr	r0, [pc, #28]	; (80018f8 <UartCmdExecute+0x84>)
 80018da:	f002 fef7 	bl	80046cc <HAL_EXTI_GenerateSWI>
}
 80018de:	e003      	b.n	80018e8 <UartCmdExecute+0x74>
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
 80018e0:	4903      	ldr	r1, [pc, #12]	; (80018f0 <UartCmdExecute+0x7c>)
 80018e2:	480c      	ldr	r0, [pc, #48]	; (8001914 <UartCmdExecute+0xa0>)
 80018e4:	f00d f922 	bl	800eb2c <iprintf>
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	0800fd44 	.word	0x0800fd44
 80018f0:	20000110 	.word	0x20000110
 80018f4:	0800fd48 	.word	0x0800fd48
 80018f8:	20000100 	.word	0x20000100
 80018fc:	16000004 	.word	0x16000004
 8001900:	0800fd50 	.word	0x0800fd50
 8001904:	0800fd54 	.word	0x0800fd54
 8001908:	0800fd5c 	.word	0x0800fd5c
 800190c:	0800fd60 	.word	0x0800fd60
 8001910:	16000001 	.word	0x16000001
 8001914:	0800fd68 	.word	0x0800fd68

08001918 <Set_CW>:
	Update_PWM(duty);

}

void Set_CW()
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800191c:	2200      	movs	r2, #0
 800191e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001926:	f003 f863 	bl	80049f0 <HAL_GPIO_WritePin>

	Update_PWM(0);
 800192a:	2000      	movs	r0, #0
 800192c:	f000 f98e 	bl	8001c4c <Update_PWM>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001930:	2200      	movs	r2, #0
 8001932:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800193a:	f003 f859 	bl	80049f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 800193e:	2201      	movs	r2, #1
 8001940:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001944:	4807      	ldr	r0, [pc, #28]	; (8001964 <Set_CW+0x4c>)
 8001946:	f003 f853 	bl	80049f0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800194a:	2201      	movs	r2, #1
 800194c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001954:	f003 f84c 	bl	80049f0 <HAL_GPIO_WritePin>
	HAL_Delay(500); //so motor doesn't jerk
 8001958:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800195c:	f7ff fec2 	bl	80016e4 <HAL_Delay>
}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}
 8001964:	48000800 	.word	0x48000800

08001968 <Stop_Motor>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
	HAL_Delay(500);
}

void Stop_Motor()
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
	Update_PWM(0);
 800196c:	2000      	movs	r0, #0
 800196e:	f000 f96d 	bl	8001c4c <Update_PWM>
	Motor_Stopped_Complete();
 8001972:	f00c facb 	bl	800df0c <Motor_Stopped_Complete>
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}

0800197a <Get_Speed>:

uint16_t Get_Speed() // does not look at direction
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b084      	sub	sp, #16
 800197e:	af00      	add	r7, sp, #0
	uint32_t total = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
	uint16_t avg = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i < 8; i++)
 8001988:	2300      	movs	r3, #0
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	e00c      	b.n	80019a8 <Get_Speed+0x2e>
	{
		total += Read_Speed();
 800198e:	f000 f817 	bl	80019c0 <Read_Speed>
 8001992:	4603      	mov	r3, r0
 8001994:	461a      	mov	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4413      	add	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]
		HAL_Delay(2); //Offset
 800199c:	2002      	movs	r0, #2
 800199e:	f7ff fea1 	bl	80016e4 <HAL_Delay>
	for (int i = 0; i < 8; i++)
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	3301      	adds	r3, #1
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2b07      	cmp	r3, #7
 80019ac:	ddef      	ble.n	800198e <Get_Speed+0x14>
	}

	avg = total/8;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	08db      	lsrs	r3, r3, #3
 80019b2:	80fb      	strh	r3, [r7, #6]
	return avg;
 80019b4:	88fb      	ldrh	r3, [r7, #6]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <Read_Speed>:

uint16_t Read_Speed() //rpm
{
 80019c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
	//return 5;
	//TIM1->CR1 = 1;
	//uint8_t Test[] = "Starting speed reading\r\n";
	//HAL_UART_Transmit(&huart1,Test, sizeof(Test),10);

	uint32_t period = 100;
 80019c8:	2364      	movs	r3, #100	; 0x64
 80019ca:	613b      	str	r3, [r7, #16]
	uint16_t speed = 0;
 80019cc:	2300      	movs	r3, #0
 80019ce:	82fb      	strh	r3, [r7, #22]
	uint32_t start_counter = Get_Counter();
 80019d0:	f001 fbf0 	bl	80031b4 <Get_Counter>
 80019d4:	60f8      	str	r0, [r7, #12]

	//char Test3[50];
	//int size3 = sprintf(Test3, "start counter= %lu\r\n", start_counter);
	//HAL_UART_Transmit(&huart1,(uint8_t*)Test3, size3,10);

	HAL_Delay(period);
 80019d6:	6938      	ldr	r0, [r7, #16]
 80019d8:	f7ff fe84 	bl	80016e4 <HAL_Delay>
	uint32_t end_counter = Get_Counter();
 80019dc:	f001 fbea 	bl	80031b4 <Get_Counter>
 80019e0:	60b8      	str	r0, [r7, #8]

	//char Test2[50];
	//int size2 = sprintf(Test2, "end counter=   %lu\r\n", end_counter);
	//HAL_UART_Transmit(&huart1,(uint8_t*)Test2, size2,10);

	if (start_counter == end_counter)
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d102      	bne.n	80019f0 <Read_Speed+0x30>
	{
		speed = 0;
 80019ea:	2300      	movs	r3, #0
 80019ec:	82fb      	strh	r3, [r7, #22]
 80019ee:	e09d      	b.n	8001b2c <Read_Speed+0x16c>
	}
	else if (start_counter > end_counter)
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d944      	bls.n	8001a82 <Read_Speed+0xc2>
	{
		speed = (start_counter - end_counter)*(1000.0/period)*60.0/4/PPR/GEAR_RATIO;
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fd68 	bl	80004d4 <__aeabi_ui2d>
 8001a04:	4604      	mov	r4, r0
 8001a06:	460d      	mov	r5, r1
 8001a08:	6938      	ldr	r0, [r7, #16]
 8001a0a:	f7fe fd63 	bl	80004d4 <__aeabi_ui2d>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	f04f 0000 	mov.w	r0, #0
 8001a16:	494a      	ldr	r1, [pc, #296]	; (8001b40 <Read_Speed+0x180>)
 8001a18:	f7fe ff00 	bl	800081c <__aeabi_ddiv>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4620      	mov	r0, r4
 8001a22:	4629      	mov	r1, r5
 8001a24:	f7fe fdd0 	bl	80005c8 <__aeabi_dmul>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	460b      	mov	r3, r1
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	4b43      	ldr	r3, [pc, #268]	; (8001b44 <Read_Speed+0x184>)
 8001a36:	f7fe fdc7 	bl	80005c8 <__aeabi_dmul>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4619      	mov	r1, r3
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <Read_Speed+0x188>)
 8001a48:	f7fe fee8 	bl	800081c <__aeabi_ddiv>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4610      	mov	r0, r2
 8001a52:	4619      	mov	r1, r3
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	4b3c      	ldr	r3, [pc, #240]	; (8001b4c <Read_Speed+0x18c>)
 8001a5a:	f7fe fedf 	bl	800081c <__aeabi_ddiv>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4610      	mov	r0, r2
 8001a64:	4619      	mov	r1, r3
 8001a66:	a334      	add	r3, pc, #208	; (adr r3, 8001b38 <Read_Speed+0x178>)
 8001a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6c:	f7fe fed6 	bl	800081c <__aeabi_ddiv>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4610      	mov	r0, r2
 8001a76:	4619      	mov	r1, r3
 8001a78:	f7fe ffb8 	bl	80009ec <__aeabi_d2uiz>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	82fb      	strh	r3, [r7, #22]
 8001a80:	e054      	b.n	8001b2c <Read_Speed+0x16c>
	}
	else //overflow occurred
	{
		speed = (4294967295 - end_counter + start_counter)*(1000.0/period)*60.0/4/PPR/GEAR_RATIO;
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2200      	movs	r2, #0
 8001a86:	469a      	mov	sl, r3
 8001a88:	4693      	mov	fp, r2
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f1da 34ff 	rsbs	r4, sl, #4294967295
 8001a90:	eb63 050b 	sbc.w	r5, r3, fp
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	4698      	mov	r8, r3
 8001a9a:	4691      	mov	r9, r2
 8001a9c:	eb14 0308 	adds.w	r3, r4, r8
 8001aa0:	603b      	str	r3, [r7, #0]
 8001aa2:	eb45 0309 	adc.w	r3, r5, r9
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001aac:	f7fe fd5e 	bl	800056c <__aeabi_l2d>
 8001ab0:	4604      	mov	r4, r0
 8001ab2:	460d      	mov	r5, r1
 8001ab4:	6938      	ldr	r0, [r7, #16]
 8001ab6:	f7fe fd0d 	bl	80004d4 <__aeabi_ui2d>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	f04f 0000 	mov.w	r0, #0
 8001ac2:	491f      	ldr	r1, [pc, #124]	; (8001b40 <Read_Speed+0x180>)
 8001ac4:	f7fe feaa 	bl	800081c <__aeabi_ddiv>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4620      	mov	r0, r4
 8001ace:	4629      	mov	r1, r5
 8001ad0:	f7fe fd7a 	bl	80005c8 <__aeabi_dmul>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <Read_Speed+0x184>)
 8001ae2:	f7fe fd71 	bl	80005c8 <__aeabi_dmul>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	460b      	mov	r3, r1
 8001aea:	4610      	mov	r0, r2
 8001aec:	4619      	mov	r1, r3
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <Read_Speed+0x188>)
 8001af4:	f7fe fe92 	bl	800081c <__aeabi_ddiv>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <Read_Speed+0x18c>)
 8001b06:	f7fe fe89 	bl	800081c <__aeabi_ddiv>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4610      	mov	r0, r2
 8001b10:	4619      	mov	r1, r3
 8001b12:	a309      	add	r3, pc, #36	; (adr r3, 8001b38 <Read_Speed+0x178>)
 8001b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b18:	f7fe fe80 	bl	800081c <__aeabi_ddiv>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f7fe ff62 	bl	80009ec <__aeabi_d2uiz>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	82fb      	strh	r3, [r7, #22]
	}
	return speed;
 8001b2c:	8afb      	ldrh	r3, [r7, #22]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b38:	9999999a 	.word	0x9999999a
 8001b3c:	400d9999 	.word	0x400d9999
 8001b40:	408f4000 	.word	0x408f4000
 8001b44:	404e0000 	.word	0x404e0000
 8001b48:	40100000 	.word	0x40100000
 8001b4c:	401c0000 	.word	0x401c0000

08001b50 <Set_Speed>:

void Set_Speed(uint32_t goal) //TODO detect failure
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b09c      	sub	sp, #112	; 0x70
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	float Kp = 0.03;
 8001b58:	4b3a      	ldr	r3, [pc, #232]	; (8001c44 <Set_Speed+0xf4>)
 8001b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
	float Ki = 0.04;
 8001b5c:	4b3a      	ldr	r3, [pc, #232]	; (8001c48 <Set_Speed+0xf8>)
 8001b5e:	65bb      	str	r3, [r7, #88]	; 0x58
	int period = 100;
 8001b60:	2364      	movs	r3, #100	; 0x64
 8001b62:	657b      	str	r3, [r7, #84]	; 0x54
	int stable = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	66fb      	str	r3, [r7, #108]	; 0x6c
	int stable_threshold = 5;
 8001b68:	2305      	movs	r3, #5
 8001b6a:	653b      	str	r3, [r7, #80]	; 0x50
	int failures = 0; //to check if it never converges
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	66bb      	str	r3, [r7, #104]	; 0x68
	int failure_threshold = 50;
 8001b70:	2332      	movs	r3, #50	; 0x32
 8001b72:	64fb      	str	r3, [r7, #76]	; 0x4c
	int I = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	667b      	str	r3, [r7, #100]	; 0x64

	do
	{
		int current = Get_Speed();
 8001b78:	f7ff feff 	bl	800197a <Get_Speed>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	64bb      	str	r3, [r7, #72]	; 0x48

		  char Test[50];
		  //int size = sprintf(Test, "cur speed: %d\r\nfailures: %d\r\n", current, failures);
		  UART_Transmit(Test);
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	4618      	mov	r0, r3
 8001b86:	f001 fb21 	bl	80031cc <UART_Transmit>

		int error = goal - current;
 8001b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	647b      	str	r3, [r7, #68]	; 0x44

		int P = error*Kp;
 8001b92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b94:	ee07 3a90 	vmov	s15, r3
 8001b98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b9c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ba4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ba8:	ee17 3a90 	vmov	r3, s15
 8001bac:	643b      	str	r3, [r7, #64]	; 0x40
		I = I + error*Ki;
 8001bae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bb0:	ee07 3a90 	vmov	s15, r3
 8001bb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bba:	ee07 3a90 	vmov	s15, r3
 8001bbe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bc2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001bc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bd2:	ee17 3a90 	vmov	r3, s15
 8001bd6:	667b      	str	r3, [r7, #100]	; 0x64
		int duty = P + I;
 8001bd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001bda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bdc:	4413      	add	r3, r2
 8001bde:	663b      	str	r3, [r7, #96]	; 0x60
		if (duty < 0)
 8001be0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	da02      	bge.n	8001bec <Set_Speed+0x9c>
		{
			duty = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	663b      	str	r3, [r7, #96]	; 0x60
 8001bea:	e004      	b.n	8001bf6 <Set_Speed+0xa6>
		}
		else if (duty > 100)
 8001bec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bee:	2b64      	cmp	r3, #100	; 0x64
 8001bf0:	dd01      	ble.n	8001bf6 <Set_Speed+0xa6>
		{
			duty = 100;
 8001bf2:	2364      	movs	r3, #100	; 0x64
 8001bf4:	663b      	str	r3, [r7, #96]	; 0x60
		}

		Update_PWM(duty);
 8001bf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 f827 	bl	8001c4c <Update_PWM>
		HAL_Delay(period);
 8001bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff fd6f 	bl	80016e4 <HAL_Delay>
		if (error < 10 && error > -10)
 8001c06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c08:	2b09      	cmp	r3, #9
 8001c0a:	dc07      	bgt.n	8001c1c <Set_Speed+0xcc>
 8001c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c0e:	f113 0f09 	cmn.w	r3, #9
 8001c12:	db03      	blt.n	8001c1c <Set_Speed+0xcc>
		{
			stable++;
 8001c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c16:	3301      	adds	r3, #1
 8001c18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001c1a:	e001      	b.n	8001c20 <Set_Speed+0xd0>
		}
		else
		{
			stable = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	66fb      	str	r3, [r7, #108]	; 0x6c
		}
		failures++;
 8001c20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c22:	3301      	adds	r3, #1
 8001c24:	66bb      	str	r3, [r7, #104]	; 0x68

	} while(stable < stable_threshold && failures < failure_threshold);
 8001c26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	da03      	bge.n	8001c36 <Set_Speed+0xe6>
 8001c2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001c32:	429a      	cmp	r2, r3
 8001c34:	dba0      	blt.n	8001b78 <Set_Speed+0x28>
	Motor_Done_Complete();
 8001c36:	f00c f979 	bl	800df2c <Motor_Done_Complete>
}
 8001c3a:	bf00      	nop
 8001c3c:	3770      	adds	r7, #112	; 0x70
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	3cf5c28f 	.word	0x3cf5c28f
 8001c48:	3d23d70a 	.word	0x3d23d70a

08001c4c <Update_PWM>:

void Update_PWM(uint32_t duty)
{
 8001c4c:	b5b0      	push	{r4, r5, r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	uint32_t CCR = (TIM1->ARR)*(duty/100.0);
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <Update_PWM+0x50>)
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fc3b 	bl	80004d4 <__aeabi_ui2d>
 8001c5e:	4604      	mov	r4, r0
 8001c60:	460d      	mov	r5, r1
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7fe fc36 	bl	80004d4 <__aeabi_ui2d>
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <Update_PWM+0x54>)
 8001c6e:	f7fe fdd5 	bl	800081c <__aeabi_ddiv>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4620      	mov	r0, r4
 8001c78:	4629      	mov	r1, r5
 8001c7a:	f7fe fca5 	bl	80005c8 <__aeabi_dmul>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4610      	mov	r0, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	f7fe feb1 	bl	80009ec <__aeabi_d2uiz>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	60fb      	str	r3, [r7, #12]
	Set_CCR(CCR);
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f001 faac 	bl	80031ec <Set_CCR>
}
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c9c:	40012c00 	.word	0x40012c00
 8001ca0:	40590000 	.word	0x40590000

08001ca4 <LL_EXTI_EnableIT_0_31>:
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <LL_EXTI_EnableIT_0_31+0x24>)
 8001cae:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001cb2:	4905      	ldr	r1, [pc, #20]	; (8001cc8 <LL_EXTI_EnableIT_0_31+0x24>)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr
 8001cc8:	58000800 	.word	0x58000800

08001ccc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4904      	ldr	r1, [pc, #16]	; (8001cec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	600b      	str	r3, [r1, #0]

}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	58000800 	.word	0x58000800

08001cf0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <ReadRtcSsrValue+0x3c>)
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <ReadRtcSsrValue+0x3c>)
 8001d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001d06:	e005      	b.n	8001d14 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001d0c:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <ReadRtcSsrValue+0x3c>)
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d1f5      	bne.n	8001d08 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001d1c:	683b      	ldr	r3, [r7, #0]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40002800 	.word	0x40002800

08001d30 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	460a      	mov	r2, r1
 8001d3a:	71fb      	strb	r3, [r7, #7]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001d40:	79ba      	ldrb	r2, [r7, #6]
 8001d42:	491d      	ldr	r1, [pc, #116]	; (8001db8 <LinkTimerAfter+0x88>)
 8001d44:	4613      	mov	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4413      	add	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	440b      	add	r3, r1
 8001d4e:	3315      	adds	r3, #21
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d009      	beq.n	8001d6e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001d5a:	7bfa      	ldrb	r2, [r7, #15]
 8001d5c:	4916      	ldr	r1, [pc, #88]	; (8001db8 <LinkTimerAfter+0x88>)
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	440b      	add	r3, r1
 8001d68:	3314      	adds	r3, #20
 8001d6a:	79fa      	ldrb	r2, [r7, #7]
 8001d6c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001d6e:	79fa      	ldrb	r2, [r7, #7]
 8001d70:	4911      	ldr	r1, [pc, #68]	; (8001db8 <LinkTimerAfter+0x88>)
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	440b      	add	r3, r1
 8001d7c:	3315      	adds	r3, #21
 8001d7e:	7bfa      	ldrb	r2, [r7, #15]
 8001d80:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001d82:	79fa      	ldrb	r2, [r7, #7]
 8001d84:	490c      	ldr	r1, [pc, #48]	; (8001db8 <LinkTimerAfter+0x88>)
 8001d86:	4613      	mov	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	440b      	add	r3, r1
 8001d90:	3314      	adds	r3, #20
 8001d92:	79ba      	ldrb	r2, [r7, #6]
 8001d94:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001d96:	79ba      	ldrb	r2, [r7, #6]
 8001d98:	4907      	ldr	r1, [pc, #28]	; (8001db8 <LinkTimerAfter+0x88>)
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	440b      	add	r3, r1
 8001da4:	3315      	adds	r3, #21
 8001da6:	79fa      	ldrb	r2, [r7, #7]
 8001da8:	701a      	strb	r2, [r3, #0]

  return;
 8001daa:	bf00      	nop
}
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000214 	.word	0x20000214

08001dbc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	460a      	mov	r2, r1
 8001dc6:	71fb      	strb	r3, [r7, #7]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001dcc:	4b29      	ldr	r3, [pc, #164]	; (8001e74 <LinkTimerBefore+0xb8>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	79ba      	ldrb	r2, [r7, #6]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d032      	beq.n	8001e3e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001dd8:	79ba      	ldrb	r2, [r7, #6]
 8001dda:	4927      	ldr	r1, [pc, #156]	; (8001e78 <LinkTimerBefore+0xbc>)
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	440b      	add	r3, r1
 8001de6:	3314      	adds	r3, #20
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001dec:	7bfa      	ldrb	r2, [r7, #15]
 8001dee:	4922      	ldr	r1, [pc, #136]	; (8001e78 <LinkTimerBefore+0xbc>)
 8001df0:	4613      	mov	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4413      	add	r3, r2
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	440b      	add	r3, r1
 8001dfa:	3315      	adds	r3, #21
 8001dfc:	79fa      	ldrb	r2, [r7, #7]
 8001dfe:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001e00:	79fa      	ldrb	r2, [r7, #7]
 8001e02:	491d      	ldr	r1, [pc, #116]	; (8001e78 <LinkTimerBefore+0xbc>)
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	440b      	add	r3, r1
 8001e0e:	3315      	adds	r3, #21
 8001e10:	79ba      	ldrb	r2, [r7, #6]
 8001e12:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001e14:	79fa      	ldrb	r2, [r7, #7]
 8001e16:	4918      	ldr	r1, [pc, #96]	; (8001e78 <LinkTimerBefore+0xbc>)
 8001e18:	4613      	mov	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4413      	add	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	440b      	add	r3, r1
 8001e22:	3314      	adds	r3, #20
 8001e24:	7bfa      	ldrb	r2, [r7, #15]
 8001e26:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001e28:	79ba      	ldrb	r2, [r7, #6]
 8001e2a:	4913      	ldr	r1, [pc, #76]	; (8001e78 <LinkTimerBefore+0xbc>)
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	4413      	add	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	440b      	add	r3, r1
 8001e36:	3314      	adds	r3, #20
 8001e38:	79fa      	ldrb	r2, [r7, #7]
 8001e3a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001e3c:	e014      	b.n	8001e68 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001e3e:	79fa      	ldrb	r2, [r7, #7]
 8001e40:	490d      	ldr	r1, [pc, #52]	; (8001e78 <LinkTimerBefore+0xbc>)
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	00db      	lsls	r3, r3, #3
 8001e4a:	440b      	add	r3, r1
 8001e4c:	3315      	adds	r3, #21
 8001e4e:	79ba      	ldrb	r2, [r7, #6]
 8001e50:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001e52:	79ba      	ldrb	r2, [r7, #6]
 8001e54:	4908      	ldr	r1, [pc, #32]	; (8001e78 <LinkTimerBefore+0xbc>)
 8001e56:	4613      	mov	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	440b      	add	r3, r1
 8001e60:	3314      	adds	r3, #20
 8001e62:	79fa      	ldrb	r2, [r7, #7]
 8001e64:	701a      	strb	r2, [r3, #0]
  return;
 8001e66:	bf00      	nop
}
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	200002a4 	.word	0x200002a4
 8001e78:	20000214 	.word	0x20000214

08001e7c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e86:	4b4e      	ldr	r3, [pc, #312]	; (8001fc0 <linkTimer+0x144>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b06      	cmp	r3, #6
 8001e8e:	d118      	bne.n	8001ec2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001e90:	4b4b      	ldr	r3, [pc, #300]	; (8001fc0 <linkTimer+0x144>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4b4b      	ldr	r3, [pc, #300]	; (8001fc4 <linkTimer+0x148>)
 8001e98:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001e9a:	4a49      	ldr	r2, [pc, #292]	; (8001fc0 <linkTimer+0x144>)
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001ea0:	79fa      	ldrb	r2, [r7, #7]
 8001ea2:	4949      	ldr	r1, [pc, #292]	; (8001fc8 <linkTimer+0x14c>)
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	4413      	add	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	440b      	add	r3, r1
 8001eae:	3315      	adds	r3, #21
 8001eb0:	2206      	movs	r2, #6
 8001eb2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001eb4:	4b45      	ldr	r3, [pc, #276]	; (8001fcc <linkTimer+0x150>)
 8001eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eba:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	81fb      	strh	r3, [r7, #14]
 8001ec0:	e078      	b.n	8001fb4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001ec2:	f000 f909 	bl	80020d8 <ReturnTimeElapsed>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001eca:	79fa      	ldrb	r2, [r7, #7]
 8001ecc:	493e      	ldr	r1, [pc, #248]	; (8001fc8 <linkTimer+0x14c>)
 8001ece:	4613      	mov	r3, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4413      	add	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	440b      	add	r3, r1
 8001ed8:	3308      	adds	r3, #8
 8001eda:	6819      	ldr	r1, [r3, #0]
 8001edc:	89fb      	ldrh	r3, [r7, #14]
 8001ede:	79fa      	ldrb	r2, [r7, #7]
 8001ee0:	4419      	add	r1, r3
 8001ee2:	4839      	ldr	r0, [pc, #228]	; (8001fc8 <linkTimer+0x14c>)
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	4413      	add	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4403      	add	r3, r0
 8001eee:	3308      	adds	r3, #8
 8001ef0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001ef2:	79fa      	ldrb	r2, [r7, #7]
 8001ef4:	4934      	ldr	r1, [pc, #208]	; (8001fc8 <linkTimer+0x14c>)
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	440b      	add	r3, r1
 8001f00:	3308      	adds	r3, #8
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001f06:	4b2e      	ldr	r3, [pc, #184]	; (8001fc0 <linkTimer+0x144>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4a2e      	ldr	r2, [pc, #184]	; (8001fc8 <linkTimer+0x14c>)
 8001f10:	460b      	mov	r3, r1
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	440b      	add	r3, r1
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4413      	add	r3, r2
 8001f1a:	3308      	adds	r3, #8
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d337      	bcc.n	8001f94 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001f24:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <linkTimer+0x144>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001f2a:	7b7a      	ldrb	r2, [r7, #13]
 8001f2c:	4926      	ldr	r1, [pc, #152]	; (8001fc8 <linkTimer+0x14c>)
 8001f2e:	4613      	mov	r3, r2
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	4413      	add	r3, r2
 8001f34:	00db      	lsls	r3, r3, #3
 8001f36:	440b      	add	r3, r1
 8001f38:	3315      	adds	r3, #21
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001f3e:	e013      	b.n	8001f68 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001f40:	7b7a      	ldrb	r2, [r7, #13]
 8001f42:	4921      	ldr	r1, [pc, #132]	; (8001fc8 <linkTimer+0x14c>)
 8001f44:	4613      	mov	r3, r2
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	4413      	add	r3, r2
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	440b      	add	r3, r1
 8001f4e:	3315      	adds	r3, #21
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001f54:	7b7a      	ldrb	r2, [r7, #13]
 8001f56:	491c      	ldr	r1, [pc, #112]	; (8001fc8 <linkTimer+0x14c>)
 8001f58:	4613      	mov	r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4413      	add	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	440b      	add	r3, r1
 8001f62:	3315      	adds	r3, #21
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001f68:	7b3b      	ldrb	r3, [r7, #12]
 8001f6a:	2b06      	cmp	r3, #6
 8001f6c:	d00b      	beq.n	8001f86 <linkTimer+0x10a>
 8001f6e:	7b3a      	ldrb	r2, [r7, #12]
 8001f70:	4915      	ldr	r1, [pc, #84]	; (8001fc8 <linkTimer+0x14c>)
 8001f72:	4613      	mov	r3, r2
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	440b      	add	r3, r1
 8001f7c:	3308      	adds	r3, #8
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d2dc      	bcs.n	8001f40 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001f86:	7b7a      	ldrb	r2, [r7, #13]
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fecf 	bl	8001d30 <LinkTimerAfter>
 8001f92:	e00f      	b.n	8001fb4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001f94:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <linkTimer+0x144>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	4611      	mov	r1, r2
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff ff0c 	bl	8001dbc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <linkTimer+0x144>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <linkTimer+0x148>)
 8001fac:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001fae:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <linkTimer+0x144>)
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001fb4:	89fb      	ldrh	r3, [r7, #14]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200002a4 	.word	0x200002a4
 8001fc4:	200002a5 	.word	0x200002a5
 8001fc8:	20000214 	.word	0x20000214
 8001fcc:	200002a8 	.word	0x200002a8

08001fd0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	460a      	mov	r2, r1
 8001fda:	71fb      	strb	r3, [r7, #7]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001fe0:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <UnlinkTimer+0xf8>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	79fa      	ldrb	r2, [r7, #7]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d111      	bne.n	8002010 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001fec:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <UnlinkTimer+0xf8>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	b2da      	uxtb	r2, r3
 8001ff2:	4b36      	ldr	r3, [pc, #216]	; (80020cc <UnlinkTimer+0xfc>)
 8001ff4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001ff6:	79fa      	ldrb	r2, [r7, #7]
 8001ff8:	4935      	ldr	r1, [pc, #212]	; (80020d0 <UnlinkTimer+0x100>)
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	440b      	add	r3, r1
 8002004:	3315      	adds	r3, #21
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <UnlinkTimer+0xf8>)
 800200c:	701a      	strb	r2, [r3, #0]
 800200e:	e03e      	b.n	800208e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002010:	79fa      	ldrb	r2, [r7, #7]
 8002012:	492f      	ldr	r1, [pc, #188]	; (80020d0 <UnlinkTimer+0x100>)
 8002014:	4613      	mov	r3, r2
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4413      	add	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	440b      	add	r3, r1
 800201e:	3314      	adds	r3, #20
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002024:	79fa      	ldrb	r2, [r7, #7]
 8002026:	492a      	ldr	r1, [pc, #168]	; (80020d0 <UnlinkTimer+0x100>)
 8002028:	4613      	mov	r3, r2
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	4413      	add	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	440b      	add	r3, r1
 8002032:	3315      	adds	r3, #21
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002038:	79f9      	ldrb	r1, [r7, #7]
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	4824      	ldr	r0, [pc, #144]	; (80020d0 <UnlinkTimer+0x100>)
 800203e:	460b      	mov	r3, r1
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	440b      	add	r3, r1
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4403      	add	r3, r0
 8002048:	3315      	adds	r3, #21
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	b2d8      	uxtb	r0, r3
 800204e:	4920      	ldr	r1, [pc, #128]	; (80020d0 <UnlinkTimer+0x100>)
 8002050:	4613      	mov	r3, r2
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	440b      	add	r3, r1
 800205a:	3315      	adds	r3, #21
 800205c:	4602      	mov	r2, r0
 800205e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002060:	7bbb      	ldrb	r3, [r7, #14]
 8002062:	2b06      	cmp	r3, #6
 8002064:	d013      	beq.n	800208e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002066:	79f9      	ldrb	r1, [r7, #7]
 8002068:	7bba      	ldrb	r2, [r7, #14]
 800206a:	4819      	ldr	r0, [pc, #100]	; (80020d0 <UnlinkTimer+0x100>)
 800206c:	460b      	mov	r3, r1
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	440b      	add	r3, r1
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4403      	add	r3, r0
 8002076:	3314      	adds	r3, #20
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	b2d8      	uxtb	r0, r3
 800207c:	4914      	ldr	r1, [pc, #80]	; (80020d0 <UnlinkTimer+0x100>)
 800207e:	4613      	mov	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	4413      	add	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	440b      	add	r3, r1
 8002088:	3314      	adds	r3, #20
 800208a:	4602      	mov	r2, r0
 800208c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800208e:	79fa      	ldrb	r2, [r7, #7]
 8002090:	490f      	ldr	r1, [pc, #60]	; (80020d0 <UnlinkTimer+0x100>)
 8002092:	4613      	mov	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	440b      	add	r3, r1
 800209c:	330c      	adds	r3, #12
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <UnlinkTimer+0xf8>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b06      	cmp	r3, #6
 80020aa:	d107      	bne.n	80020bc <UnlinkTimer+0xec>
 80020ac:	79bb      	ldrb	r3, [r7, #6]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d104      	bne.n	80020bc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80020b2:	4b08      	ldr	r3, [pc, #32]	; (80020d4 <UnlinkTimer+0x104>)
 80020b4:	f04f 32ff 	mov.w	r2, #4294967295
 80020b8:	601a      	str	r2, [r3, #0]
  }

  return;
 80020ba:	bf00      	nop
 80020bc:	bf00      	nop
}
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	200002a4 	.word	0x200002a4
 80020cc:	200002a5 	.word	0x200002a5
 80020d0:	20000214 	.word	0x20000214
 80020d4:	200002a8 	.word	0x200002a8

080020d8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80020de:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <ReturnTimeElapsed+0x70>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e6:	d026      	beq.n	8002136 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80020e8:	f7ff fe02 	bl	8001cf0 <ReadRtcSsrValue>
 80020ec:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80020ee:	4b16      	ldr	r3, [pc, #88]	; (8002148 <ReturnTimeElapsed+0x70>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d805      	bhi.n	8002104 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80020f8:	4b13      	ldr	r3, [pc, #76]	; (8002148 <ReturnTimeElapsed+0x70>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	607b      	str	r3, [r7, #4]
 8002102:	e00a      	b.n	800211a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002104:	4b11      	ldr	r3, [pc, #68]	; (800214c <ReturnTimeElapsed+0x74>)
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	461a      	mov	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002110:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <ReturnTimeElapsed+0x70>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	4413      	add	r3, r2
 8002118:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800211a:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <ReturnTimeElapsed+0x78>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	fb02 f303 	mul.w	r3, r2, r3
 8002126:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002128:	4b0a      	ldr	r3, [pc, #40]	; (8002154 <ReturnTimeElapsed+0x7c>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	40d3      	lsrs	r3, r2
 8002132:	607b      	str	r3, [r7, #4]
 8002134:	e001      	b.n	800213a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	b29b      	uxth	r3, r3
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	200002a8 	.word	0x200002a8
 800214c:	200002b0 	.word	0x200002b0
 8002150:	200002ae 	.word	0x200002ae
 8002154:	200002ad 	.word	0x200002ad

08002158 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	4603      	mov	r3, r0
 8002160:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002162:	88fb      	ldrh	r3, [r7, #6]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d108      	bne.n	800217a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002168:	f7ff fdc2 	bl	8001cf0 <ReadRtcSsrValue>
 800216c:	4603      	mov	r3, r0
 800216e:	4a21      	ldr	r2, [pc, #132]	; (80021f4 <RestartWakeupCounter+0x9c>)
 8002170:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002172:	2003      	movs	r0, #3
 8002174:	f001 ff1b 	bl	8003fae <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002178:	e039      	b.n	80021ee <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d803      	bhi.n	8002188 <RestartWakeupCounter+0x30>
 8002180:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <RestartWakeupCounter+0xa0>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d002      	beq.n	800218e <RestartWakeupCounter+0x36>
      Value -= 1;
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	3b01      	subs	r3, #1
 800218c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800218e:	bf00      	nop
 8002190:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <RestartWakeupCounter+0xa4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f8      	beq.n	8002190 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800219e:	4b17      	ldr	r3, [pc, #92]	; (80021fc <RestartWakeupCounter+0xa4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4b15      	ldr	r3, [pc, #84]	; (80021fc <RestartWakeupCounter+0xa4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80021ae:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80021b0:	4b13      	ldr	r3, [pc, #76]	; (8002200 <RestartWakeupCounter+0xa8>)
 80021b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80021b6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80021b8:	2003      	movs	r0, #3
 80021ba:	f001 ff06 	bl	8003fca <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80021be:	4b11      	ldr	r3, [pc, #68]	; (8002204 <RestartWakeupCounter+0xac>)
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	0c1b      	lsrs	r3, r3, #16
 80021c4:	041b      	lsls	r3, r3, #16
 80021c6:	88fa      	ldrh	r2, [r7, #6]
 80021c8:	490e      	ldr	r1, [pc, #56]	; (8002204 <RestartWakeupCounter+0xac>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80021ce:	f7ff fd8f 	bl	8001cf0 <ReadRtcSsrValue>
 80021d2:	4603      	mov	r3, r0
 80021d4:	4a07      	ldr	r2, [pc, #28]	; (80021f4 <RestartWakeupCounter+0x9c>)
 80021d6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80021d8:	4b08      	ldr	r3, [pc, #32]	; (80021fc <RestartWakeupCounter+0xa4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	4b07      	ldr	r3, [pc, #28]	; (80021fc <RestartWakeupCounter+0xa4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80021e6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80021e8:	f3af 8000 	nop.w
  return ;
 80021ec:	bf00      	nop
}
 80021ee:	3708      	adds	r7, #8
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	200002a8 	.word	0x200002a8
 80021f8:	200002ad 	.word	0x200002ad
 80021fc:	200004fc 	.word	0x200004fc
 8002200:	58000800 	.word	0x58000800
 8002204:	40002800 	.word	0x40002800

08002208 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800220e:	4b45      	ldr	r3, [pc, #276]	; (8002324 <RescheduleTimerList+0x11c>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800221a:	d107      	bne.n	800222c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800221c:	bf00      	nop
 800221e:	4b42      	ldr	r3, [pc, #264]	; (8002328 <RescheduleTimerList+0x120>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	f003 0304 	and.w	r3, r3, #4
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f8      	bne.n	800221e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800222c:	4b3e      	ldr	r3, [pc, #248]	; (8002328 <RescheduleTimerList+0x120>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	4b3d      	ldr	r3, [pc, #244]	; (8002328 <RescheduleTimerList+0x120>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800223a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800223c:	4b3b      	ldr	r3, [pc, #236]	; (800232c <RescheduleTimerList+0x124>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002242:	7bfa      	ldrb	r2, [r7, #15]
 8002244:	493a      	ldr	r1, [pc, #232]	; (8002330 <RescheduleTimerList+0x128>)
 8002246:	4613      	mov	r3, r2
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	4413      	add	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	440b      	add	r3, r1
 8002250:	3308      	adds	r3, #8
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002256:	f7ff ff3f 	bl	80020d8 <ReturnTimeElapsed>
 800225a:	4603      	mov	r3, r0
 800225c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800225e:	88fb      	ldrh	r3, [r7, #6]
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	429a      	cmp	r2, r3
 8002264:	d205      	bcs.n	8002272 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800226a:	4b32      	ldr	r3, [pc, #200]	; (8002334 <RescheduleTimerList+0x12c>)
 800226c:	2201      	movs	r2, #1
 800226e:	701a      	strb	r2, [r3, #0]
 8002270:	e04d      	b.n	800230e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	4a30      	ldr	r2, [pc, #192]	; (8002338 <RescheduleTimerList+0x130>)
 8002276:	8812      	ldrh	r2, [r2, #0]
 8002278:	b292      	uxth	r2, r2
 800227a:	4413      	add	r3, r2
 800227c:	461a      	mov	r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	4293      	cmp	r3, r2
 8002282:	d906      	bls.n	8002292 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002284:	4b2c      	ldr	r3, [pc, #176]	; (8002338 <RescheduleTimerList+0x130>)
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800228a:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <RescheduleTimerList+0x12c>)
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
 8002290:	e03d      	b.n	800230e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	b29a      	uxth	r2, r3
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800229c:	4b25      	ldr	r3, [pc, #148]	; (8002334 <RescheduleTimerList+0x12c>)
 800229e:	2201      	movs	r2, #1
 80022a0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80022a2:	e034      	b.n	800230e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80022a4:	7bfa      	ldrb	r2, [r7, #15]
 80022a6:	4922      	ldr	r1, [pc, #136]	; (8002330 <RescheduleTimerList+0x128>)
 80022a8:	4613      	mov	r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4413      	add	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	440b      	add	r3, r1
 80022b2:	3308      	adds	r3, #8
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d20a      	bcs.n	80022d2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80022bc:	7bfa      	ldrb	r2, [r7, #15]
 80022be:	491c      	ldr	r1, [pc, #112]	; (8002330 <RescheduleTimerList+0x128>)
 80022c0:	4613      	mov	r3, r2
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	4413      	add	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	440b      	add	r3, r1
 80022ca:	3308      	adds	r3, #8
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	e013      	b.n	80022fa <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	4916      	ldr	r1, [pc, #88]	; (8002330 <RescheduleTimerList+0x128>)
 80022d6:	4613      	mov	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4413      	add	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	440b      	add	r3, r1
 80022e0:	3308      	adds	r3, #8
 80022e2:	6819      	ldr	r1, [r3, #0]
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	7bfa      	ldrb	r2, [r7, #15]
 80022e8:	1ac9      	subs	r1, r1, r3
 80022ea:	4811      	ldr	r0, [pc, #68]	; (8002330 <RescheduleTimerList+0x128>)
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4403      	add	r3, r0
 80022f6:	3308      	adds	r3, #8
 80022f8:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	490c      	ldr	r1, [pc, #48]	; (8002330 <RescheduleTimerList+0x128>)
 80022fe:	4613      	mov	r3, r2
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	4413      	add	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	440b      	add	r3, r1
 8002308:	3315      	adds	r3, #21
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	2b06      	cmp	r3, #6
 8002312:	d1c7      	bne.n	80022a4 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002314:	89bb      	ldrh	r3, [r7, #12]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff ff1e 	bl	8002158 <RestartWakeupCounter>

  return ;
 800231c:	bf00      	nop
}
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40002800 	.word	0x40002800
 8002328:	200004fc 	.word	0x200004fc
 800232c:	200002a4 	.word	0x200002a4
 8002330:	20000214 	.word	0x20000214
 8002334:	200002ac 	.word	0x200002ac
 8002338:	200002b2 	.word	0x200002b2

0800233c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	; 0x28
 8002340:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002342:	f3ef 8310 	mrs	r3, PRIMASK
 8002346:	617b      	str	r3, [r7, #20]
  return(result);
 8002348:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800234c:	b672      	cpsid	i
}
 800234e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002350:	4b59      	ldr	r3, [pc, #356]	; (80024b8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	22ca      	movs	r2, #202	; 0xca
 8002356:	625a      	str	r2, [r3, #36]	; 0x24
 8002358:	4b57      	ldr	r3, [pc, #348]	; (80024b8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2253      	movs	r2, #83	; 0x53
 800235e:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002360:	4b55      	ldr	r3, [pc, #340]	; (80024b8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	4b54      	ldr	r3, [pc, #336]	; (80024b8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800236e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002370:	4b52      	ldr	r3, [pc, #328]	; (80024bc <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002378:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800237c:	4950      	ldr	r1, [pc, #320]	; (80024c0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800237e:	4613      	mov	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4413      	add	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	440b      	add	r3, r1
 8002388:	330c      	adds	r3, #12
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d16e      	bne.n	8002470 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002392:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002396:	494a      	ldr	r1, [pc, #296]	; (80024c0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002398:	4613      	mov	r3, r2
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	4413      	add	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	440b      	add	r3, r1
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80023a6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80023aa:	4945      	ldr	r1, [pc, #276]	; (80024c0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80023ac:	4613      	mov	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4413      	add	r3, r2
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	440b      	add	r3, r1
 80023b6:	3310      	adds	r3, #16
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80023bc:	4b41      	ldr	r3, [pc, #260]	; (80024c4 <HW_TS_RTC_Wakeup_Handler+0x188>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d04c      	beq.n	8002460 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80023c6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80023ca:	493d      	ldr	r1, [pc, #244]	; (80024c0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80023cc:	4613      	mov	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4413      	add	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	440b      	add	r3, r1
 80023d6:	330d      	adds	r3, #13
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d124      	bne.n	800242a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80023e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80023e4:	2101      	movs	r1, #1
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7ff fdf2 	bl	8001fd0 <UnlinkTimer>
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	f383 8810 	msr	PRIMASK, r3
}
 80023f6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80023f8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80023fc:	4930      	ldr	r1, [pc, #192]	; (80024c0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80023fe:	4613      	mov	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	4413      	add	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	440b      	add	r3, r1
 8002408:	3304      	adds	r3, #4
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002410:	4611      	mov	r1, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f000 fa32 	bl	800287c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002418:	4b27      	ldr	r3, [pc, #156]	; (80024b8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	22ca      	movs	r2, #202	; 0xca
 800241e:	625a      	str	r2, [r3, #36]	; 0x24
 8002420:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2253      	movs	r2, #83	; 0x53
 8002426:	625a      	str	r2, [r3, #36]	; 0x24
 8002428:	e012      	b.n	8002450 <HW_TS_RTC_Wakeup_Handler+0x114>
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f383 8810 	msr	PRIMASK, r3
}
 8002434:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002436:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800243a:	4618      	mov	r0, r3
 800243c:	f000 f99a 	bl	8002774 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002440:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	22ca      	movs	r2, #202	; 0xca
 8002446:	625a      	str	r2, [r3, #36]	; 0x24
 8002448:	4b1b      	ldr	r3, [pc, #108]	; (80024b8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2253      	movs	r2, #83	; 0x53
 800244e:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002450:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	4619      	mov	r1, r3
 8002458:	69b8      	ldr	r0, [r7, #24]
 800245a:	f000 fa95 	bl	8002988 <HW_TS_RTC_Int_AppNot>
 800245e:	e022      	b.n	80024a6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002460:	f7ff fed2 	bl	8002208 <RescheduleTimerList>
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f383 8810 	msr	PRIMASK, r3
}
 800246e:	e01a      	b.n	80024a6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002470:	bf00      	nop
 8002472:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f8      	beq.n	8002472 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002480:	4b0d      	ldr	r3, [pc, #52]	; (80024b8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	b2da      	uxtb	r2, r3
 8002488:	4b0b      	ldr	r3, [pc, #44]	; (80024b8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002490:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002492:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002494:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f383 8810 	msr	PRIMASK, r3
}
 80024a4:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80024a6:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	22ff      	movs	r2, #255	; 0xff
 80024ac:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80024ae:	bf00      	nop
}
 80024b0:	3728      	adds	r7, #40	; 0x28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	200004fc 	.word	0x200004fc
 80024bc:	200002a4 	.word	0x200002a4
 80024c0:	20000214 	.word	0x20000214
 80024c4:	200002ac 	.word	0x200002ac
 80024c8:	58000800 	.word	0x58000800

080024cc <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	6039      	str	r1, [r7, #0]
 80024d6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80024d8:	4b5e      	ldr	r3, [pc, #376]	; (8002654 <HW_TS_Init+0x188>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	22ca      	movs	r2, #202	; 0xca
 80024de:	625a      	str	r2, [r3, #36]	; 0x24
 80024e0:	4b5c      	ldr	r3, [pc, #368]	; (8002654 <HW_TS_Init+0x188>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2253      	movs	r2, #83	; 0x53
 80024e6:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80024e8:	4b5b      	ldr	r3, [pc, #364]	; (8002658 <HW_TS_Init+0x18c>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	4a5a      	ldr	r2, [pc, #360]	; (8002658 <HW_TS_Init+0x18c>)
 80024ee:	f043 0320 	orr.w	r3, r3, #32
 80024f2:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80024f4:	4b58      	ldr	r3, [pc, #352]	; (8002658 <HW_TS_Init+0x18c>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	f1c3 0304 	rsb	r3, r3, #4
 8002504:	b2da      	uxtb	r2, r3
 8002506:	4b55      	ldr	r3, [pc, #340]	; (800265c <HW_TS_Init+0x190>)
 8002508:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800250a:	4b53      	ldr	r3, [pc, #332]	; (8002658 <HW_TS_Init+0x18c>)
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002512:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8002516:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	fa92 f2a2 	rbit	r2, r2
 800251e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	2a00      	cmp	r2, #0
 8002528:	d101      	bne.n	800252e <HW_TS_Init+0x62>
  {
    return 32U;
 800252a:	2220      	movs	r2, #32
 800252c:	e003      	b.n	8002536 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	fab2 f282 	clz	r2, r2
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	40d3      	lsrs	r3, r2
 8002538:	b2db      	uxtb	r3, r3
 800253a:	3301      	adds	r3, #1
 800253c:	b2da      	uxtb	r2, r3
 800253e:	4b48      	ldr	r3, [pc, #288]	; (8002660 <HW_TS_Init+0x194>)
 8002540:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002542:	4b45      	ldr	r3, [pc, #276]	; (8002658 <HW_TS_Init+0x18c>)
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	b29b      	uxth	r3, r3
 8002548:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800254c:	b29b      	uxth	r3, r3
 800254e:	3301      	adds	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	4b44      	ldr	r3, [pc, #272]	; (8002664 <HW_TS_Init+0x198>)
 8002554:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002556:	4b43      	ldr	r3, [pc, #268]	; (8002664 <HW_TS_Init+0x198>)
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	3b01      	subs	r3, #1
 800255c:	4a40      	ldr	r2, [pc, #256]	; (8002660 <HW_TS_Init+0x194>)
 800255e:	7812      	ldrb	r2, [r2, #0]
 8002560:	fb02 f303 	mul.w	r3, r2, r3
 8002564:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002568:	4a3c      	ldr	r2, [pc, #240]	; (800265c <HW_TS_Init+0x190>)
 800256a:	7812      	ldrb	r2, [r2, #0]
 800256c:	40d3      	lsrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002576:	4293      	cmp	r3, r2
 8002578:	d904      	bls.n	8002584 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800257a:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <HW_TS_Init+0x19c>)
 800257c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002580:	801a      	strh	r2, [r3, #0]
 8002582:	e003      	b.n	800258c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	b29a      	uxth	r2, r3
 8002588:	4b37      	ldr	r3, [pc, #220]	; (8002668 <HW_TS_Init+0x19c>)
 800258a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800258c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002590:	f7ff fb9c 	bl	8001ccc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002594:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002598:	f7ff fb84 	bl	8001ca4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800259c:	79fb      	ldrb	r3, [r7, #7]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d13d      	bne.n	800261e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80025a2:	4b32      	ldr	r3, [pc, #200]	; (800266c <HW_TS_Init+0x1a0>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80025a8:	4b31      	ldr	r3, [pc, #196]	; (8002670 <HW_TS_Init+0x1a4>)
 80025aa:	f04f 32ff 	mov.w	r2, #4294967295
 80025ae:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80025b0:	2300      	movs	r3, #0
 80025b2:	77fb      	strb	r3, [r7, #31]
 80025b4:	e00c      	b.n	80025d0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80025b6:	7ffa      	ldrb	r2, [r7, #31]
 80025b8:	492e      	ldr	r1, [pc, #184]	; (8002674 <HW_TS_Init+0x1a8>)
 80025ba:	4613      	mov	r3, r2
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	4413      	add	r3, r2
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	440b      	add	r3, r1
 80025c4:	330c      	adds	r3, #12
 80025c6:	2200      	movs	r2, #0
 80025c8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80025ca:	7ffb      	ldrb	r3, [r7, #31]
 80025cc:	3301      	adds	r3, #1
 80025ce:	77fb      	strb	r3, [r7, #31]
 80025d0:	7ffb      	ldrb	r3, [r7, #31]
 80025d2:	2b05      	cmp	r3, #5
 80025d4:	d9ef      	bls.n	80025b6 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80025d6:	4b28      	ldr	r3, [pc, #160]	; (8002678 <HW_TS_Init+0x1ac>)
 80025d8:	2206      	movs	r2, #6
 80025da:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80025dc:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <HW_TS_Init+0x188>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689a      	ldr	r2, [r3, #8]
 80025e2:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <HW_TS_Init+0x188>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ea:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80025ec:	4b19      	ldr	r3, [pc, #100]	; (8002654 <HW_TS_Init+0x188>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	4b17      	ldr	r3, [pc, #92]	; (8002654 <HW_TS_Init+0x188>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80025fc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80025fe:	4b1f      	ldr	r3, [pc, #124]	; (800267c <HW_TS_Init+0x1b0>)
 8002600:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002604:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002606:	2003      	movs	r0, #3
 8002608:	f001 fcdf 	bl	8003fca <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800260c:	4b11      	ldr	r3, [pc, #68]	; (8002654 <HW_TS_Init+0x188>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	4b10      	ldr	r3, [pc, #64]	; (8002654 <HW_TS_Init+0x188>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800261a:	609a      	str	r2, [r3, #8]
 800261c:	e009      	b.n	8002632 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800261e:	4b0d      	ldr	r3, [pc, #52]	; (8002654 <HW_TS_Init+0x188>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002628:	2b00      	cmp	r3, #0
 800262a:	d002      	beq.n	8002632 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800262c:	2003      	movs	r0, #3
 800262e:	f001 fcbe 	bl	8003fae <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002632:	4b08      	ldr	r3, [pc, #32]	; (8002654 <HW_TS_Init+0x188>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	22ff      	movs	r2, #255	; 0xff
 8002638:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800263a:	2200      	movs	r2, #0
 800263c:	2103      	movs	r1, #3
 800263e:	2003      	movs	r0, #3
 8002640:	f001 fc73 	bl	8003f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002644:	2003      	movs	r0, #3
 8002646:	f001 fc8a 	bl	8003f5e <HAL_NVIC_EnableIRQ>

  return;
 800264a:	bf00      	nop
}
 800264c:	3720      	adds	r7, #32
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	200004fc 	.word	0x200004fc
 8002658:	40002800 	.word	0x40002800
 800265c:	200002ad 	.word	0x200002ad
 8002660:	200002ae 	.word	0x200002ae
 8002664:	200002b0 	.word	0x200002b0
 8002668:	200002b2 	.word	0x200002b2
 800266c:	200002ac 	.word	0x200002ac
 8002670:	200002a8 	.word	0x200002a8
 8002674:	20000214 	.word	0x20000214
 8002678:	200002a4 	.word	0x200002a4
 800267c:	58000800 	.word	0x58000800

08002680 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002680:	b480      	push	{r7}
 8002682:	b08b      	sub	sp, #44	; 0x2c
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	4613      	mov	r3, r2
 800268e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002696:	f3ef 8310 	mrs	r3, PRIMASK
 800269a:	61fb      	str	r3, [r7, #28]
  return(result);
 800269c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800269e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80026a0:	b672      	cpsid	i
}
 80026a2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80026a4:	e004      	b.n	80026b0 <HW_TS_Create+0x30>
  {
    loop++;
 80026a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80026aa:	3301      	adds	r3, #1
 80026ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80026b0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80026b4:	2b05      	cmp	r3, #5
 80026b6:	d80c      	bhi.n	80026d2 <HW_TS_Create+0x52>
 80026b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80026bc:	492c      	ldr	r1, [pc, #176]	; (8002770 <HW_TS_Create+0xf0>)
 80026be:	4613      	mov	r3, r2
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	4413      	add	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	440b      	add	r3, r1
 80026c8:	330c      	adds	r3, #12
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1e9      	bne.n	80026a6 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80026d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80026d6:	2b06      	cmp	r3, #6
 80026d8:	d038      	beq.n	800274c <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80026da:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80026de:	4924      	ldr	r1, [pc, #144]	; (8002770 <HW_TS_Create+0xf0>)
 80026e0:	4613      	mov	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	00db      	lsls	r3, r3, #3
 80026e8:	440b      	add	r3, r1
 80026ea:	330c      	adds	r3, #12
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	f383 8810 	msr	PRIMASK, r3
}
 80026fa:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80026fc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002700:	491b      	ldr	r1, [pc, #108]	; (8002770 <HW_TS_Create+0xf0>)
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	440b      	add	r3, r1
 800270c:	3310      	adds	r3, #16
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8002712:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002716:	4916      	ldr	r1, [pc, #88]	; (8002770 <HW_TS_Create+0xf0>)
 8002718:	4613      	mov	r3, r2
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	4413      	add	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	440b      	add	r3, r1
 8002722:	330d      	adds	r3, #13
 8002724:	79fa      	ldrb	r2, [r7, #7]
 8002726:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002728:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800272c:	4910      	ldr	r1, [pc, #64]	; (8002770 <HW_TS_Create+0xf0>)
 800272e:	4613      	mov	r3, r2
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	4413      	add	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	440b      	add	r3, r1
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002742:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8002744:	2300      	movs	r3, #0
 8002746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800274a:	e008      	b.n	800275e <HW_TS_Create+0xde>
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f383 8810 	msr	PRIMASK, r3
}
 8002756:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002758:	2301      	movs	r3, #1
 800275a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 800275e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002762:	4618      	mov	r0, r3
 8002764:	372c      	adds	r7, #44	; 0x2c
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	20000214 	.word	0x20000214

08002774 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800277e:	f3ef 8310 	mrs	r3, PRIMASK
 8002782:	60fb      	str	r3, [r7, #12]
  return(result);
 8002784:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002786:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002788:	b672      	cpsid	i
}
 800278a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800278c:	2003      	movs	r0, #3
 800278e:	f001 fbf4 	bl	8003f7a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002792:	4b34      	ldr	r3, [pc, #208]	; (8002864 <HW_TS_Stop+0xf0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	22ca      	movs	r2, #202	; 0xca
 8002798:	625a      	str	r2, [r3, #36]	; 0x24
 800279a:	4b32      	ldr	r3, [pc, #200]	; (8002864 <HW_TS_Stop+0xf0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2253      	movs	r2, #83	; 0x53
 80027a0:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80027a2:	79fa      	ldrb	r2, [r7, #7]
 80027a4:	4930      	ldr	r1, [pc, #192]	; (8002868 <HW_TS_Stop+0xf4>)
 80027a6:	4613      	mov	r3, r2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4413      	add	r3, r2
 80027ac:	00db      	lsls	r3, r3, #3
 80027ae:	440b      	add	r3, r1
 80027b0:	330c      	adds	r3, #12
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d142      	bne.n	8002840 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff fc06 	bl	8001fd0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80027c4:	4b29      	ldr	r3, [pc, #164]	; (800286c <HW_TS_Stop+0xf8>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80027ca:	7cfb      	ldrb	r3, [r7, #19]
 80027cc:	2b06      	cmp	r3, #6
 80027ce:	d12f      	bne.n	8002830 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80027d0:	4b27      	ldr	r3, [pc, #156]	; (8002870 <HW_TS_Stop+0xfc>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027dc:	d107      	bne.n	80027ee <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80027de:	bf00      	nop
 80027e0:	4b20      	ldr	r3, [pc, #128]	; (8002864 <HW_TS_Stop+0xf0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f8      	bne.n	80027e0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80027ee:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <HW_TS_Stop+0xf0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <HW_TS_Stop+0xf0>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027fc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80027fe:	bf00      	nop
 8002800:	4b18      	ldr	r3, [pc, #96]	; (8002864 <HW_TS_Stop+0xf0>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f8      	beq.n	8002800 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800280e:	4b15      	ldr	r3, [pc, #84]	; (8002864 <HW_TS_Stop+0xf0>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	b2da      	uxtb	r2, r3
 8002816:	4b13      	ldr	r3, [pc, #76]	; (8002864 <HW_TS_Stop+0xf0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800281e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002820:	4b14      	ldr	r3, [pc, #80]	; (8002874 <HW_TS_Stop+0x100>)
 8002822:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002826:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002828:	2003      	movs	r0, #3
 800282a:	f001 fbce 	bl	8003fca <HAL_NVIC_ClearPendingIRQ>
 800282e:	e007      	b.n	8002840 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <HW_TS_Stop+0x104>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	b2db      	uxtb	r3, r3
 8002836:	7cfa      	ldrb	r2, [r7, #19]
 8002838:	429a      	cmp	r2, r3
 800283a:	d001      	beq.n	8002840 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800283c:	f7ff fce4 	bl	8002208 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002840:	4b08      	ldr	r3, [pc, #32]	; (8002864 <HW_TS_Stop+0xf0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	22ff      	movs	r2, #255	; 0xff
 8002846:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002848:	2003      	movs	r0, #3
 800284a:	f001 fb88 	bl	8003f5e <HAL_NVIC_EnableIRQ>
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	f383 8810 	msr	PRIMASK, r3
}
 8002858:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800285a:	bf00      	nop
}
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	200004fc 	.word	0x200004fc
 8002868:	20000214 	.word	0x20000214
 800286c:	200002a4 	.word	0x200002a4
 8002870:	40002800 	.word	0x40002800
 8002874:	58000800 	.word	0x58000800
 8002878:	200002a5 	.word	0x200002a5

0800287c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	6039      	str	r1, [r7, #0]
 8002886:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002888:	79fa      	ldrb	r2, [r7, #7]
 800288a:	493b      	ldr	r1, [pc, #236]	; (8002978 <HW_TS_Start+0xfc>)
 800288c:	4613      	mov	r3, r2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	4413      	add	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	440b      	add	r3, r1
 8002896:	330c      	adds	r3, #12
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d103      	bne.n	80028a8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff ff66 	bl	8002774 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028a8:	f3ef 8310 	mrs	r3, PRIMASK
 80028ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80028ae:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80028b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80028b2:	b672      	cpsid	i
}
 80028b4:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80028b6:	2003      	movs	r0, #3
 80028b8:	f001 fb5f 	bl	8003f7a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80028bc:	4b2f      	ldr	r3, [pc, #188]	; (800297c <HW_TS_Start+0x100>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	22ca      	movs	r2, #202	; 0xca
 80028c2:	625a      	str	r2, [r3, #36]	; 0x24
 80028c4:	4b2d      	ldr	r3, [pc, #180]	; (800297c <HW_TS_Start+0x100>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2253      	movs	r2, #83	; 0x53
 80028ca:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80028cc:	79fa      	ldrb	r2, [r7, #7]
 80028ce:	492a      	ldr	r1, [pc, #168]	; (8002978 <HW_TS_Start+0xfc>)
 80028d0:	4613      	mov	r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	4413      	add	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	440b      	add	r3, r1
 80028da:	330c      	adds	r3, #12
 80028dc:	2202      	movs	r2, #2
 80028de:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80028e0:	79fa      	ldrb	r2, [r7, #7]
 80028e2:	4925      	ldr	r1, [pc, #148]	; (8002978 <HW_TS_Start+0xfc>)
 80028e4:	4613      	mov	r3, r2
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	4413      	add	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	440b      	add	r3, r1
 80028ee:	3308      	adds	r3, #8
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80028f4:	79fa      	ldrb	r2, [r7, #7]
 80028f6:	4920      	ldr	r1, [pc, #128]	; (8002978 <HW_TS_Start+0xfc>)
 80028f8:	4613      	mov	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4413      	add	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	440b      	add	r3, r1
 8002902:	3304      	adds	r3, #4
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fab6 	bl	8001e7c <linkTimer>
 8002910:	4603      	mov	r3, r0
 8002912:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002914:	4b1a      	ldr	r3, [pc, #104]	; (8002980 <HW_TS_Start+0x104>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800291a:	4b1a      	ldr	r3, [pc, #104]	; (8002984 <HW_TS_Start+0x108>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	7c7a      	ldrb	r2, [r7, #17]
 8002922:	429a      	cmp	r2, r3
 8002924:	d002      	beq.n	800292c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002926:	f7ff fc6f 	bl	8002208 <RescheduleTimerList>
 800292a:	e013      	b.n	8002954 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800292c:	79fa      	ldrb	r2, [r7, #7]
 800292e:	4912      	ldr	r1, [pc, #72]	; (8002978 <HW_TS_Start+0xfc>)
 8002930:	4613      	mov	r3, r2
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	4413      	add	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	440b      	add	r3, r1
 800293a:	3308      	adds	r3, #8
 800293c:	6819      	ldr	r1, [r3, #0]
 800293e:	8a7b      	ldrh	r3, [r7, #18]
 8002940:	79fa      	ldrb	r2, [r7, #7]
 8002942:	1ac9      	subs	r1, r1, r3
 8002944:	480c      	ldr	r0, [pc, #48]	; (8002978 <HW_TS_Start+0xfc>)
 8002946:	4613      	mov	r3, r2
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	4413      	add	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4403      	add	r3, r0
 8002950:	3308      	adds	r3, #8
 8002952:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002954:	4b09      	ldr	r3, [pc, #36]	; (800297c <HW_TS_Start+0x100>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	22ff      	movs	r2, #255	; 0xff
 800295a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800295c:	2003      	movs	r0, #3
 800295e:	f001 fafe 	bl	8003f5e <HAL_NVIC_EnableIRQ>
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f383 8810 	msr	PRIMASK, r3
}
 800296c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800296e:	bf00      	nop
}
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20000214 	.word	0x20000214
 800297c:	200004fc 	.word	0x200004fc
 8002980:	200002a4 	.word	0x200002a4
 8002984:	200002a5 	.word	0x200002a5

08002988 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	460b      	mov	r3, r1
 8002992:	607a      	str	r2, [r7, #4]
 8002994:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4798      	blx	r3

  return;
 800299a:	bf00      	nop
}
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	4603      	mov	r3, r0
 80029b0:	73fb      	strb	r3, [r7, #15]
 80029b2:	4613      	mov	r3, r2
 80029b4:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d002      	beq.n	80029c2 <HW_UART_Receive_IT+0x1e>
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d00d      	beq.n	80029dc <HW_UART_Receive_IT+0x38>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 80029c0:	e019      	b.n	80029f6 <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(huart1, USART1);
 80029c2:	4a0f      	ldr	r2, [pc, #60]	; (8002a00 <HW_UART_Receive_IT+0x5c>)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <HW_UART_Receive_IT+0x60>)
 80029ca:	4a0f      	ldr	r2, [pc, #60]	; (8002a08 <HW_UART_Receive_IT+0x64>)
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	89bb      	ldrh	r3, [r7, #12]
 80029d0:	461a      	mov	r2, r3
 80029d2:	68b9      	ldr	r1, [r7, #8]
 80029d4:	480b      	ldr	r0, [pc, #44]	; (8002a04 <HW_UART_Receive_IT+0x60>)
 80029d6:	f005 f983 	bl	8007ce0 <HAL_UART_Receive_IT>
            break;
 80029da:	e00c      	b.n	80029f6 <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(hlpuart1, LPUART1);
 80029dc:	4a0b      	ldr	r2, [pc, #44]	; (8002a0c <HW_UART_Receive_IT+0x68>)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6013      	str	r3, [r2, #0]
 80029e2:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HW_UART_Receive_IT+0x6c>)
 80029e4:	4a0b      	ldr	r2, [pc, #44]	; (8002a14 <HW_UART_Receive_IT+0x70>)
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	89bb      	ldrh	r3, [r7, #12]
 80029ea:	461a      	mov	r2, r3
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	4808      	ldr	r0, [pc, #32]	; (8002a10 <HW_UART_Receive_IT+0x6c>)
 80029f0:	f005 f976 	bl	8007ce0 <HAL_UART_Receive_IT>
            break;
 80029f4:	bf00      	nop
    }

    return;
 80029f6:	bf00      	nop
}
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	200002b4 	.word	0x200002b4
 8002a04:	20000394 	.word	0x20000394
 8002a08:	40013800 	.word	0x40013800
 8002a0c:	200002bc 	.word	0x200002bc
 8002a10:	20000300 	.word	0x20000300
 8002a14:	40008000 	.word	0x40008000

08002a18 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60b9      	str	r1, [r7, #8]
 8002a20:	607b      	str	r3, [r7, #4]
 8002a22:	4603      	mov	r3, r0
 8002a24:	73fb      	strb	r3, [r7, #15]
 8002a26:	4613      	mov	r3, r2
 8002a28:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <HW_UART_Transmit_DMA+0x26>
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d00f      	beq.n	8002a5c <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8002a3c:	e01d      	b.n	8002a7a <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 8002a3e:	4a1f      	ldr	r2, [pc, #124]	; (8002abc <HW_UART_Transmit_DMA+0xa4>)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8002a44:	4b1e      	ldr	r3, [pc, #120]	; (8002ac0 <HW_UART_Transmit_DMA+0xa8>)
 8002a46:	4a1f      	ldr	r2, [pc, #124]	; (8002ac4 <HW_UART_Transmit_DMA+0xac>)
 8002a48:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002a4a:	89bb      	ldrh	r3, [r7, #12]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68b9      	ldr	r1, [r7, #8]
 8002a50:	481b      	ldr	r0, [pc, #108]	; (8002ac0 <HW_UART_Transmit_DMA+0xa8>)
 8002a52:	f005 f991 	bl	8007d78 <HAL_UART_Transmit_DMA>
 8002a56:	4603      	mov	r3, r0
 8002a58:	75fb      	strb	r3, [r7, #23]
            break;
 8002a5a:	e00e      	b.n	8002a7a <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 8002a5c:	4a1a      	ldr	r2, [pc, #104]	; (8002ac8 <HW_UART_Transmit_DMA+0xb0>)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 8002a62:	4b1a      	ldr	r3, [pc, #104]	; (8002acc <HW_UART_Transmit_DMA+0xb4>)
 8002a64:	4a1a      	ldr	r2, [pc, #104]	; (8002ad0 <HW_UART_Transmit_DMA+0xb8>)
 8002a66:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8002a68:	89bb      	ldrh	r3, [r7, #12]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	4817      	ldr	r0, [pc, #92]	; (8002acc <HW_UART_Transmit_DMA+0xb4>)
 8002a70:	f005 f982 	bl	8007d78 <HAL_UART_Transmit_DMA>
 8002a74:	4603      	mov	r3, r0
 8002a76:	75fb      	strb	r3, [r7, #23]
            break;
 8002a78:	bf00      	nop
    }

    switch (hal_status)
 8002a7a:	7dfb      	ldrb	r3, [r7, #23]
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d817      	bhi.n	8002ab0 <HW_UART_Transmit_DMA+0x98>
 8002a80:	a201      	add	r2, pc, #4	; (adr r2, 8002a88 <HW_UART_Transmit_DMA+0x70>)
 8002a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a86:	bf00      	nop
 8002a88:	08002a99 	.word	0x08002a99
 8002a8c:	08002a9f 	.word	0x08002a9f
 8002a90:	08002aa5 	.word	0x08002aa5
 8002a94:	08002aab 	.word	0x08002aab
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	75bb      	strb	r3, [r7, #22]
            break;
 8002a9c:	e009      	b.n	8002ab2 <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	75bb      	strb	r3, [r7, #22]
            break;
 8002aa2:	e006      	b.n	8002ab2 <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	75bb      	strb	r3, [r7, #22]
            break;
 8002aa8:	e003      	b.n	8002ab2 <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	75bb      	strb	r3, [r7, #22]
            break;
 8002aae:	e000      	b.n	8002ab2 <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 8002ab0:	bf00      	nop
    }

    return hw_status;
 8002ab2:	7dbb      	ldrb	r3, [r7, #22]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	200002b8 	.word	0x200002b8
 8002ac0:	20000394 	.word	0x20000394
 8002ac4:	40013800 	.word	0x40013800
 8002ac8:	200002c0 	.word	0x200002c0
 8002acc:	20000300 	.word	0x20000300
 8002ad0:	40008000 	.word	0x40008000

08002ad4 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a0f      	ldr	r2, [pc, #60]	; (8002b20 <HAL_UART_RxCpltCallback+0x4c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d00a      	beq.n	8002afc <HAL_UART_RxCpltCallback+0x28>
 8002ae6:	4a0f      	ldr	r2, [pc, #60]	; (8002b24 <HAL_UART_RxCpltCallback+0x50>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d10f      	bne.n	8002b0c <HAL_UART_RxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8002aec:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <HAL_UART_RxCpltCallback+0x54>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00d      	beq.n	8002b10 <HAL_UART_RxCpltCallback+0x3c>
            {
                HW_huart1RxCb();
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <HAL_UART_RxCpltCallback+0x54>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4798      	blx	r3
            }
            break;
 8002afa:	e009      	b.n	8002b10 <HAL_UART_RxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1RxCb)
 8002afc:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <HAL_UART_RxCpltCallback+0x58>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d007      	beq.n	8002b14 <HAL_UART_RxCpltCallback+0x40>
            {
                HW_hlpuart1RxCb();
 8002b04:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <HAL_UART_RxCpltCallback+0x58>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4798      	blx	r3
            }
            break;
 8002b0a:	e003      	b.n	8002b14 <HAL_UART_RxCpltCallback+0x40>
#endif

        default:
            break;
 8002b0c:	bf00      	nop
 8002b0e:	e002      	b.n	8002b16 <HAL_UART_RxCpltCallback+0x42>
            break;
 8002b10:	bf00      	nop
 8002b12:	e000      	b.n	8002b16 <HAL_UART_RxCpltCallback+0x42>
            break;
 8002b14:	bf00      	nop
    }

    return;
 8002b16:	bf00      	nop
}
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40008000 	.word	0x40008000
 8002b24:	40013800 	.word	0x40013800
 8002b28:	200002b4 	.word	0x200002b4
 8002b2c:	200002bc 	.word	0x200002bc

08002b30 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a0f      	ldr	r2, [pc, #60]	; (8002b7c <HAL_UART_TxCpltCallback+0x4c>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00a      	beq.n	8002b58 <HAL_UART_TxCpltCallback+0x28>
 8002b42:	4a0f      	ldr	r2, [pc, #60]	; (8002b80 <HAL_UART_TxCpltCallback+0x50>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d10f      	bne.n	8002b68 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002b48:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <HAL_UART_TxCpltCallback+0x54>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00d      	beq.n	8002b6c <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 8002b50:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <HAL_UART_TxCpltCallback+0x54>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4798      	blx	r3
            }
            break;
 8002b56:	e009      	b.n	8002b6c <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_UART_TxCpltCallback+0x58>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d007      	beq.n	8002b70 <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 8002b60:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <HAL_UART_TxCpltCallback+0x58>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4798      	blx	r3
            }
            break;
 8002b66:	e003      	b.n	8002b70 <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 8002b68:	bf00      	nop
 8002b6a:	e002      	b.n	8002b72 <HAL_UART_TxCpltCallback+0x42>
            break;
 8002b6c:	bf00      	nop
 8002b6e:	e000      	b.n	8002b72 <HAL_UART_TxCpltCallback+0x42>
            break;
 8002b70:	bf00      	nop
    }

    return;
 8002b72:	bf00      	nop
}
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40008000 	.word	0x40008000
 8002b80:	40013800 	.word	0x40013800
 8002b84:	200002b8 	.word	0x200002b8
 8002b88:	200002c0 	.word	0x200002c0

08002b8c <LL_RCC_LSE_SetDriveCapability>:
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9c:	f023 0218 	bic.w	r2, r3, #24
 8002ba0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LL_AHB1_GRP1_EnableClock>:
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
}
 8002bde:	bf00      	nop
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <LL_AHB2_GRP1_EnableClock>:
{
 8002bea:	b480      	push	{r7}
 8002bec:	b085      	sub	sp, #20
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002bf8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
}
 8002c10:	bf00      	nop
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c20:	f000 ffaa 	bl	8003b78 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002c24:	f7fe fb34 	bl	8001290 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c28:	f000 f818 	bl	8002c5c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002c2c:	f000 f874 	bl	8002d18 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002c30:	f000 f892 	bl	8002d58 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c34:	f000 fa66 	bl	8003104 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c38:	f000 fa46 	bl	80030c8 <MX_DMA_Init>
  MX_RTC_Init();
 8002c3c:	f000 f90c 	bl	8002e58 <MX_RTC_Init>
  MX_RNG_Init();
 8002c40:	f000 f8f4 	bl	8002e2c <MX_RNG_Init>
  MX_TIM1_Init();
 8002c44:	f000 f93c 	bl	8002ec0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002c48:	f000 f9ea 	bl	8003020 <MX_TIM2_Init>
  MX_RF_Init();
 8002c4c:	f000 f8e6 	bl	8002e1c <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002c50:	f7fe fb2c 	bl	80012ac <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002c54:	f7fe fd6b 	bl	800172e <MX_APPE_Process>
 8002c58:	e7fc      	b.n	8002c54 <main+0x38>
	...

08002c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b09a      	sub	sp, #104	; 0x68
 8002c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c62:	f107 0320 	add.w	r3, r7, #32
 8002c66:	2248      	movs	r2, #72	; 0x48
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f00c f8ac 	bl	800edc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c70:	1d3b      	adds	r3, r7, #4
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	605a      	str	r2, [r3, #4]
 8002c78:	609a      	str	r2, [r3, #8]
 8002c7a:	60da      	str	r2, [r3, #12]
 8002c7c:	611a      	str	r2, [r3, #16]
 8002c7e:	615a      	str	r2, [r3, #20]
 8002c80:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002c82:	f001 ff8f 	bl	8004ba4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002c86:	2000      	movs	r0, #0
 8002c88:	f7ff ff80 	bl	8002b8c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c8c:	4b21      	ldr	r3, [pc, #132]	; (8002d14 <SystemClock_Config+0xb8>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c94:	4a1f      	ldr	r2, [pc, #124]	; (8002d14 <SystemClock_Config+0xb8>)
 8002c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	4b1d      	ldr	r3, [pc, #116]	; (8002d14 <SystemClock_Config+0xb8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ca4:	603b      	str	r3, [r7, #0]
 8002ca6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8002ca8:	2347      	movs	r3, #71	; 0x47
 8002caa:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002cac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cc0:	2340      	movs	r3, #64	; 0x40
 8002cc2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cc8:	f107 0320 	add.w	r3, r7, #32
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f002 fafd 	bl	80052cc <HAL_RCC_OscConfig>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002cd8:	f000 fa98 	bl	800320c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002cdc:	236f      	movs	r3, #111	; 0x6f
 8002cde:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002cf8:	1d3b      	adds	r3, r7, #4
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f002 fe59 	bl	80059b4 <HAL_RCC_ClockConfig>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002d08:	f000 fa80 	bl	800320c <Error_Handler>
  }
}
 8002d0c:	bf00      	nop
 8002d0e:	3768      	adds	r7, #104	; 0x68
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	58000400 	.word	0x58000400

08002d18 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b094      	sub	sp, #80	; 0x50
 8002d1c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d1e:	463b      	mov	r3, r7
 8002d20:	2250      	movs	r2, #80	; 0x50
 8002d22:	2100      	movs	r1, #0
 8002d24:	4618      	mov	r0, r3
 8002d26:	f00c f84f 	bl	800edc8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002d2a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002d2e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002d30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d34:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002d36:	2302      	movs	r3, #2
 8002d38:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002d3a:	2310      	movs	r3, #16
 8002d3c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d3e:	463b      	mov	r3, r7
 8002d40:	4618      	mov	r0, r3
 8002d42:	f003 fa74 	bl	800622e <HAL_RCCEx_PeriphCLKConfig>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002d4c:	f000 fa5e 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002d50:	bf00      	nop
 8002d52:	3750      	adds	r7, #80	; 0x50
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <MX_IPCC_Init+0x20>)
 8002d5e:	4a07      	ldr	r2, [pc, #28]	; (8002d7c <MX_IPCC_Init+0x24>)
 8002d60:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002d62:	4805      	ldr	r0, [pc, #20]	; (8002d78 <MX_IPCC_Init+0x20>)
 8002d64:	f001 fe98 	bl	8004a98 <HAL_IPCC_Init>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002d6e:	f000 fa4d 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	200002c4 	.word	0x200002c4
 8002d7c:	58000c00 	.word	0x58000c00

08002d80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d84:	4b23      	ldr	r3, [pc, #140]	; (8002e14 <MX_USART1_UART_Init+0x94>)
 8002d86:	4a24      	ldr	r2, [pc, #144]	; (8002e18 <MX_USART1_UART_Init+0x98>)
 8002d88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d8a:	4b22      	ldr	r3, [pc, #136]	; (8002e14 <MX_USART1_UART_Init+0x94>)
 8002d8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d92:	4b20      	ldr	r3, [pc, #128]	; (8002e14 <MX_USART1_UART_Init+0x94>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d98:	4b1e      	ldr	r3, [pc, #120]	; (8002e14 <MX_USART1_UART_Init+0x94>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d9e:	4b1d      	ldr	r3, [pc, #116]	; (8002e14 <MX_USART1_UART_Init+0x94>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002da4:	4b1b      	ldr	r3, [pc, #108]	; (8002e14 <MX_USART1_UART_Init+0x94>)
 8002da6:	220c      	movs	r2, #12
 8002da8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002daa:	4b1a      	ldr	r3, [pc, #104]	; (8002e14 <MX_USART1_UART_Init+0x94>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002db0:	4b18      	ldr	r3, [pc, #96]	; (8002e14 <MX_USART1_UART_Init+0x94>)
 8002db2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002db6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002db8:	4b16      	ldr	r3, [pc, #88]	; (8002e14 <MX_USART1_UART_Init+0x94>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002dbe:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <MX_USART1_UART_Init+0x94>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dc4:	4b13      	ldr	r3, [pc, #76]	; (8002e14 <MX_USART1_UART_Init+0x94>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002dca:	4812      	ldr	r0, [pc, #72]	; (8002e14 <MX_USART1_UART_Init+0x94>)
 8002dcc:	f004 feaa 	bl	8007b24 <HAL_UART_Init>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002dd6:	f000 fa19 	bl	800320c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dda:	2100      	movs	r1, #0
 8002ddc:	480d      	ldr	r0, [pc, #52]	; (8002e14 <MX_USART1_UART_Init+0x94>)
 8002dde:	f006 ff8a 	bl	8009cf6 <HAL_UARTEx_SetTxFifoThreshold>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002de8:	f000 fa10 	bl	800320c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002dec:	2100      	movs	r1, #0
 8002dee:	4809      	ldr	r0, [pc, #36]	; (8002e14 <MX_USART1_UART_Init+0x94>)
 8002df0:	f006 ffbf 	bl	8009d72 <HAL_UARTEx_SetRxFifoThreshold>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002dfa:	f000 fa07 	bl	800320c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002dfe:	4805      	ldr	r0, [pc, #20]	; (8002e14 <MX_USART1_UART_Init+0x94>)
 8002e00:	f006 ff40 	bl	8009c84 <HAL_UARTEx_DisableFifoMode>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002e0a:	f000 f9ff 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	20000394 	.word	0x20000394
 8002e18:	40013800 	.word	0x40013800

08002e1c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002e20:	bf00      	nop
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
	...

08002e2c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002e30:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <MX_RNG_Init+0x24>)
 8002e32:	4a08      	ldr	r2, [pc, #32]	; (8002e54 <MX_RNG_Init+0x28>)
 8002e34:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <MX_RNG_Init+0x24>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002e3c:	4804      	ldr	r0, [pc, #16]	; (8002e50 <MX_RNG_Init+0x24>)
 8002e3e:	f003 fc7d 	bl	800673c <HAL_RNG_Init>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002e48:	f000 f9e0 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002e4c:	bf00      	nop
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	200004e8 	.word	0x200004e8
 8002e54:	58001000 	.word	0x58001000

08002e58 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002e5c:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <MX_RTC_Init+0x60>)
 8002e5e:	4a17      	ldr	r2, [pc, #92]	; (8002ebc <MX_RTC_Init+0x64>)
 8002e60:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002e62:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <MX_RTC_Init+0x60>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002e68:	4b13      	ldr	r3, [pc, #76]	; (8002eb8 <MX_RTC_Init+0x60>)
 8002e6a:	220f      	movs	r2, #15
 8002e6c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002e6e:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <MX_RTC_Init+0x60>)
 8002e70:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002e74:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002e76:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <MX_RTC_Init+0x60>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002e7c:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <MX_RTC_Init+0x60>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002e82:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <MX_RTC_Init+0x60>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002e88:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <MX_RTC_Init+0x60>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002e8e:	480a      	ldr	r0, [pc, #40]	; (8002eb8 <MX_RTC_Init+0x60>)
 8002e90:	f003 fc8a 	bl	80067a8 <HAL_RTC_Init>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002e9a:	f000 f9b7 	bl	800320c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	4805      	ldr	r0, [pc, #20]	; (8002eb8 <MX_RTC_Init+0x60>)
 8002ea4:	f003 fd80 	bl	80069a8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002eae:	f000 f9ad 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	200004fc 	.word	0x200004fc
 8002ebc:	40002800 	.word	0x40002800

08002ec0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b09c      	sub	sp, #112	; 0x70
 8002ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ec6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	605a      	str	r2, [r3, #4]
 8002ed0:	609a      	str	r2, [r3, #8]
 8002ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ed4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ee0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	60da      	str	r2, [r3, #12]
 8002eee:	611a      	str	r2, [r3, #16]
 8002ef0:	615a      	str	r2, [r3, #20]
 8002ef2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ef4:	1d3b      	adds	r3, r7, #4
 8002ef6:	2234      	movs	r2, #52	; 0x34
 8002ef8:	2100      	movs	r1, #0
 8002efa:	4618      	mov	r0, r3
 8002efc:	f00b ff64 	bl	800edc8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002f00:	4b45      	ldr	r3, [pc, #276]	; (8003018 <MX_TIM1_Init+0x158>)
 8002f02:	4a46      	ldr	r2, [pc, #280]	; (800301c <MX_TIM1_Init+0x15c>)
 8002f04:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002f06:	4b44      	ldr	r3, [pc, #272]	; (8003018 <MX_TIM1_Init+0x158>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f0c:	4b42      	ldr	r3, [pc, #264]	; (8003018 <MX_TIM1_Init+0x158>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8002f12:	4b41      	ldr	r3, [pc, #260]	; (8003018 <MX_TIM1_Init+0x158>)
 8002f14:	22ff      	movs	r2, #255	; 0xff
 8002f16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f18:	4b3f      	ldr	r3, [pc, #252]	; (8003018 <MX_TIM1_Init+0x158>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002f1e:	4b3e      	ldr	r3, [pc, #248]	; (8003018 <MX_TIM1_Init+0x158>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f24:	4b3c      	ldr	r3, [pc, #240]	; (8003018 <MX_TIM1_Init+0x158>)
 8002f26:	2280      	movs	r2, #128	; 0x80
 8002f28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002f2a:	483b      	ldr	r0, [pc, #236]	; (8003018 <MX_TIM1_Init+0x158>)
 8002f2c:	f003 fe2e 	bl	8006b8c <HAL_TIM_Base_Init>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002f36:	f000 f969 	bl	800320c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f3e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002f40:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002f44:	4619      	mov	r1, r3
 8002f46:	4834      	ldr	r0, [pc, #208]	; (8003018 <MX_TIM1_Init+0x158>)
 8002f48:	f004 f892 	bl	8007070 <HAL_TIM_ConfigClockSource>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002f52:	f000 f95b 	bl	800320c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002f56:	4830      	ldr	r0, [pc, #192]	; (8003018 <MX_TIM1_Init+0x158>)
 8002f58:	f003 fe6f 	bl	8006c3a <HAL_TIM_PWM_Init>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002f62:	f000 f953 	bl	800320c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f66:	2300      	movs	r3, #0
 8002f68:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002f72:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f76:	4619      	mov	r1, r3
 8002f78:	4827      	ldr	r0, [pc, #156]	; (8003018 <MX_TIM1_Init+0x158>)
 8002f7a:	f004 fccd 	bl	8007918 <HAL_TIMEx_MasterConfigSynchronization>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8002f84:	f000 f942 	bl	800320c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f88:	2360      	movs	r3, #96	; 0x60
 8002f8a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f90:	2300      	movs	r3, #0
 8002f92:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f94:	2300      	movs	r3, #0
 8002f96:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002fa4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002fa8:	2204      	movs	r2, #4
 8002faa:	4619      	mov	r1, r3
 8002fac:	481a      	ldr	r0, [pc, #104]	; (8003018 <MX_TIM1_Init+0x158>)
 8002fae:	f003 ff4b 	bl	8006e48 <HAL_TIM_PWM_ConfigChannel>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002fb8:	f000 f928 	bl	800320c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002fd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fd4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002fe2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002fec:	2300      	movs	r3, #0
 8002fee:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ff4:	1d3b      	adds	r3, r7, #4
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4807      	ldr	r0, [pc, #28]	; (8003018 <MX_TIM1_Init+0x158>)
 8002ffa:	f004 fced 	bl	80079d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8003004:	f000 f902 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003008:	4803      	ldr	r0, [pc, #12]	; (8003018 <MX_TIM1_Init+0x158>)
 800300a:	f000 fb5f 	bl	80036cc <HAL_TIM_MspPostInit>

}
 800300e:	bf00      	nop
 8003010:	3770      	adds	r7, #112	; 0x70
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000520 	.word	0x20000520
 800301c:	40012c00 	.word	0x40012c00

08003020 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08c      	sub	sp, #48	; 0x30
 8003024:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003026:	f107 030c 	add.w	r3, r7, #12
 800302a:	2224      	movs	r2, #36	; 0x24
 800302c:	2100      	movs	r1, #0
 800302e:	4618      	mov	r0, r3
 8003030:	f00b feca 	bl	800edc8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003034:	463b      	mov	r3, r7
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
 800303a:	605a      	str	r2, [r3, #4]
 800303c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800303e:	4b21      	ldr	r3, [pc, #132]	; (80030c4 <MX_TIM2_Init+0xa4>)
 8003040:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003044:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003046:	4b1f      	ldr	r3, [pc, #124]	; (80030c4 <MX_TIM2_Init+0xa4>)
 8003048:	2200      	movs	r2, #0
 800304a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800304c:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <MX_TIM2_Init+0xa4>)
 800304e:	2200      	movs	r2, #0
 8003050:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003052:	4b1c      	ldr	r3, [pc, #112]	; (80030c4 <MX_TIM2_Init+0xa4>)
 8003054:	f04f 32ff 	mov.w	r2, #4294967295
 8003058:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800305a:	4b1a      	ldr	r3, [pc, #104]	; (80030c4 <MX_TIM2_Init+0xa4>)
 800305c:	2200      	movs	r2, #0
 800305e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003060:	4b18      	ldr	r3, [pc, #96]	; (80030c4 <MX_TIM2_Init+0xa4>)
 8003062:	2200      	movs	r2, #0
 8003064:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003066:	2303      	movs	r3, #3
 8003068:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800306a:	2300      	movs	r3, #0
 800306c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800306e:	2301      	movs	r3, #1
 8003070:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003072:	2300      	movs	r3, #0
 8003074:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003076:	2300      	movs	r3, #0
 8003078:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800307a:	2300      	movs	r3, #0
 800307c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800307e:	2301      	movs	r3, #1
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003082:	2300      	movs	r3, #0
 8003084:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003086:	2300      	movs	r3, #0
 8003088:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800308a:	f107 030c 	add.w	r3, r7, #12
 800308e:	4619      	mov	r1, r3
 8003090:	480c      	ldr	r0, [pc, #48]	; (80030c4 <MX_TIM2_Init+0xa4>)
 8003092:	f003 fe33 	bl	8006cfc <HAL_TIM_Encoder_Init>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800309c:	f000 f8b6 	bl	800320c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030a0:	2300      	movs	r3, #0
 80030a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030a4:	2300      	movs	r3, #0
 80030a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030a8:	463b      	mov	r3, r7
 80030aa:	4619      	mov	r1, r3
 80030ac:	4805      	ldr	r0, [pc, #20]	; (80030c4 <MX_TIM2_Init+0xa4>)
 80030ae:	f004 fc33 	bl	8007918 <HAL_TIMEx_MasterConfigSynchronization>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80030b8:	f000 f8a8 	bl	800320c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80030bc:	bf00      	nop
 80030be:	3730      	adds	r7, #48	; 0x30
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	2000056c 	.word	0x2000056c

080030c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80030cc:	2004      	movs	r0, #4
 80030ce:	f7ff fd73 	bl	8002bb8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80030d2:	2001      	movs	r0, #1
 80030d4:	f7ff fd70 	bl	8002bb8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80030d8:	2002      	movs	r0, #2
 80030da:	f7ff fd6d 	bl	8002bb8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 80030de:	2200      	movs	r2, #0
 80030e0:	210f      	movs	r1, #15
 80030e2:	200e      	movs	r0, #14
 80030e4:	f000 ff21 	bl	8003f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80030e8:	200e      	movs	r0, #14
 80030ea:	f000 ff38 	bl	8003f5e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 80030ee:	2200      	movs	r2, #0
 80030f0:	210f      	movs	r1, #15
 80030f2:	203a      	movs	r0, #58	; 0x3a
 80030f4:	f000 ff19 	bl	8003f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80030f8:	203a      	movs	r0, #58	; 0x3a
 80030fa:	f000 ff30 	bl	8003f5e <HAL_NVIC_EnableIRQ>

}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800310a:	1d3b      	adds	r3, r7, #4
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	609a      	str	r2, [r3, #8]
 8003114:	60da      	str	r2, [r3, #12]
 8003116:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003118:	2004      	movs	r0, #4
 800311a:	f7ff fd66 	bl	8002bea <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800311e:	2001      	movs	r0, #1
 8003120:	f7ff fd63 	bl	8002bea <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003124:	2002      	movs	r0, #2
 8003126:	f7ff fd60 	bl	8002bea <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SysEnable_Pin|DirB_Pin, GPIO_PIN_RESET);
 800312a:	2200      	movs	r2, #0
 800312c:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8003130:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003134:	f001 fc5c 	bl	80049f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8003138:	2200      	movs	r2, #0
 800313a:	2123      	movs	r1, #35	; 0x23
 800313c:	481b      	ldr	r0, [pc, #108]	; (80031ac <MX_GPIO_Init+0xa8>)
 800313e:	f001 fc57 	bl	80049f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DirA_GPIO_Port, DirA_Pin, GPIO_PIN_RESET);
 8003142:	2200      	movs	r2, #0
 8003144:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003148:	4819      	ldr	r0, [pc, #100]	; (80031b0 <MX_GPIO_Init+0xac>)
 800314a:	f001 fc51 	bl	80049f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SysEnable_Pin DirB_Pin */
  GPIO_InitStruct.Pin = SysEnable_Pin|DirB_Pin;
 800314e:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8003152:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003154:	2301      	movs	r3, #1
 8003156:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003158:	2300      	movs	r3, #0
 800315a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800315c:	2300      	movs	r3, #0
 800315e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003160:	1d3b      	adds	r3, r7, #4
 8003162:	4619      	mov	r1, r3
 8003164:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003168:	f001 fad2 	bl	8004710 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800316c:	2323      	movs	r3, #35	; 0x23
 800316e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003170:	2301      	movs	r3, #1
 8003172:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003178:	2300      	movs	r3, #0
 800317a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800317c:	1d3b      	adds	r3, r7, #4
 800317e:	4619      	mov	r1, r3
 8003180:	480a      	ldr	r0, [pc, #40]	; (80031ac <MX_GPIO_Init+0xa8>)
 8003182:	f001 fac5 	bl	8004710 <HAL_GPIO_Init>

  /*Configure GPIO pin : DirA_Pin */
  GPIO_InitStruct.Pin = DirA_Pin;
 8003186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800318a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800318c:	2301      	movs	r3, #1
 800318e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003190:	2300      	movs	r3, #0
 8003192:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003194:	2300      	movs	r3, #0
 8003196:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DirA_GPIO_Port, &GPIO_InitStruct);
 8003198:	1d3b      	adds	r3, r7, #4
 800319a:	4619      	mov	r1, r3
 800319c:	4804      	ldr	r0, [pc, #16]	; (80031b0 <MX_GPIO_Init+0xac>)
 800319e:	f001 fab7 	bl	8004710 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80031a2:	bf00      	nop
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	48000400 	.word	0x48000400
 80031b0:	48000800 	.word	0x48000800

080031b4 <Get_Counter>:

/* USER CODE BEGIN 4 */
uint32_t Get_Counter(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2);
 80031b8:	4b03      	ldr	r3, [pc, #12]	; (80031c8 <Get_Counter+0x14>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80031be:	4618      	mov	r0, r3
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	2000056c 	.word	0x2000056c

080031cc <UART_Transmit>:

void UART_Transmit(char message[50])
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)message, sizeof(char)*50,10);
 80031d4:	230a      	movs	r3, #10
 80031d6:	2232      	movs	r2, #50	; 0x32
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4803      	ldr	r0, [pc, #12]	; (80031e8 <UART_Transmit+0x1c>)
 80031dc:	f004 fcf2 	bl	8007bc4 <HAL_UART_Transmit>
}
 80031e0:	bf00      	nop
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20000394 	.word	0x20000394

080031ec <Set_CCR>:

void Set_CCR(uint32_t CCR)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, CCR);
 80031f4:	4b04      	ldr	r3, [pc, #16]	; (8003208 <Set_CCR+0x1c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	20000520 	.word	0x20000520

0800320c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003210:	bf00      	nop
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <LL_RCC_EnableRTC>:
{
 800321a:	b480      	push	{r7}
 800321c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800321e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003226:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800322a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800322e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003232:	bf00      	nop
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <LL_AHB2_GRP1_EnableClock>:
{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003248:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800324a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4313      	orrs	r3, r2
 8003252:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003258:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4013      	ands	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003260:	68fb      	ldr	r3, [r7, #12]
}
 8003262:	bf00      	nop
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <LL_AHB3_GRP1_EnableClock>:
{
 800326e:	b480      	push	{r7}
 8003270:	b085      	sub	sp, #20
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003276:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800327a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800327c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4313      	orrs	r3, r2
 8003284:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800328a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4013      	ands	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003292:	68fb      	ldr	r3, [r7, #12]
}
 8003294:	bf00      	nop
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <LL_APB1_GRP1_EnableClock>:
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80032a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80032ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80032b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4013      	ands	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80032c4:	68fb      	ldr	r3, [r7, #12]
}
 80032c6:	bf00      	nop
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <LL_APB1_GRP2_EnableClock>:
{
 80032d2:	b480      	push	{r7}
 80032d4:	b085      	sub	sp, #20
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 80032da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80032ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4013      	ands	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80032f6:	68fb      	ldr	r3, [r7, #12]
}
 80032f8:	bf00      	nop
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <LL_APB2_GRP1_EnableClock>:
{
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800330c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003310:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003312:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4313      	orrs	r3, r2
 800331a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800331c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003320:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4013      	ands	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003328:	68fb      	ldr	r3, [r7, #12]
}
 800332a:	bf00      	nop
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800333a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800333e:	f7ff ff96 	bl	800326e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003342:	2200      	movs	r2, #0
 8003344:	2100      	movs	r1, #0
 8003346:	202e      	movs	r0, #46	; 0x2e
 8003348:	f000 fdef 	bl	8003f2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800334c:	202e      	movs	r0, #46	; 0x2e
 800334e:	f000 fe06 	bl	8003f5e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a0d      	ldr	r2, [pc, #52]	; (800339c <HAL_IPCC_MspInit+0x44>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d113      	bne.n	8003392 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800336a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800336e:	f7ff ff7e 	bl	800326e <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8003372:	2200      	movs	r2, #0
 8003374:	2100      	movs	r1, #0
 8003376:	202c      	movs	r0, #44	; 0x2c
 8003378:	f000 fdd7 	bl	8003f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800337c:	202c      	movs	r0, #44	; 0x2c
 800337e:	f000 fdee 	bl	8003f5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8003382:	2200      	movs	r2, #0
 8003384:	2100      	movs	r1, #0
 8003386:	202d      	movs	r0, #45	; 0x2d
 8003388:	f000 fdcf 	bl	8003f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800338c:	202d      	movs	r0, #45	; 0x2d
 800338e:	f000 fde6 	bl	8003f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	58000c00 	.word	0x58000c00

080033a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b0a0      	sub	sp, #128	; 0x80
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
 80033b0:	605a      	str	r2, [r3, #4]
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	60da      	str	r2, [r3, #12]
 80033b6:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033b8:	f107 030c 	add.w	r3, r7, #12
 80033bc:	2250      	movs	r2, #80	; 0x50
 80033be:	2100      	movs	r1, #0
 80033c0:	4618      	mov	r0, r3
 80033c2:	f00b fd01 	bl	800edc8 <memset>
  if(huart->Instance==LPUART1)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a68      	ldr	r2, [pc, #416]	; (800356c <HAL_UART_MspInit+0x1cc>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d16e      	bne.n	80034ae <HAL_UART_MspInit+0x10e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80033d0:	2302      	movs	r3, #2
 80033d2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80033d4:	2300      	movs	r3, #0
 80033d6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033d8:	f107 030c 	add.w	r3, r7, #12
 80033dc:	4618      	mov	r0, r3
 80033de:	f002 ff26 	bl	800622e <HAL_RCCEx_PeriphCLKConfig>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80033e8:	f7ff ff10 	bl	800320c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80033ec:	2001      	movs	r0, #1
 80033ee:	f7ff ff70 	bl	80032d2 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f2:	2001      	movs	r0, #1
 80033f4:	f7ff ff22 	bl	800323c <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80033f8:	230c      	movs	r3, #12
 80033fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fc:	2302      	movs	r3, #2
 80033fe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003400:	2300      	movs	r3, #0
 8003402:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003404:	2303      	movs	r3, #3
 8003406:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8003408:	2308      	movs	r3, #8
 800340a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800340c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003410:	4619      	mov	r1, r3
 8003412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003416:	f001 f97b 	bl	8004710 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 800341a:	4b55      	ldr	r3, [pc, #340]	; (8003570 <HAL_UART_MspInit+0x1d0>)
 800341c:	4a55      	ldr	r2, [pc, #340]	; (8003574 <HAL_UART_MspInit+0x1d4>)
 800341e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8003420:	4b53      	ldr	r3, [pc, #332]	; (8003570 <HAL_UART_MspInit+0x1d0>)
 8003422:	2211      	movs	r2, #17
 8003424:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003426:	4b52      	ldr	r3, [pc, #328]	; (8003570 <HAL_UART_MspInit+0x1d0>)
 8003428:	2210      	movs	r2, #16
 800342a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800342c:	4b50      	ldr	r3, [pc, #320]	; (8003570 <HAL_UART_MspInit+0x1d0>)
 800342e:	2200      	movs	r2, #0
 8003430:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003432:	4b4f      	ldr	r3, [pc, #316]	; (8003570 <HAL_UART_MspInit+0x1d0>)
 8003434:	2280      	movs	r2, #128	; 0x80
 8003436:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003438:	4b4d      	ldr	r3, [pc, #308]	; (8003570 <HAL_UART_MspInit+0x1d0>)
 800343a:	2200      	movs	r2, #0
 800343c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800343e:	4b4c      	ldr	r3, [pc, #304]	; (8003570 <HAL_UART_MspInit+0x1d0>)
 8003440:	2200      	movs	r2, #0
 8003442:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8003444:	4b4a      	ldr	r3, [pc, #296]	; (8003570 <HAL_UART_MspInit+0x1d0>)
 8003446:	2200      	movs	r2, #0
 8003448:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800344a:	4b49      	ldr	r3, [pc, #292]	; (8003570 <HAL_UART_MspInit+0x1d0>)
 800344c:	2200      	movs	r2, #0
 800344e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003450:	4847      	ldr	r0, [pc, #284]	; (8003570 <HAL_UART_MspInit+0x1d0>)
 8003452:	f000 fdc9 	bl	8003fe8 <HAL_DMA_Init>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 800345c:	f7ff fed6 	bl	800320c <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 8003460:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8003464:	65fb      	str	r3, [r7, #92]	; 0x5c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8003466:	2300      	movs	r3, #0
 8003468:	663b      	str	r3, [r7, #96]	; 0x60
    pSyncConfig.SyncEnable = DISABLE;
 800346a:	2300      	movs	r3, #0
 800346c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    pSyncConfig.EventEnable = DISABLE;
 8003470:	2300      	movs	r3, #0
 8003472:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
    pSyncConfig.RequestNumber = 1;
 8003476:	2301      	movs	r3, #1
 8003478:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 800347a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800347e:	4619      	mov	r1, r3
 8003480:	483b      	ldr	r0, [pc, #236]	; (8003570 <HAL_UART_MspInit+0x1d0>)
 8003482:	f001 f8e3 	bl	800464c <HAL_DMAEx_ConfigMuxSync>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 800348c:	f7ff febe 	bl	800320c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a37      	ldr	r2, [pc, #220]	; (8003570 <HAL_UART_MspInit+0x1d0>)
 8003494:	67da      	str	r2, [r3, #124]	; 0x7c
 8003496:	4a36      	ldr	r2, [pc, #216]	; (8003570 <HAL_UART_MspInit+0x1d0>)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800349c:	2200      	movs	r2, #0
 800349e:	2100      	movs	r1, #0
 80034a0:	2025      	movs	r0, #37	; 0x25
 80034a2:	f000 fd42 	bl	8003f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80034a6:	2025      	movs	r0, #37	; 0x25
 80034a8:	f000 fd59 	bl	8003f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80034ac:	e05a      	b.n	8003564 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART1)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a31      	ldr	r2, [pc, #196]	; (8003578 <HAL_UART_MspInit+0x1d8>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d155      	bne.n	8003564 <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80034b8:	2301      	movs	r3, #1
 80034ba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80034bc:	2300      	movs	r3, #0
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034c0:	f107 030c 	add.w	r3, r7, #12
 80034c4:	4618      	mov	r0, r3
 80034c6:	f002 feb2 	bl	800622e <HAL_RCCEx_PeriphCLKConfig>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_UART_MspInit+0x134>
      Error_Handler();
 80034d0:	f7ff fe9c 	bl	800320c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80034d4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80034d8:	f7ff ff14 	bl	8003304 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034dc:	2002      	movs	r0, #2
 80034de:	f7ff fead 	bl	800323c <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034e2:	23c0      	movs	r3, #192	; 0xc0
 80034e4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e6:	2302      	movs	r3, #2
 80034e8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034ea:	2301      	movs	r3, #1
 80034ec:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ee:	2303      	movs	r3, #3
 80034f0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034f2:	2307      	movs	r3, #7
 80034f4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80034fa:	4619      	mov	r1, r3
 80034fc:	481f      	ldr	r0, [pc, #124]	; (800357c <HAL_UART_MspInit+0x1dc>)
 80034fe:	f001 f907 	bl	8004710 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8003502:	4b1f      	ldr	r3, [pc, #124]	; (8003580 <HAL_UART_MspInit+0x1e0>)
 8003504:	4a1f      	ldr	r2, [pc, #124]	; (8003584 <HAL_UART_MspInit+0x1e4>)
 8003506:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003508:	4b1d      	ldr	r3, [pc, #116]	; (8003580 <HAL_UART_MspInit+0x1e0>)
 800350a:	220f      	movs	r2, #15
 800350c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800350e:	4b1c      	ldr	r3, [pc, #112]	; (8003580 <HAL_UART_MspInit+0x1e0>)
 8003510:	2210      	movs	r2, #16
 8003512:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003514:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <HAL_UART_MspInit+0x1e0>)
 8003516:	2200      	movs	r2, #0
 8003518:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800351a:	4b19      	ldr	r3, [pc, #100]	; (8003580 <HAL_UART_MspInit+0x1e0>)
 800351c:	2280      	movs	r2, #128	; 0x80
 800351e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003520:	4b17      	ldr	r3, [pc, #92]	; (8003580 <HAL_UART_MspInit+0x1e0>)
 8003522:	2200      	movs	r2, #0
 8003524:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003526:	4b16      	ldr	r3, [pc, #88]	; (8003580 <HAL_UART_MspInit+0x1e0>)
 8003528:	2200      	movs	r2, #0
 800352a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800352c:	4b14      	ldr	r3, [pc, #80]	; (8003580 <HAL_UART_MspInit+0x1e0>)
 800352e:	2200      	movs	r2, #0
 8003530:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003532:	4b13      	ldr	r3, [pc, #76]	; (8003580 <HAL_UART_MspInit+0x1e0>)
 8003534:	2200      	movs	r2, #0
 8003536:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003538:	4811      	ldr	r0, [pc, #68]	; (8003580 <HAL_UART_MspInit+0x1e0>)
 800353a:	f000 fd55 	bl	8003fe8 <HAL_DMA_Init>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d001      	beq.n	8003548 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8003544:	f7ff fe62 	bl	800320c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a0d      	ldr	r2, [pc, #52]	; (8003580 <HAL_UART_MspInit+0x1e0>)
 800354c:	67da      	str	r2, [r3, #124]	; 0x7c
 800354e:	4a0c      	ldr	r2, [pc, #48]	; (8003580 <HAL_UART_MspInit+0x1e0>)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003554:	2200      	movs	r2, #0
 8003556:	2100      	movs	r1, #0
 8003558:	2024      	movs	r0, #36	; 0x24
 800355a:	f000 fce6 	bl	8003f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800355e:	2024      	movs	r0, #36	; 0x24
 8003560:	f000 fcfd 	bl	8003f5e <HAL_NVIC_EnableIRQ>
}
 8003564:	bf00      	nop
 8003566:	3780      	adds	r7, #128	; 0x80
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40008000 	.word	0x40008000
 8003570:	20000428 	.word	0x20000428
 8003574:	40020044 	.word	0x40020044
 8003578:	40013800 	.word	0x40013800
 800357c:	48000400 	.word	0x48000400
 8003580:	20000488 	.word	0x20000488
 8003584:	40020444 	.word	0x40020444

08003588 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b096      	sub	sp, #88	; 0x58
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003590:	f107 0308 	add.w	r3, r7, #8
 8003594:	2250      	movs	r2, #80	; 0x50
 8003596:	2100      	movs	r1, #0
 8003598:	4618      	mov	r0, r3
 800359a:	f00b fc15 	bl	800edc8 <memset>
  if(hrng->Instance==RNG)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a0d      	ldr	r2, [pc, #52]	; (80035d8 <HAL_RNG_MspInit+0x50>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d113      	bne.n	80035d0 <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80035a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035ac:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80035ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80035b2:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035b4:	f107 0308 	add.w	r3, r7, #8
 80035b8:	4618      	mov	r0, r3
 80035ba:	f002 fe38 	bl	800622e <HAL_RCCEx_PeriphCLKConfig>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80035c4:	f7ff fe22 	bl	800320c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80035c8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80035cc:	f7ff fe4f 	bl	800326e <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80035d0:	bf00      	nop
 80035d2:	3758      	adds	r7, #88	; 0x58
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	58001000 	.word	0x58001000

080035dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b096      	sub	sp, #88	; 0x58
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035e4:	f107 0308 	add.w	r3, r7, #8
 80035e8:	2250      	movs	r2, #80	; 0x50
 80035ea:	2100      	movs	r1, #0
 80035ec:	4618      	mov	r0, r3
 80035ee:	f00b fbeb 	bl	800edc8 <memset>
  if(hrtc->Instance==RTC)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a14      	ldr	r2, [pc, #80]	; (8003648 <HAL_RTC_MspInit+0x6c>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d120      	bne.n	800363e <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80035fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003600:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003602:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003606:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003608:	f107 0308 	add.w	r3, r7, #8
 800360c:	4618      	mov	r0, r3
 800360e:	f002 fe0e 	bl	800622e <HAL_RCCEx_PeriphCLKConfig>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003618:	f7ff fdf8 	bl	800320c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800361c:	f7ff fdfd 	bl	800321a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003620:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003624:	f7ff fe3c 	bl	80032a0 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003628:	2200      	movs	r2, #0
 800362a:	2100      	movs	r1, #0
 800362c:	2003      	movs	r0, #3
 800362e:	f000 fc7c 	bl	8003f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003632:	2003      	movs	r0, #3
 8003634:	f000 fc93 	bl	8003f5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f003 fa71 	bl	8006b20 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 800363e:	bf00      	nop
 8003640:	3758      	adds	r7, #88	; 0x58
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40002800 	.word	0x40002800

0800364c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a05      	ldr	r2, [pc, #20]	; (8003670 <HAL_TIM_Base_MspInit+0x24>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d103      	bne.n	8003666 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800365e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003662:	f7ff fe4f 	bl	8003304 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40012c00 	.word	0x40012c00

08003674 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800367c:	f107 030c 	add.w	r3, r7, #12
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	605a      	str	r2, [r3, #4]
 8003686:	609a      	str	r2, [r3, #8]
 8003688:	60da      	str	r2, [r3, #12]
 800368a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003694:	d116      	bne.n	80036c4 <HAL_TIM_Encoder_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003696:	2001      	movs	r0, #1
 8003698:	f7ff fe02 	bl	80032a0 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800369c:	2001      	movs	r0, #1
 800369e:	f7ff fdcd 	bl	800323c <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_Pin|EncoderB_Pin;
 80036a2:	2303      	movs	r3, #3
 80036a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a6:	2302      	movs	r3, #2
 80036a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ae:	2300      	movs	r3, #0
 80036b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036b2:	2301      	movs	r3, #1
 80036b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036b6:	f107 030c 	add.w	r3, r7, #12
 80036ba:	4619      	mov	r1, r3
 80036bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036c0:	f001 f826 	bl	8004710 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80036c4:	bf00      	nop
 80036c6:	3720      	adds	r7, #32
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d4:	f107 030c 	add.w	r3, r7, #12
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	605a      	str	r2, [r3, #4]
 80036de:	609a      	str	r2, [r3, #8]
 80036e0:	60da      	str	r2, [r3, #12]
 80036e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a0d      	ldr	r2, [pc, #52]	; (8003720 <HAL_TIM_MspPostInit+0x54>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d114      	bne.n	8003718 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ee:	2001      	movs	r0, #1
 80036f0:	f7ff fda4 	bl	800323c <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MotorPWM_Pin;
 80036f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036f8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fa:	2302      	movs	r3, #2
 80036fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003702:	2300      	movs	r3, #0
 8003704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003706:	2301      	movs	r3, #1
 8003708:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MotorPWM_GPIO_Port, &GPIO_InitStruct);
 800370a:	f107 030c 	add.w	r3, r7, #12
 800370e:	4619      	mov	r1, r3
 8003710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003714:	f000 fffc 	bl	8004710 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003718:	bf00      	nop
 800371a:	3720      	adds	r7, #32
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40012c00 	.word	0x40012c00

08003724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003728:	bf00      	nop
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003732:	b480      	push	{r7}
 8003734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003736:	e7fe      	b.n	8003736 <HardFault_Handler+0x4>

08003738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800373c:	e7fe      	b.n	800373c <MemManage_Handler+0x4>

0800373e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800373e:	b480      	push	{r7}
 8003740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003742:	e7fe      	b.n	8003742 <BusFault_Handler+0x4>

08003744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003748:	e7fe      	b.n	8003748 <UsageFault_Handler+0x4>

0800374a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800374a:	b480      	push	{r7}
 800374c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800375c:	bf00      	nop
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr

08003766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003766:	b480      	push	{r7}
 8003768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800376a:	bf00      	nop
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003778:	f000 fa58 	bl	8003c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800377c:	bf00      	nop
 800377e:	bd80      	pop	{r7, pc}

08003780 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003784:	f7fe fdda 	bl	800233c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003788:	bf00      	nop
 800378a:	bd80      	pop	{r7, pc}

0800378c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003790:	4802      	ldr	r0, [pc, #8]	; (800379c <DMA1_Channel4_IRQHandler+0x10>)
 8003792:	f000 fe0a 	bl	80043aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	20000428 	.word	0x20000428

080037a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80037a4:	4802      	ldr	r0, [pc, #8]	; (80037b0 <USART1_IRQHandler+0x10>)
 80037a6:	f004 fb67 	bl	8007e78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20000394 	.word	0x20000394

080037b4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80037b8:	4802      	ldr	r0, [pc, #8]	; (80037c4 <LPUART1_IRQHandler+0x10>)
 80037ba:	f004 fb5d 	bl	8007e78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80037be:	bf00      	nop
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20000300 	.word	0x20000300

080037c8 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80037cc:	f00a fd2e 	bl	800e22c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80037d0:	bf00      	nop
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80037d8:	f00a fd5e 	bl	800e298 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80037dc:	bf00      	nop
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80037e4:	f001 f934 	bl	8004a50 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80037e8:	bf00      	nop
 80037ea:	bd80      	pop	{r7, pc}

080037ec <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80037f0:	4802      	ldr	r0, [pc, #8]	; (80037fc <DMA2_Channel4_IRQHandler+0x10>)
 80037f2:	f000 fdda 	bl	80043aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80037f6:	bf00      	nop
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20000488 	.word	0x20000488

08003800 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8003804:	2010      	movs	r0, #16
 8003806:	f001 f90b 	bl	8004a20 <HAL_GPIO_EXTI_IRQHandler>
}
 800380a:	bf00      	nop
 800380c:	bd80      	pop	{r7, pc}

0800380e <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8003812:	2001      	movs	r0, #1
 8003814:	f001 f904 	bl	8004a20 <HAL_GPIO_EXTI_IRQHandler>
}
 8003818:	bf00      	nop
 800381a:	bd80      	pop	{r7, pc}

0800381c <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8003820:	2002      	movs	r0, #2
 8003822:	f001 f8fd 	bl	8004a20 <HAL_GPIO_EXTI_IRQHandler>
}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}

0800382a <LL_AHB2_GRP1_EnableClock>:
{
 800382a:	b480      	push	{r7}
 800382c:	b085      	sub	sp, #20
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003832:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003836:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003838:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4313      	orrs	r3, r2
 8003840:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003846:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	4013      	ands	r3, r2
 800384c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800384e:	68fb      	ldr	r3, [r7, #12]
}
 8003850:	bf00      	nop
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8003866:	f107 030c 	add.w	r3, r7, #12
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	605a      	str	r2, [r3, #4]
 8003870:	609a      	str	r2, [r3, #8]
 8003872:	60da      	str	r2, [r3, #12]
 8003874:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003876:	2002      	movs	r0, #2
 8003878:	f7ff ffd7 	bl	800382a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 800387c:	79fb      	ldrb	r3, [r7, #7]
 800387e:	4a12      	ldr	r2, [pc, #72]	; (80038c8 <BSP_LED_Init+0x6c>)
 8003880:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003884:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003886:	2301      	movs	r3, #1
 8003888:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 800388a:	2300      	movs	r3, #0
 800388c:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800388e:	2302      	movs	r3, #2
 8003890:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8003892:	79fb      	ldrb	r3, [r7, #7]
 8003894:	4a0d      	ldr	r2, [pc, #52]	; (80038cc <BSP_LED_Init+0x70>)
 8003896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800389a:	f107 020c 	add.w	r2, r7, #12
 800389e:	4611      	mov	r1, r2
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 ff35 	bl	8004710 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 80038a6:	79fb      	ldrb	r3, [r7, #7]
 80038a8:	4a08      	ldr	r2, [pc, #32]	; (80038cc <BSP_LED_Init+0x70>)
 80038aa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80038ae:	79fb      	ldrb	r3, [r7, #7]
 80038b0:	4a05      	ldr	r2, [pc, #20]	; (80038c8 <BSP_LED_Init+0x6c>)
 80038b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038b6:	2200      	movs	r2, #0
 80038b8:	4619      	mov	r1, r3
 80038ba:	f001 f899 	bl	80049f0 <HAL_GPIO_WritePin>
}
 80038be:	bf00      	nop
 80038c0:	3720      	adds	r7, #32
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	08010fec 	.word	0x08010fec
 80038cc:	20000008 	.word	0x20000008

080038d0 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80038da:	79fb      	ldrb	r3, [r7, #7]
 80038dc:	4a07      	ldr	r2, [pc, #28]	; (80038fc <BSP_LED_On+0x2c>)
 80038de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	4a06      	ldr	r2, [pc, #24]	; (8003900 <BSP_LED_On+0x30>)
 80038e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038ea:	2201      	movs	r2, #1
 80038ec:	4619      	mov	r1, r3
 80038ee:	f001 f87f 	bl	80049f0 <HAL_GPIO_WritePin>
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000008 	.word	0x20000008
 8003900:	08010fec 	.word	0x08010fec

08003904 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	4603      	mov	r3, r0
 800390c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	4a07      	ldr	r2, [pc, #28]	; (8003930 <BSP_LED_Off+0x2c>)
 8003912:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003916:	79fb      	ldrb	r3, [r7, #7]
 8003918:	4a06      	ldr	r2, [pc, #24]	; (8003934 <BSP_LED_Off+0x30>)
 800391a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800391e:	2200      	movs	r2, #0
 8003920:	4619      	mov	r1, r3
 8003922:	f001 f865 	bl	80049f0 <HAL_GPIO_WritePin>
}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	20000008 	.word	0x20000008
 8003934:	08010fec 	.word	0x08010fec

08003938 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	460a      	mov	r2, r1
 8003942:	71fb      	strb	r3, [r7, #7]
 8003944:	4613      	mov	r3, r2
 8003946:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8003948:	f107 030c 	add.w	r3, r7, #12
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	609a      	str	r2, [r3, #8]
 8003954:	60da      	str	r2, [r3, #12]
 8003956:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8003958:	79fb      	ldrb	r3, [r7, #7]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d103      	bne.n	8003966 <BSP_PB_Init+0x2e>
 800395e:	2004      	movs	r0, #4
 8003960:	f7ff ff63 	bl	800382a <LL_AHB2_GRP1_EnableClock>
 8003964:	e00c      	b.n	8003980 <BSP_PB_Init+0x48>
 8003966:	79fb      	ldrb	r3, [r7, #7]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d103      	bne.n	8003974 <BSP_PB_Init+0x3c>
 800396c:	2008      	movs	r0, #8
 800396e:	f7ff ff5c 	bl	800382a <LL_AHB2_GRP1_EnableClock>
 8003972:	e005      	b.n	8003980 <BSP_PB_Init+0x48>
 8003974:	79fb      	ldrb	r3, [r7, #7]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d102      	bne.n	8003980 <BSP_PB_Init+0x48>
 800397a:	2008      	movs	r0, #8
 800397c:	f7ff ff55 	bl	800382a <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8003980:	79bb      	ldrb	r3, [r7, #6]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d117      	bne.n	80039b6 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8003986:	79fb      	ldrb	r3, [r7, #7]
 8003988:	4a20      	ldr	r2, [pc, #128]	; (8003a0c <BSP_PB_Init+0xd4>)
 800398a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800398e:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8003990:	2300      	movs	r3, #0
 8003992:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8003994:	2301      	movs	r3, #1
 8003996:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003998:	2302      	movs	r3, #2
 800399a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	4a1c      	ldr	r2, [pc, #112]	; (8003a10 <BSP_PB_Init+0xd8>)
 80039a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a4:	f107 020c 	add.w	r2, r7, #12
 80039a8:	4611      	mov	r1, r2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 feb0 	bl	8004710 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 80039b0:	2001      	movs	r0, #1
 80039b2:	f7fd fe97 	bl	80016e4 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80039b6:	79bb      	ldrb	r3, [r7, #6]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d123      	bne.n	8003a04 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80039bc:	79fb      	ldrb	r3, [r7, #7]
 80039be:	4a13      	ldr	r2, [pc, #76]	; (8003a0c <BSP_PB_Init+0xd4>)
 80039c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039c4:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80039c6:	2301      	movs	r3, #1
 80039c8:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 80039ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80039ce:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80039d0:	79fb      	ldrb	r3, [r7, #7]
 80039d2:	4a0f      	ldr	r2, [pc, #60]	; (8003a10 <BSP_PB_Init+0xd8>)
 80039d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039d8:	f107 020c 	add.w	r2, r7, #12
 80039dc:	4611      	mov	r1, r2
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fe96 	bl	8004710 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80039e4:	79fb      	ldrb	r3, [r7, #7]
 80039e6:	4a0b      	ldr	r2, [pc, #44]	; (8003a14 <BSP_PB_Init+0xdc>)
 80039e8:	5cd3      	ldrb	r3, [r2, r3]
 80039ea:	b25b      	sxtb	r3, r3
 80039ec:	2200      	movs	r2, #0
 80039ee:	210f      	movs	r1, #15
 80039f0:	4618      	mov	r0, r3
 80039f2:	f000 fa9a 	bl	8003f2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80039f6:	79fb      	ldrb	r3, [r7, #7]
 80039f8:	4a06      	ldr	r2, [pc, #24]	; (8003a14 <BSP_PB_Init+0xdc>)
 80039fa:	5cd3      	ldrb	r3, [r2, r3]
 80039fc:	b25b      	sxtb	r3, r3
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 faad 	bl	8003f5e <HAL_NVIC_EnableIRQ>
  }
}
 8003a04:	bf00      	nop
 8003a06:	3720      	adds	r7, #32
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	08010ff4 	.word	0x08010ff4
 8003a10:	20000014 	.word	0x20000014
 8003a14:	08010ffc 	.word	0x08010ffc

08003a18 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8003a1c:	4b26      	ldr	r3, [pc, #152]	; (8003ab8 <SystemInit+0xa0>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003a22:	4b25      	ldr	r3, [pc, #148]	; (8003ab8 <SystemInit+0xa0>)
 8003a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a28:	4a23      	ldr	r2, [pc, #140]	; (8003ab8 <SystemInit+0xa0>)
 8003a2a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a2e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a46:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003a4a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a56:	4b19      	ldr	r3, [pc, #100]	; (8003abc <SystemInit+0xa4>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a68:	f023 0305 	bic.w	r3, r3, #5
 8003a6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a7c:	f023 0301 	bic.w	r3, r3, #1
 8003a80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a88:	4a0d      	ldr	r2, [pc, #52]	; (8003ac0 <SystemInit+0xa8>)
 8003a8a:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a90:	4a0b      	ldr	r2, [pc, #44]	; (8003ac0 <SystemInit+0xa8>)
 8003a92:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003a94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aa2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	619a      	str	r2, [r3, #24]
}
 8003aac:	bf00      	nop
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	e000ed00 	.word	0xe000ed00
 8003abc:	faf6fefb 	.word	0xfaf6fefb
 8003ac0:	22041000 	.word	0x22041000

08003ac4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003ac4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ac6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ac8:	3304      	adds	r3, #4

08003aca <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003aca:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003acc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003ace:	d3f9      	bcc.n	8003ac4 <CopyDataInit>
  bx lr
 8003ad0:	4770      	bx	lr

08003ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003ad2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003ad4:	3004      	adds	r0, #4

08003ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003ad6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003ad8:	d3fb      	bcc.n	8003ad2 <FillZerobss>
  bx lr
 8003ada:	4770      	bx	lr

08003adc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003adc:	480c      	ldr	r0, [pc, #48]	; (8003b10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003ade:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003ae0:	f7ff ff9a 	bl	8003a18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003ae4:	480b      	ldr	r0, [pc, #44]	; (8003b14 <LoopForever+0x6>)
 8003ae6:	490c      	ldr	r1, [pc, #48]	; (8003b18 <LoopForever+0xa>)
 8003ae8:	4a0c      	ldr	r2, [pc, #48]	; (8003b1c <LoopForever+0xe>)
 8003aea:	2300      	movs	r3, #0
 8003aec:	f7ff ffed 	bl	8003aca <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003af0:	480b      	ldr	r0, [pc, #44]	; (8003b20 <LoopForever+0x12>)
 8003af2:	490c      	ldr	r1, [pc, #48]	; (8003b24 <LoopForever+0x16>)
 8003af4:	4a0c      	ldr	r2, [pc, #48]	; (8003b28 <LoopForever+0x1a>)
 8003af6:	2300      	movs	r3, #0
 8003af8:	f7ff ffe7 	bl	8003aca <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003afc:	480b      	ldr	r0, [pc, #44]	; (8003b2c <LoopForever+0x1e>)
 8003afe:	490c      	ldr	r1, [pc, #48]	; (8003b30 <LoopForever+0x22>)
 8003b00:	2300      	movs	r3, #0
 8003b02:	f7ff ffe8 	bl	8003ad6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003b06:	f00b f9ad 	bl	800ee64 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003b0a:	f7ff f887 	bl	8002c1c <main>

08003b0e <LoopForever>:

LoopForever:
  b LoopForever
 8003b0e:	e7fe      	b.n	8003b0e <LoopForever>
  ldr   r0, =_estack
 8003b10:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003b14:	20000008 	.word	0x20000008
 8003b18:	200000a8 	.word	0x200000a8
 8003b1c:	0801114c 	.word	0x0801114c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003b20:	200301e4 	.word	0x200301e4
 8003b24:	20030a67 	.word	0x20030a67
 8003b28:	08011222 	.word	0x08011222
  INIT_BSS _sbss, _ebss
 8003b2c:	200000e4 	.word	0x200000e4
 8003b30:	200018ec 	.word	0x200018ec

08003b34 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b34:	e7fe      	b.n	8003b34 <ADC1_IRQHandler>
	...

08003b38 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003b3c:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	4a04      	ldr	r2, [pc, #16]	; (8003b54 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003b42:	f043 0301 	orr.w	r3, r3, #1
 8003b46:	6053      	str	r3, [r2, #4]
}
 8003b48:	bf00      	nop
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	e0042000 	.word	0xe0042000

08003b58 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003b5c:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	4a04      	ldr	r2, [pc, #16]	; (8003b74 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003b62:	f043 0302 	orr.w	r3, r3, #2
 8003b66:	6053      	str	r3, [r2, #4]
}
 8003b68:	bf00      	nop
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	e0042000 	.word	0xe0042000

08003b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b082      	sub	sp, #8
 8003b7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b82:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <HAL_Init+0x3c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a0b      	ldr	r2, [pc, #44]	; (8003bb4 <HAL_Init+0x3c>)
 8003b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b8c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b8e:	2003      	movs	r0, #3
 8003b90:	f000 f9c0 	bl	8003f14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b94:	2000      	movs	r0, #0
 8003b96:	f000 f80f 	bl	8003bb8 <HAL_InitTick>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	71fb      	strb	r3, [r7, #7]
 8003ba4:	e001      	b.n	8003baa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003ba6:	f7ff fbc6 	bl	8003336 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003baa:	79fb      	ldrb	r3, [r7, #7]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	58004000 	.word	0x58004000

08003bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003bc4:	4b17      	ldr	r3, [pc, #92]	; (8003c24 <HAL_InitTick+0x6c>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d024      	beq.n	8003c16 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003bcc:	f002 f89e 	bl	8005d0c <HAL_RCC_GetHCLKFreq>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	4b14      	ldr	r3, [pc, #80]	; (8003c24 <HAL_InitTick+0x6c>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bdc:	fbb3 f3f1 	udiv	r3, r3, r1
 8003be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 f9d6 	bl	8003f96 <HAL_SYSTICK_Config>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10f      	bne.n	8003c10 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b0f      	cmp	r3, #15
 8003bf4:	d809      	bhi.n	8003c0a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	f04f 30ff 	mov.w	r0, #4294967295
 8003bfe:	f000 f994 	bl	8003f2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c02:	4a09      	ldr	r2, [pc, #36]	; (8003c28 <HAL_InitTick+0x70>)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	e007      	b.n	8003c1a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	73fb      	strb	r3, [r7, #15]
 8003c0e:	e004      	b.n	8003c1a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	73fb      	strb	r3, [r7, #15]
 8003c14:	e001      	b.n	8003c1a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	20000028 	.word	0x20000028
 8003c28:	20000024 	.word	0x20000024

08003c2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003c30:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <HAL_IncTick+0x20>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <HAL_IncTick+0x24>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	4a04      	ldr	r2, [pc, #16]	; (8003c50 <HAL_IncTick+0x24>)
 8003c3e:	6013      	str	r3, [r2, #0]
}
 8003c40:	bf00      	nop
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20000028 	.word	0x20000028
 8003c50:	200005b8 	.word	0x200005b8

08003c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  return uwTick;
 8003c58:	4b03      	ldr	r3, [pc, #12]	; (8003c68 <HAL_GetTick+0x14>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	200005b8 	.word	0x200005b8

08003c6c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003c70:	4b03      	ldr	r3, [pc, #12]	; (8003c80 <HAL_GetTickPrio+0x14>)
 8003c72:	681b      	ldr	r3, [r3, #0]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	20000024 	.word	0x20000024

08003c84 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003c88:	4b03      	ldr	r3, [pc, #12]	; (8003c98 <HAL_GetTickFreq+0x14>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	20000028 	.word	0x20000028

08003c9c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003ca0:	f7ff ff4a 	bl	8003b38 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003ca4:	bf00      	nop
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003cac:	f7ff ff54 	bl	8003b58 <LL_DBGMCU_EnableDBGStopMode>
}
 8003cb0:	bf00      	nop
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cc4:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ce6:	4a04      	ldr	r2, [pc, #16]	; (8003cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	60d3      	str	r3, [r2, #12]
}
 8003cec:	bf00      	nop
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	e000ed00 	.word	0xe000ed00

08003cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d00:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <__NVIC_GetPriorityGrouping+0x18>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	0a1b      	lsrs	r3, r3, #8
 8003d06:	f003 0307 	and.w	r3, r3, #7
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	e000ed00 	.word	0xe000ed00

08003d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	db0b      	blt.n	8003d42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d2a:	79fb      	ldrb	r3, [r7, #7]
 8003d2c:	f003 021f 	and.w	r2, r3, #31
 8003d30:	4907      	ldr	r1, [pc, #28]	; (8003d50 <__NVIC_EnableIRQ+0x38>)
 8003d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	2001      	movs	r0, #1
 8003d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	e000e100 	.word	0xe000e100

08003d54 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	db12      	blt.n	8003d8c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d66:	79fb      	ldrb	r3, [r7, #7]
 8003d68:	f003 021f 	and.w	r2, r3, #31
 8003d6c:	490a      	ldr	r1, [pc, #40]	; (8003d98 <__NVIC_DisableIRQ+0x44>)
 8003d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	2001      	movs	r0, #1
 8003d76:	fa00 f202 	lsl.w	r2, r0, r2
 8003d7a:	3320      	adds	r3, #32
 8003d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003d80:	f3bf 8f4f 	dsb	sy
}
 8003d84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d86:	f3bf 8f6f 	isb	sy
}
 8003d8a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	e000e100 	.word	0xe000e100

08003d9c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	4603      	mov	r3, r0
 8003da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	db0c      	blt.n	8003dc8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dae:	79fb      	ldrb	r3, [r7, #7]
 8003db0:	f003 021f 	and.w	r2, r3, #31
 8003db4:	4907      	ldr	r1, [pc, #28]	; (8003dd4 <__NVIC_SetPendingIRQ+0x38>)
 8003db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8003dc2:	3340      	adds	r3, #64	; 0x40
 8003dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr
 8003dd4:	e000e100 	.word	0xe000e100

08003dd8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	4603      	mov	r3, r0
 8003de0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	db0c      	blt.n	8003e04 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	f003 021f 	and.w	r2, r3, #31
 8003df0:	4907      	ldr	r1, [pc, #28]	; (8003e10 <__NVIC_ClearPendingIRQ+0x38>)
 8003df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df6:	095b      	lsrs	r3, r3, #5
 8003df8:	2001      	movs	r0, #1
 8003dfa:	fa00 f202 	lsl.w	r2, r0, r2
 8003dfe:	3360      	adds	r3, #96	; 0x60
 8003e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e04:	bf00      	nop
 8003e06:	370c      	adds	r7, #12
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr
 8003e10:	e000e100 	.word	0xe000e100

08003e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	6039      	str	r1, [r7, #0]
 8003e1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	db0a      	blt.n	8003e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	490c      	ldr	r1, [pc, #48]	; (8003e60 <__NVIC_SetPriority+0x4c>)
 8003e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e32:	0112      	lsls	r2, r2, #4
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	440b      	add	r3, r1
 8003e38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e3c:	e00a      	b.n	8003e54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	4908      	ldr	r1, [pc, #32]	; (8003e64 <__NVIC_SetPriority+0x50>)
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	3b04      	subs	r3, #4
 8003e4c:	0112      	lsls	r2, r2, #4
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	440b      	add	r3, r1
 8003e52:	761a      	strb	r2, [r3, #24]
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	e000e100 	.word	0xe000e100
 8003e64:	e000ed00 	.word	0xe000ed00

08003e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b089      	sub	sp, #36	; 0x24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	f1c3 0307 	rsb	r3, r3, #7
 8003e82:	2b04      	cmp	r3, #4
 8003e84:	bf28      	it	cs
 8003e86:	2304      	movcs	r3, #4
 8003e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	2b06      	cmp	r3, #6
 8003e90:	d902      	bls.n	8003e98 <NVIC_EncodePriority+0x30>
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	3b03      	subs	r3, #3
 8003e96:	e000      	b.n	8003e9a <NVIC_EncodePriority+0x32>
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea6:	43da      	mvns	r2, r3
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	401a      	ands	r2, r3
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eba:	43d9      	mvns	r1, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec0:	4313      	orrs	r3, r2
         );
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3724      	adds	r7, #36	; 0x24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
	...

08003ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ee0:	d301      	bcc.n	8003ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e00f      	b.n	8003f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ee6:	4a0a      	ldr	r2, [pc, #40]	; (8003f10 <SysTick_Config+0x40>)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003eee:	210f      	movs	r1, #15
 8003ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef4:	f7ff ff8e 	bl	8003e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ef8:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <SysTick_Config+0x40>)
 8003efa:	2200      	movs	r2, #0
 8003efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003efe:	4b04      	ldr	r3, [pc, #16]	; (8003f10 <SysTick_Config+0x40>)
 8003f00:	2207      	movs	r2, #7
 8003f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	e000e010 	.word	0xe000e010

08003f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff fec9 	bl	8003cb4 <__NVIC_SetPriorityGrouping>
}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b086      	sub	sp, #24
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	4603      	mov	r3, r0
 8003f32:	60b9      	str	r1, [r7, #8]
 8003f34:	607a      	str	r2, [r7, #4]
 8003f36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f38:	f7ff fee0 	bl	8003cfc <__NVIC_GetPriorityGrouping>
 8003f3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	6978      	ldr	r0, [r7, #20]
 8003f44:	f7ff ff90 	bl	8003e68 <NVIC_EncodePriority>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f4e:	4611      	mov	r1, r2
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff ff5f 	bl	8003e14 <__NVIC_SetPriority>
}
 8003f56:	bf00      	nop
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b082      	sub	sp, #8
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	4603      	mov	r3, r0
 8003f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff fed3 	bl	8003d18 <__NVIC_EnableIRQ>
}
 8003f72:	bf00      	nop
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	4603      	mov	r3, r0
 8003f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff fee3 	bl	8003d54 <__NVIC_DisableIRQ>
}
 8003f8e:	bf00      	nop
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b082      	sub	sp, #8
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f7ff ff96 	bl	8003ed0 <SysTick_Config>
 8003fa4:	4603      	mov	r3, r0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7ff feed 	bl	8003d9c <__NVIC_SetPendingIRQ>
}
 8003fc2:	bf00      	nop
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b082      	sub	sp, #8
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff fefd 	bl	8003dd8 <__NVIC_ClearPendingIRQ>
}
 8003fde:	bf00      	nop
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e08e      	b.n	8004118 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	4b47      	ldr	r3, [pc, #284]	; (8004120 <HAL_DMA_Init+0x138>)
 8004002:	429a      	cmp	r2, r3
 8004004:	d80f      	bhi.n	8004026 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	4b45      	ldr	r3, [pc, #276]	; (8004124 <HAL_DMA_Init+0x13c>)
 800400e:	4413      	add	r3, r2
 8004010:	4a45      	ldr	r2, [pc, #276]	; (8004128 <HAL_DMA_Init+0x140>)
 8004012:	fba2 2303 	umull	r2, r3, r2, r3
 8004016:	091b      	lsrs	r3, r3, #4
 8004018:	009a      	lsls	r2, r3, #2
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a42      	ldr	r2, [pc, #264]	; (800412c <HAL_DMA_Init+0x144>)
 8004022:	641a      	str	r2, [r3, #64]	; 0x40
 8004024:	e00e      	b.n	8004044 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	4b40      	ldr	r3, [pc, #256]	; (8004130 <HAL_DMA_Init+0x148>)
 800402e:	4413      	add	r3, r2
 8004030:	4a3d      	ldr	r2, [pc, #244]	; (8004128 <HAL_DMA_Init+0x140>)
 8004032:	fba2 2303 	umull	r2, r3, r2, r3
 8004036:	091b      	lsrs	r3, r3, #4
 8004038:	009a      	lsls	r2, r3, #2
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a3c      	ldr	r2, [pc, #240]	; (8004134 <HAL_DMA_Init+0x14c>)
 8004042:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800405a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004068:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004074:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004080:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004088:	68fa      	ldr	r2, [r7, #12]
 800408a:	4313      	orrs	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fa74 	bl	8004584 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040a4:	d102      	bne.n	80040ac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80040b8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040c2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d010      	beq.n	80040ee <HAL_DMA_Init+0x106>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d80c      	bhi.n	80040ee <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 fa93 	bl	8004600 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80040ea:	605a      	str	r2, [r3, #4]
 80040ec:	e008      	b.n	8004100 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40020407 	.word	0x40020407
 8004124:	bffdfff8 	.word	0xbffdfff8
 8004128:	cccccccd 	.word	0xcccccccd
 800412c:	40020000 	.word	0x40020000
 8004130:	bffdfbf8 	.word	0xbffdfbf8
 8004134:	40020400 	.word	0x40020400

08004138 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004146:	2300      	movs	r3, #0
 8004148:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_DMA_Start_IT+0x20>
 8004154:	2302      	movs	r3, #2
 8004156:	e066      	b.n	8004226 <HAL_DMA_Start_IT+0xee>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b01      	cmp	r3, #1
 800416a:	d155      	bne.n	8004218 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0201 	bic.w	r2, r2, #1
 8004188:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	68b9      	ldr	r1, [r7, #8]
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 f9b9 	bl	8004508 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	2b00      	cmp	r3, #0
 800419c:	d008      	beq.n	80041b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 020e 	orr.w	r2, r2, #14
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	e00f      	b.n	80041d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0204 	bic.w	r2, r2, #4
 80041be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 020a 	orr.w	r2, r2, #10
 80041ce:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d007      	beq.n	80041ee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d007      	beq.n	8004206 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004200:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004204:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0201 	orr.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	e005      	b.n	8004224 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004220:	2302      	movs	r3, #2
 8004222:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004224:	7dfb      	ldrb	r3, [r7, #23]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e04f      	b.n	80042e0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d008      	beq.n	800425e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2204      	movs	r2, #4
 8004250:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e040      	b.n	80042e0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 020e 	bic.w	r2, r2, #14
 800426c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004278:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800427c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0201 	bic.w	r2, r2, #1
 800428c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004292:	f003 021c 	and.w	r2, r3, #28
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	2101      	movs	r1, #1
 800429c:	fa01 f202 	lsl.w	r2, r1, r2
 80042a0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042aa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00c      	beq.n	80042ce <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80042cc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042f4:	2300      	movs	r3, #0
 80042f6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b02      	cmp	r3, #2
 8004302:	d005      	beq.n	8004310 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2204      	movs	r2, #4
 8004308:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	73fb      	strb	r3, [r7, #15]
 800430e:	e047      	b.n	80043a0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 020e 	bic.w	r2, r2, #14
 800431e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 0201 	bic.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800433a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800433e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004344:	f003 021c 	and.w	r2, r3, #28
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	2101      	movs	r1, #1
 800434e:	fa01 f202 	lsl.w	r2, r1, r2
 8004352:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800435c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00c      	beq.n	8004380 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004374:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800437e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	4798      	blx	r3
    }
  }
  return status;
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b084      	sub	sp, #16
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c6:	f003 031c 	and.w	r3, r3, #28
 80043ca:	2204      	movs	r2, #4
 80043cc:	409a      	lsls	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	4013      	ands	r3, r2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d026      	beq.n	8004424 <HAL_DMA_IRQHandler+0x7a>
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f003 0304 	and.w	r3, r3, #4
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d021      	beq.n	8004424 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0320 	and.w	r3, r3, #32
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d107      	bne.n	80043fe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 0204 	bic.w	r2, r2, #4
 80043fc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004402:	f003 021c 	and.w	r2, r3, #28
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	2104      	movs	r1, #4
 800440c:	fa01 f202 	lsl.w	r2, r1, r2
 8004410:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	2b00      	cmp	r3, #0
 8004418:	d071      	beq.n	80044fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004422:	e06c      	b.n	80044fe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004428:	f003 031c 	and.w	r3, r3, #28
 800442c:	2202      	movs	r2, #2
 800442e:	409a      	lsls	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4013      	ands	r3, r2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d02e      	beq.n	8004496 <HAL_DMA_IRQHandler+0xec>
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f003 0302 	and.w	r3, r3, #2
 800443e:	2b00      	cmp	r3, #0
 8004440:	d029      	beq.n	8004496 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10b      	bne.n	8004468 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 020a 	bic.w	r2, r2, #10
 800445e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446c:	f003 021c 	and.w	r2, r3, #28
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	2102      	movs	r1, #2
 8004476:	fa01 f202 	lsl.w	r2, r1, r2
 800447a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	2b00      	cmp	r3, #0
 800448a:	d038      	beq.n	80044fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004494:	e033      	b.n	80044fe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449a:	f003 031c 	and.w	r3, r3, #28
 800449e:	2208      	movs	r2, #8
 80044a0:	409a      	lsls	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d02a      	beq.n	8004500 <HAL_DMA_IRQHandler+0x156>
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d025      	beq.n	8004500 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 020e 	bic.w	r2, r2, #14
 80044c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c8:	f003 021c 	and.w	r2, r3, #28
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d0:	2101      	movs	r1, #1
 80044d2:	fa01 f202 	lsl.w	r2, r1, r2
 80044d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d004      	beq.n	8004500 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80044fe:	bf00      	nop
 8004500:	bf00      	nop
}
 8004502:	3710      	adds	r7, #16
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800451e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004524:	2b00      	cmp	r3, #0
 8004526:	d004      	beq.n	8004532 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004530:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004536:	f003 021c 	and.w	r2, r3, #28
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	2101      	movs	r1, #1
 8004540:	fa01 f202 	lsl.w	r2, r1, r2
 8004544:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2b10      	cmp	r3, #16
 8004554:	d108      	bne.n	8004568 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68ba      	ldr	r2, [r7, #8]
 8004564:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004566:	e007      	b.n	8004578 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68ba      	ldr	r2, [r7, #8]
 800456e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	60da      	str	r2, [r3, #12]
}
 8004578:	bf00      	nop
 800457a:	3714      	adds	r7, #20
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	461a      	mov	r2, r3
 8004592:	4b17      	ldr	r3, [pc, #92]	; (80045f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004594:	429a      	cmp	r2, r3
 8004596:	d80a      	bhi.n	80045ae <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459c:	089b      	lsrs	r3, r3, #2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80045a4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	6493      	str	r3, [r2, #72]	; 0x48
 80045ac:	e007      	b.n	80045be <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	089b      	lsrs	r3, r3, #2
 80045b4:	009a      	lsls	r2, r3, #2
 80045b6:	4b0f      	ldr	r3, [pc, #60]	; (80045f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80045b8:	4413      	add	r3, r2
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	3b08      	subs	r3, #8
 80045c6:	4a0c      	ldr	r2, [pc, #48]	; (80045f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80045c8:	fba2 2303 	umull	r2, r3, r2, r3
 80045cc:	091b      	lsrs	r3, r3, #4
 80045ce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a0a      	ldr	r2, [pc, #40]	; (80045fc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80045d4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f003 031f 	and.w	r3, r3, #31
 80045dc:	2201      	movs	r2, #1
 80045de:	409a      	lsls	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80045e4:	bf00      	nop
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	40020407 	.word	0x40020407
 80045f4:	4002081c 	.word	0x4002081c
 80045f8:	cccccccd 	.word	0xcccccccd
 80045fc:	40020880 	.word	0x40020880

08004600 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004610:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004616:	4413      	add	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	461a      	mov	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a09      	ldr	r2, [pc, #36]	; (8004648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004624:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	3b01      	subs	r3, #1
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	2201      	movs	r2, #1
 8004630:	409a      	lsls	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004636:	bf00      	nop
 8004638:	3714      	adds	r7, #20
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	1000823f 	.word	0x1000823f
 8004648:	40020940 	.word	0x40020940

0800464c <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b01      	cmp	r3, #1
 8004660:	d12b      	bne.n	80046ba <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_DMAEx_ConfigMuxSync+0x24>
 800466c:	2302      	movs	r3, #2
 800466e:	e025      	b.n	80046bc <HAL_DMAEx_ConfigMuxSync+0x70>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8004680:	4013      	ands	r3, r2
 8004682:	683a      	ldr	r2, [r7, #0]
 8004684:	6811      	ldr	r1, [r2, #0]
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	68d2      	ldr	r2, [r2, #12]
 800468a:	3a01      	subs	r2, #1
 800468c:	04d2      	lsls	r2, r2, #19
 800468e:	4311      	orrs	r1, r2
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	6852      	ldr	r2, [r2, #4]
 8004694:	4311      	orrs	r1, r2
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	7a12      	ldrb	r2, [r2, #8]
 800469a:	0412      	lsls	r2, r2, #16
 800469c:	4311      	orrs	r1, r2
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	7a52      	ldrb	r2, [r2, #9]
 80046a2:	0252      	lsls	r2, r2, #9
 80046a4:	4311      	orrs	r1, r2
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80046aa:	430b      	orrs	r3, r1
 80046ac:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	e000      	b.n	80046bc <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
  }
}
 80046bc:	4618      	mov	r0, r3
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	e000fdff 	.word	0xe000fdff

080046cc <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	0c1b      	lsrs	r3, r3, #16
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 031f 	and.w	r3, r3, #31
 80046e8:	2201      	movs	r2, #1
 80046ea:	fa02 f303 	lsl.w	r3, r2, r3
 80046ee:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	015b      	lsls	r3, r3, #5
 80046f4:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 80046f8:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80046fc:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	601a      	str	r2, [r3, #0]
}
 8004704:	bf00      	nop
 8004706:	371c      	adds	r7, #28
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800471a:	2300      	movs	r3, #0
 800471c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800471e:	e14c      	b.n	80049ba <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	2101      	movs	r1, #1
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	fa01 f303 	lsl.w	r3, r1, r3
 800472c:	4013      	ands	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 813e 	beq.w	80049b4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f003 0303 	and.w	r3, r3, #3
 8004740:	2b01      	cmp	r3, #1
 8004742:	d005      	beq.n	8004750 <HAL_GPIO_Init+0x40>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	2b02      	cmp	r3, #2
 800474e:	d130      	bne.n	80047b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	2203      	movs	r2, #3
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	4013      	ands	r3, r2
 8004766:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	68da      	ldr	r2, [r3, #12]
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004786:	2201      	movs	r2, #1
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	fa02 f303 	lsl.w	r3, r2, r3
 800478e:	43db      	mvns	r3, r3
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4013      	ands	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	091b      	lsrs	r3, r3, #4
 800479c:	f003 0201 	and.w	r2, r3, #1
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f003 0303 	and.w	r3, r3, #3
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	d017      	beq.n	80047ee <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	2203      	movs	r2, #3
 80047ca:	fa02 f303 	lsl.w	r3, r2, r3
 80047ce:	43db      	mvns	r3, r3
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	4013      	ands	r3, r2
 80047d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	689a      	ldr	r2, [r3, #8]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d123      	bne.n	8004842 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	08da      	lsrs	r2, r3, #3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	3208      	adds	r2, #8
 8004802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004806:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	220f      	movs	r2, #15
 8004812:	fa02 f303 	lsl.w	r3, r2, r3
 8004816:	43db      	mvns	r3, r3
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	4013      	ands	r3, r2
 800481c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	691a      	ldr	r2, [r3, #16]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	fa02 f303 	lsl.w	r3, r2, r3
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	4313      	orrs	r3, r2
 8004832:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	08da      	lsrs	r2, r3, #3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	3208      	adds	r2, #8
 800483c:	6939      	ldr	r1, [r7, #16]
 800483e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	005b      	lsls	r3, r3, #1
 800484c:	2203      	movs	r2, #3
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43db      	mvns	r3, r3
 8004854:	693a      	ldr	r2, [r7, #16]
 8004856:	4013      	ands	r3, r2
 8004858:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f003 0203 	and.w	r2, r3, #3
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	4313      	orrs	r3, r2
 800486e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	693a      	ldr	r2, [r7, #16]
 8004874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 8098 	beq.w	80049b4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004884:	4a54      	ldr	r2, [pc, #336]	; (80049d8 <HAL_GPIO_Init+0x2c8>)
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	089b      	lsrs	r3, r3, #2
 800488a:	3302      	adds	r3, #2
 800488c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004890:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f003 0303 	and.w	r3, r3, #3
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	220f      	movs	r2, #15
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	43db      	mvns	r3, r3
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4013      	ands	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80048ae:	d019      	beq.n	80048e4 <HAL_GPIO_Init+0x1d4>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a4a      	ldr	r2, [pc, #296]	; (80049dc <HAL_GPIO_Init+0x2cc>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d013      	beq.n	80048e0 <HAL_GPIO_Init+0x1d0>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a49      	ldr	r2, [pc, #292]	; (80049e0 <HAL_GPIO_Init+0x2d0>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00d      	beq.n	80048dc <HAL_GPIO_Init+0x1cc>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a48      	ldr	r2, [pc, #288]	; (80049e4 <HAL_GPIO_Init+0x2d4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d007      	beq.n	80048d8 <HAL_GPIO_Init+0x1c8>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a47      	ldr	r2, [pc, #284]	; (80049e8 <HAL_GPIO_Init+0x2d8>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d101      	bne.n	80048d4 <HAL_GPIO_Init+0x1c4>
 80048d0:	2304      	movs	r3, #4
 80048d2:	e008      	b.n	80048e6 <HAL_GPIO_Init+0x1d6>
 80048d4:	2307      	movs	r3, #7
 80048d6:	e006      	b.n	80048e6 <HAL_GPIO_Init+0x1d6>
 80048d8:	2303      	movs	r3, #3
 80048da:	e004      	b.n	80048e6 <HAL_GPIO_Init+0x1d6>
 80048dc:	2302      	movs	r3, #2
 80048de:	e002      	b.n	80048e6 <HAL_GPIO_Init+0x1d6>
 80048e0:	2301      	movs	r3, #1
 80048e2:	e000      	b.n	80048e6 <HAL_GPIO_Init+0x1d6>
 80048e4:	2300      	movs	r3, #0
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	f002 0203 	and.w	r2, r2, #3
 80048ec:	0092      	lsls	r2, r2, #2
 80048ee:	4093      	lsls	r3, r2
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80048f6:	4938      	ldr	r1, [pc, #224]	; (80049d8 <HAL_GPIO_Init+0x2c8>)
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	089b      	lsrs	r3, r3, #2
 80048fc:	3302      	adds	r3, #2
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004904:	4b39      	ldr	r3, [pc, #228]	; (80049ec <HAL_GPIO_Init+0x2dc>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	43db      	mvns	r3, r3
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	4013      	ands	r3, r2
 8004912:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800491c:	2b00      	cmp	r3, #0
 800491e:	d003      	beq.n	8004928 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4313      	orrs	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004928:	4a30      	ldr	r2, [pc, #192]	; (80049ec <HAL_GPIO_Init+0x2dc>)
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800492e:	4b2f      	ldr	r3, [pc, #188]	; (80049ec <HAL_GPIO_Init+0x2dc>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	43db      	mvns	r3, r3
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4013      	ands	r3, r2
 800493c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4313      	orrs	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004952:	4a26      	ldr	r2, [pc, #152]	; (80049ec <HAL_GPIO_Init+0x2dc>)
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004958:	4b24      	ldr	r3, [pc, #144]	; (80049ec <HAL_GPIO_Init+0x2dc>)
 800495a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800495e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	43db      	mvns	r3, r3
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4013      	ands	r3, r2
 8004968:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800497e:	4a1b      	ldr	r2, [pc, #108]	; (80049ec <HAL_GPIO_Init+0x2dc>)
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8004986:	4b19      	ldr	r3, [pc, #100]	; (80049ec <HAL_GPIO_Init+0x2dc>)
 8004988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800498c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	43db      	mvns	r3, r3
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	4013      	ands	r3, r2
 8004996:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d003      	beq.n	80049ac <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80049ac:	4a0f      	ldr	r2, [pc, #60]	; (80049ec <HAL_GPIO_Init+0x2dc>)
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	3301      	adds	r3, #1
 80049b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	fa22 f303 	lsr.w	r3, r2, r3
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f47f aeab 	bne.w	8004720 <HAL_GPIO_Init+0x10>
  }
}
 80049ca:	bf00      	nop
 80049cc:	bf00      	nop
 80049ce:	371c      	adds	r7, #28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	40010000 	.word	0x40010000
 80049dc:	48000400 	.word	0x48000400
 80049e0:	48000800 	.word	0x48000800
 80049e4:	48000c00 	.word	0x48000c00
 80049e8:	48001000 	.word	0x48001000
 80049ec:	58000800 	.word	0x58000800

080049f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	460b      	mov	r3, r1
 80049fa:	807b      	strh	r3, [r7, #2]
 80049fc:	4613      	mov	r3, r2
 80049fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004a00:	787b      	ldrb	r3, [r7, #1]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a06:	887a      	ldrh	r2, [r7, #2]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a0c:	e002      	b.n	8004a14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a0e:	887a      	ldrh	r2, [r7, #2]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a2a:	4b08      	ldr	r3, [pc, #32]	; (8004a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a2c:	68da      	ldr	r2, [r3, #12]
 8004a2e:	88fb      	ldrh	r3, [r7, #6]
 8004a30:	4013      	ands	r3, r2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d006      	beq.n	8004a44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a36:	4a05      	ldr	r2, [pc, #20]	; (8004a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a38:	88fb      	ldrh	r3, [r7, #6]
 8004a3a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a3c:	88fb      	ldrh	r3, [r7, #6]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fc feb4 	bl	80017ac <HAL_GPIO_EXTI_Callback>
  }
}
 8004a44:	bf00      	nop
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	58000800 	.word	0x58000800

08004a50 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004a56:	4b0a      	ldr	r3, [pc, #40]	; (8004a80 <HAL_HSEM_IRQHandler+0x30>)
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004a5c:	4b08      	ldr	r3, [pc, #32]	; (8004a80 <HAL_HSEM_IRQHandler+0x30>)
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	43db      	mvns	r3, r3
 8004a64:	4906      	ldr	r1, [pc, #24]	; (8004a80 <HAL_HSEM_IRQHandler+0x30>)
 8004a66:	4013      	ands	r3, r2
 8004a68:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004a6a:	4a05      	ldr	r2, [pc, #20]	; (8004a80 <HAL_HSEM_IRQHandler+0x30>)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 f807 	bl	8004a84 <HAL_HSEM_FreeCallback>
}
 8004a76:	bf00      	nop
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	58001500 	.word	0x58001500

08004a84 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d01e      	beq.n	8004ae8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004aaa:	4b13      	ldr	r3, [pc, #76]	; (8004af8 <HAL_IPCC_Init+0x60>)
 8004aac:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d102      	bne.n	8004ac0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7fe fc4c 	bl	8003358 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004ac0:	68b8      	ldr	r0, [r7, #8]
 8004ac2:	f000 f85b 	bl	8004b7c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f82c 	bl	8004b30 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8004ae6:	e001      	b.n	8004aec <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	58000c00 	.word	0x58000c00

08004afc <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	4613      	mov	r3, r2
 8004b08:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004b0a:	bf00      	nop
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b085      	sub	sp, #20
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	60f8      	str	r0, [r7, #12]
 8004b1e:	60b9      	str	r1, [r7, #8]
 8004b20:	4613      	mov	r3, r2
 8004b22:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004b24:	bf00      	nop
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b085      	sub	sp, #20
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004b38:	2300      	movs	r3, #0
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	e00f      	b.n	8004b5e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	4a0b      	ldr	r2, [pc, #44]	; (8004b74 <IPCC_SetDefaultCallbacks+0x44>)
 8004b48:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	3306      	adds	r3, #6
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	4413      	add	r3, r2
 8004b54:	4a08      	ldr	r2, [pc, #32]	; (8004b78 <IPCC_SetDefaultCallbacks+0x48>)
 8004b56:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2b05      	cmp	r3, #5
 8004b62:	d9ec      	bls.n	8004b3e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004b64:	bf00      	nop
 8004b66:	bf00      	nop
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	08004afd 	.word	0x08004afd
 8004b78:	08004b17 	.word	0x08004b17

08004b7c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004b90:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	223f      	movs	r2, #63	; 0x3f
 8004b96:	609a      	str	r2, [r3, #8]
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ba8:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a04      	ldr	r2, [pc, #16]	; (8004bc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb2:	6013      	str	r3, [r2, #0]
}
 8004bb4:	bf00      	nop
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	58000400 	.word	0x58000400

08004bc4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004bc8:	4b04      	ldr	r3, [pc, #16]	; (8004bdc <HAL_PWREx_GetVoltageRange+0x18>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	58000400 	.word	0x58000400

08004be0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004be4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bf2:	d101      	bne.n	8004bf8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e000      	b.n	8004bfa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <LL_RCC_HSE_Enable>:
{
 8004c04:	b480      	push	{r7}
 8004c06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c16:	6013      	str	r3, [r2, #0]
}
 8004c18:	bf00      	nop
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <LL_RCC_HSE_Disable>:
{
 8004c22:	b480      	push	{r7}
 8004c24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c34:	6013      	str	r3, [r2, #0]
}
 8004c36:	bf00      	nop
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <LL_RCC_HSE_IsReady>:
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004c44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c52:	d101      	bne.n	8004c58 <LL_RCC_HSE_IsReady+0x18>
 8004c54:	2301      	movs	r3, #1
 8004c56:	e000      	b.n	8004c5a <LL_RCC_HSE_IsReady+0x1a>
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <LL_RCC_HSI_Enable>:
{
 8004c64:	b480      	push	{r7}
 8004c66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c76:	6013      	str	r3, [r2, #0]
}
 8004c78:	bf00      	nop
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <LL_RCC_HSI_Disable>:
{
 8004c82:	b480      	push	{r7}
 8004c84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c94:	6013      	str	r3, [r2, #0]
}
 8004c96:	bf00      	nop
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <LL_RCC_HSI_IsReady>:
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cb2:	d101      	bne.n	8004cb8 <LL_RCC_HSI_IsReady+0x18>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e000      	b.n	8004cba <LL_RCC_HSI_IsReady+0x1a>
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	061b      	lsls	r3, r3, #24
 8004cda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	604b      	str	r3, [r1, #4]
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <LL_RCC_HSI48_Enable>:
{
 8004cee:	b480      	push	{r7}
 8004cf0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cfe:	f043 0301 	orr.w	r3, r3, #1
 8004d02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004d06:	bf00      	nop
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <LL_RCC_HSI48_Disable>:
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004d14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d20:	f023 0301 	bic.w	r3, r3, #1
 8004d24:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004d28:	bf00      	nop
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr

08004d32 <LL_RCC_HSI48_IsReady>:
{
 8004d32:	b480      	push	{r7}
 8004d34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8004d36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d101      	bne.n	8004d4a <LL_RCC_HSI48_IsReady+0x18>
 8004d46:	2301      	movs	r3, #1
 8004d48:	e000      	b.n	8004d4c <LL_RCC_HSI48_IsReady+0x1a>
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <LL_RCC_LSE_Enable>:
{
 8004d56:	b480      	push	{r7}
 8004d58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d66:	f043 0301 	orr.w	r3, r3, #1
 8004d6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004d6e:	bf00      	nop
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <LL_RCC_LSE_Disable>:
{
 8004d78:	b480      	push	{r7}
 8004d7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d88:	f023 0301 	bic.w	r3, r3, #1
 8004d8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004d90:	bf00      	nop
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <LL_RCC_LSE_EnableBypass>:
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004daa:	f043 0304 	orr.w	r3, r3, #4
 8004dae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004db2:	bf00      	nop
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <LL_RCC_LSE_DisableBypass>:
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dcc:	f023 0304 	bic.w	r3, r3, #4
 8004dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004dd4:	bf00      	nop
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <LL_RCC_LSE_IsReady>:
{
 8004dde:	b480      	push	{r7}
 8004de0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d101      	bne.n	8004df6 <LL_RCC_LSE_IsReady+0x18>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <LL_RCC_LSE_IsReady+0x1a>
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <LL_RCC_LSI1_Enable>:
{
 8004e02:	b480      	push	{r7}
 8004e04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e12:	f043 0301 	orr.w	r3, r3, #1
 8004e16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004e1a:	bf00      	nop
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <LL_RCC_LSI1_Disable>:
{
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e34:	f023 0301 	bic.w	r3, r3, #1
 8004e38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004e3c:	bf00      	nop
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <LL_RCC_LSI1_IsReady>:
{
 8004e46:	b480      	push	{r7}
 8004e48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d101      	bne.n	8004e5e <LL_RCC_LSI1_IsReady+0x18>
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e000      	b.n	8004e60 <LL_RCC_LSI1_IsReady+0x1a>
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <LL_RCC_LSI2_Enable>:
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e7a:	f043 0304 	orr.w	r3, r3, #4
 8004e7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004e82:	bf00      	nop
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <LL_RCC_LSI2_Disable>:
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e9c:	f023 0304 	bic.w	r3, r3, #4
 8004ea0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004ea4:	bf00      	nop
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <LL_RCC_LSI2_IsReady>:
{
 8004eae:	b480      	push	{r7}
 8004eb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b08      	cmp	r3, #8
 8004ec0:	d101      	bne.n	8004ec6 <LL_RCC_LSI2_IsReady+0x18>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e000      	b.n	8004ec8 <LL_RCC_LSI2_IsReady+0x1a>
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr

08004ed2 <LL_RCC_LSI2_SetTrimming>:
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	b083      	sub	sp, #12
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	021b      	lsls	r3, r3, #8
 8004eea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <LL_RCC_MSI_Enable>:
{
 8004f00:	b480      	push	{r7}
 8004f02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f0e:	f043 0301 	orr.w	r3, r3, #1
 8004f12:	6013      	str	r3, [r2, #0]
}
 8004f14:	bf00      	nop
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <LL_RCC_MSI_Disable>:
{
 8004f1e:	b480      	push	{r7}
 8004f20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f2c:	f023 0301 	bic.w	r3, r3, #1
 8004f30:	6013      	str	r3, [r2, #0]
}
 8004f32:	bf00      	nop
 8004f34:	46bd      	mov	sp, r7
 8004f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3a:	4770      	bx	lr

08004f3c <LL_RCC_MSI_IsReady>:
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d101      	bne.n	8004f52 <LL_RCC_MSI_IsReady+0x16>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e000      	b.n	8004f54 <LL_RCC_MSI_IsReady+0x18>
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <LL_RCC_MSI_SetRange>:
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	600b      	str	r3, [r1, #0]
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <LL_RCC_MSI_GetRange>:
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f96:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2bb0      	cmp	r3, #176	; 0xb0
 8004f9c:	d901      	bls.n	8004fa2 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004f9e:	23b0      	movs	r3, #176	; 0xb0
 8004fa0:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004fa2:	687b      	ldr	r3, [r7, #4]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	021b      	lsls	r3, r3, #8
 8004fc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	604b      	str	r3, [r1, #4]
}
 8004fce:	bf00      	nop
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <LL_RCC_SetSysClkSource>:
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004fe2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f023 0203 	bic.w	r2, r3, #3
 8004fec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	608b      	str	r3, [r1, #8]
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr

08005002 <LL_RCC_GetSysClkSource>:
{
 8005002:	b480      	push	{r7}
 8005004:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005006:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f003 030c 	and.w	r3, r3, #12
}
 8005010:	4618      	mov	r0, r3
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <LL_RCC_SetAHBPrescaler>:
{
 800501a:	b480      	push	{r7}
 800501c:	b083      	sub	sp, #12
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800502c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4313      	orrs	r3, r2
 8005034:	608b      	str	r3, [r1, #8]
}
 8005036:	bf00      	nop
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800504a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800504e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005052:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005056:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4313      	orrs	r3, r2
 800505e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <LL_RCC_SetAHB4Prescaler>:
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800507a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800507e:	f023 020f 	bic.w	r2, r3, #15
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	091b      	lsrs	r3, r3, #4
 8005086:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800508a:	4313      	orrs	r3, r2
 800508c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <LL_RCC_SetAPB1Prescaler>:
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80050a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	608b      	str	r3, [r1, #8]
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <LL_RCC_SetAPB2Prescaler>:
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80050cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4313      	orrs	r3, r2
 80050de:	608b      	str	r3, [r1, #8]
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <LL_RCC_GetAHBPrescaler>:
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80050f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <LL_RCC_GetAHB4Prescaler>:
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005108:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800510c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005110:	011b      	lsls	r3, r3, #4
 8005112:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8005116:	4618      	mov	r0, r3
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <LL_RCC_GetAPB1Prescaler>:
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800512e:	4618      	mov	r0, r3
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <LL_RCC_GetAPB2Prescaler>:
{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800513c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8005146:	4618      	mov	r0, r3
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <LL_RCC_PLL_Enable>:
{
 8005150:	b480      	push	{r7}
 8005152:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800515e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005162:	6013      	str	r3, [r2, #0]
}
 8005164:	bf00      	nop
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <LL_RCC_PLL_Disable>:
{
 800516e:	b480      	push	{r7}
 8005170:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800517c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005180:	6013      	str	r3, [r2, #0]
}
 8005182:	bf00      	nop
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <LL_RCC_PLL_IsReady>:
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800519a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800519e:	d101      	bne.n	80051a4 <LL_RCC_PLL_IsReady+0x18>
 80051a0:	2301      	movs	r3, #1
 80051a2:	e000      	b.n	80051a6 <LL_RCC_PLL_IsReady+0x1a>
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <LL_RCC_PLL_GetN>:
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80051b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	0a1b      	lsrs	r3, r3, #8
 80051bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <LL_RCC_PLL_GetR>:
{
 80051ca:	b480      	push	{r7}
 80051cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80051ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80051d8:	4618      	mov	r0, r3
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <LL_RCC_PLL_GetDivider>:
{
 80051e2:	b480      	push	{r7}
 80051e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80051e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <LL_RCC_PLL_GetMainSource>:
{
 80051fa:	b480      	push	{r7}
 80051fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80051fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f003 0303 	and.w	r3, r3, #3
}
 8005208:	4618      	mov	r0, r3
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <LL_RCC_IsActiveFlag_HPRE>:
{
 8005212:	b480      	push	{r7}
 8005214:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005224:	d101      	bne.n	800522a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005226:	2301      	movs	r3, #1
 8005228:	e000      	b.n	800522c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8005236:	b480      	push	{r7}
 8005238:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800523a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800523e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005246:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800524a:	d101      	bne.n	8005250 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800524c:	2301      	movs	r3, #1
 800524e:	e000      	b.n	8005252 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005264:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800526c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005270:	d101      	bne.n	8005276 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005272:	2301      	movs	r3, #1
 8005274:	e000      	b.n	8005278 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8005282:	b480      	push	{r7}
 8005284:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005290:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005294:	d101      	bne.n	800529a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005296:	2301      	movs	r3, #1
 8005298:	e000      	b.n	800529c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80052a6:	b480      	push	{r7}
 80052a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80052aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052b8:	d101      	bne.n	80052be <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80052ba:	2301      	movs	r3, #1
 80052bc:	e000      	b.n	80052c0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr
	...

080052cc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052cc:	b590      	push	{r4, r7, lr}
 80052ce:	b08d      	sub	sp, #52	; 0x34
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e363      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0320 	and.w	r3, r3, #32
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 808d 	beq.w	8005406 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ec:	f7ff fe89 	bl	8005002 <LL_RCC_GetSysClkSource>
 80052f0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052f2:	f7ff ff82 	bl	80051fa <LL_RCC_PLL_GetMainSource>
 80052f6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80052f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d005      	beq.n	800530a <HAL_RCC_OscConfig+0x3e>
 80052fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005300:	2b0c      	cmp	r3, #12
 8005302:	d147      	bne.n	8005394 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8005304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005306:	2b01      	cmp	r3, #1
 8005308:	d144      	bne.n	8005394 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e347      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800531a:	f7ff fe34 	bl	8004f86 <LL_RCC_MSI_GetRange>
 800531e:	4603      	mov	r3, r0
 8005320:	429c      	cmp	r4, r3
 8005322:	d914      	bls.n	800534e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fd2f 	bl	8005d8c <RCC_SetFlashLatencyFromMSIRange>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e336      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	4618      	mov	r0, r3
 800533e:	f7ff fe0e 	bl	8004f5e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff fe32 	bl	8004fb0 <LL_RCC_MSI_SetCalibTrimming>
 800534c:	e013      	b.n	8005376 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005352:	4618      	mov	r0, r3
 8005354:	f7ff fe03 	bl	8004f5e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	4618      	mov	r0, r3
 800535e:	f7ff fe27 	bl	8004fb0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	4618      	mov	r0, r3
 8005368:	f000 fd10 	bl	8005d8c <RCC_SetFlashLatencyFromMSIRange>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e317      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005376:	f000 fcc9 	bl	8005d0c <HAL_RCC_GetHCLKFreq>
 800537a:	4603      	mov	r3, r0
 800537c:	4aa4      	ldr	r2, [pc, #656]	; (8005610 <HAL_RCC_OscConfig+0x344>)
 800537e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005380:	4ba4      	ldr	r3, [pc, #656]	; (8005614 <HAL_RCC_OscConfig+0x348>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4618      	mov	r0, r3
 8005386:	f7fe fc17 	bl	8003bb8 <HAL_InitTick>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d039      	beq.n	8005404 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e308      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d01e      	beq.n	80053da <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800539c:	f7ff fdb0 	bl	8004f00 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053a0:	f7fe fc58 	bl	8003c54 <HAL_GetTick>
 80053a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053a8:	f7fe fc54 	bl	8003c54 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e2f5      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80053ba:	f7ff fdbf 	bl	8004f3c <LL_RCC_MSI_IsReady>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d0f1      	beq.n	80053a8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7ff fdc8 	bl	8004f5e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7ff fdec 	bl	8004fb0 <LL_RCC_MSI_SetCalibTrimming>
 80053d8:	e015      	b.n	8005406 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80053da:	f7ff fda0 	bl	8004f1e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053de:	f7fe fc39 	bl	8003c54 <HAL_GetTick>
 80053e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80053e4:	e008      	b.n	80053f8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053e6:	f7fe fc35 	bl	8003c54 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e2d6      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80053f8:	f7ff fda0 	bl	8004f3c <LL_RCC_MSI_IsReady>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1f1      	bne.n	80053e6 <HAL_RCC_OscConfig+0x11a>
 8005402:	e000      	b.n	8005406 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005404:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d047      	beq.n	80054a2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005412:	f7ff fdf6 	bl	8005002 <LL_RCC_GetSysClkSource>
 8005416:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005418:	f7ff feef 	bl	80051fa <LL_RCC_PLL_GetMainSource>
 800541c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800541e:	6a3b      	ldr	r3, [r7, #32]
 8005420:	2b08      	cmp	r3, #8
 8005422:	d005      	beq.n	8005430 <HAL_RCC_OscConfig+0x164>
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	2b0c      	cmp	r3, #12
 8005428:	d108      	bne.n	800543c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	2b03      	cmp	r3, #3
 800542e:	d105      	bne.n	800543c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d134      	bne.n	80054a2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e2b4      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005444:	d102      	bne.n	800544c <HAL_RCC_OscConfig+0x180>
 8005446:	f7ff fbdd 	bl	8004c04 <LL_RCC_HSE_Enable>
 800544a:	e001      	b.n	8005450 <HAL_RCC_OscConfig+0x184>
 800544c:	f7ff fbe9 	bl	8004c22 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d012      	beq.n	800547e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005458:	f7fe fbfc 	bl	8003c54 <HAL_GetTick>
 800545c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005460:	f7fe fbf8 	bl	8003c54 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b64      	cmp	r3, #100	; 0x64
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e299      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005472:	f7ff fbe5 	bl	8004c40 <LL_RCC_HSE_IsReady>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d0f1      	beq.n	8005460 <HAL_RCC_OscConfig+0x194>
 800547c:	e011      	b.n	80054a2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800547e:	f7fe fbe9 	bl	8003c54 <HAL_GetTick>
 8005482:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005484:	e008      	b.n	8005498 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005486:	f7fe fbe5 	bl	8003c54 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	2b64      	cmp	r3, #100	; 0x64
 8005492:	d901      	bls.n	8005498 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e286      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005498:	f7ff fbd2 	bl	8004c40 <LL_RCC_HSE_IsReady>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d1f1      	bne.n	8005486 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d04c      	beq.n	8005548 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054ae:	f7ff fda8 	bl	8005002 <LL_RCC_GetSysClkSource>
 80054b2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054b4:	f7ff fea1 	bl	80051fa <LL_RCC_PLL_GetMainSource>
 80054b8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	2b04      	cmp	r3, #4
 80054be:	d005      	beq.n	80054cc <HAL_RCC_OscConfig+0x200>
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	2b0c      	cmp	r3, #12
 80054c4:	d10e      	bne.n	80054e4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d10b      	bne.n	80054e4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e266      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	4618      	mov	r0, r3
 80054de:	f7ff fbf1 	bl	8004cc4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80054e2:	e031      	b.n	8005548 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d019      	beq.n	8005520 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054ec:	f7ff fbba 	bl	8004c64 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f0:	f7fe fbb0 	bl	8003c54 <HAL_GetTick>
 80054f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80054f6:	e008      	b.n	800550a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054f8:	f7fe fbac 	bl	8003c54 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e24d      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800550a:	f7ff fbc9 	bl	8004ca0 <LL_RCC_HSI_IsReady>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0f1      	beq.n	80054f8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	4618      	mov	r0, r3
 800551a:	f7ff fbd3 	bl	8004cc4 <LL_RCC_HSI_SetCalibTrimming>
 800551e:	e013      	b.n	8005548 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005520:	f7ff fbaf 	bl	8004c82 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005524:	f7fe fb96 	bl	8003c54 <HAL_GetTick>
 8005528:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800552a:	e008      	b.n	800553e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800552c:	f7fe fb92 	bl	8003c54 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b02      	cmp	r3, #2
 8005538:	d901      	bls.n	800553e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e233      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800553e:	f7ff fbaf 	bl	8004ca0 <LL_RCC_HSI_IsReady>
 8005542:	4603      	mov	r3, r0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1f1      	bne.n	800552c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0308 	and.w	r3, r3, #8
 8005550:	2b00      	cmp	r3, #0
 8005552:	d106      	bne.n	8005562 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 80a3 	beq.w	80056a8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d076      	beq.n	8005658 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0310 	and.w	r3, r3, #16
 8005572:	2b00      	cmp	r3, #0
 8005574:	d046      	beq.n	8005604 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005576:	f7ff fc66 	bl	8004e46 <LL_RCC_LSI1_IsReady>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d113      	bne.n	80055a8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8005580:	f7ff fc3f 	bl	8004e02 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005584:	f7fe fb66 	bl	8003c54 <HAL_GetTick>
 8005588:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800558c:	f7fe fb62 	bl	8003c54 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e203      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800559e:	f7ff fc52 	bl	8004e46 <LL_RCC_LSI1_IsReady>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0f1      	beq.n	800558c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80055a8:	f7ff fc5f 	bl	8004e6a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ac:	f7fe fb52 	bl	8003c54 <HAL_GetTick>
 80055b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80055b4:	f7fe fb4e 	bl	8003c54 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b03      	cmp	r3, #3
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e1ef      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80055c6:	f7ff fc72 	bl	8004eae <LL_RCC_LSI2_IsReady>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d0f1      	beq.n	80055b4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff fc7c 	bl	8004ed2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80055da:	f7ff fc23 	bl	8004e24 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055de:	f7fe fb39 	bl	8003c54 <HAL_GetTick>
 80055e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80055e4:	e008      	b.n	80055f8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80055e6:	f7fe fb35 	bl	8003c54 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d901      	bls.n	80055f8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e1d6      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80055f8:	f7ff fc25 	bl	8004e46 <LL_RCC_LSI1_IsReady>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1f1      	bne.n	80055e6 <HAL_RCC_OscConfig+0x31a>
 8005602:	e051      	b.n	80056a8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005604:	f7ff fbfd 	bl	8004e02 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005608:	f7fe fb24 	bl	8003c54 <HAL_GetTick>
 800560c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800560e:	e00c      	b.n	800562a <HAL_RCC_OscConfig+0x35e>
 8005610:	20000020 	.word	0x20000020
 8005614:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005618:	f7fe fb1c 	bl	8003c54 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b02      	cmp	r3, #2
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e1bd      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800562a:	f7ff fc0c 	bl	8004e46 <LL_RCC_LSI1_IsReady>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d0f1      	beq.n	8005618 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005634:	f7ff fc2a 	bl	8004e8c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005638:	e008      	b.n	800564c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800563a:	f7fe fb0b 	bl	8003c54 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	2b03      	cmp	r3, #3
 8005646:	d901      	bls.n	800564c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e1ac      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800564c:	f7ff fc2f 	bl	8004eae <LL_RCC_LSI2_IsReady>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1f1      	bne.n	800563a <HAL_RCC_OscConfig+0x36e>
 8005656:	e027      	b.n	80056a8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005658:	f7ff fc18 	bl	8004e8c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800565c:	f7fe fafa 	bl	8003c54 <HAL_GetTick>
 8005660:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005662:	e008      	b.n	8005676 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005664:	f7fe faf6 	bl	8003c54 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b03      	cmp	r3, #3
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e197      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005676:	f7ff fc1a 	bl	8004eae <LL_RCC_LSI2_IsReady>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1f1      	bne.n	8005664 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8005680:	f7ff fbd0 	bl	8004e24 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005684:	f7fe fae6 	bl	8003c54 <HAL_GetTick>
 8005688:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800568a:	e008      	b.n	800569e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800568c:	f7fe fae2 	bl	8003c54 <HAL_GetTick>
 8005690:	4602      	mov	r2, r0
 8005692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d901      	bls.n	800569e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800569a:	2303      	movs	r3, #3
 800569c:	e183      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800569e:	f7ff fbd2 	bl	8004e46 <LL_RCC_LSI1_IsReady>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1f1      	bne.n	800568c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d05b      	beq.n	800576c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056b4:	4ba7      	ldr	r3, [pc, #668]	; (8005954 <HAL_RCC_OscConfig+0x688>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d114      	bne.n	80056ea <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80056c0:	f7ff fa70 	bl	8004ba4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056c4:	f7fe fac6 	bl	8003c54 <HAL_GetTick>
 80056c8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056cc:	f7fe fac2 	bl	8003c54 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e163      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056de:	4b9d      	ldr	r3, [pc, #628]	; (8005954 <HAL_RCC_OscConfig+0x688>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0f0      	beq.n	80056cc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d102      	bne.n	80056f8 <HAL_RCC_OscConfig+0x42c>
 80056f2:	f7ff fb30 	bl	8004d56 <LL_RCC_LSE_Enable>
 80056f6:	e00c      	b.n	8005712 <HAL_RCC_OscConfig+0x446>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	2b05      	cmp	r3, #5
 80056fe:	d104      	bne.n	800570a <HAL_RCC_OscConfig+0x43e>
 8005700:	f7ff fb4b 	bl	8004d9a <LL_RCC_LSE_EnableBypass>
 8005704:	f7ff fb27 	bl	8004d56 <LL_RCC_LSE_Enable>
 8005708:	e003      	b.n	8005712 <HAL_RCC_OscConfig+0x446>
 800570a:	f7ff fb35 	bl	8004d78 <LL_RCC_LSE_Disable>
 800570e:	f7ff fb55 	bl	8004dbc <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d014      	beq.n	8005744 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800571a:	f7fe fa9b 	bl	8003c54 <HAL_GetTick>
 800571e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005720:	e00a      	b.n	8005738 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005722:	f7fe fa97 	bl	8003c54 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005730:	4293      	cmp	r3, r2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e136      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005738:	f7ff fb51 	bl	8004dde <LL_RCC_LSE_IsReady>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0ef      	beq.n	8005722 <HAL_RCC_OscConfig+0x456>
 8005742:	e013      	b.n	800576c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005744:	f7fe fa86 	bl	8003c54 <HAL_GetTick>
 8005748:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800574a:	e00a      	b.n	8005762 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800574c:	f7fe fa82 	bl	8003c54 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	f241 3288 	movw	r2, #5000	; 0x1388
 800575a:	4293      	cmp	r3, r2
 800575c:	d901      	bls.n	8005762 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e121      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005762:	f7ff fb3c 	bl	8004dde <LL_RCC_LSE_IsReady>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1ef      	bne.n	800574c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005774:	2b00      	cmp	r3, #0
 8005776:	d02c      	beq.n	80057d2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577c:	2b00      	cmp	r3, #0
 800577e:	d014      	beq.n	80057aa <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005780:	f7ff fab5 	bl	8004cee <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005784:	f7fe fa66 	bl	8003c54 <HAL_GetTick>
 8005788:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800578a:	e008      	b.n	800579e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800578c:	f7fe fa62 	bl	8003c54 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b02      	cmp	r3, #2
 8005798:	d901      	bls.n	800579e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e103      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800579e:	f7ff fac8 	bl	8004d32 <LL_RCC_HSI48_IsReady>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d0f1      	beq.n	800578c <HAL_RCC_OscConfig+0x4c0>
 80057a8:	e013      	b.n	80057d2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057aa:	f7ff fab1 	bl	8004d10 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ae:	f7fe fa51 	bl	8003c54 <HAL_GetTick>
 80057b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80057b4:	e008      	b.n	80057c8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057b6:	f7fe fa4d 	bl	8003c54 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d901      	bls.n	80057c8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e0ee      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80057c8:	f7ff fab3 	bl	8004d32 <LL_RCC_HSI48_IsReady>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1f1      	bne.n	80057b6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 80e4 	beq.w	80059a4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057dc:	f7ff fc11 	bl	8005002 <LL_RCC_GetSysClkSource>
 80057e0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80057e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	f040 80b4 	bne.w	800595c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f003 0203 	and.w	r2, r3, #3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fe:	429a      	cmp	r2, r3
 8005800:	d123      	bne.n	800584a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800580c:	429a      	cmp	r2, r3
 800580e:	d11c      	bne.n	800584a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	0a1b      	lsrs	r3, r3, #8
 8005814:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800581c:	429a      	cmp	r2, r3
 800581e:	d114      	bne.n	800584a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800582a:	429a      	cmp	r2, r3
 800582c:	d10d      	bne.n	800584a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005838:	429a      	cmp	r2, r3
 800583a:	d106      	bne.n	800584a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005846:	429a      	cmp	r2, r3
 8005848:	d05d      	beq.n	8005906 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	2b0c      	cmp	r3, #12
 800584e:	d058      	beq.n	8005902 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005850:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e0a1      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005862:	f7ff fc84 	bl	800516e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005866:	f7fe f9f5 	bl	8003c54 <HAL_GetTick>
 800586a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800586c:	e008      	b.n	8005880 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800586e:	f7fe f9f1 	bl	8003c54 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d901      	bls.n	8005880 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e092      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1ef      	bne.n	800586e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800588e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005892:	68da      	ldr	r2, [r3, #12]
 8005894:	4b30      	ldr	r3, [pc, #192]	; (8005958 <HAL_RCC_OscConfig+0x68c>)
 8005896:	4013      	ands	r3, r2
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80058a0:	4311      	orrs	r1, r2
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058a6:	0212      	lsls	r2, r2, #8
 80058a8:	4311      	orrs	r1, r2
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80058ae:	4311      	orrs	r1, r2
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80058b4:	4311      	orrs	r1, r2
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80058ba:	430a      	orrs	r2, r1
 80058bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058c0:	4313      	orrs	r3, r2
 80058c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80058c4:	f7ff fc44 	bl	8005150 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80058d8:	f7fe f9bc 	bl	8003c54 <HAL_GetTick>
 80058dc:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058de:	e008      	b.n	80058f2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058e0:	f7fe f9b8 	bl	8003c54 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e059      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0ef      	beq.n	80058e0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005900:	e050      	b.n	80059a4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e04f      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d147      	bne.n	80059a4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005914:	f7ff fc1c 	bl	8005150 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005926:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005928:	f7fe f994 	bl	8003c54 <HAL_GetTick>
 800592c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800592e:	e008      	b.n	8005942 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005930:	f7fe f990 	bl	8003c54 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b02      	cmp	r3, #2
 800593c:	d901      	bls.n	8005942 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e031      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d0ef      	beq.n	8005930 <HAL_RCC_OscConfig+0x664>
 8005950:	e028      	b.n	80059a4 <HAL_RCC_OscConfig+0x6d8>
 8005952:	bf00      	nop
 8005954:	58000400 	.word	0x58000400
 8005958:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	2b0c      	cmp	r3, #12
 8005960:	d01e      	beq.n	80059a0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005962:	f7ff fc04 	bl	800516e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005966:	f7fe f975 	bl	8003c54 <HAL_GetTick>
 800596a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800596c:	e008      	b.n	8005980 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800596e:	f7fe f971 	bl	8003c54 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	2b02      	cmp	r3, #2
 800597a:	d901      	bls.n	8005980 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e012      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1ef      	bne.n	800596e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800598e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005992:	68da      	ldr	r2, [r3, #12]
 8005994:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005998:	4b05      	ldr	r3, [pc, #20]	; (80059b0 <HAL_RCC_OscConfig+0x6e4>)
 800599a:	4013      	ands	r3, r2
 800599c:	60cb      	str	r3, [r1, #12]
 800599e:	e001      	b.n	80059a4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e000      	b.n	80059a6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3734      	adds	r7, #52	; 0x34
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd90      	pop	{r4, r7, pc}
 80059ae:	bf00      	nop
 80059b0:	eefefffc 	.word	0xeefefffc

080059b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d101      	bne.n	80059c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e12d      	b.n	8005c24 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059c8:	4b98      	ldr	r3, [pc, #608]	; (8005c2c <HAL_RCC_ClockConfig+0x278>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0307 	and.w	r3, r3, #7
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d91b      	bls.n	8005a0e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059d6:	4b95      	ldr	r3, [pc, #596]	; (8005c2c <HAL_RCC_ClockConfig+0x278>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f023 0207 	bic.w	r2, r3, #7
 80059de:	4993      	ldr	r1, [pc, #588]	; (8005c2c <HAL_RCC_ClockConfig+0x278>)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059e6:	f7fe f935 	bl	8003c54 <HAL_GetTick>
 80059ea:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ec:	e008      	b.n	8005a00 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80059ee:	f7fe f931 	bl	8003c54 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d901      	bls.n	8005a00 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e111      	b.n	8005c24 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a00:	4b8a      	ldr	r3, [pc, #552]	; (8005c2c <HAL_RCC_ClockConfig+0x278>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0307 	and.w	r3, r3, #7
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d1ef      	bne.n	80059ee <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0302 	and.w	r3, r3, #2
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d016      	beq.n	8005a48 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7ff fafb 	bl	800501a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a24:	f7fe f916 	bl	8003c54 <HAL_GetTick>
 8005a28:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005a2a:	e008      	b.n	8005a3e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a2c:	f7fe f912 	bl	8003c54 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e0f2      	b.n	8005c24 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005a3e:	f7ff fbe8 	bl	8005212 <LL_RCC_IsActiveFlag_HPRE>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0f1      	beq.n	8005a2c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0320 	and.w	r3, r3, #32
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d016      	beq.n	8005a82 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7ff faf2 	bl	8005042 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a5e:	f7fe f8f9 	bl	8003c54 <HAL_GetTick>
 8005a62:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005a64:	e008      	b.n	8005a78 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a66:	f7fe f8f5 	bl	8003c54 <HAL_GetTick>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d901      	bls.n	8005a78 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e0d5      	b.n	8005c24 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005a78:	f7ff fbdd 	bl	8005236 <LL_RCC_IsActiveFlag_C2HPRE>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d0f1      	beq.n	8005a66 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d016      	beq.n	8005abc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7ff faeb 	bl	800506e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a98:	f7fe f8dc 	bl	8003c54 <HAL_GetTick>
 8005a9c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005aa0:	f7fe f8d8 	bl	8003c54 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e0b8      	b.n	8005c24 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005ab2:	f7ff fbd3 	bl	800525c <LL_RCC_IsActiveFlag_SHDHPRE>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0f1      	beq.n	8005aa0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0304 	and.w	r3, r3, #4
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d016      	beq.n	8005af6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	68db      	ldr	r3, [r3, #12]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff fae5 	bl	800509c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ad2:	f7fe f8bf 	bl	8003c54 <HAL_GetTick>
 8005ad6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005ad8:	e008      	b.n	8005aec <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ada:	f7fe f8bb 	bl	8003c54 <HAL_GetTick>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d901      	bls.n	8005aec <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e09b      	b.n	8005c24 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005aec:	f7ff fbc9 	bl	8005282 <LL_RCC_IsActiveFlag_PPRE1>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0f1      	beq.n	8005ada <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0308 	and.w	r3, r3, #8
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d017      	beq.n	8005b32 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	00db      	lsls	r3, r3, #3
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7ff fadb 	bl	80050c4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b0e:	f7fe f8a1 	bl	8003c54 <HAL_GetTick>
 8005b12:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005b14:	e008      	b.n	8005b28 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b16:	f7fe f89d 	bl	8003c54 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d901      	bls.n	8005b28 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e07d      	b.n	8005c24 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005b28:	f7ff fbbd 	bl	80052a6 <LL_RCC_IsActiveFlag_PPRE2>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d0f1      	beq.n	8005b16 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d043      	beq.n	8005bc6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d106      	bne.n	8005b54 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005b46:	f7ff f87b 	bl	8004c40 <LL_RCC_HSE_IsReady>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d11e      	bne.n	8005b8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e067      	b.n	8005c24 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	2b03      	cmp	r3, #3
 8005b5a:	d106      	bne.n	8005b6a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005b5c:	f7ff fb16 	bl	800518c <LL_RCC_PLL_IsReady>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d113      	bne.n	8005b8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e05c      	b.n	8005c24 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d106      	bne.n	8005b80 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005b72:	f7ff f9e3 	bl	8004f3c <LL_RCC_MSI_IsReady>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d108      	bne.n	8005b8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e051      	b.n	8005c24 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005b80:	f7ff f88e 	bl	8004ca0 <LL_RCC_HSI_IsReady>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e04a      	b.n	8005c24 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7ff fa21 	bl	8004fda <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b98:	f7fe f85c 	bl	8003c54 <HAL_GetTick>
 8005b9c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b9e:	e00a      	b.n	8005bb6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ba0:	f7fe f858 	bl	8003c54 <HAL_GetTick>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	1ad3      	subs	r3, r2, r3
 8005baa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e036      	b.n	8005c24 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bb6:	f7ff fa24 	bl	8005002 <LL_RCC_GetSysClkSource>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d1ec      	bne.n	8005ba0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bc6:	4b19      	ldr	r3, [pc, #100]	; (8005c2c <HAL_RCC_ClockConfig+0x278>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0307 	and.w	r3, r3, #7
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d21b      	bcs.n	8005c0c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bd4:	4b15      	ldr	r3, [pc, #84]	; (8005c2c <HAL_RCC_ClockConfig+0x278>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f023 0207 	bic.w	r2, r3, #7
 8005bdc:	4913      	ldr	r1, [pc, #76]	; (8005c2c <HAL_RCC_ClockConfig+0x278>)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be4:	f7fe f836 	bl	8003c54 <HAL_GetTick>
 8005be8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005bec:	f7fe f832 	bl	8003c54 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e012      	b.n	8005c24 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bfe:	4b0b      	ldr	r3, [pc, #44]	; (8005c2c <HAL_RCC_ClockConfig+0x278>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d1ef      	bne.n	8005bec <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005c0c:	f000 f87e 	bl	8005d0c <HAL_RCC_GetHCLKFreq>
 8005c10:	4603      	mov	r3, r0
 8005c12:	4a07      	ldr	r2, [pc, #28]	; (8005c30 <HAL_RCC_ClockConfig+0x27c>)
 8005c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8005c16:	f7fe f829 	bl	8003c6c <HAL_GetTickPrio>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7fd ffcb 	bl	8003bb8 <HAL_InitTick>
 8005c22:	4603      	mov	r3, r0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3710      	adds	r7, #16
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	58004000 	.word	0x58004000
 8005c30:	20000020 	.word	0x20000020

08005c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c34:	b590      	push	{r4, r7, lr}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c3a:	f7ff f9e2 	bl	8005002 <LL_RCC_GetSysClkSource>
 8005c3e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10a      	bne.n	8005c5c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005c46:	f7ff f99e 	bl	8004f86 <LL_RCC_MSI_GetRange>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	091b      	lsrs	r3, r3, #4
 8005c4e:	f003 030f 	and.w	r3, r3, #15
 8005c52:	4a2b      	ldr	r2, [pc, #172]	; (8005d00 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	e04b      	b.n	8005cf4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b04      	cmp	r3, #4
 8005c60:	d102      	bne.n	8005c68 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c62:	4b28      	ldr	r3, [pc, #160]	; (8005d04 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	e045      	b.n	8005cf4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2b08      	cmp	r3, #8
 8005c6c:	d10a      	bne.n	8005c84 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005c6e:	f7fe ffb7 	bl	8004be0 <LL_RCC_HSE_IsEnabledDiv2>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d102      	bne.n	8005c7e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005c78:	4b22      	ldr	r3, [pc, #136]	; (8005d04 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c7a:	60fb      	str	r3, [r7, #12]
 8005c7c:	e03a      	b.n	8005cf4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005c7e:	4b22      	ldr	r3, [pc, #136]	; (8005d08 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005c80:	60fb      	str	r3, [r7, #12]
 8005c82:	e037      	b.n	8005cf4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005c84:	f7ff fab9 	bl	80051fa <LL_RCC_PLL_GetMainSource>
 8005c88:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b02      	cmp	r3, #2
 8005c8e:	d003      	beq.n	8005c98 <HAL_RCC_GetSysClockFreq+0x64>
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	2b03      	cmp	r3, #3
 8005c94:	d003      	beq.n	8005c9e <HAL_RCC_GetSysClockFreq+0x6a>
 8005c96:	e00d      	b.n	8005cb4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005c98:	4b1a      	ldr	r3, [pc, #104]	; (8005d04 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005c9a:	60bb      	str	r3, [r7, #8]
        break;
 8005c9c:	e015      	b.n	8005cca <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005c9e:	f7fe ff9f 	bl	8004be0 <LL_RCC_HSE_IsEnabledDiv2>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d102      	bne.n	8005cae <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005ca8:	4b16      	ldr	r3, [pc, #88]	; (8005d04 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005caa:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005cac:	e00d      	b.n	8005cca <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005cae:	4b16      	ldr	r3, [pc, #88]	; (8005d08 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005cb0:	60bb      	str	r3, [r7, #8]
        break;
 8005cb2:	e00a      	b.n	8005cca <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005cb4:	f7ff f967 	bl	8004f86 <LL_RCC_MSI_GetRange>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	091b      	lsrs	r3, r3, #4
 8005cbc:	f003 030f 	and.w	r3, r3, #15
 8005cc0:	4a0f      	ldr	r2, [pc, #60]	; (8005d00 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cc6:	60bb      	str	r3, [r7, #8]
        break;
 8005cc8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005cca:	f7ff fa71 	bl	80051b0 <LL_RCC_PLL_GetN>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	fb03 f402 	mul.w	r4, r3, r2
 8005cd6:	f7ff fa84 	bl	80051e2 <LL_RCC_PLL_GetDivider>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	091b      	lsrs	r3, r3, #4
 8005cde:	3301      	adds	r3, #1
 8005ce0:	fbb4 f4f3 	udiv	r4, r4, r3
 8005ce4:	f7ff fa71 	bl	80051ca <LL_RCC_PLL_GetR>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	0f5b      	lsrs	r3, r3, #29
 8005cec:	3301      	adds	r3, #1
 8005cee:	fbb4 f3f3 	udiv	r3, r4, r3
 8005cf2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd90      	pop	{r4, r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	08011060 	.word	0x08011060
 8005d04:	00f42400 	.word	0x00f42400
 8005d08:	01e84800 	.word	0x01e84800

08005d0c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d0c:	b598      	push	{r3, r4, r7, lr}
 8005d0e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005d10:	f7ff ff90 	bl	8005c34 <HAL_RCC_GetSysClockFreq>
 8005d14:	4604      	mov	r4, r0
 8005d16:	f7ff f9e9 	bl	80050ec <LL_RCC_GetAHBPrescaler>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	091b      	lsrs	r3, r3, #4
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	4a03      	ldr	r2, [pc, #12]	; (8005d30 <HAL_RCC_GetHCLKFreq+0x24>)
 8005d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d28:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	bd98      	pop	{r3, r4, r7, pc}
 8005d30:	08011000 	.word	0x08011000

08005d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d34:	b598      	push	{r3, r4, r7, lr}
 8005d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005d38:	f7ff ffe8 	bl	8005d0c <HAL_RCC_GetHCLKFreq>
 8005d3c:	4604      	mov	r4, r0
 8005d3e:	f7ff f9ef 	bl	8005120 <LL_RCC_GetAPB1Prescaler>
 8005d42:	4603      	mov	r3, r0
 8005d44:	0a1b      	lsrs	r3, r3, #8
 8005d46:	f003 0307 	and.w	r3, r3, #7
 8005d4a:	4a04      	ldr	r2, [pc, #16]	; (8005d5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d50:	f003 031f 	and.w	r3, r3, #31
 8005d54:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	bd98      	pop	{r3, r4, r7, pc}
 8005d5c:	08011040 	.word	0x08011040

08005d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d60:	b598      	push	{r3, r4, r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005d64:	f7ff ffd2 	bl	8005d0c <HAL_RCC_GetHCLKFreq>
 8005d68:	4604      	mov	r4, r0
 8005d6a:	f7ff f9e5 	bl	8005138 <LL_RCC_GetAPB2Prescaler>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	0adb      	lsrs	r3, r3, #11
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	4a04      	ldr	r2, [pc, #16]	; (8005d88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d7c:	f003 031f 	and.w	r3, r3, #31
 8005d80:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	bd98      	pop	{r3, r4, r7, pc}
 8005d88:	08011040 	.word	0x08011040

08005d8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005d8c:	b590      	push	{r4, r7, lr}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2bb0      	cmp	r3, #176	; 0xb0
 8005d98:	d903      	bls.n	8005da2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005d9a:	4b15      	ldr	r3, [pc, #84]	; (8005df0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	e007      	b.n	8005db2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	091b      	lsrs	r3, r3, #4
 8005da6:	f003 030f 	and.w	r3, r3, #15
 8005daa:	4a11      	ldr	r2, [pc, #68]	; (8005df0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005db0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005db2:	f7ff f9a7 	bl	8005104 <LL_RCC_GetAHB4Prescaler>
 8005db6:	4603      	mov	r3, r0
 8005db8:	091b      	lsrs	r3, r3, #4
 8005dba:	f003 030f 	and.w	r3, r3, #15
 8005dbe:	4a0d      	ldr	r2, [pc, #52]	; (8005df4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dca:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	4a0a      	ldr	r2, [pc, #40]	; (8005df8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd4:	0c9c      	lsrs	r4, r3, #18
 8005dd6:	f7fe fef5 	bl	8004bc4 <HAL_PWREx_GetVoltageRange>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4620      	mov	r0, r4
 8005de0:	f000 f80c 	bl	8005dfc <RCC_SetFlashLatency>
 8005de4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd90      	pop	{r4, r7, pc}
 8005dee:	bf00      	nop
 8005df0:	08011060 	.word	0x08011060
 8005df4:	08011000 	.word	0x08011000
 8005df8:	431bde83 	.word	0x431bde83

08005dfc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005dfc:	b590      	push	{r4, r7, lr}
 8005dfe:	b093      	sub	sp, #76	; 0x4c
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005e06:	4b37      	ldr	r3, [pc, #220]	; (8005ee4 <RCC_SetFlashLatency+0xe8>)
 8005e08:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005e0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005e12:	4a35      	ldr	r2, [pc, #212]	; (8005ee8 <RCC_SetFlashLatency+0xec>)
 8005e14:	f107 031c 	add.w	r3, r7, #28
 8005e18:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005e1e:	4b33      	ldr	r3, [pc, #204]	; (8005eec <RCC_SetFlashLatency+0xf0>)
 8005e20:	f107 040c 	add.w	r4, r7, #12
 8005e24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e34:	d11a      	bne.n	8005e6c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005e36:	2300      	movs	r3, #0
 8005e38:	643b      	str	r3, [r7, #64]	; 0x40
 8005e3a:	e013      	b.n	8005e64 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005e3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	3348      	adds	r3, #72	; 0x48
 8005e42:	443b      	add	r3, r7
 8005e44:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d807      	bhi.n	8005e5e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	3348      	adds	r3, #72	; 0x48
 8005e54:	443b      	add	r3, r7
 8005e56:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005e5a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005e5c:	e020      	b.n	8005ea0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005e5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e60:	3301      	adds	r3, #1
 8005e62:	643b      	str	r3, [r7, #64]	; 0x40
 8005e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d9e8      	bls.n	8005e3c <RCC_SetFlashLatency+0x40>
 8005e6a:	e019      	b.n	8005ea0 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e70:	e013      	b.n	8005e9a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	3348      	adds	r3, #72	; 0x48
 8005e78:	443b      	add	r3, r7
 8005e7a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d807      	bhi.n	8005e94 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	3348      	adds	r3, #72	; 0x48
 8005e8a:	443b      	add	r3, r7
 8005e8c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005e90:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005e92:	e005      	b.n	8005ea0 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e96:	3301      	adds	r3, #1
 8005e98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d9e8      	bls.n	8005e72 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005ea0:	4b13      	ldr	r3, [pc, #76]	; (8005ef0 <RCC_SetFlashLatency+0xf4>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f023 0207 	bic.w	r2, r3, #7
 8005ea8:	4911      	ldr	r1, [pc, #68]	; (8005ef0 <RCC_SetFlashLatency+0xf4>)
 8005eaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eac:	4313      	orrs	r3, r2
 8005eae:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005eb0:	f7fd fed0 	bl	8003c54 <HAL_GetTick>
 8005eb4:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005eb6:	e008      	b.n	8005eca <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005eb8:	f7fd fecc 	bl	8003c54 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d901      	bls.n	8005eca <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e007      	b.n	8005eda <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005eca:	4b09      	ldr	r3, [pc, #36]	; (8005ef0 <RCC_SetFlashLatency+0xf4>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0307 	and.w	r3, r3, #7
 8005ed2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d1ef      	bne.n	8005eb8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	374c      	adds	r7, #76	; 0x4c
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd90      	pop	{r4, r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	0800fd88 	.word	0x0800fd88
 8005ee8:	0800fd98 	.word	0x0800fd98
 8005eec:	0800fda4 	.word	0x0800fda4
 8005ef0:	58004000 	.word	0x58004000

08005ef4 <LL_RCC_LSE_IsEnabled>:
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d101      	bne.n	8005f0c <LL_RCC_LSE_IsEnabled+0x18>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e000      	b.n	8005f0e <LL_RCC_LSE_IsEnabled+0x1a>
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <LL_RCC_LSE_IsReady>:
{
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005f1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d101      	bne.n	8005f30 <LL_RCC_LSE_IsReady+0x18>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	e000      	b.n	8005f32 <LL_RCC_LSE_IsReady+0x1a>
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <LL_RCC_SetRFWKPClockSource>:
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005f44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <LL_RCC_SetSMPSClockSource>:
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f76:	f023 0203 	bic.w	r2, r3, #3
 8005f7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <LL_RCC_SetSMPSPrescaler>:
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005fa2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <LL_RCC_SetUSARTClockSource>:
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005fc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc8:	f023 0203 	bic.w	r2, r3, #3
 8005fcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <LL_RCC_SetLPUARTClockSource>:
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ff4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ff8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <LL_RCC_SetI2CClockSource>:
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800601c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	091b      	lsrs	r3, r3, #4
 8006024:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006028:	43db      	mvns	r3, r3
 800602a:	401a      	ands	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	011b      	lsls	r3, r3, #4
 8006030:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8006034:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006038:	4313      	orrs	r3, r2
 800603a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800603e:	bf00      	nop
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <LL_RCC_SetLPTIMClockSource>:
{
 800604a:	b480      	push	{r7}
 800604c:	b083      	sub	sp, #12
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8006052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006056:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	0c1b      	lsrs	r3, r3, #16
 800605e:	041b      	lsls	r3, r3, #16
 8006060:	43db      	mvns	r3, r3
 8006062:	401a      	ands	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	041b      	lsls	r3, r3, #16
 8006068:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800606c:	4313      	orrs	r3, r2
 800606e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006072:	bf00      	nop
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr

0800607e <LL_RCC_SetSAIClockSource>:
{
 800607e:	b480      	push	{r7}
 8006080:	b083      	sub	sp, #12
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8006086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800608a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006092:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4313      	orrs	r3, r2
 800609a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800609e:	bf00      	nop
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <LL_RCC_SetRNGClockSource>:
{
 80060aa:	b480      	push	{r7}
 80060ac:	b083      	sub	sp, #12
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80060b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ba:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80060be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <LL_RCC_SetCLK48ClockSource>:
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80060de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80060f6:	bf00      	nop
 80060f8:	370c      	adds	r7, #12
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <LL_RCC_SetUSBClockSource>:
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b082      	sub	sp, #8
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7ff ffe3 	bl	80060d6 <LL_RCC_SetCLK48ClockSource>
}
 8006110:	bf00      	nop
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <LL_RCC_SetADCClockSource>:
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006128:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800612c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4313      	orrs	r3, r2
 8006134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <LL_RCC_SetRTCClockSource>:
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800614c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006154:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006158:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4313      	orrs	r3, r2
 8006160:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <LL_RCC_GetRTCClockSource>:
{
 8006170:	b480      	push	{r7}
 8006172:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800617c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8006180:	4618      	mov	r0, r3
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <LL_RCC_ForceBackupDomainReset>:
{
 800618a:	b480      	push	{r7}
 800618c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800618e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006196:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800619a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800619e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80061a2:	bf00      	nop
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <LL_RCC_ReleaseBackupDomainReset>:
{
 80061ac:	b480      	push	{r7}
 80061ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80061b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80061c4:	bf00      	nop
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <LL_RCC_PLLSAI1_Enable>:
{
 80061ce:	b480      	push	{r7}
 80061d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80061d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061e0:	6013      	str	r3, [r2, #0]
}
 80061e2:	bf00      	nop
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <LL_RCC_PLLSAI1_Disable>:
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80061f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80061fe:	6013      	str	r3, [r2, #0]
}
 8006200:	bf00      	nop
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <LL_RCC_PLLSAI1_IsReady>:
{
 800620a:	b480      	push	{r7}
 800620c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800620e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006218:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800621c:	d101      	bne.n	8006222 <LL_RCC_PLLSAI1_IsReady+0x18>
 800621e:	2301      	movs	r3, #1
 8006220:	e000      	b.n	8006224 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b088      	sub	sp, #32
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8006236:	2300      	movs	r3, #0
 8006238:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800623a:	2300      	movs	r3, #0
 800623c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006246:	2b00      	cmp	r3, #0
 8006248:	d034      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006252:	d021      	beq.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8006254:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006258:	d81b      	bhi.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800625a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800625e:	d01d      	beq.n	800629c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8006260:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006264:	d815      	bhi.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00b      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800626a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800626e:	d110      	bne.n	8006292 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8006270:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800627a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800627e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8006280:	e00d      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3304      	adds	r3, #4
 8006286:	4618      	mov	r0, r3
 8006288:	f000 f947 	bl	800651a <RCCEx_PLLSAI1_ConfigNP>
 800628c:	4603      	mov	r3, r0
 800628e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006290:	e005      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	77fb      	strb	r3, [r7, #31]
        break;
 8006296:	e002      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8006298:	bf00      	nop
 800629a:	e000      	b.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800629c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800629e:	7ffb      	ldrb	r3, [r7, #31]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d105      	bne.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7ff fee8 	bl	800607e <LL_RCC_SetSAIClockSource>
 80062ae:	e001      	b.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062b0:	7ffb      	ldrb	r3, [r7, #31]
 80062b2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d046      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80062c0:	f7ff ff56 	bl	8006170 <LL_RCC_GetRTCClockSource>
 80062c4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d03c      	beq.n	800634a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80062d0:	f7fe fc68 	bl	8004ba4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d105      	bne.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062de:	4618      	mov	r0, r3
 80062e0:	f7ff ff30 	bl	8006144 <LL_RCC_SetRTCClockSource>
 80062e4:	e02e      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80062e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ee:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80062f0:	f7ff ff4b 	bl	800618a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80062f4:	f7ff ff5a 	bl	80061ac <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006302:	4313      	orrs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8006306:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8006310:	f7ff fdf0 	bl	8005ef4 <LL_RCC_LSE_IsEnabled>
 8006314:	4603      	mov	r3, r0
 8006316:	2b01      	cmp	r3, #1
 8006318:	d114      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800631a:	f7fd fc9b 	bl	8003c54 <HAL_GetTick>
 800631e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8006320:	e00b      	b.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006322:	f7fd fc97 	bl	8003c54 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006330:	4293      	cmp	r3, r2
 8006332:	d902      	bls.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	77fb      	strb	r3, [r7, #31]
              break;
 8006338:	e004      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800633a:	f7ff fded 	bl	8005f18 <LL_RCC_LSE_IsReady>
 800633e:	4603      	mov	r3, r0
 8006340:	2b01      	cmp	r3, #1
 8006342:	d1ee      	bne.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8006344:	7ffb      	ldrb	r3, [r7, #31]
 8006346:	77bb      	strb	r3, [r7, #30]
 8006348:	e001      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800634a:	7ffb      	ldrb	r3, [r7, #31]
 800634c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	2b00      	cmp	r3, #0
 8006358:	d004      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	4618      	mov	r0, r3
 8006360:	f7ff fe2a 	bl	8005fb8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d004      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	4618      	mov	r0, r3
 8006376:	f7ff fe35 	bl	8005fe4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 0310 	and.w	r3, r3, #16
 8006382:	2b00      	cmp	r3, #0
 8006384:	d004      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638a:	4618      	mov	r0, r3
 800638c:	f7ff fe5d 	bl	800604a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0320 	and.w	r3, r3, #32
 8006398:	2b00      	cmp	r3, #0
 800639a:	d004      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7ff fe52 	bl	800604a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0304 	and.w	r3, r3, #4
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d004      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7ff fe2a 	bl	8006010 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0308 	and.w	r3, r3, #8
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d004      	beq.n	80063d2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7ff fe1f 	bl	8006010 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d022      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7ff fe8d 	bl	8006102 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063f0:	d107      	bne.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80063f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006400:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006406:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800640a:	d10b      	bne.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3304      	adds	r3, #4
 8006410:	4618      	mov	r0, r3
 8006412:	f000 f8dd 	bl	80065d0 <RCCEx_PLLSAI1_ConfigNQ>
 8006416:	4603      	mov	r3, r0
 8006418:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800641a:	7ffb      	ldrb	r3, [r7, #31]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d001      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006420:	7ffb      	ldrb	r3, [r7, #31]
 8006422:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800642c:	2b00      	cmp	r3, #0
 800642e:	d02b      	beq.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006438:	d008      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006442:	d003      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006448:	2b00      	cmp	r3, #0
 800644a:	d105      	bne.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006450:	4618      	mov	r0, r3
 8006452:	f7ff fe2a 	bl	80060aa <LL_RCC_SetRNGClockSource>
 8006456:	e00a      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006460:	60fb      	str	r3, [r7, #12]
 8006462:	2000      	movs	r0, #0
 8006464:	f7ff fe21 	bl	80060aa <LL_RCC_SetRNGClockSource>
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f7ff fe34 	bl	80060d6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006472:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006476:	d107      	bne.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006482:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006486:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006490:	2b00      	cmp	r3, #0
 8006492:	d022      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006498:	4618      	mov	r0, r3
 800649a:	f7ff fe3d 	bl	8006118 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064a6:	d107      	bne.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80064a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80064b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064b6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064c0:	d10b      	bne.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	3304      	adds	r3, #4
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 f8dd 	bl	8006686 <RCCEx_PLLSAI1_ConfigNR>
 80064cc:	4603      	mov	r3, r0
 80064ce:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80064d0:	7ffb      	ldrb	r3, [r7, #31]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80064d6:	7ffb      	ldrb	r3, [r7, #31]
 80064d8:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d004      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ea:	4618      	mov	r0, r3
 80064ec:	f7ff fd26 	bl	8005f3c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d009      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006500:	4618      	mov	r0, r3
 8006502:	f7ff fd45 	bl	8005f90 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800650a:	4618      	mov	r0, r3
 800650c:	f7ff fd2c 	bl	8005f68 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006510:	7fbb      	ldrb	r3, [r7, #30]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3720      	adds	r7, #32
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b084      	sub	sp, #16
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006526:	f7ff fe61 	bl	80061ec <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800652a:	f7fd fb93 	bl	8003c54 <HAL_GetTick>
 800652e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006530:	e009      	b.n	8006546 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006532:	f7fd fb8f 	bl	8003c54 <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	2b02      	cmp	r3, #2
 800653e:	d902      	bls.n	8006546 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	73fb      	strb	r3, [r7, #15]
      break;
 8006544:	e004      	b.n	8006550 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006546:	f7ff fe60 	bl	800620a <LL_RCC_PLLSAI1_IsReady>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1f0      	bne.n	8006532 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8006550:	7bfb      	ldrb	r3, [r7, #15]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d137      	bne.n	80065c6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	021b      	lsls	r3, r3, #8
 8006566:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800656a:	4313      	orrs	r3, r2
 800656c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800656e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006580:	4313      	orrs	r3, r2
 8006582:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006584:	f7ff fe23 	bl	80061ce <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006588:	f7fd fb64 	bl	8003c54 <HAL_GetTick>
 800658c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800658e:	e009      	b.n	80065a4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006590:	f7fd fb60 	bl	8003c54 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b02      	cmp	r3, #2
 800659c:	d902      	bls.n	80065a4 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	73fb      	strb	r3, [r7, #15]
        break;
 80065a2:	e004      	b.n	80065ae <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80065a4:	f7ff fe31 	bl	800620a <LL_RCC_PLLSAI1_IsReady>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d1f0      	bne.n	8006590 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d108      	bne.n	80065c6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80065b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065b8:	691a      	ldr	r2, [r3, #16]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80065c2:	4313      	orrs	r3, r2
 80065c4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80065c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065d8:	2300      	movs	r3, #0
 80065da:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80065dc:	f7ff fe06 	bl	80061ec <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80065e0:	f7fd fb38 	bl	8003c54 <HAL_GetTick>
 80065e4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80065e6:	e009      	b.n	80065fc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065e8:	f7fd fb34 	bl	8003c54 <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d902      	bls.n	80065fc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	73fb      	strb	r3, [r7, #15]
      break;
 80065fa:	e004      	b.n	8006606 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80065fc:	f7ff fe05 	bl	800620a <LL_RCC_PLLSAI1_IsReady>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1f0      	bne.n	80065e8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006606:	7bfb      	ldrb	r3, [r7, #15]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d137      	bne.n	800667c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800660c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	021b      	lsls	r3, r3, #8
 800661c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006620:	4313      	orrs	r3, r2
 8006622:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8006624:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006636:	4313      	orrs	r3, r2
 8006638:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800663a:	f7ff fdc8 	bl	80061ce <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800663e:	f7fd fb09 	bl	8003c54 <HAL_GetTick>
 8006642:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006644:	e009      	b.n	800665a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006646:	f7fd fb05 	bl	8003c54 <HAL_GetTick>
 800664a:	4602      	mov	r2, r0
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	1ad3      	subs	r3, r2, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d902      	bls.n	800665a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006654:	2303      	movs	r3, #3
 8006656:	73fb      	strb	r3, [r7, #15]
        break;
 8006658:	e004      	b.n	8006664 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800665a:	f7ff fdd6 	bl	800620a <LL_RCC_PLLSAI1_IsReady>
 800665e:	4603      	mov	r3, r0
 8006660:	2b01      	cmp	r3, #1
 8006662:	d1f0      	bne.n	8006646 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006664:	7bfb      	ldrb	r3, [r7, #15]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d108      	bne.n	800667c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800666a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800666e:	691a      	ldr	r2, [r3, #16]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006678:	4313      	orrs	r3, r2
 800667a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800667c:	7bfb      	ldrb	r3, [r7, #15]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006692:	f7ff fdab 	bl	80061ec <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006696:	f7fd fadd 	bl	8003c54 <HAL_GetTick>
 800669a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800669c:	e009      	b.n	80066b2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800669e:	f7fd fad9 	bl	8003c54 <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d902      	bls.n	80066b2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80066ac:	2303      	movs	r3, #3
 80066ae:	73fb      	strb	r3, [r7, #15]
      break;
 80066b0:	e004      	b.n	80066bc <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80066b2:	f7ff fdaa 	bl	800620a <LL_RCC_PLLSAI1_IsReady>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1f0      	bne.n	800669e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d137      	bne.n	8006732 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80066c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	021b      	lsls	r3, r3, #8
 80066d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066d6:	4313      	orrs	r3, r2
 80066d8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80066da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80066ec:	4313      	orrs	r3, r2
 80066ee:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80066f0:	f7ff fd6d 	bl	80061ce <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066f4:	f7fd faae 	bl	8003c54 <HAL_GetTick>
 80066f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80066fa:	e009      	b.n	8006710 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066fc:	f7fd faaa 	bl	8003c54 <HAL_GetTick>
 8006700:	4602      	mov	r2, r0
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	2b02      	cmp	r3, #2
 8006708:	d902      	bls.n	8006710 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	73fb      	strb	r3, [r7, #15]
        break;
 800670e:	e004      	b.n	800671a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006710:	f7ff fd7b 	bl	800620a <LL_RCC_PLLSAI1_IsReady>
 8006714:	4603      	mov	r3, r0
 8006716:	2b01      	cmp	r3, #1
 8006718:	d1f0      	bne.n	80066fc <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800671a:	7bfb      	ldrb	r3, [r7, #15]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d108      	bne.n	8006732 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006724:	691a      	ldr	r2, [r3, #16]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800672e:	4313      	orrs	r3, r2
 8006730:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006732:	7bfb      	ldrb	r3, [r7, #15]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e027      	b.n	800679e <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	7a5b      	ldrb	r3, [r3, #9]
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d105      	bne.n	8006764 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7fc ff12 	bl	8003588 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2202      	movs	r2, #2
 8006768:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f023 0120 	bic.w	r1, r3, #32
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685a      	ldr	r2, [r3, #4]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	430a      	orrs	r2, r1
 800677e:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f042 0204 	orr.w	r2, r2, #4
 800678e:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
	...

080067a8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e09f      	b.n	80068fa <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d106      	bne.n	80067d4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7fc ff04 	bl	80035dc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2202      	movs	r2, #2
 80067d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80067dc:	4b49      	ldr	r3, [pc, #292]	; (8006904 <HAL_RTC_Init+0x15c>)
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	f003 0310 	and.w	r3, r3, #16
 80067e4:	2b10      	cmp	r3, #16
 80067e6:	d07e      	beq.n	80068e6 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	22ca      	movs	r2, #202	; 0xca
 80067ee:	625a      	str	r2, [r3, #36]	; 0x24
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2253      	movs	r2, #83	; 0x53
 80067f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f000 f8ab 	bl	8006954 <RTC_EnterInitMode>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00a      	beq.n	800681a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	22ff      	movs	r2, #255	; 0xff
 800680a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2204      	movs	r2, #4
 8006810:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	73fb      	strb	r3, [r7, #15]
 8006818:	e067      	b.n	80068ea <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	6812      	ldr	r2, [r2, #0]
 8006824:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800682c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	6899      	ldr	r1, [r3, #8]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	431a      	orrs	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	431a      	orrs	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	430a      	orrs	r2, r1
 800684a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	68d2      	ldr	r2, [r2, #12]
 8006854:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6919      	ldr	r1, [r3, #16]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	041a      	lsls	r2, r3, #16
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	430a      	orrs	r2, r1
 8006868:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68da      	ldr	r2, [r3, #12]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006878:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f022 0203 	bic.w	r2, r2, #3
 8006888:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	69da      	ldr	r2, [r3, #28]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	431a      	orrs	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	f003 0320 	and.w	r3, r3, #32
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d113      	bne.n	80068d8 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f829 	bl	8006908 <HAL_RTC_WaitForSynchro>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00d      	beq.n	80068d8 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	22ff      	movs	r2, #255	; 0xff
 80068c2:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2204      	movs	r2, #4
 80068c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e010      	b.n	80068fa <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	22ff      	movs	r2, #255	; 0xff
 80068de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80068e0:	2300      	movs	r3, #0
 80068e2:	73fb      	strb	r3, [r7, #15]
 80068e4:	e001      	b.n	80068ea <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80068ea:	7bfb      	ldrb	r3, [r7, #15]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d103      	bne.n	80068f8 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	40002800 	.word	0x40002800

08006908 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68da      	ldr	r2, [r3, #12]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800691e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006920:	f7fd f998 	bl	8003c54 <HAL_GetTick>
 8006924:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006926:	e009      	b.n	800693c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006928:	f7fd f994 	bl	8003c54 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006936:	d901      	bls.n	800693c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e007      	b.n	800694c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	f003 0320 	and.w	r3, r3, #32
 8006946:	2b00      	cmp	r3, #0
 8006948:	d0ee      	beq.n	8006928 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3710      	adds	r7, #16
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	68db      	ldr	r3, [r3, #12]
 8006962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006966:	2b00      	cmp	r3, #0
 8006968:	d119      	bne.n	800699e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f04f 32ff 	mov.w	r2, #4294967295
 8006972:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006974:	f7fd f96e 	bl	8003c54 <HAL_GetTick>
 8006978:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800697a:	e009      	b.n	8006990 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800697c:	f7fd f96a 	bl	8003c54 <HAL_GetTick>
 8006980:	4602      	mov	r2, r0
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800698a:	d901      	bls.n	8006990 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800698c:	2303      	movs	r3, #3
 800698e:	e007      	b.n	80069a0 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699a:	2b00      	cmp	r3, #0
 800699c:	d0ee      	beq.n	800697c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d101      	bne.n	80069c2 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80069be:	2302      	movs	r3, #2
 80069c0:	e0a8      	b.n	8006b14 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2202      	movs	r2, #2
 80069ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	22ca      	movs	r2, #202	; 0xca
 80069d8:	625a      	str	r2, [r3, #36]	; 0x24
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	2253      	movs	r2, #83	; 0x53
 80069e0:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d020      	beq.n	8006a32 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 80069f0:	f7fd f930 	bl	8003c54 <HAL_GetTick>
 80069f4:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80069f6:	e015      	b.n	8006a24 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80069f8:	f7fd f92c 	bl	8003c54 <HAL_GetTick>
 80069fc:	4602      	mov	r2, r0
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	1ad3      	subs	r3, r2, r3
 8006a02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a06:	d90d      	bls.n	8006a24 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	22ff      	movs	r2, #255	; 0xff
 8006a0e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2203      	movs	r2, #3
 8006a14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e077      	b.n	8006b14 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	f003 0304 	and.w	r3, r3, #4
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1e2      	bne.n	80069f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	689a      	ldr	r2, [r3, #8]
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a40:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	b2da      	uxtb	r2, r3
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006a52:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006a54:	f7fd f8fe 	bl	8003c54 <HAL_GetTick>
 8006a58:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006a5a:	e015      	b.n	8006a88 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a5c:	f7fd f8fa 	bl	8003c54 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a6a:	d90d      	bls.n	8006a88 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	22ff      	movs	r2, #255	; 0xff
 8006a72:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2203      	movs	r2, #3
 8006a78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e045      	b.n	8006b14 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	f003 0304 	and.w	r3, r3, #4
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d0e2      	beq.n	8006a5c <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689a      	ldr	r2, [r3, #8]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f022 0207 	bic.w	r2, r2, #7
 8006aac:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	6899      	ldr	r1, [r3, #8]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006abe:	4b17      	ldr	r3, [pc, #92]	; (8006b1c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ac4:	4a15      	ldr	r2, [pc, #84]	; (8006b1c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006ac6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006aca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006ace:	4b13      	ldr	r3, [pc, #76]	; (8006b1c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a12      	ldr	r2, [pc, #72]	; (8006b1c <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006ad4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ad8:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689a      	ldr	r2, [r3, #8]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ae8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	689a      	ldr	r2, [r3, #8]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006af8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	22ff      	movs	r2, #255	; 0xff
 8006b00:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3718      	adds	r7, #24
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	58000800 	.word	0x58000800

08006b20 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d101      	bne.n	8006b36 <HAL_RTCEx_EnableBypassShadow+0x16>
 8006b32:	2302      	movs	r3, #2
 8006b34:	e024      	b.n	8006b80 <HAL_RTCEx_EnableBypassShadow+0x60>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2202      	movs	r2, #2
 8006b42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	22ca      	movs	r2, #202	; 0xca
 8006b4c:	625a      	str	r2, [r3, #36]	; 0x24
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2253      	movs	r2, #83	; 0x53
 8006b54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f042 0220 	orr.w	r2, r2, #32
 8006b64:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	22ff      	movs	r2, #255	; 0xff
 8006b6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e049      	b.n	8006c32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d106      	bne.n	8006bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7fc fd4a 	bl	800364c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	4619      	mov	r1, r3
 8006bca:	4610      	mov	r0, r2
 8006bcc:	f000 fb1a 	bl	8007204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b082      	sub	sp, #8
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d101      	bne.n	8006c4c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e049      	b.n	8006ce0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d106      	bne.n	8006c66 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f841 	bl	8006ce8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2202      	movs	r2, #2
 8006c6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	3304      	adds	r3, #4
 8006c76:	4619      	mov	r1, r3
 8006c78:	4610      	mov	r0, r2
 8006c7a:	f000 fac3 	bl	8007204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e097      	b.n	8006e40 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d106      	bne.n	8006d2a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7fc fca5 	bl	8003674 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	6812      	ldr	r2, [r2, #0]
 8006d3c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006d40:	f023 0307 	bic.w	r3, r3, #7
 8006d44:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	4619      	mov	r1, r3
 8006d50:	4610      	mov	r0, r2
 8006d52:	f000 fa57 	bl	8007204 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6a1b      	ldr	r3, [r3, #32]
 8006d6c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d7e:	f023 0303 	bic.w	r3, r3, #3
 8006d82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	689a      	ldr	r2, [r3, #8]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	021b      	lsls	r3, r3, #8
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006d9c:	f023 030c 	bic.w	r3, r3, #12
 8006da0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006da8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	68da      	ldr	r2, [r3, #12]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	021b      	lsls	r3, r3, #8
 8006db8:	4313      	orrs	r3, r2
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	011a      	lsls	r2, r3, #4
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	031b      	lsls	r3, r3, #12
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006dda:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006de2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	685a      	ldr	r2, [r3, #4]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	695b      	ldr	r3, [r3, #20]
 8006dec:	011b      	lsls	r3, r3, #4
 8006dee:	4313      	orrs	r3, r2
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	693a      	ldr	r2, [r7, #16]
 8006e04:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3718      	adds	r7, #24
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e54:	2300      	movs	r3, #0
 8006e56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d101      	bne.n	8006e66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e62:	2302      	movs	r3, #2
 8006e64:	e0ff      	b.n	8007066 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2b14      	cmp	r3, #20
 8006e72:	f200 80f0 	bhi.w	8007056 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006e76:	a201      	add	r2, pc, #4	; (adr r2, 8006e7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7c:	08006ed1 	.word	0x08006ed1
 8006e80:	08007057 	.word	0x08007057
 8006e84:	08007057 	.word	0x08007057
 8006e88:	08007057 	.word	0x08007057
 8006e8c:	08006f11 	.word	0x08006f11
 8006e90:	08007057 	.word	0x08007057
 8006e94:	08007057 	.word	0x08007057
 8006e98:	08007057 	.word	0x08007057
 8006e9c:	08006f53 	.word	0x08006f53
 8006ea0:	08007057 	.word	0x08007057
 8006ea4:	08007057 	.word	0x08007057
 8006ea8:	08007057 	.word	0x08007057
 8006eac:	08006f93 	.word	0x08006f93
 8006eb0:	08007057 	.word	0x08007057
 8006eb4:	08007057 	.word	0x08007057
 8006eb8:	08007057 	.word	0x08007057
 8006ebc:	08006fd5 	.word	0x08006fd5
 8006ec0:	08007057 	.word	0x08007057
 8006ec4:	08007057 	.word	0x08007057
 8006ec8:	08007057 	.word	0x08007057
 8006ecc:	08007015 	.word	0x08007015
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68b9      	ldr	r1, [r7, #8]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 fa04 	bl	80072e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	699a      	ldr	r2, [r3, #24]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0208 	orr.w	r2, r2, #8
 8006eea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	699a      	ldr	r2, [r3, #24]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f022 0204 	bic.w	r2, r2, #4
 8006efa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6999      	ldr	r1, [r3, #24]
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	691a      	ldr	r2, [r3, #16]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	430a      	orrs	r2, r1
 8006f0c:	619a      	str	r2, [r3, #24]
      break;
 8006f0e:	e0a5      	b.n	800705c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68b9      	ldr	r1, [r7, #8]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 fa60 	bl	80073dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	699a      	ldr	r2, [r3, #24]
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	699a      	ldr	r2, [r3, #24]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6999      	ldr	r1, [r3, #24]
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	021a      	lsls	r2, r3, #8
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	619a      	str	r2, [r3, #24]
      break;
 8006f50:	e084      	b.n	800705c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68b9      	ldr	r1, [r7, #8]
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 fab9 	bl	80074d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	69da      	ldr	r2, [r3, #28]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f042 0208 	orr.w	r2, r2, #8
 8006f6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	69da      	ldr	r2, [r3, #28]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f022 0204 	bic.w	r2, r2, #4
 8006f7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	69d9      	ldr	r1, [r3, #28]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	691a      	ldr	r2, [r3, #16]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	430a      	orrs	r2, r1
 8006f8e:	61da      	str	r2, [r3, #28]
      break;
 8006f90:	e064      	b.n	800705c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68b9      	ldr	r1, [r7, #8]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f000 fb11 	bl	80075c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	69da      	ldr	r2, [r3, #28]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006fac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	69da      	ldr	r2, [r3, #28]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	69d9      	ldr	r1, [r3, #28]
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	021a      	lsls	r2, r3, #8
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	61da      	str	r2, [r3, #28]
      break;
 8006fd2:	e043      	b.n	800705c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68b9      	ldr	r1, [r7, #8]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 fb4e 	bl	800767c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f042 0208 	orr.w	r2, r2, #8
 8006fee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0204 	bic.w	r2, r2, #4
 8006ffe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	691a      	ldr	r2, [r3, #16]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	430a      	orrs	r2, r1
 8007010:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007012:	e023      	b.n	800705c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68b9      	ldr	r1, [r7, #8]
 800701a:	4618      	mov	r0, r3
 800701c:	f000 fb86 	bl	800772c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800702e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800703e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	021a      	lsls	r2, r3, #8
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	430a      	orrs	r2, r1
 8007052:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007054:	e002      	b.n	800705c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	75fb      	strb	r3, [r7, #23]
      break;
 800705a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007064:	7dfb      	ldrb	r3, [r7, #23]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3718      	adds	r7, #24
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop

08007070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007084:	2b01      	cmp	r3, #1
 8007086:	d101      	bne.n	800708c <HAL_TIM_ConfigClockSource+0x1c>
 8007088:	2302      	movs	r3, #2
 800708a:	e0b6      	b.n	80071fa <HAL_TIM_ConfigClockSource+0x18a>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80070aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80070ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070c8:	d03e      	beq.n	8007148 <HAL_TIM_ConfigClockSource+0xd8>
 80070ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070ce:	f200 8087 	bhi.w	80071e0 <HAL_TIM_ConfigClockSource+0x170>
 80070d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070d6:	f000 8086 	beq.w	80071e6 <HAL_TIM_ConfigClockSource+0x176>
 80070da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070de:	d87f      	bhi.n	80071e0 <HAL_TIM_ConfigClockSource+0x170>
 80070e0:	2b70      	cmp	r3, #112	; 0x70
 80070e2:	d01a      	beq.n	800711a <HAL_TIM_ConfigClockSource+0xaa>
 80070e4:	2b70      	cmp	r3, #112	; 0x70
 80070e6:	d87b      	bhi.n	80071e0 <HAL_TIM_ConfigClockSource+0x170>
 80070e8:	2b60      	cmp	r3, #96	; 0x60
 80070ea:	d050      	beq.n	800718e <HAL_TIM_ConfigClockSource+0x11e>
 80070ec:	2b60      	cmp	r3, #96	; 0x60
 80070ee:	d877      	bhi.n	80071e0 <HAL_TIM_ConfigClockSource+0x170>
 80070f0:	2b50      	cmp	r3, #80	; 0x50
 80070f2:	d03c      	beq.n	800716e <HAL_TIM_ConfigClockSource+0xfe>
 80070f4:	2b50      	cmp	r3, #80	; 0x50
 80070f6:	d873      	bhi.n	80071e0 <HAL_TIM_ConfigClockSource+0x170>
 80070f8:	2b40      	cmp	r3, #64	; 0x40
 80070fa:	d058      	beq.n	80071ae <HAL_TIM_ConfigClockSource+0x13e>
 80070fc:	2b40      	cmp	r3, #64	; 0x40
 80070fe:	d86f      	bhi.n	80071e0 <HAL_TIM_ConfigClockSource+0x170>
 8007100:	2b30      	cmp	r3, #48	; 0x30
 8007102:	d064      	beq.n	80071ce <HAL_TIM_ConfigClockSource+0x15e>
 8007104:	2b30      	cmp	r3, #48	; 0x30
 8007106:	d86b      	bhi.n	80071e0 <HAL_TIM_ConfigClockSource+0x170>
 8007108:	2b20      	cmp	r3, #32
 800710a:	d060      	beq.n	80071ce <HAL_TIM_ConfigClockSource+0x15e>
 800710c:	2b20      	cmp	r3, #32
 800710e:	d867      	bhi.n	80071e0 <HAL_TIM_ConfigClockSource+0x170>
 8007110:	2b00      	cmp	r3, #0
 8007112:	d05c      	beq.n	80071ce <HAL_TIM_ConfigClockSource+0x15e>
 8007114:	2b10      	cmp	r3, #16
 8007116:	d05a      	beq.n	80071ce <HAL_TIM_ConfigClockSource+0x15e>
 8007118:	e062      	b.n	80071e0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800712a:	f000 fbd5 	bl	80078d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800713c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68ba      	ldr	r2, [r7, #8]
 8007144:	609a      	str	r2, [r3, #8]
      break;
 8007146:	e04f      	b.n	80071e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007158:	f000 fbbe 	bl	80078d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	689a      	ldr	r2, [r3, #8]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800716a:	609a      	str	r2, [r3, #8]
      break;
 800716c:	e03c      	b.n	80071e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800717a:	461a      	mov	r2, r3
 800717c:	f000 fb30 	bl	80077e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2150      	movs	r1, #80	; 0x50
 8007186:	4618      	mov	r0, r3
 8007188:	f000 fb89 	bl	800789e <TIM_ITRx_SetConfig>
      break;
 800718c:	e02c      	b.n	80071e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800719a:	461a      	mov	r2, r3
 800719c:	f000 fb4f 	bl	800783e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2160      	movs	r1, #96	; 0x60
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 fb79 	bl	800789e <TIM_ITRx_SetConfig>
      break;
 80071ac:	e01c      	b.n	80071e8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071ba:	461a      	mov	r2, r3
 80071bc:	f000 fb10 	bl	80077e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2140      	movs	r1, #64	; 0x40
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 fb69 	bl	800789e <TIM_ITRx_SetConfig>
      break;
 80071cc:	e00c      	b.n	80071e8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4619      	mov	r1, r3
 80071d8:	4610      	mov	r0, r2
 80071da:	f000 fb60 	bl	800789e <TIM_ITRx_SetConfig>
      break;
 80071de:	e003      	b.n	80071e8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	73fb      	strb	r3, [r7, #15]
      break;
 80071e4:	e000      	b.n	80071e8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80071e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}
	...

08007204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a30      	ldr	r2, [pc, #192]	; (80072d8 <TIM_Base_SetConfig+0xd4>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d003      	beq.n	8007224 <TIM_Base_SetConfig+0x20>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007222:	d108      	bne.n	8007236 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800722a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	4313      	orrs	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a27      	ldr	r2, [pc, #156]	; (80072d8 <TIM_Base_SetConfig+0xd4>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d00b      	beq.n	8007256 <TIM_Base_SetConfig+0x52>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007244:	d007      	beq.n	8007256 <TIM_Base_SetConfig+0x52>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a24      	ldr	r2, [pc, #144]	; (80072dc <TIM_Base_SetConfig+0xd8>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d003      	beq.n	8007256 <TIM_Base_SetConfig+0x52>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a23      	ldr	r2, [pc, #140]	; (80072e0 <TIM_Base_SetConfig+0xdc>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d108      	bne.n	8007268 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800725c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	4313      	orrs	r3, r2
 8007266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	4313      	orrs	r3, r2
 8007274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	689a      	ldr	r2, [r3, #8]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	4a12      	ldr	r2, [pc, #72]	; (80072d8 <TIM_Base_SetConfig+0xd4>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d007      	beq.n	80072a4 <TIM_Base_SetConfig+0xa0>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a11      	ldr	r2, [pc, #68]	; (80072dc <TIM_Base_SetConfig+0xd8>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d003      	beq.n	80072a4 <TIM_Base_SetConfig+0xa0>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a10      	ldr	r2, [pc, #64]	; (80072e0 <TIM_Base_SetConfig+0xdc>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d103      	bne.n	80072ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	691a      	ldr	r2, [r3, #16]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d105      	bne.n	80072ca <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	f023 0201 	bic.w	r2, r3, #1
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	611a      	str	r2, [r3, #16]
  }
}
 80072ca:	bf00      	nop
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	40012c00 	.word	0x40012c00
 80072dc:	40014400 	.word	0x40014400
 80072e0:	40014800 	.word	0x40014800

080072e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6a1b      	ldr	r3, [r3, #32]
 80072f8:	f023 0201 	bic.w	r2, r3, #1
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	699b      	ldr	r3, [r3, #24]
 800730a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f023 0303 	bic.w	r3, r3, #3
 800731e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	4313      	orrs	r3, r2
 8007328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f023 0302 	bic.w	r3, r3, #2
 8007330:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	697a      	ldr	r2, [r7, #20]
 8007338:	4313      	orrs	r3, r2
 800733a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a24      	ldr	r2, [pc, #144]	; (80073d0 <TIM_OC1_SetConfig+0xec>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d007      	beq.n	8007354 <TIM_OC1_SetConfig+0x70>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a23      	ldr	r2, [pc, #140]	; (80073d4 <TIM_OC1_SetConfig+0xf0>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d003      	beq.n	8007354 <TIM_OC1_SetConfig+0x70>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a22      	ldr	r2, [pc, #136]	; (80073d8 <TIM_OC1_SetConfig+0xf4>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d10c      	bne.n	800736e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f023 0308 	bic.w	r3, r3, #8
 800735a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	697a      	ldr	r2, [r7, #20]
 8007362:	4313      	orrs	r3, r2
 8007364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f023 0304 	bic.w	r3, r3, #4
 800736c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a17      	ldr	r2, [pc, #92]	; (80073d0 <TIM_OC1_SetConfig+0xec>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d007      	beq.n	8007386 <TIM_OC1_SetConfig+0xa2>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a17      	ldr	r2, [pc, #92]	; (80073d8 <TIM_OC1_SetConfig+0xf4>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d003      	beq.n	8007386 <TIM_OC1_SetConfig+0xa2>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a14      	ldr	r2, [pc, #80]	; (80073d4 <TIM_OC1_SetConfig+0xf0>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d111      	bne.n	80073aa <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800738c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007394:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	693a      	ldr	r2, [r7, #16]
 800739c:	4313      	orrs	r3, r2
 800739e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	699b      	ldr	r3, [r3, #24]
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	685a      	ldr	r2, [r3, #4]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	697a      	ldr	r2, [r7, #20]
 80073c2:	621a      	str	r2, [r3, #32]
}
 80073c4:	bf00      	nop
 80073c6:	371c      	adds	r7, #28
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr
 80073d0:	40012c00 	.word	0x40012c00
 80073d4:	40014800 	.word	0x40014800
 80073d8:	40014400 	.word	0x40014400

080073dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073dc:	b480      	push	{r7}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a1b      	ldr	r3, [r3, #32]
 80073f0:	f023 0210 	bic.w	r2, r3, #16
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800740a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800740e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	021b      	lsls	r3, r3, #8
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	4313      	orrs	r3, r2
 8007422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f023 0320 	bic.w	r3, r3, #32
 800742a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	011b      	lsls	r3, r3, #4
 8007432:	697a      	ldr	r2, [r7, #20]
 8007434:	4313      	orrs	r3, r2
 8007436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a22      	ldr	r2, [pc, #136]	; (80074c4 <TIM_OC2_SetConfig+0xe8>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d10d      	bne.n	800745c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007446:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	011b      	lsls	r3, r3, #4
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	4313      	orrs	r3, r2
 8007452:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800745a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a19      	ldr	r2, [pc, #100]	; (80074c4 <TIM_OC2_SetConfig+0xe8>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d007      	beq.n	8007474 <TIM_OC2_SetConfig+0x98>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	4a18      	ldr	r2, [pc, #96]	; (80074c8 <TIM_OC2_SetConfig+0xec>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d003      	beq.n	8007474 <TIM_OC2_SetConfig+0x98>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a17      	ldr	r2, [pc, #92]	; (80074cc <TIM_OC2_SetConfig+0xf0>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d113      	bne.n	800749c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800747a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007482:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	4313      	orrs	r3, r2
 800748e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	699b      	ldr	r3, [r3, #24]
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	4313      	orrs	r3, r2
 800749a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	621a      	str	r2, [r3, #32]
}
 80074b6:	bf00      	nop
 80074b8:	371c      	adds	r7, #28
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	40012c00 	.word	0x40012c00
 80074c8:	40014400 	.word	0x40014400
 80074cc:	40014800 	.word	0x40014800

080074d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b087      	sub	sp, #28
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a1b      	ldr	r3, [r3, #32]
 80074de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a1b      	ldr	r3, [r3, #32]
 80074e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 0303 	bic.w	r3, r3, #3
 800750a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	4313      	orrs	r3, r2
 8007514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800751c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	021b      	lsls	r3, r3, #8
 8007524:	697a      	ldr	r2, [r7, #20]
 8007526:	4313      	orrs	r3, r2
 8007528:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a21      	ldr	r2, [pc, #132]	; (80075b4 <TIM_OC3_SetConfig+0xe4>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d10d      	bne.n	800754e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007538:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	021b      	lsls	r3, r3, #8
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	4313      	orrs	r3, r2
 8007544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800754c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a18      	ldr	r2, [pc, #96]	; (80075b4 <TIM_OC3_SetConfig+0xe4>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d007      	beq.n	8007566 <TIM_OC3_SetConfig+0x96>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a17      	ldr	r2, [pc, #92]	; (80075b8 <TIM_OC3_SetConfig+0xe8>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d003      	beq.n	8007566 <TIM_OC3_SetConfig+0x96>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a16      	ldr	r2, [pc, #88]	; (80075bc <TIM_OC3_SetConfig+0xec>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d113      	bne.n	800758e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007566:	693b      	ldr	r3, [r7, #16]
 8007568:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800756c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007574:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	695b      	ldr	r3, [r3, #20]
 800757a:	011b      	lsls	r3, r3, #4
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	4313      	orrs	r3, r2
 8007580:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	011b      	lsls	r3, r3, #4
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	4313      	orrs	r3, r2
 800758c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	693a      	ldr	r2, [r7, #16]
 8007592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	697a      	ldr	r2, [r7, #20]
 80075a6:	621a      	str	r2, [r3, #32]
}
 80075a8:	bf00      	nop
 80075aa:	371c      	adds	r7, #28
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr
 80075b4:	40012c00 	.word	0x40012c00
 80075b8:	40014400 	.word	0x40014400
 80075bc:	40014800 	.word	0x40014800

080075c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b087      	sub	sp, #28
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a1b      	ldr	r3, [r3, #32]
 80075d4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	69db      	ldr	r3, [r3, #28]
 80075e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	021b      	lsls	r3, r3, #8
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	4313      	orrs	r3, r2
 8007606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800760e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	031b      	lsls	r3, r3, #12
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	4313      	orrs	r3, r2
 800761a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a14      	ldr	r2, [pc, #80]	; (8007670 <TIM_OC4_SetConfig+0xb0>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d007      	beq.n	8007634 <TIM_OC4_SetConfig+0x74>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a13      	ldr	r2, [pc, #76]	; (8007674 <TIM_OC4_SetConfig+0xb4>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d003      	beq.n	8007634 <TIM_OC4_SetConfig+0x74>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a12      	ldr	r2, [pc, #72]	; (8007678 <TIM_OC4_SetConfig+0xb8>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d109      	bne.n	8007648 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800763a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	019b      	lsls	r3, r3, #6
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	4313      	orrs	r3, r2
 8007646:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	685a      	ldr	r2, [r3, #4]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	693a      	ldr	r2, [r7, #16]
 8007660:	621a      	str	r2, [r3, #32]
}
 8007662:	bf00      	nop
 8007664:	371c      	adds	r7, #28
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	40012c00 	.word	0x40012c00
 8007674:	40014400 	.word	0x40014400
 8007678:	40014800 	.word	0x40014800

0800767c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800767c:	b480      	push	{r7}
 800767e:	b087      	sub	sp, #28
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a1b      	ldr	r3, [r3, #32]
 8007690:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80076c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	041b      	lsls	r3, r3, #16
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	4a13      	ldr	r2, [pc, #76]	; (8007720 <TIM_OC5_SetConfig+0xa4>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d007      	beq.n	80076e6 <TIM_OC5_SetConfig+0x6a>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	4a12      	ldr	r2, [pc, #72]	; (8007724 <TIM_OC5_SetConfig+0xa8>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d003      	beq.n	80076e6 <TIM_OC5_SetConfig+0x6a>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a11      	ldr	r2, [pc, #68]	; (8007728 <TIM_OC5_SetConfig+0xac>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d109      	bne.n	80076fa <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	021b      	lsls	r3, r3, #8
 80076f4:	697a      	ldr	r2, [r7, #20]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	685a      	ldr	r2, [r3, #4]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	621a      	str	r2, [r3, #32]
}
 8007714:	bf00      	nop
 8007716:	371c      	adds	r7, #28
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr
 8007720:	40012c00 	.word	0x40012c00
 8007724:	40014400 	.word	0x40014400
 8007728:	40014800 	.word	0x40014800

0800772c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800772c:	b480      	push	{r7}
 800772e:	b087      	sub	sp, #28
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6a1b      	ldr	r3, [r3, #32]
 800773a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6a1b      	ldr	r3, [r3, #32]
 8007740:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800775a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800775e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	021b      	lsls	r3, r3, #8
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	4313      	orrs	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007772:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	051b      	lsls	r3, r3, #20
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	4313      	orrs	r3, r2
 800777e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a14      	ldr	r2, [pc, #80]	; (80077d4 <TIM_OC6_SetConfig+0xa8>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d007      	beq.n	8007798 <TIM_OC6_SetConfig+0x6c>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	4a13      	ldr	r2, [pc, #76]	; (80077d8 <TIM_OC6_SetConfig+0xac>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d003      	beq.n	8007798 <TIM_OC6_SetConfig+0x6c>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	4a12      	ldr	r2, [pc, #72]	; (80077dc <TIM_OC6_SetConfig+0xb0>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d109      	bne.n	80077ac <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800779e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	029b      	lsls	r3, r3, #10
 80077a6:	697a      	ldr	r2, [r7, #20]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	697a      	ldr	r2, [r7, #20]
 80077b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	621a      	str	r2, [r3, #32]
}
 80077c6:	bf00      	nop
 80077c8:	371c      	adds	r7, #28
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
 80077d2:	bf00      	nop
 80077d4:	40012c00 	.word	0x40012c00
 80077d8:	40014400 	.word	0x40014400
 80077dc:	40014800 	.word	0x40014800

080077e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b087      	sub	sp, #28
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	60f8      	str	r0, [r7, #12]
 80077e8:	60b9      	str	r1, [r7, #8]
 80077ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6a1b      	ldr	r3, [r3, #32]
 80077f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	f023 0201 	bic.w	r2, r3, #1
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800780a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	011b      	lsls	r3, r3, #4
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	4313      	orrs	r3, r2
 8007814:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	f023 030a 	bic.w	r3, r3, #10
 800781c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	4313      	orrs	r3, r2
 8007824:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	621a      	str	r2, [r3, #32]
}
 8007832:	bf00      	nop
 8007834:	371c      	adds	r7, #28
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr

0800783e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800783e:	b480      	push	{r7}
 8007840:	b087      	sub	sp, #28
 8007842:	af00      	add	r7, sp, #0
 8007844:	60f8      	str	r0, [r7, #12]
 8007846:	60b9      	str	r1, [r7, #8]
 8007848:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6a1b      	ldr	r3, [r3, #32]
 8007854:	f023 0210 	bic.w	r2, r3, #16
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007868:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	031b      	lsls	r3, r3, #12
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	4313      	orrs	r3, r2
 8007872:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800787a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	011b      	lsls	r3, r3, #4
 8007880:	697a      	ldr	r2, [r7, #20]
 8007882:	4313      	orrs	r3, r2
 8007884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	693a      	ldr	r2, [r7, #16]
 800788a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	621a      	str	r2, [r3, #32]
}
 8007892:	bf00      	nop
 8007894:	371c      	adds	r7, #28
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr

0800789e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800789e:	b480      	push	{r7}
 80078a0:	b085      	sub	sp, #20
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80078b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078ba:	683a      	ldr	r2, [r7, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	4313      	orrs	r3, r2
 80078c0:	f043 0307 	orr.w	r3, r3, #7
 80078c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	609a      	str	r2, [r3, #8]
}
 80078cc:	bf00      	nop
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078d8:	b480      	push	{r7}
 80078da:	b087      	sub	sp, #28
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
 80078e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	021a      	lsls	r2, r3, #8
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	431a      	orrs	r2, r3
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	4313      	orrs	r3, r2
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	4313      	orrs	r3, r2
 8007904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	609a      	str	r2, [r3, #8]
}
 800790c:	bf00      	nop
 800790e:	371c      	adds	r7, #28
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr

08007918 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007928:	2b01      	cmp	r3, #1
 800792a:	d101      	bne.n	8007930 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800792c:	2302      	movs	r3, #2
 800792e:	e04a      	b.n	80079c6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2202      	movs	r2, #2
 800793c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a1f      	ldr	r2, [pc, #124]	; (80079d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d108      	bne.n	800796c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007960:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	4313      	orrs	r3, r2
 800796a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007972:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	4313      	orrs	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a12      	ldr	r2, [pc, #72]	; (80079d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d004      	beq.n	800799a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007998:	d10c      	bne.n	80079b4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3714      	adds	r7, #20
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr
 80079d2:	bf00      	nop
 80079d4:	40012c00 	.word	0x40012c00

080079d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80079e2:	2300      	movs	r3, #0
 80079e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d101      	bne.n	80079f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80079f0:	2302      	movs	r3, #2
 80079f2:	e06e      	b.n	8007ad2 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	4313      	orrs	r3, r2
 8007a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4313      	orrs	r3, r2
 8007a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	695b      	ldr	r3, [r3, #20]
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	041b      	lsls	r3, r3, #16
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	69db      	ldr	r3, [r3, #28]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a17      	ldr	r2, [pc, #92]	; (8007ae0 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d11c      	bne.n	8007ac0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a90:	051b      	lsls	r3, r3, #20
 8007a92:	4313      	orrs	r3, r2
 8007a94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007abc:	4313      	orrs	r3, r2
 8007abe:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3714      	adds	r7, #20
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	40012c00 	.word	0x40012c00

08007ae4 <LL_RCC_GetUSARTClockSource>:
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007af0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4013      	ands	r3, r2
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <LL_RCC_GetLPUARTClockSource>:
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b10:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4013      	ands	r3, r2
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b082      	sub	sp, #8
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	e042      	b.n	8007bbc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d106      	bne.n	8007b4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f7fb fc29 	bl	80033a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2224      	movs	r2, #36	; 0x24
 8007b52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	681a      	ldr	r2, [r3, #0]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 0201 	bic.w	r2, r2, #1
 8007b64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d002      	beq.n	8007b74 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 feee 	bl	8008950 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fcc3 	bl	8008500 <UART_SetConfig>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d101      	bne.n	8007b84 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e01b      	b.n	8007bbc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	685a      	ldr	r2, [r3, #4]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689a      	ldr	r2, [r3, #8]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007ba2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f042 0201 	orr.w	r2, r2, #1
 8007bb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 ff6d 	bl	8008a94 <UART_CheckIdleState>
 8007bba:	4603      	mov	r3, r0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b08a      	sub	sp, #40	; 0x28
 8007bc8:	af02      	add	r7, sp, #8
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	603b      	str	r3, [r7, #0]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bda:	2b20      	cmp	r3, #32
 8007bdc:	d17b      	bne.n	8007cd6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d002      	beq.n	8007bea <HAL_UART_Transmit+0x26>
 8007be4:	88fb      	ldrh	r3, [r7, #6]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d101      	bne.n	8007bee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e074      	b.n	8007cd8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	2221      	movs	r2, #33	; 0x21
 8007bfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007bfe:	f7fc f829 	bl	8003c54 <HAL_GetTick>
 8007c02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	88fa      	ldrh	r2, [r7, #6]
 8007c08:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	88fa      	ldrh	r2, [r7, #6]
 8007c10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c1c:	d108      	bne.n	8007c30 <HAL_UART_Transmit+0x6c>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d104      	bne.n	8007c30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007c26:	2300      	movs	r3, #0
 8007c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	61bb      	str	r3, [r7, #24]
 8007c2e:	e003      	b.n	8007c38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007c34:	2300      	movs	r3, #0
 8007c36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007c38:	e030      	b.n	8007c9c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	2200      	movs	r2, #0
 8007c42:	2180      	movs	r1, #128	; 0x80
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f000 ffcf 	bl	8008be8 <UART_WaitOnFlagUntilTimeout>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d005      	beq.n	8007c5c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2220      	movs	r2, #32
 8007c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e03d      	b.n	8007cd8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10b      	bne.n	8007c7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	881b      	ldrh	r3, [r3, #0]
 8007c66:	461a      	mov	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	3302      	adds	r3, #2
 8007c76:	61bb      	str	r3, [r7, #24]
 8007c78:	e007      	b.n	8007c8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c7a:	69fb      	ldr	r3, [r7, #28]
 8007c7c:	781a      	ldrb	r2, [r3, #0]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	3301      	adds	r3, #1
 8007c88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	3b01      	subs	r3, #1
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1c8      	bne.n	8007c3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	2140      	movs	r1, #64	; 0x40
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f000 ff98 	bl	8008be8 <UART_WaitOnFlagUntilTimeout>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d005      	beq.n	8007cca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2220      	movs	r2, #32
 8007cc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e006      	b.n	8007cd8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	e000      	b.n	8007cd8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007cd6:	2302      	movs	r3, #2
  }
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3720      	adds	r7, #32
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b08a      	sub	sp, #40	; 0x28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	4613      	mov	r3, r2
 8007cec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cf4:	2b20      	cmp	r3, #32
 8007cf6:	d137      	bne.n	8007d68 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d002      	beq.n	8007d04 <HAL_UART_Receive_IT+0x24>
 8007cfe:	88fb      	ldrh	r3, [r7, #6]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d101      	bne.n	8007d08 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e030      	b.n	8007d6a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a18      	ldr	r2, [pc, #96]	; (8007d74 <HAL_UART_Receive_IT+0x94>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d01f      	beq.n	8007d58 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d018      	beq.n	8007d58 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	e853 3f00 	ldrex	r3, [r3]
 8007d32:	613b      	str	r3, [r7, #16]
   return(result);
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	461a      	mov	r2, r3
 8007d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d44:	623b      	str	r3, [r7, #32]
 8007d46:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d48:	69f9      	ldr	r1, [r7, #28]
 8007d4a:	6a3a      	ldr	r2, [r7, #32]
 8007d4c:	e841 2300 	strex	r3, r2, [r1]
 8007d50:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1e6      	bne.n	8007d26 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007d58:	88fb      	ldrh	r3, [r7, #6]
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	68b9      	ldr	r1, [r7, #8]
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f000 ffb0 	bl	8008cc4 <UART_Start_Receive_IT>
 8007d64:	4603      	mov	r3, r0
 8007d66:	e000      	b.n	8007d6a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007d68:	2302      	movs	r3, #2
  }
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3728      	adds	r7, #40	; 0x28
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	40008000 	.word	0x40008000

08007d78 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b08a      	sub	sp, #40	; 0x28
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	4613      	mov	r3, r2
 8007d84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d8c:	2b20      	cmp	r3, #32
 8007d8e:	d167      	bne.n	8007e60 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d002      	beq.n	8007d9c <HAL_UART_Transmit_DMA+0x24>
 8007d96:	88fb      	ldrh	r3, [r7, #6]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d101      	bne.n	8007da0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e060      	b.n	8007e62 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	88fa      	ldrh	r2, [r7, #6]
 8007daa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	88fa      	ldrh	r2, [r7, #6]
 8007db2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2221      	movs	r2, #33	; 0x21
 8007dc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d028      	beq.n	8007e20 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dd2:	4a26      	ldr	r2, [pc, #152]	; (8007e6c <HAL_UART_Transmit_DMA+0xf4>)
 8007dd4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dda:	4a25      	ldr	r2, [pc, #148]	; (8007e70 <HAL_UART_Transmit_DMA+0xf8>)
 8007ddc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007de2:	4a24      	ldr	r2, [pc, #144]	; (8007e74 <HAL_UART_Transmit_DMA+0xfc>)
 8007de4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dea:	2200      	movs	r2, #0
 8007dec:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007df6:	4619      	mov	r1, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	3328      	adds	r3, #40	; 0x28
 8007dfe:	461a      	mov	r2, r3
 8007e00:	88fb      	ldrh	r3, [r7, #6]
 8007e02:	f7fc f999 	bl	8004138 <HAL_DMA_Start_IT>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d009      	beq.n	8007e20 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2210      	movs	r2, #16
 8007e10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2220      	movs	r2, #32
 8007e18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e020      	b.n	8007e62 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2240      	movs	r2, #64	; 0x40
 8007e26:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	3308      	adds	r3, #8
 8007e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	e853 3f00 	ldrex	r3, [r3]
 8007e36:	613b      	str	r3, [r7, #16]
   return(result);
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	3308      	adds	r3, #8
 8007e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e48:	623a      	str	r2, [r7, #32]
 8007e4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4c:	69f9      	ldr	r1, [r7, #28]
 8007e4e:	6a3a      	ldr	r2, [r7, #32]
 8007e50:	e841 2300 	strex	r3, r2, [r1]
 8007e54:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1e5      	bne.n	8007e28 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	e000      	b.n	8007e62 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007e60:	2302      	movs	r3, #2
  }
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3728      	adds	r7, #40	; 0x28
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	08009057 	.word	0x08009057
 8007e70:	080090f1 	.word	0x080090f1
 8007e74:	0800910d 	.word	0x0800910d

08007e78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b0ba      	sub	sp, #232	; 0xe8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	69db      	ldr	r3, [r3, #28]
 8007e86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007ea2:	f640 030f 	movw	r3, #2063	; 0x80f
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007eac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d11b      	bne.n	8007eec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb8:	f003 0320 	and.w	r3, r3, #32
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d015      	beq.n	8007eec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ec4:	f003 0320 	and.w	r3, r3, #32
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d105      	bne.n	8007ed8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d009      	beq.n	8007eec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f000 82e3 	beq.w	80084a8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	4798      	blx	r3
      }
      return;
 8007eea:	e2dd      	b.n	80084a8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007eec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 8123 	beq.w	800813c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007ef6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007efa:	4b8d      	ldr	r3, [pc, #564]	; (8008130 <HAL_UART_IRQHandler+0x2b8>)
 8007efc:	4013      	ands	r3, r2
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d106      	bne.n	8007f10 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007f02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007f06:	4b8b      	ldr	r3, [pc, #556]	; (8008134 <HAL_UART_IRQHandler+0x2bc>)
 8007f08:	4013      	ands	r3, r2
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f000 8116 	beq.w	800813c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f14:	f003 0301 	and.w	r3, r3, #1
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d011      	beq.n	8007f40 <HAL_UART_IRQHandler+0xc8>
 8007f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00b      	beq.n	8007f40 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f36:	f043 0201 	orr.w	r2, r3, #1
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f44:	f003 0302 	and.w	r3, r3, #2
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d011      	beq.n	8007f70 <HAL_UART_IRQHandler+0xf8>
 8007f4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f50:	f003 0301 	and.w	r3, r3, #1
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d00b      	beq.n	8007f70 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2202      	movs	r2, #2
 8007f5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f66:	f043 0204 	orr.w	r2, r3, #4
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f74:	f003 0304 	and.w	r3, r3, #4
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d011      	beq.n	8007fa0 <HAL_UART_IRQHandler+0x128>
 8007f7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f80:	f003 0301 	and.w	r3, r3, #1
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00b      	beq.n	8007fa0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2204      	movs	r2, #4
 8007f8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f96:	f043 0202 	orr.w	r2, r3, #2
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007fa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fa4:	f003 0308 	and.w	r3, r3, #8
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d017      	beq.n	8007fdc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fb0:	f003 0320 	and.w	r3, r3, #32
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d105      	bne.n	8007fc4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007fb8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007fbc:	4b5c      	ldr	r3, [pc, #368]	; (8008130 <HAL_UART_IRQHandler+0x2b8>)
 8007fbe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d00b      	beq.n	8007fdc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	2208      	movs	r2, #8
 8007fca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fd2:	f043 0208 	orr.w	r2, r3, #8
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d012      	beq.n	800800e <HAL_UART_IRQHandler+0x196>
 8007fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00c      	beq.n	800800e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ffc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008004:	f043 0220 	orr.w	r2, r3, #32
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008014:	2b00      	cmp	r3, #0
 8008016:	f000 8249 	beq.w	80084ac <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800801a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800801e:	f003 0320 	and.w	r3, r3, #32
 8008022:	2b00      	cmp	r3, #0
 8008024:	d013      	beq.n	800804e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800802a:	f003 0320 	and.w	r3, r3, #32
 800802e:	2b00      	cmp	r3, #0
 8008030:	d105      	bne.n	800803e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800803a:	2b00      	cmp	r3, #0
 800803c:	d007      	beq.n	800804e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008054:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008062:	2b40      	cmp	r3, #64	; 0x40
 8008064:	d005      	beq.n	8008072 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008066:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800806a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800806e:	2b00      	cmp	r3, #0
 8008070:	d054      	beq.n	800811c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 ff89 	bl	8008f8a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008082:	2b40      	cmp	r3, #64	; 0x40
 8008084:	d146      	bne.n	8008114 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	3308      	adds	r3, #8
 800808c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008090:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008094:	e853 3f00 	ldrex	r3, [r3]
 8008098:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800809c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80080a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	3308      	adds	r3, #8
 80080ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80080b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80080b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80080be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80080c2:	e841 2300 	strex	r3, r2, [r1]
 80080c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80080ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1d9      	bne.n	8008086 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d017      	beq.n	800810c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080e2:	4a15      	ldr	r2, [pc, #84]	; (8008138 <HAL_UART_IRQHandler+0x2c0>)
 80080e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7fc f8fd 	bl	80042ec <HAL_DMA_Abort_IT>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d019      	beq.n	800812c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80080fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8008106:	4610      	mov	r0, r2
 8008108:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800810a:	e00f      	b.n	800812c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 f9e1 	bl	80084d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008112:	e00b      	b.n	800812c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 f9dd 	bl	80084d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800811a:	e007      	b.n	800812c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 f9d9 	bl	80084d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800812a:	e1bf      	b.n	80084ac <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800812c:	bf00      	nop
    return;
 800812e:	e1bd      	b.n	80084ac <HAL_UART_IRQHandler+0x634>
 8008130:	10000001 	.word	0x10000001
 8008134:	04000120 	.word	0x04000120
 8008138:	0800918d 	.word	0x0800918d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008140:	2b01      	cmp	r3, #1
 8008142:	f040 8153 	bne.w	80083ec <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800814a:	f003 0310 	and.w	r3, r3, #16
 800814e:	2b00      	cmp	r3, #0
 8008150:	f000 814c 	beq.w	80083ec <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008158:	f003 0310 	and.w	r3, r3, #16
 800815c:	2b00      	cmp	r3, #0
 800815e:	f000 8145 	beq.w	80083ec <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2210      	movs	r2, #16
 8008168:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008174:	2b40      	cmp	r3, #64	; 0x40
 8008176:	f040 80bb 	bne.w	80082f0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008188:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800818c:	2b00      	cmp	r3, #0
 800818e:	f000 818f 	beq.w	80084b0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008198:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800819c:	429a      	cmp	r2, r3
 800819e:	f080 8187 	bcs.w	80084b0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80081a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 0320 	and.w	r3, r3, #32
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f040 8087 	bne.w	80082ce <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80081cc:	e853 3f00 	ldrex	r3, [r3]
 80081d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80081d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80081d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	461a      	mov	r2, r3
 80081e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80081ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80081ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80081f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80081fa:	e841 2300 	strex	r3, r2, [r1]
 80081fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008202:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1da      	bne.n	80081c0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	3308      	adds	r3, #8
 8008210:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008212:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008214:	e853 3f00 	ldrex	r3, [r3]
 8008218:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800821a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800821c:	f023 0301 	bic.w	r3, r3, #1
 8008220:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	3308      	adds	r3, #8
 800822a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800822e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008232:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008234:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008236:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800823a:	e841 2300 	strex	r3, r2, [r1]
 800823e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008240:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1e1      	bne.n	800820a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	3308      	adds	r3, #8
 800824c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008250:	e853 3f00 	ldrex	r3, [r3]
 8008254:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800825c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	3308      	adds	r3, #8
 8008266:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800826a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800826c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008270:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008272:	e841 2300 	strex	r3, r2, [r1]
 8008276:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1e3      	bne.n	8008246 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2220      	movs	r2, #32
 8008282:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008294:	e853 3f00 	ldrex	r3, [r3]
 8008298:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800829a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800829c:	f023 0310 	bic.w	r3, r3, #16
 80082a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	461a      	mov	r2, r3
 80082aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80082ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80082b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80082b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082b6:	e841 2300 	strex	r3, r2, [r1]
 80082ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80082bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d1e4      	bne.n	800828c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7fb ffb0 	bl	800422e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2202      	movs	r2, #2
 80082d2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	1ad3      	subs	r3, r2, r3
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f8fd 	bl	80084e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80082ee:	e0df      	b.n	80084b0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800830a:	b29b      	uxth	r3, r3
 800830c:	2b00      	cmp	r3, #0
 800830e:	f000 80d1 	beq.w	80084b4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8008312:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008316:	2b00      	cmp	r3, #0
 8008318:	f000 80cc 	beq.w	80084b4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008324:	e853 3f00 	ldrex	r3, [r3]
 8008328:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800832a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800832c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008330:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	461a      	mov	r2, r3
 800833a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800833e:	647b      	str	r3, [r7, #68]	; 0x44
 8008340:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008342:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008344:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008346:	e841 2300 	strex	r3, r2, [r1]
 800834a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800834c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1e4      	bne.n	800831c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	3308      	adds	r3, #8
 8008358:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835c:	e853 3f00 	ldrex	r3, [r3]
 8008360:	623b      	str	r3, [r7, #32]
   return(result);
 8008362:	6a3b      	ldr	r3, [r7, #32]
 8008364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008368:	f023 0301 	bic.w	r3, r3, #1
 800836c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3308      	adds	r3, #8
 8008376:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800837a:	633a      	str	r2, [r7, #48]	; 0x30
 800837c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008382:	e841 2300 	strex	r3, r2, [r1]
 8008386:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838a:	2b00      	cmp	r3, #0
 800838c:	d1e1      	bne.n	8008352 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2220      	movs	r2, #32
 8008392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	e853 3f00 	ldrex	r3, [r3]
 80083ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f023 0310 	bic.w	r3, r3, #16
 80083b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	461a      	mov	r2, r3
 80083c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80083c4:	61fb      	str	r3, [r7, #28]
 80083c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c8:	69b9      	ldr	r1, [r7, #24]
 80083ca:	69fa      	ldr	r2, [r7, #28]
 80083cc:	e841 2300 	strex	r3, r2, [r1]
 80083d0:	617b      	str	r3, [r7, #20]
   return(result);
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1e4      	bne.n	80083a2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2202      	movs	r2, #2
 80083dc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80083de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083e2:	4619      	mov	r1, r3
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 f87f 	bl	80084e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80083ea:	e063      	b.n	80084b4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80083ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d00e      	beq.n	8008416 <HAL_UART_IRQHandler+0x59e>
 80083f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008400:	2b00      	cmp	r3, #0
 8008402:	d008      	beq.n	8008416 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800840c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f001 fc1a 	bl	8009c48 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008414:	e051      	b.n	80084ba <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800841a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800841e:	2b00      	cmp	r3, #0
 8008420:	d014      	beq.n	800844c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800842a:	2b00      	cmp	r3, #0
 800842c:	d105      	bne.n	800843a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800842e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008432:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d008      	beq.n	800844c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800843e:	2b00      	cmp	r3, #0
 8008440:	d03a      	beq.n	80084b8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	4798      	blx	r3
    }
    return;
 800844a:	e035      	b.n	80084b8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800844c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008454:	2b00      	cmp	r3, #0
 8008456:	d009      	beq.n	800846c <HAL_UART_IRQHandler+0x5f4>
 8008458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800845c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008460:	2b00      	cmp	r3, #0
 8008462:	d003      	beq.n	800846c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fea7 	bl	80091b8 <UART_EndTransmit_IT>
    return;
 800846a:	e026      	b.n	80084ba <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800846c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008470:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d009      	beq.n	800848c <HAL_UART_IRQHandler+0x614>
 8008478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800847c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008480:	2b00      	cmp	r3, #0
 8008482:	d003      	beq.n	800848c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f001 fbf3 	bl	8009c70 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800848a:	e016      	b.n	80084ba <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800848c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d010      	beq.n	80084ba <HAL_UART_IRQHandler+0x642>
 8008498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800849c:	2b00      	cmp	r3, #0
 800849e:	da0c      	bge.n	80084ba <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f001 fbdb 	bl	8009c5c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084a6:	e008      	b.n	80084ba <HAL_UART_IRQHandler+0x642>
      return;
 80084a8:	bf00      	nop
 80084aa:	e006      	b.n	80084ba <HAL_UART_IRQHandler+0x642>
    return;
 80084ac:	bf00      	nop
 80084ae:	e004      	b.n	80084ba <HAL_UART_IRQHandler+0x642>
      return;
 80084b0:	bf00      	nop
 80084b2:	e002      	b.n	80084ba <HAL_UART_IRQHandler+0x642>
      return;
 80084b4:	bf00      	nop
 80084b6:	e000      	b.n	80084ba <HAL_UART_IRQHandler+0x642>
    return;
 80084b8:	bf00      	nop
  }
}
 80084ba:	37e8      	adds	r7, #232	; 0xe8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80084c8:	bf00      	nop
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	460b      	mov	r3, r1
 80084f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80084f4:	bf00      	nop
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008504:	b08c      	sub	sp, #48	; 0x30
 8008506:	af00      	add	r7, sp, #0
 8008508:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800850a:	2300      	movs	r3, #0
 800850c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	689a      	ldr	r2, [r3, #8]
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	431a      	orrs	r2, r3
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	695b      	ldr	r3, [r3, #20]
 800851e:	431a      	orrs	r2, r3
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	69db      	ldr	r3, [r3, #28]
 8008524:	4313      	orrs	r3, r2
 8008526:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	4baf      	ldr	r3, [pc, #700]	; (80087ec <UART_SetConfig+0x2ec>)
 8008530:	4013      	ands	r3, r2
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	6812      	ldr	r2, [r2, #0]
 8008536:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008538:	430b      	orrs	r3, r1
 800853a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	68da      	ldr	r2, [r3, #12]
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	430a      	orrs	r2, r1
 8008550:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4aa4      	ldr	r2, [pc, #656]	; (80087f0 <UART_SetConfig+0x2f0>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d004      	beq.n	800856c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	6a1b      	ldr	r3, [r3, #32]
 8008566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008568:	4313      	orrs	r3, r2
 800856a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008576:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	6812      	ldr	r2, [r2, #0]
 800857e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008580:	430b      	orrs	r3, r1
 8008582:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858a:	f023 010f 	bic.w	r1, r3, #15
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	430a      	orrs	r2, r1
 8008598:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a95      	ldr	r2, [pc, #596]	; (80087f4 <UART_SetConfig+0x2f4>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d125      	bne.n	80085f0 <UART_SetConfig+0xf0>
 80085a4:	2003      	movs	r0, #3
 80085a6:	f7ff fa9d 	bl	8007ae4 <LL_RCC_GetUSARTClockSource>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b03      	cmp	r3, #3
 80085ae:	d81b      	bhi.n	80085e8 <UART_SetConfig+0xe8>
 80085b0:	a201      	add	r2, pc, #4	; (adr r2, 80085b8 <UART_SetConfig+0xb8>)
 80085b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085b6:	bf00      	nop
 80085b8:	080085c9 	.word	0x080085c9
 80085bc:	080085d9 	.word	0x080085d9
 80085c0:	080085d1 	.word	0x080085d1
 80085c4:	080085e1 	.word	0x080085e1
 80085c8:	2301      	movs	r3, #1
 80085ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ce:	e042      	b.n	8008656 <UART_SetConfig+0x156>
 80085d0:	2302      	movs	r3, #2
 80085d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085d6:	e03e      	b.n	8008656 <UART_SetConfig+0x156>
 80085d8:	2304      	movs	r3, #4
 80085da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085de:	e03a      	b.n	8008656 <UART_SetConfig+0x156>
 80085e0:	2308      	movs	r3, #8
 80085e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085e6:	e036      	b.n	8008656 <UART_SetConfig+0x156>
 80085e8:	2310      	movs	r3, #16
 80085ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085ee:	e032      	b.n	8008656 <UART_SetConfig+0x156>
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a7e      	ldr	r2, [pc, #504]	; (80087f0 <UART_SetConfig+0x2f0>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d12a      	bne.n	8008650 <UART_SetConfig+0x150>
 80085fa:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80085fe:	f7ff fa81 	bl	8007b04 <LL_RCC_GetLPUARTClockSource>
 8008602:	4603      	mov	r3, r0
 8008604:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008608:	d01a      	beq.n	8008640 <UART_SetConfig+0x140>
 800860a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800860e:	d81b      	bhi.n	8008648 <UART_SetConfig+0x148>
 8008610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008614:	d00c      	beq.n	8008630 <UART_SetConfig+0x130>
 8008616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800861a:	d815      	bhi.n	8008648 <UART_SetConfig+0x148>
 800861c:	2b00      	cmp	r3, #0
 800861e:	d003      	beq.n	8008628 <UART_SetConfig+0x128>
 8008620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008624:	d008      	beq.n	8008638 <UART_SetConfig+0x138>
 8008626:	e00f      	b.n	8008648 <UART_SetConfig+0x148>
 8008628:	2300      	movs	r3, #0
 800862a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800862e:	e012      	b.n	8008656 <UART_SetConfig+0x156>
 8008630:	2302      	movs	r3, #2
 8008632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008636:	e00e      	b.n	8008656 <UART_SetConfig+0x156>
 8008638:	2304      	movs	r3, #4
 800863a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800863e:	e00a      	b.n	8008656 <UART_SetConfig+0x156>
 8008640:	2308      	movs	r3, #8
 8008642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008646:	e006      	b.n	8008656 <UART_SetConfig+0x156>
 8008648:	2310      	movs	r3, #16
 800864a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800864e:	e002      	b.n	8008656 <UART_SetConfig+0x156>
 8008650:	2310      	movs	r3, #16
 8008652:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a65      	ldr	r2, [pc, #404]	; (80087f0 <UART_SetConfig+0x2f0>)
 800865c:	4293      	cmp	r3, r2
 800865e:	f040 8097 	bne.w	8008790 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008662:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008666:	2b08      	cmp	r3, #8
 8008668:	d823      	bhi.n	80086b2 <UART_SetConfig+0x1b2>
 800866a:	a201      	add	r2, pc, #4	; (adr r2, 8008670 <UART_SetConfig+0x170>)
 800866c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008670:	08008695 	.word	0x08008695
 8008674:	080086b3 	.word	0x080086b3
 8008678:	0800869d 	.word	0x0800869d
 800867c:	080086b3 	.word	0x080086b3
 8008680:	080086a3 	.word	0x080086a3
 8008684:	080086b3 	.word	0x080086b3
 8008688:	080086b3 	.word	0x080086b3
 800868c:	080086b3 	.word	0x080086b3
 8008690:	080086ab 	.word	0x080086ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008694:	f7fd fb4e 	bl	8005d34 <HAL_RCC_GetPCLK1Freq>
 8008698:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800869a:	e010      	b.n	80086be <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800869c:	4b56      	ldr	r3, [pc, #344]	; (80087f8 <UART_SetConfig+0x2f8>)
 800869e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086a0:	e00d      	b.n	80086be <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086a2:	f7fd fac7 	bl	8005c34 <HAL_RCC_GetSysClockFreq>
 80086a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086a8:	e009      	b.n	80086be <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086b0:	e005      	b.n	80086be <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80086b2:	2300      	movs	r3, #0
 80086b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80086bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80086be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f000 812b 	beq.w	800891c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ca:	4a4c      	ldr	r2, [pc, #304]	; (80087fc <UART_SetConfig+0x2fc>)
 80086cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086d0:	461a      	mov	r2, r3
 80086d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80086d8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	685a      	ldr	r2, [r3, #4]
 80086de:	4613      	mov	r3, r2
 80086e0:	005b      	lsls	r3, r3, #1
 80086e2:	4413      	add	r3, r2
 80086e4:	69ba      	ldr	r2, [r7, #24]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d305      	bcc.n	80086f6 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086f0:	69ba      	ldr	r2, [r7, #24]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d903      	bls.n	80086fe <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80086fc:	e10e      	b.n	800891c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008700:	2200      	movs	r2, #0
 8008702:	60bb      	str	r3, [r7, #8]
 8008704:	60fa      	str	r2, [r7, #12]
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870a:	4a3c      	ldr	r2, [pc, #240]	; (80087fc <UART_SetConfig+0x2fc>)
 800870c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008710:	b29b      	uxth	r3, r3
 8008712:	2200      	movs	r2, #0
 8008714:	603b      	str	r3, [r7, #0]
 8008716:	607a      	str	r2, [r7, #4]
 8008718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800871c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008720:	f7f8 f984 	bl	8000a2c <__aeabi_uldivmod>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	4610      	mov	r0, r2
 800872a:	4619      	mov	r1, r3
 800872c:	f04f 0200 	mov.w	r2, #0
 8008730:	f04f 0300 	mov.w	r3, #0
 8008734:	020b      	lsls	r3, r1, #8
 8008736:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800873a:	0202      	lsls	r2, r0, #8
 800873c:	6979      	ldr	r1, [r7, #20]
 800873e:	6849      	ldr	r1, [r1, #4]
 8008740:	0849      	lsrs	r1, r1, #1
 8008742:	2000      	movs	r0, #0
 8008744:	460c      	mov	r4, r1
 8008746:	4605      	mov	r5, r0
 8008748:	eb12 0804 	adds.w	r8, r2, r4
 800874c:	eb43 0905 	adc.w	r9, r3, r5
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	469a      	mov	sl, r3
 8008758:	4693      	mov	fp, r2
 800875a:	4652      	mov	r2, sl
 800875c:	465b      	mov	r3, fp
 800875e:	4640      	mov	r0, r8
 8008760:	4649      	mov	r1, r9
 8008762:	f7f8 f963 	bl	8000a2c <__aeabi_uldivmod>
 8008766:	4602      	mov	r2, r0
 8008768:	460b      	mov	r3, r1
 800876a:	4613      	mov	r3, r2
 800876c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800876e:	6a3b      	ldr	r3, [r7, #32]
 8008770:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008774:	d308      	bcc.n	8008788 <UART_SetConfig+0x288>
 8008776:	6a3b      	ldr	r3, [r7, #32]
 8008778:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800877c:	d204      	bcs.n	8008788 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	6a3a      	ldr	r2, [r7, #32]
 8008784:	60da      	str	r2, [r3, #12]
 8008786:	e0c9      	b.n	800891c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800878e:	e0c5      	b.n	800891c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008798:	d16d      	bne.n	8008876 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800879a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800879e:	3b01      	subs	r3, #1
 80087a0:	2b07      	cmp	r3, #7
 80087a2:	d82d      	bhi.n	8008800 <UART_SetConfig+0x300>
 80087a4:	a201      	add	r2, pc, #4	; (adr r2, 80087ac <UART_SetConfig+0x2ac>)
 80087a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087aa:	bf00      	nop
 80087ac:	080087cd 	.word	0x080087cd
 80087b0:	080087d5 	.word	0x080087d5
 80087b4:	08008801 	.word	0x08008801
 80087b8:	080087db 	.word	0x080087db
 80087bc:	08008801 	.word	0x08008801
 80087c0:	08008801 	.word	0x08008801
 80087c4:	08008801 	.word	0x08008801
 80087c8:	080087e3 	.word	0x080087e3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087cc:	f7fd fac8 	bl	8005d60 <HAL_RCC_GetPCLK2Freq>
 80087d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087d2:	e01b      	b.n	800880c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087d4:	4b08      	ldr	r3, [pc, #32]	; (80087f8 <UART_SetConfig+0x2f8>)
 80087d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80087d8:	e018      	b.n	800880c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087da:	f7fd fa2b 	bl	8005c34 <HAL_RCC_GetSysClockFreq>
 80087de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80087e0:	e014      	b.n	800880c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80087e8:	e010      	b.n	800880c <UART_SetConfig+0x30c>
 80087ea:	bf00      	nop
 80087ec:	cfff69f3 	.word	0xcfff69f3
 80087f0:	40008000 	.word	0x40008000
 80087f4:	40013800 	.word	0x40013800
 80087f8:	00f42400 	.word	0x00f42400
 80087fc:	080110a0 	.word	0x080110a0
      default:
        pclk = 0U;
 8008800:	2300      	movs	r3, #0
 8008802:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800880a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800880c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880e:	2b00      	cmp	r3, #0
 8008810:	f000 8084 	beq.w	800891c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008818:	4a4b      	ldr	r2, [pc, #300]	; (8008948 <UART_SetConfig+0x448>)
 800881a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800881e:	461a      	mov	r2, r3
 8008820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008822:	fbb3 f3f2 	udiv	r3, r3, r2
 8008826:	005a      	lsls	r2, r3, #1
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	085b      	lsrs	r3, r3, #1
 800882e:	441a      	add	r2, r3
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	fbb2 f3f3 	udiv	r3, r2, r3
 8008838:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800883a:	6a3b      	ldr	r3, [r7, #32]
 800883c:	2b0f      	cmp	r3, #15
 800883e:	d916      	bls.n	800886e <UART_SetConfig+0x36e>
 8008840:	6a3b      	ldr	r3, [r7, #32]
 8008842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008846:	d212      	bcs.n	800886e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008848:	6a3b      	ldr	r3, [r7, #32]
 800884a:	b29b      	uxth	r3, r3
 800884c:	f023 030f 	bic.w	r3, r3, #15
 8008850:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008852:	6a3b      	ldr	r3, [r7, #32]
 8008854:	085b      	lsrs	r3, r3, #1
 8008856:	b29b      	uxth	r3, r3
 8008858:	f003 0307 	and.w	r3, r3, #7
 800885c:	b29a      	uxth	r2, r3
 800885e:	8bfb      	ldrh	r3, [r7, #30]
 8008860:	4313      	orrs	r3, r2
 8008862:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	8bfa      	ldrh	r2, [r7, #30]
 800886a:	60da      	str	r2, [r3, #12]
 800886c:	e056      	b.n	800891c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008874:	e052      	b.n	800891c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008876:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800887a:	3b01      	subs	r3, #1
 800887c:	2b07      	cmp	r3, #7
 800887e:	d822      	bhi.n	80088c6 <UART_SetConfig+0x3c6>
 8008880:	a201      	add	r2, pc, #4	; (adr r2, 8008888 <UART_SetConfig+0x388>)
 8008882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008886:	bf00      	nop
 8008888:	080088a9 	.word	0x080088a9
 800888c:	080088b1 	.word	0x080088b1
 8008890:	080088c7 	.word	0x080088c7
 8008894:	080088b7 	.word	0x080088b7
 8008898:	080088c7 	.word	0x080088c7
 800889c:	080088c7 	.word	0x080088c7
 80088a0:	080088c7 	.word	0x080088c7
 80088a4:	080088bf 	.word	0x080088bf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088a8:	f7fd fa5a 	bl	8005d60 <HAL_RCC_GetPCLK2Freq>
 80088ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088ae:	e010      	b.n	80088d2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088b0:	4b26      	ldr	r3, [pc, #152]	; (800894c <UART_SetConfig+0x44c>)
 80088b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088b4:	e00d      	b.n	80088d2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088b6:	f7fd f9bd 	bl	8005c34 <HAL_RCC_GetSysClockFreq>
 80088ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088bc:	e009      	b.n	80088d2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088c4:	e005      	b.n	80088d2 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80088c6:	2300      	movs	r3, #0
 80088c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80088d0:	bf00      	nop
    }

    if (pclk != 0U)
 80088d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d021      	beq.n	800891c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088dc:	4a1a      	ldr	r2, [pc, #104]	; (8008948 <UART_SetConfig+0x448>)
 80088de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088e2:	461a      	mov	r2, r3
 80088e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	685b      	ldr	r3, [r3, #4]
 80088ee:	085b      	lsrs	r3, r3, #1
 80088f0:	441a      	add	r2, r3
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088fc:	6a3b      	ldr	r3, [r7, #32]
 80088fe:	2b0f      	cmp	r3, #15
 8008900:	d909      	bls.n	8008916 <UART_SetConfig+0x416>
 8008902:	6a3b      	ldr	r3, [r7, #32]
 8008904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008908:	d205      	bcs.n	8008916 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800890a:	6a3b      	ldr	r3, [r7, #32]
 800890c:	b29a      	uxth	r2, r3
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	60da      	str	r2, [r3, #12]
 8008914:	e002      	b.n	800891c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	2201      	movs	r2, #1
 8008920:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	2201      	movs	r2, #1
 8008928:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	2200      	movs	r2, #0
 8008930:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	2200      	movs	r2, #0
 8008936:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008938:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800893c:	4618      	mov	r0, r3
 800893e:	3730      	adds	r7, #48	; 0x30
 8008940:	46bd      	mov	sp, r7
 8008942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008946:	bf00      	nop
 8008948:	080110a0 	.word	0x080110a0
 800894c:	00f42400 	.word	0x00f42400

08008950 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895c:	f003 0308 	and.w	r3, r3, #8
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00a      	beq.n	800897a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	430a      	orrs	r2, r1
 8008978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897e:	f003 0301 	and.w	r3, r3, #1
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00a      	beq.n	800899c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	430a      	orrs	r2, r1
 800899a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a0:	f003 0302 	and.w	r3, r3, #2
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00a      	beq.n	80089be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	430a      	orrs	r2, r1
 80089bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c2:	f003 0304 	and.w	r3, r3, #4
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00a      	beq.n	80089e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	430a      	orrs	r2, r1
 80089de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e4:	f003 0310 	and.w	r3, r3, #16
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d00a      	beq.n	8008a02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	430a      	orrs	r2, r1
 8008a00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a06:	f003 0320 	and.w	r3, r3, #32
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00a      	beq.n	8008a24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	430a      	orrs	r2, r1
 8008a22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d01a      	beq.n	8008a66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	430a      	orrs	r2, r1
 8008a44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a4e:	d10a      	bne.n	8008a66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	430a      	orrs	r2, r1
 8008a64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00a      	beq.n	8008a88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	430a      	orrs	r2, r1
 8008a86:	605a      	str	r2, [r3, #4]
  }
}
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b098      	sub	sp, #96	; 0x60
 8008a98:	af02      	add	r7, sp, #8
 8008a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008aa4:	f7fb f8d6 	bl	8003c54 <HAL_GetTick>
 8008aa8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 0308 	and.w	r3, r3, #8
 8008ab4:	2b08      	cmp	r3, #8
 8008ab6:	d12f      	bne.n	8008b18 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ab8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 f88e 	bl	8008be8 <UART_WaitOnFlagUntilTimeout>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d022      	beq.n	8008b18 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ada:	e853 3f00 	ldrex	r3, [r3]
 8008ade:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ae6:	653b      	str	r3, [r7, #80]	; 0x50
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	461a      	mov	r2, r3
 8008aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008af0:	647b      	str	r3, [r7, #68]	; 0x44
 8008af2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008af6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008af8:	e841 2300 	strex	r3, r2, [r1]
 8008afc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1e6      	bne.n	8008ad2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2220      	movs	r2, #32
 8008b08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b14:	2303      	movs	r3, #3
 8008b16:	e063      	b.n	8008be0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f003 0304 	and.w	r3, r3, #4
 8008b22:	2b04      	cmp	r3, #4
 8008b24:	d149      	bne.n	8008bba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b26:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b2a:	9300      	str	r3, [sp, #0]
 8008b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 f857 	bl	8008be8 <UART_WaitOnFlagUntilTimeout>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d03c      	beq.n	8008bba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b48:	e853 3f00 	ldrex	r3, [r3]
 8008b4c:	623b      	str	r3, [r7, #32]
   return(result);
 8008b4e:	6a3b      	ldr	r3, [r7, #32]
 8008b50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b5e:	633b      	str	r3, [r7, #48]	; 0x30
 8008b60:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b66:	e841 2300 	strex	r3, r2, [r1]
 8008b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d1e6      	bne.n	8008b40 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	3308      	adds	r3, #8
 8008b78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	e853 3f00 	ldrex	r3, [r3]
 8008b80:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f023 0301 	bic.w	r3, r3, #1
 8008b88:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	3308      	adds	r3, #8
 8008b90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b92:	61fa      	str	r2, [r7, #28]
 8008b94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b96:	69b9      	ldr	r1, [r7, #24]
 8008b98:	69fa      	ldr	r2, [r7, #28]
 8008b9a:	e841 2300 	strex	r3, r2, [r1]
 8008b9e:	617b      	str	r3, [r7, #20]
   return(result);
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1e5      	bne.n	8008b72 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2220      	movs	r2, #32
 8008baa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bb6:	2303      	movs	r3, #3
 8008bb8:	e012      	b.n	8008be0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2220      	movs	r2, #32
 8008bbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2220      	movs	r2, #32
 8008bc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3758      	adds	r7, #88	; 0x58
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	603b      	str	r3, [r7, #0]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bf8:	e04f      	b.n	8008c9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c00:	d04b      	beq.n	8008c9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c02:	f7fb f827 	bl	8003c54 <HAL_GetTick>
 8008c06:	4602      	mov	r2, r0
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	1ad3      	subs	r3, r2, r3
 8008c0c:	69ba      	ldr	r2, [r7, #24]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d302      	bcc.n	8008c18 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d101      	bne.n	8008c1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c18:	2303      	movs	r3, #3
 8008c1a:	e04e      	b.n	8008cba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 0304 	and.w	r3, r3, #4
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d037      	beq.n	8008c9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	2b80      	cmp	r3, #128	; 0x80
 8008c2e:	d034      	beq.n	8008c9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	2b40      	cmp	r3, #64	; 0x40
 8008c34:	d031      	beq.n	8008c9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	69db      	ldr	r3, [r3, #28]
 8008c3c:	f003 0308 	and.w	r3, r3, #8
 8008c40:	2b08      	cmp	r3, #8
 8008c42:	d110      	bne.n	8008c66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2208      	movs	r2, #8
 8008c4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f000 f99c 	bl	8008f8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2208      	movs	r2, #8
 8008c56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e029      	b.n	8008cba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	69db      	ldr	r3, [r3, #28]
 8008c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c74:	d111      	bne.n	8008c9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f000 f982 	bl	8008f8a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2220      	movs	r2, #32
 8008c8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2200      	movs	r2, #0
 8008c92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008c96:	2303      	movs	r3, #3
 8008c98:	e00f      	b.n	8008cba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	69da      	ldr	r2, [r3, #28]
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	68ba      	ldr	r2, [r7, #8]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	bf0c      	ite	eq
 8008caa:	2301      	moveq	r3, #1
 8008cac:	2300      	movne	r3, #0
 8008cae:	b2db      	uxtb	r3, r3
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	79fb      	ldrb	r3, [r7, #7]
 8008cb4:	429a      	cmp	r2, r3
 8008cb6:	d0a0      	beq.n	8008bfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3710      	adds	r7, #16
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
	...

08008cc4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b0a3      	sub	sp, #140	; 0x8c
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	4613      	mov	r3, r2
 8008cd0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	68ba      	ldr	r2, [r7, #8]
 8008cd6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	88fa      	ldrh	r2, [r7, #6]
 8008cdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	88fa      	ldrh	r2, [r7, #6]
 8008ce4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cf6:	d10e      	bne.n	8008d16 <UART_Start_Receive_IT+0x52>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d105      	bne.n	8008d0c <UART_Start_Receive_IT+0x48>
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008d06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d0a:	e02d      	b.n	8008d68 <UART_Start_Receive_IT+0xa4>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	22ff      	movs	r2, #255	; 0xff
 8008d10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d14:	e028      	b.n	8008d68 <UART_Start_Receive_IT+0xa4>
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d10d      	bne.n	8008d3a <UART_Start_Receive_IT+0x76>
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	691b      	ldr	r3, [r3, #16]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d104      	bne.n	8008d30 <UART_Start_Receive_IT+0x6c>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	22ff      	movs	r2, #255	; 0xff
 8008d2a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d2e:	e01b      	b.n	8008d68 <UART_Start_Receive_IT+0xa4>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	227f      	movs	r2, #127	; 0x7f
 8008d34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d38:	e016      	b.n	8008d68 <UART_Start_Receive_IT+0xa4>
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d42:	d10d      	bne.n	8008d60 <UART_Start_Receive_IT+0x9c>
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d104      	bne.n	8008d56 <UART_Start_Receive_IT+0x92>
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	227f      	movs	r2, #127	; 0x7f
 8008d50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d54:	e008      	b.n	8008d68 <UART_Start_Receive_IT+0xa4>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	223f      	movs	r2, #63	; 0x3f
 8008d5a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008d5e:	e003      	b.n	8008d68 <UART_Start_Receive_IT+0xa4>
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2222      	movs	r2, #34	; 0x22
 8008d74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	3308      	adds	r3, #8
 8008d7e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d82:	e853 3f00 	ldrex	r3, [r3]
 8008d86:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008d88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008d8a:	f043 0301 	orr.w	r3, r3, #1
 8008d8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	3308      	adds	r3, #8
 8008d98:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008d9c:	673a      	str	r2, [r7, #112]	; 0x70
 8008d9e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008da2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008da4:	e841 2300 	strex	r3, r2, [r1]
 8008da8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008daa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1e3      	bne.n	8008d78 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008db4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008db8:	d14f      	bne.n	8008e5a <UART_Start_Receive_IT+0x196>
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008dc0:	88fa      	ldrh	r2, [r7, #6]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d349      	bcc.n	8008e5a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dce:	d107      	bne.n	8008de0 <UART_Start_Receive_IT+0x11c>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d103      	bne.n	8008de0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	4a47      	ldr	r2, [pc, #284]	; (8008ef8 <UART_Start_Receive_IT+0x234>)
 8008ddc:	675a      	str	r2, [r3, #116]	; 0x74
 8008dde:	e002      	b.n	8008de6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	4a46      	ldr	r2, [pc, #280]	; (8008efc <UART_Start_Receive_IT+0x238>)
 8008de4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d01a      	beq.n	8008e24 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008df6:	e853 3f00 	ldrex	r3, [r3]
 8008dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008e10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e12:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e14:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e18:	e841 2300 	strex	r3, r2, [r1]
 8008e1c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d1e4      	bne.n	8008dee <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	3308      	adds	r3, #8
 8008e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e2e:	e853 3f00 	ldrex	r3, [r3]
 8008e32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	3308      	adds	r3, #8
 8008e42:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008e44:	64ba      	str	r2, [r7, #72]	; 0x48
 8008e46:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e48:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e4c:	e841 2300 	strex	r3, r2, [r1]
 8008e50:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1e5      	bne.n	8008e24 <UART_Start_Receive_IT+0x160>
 8008e58:	e046      	b.n	8008ee8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e62:	d107      	bne.n	8008e74 <UART_Start_Receive_IT+0x1b0>
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d103      	bne.n	8008e74 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	4a24      	ldr	r2, [pc, #144]	; (8008f00 <UART_Start_Receive_IT+0x23c>)
 8008e70:	675a      	str	r2, [r3, #116]	; 0x74
 8008e72:	e002      	b.n	8008e7a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	4a23      	ldr	r2, [pc, #140]	; (8008f04 <UART_Start_Receive_IT+0x240>)
 8008e78:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d019      	beq.n	8008eb6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8a:	e853 3f00 	ldrex	r3, [r3]
 8008e8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e92:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008e96:	677b      	str	r3, [r7, #116]	; 0x74
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ea2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ea8:	e841 2300 	strex	r3, r2, [r1]
 8008eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1e6      	bne.n	8008e82 <UART_Start_Receive_IT+0x1be>
 8008eb4:	e018      	b.n	8008ee8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	e853 3f00 	ldrex	r3, [r3]
 8008ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	f043 0320 	orr.w	r3, r3, #32
 8008eca:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ed4:	623b      	str	r3, [r7, #32]
 8008ed6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed8:	69f9      	ldr	r1, [r7, #28]
 8008eda:	6a3a      	ldr	r2, [r7, #32]
 8008edc:	e841 2300 	strex	r3, r2, [r1]
 8008ee0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1e6      	bne.n	8008eb6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	378c      	adds	r7, #140	; 0x8c
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	080098e1 	.word	0x080098e1
 8008efc:	08009581 	.word	0x08009581
 8008f00:	080093c9 	.word	0x080093c9
 8008f04:	08009211 	.word	0x08009211

08008f08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b08f      	sub	sp, #60	; 0x3c
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f16:	6a3b      	ldr	r3, [r7, #32]
 8008f18:	e853 3f00 	ldrex	r3, [r3]
 8008f1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008f24:	637b      	str	r3, [r7, #52]	; 0x34
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f30:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f36:	e841 2300 	strex	r3, r2, [r1]
 8008f3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1e6      	bne.n	8008f10 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	3308      	adds	r3, #8
 8008f48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	e853 3f00 	ldrex	r3, [r3]
 8008f50:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008f58:	633b      	str	r3, [r7, #48]	; 0x30
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	3308      	adds	r3, #8
 8008f60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f62:	61ba      	str	r2, [r7, #24]
 8008f64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f66:	6979      	ldr	r1, [r7, #20]
 8008f68:	69ba      	ldr	r2, [r7, #24]
 8008f6a:	e841 2300 	strex	r3, r2, [r1]
 8008f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1e5      	bne.n	8008f42 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2220      	movs	r2, #32
 8008f7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8008f7e:	bf00      	nop
 8008f80:	373c      	adds	r7, #60	; 0x3c
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f8a:	b480      	push	{r7}
 8008f8c:	b095      	sub	sp, #84	; 0x54
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f9a:	e853 3f00 	ldrex	r3, [r3]
 8008f9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	461a      	mov	r2, r3
 8008fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fb0:	643b      	str	r3, [r7, #64]	; 0x40
 8008fb2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fb8:	e841 2300 	strex	r3, r2, [r1]
 8008fbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1e6      	bne.n	8008f92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	3308      	adds	r3, #8
 8008fca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fcc:	6a3b      	ldr	r3, [r7, #32]
 8008fce:	e853 3f00 	ldrex	r3, [r3]
 8008fd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008fda:	f023 0301 	bic.w	r3, r3, #1
 8008fde:	64bb      	str	r3, [r7, #72]	; 0x48
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	3308      	adds	r3, #8
 8008fe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008fe8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ff0:	e841 2300 	strex	r3, r2, [r1]
 8008ff4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1e3      	bne.n	8008fc4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009000:	2b01      	cmp	r3, #1
 8009002:	d118      	bne.n	8009036 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	e853 3f00 	ldrex	r3, [r3]
 8009010:	60bb      	str	r3, [r7, #8]
   return(result);
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	f023 0310 	bic.w	r3, r3, #16
 8009018:	647b      	str	r3, [r7, #68]	; 0x44
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	461a      	mov	r2, r3
 8009020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009022:	61bb      	str	r3, [r7, #24]
 8009024:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009026:	6979      	ldr	r1, [r7, #20]
 8009028:	69ba      	ldr	r2, [r7, #24]
 800902a:	e841 2300 	strex	r3, r2, [r1]
 800902e:	613b      	str	r3, [r7, #16]
   return(result);
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1e6      	bne.n	8009004 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2220      	movs	r2, #32
 800903a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	675a      	str	r2, [r3, #116]	; 0x74
}
 800904a:	bf00      	nop
 800904c:	3754      	adds	r7, #84	; 0x54
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr

08009056 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009056:	b580      	push	{r7, lr}
 8009058:	b090      	sub	sp, #64	; 0x40
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009062:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 0320 	and.w	r3, r3, #32
 800906e:	2b00      	cmp	r3, #0
 8009070:	d137      	bne.n	80090e2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009074:	2200      	movs	r2, #0
 8009076:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800907a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	3308      	adds	r3, #8
 8009080:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009084:	e853 3f00 	ldrex	r3, [r3]
 8009088:	623b      	str	r3, [r7, #32]
   return(result);
 800908a:	6a3b      	ldr	r3, [r7, #32]
 800908c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009090:	63bb      	str	r3, [r7, #56]	; 0x38
 8009092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	3308      	adds	r3, #8
 8009098:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800909a:	633a      	str	r2, [r7, #48]	; 0x30
 800909c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090a2:	e841 2300 	strex	r3, r2, [r1]
 80090a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1e5      	bne.n	800907a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	e853 3f00 	ldrex	r3, [r3]
 80090ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090c2:	637b      	str	r3, [r7, #52]	; 0x34
 80090c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	461a      	mov	r2, r3
 80090ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090cc:	61fb      	str	r3, [r7, #28]
 80090ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d0:	69b9      	ldr	r1, [r7, #24]
 80090d2:	69fa      	ldr	r2, [r7, #28]
 80090d4:	e841 2300 	strex	r3, r2, [r1]
 80090d8:	617b      	str	r3, [r7, #20]
   return(result);
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d1e6      	bne.n	80090ae <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090e0:	e002      	b.n	80090e8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80090e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80090e4:	f7f9 fd24 	bl	8002b30 <HAL_UART_TxCpltCallback>
}
 80090e8:	bf00      	nop
 80090ea:	3740      	adds	r7, #64	; 0x40
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b084      	sub	sp, #16
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090fc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	f7ff f9de 	bl	80084c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009104:	bf00      	nop
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b086      	sub	sp, #24
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009118:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009120:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009128:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009134:	2b80      	cmp	r3, #128	; 0x80
 8009136:	d109      	bne.n	800914c <UART_DMAError+0x40>
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	2b21      	cmp	r3, #33	; 0x21
 800913c:	d106      	bne.n	800914c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	2200      	movs	r2, #0
 8009142:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009146:	6978      	ldr	r0, [r7, #20]
 8009148:	f7ff fede 	bl	8008f08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009156:	2b40      	cmp	r3, #64	; 0x40
 8009158:	d109      	bne.n	800916e <UART_DMAError+0x62>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2b22      	cmp	r3, #34	; 0x22
 800915e:	d106      	bne.n	800916e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	2200      	movs	r2, #0
 8009164:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009168:	6978      	ldr	r0, [r7, #20]
 800916a:	f7ff ff0e 	bl	8008f8a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009174:	f043 0210 	orr.w	r2, r3, #16
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800917e:	6978      	ldr	r0, [r7, #20]
 8009180:	f7ff f9a8 	bl	80084d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009184:	bf00      	nop
 8009186:	3718      	adds	r7, #24
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009198:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091aa:	68f8      	ldr	r0, [r7, #12]
 80091ac:	f7ff f992 	bl	80084d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091b0:	bf00      	nop
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b088      	sub	sp, #32
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	e853 3f00 	ldrex	r3, [r3]
 80091cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091d4:	61fb      	str	r3, [r7, #28]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	461a      	mov	r2, r3
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	61bb      	str	r3, [r7, #24]
 80091e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e2:	6979      	ldr	r1, [r7, #20]
 80091e4:	69ba      	ldr	r2, [r7, #24]
 80091e6:	e841 2300 	strex	r3, r2, [r1]
 80091ea:	613b      	str	r3, [r7, #16]
   return(result);
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1e6      	bne.n	80091c0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2220      	movs	r2, #32
 80091f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f7f9 fc95 	bl	8002b30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009206:	bf00      	nop
 8009208:	3720      	adds	r7, #32
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
	...

08009210 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b09c      	sub	sp, #112	; 0x70
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800921e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009228:	2b22      	cmp	r3, #34	; 0x22
 800922a:	f040 80be 	bne.w	80093aa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009234:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009238:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800923c:	b2d9      	uxtb	r1, r3
 800923e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009242:	b2da      	uxtb	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009248:	400a      	ands	r2, r1
 800924a:	b2d2      	uxtb	r2, r2
 800924c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009252:	1c5a      	adds	r2, r3, #1
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800925e:	b29b      	uxth	r3, r3
 8009260:	3b01      	subs	r3, #1
 8009262:	b29a      	uxth	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009270:	b29b      	uxth	r3, r3
 8009272:	2b00      	cmp	r3, #0
 8009274:	f040 80a1 	bne.w	80093ba <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009280:	e853 3f00 	ldrex	r3, [r3]
 8009284:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009288:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800928c:	66bb      	str	r3, [r7, #104]	; 0x68
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	461a      	mov	r2, r3
 8009294:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009296:	65bb      	str	r3, [r7, #88]	; 0x58
 8009298:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800929c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800929e:	e841 2300 	strex	r3, r2, [r1]
 80092a2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1e6      	bne.n	8009278 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	3308      	adds	r3, #8
 80092b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b4:	e853 3f00 	ldrex	r3, [r3]
 80092b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092bc:	f023 0301 	bic.w	r3, r3, #1
 80092c0:	667b      	str	r3, [r7, #100]	; 0x64
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	3308      	adds	r3, #8
 80092c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80092ca:	647a      	str	r2, [r7, #68]	; 0x44
 80092cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80092d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092d2:	e841 2300 	strex	r3, r2, [r1]
 80092d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80092d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d1e5      	bne.n	80092aa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2220      	movs	r2, #32
 80092e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a33      	ldr	r2, [pc, #204]	; (80093c4 <UART_RxISR_8BIT+0x1b4>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d01f      	beq.n	800933c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009306:	2b00      	cmp	r3, #0
 8009308:	d018      	beq.n	800933c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009312:	e853 3f00 	ldrex	r3, [r3]
 8009316:	623b      	str	r3, [r7, #32]
   return(result);
 8009318:	6a3b      	ldr	r3, [r7, #32]
 800931a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800931e:	663b      	str	r3, [r7, #96]	; 0x60
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	461a      	mov	r2, r3
 8009326:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009328:	633b      	str	r3, [r7, #48]	; 0x30
 800932a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800932e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009330:	e841 2300 	strex	r3, r2, [r1]
 8009334:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1e6      	bne.n	800930a <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009340:	2b01      	cmp	r3, #1
 8009342:	d12e      	bne.n	80093a2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2200      	movs	r2, #0
 8009348:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	e853 3f00 	ldrex	r3, [r3]
 8009356:	60fb      	str	r3, [r7, #12]
   return(result);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f023 0310 	bic.w	r3, r3, #16
 800935e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	461a      	mov	r2, r3
 8009366:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009368:	61fb      	str	r3, [r7, #28]
 800936a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800936c:	69b9      	ldr	r1, [r7, #24]
 800936e:	69fa      	ldr	r2, [r7, #28]
 8009370:	e841 2300 	strex	r3, r2, [r1]
 8009374:	617b      	str	r3, [r7, #20]
   return(result);
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d1e6      	bne.n	800934a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	69db      	ldr	r3, [r3, #28]
 8009382:	f003 0310 	and.w	r3, r3, #16
 8009386:	2b10      	cmp	r3, #16
 8009388:	d103      	bne.n	8009392 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2210      	movs	r2, #16
 8009390:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009398:	4619      	mov	r1, r3
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f7ff f8a4 	bl	80084e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093a0:	e00b      	b.n	80093ba <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f7f9 fb96 	bl	8002ad4 <HAL_UART_RxCpltCallback>
}
 80093a8:	e007      	b.n	80093ba <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	699a      	ldr	r2, [r3, #24]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f042 0208 	orr.w	r2, r2, #8
 80093b8:	619a      	str	r2, [r3, #24]
}
 80093ba:	bf00      	nop
 80093bc:	3770      	adds	r7, #112	; 0x70
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	40008000 	.word	0x40008000

080093c8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b09c      	sub	sp, #112	; 0x70
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80093d6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093e0:	2b22      	cmp	r3, #34	; 0x22
 80093e2:	f040 80be 	bne.w	8009562 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093f4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80093f6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80093fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80093fe:	4013      	ands	r3, r2
 8009400:	b29a      	uxth	r2, r3
 8009402:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009404:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800940a:	1c9a      	adds	r2, r3, #2
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009416:	b29b      	uxth	r3, r3
 8009418:	3b01      	subs	r3, #1
 800941a:	b29a      	uxth	r2, r3
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009428:	b29b      	uxth	r3, r3
 800942a:	2b00      	cmp	r3, #0
 800942c:	f040 80a1 	bne.w	8009572 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009438:	e853 3f00 	ldrex	r3, [r3]
 800943c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800943e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009440:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009444:	667b      	str	r3, [r7, #100]	; 0x64
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800944e:	657b      	str	r3, [r7, #84]	; 0x54
 8009450:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009452:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009454:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009456:	e841 2300 	strex	r3, r2, [r1]
 800945a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800945c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1e6      	bne.n	8009430 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	3308      	adds	r3, #8
 8009468:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800946c:	e853 3f00 	ldrex	r3, [r3]
 8009470:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009474:	f023 0301 	bic.w	r3, r3, #1
 8009478:	663b      	str	r3, [r7, #96]	; 0x60
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	3308      	adds	r3, #8
 8009480:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009482:	643a      	str	r2, [r7, #64]	; 0x40
 8009484:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009486:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009488:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800948a:	e841 2300 	strex	r3, r2, [r1]
 800948e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1e5      	bne.n	8009462 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2220      	movs	r2, #32
 800949a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a33      	ldr	r2, [pc, #204]	; (800957c <UART_RxISR_16BIT+0x1b4>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d01f      	beq.n	80094f4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d018      	beq.n	80094f4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c8:	6a3b      	ldr	r3, [r7, #32]
 80094ca:	e853 3f00 	ldrex	r3, [r3]
 80094ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80094d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	461a      	mov	r2, r3
 80094de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094e2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094e8:	e841 2300 	strex	r3, r2, [r1]
 80094ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d1e6      	bne.n	80094c2 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d12e      	bne.n	800955a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	e853 3f00 	ldrex	r3, [r3]
 800950e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	f023 0310 	bic.w	r3, r3, #16
 8009516:	65bb      	str	r3, [r7, #88]	; 0x58
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	461a      	mov	r2, r3
 800951e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009520:	61bb      	str	r3, [r7, #24]
 8009522:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009524:	6979      	ldr	r1, [r7, #20]
 8009526:	69ba      	ldr	r2, [r7, #24]
 8009528:	e841 2300 	strex	r3, r2, [r1]
 800952c:	613b      	str	r3, [r7, #16]
   return(result);
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1e6      	bne.n	8009502 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	69db      	ldr	r3, [r3, #28]
 800953a:	f003 0310 	and.w	r3, r3, #16
 800953e:	2b10      	cmp	r3, #16
 8009540:	d103      	bne.n	800954a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	2210      	movs	r2, #16
 8009548:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009550:	4619      	mov	r1, r3
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f7fe ffc8 	bl	80084e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009558:	e00b      	b.n	8009572 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f7f9 faba 	bl	8002ad4 <HAL_UART_RxCpltCallback>
}
 8009560:	e007      	b.n	8009572 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	699a      	ldr	r2, [r3, #24]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f042 0208 	orr.w	r2, r2, #8
 8009570:	619a      	str	r2, [r3, #24]
}
 8009572:	bf00      	nop
 8009574:	3770      	adds	r7, #112	; 0x70
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	40008000 	.word	0x40008000

08009580 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b0ac      	sub	sp, #176	; 0xb0
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800958e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	69db      	ldr	r3, [r3, #28]
 8009598:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095b6:	2b22      	cmp	r3, #34	; 0x22
 80095b8:	f040 8182 	bne.w	80098c0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80095c2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80095c6:	e125      	b.n	8009814 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ce:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80095d2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80095d6:	b2d9      	uxtb	r1, r3
 80095d8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80095dc:	b2da      	uxtb	r2, r3
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095e2:	400a      	ands	r2, r1
 80095e4:	b2d2      	uxtb	r2, r2
 80095e6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095ec:	1c5a      	adds	r2, r3, #1
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	3b01      	subs	r3, #1
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	69db      	ldr	r3, [r3, #28]
 800960a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800960e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009612:	f003 0307 	and.w	r3, r3, #7
 8009616:	2b00      	cmp	r3, #0
 8009618:	d053      	beq.n	80096c2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800961a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800961e:	f003 0301 	and.w	r3, r3, #1
 8009622:	2b00      	cmp	r3, #0
 8009624:	d011      	beq.n	800964a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009626:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800962a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00b      	beq.n	800964a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2201      	movs	r2, #1
 8009638:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009640:	f043 0201 	orr.w	r2, r3, #1
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800964a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800964e:	f003 0302 	and.w	r3, r3, #2
 8009652:	2b00      	cmp	r3, #0
 8009654:	d011      	beq.n	800967a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800965a:	f003 0301 	and.w	r3, r3, #1
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00b      	beq.n	800967a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2202      	movs	r2, #2
 8009668:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009670:	f043 0204 	orr.w	r2, r3, #4
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800967a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800967e:	f003 0304 	and.w	r3, r3, #4
 8009682:	2b00      	cmp	r3, #0
 8009684:	d011      	beq.n	80096aa <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009686:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800968a:	f003 0301 	and.w	r3, r3, #1
 800968e:	2b00      	cmp	r3, #0
 8009690:	d00b      	beq.n	80096aa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2204      	movs	r2, #4
 8009698:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096a0:	f043 0202 	orr.w	r2, r3, #2
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d006      	beq.n	80096c2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096b4:	6878      	ldr	r0, [r7, #4]
 80096b6:	f7fe ff0d 	bl	80084d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	f040 80a2 	bne.w	8009814 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096d8:	e853 3f00 	ldrex	r3, [r3]
 80096dc:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80096de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	461a      	mov	r2, r3
 80096ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80096f4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80096f8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80096fa:	e841 2300 	strex	r3, r2, [r1]
 80096fe:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8009700:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009702:	2b00      	cmp	r3, #0
 8009704:	d1e4      	bne.n	80096d0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	3308      	adds	r3, #8
 800970c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009710:	e853 3f00 	ldrex	r3, [r3]
 8009714:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009716:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800971c:	f023 0301 	bic.w	r3, r3, #1
 8009720:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	3308      	adds	r3, #8
 800972a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800972e:	66ba      	str	r2, [r7, #104]	; 0x68
 8009730:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009732:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009734:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009736:	e841 2300 	strex	r3, r2, [r1]
 800973a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800973c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800973e:	2b00      	cmp	r3, #0
 8009740:	d1e1      	bne.n	8009706 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2220      	movs	r2, #32
 8009746:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a5f      	ldr	r2, [pc, #380]	; (80098d8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d021      	beq.n	80097a4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800976a:	2b00      	cmp	r3, #0
 800976c:	d01a      	beq.n	80097a4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009776:	e853 3f00 	ldrex	r3, [r3]
 800977a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800977c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800977e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009782:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009790:	657b      	str	r3, [r7, #84]	; 0x54
 8009792:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009794:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009796:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009798:	e841 2300 	strex	r3, r2, [r1]
 800979c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800979e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1e4      	bne.n	800976e <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d130      	bne.n	800980e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ba:	e853 3f00 	ldrex	r3, [r3]
 80097be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80097c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c2:	f023 0310 	bic.w	r3, r3, #16
 80097c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	461a      	mov	r2, r3
 80097d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097d4:	643b      	str	r3, [r7, #64]	; 0x40
 80097d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80097da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80097dc:	e841 2300 	strex	r3, r2, [r1]
 80097e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80097e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d1e4      	bne.n	80097b2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	69db      	ldr	r3, [r3, #28]
 80097ee:	f003 0310 	and.w	r3, r3, #16
 80097f2:	2b10      	cmp	r3, #16
 80097f4:	d103      	bne.n	80097fe <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2210      	movs	r2, #16
 80097fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009804:	4619      	mov	r1, r3
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f7fe fe6e 	bl	80084e8 <HAL_UARTEx_RxEventCallback>
 800980c:	e002      	b.n	8009814 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f7f9 f960 	bl	8002ad4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009814:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8009818:	2b00      	cmp	r3, #0
 800981a:	d006      	beq.n	800982a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800981c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009820:	f003 0320 	and.w	r3, r3, #32
 8009824:	2b00      	cmp	r3, #0
 8009826:	f47f aecf 	bne.w	80095c8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009830:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009834:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009838:	2b00      	cmp	r3, #0
 800983a:	d049      	beq.n	80098d0 <UART_RxISR_8BIT_FIFOEN+0x350>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009842:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8009846:	429a      	cmp	r2, r3
 8009848:	d242      	bcs.n	80098d0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	3308      	adds	r3, #8
 8009850:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009852:	6a3b      	ldr	r3, [r7, #32]
 8009854:	e853 3f00 	ldrex	r3, [r3]
 8009858:	61fb      	str	r3, [r7, #28]
   return(result);
 800985a:	69fb      	ldr	r3, [r7, #28]
 800985c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	3308      	adds	r3, #8
 800986a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800986e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009870:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009872:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009876:	e841 2300 	strex	r3, r2, [r1]
 800987a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800987c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1e3      	bne.n	800984a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4a15      	ldr	r2, [pc, #84]	; (80098dc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009886:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	e853 3f00 	ldrex	r3, [r3]
 8009894:	60bb      	str	r3, [r7, #8]
   return(result);
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	f043 0320 	orr.w	r3, r3, #32
 800989c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	461a      	mov	r2, r3
 80098a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80098aa:	61bb      	str	r3, [r7, #24]
 80098ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ae:	6979      	ldr	r1, [r7, #20]
 80098b0:	69ba      	ldr	r2, [r7, #24]
 80098b2:	e841 2300 	strex	r3, r2, [r1]
 80098b6:	613b      	str	r3, [r7, #16]
   return(result);
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d1e4      	bne.n	8009888 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80098be:	e007      	b.n	80098d0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	699a      	ldr	r2, [r3, #24]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f042 0208 	orr.w	r2, r2, #8
 80098ce:	619a      	str	r2, [r3, #24]
}
 80098d0:	bf00      	nop
 80098d2:	37b0      	adds	r7, #176	; 0xb0
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	40008000 	.word	0x40008000
 80098dc:	08009211 	.word	0x08009211

080098e0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b0ae      	sub	sp, #184	; 0xb8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80098ee:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	69db      	ldr	r3, [r3, #28]
 80098f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009916:	2b22      	cmp	r3, #34	; 0x22
 8009918:	f040 8186 	bne.w	8009c28 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009922:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009926:	e129      	b.n	8009b7c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009936:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800993a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800993e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8009942:	4013      	ands	r3, r2
 8009944:	b29a      	uxth	r2, r3
 8009946:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800994a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009950:	1c9a      	adds	r2, r3, #2
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800995c:	b29b      	uxth	r3, r3
 800995e:	3b01      	subs	r3, #1
 8009960:	b29a      	uxth	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	69db      	ldr	r3, [r3, #28]
 800996e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009972:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009976:	f003 0307 	and.w	r3, r3, #7
 800997a:	2b00      	cmp	r3, #0
 800997c:	d053      	beq.n	8009a26 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800997e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009982:	f003 0301 	and.w	r3, r3, #1
 8009986:	2b00      	cmp	r3, #0
 8009988:	d011      	beq.n	80099ae <UART_RxISR_16BIT_FIFOEN+0xce>
 800998a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800998e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009992:	2b00      	cmp	r3, #0
 8009994:	d00b      	beq.n	80099ae <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	2201      	movs	r2, #1
 800999c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099a4:	f043 0201 	orr.w	r2, r3, #1
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80099b2:	f003 0302 	and.w	r3, r3, #2
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d011      	beq.n	80099de <UART_RxISR_16BIT_FIFOEN+0xfe>
 80099ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099be:	f003 0301 	and.w	r3, r3, #1
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d00b      	beq.n	80099de <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2202      	movs	r2, #2
 80099cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099d4:	f043 0204 	orr.w	r2, r3, #4
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80099de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80099e2:	f003 0304 	and.w	r3, r3, #4
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d011      	beq.n	8009a0e <UART_RxISR_16BIT_FIFOEN+0x12e>
 80099ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80099ee:	f003 0301 	and.w	r3, r3, #1
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00b      	beq.n	8009a0e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2204      	movs	r2, #4
 80099fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a04:	f043 0202 	orr.w	r2, r3, #2
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d006      	beq.n	8009a26 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f7fe fd5b 	bl	80084d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	f040 80a4 	bne.w	8009b7c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a3c:	e853 3f00 	ldrex	r3, [r3]
 8009a40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009a42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	461a      	mov	r2, r3
 8009a52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009a5a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009a5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009a62:	e841 2300 	strex	r3, r2, [r1]
 8009a66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009a68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d1e2      	bne.n	8009a34 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	3308      	adds	r3, #8
 8009a74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a78:	e853 3f00 	ldrex	r3, [r3]
 8009a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009a84:	f023 0301 	bic.w	r3, r3, #1
 8009a88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	3308      	adds	r3, #8
 8009a92:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8009a96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009a98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009a9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009a9e:	e841 2300 	strex	r3, r2, [r1]
 8009aa2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009aa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d1e1      	bne.n	8009a6e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2220      	movs	r2, #32
 8009aae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a5f      	ldr	r2, [pc, #380]	; (8009c40 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d021      	beq.n	8009b0c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d01a      	beq.n	8009b0c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ade:	e853 3f00 	ldrex	r3, [r3]
 8009ae2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ae6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009aea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	461a      	mov	r2, r3
 8009af4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009af8:	65bb      	str	r3, [r7, #88]	; 0x58
 8009afa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009afc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009afe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b00:	e841 2300 	strex	r3, r2, [r1]
 8009b04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d1e4      	bne.n	8009ad6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d130      	bne.n	8009b76 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b22:	e853 3f00 	ldrex	r3, [r3]
 8009b26:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b2a:	f023 0310 	bic.w	r3, r3, #16
 8009b2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	461a      	mov	r2, r3
 8009b38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b3c:	647b      	str	r3, [r7, #68]	; 0x44
 8009b3e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b44:	e841 2300 	strex	r3, r2, [r1]
 8009b48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1e4      	bne.n	8009b1a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	69db      	ldr	r3, [r3, #28]
 8009b56:	f003 0310 	and.w	r3, r3, #16
 8009b5a:	2b10      	cmp	r3, #16
 8009b5c:	d103      	bne.n	8009b66 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2210      	movs	r2, #16
 8009b64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	6878      	ldr	r0, [r7, #4]
 8009b70:	f7fe fcba 	bl	80084e8 <HAL_UARTEx_RxEventCallback>
 8009b74:	e002      	b.n	8009b7c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f7f8 ffac 	bl	8002ad4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009b7c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d006      	beq.n	8009b92 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009b84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009b88:	f003 0320 	and.w	r3, r3, #32
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f47f aecb 	bne.w	8009928 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b98:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009b9c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d049      	beq.n	8009c38 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009baa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d242      	bcs.n	8009c38 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	3308      	adds	r3, #8
 8009bb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbc:	e853 3f00 	ldrex	r3, [r3]
 8009bc0:	623b      	str	r3, [r7, #32]
   return(result);
 8009bc2:	6a3b      	ldr	r3, [r7, #32]
 8009bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	3308      	adds	r3, #8
 8009bd2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8009bd6:	633a      	str	r2, [r7, #48]	; 0x30
 8009bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bde:	e841 2300 	strex	r3, r2, [r1]
 8009be2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d1e3      	bne.n	8009bb2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4a15      	ldr	r2, [pc, #84]	; (8009c44 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009bee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	e853 3f00 	ldrex	r3, [r3]
 8009bfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f043 0320 	orr.w	r3, r3, #32
 8009c04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009c12:	61fb      	str	r3, [r7, #28]
 8009c14:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c16:	69b9      	ldr	r1, [r7, #24]
 8009c18:	69fa      	ldr	r2, [r7, #28]
 8009c1a:	e841 2300 	strex	r3, r2, [r1]
 8009c1e:	617b      	str	r3, [r7, #20]
   return(result);
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d1e4      	bne.n	8009bf0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009c26:	e007      	b.n	8009c38 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	699a      	ldr	r2, [r3, #24]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f042 0208 	orr.w	r2, r2, #8
 8009c36:	619a      	str	r2, [r3, #24]
}
 8009c38:	bf00      	nop
 8009c3a:	37b8      	adds	r7, #184	; 0xb8
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	40008000 	.word	0x40008000
 8009c44:	080093c9 	.word	0x080093c9

08009c48 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009c50:	bf00      	nop
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009c64:	bf00      	nop
 8009c66:	370c      	adds	r7, #12
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009c78:	bf00      	nop
 8009c7a:	370c      	adds	r7, #12
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009c92:	2b01      	cmp	r3, #1
 8009c94:	d101      	bne.n	8009c9a <HAL_UARTEx_DisableFifoMode+0x16>
 8009c96:	2302      	movs	r3, #2
 8009c98:	e027      	b.n	8009cea <HAL_UARTEx_DisableFifoMode+0x66>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2224      	movs	r2, #36	; 0x24
 8009ca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f022 0201 	bic.w	r2, r2, #1
 8009cc0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009cc8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	68fa      	ldr	r2, [r7, #12]
 8009cd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2220      	movs	r2, #32
 8009cdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009ce8:	2300      	movs	r3, #0
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3714      	adds	r7, #20
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b084      	sub	sp, #16
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
 8009cfe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d101      	bne.n	8009d0e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d0a:	2302      	movs	r3, #2
 8009d0c:	e02d      	b.n	8009d6a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2201      	movs	r2, #1
 8009d12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2224      	movs	r2, #36	; 0x24
 8009d1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f022 0201 	bic.w	r2, r2, #1
 8009d34:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	683a      	ldr	r2, [r7, #0]
 8009d46:	430a      	orrs	r2, r1
 8009d48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f850 	bl	8009df0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2220      	movs	r2, #32
 8009d5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3710      	adds	r7, #16
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	bd80      	pop	{r7, pc}

08009d72 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b084      	sub	sp, #16
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
 8009d7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d101      	bne.n	8009d8a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009d86:	2302      	movs	r3, #2
 8009d88:	e02d      	b.n	8009de6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2224      	movs	r2, #36	; 0x24
 8009d96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f022 0201 	bic.w	r2, r2, #1
 8009db0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	683a      	ldr	r2, [r7, #0]
 8009dc2:	430a      	orrs	r2, r1
 8009dc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 f812 	bl	8009df0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	68fa      	ldr	r2, [r7, #12]
 8009dd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2220      	movs	r2, #32
 8009dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
	...

08009df0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d108      	bne.n	8009e12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e10:	e031      	b.n	8009e76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e12:	2308      	movs	r3, #8
 8009e14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e16:	2308      	movs	r3, #8
 8009e18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	0e5b      	lsrs	r3, r3, #25
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	f003 0307 	and.w	r3, r3, #7
 8009e28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	0f5b      	lsrs	r3, r3, #29
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	f003 0307 	and.w	r3, r3, #7
 8009e38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e3a:	7bbb      	ldrb	r3, [r7, #14]
 8009e3c:	7b3a      	ldrb	r2, [r7, #12]
 8009e3e:	4911      	ldr	r1, [pc, #68]	; (8009e84 <UARTEx_SetNbDataToProcess+0x94>)
 8009e40:	5c8a      	ldrb	r2, [r1, r2]
 8009e42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009e46:	7b3a      	ldrb	r2, [r7, #12]
 8009e48:	490f      	ldr	r1, [pc, #60]	; (8009e88 <UARTEx_SetNbDataToProcess+0x98>)
 8009e4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e58:	7bfb      	ldrb	r3, [r7, #15]
 8009e5a:	7b7a      	ldrb	r2, [r7, #13]
 8009e5c:	4909      	ldr	r1, [pc, #36]	; (8009e84 <UARTEx_SetNbDataToProcess+0x94>)
 8009e5e:	5c8a      	ldrb	r2, [r1, r2]
 8009e60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009e64:	7b7a      	ldrb	r2, [r7, #13]
 8009e66:	4908      	ldr	r1, [pc, #32]	; (8009e88 <UARTEx_SetNbDataToProcess+0x98>)
 8009e68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009e76:	bf00      	nop
 8009e78:	3714      	adds	r7, #20
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	080110b8 	.word	0x080110b8
 8009e88:	080110c0 	.word	0x080110c0

08009e8c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b088      	sub	sp, #32
 8009e90:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009e92:	2300      	movs	r3, #0
 8009e94:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009e96:	f107 0308 	add.w	r3, r7, #8
 8009e9a:	2218      	movs	r2, #24
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f001 fa49 	bl	800b336 <Osal_MemSet>
  rq.ogf = 0x3f;
 8009ea4:	233f      	movs	r3, #63	; 0x3f
 8009ea6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8009ea8:	2381      	movs	r3, #129	; 0x81
 8009eaa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009eac:	1dfb      	adds	r3, r7, #7
 8009eae:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009eb4:	f107 0308 	add.w	r3, r7, #8
 8009eb8:	2100      	movs	r1, #0
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f001 fdf2 	bl	800baa4 <hci_send_req>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	da01      	bge.n	8009eca <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009ec6:	23ff      	movs	r3, #255	; 0xff
 8009ec8:	e000      	b.n	8009ecc <aci_gap_set_non_discoverable+0x40>
  return status;
 8009eca:	79fb      	ldrb	r3, [r7, #7]
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3720      	adds	r7, #32
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8009ed4:	b5b0      	push	{r4, r5, r7, lr}
 8009ed6:	b0ce      	sub	sp, #312	; 0x138
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	4605      	mov	r5, r0
 8009edc:	460c      	mov	r4, r1
 8009ede:	4610      	mov	r0, r2
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009ee6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009eea:	462a      	mov	r2, r5
 8009eec:	701a      	strb	r2, [r3, #0]
 8009eee:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009ef2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009ef6:	4622      	mov	r2, r4
 8009ef8:	801a      	strh	r2, [r3, #0]
 8009efa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009efe:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8009f02:	4602      	mov	r2, r0
 8009f04:	801a      	strh	r2, [r3, #0]
 8009f06:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009f0a:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009f0e:	460a      	mov	r2, r1
 8009f10:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8009f12:	f107 0310 	add.w	r3, r7, #16
 8009f16:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8009f1a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8009f1e:	3308      	adds	r3, #8
 8009f20:	f107 0210 	add.w	r2, r7, #16
 8009f24:	4413      	add	r3, r2
 8009f26:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8009f2a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009f2e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8009f32:	4413      	add	r3, r2
 8009f34:	3309      	adds	r3, #9
 8009f36:	f107 0210 	add.w	r2, r7, #16
 8009f3a:	4413      	add	r3, r2
 8009f3c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009f40:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009f44:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009f48:	2200      	movs	r2, #0
 8009f4a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8009f52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009f56:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009f5a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8009f5e:	7812      	ldrb	r2, [r2, #0]
 8009f60:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009f62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f66:	3301      	adds	r3, #1
 8009f68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8009f6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009f70:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009f74:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009f78:	8812      	ldrh	r2, [r2, #0]
 8009f7a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8009f7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f82:	3302      	adds	r3, #2
 8009f84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8009f88:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009f8c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009f90:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8009f94:	8812      	ldrh	r2, [r2, #0]
 8009f96:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8009f9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009f9e:	3302      	adds	r3, #2
 8009fa0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8009fa4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009fa8:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009fac:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009fb0:	7812      	ldrb	r2, [r2, #0]
 8009fb2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009fb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009fb8:	3301      	adds	r3, #1
 8009fba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8009fbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009fc2:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8009fc6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009fc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009fcc:	3301      	adds	r3, #1
 8009fce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8009fd2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009fd6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009fda:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8009fdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8009fe6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009fea:	3308      	adds	r3, #8
 8009fec:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8009ff0:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f001 f98e 	bl	800b316 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8009ffa:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8009ffe:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a002:	4413      	add	r3, r2
 800a004:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800a008:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a00c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800a010:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800a012:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a016:	3301      	adds	r3, #1
 800a018:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800a01c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a020:	3301      	adds	r3, #1
 800a022:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800a026:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800a02a:	4618      	mov	r0, r3
 800a02c:	f001 f973 	bl	800b316 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800a030:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800a034:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a038:	4413      	add	r3, r2
 800a03a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800a03e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a042:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800a046:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800a048:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a04c:	3302      	adds	r3, #2
 800a04e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800a052:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a056:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800a05a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800a05c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a060:	3302      	adds	r3, #2
 800a062:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a066:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a06a:	2218      	movs	r2, #24
 800a06c:	2100      	movs	r1, #0
 800a06e:	4618      	mov	r0, r3
 800a070:	f001 f961 	bl	800b336 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a074:	233f      	movs	r3, #63	; 0x3f
 800a076:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800a07a:	2383      	movs	r3, #131	; 0x83
 800a07c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a080:	f107 0310 	add.w	r3, r7, #16
 800a084:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a088:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a08c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a090:	f107 030f 	add.w	r3, r7, #15
 800a094:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a098:	2301      	movs	r3, #1
 800a09a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a09e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a0a2:	2100      	movs	r1, #0
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	f001 fcfd 	bl	800baa4 <hci_send_req>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	da01      	bge.n	800a0b4 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800a0b0:	23ff      	movs	r3, #255	; 0xff
 800a0b2:	e004      	b.n	800a0be <aci_gap_set_discoverable+0x1ea>
  return status;
 800a0b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a0b8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a0bc:	781b      	ldrb	r3, [r3, #0]
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bdb0      	pop	{r4, r5, r7, pc}

0800a0c8 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b0cc      	sub	sp, #304	; 0x130
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0d4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a0d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800a0da:	f107 0310 	add.w	r3, r7, #16
 800a0de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a0e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0e6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800a0f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a0f8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a0fc:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a100:	7812      	ldrb	r2, [r2, #0]
 800a102:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a104:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a108:	3301      	adds	r3, #1
 800a10a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a10e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a112:	2218      	movs	r2, #24
 800a114:	2100      	movs	r1, #0
 800a116:	4618      	mov	r0, r3
 800a118:	f001 f90d 	bl	800b336 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a11c:	233f      	movs	r3, #63	; 0x3f
 800a11e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800a122:	2385      	movs	r3, #133	; 0x85
 800a124:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a128:	f107 0310 	add.w	r3, r7, #16
 800a12c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a130:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a134:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a138:	f107 030f 	add.w	r3, r7, #15
 800a13c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a140:	2301      	movs	r3, #1
 800a142:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a146:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a14a:	2100      	movs	r1, #0
 800a14c:	4618      	mov	r0, r3
 800a14e:	f001 fca9 	bl	800baa4 <hci_send_req>
 800a152:	4603      	mov	r3, r0
 800a154:	2b00      	cmp	r3, #0
 800a156:	da01      	bge.n	800a15c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800a158:	23ff      	movs	r3, #255	; 0xff
 800a15a:	e004      	b.n	800a166 <aci_gap_set_io_capability+0x9e>
  return status;
 800a15c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a160:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a164:	781b      	ldrb	r3, [r3, #0]
}
 800a166:	4618      	mov	r0, r3
 800a168:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800a170:	b5b0      	push	{r4, r5, r7, lr}
 800a172:	b0cc      	sub	sp, #304	; 0x130
 800a174:	af00      	add	r7, sp, #0
 800a176:	4605      	mov	r5, r0
 800a178:	460c      	mov	r4, r1
 800a17a:	4610      	mov	r0, r2
 800a17c:	4619      	mov	r1, r3
 800a17e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a182:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a186:	462a      	mov	r2, r5
 800a188:	701a      	strb	r2, [r3, #0]
 800a18a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a18e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a192:	4622      	mov	r2, r4
 800a194:	701a      	strb	r2, [r3, #0]
 800a196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a19a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800a19e:	4602      	mov	r2, r0
 800a1a0:	701a      	strb	r2, [r3, #0]
 800a1a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1aa:	460a      	mov	r2, r1
 800a1ac:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800a1ae:	f107 0310 	add.w	r3, r7, #16
 800a1b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a1b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1ba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a1be:	2200      	movs	r2, #0
 800a1c0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800a1c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a1d0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a1d4:	7812      	ldrb	r2, [r2, #0]
 800a1d6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a1d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a1dc:	3301      	adds	r3, #1
 800a1de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800a1e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a1ea:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a1ee:	7812      	ldrb	r2, [r2, #0]
 800a1f0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a1f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800a1fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a200:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a204:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800a208:	7812      	ldrb	r2, [r2, #0]
 800a20a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a20c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a210:	3301      	adds	r3, #1
 800a212:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800a216:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a21a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a21e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a222:	7812      	ldrb	r2, [r2, #0]
 800a224:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800a226:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a22a:	3301      	adds	r3, #1
 800a22c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800a230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a234:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800a238:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800a23a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a23e:	3301      	adds	r3, #1
 800a240:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800a244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a248:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800a24c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800a24e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a252:	3301      	adds	r3, #1
 800a254:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800a258:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a25c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800a260:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800a262:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a266:	3301      	adds	r3, #1
 800a268:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800a26c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a270:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800a274:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800a278:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a27c:	3304      	adds	r3, #4
 800a27e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800a282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a286:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800a28a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800a28c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a290:	3301      	adds	r3, #1
 800a292:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a296:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a29a:	2218      	movs	r2, #24
 800a29c:	2100      	movs	r1, #0
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f001 f849 	bl	800b336 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a2a4:	233f      	movs	r3, #63	; 0x3f
 800a2a6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800a2aa:	2386      	movs	r3, #134	; 0x86
 800a2ac:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a2b0:	f107 0310 	add.w	r3, r7, #16
 800a2b4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a2b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a2bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a2c0:	f107 030f 	add.w	r3, r7, #15
 800a2c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a2ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f001 fbe5 	bl	800baa4 <hci_send_req>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	da01      	bge.n	800a2e4 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800a2e0:	23ff      	movs	r3, #255	; 0xff
 800a2e2:	e004      	b.n	800a2ee <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800a2e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2e8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a2ec:	781b      	ldrb	r3, [r3, #0]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bdb0      	pop	{r4, r5, r7, pc}

0800a2f8 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b0cc      	sub	sp, #304	; 0x130
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	4602      	mov	r2, r0
 800a300:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a304:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a308:	6019      	str	r1, [r3, #0]
 800a30a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a30e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a312:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800a314:	f107 0310 	add.w	r3, r7, #16
 800a318:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a31c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a320:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a324:	2200      	movs	r2, #0
 800a326:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a328:	2300      	movs	r3, #0
 800a32a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a32e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a332:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a336:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a33a:	8812      	ldrh	r2, [r2, #0]
 800a33c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a33e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a342:	3302      	adds	r3, #2
 800a344:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800a348:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a34c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a350:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800a354:	6812      	ldr	r2, [r2, #0]
 800a356:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800a35a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a35e:	3304      	adds	r3, #4
 800a360:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a364:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a368:	2218      	movs	r2, #24
 800a36a:	2100      	movs	r1, #0
 800a36c:	4618      	mov	r0, r3
 800a36e:	f000 ffe2 	bl	800b336 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a372:	233f      	movs	r3, #63	; 0x3f
 800a374:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800a378:	2388      	movs	r3, #136	; 0x88
 800a37a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a37e:	f107 0310 	add.w	r3, r7, #16
 800a382:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a386:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a38a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a38e:	f107 030f 	add.w	r3, r7, #15
 800a392:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a396:	2301      	movs	r3, #1
 800a398:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a39c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a3a0:	2100      	movs	r1, #0
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f001 fb7e 	bl	800baa4 <hci_send_req>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	da01      	bge.n	800a3b2 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800a3ae:	23ff      	movs	r3, #255	; 0xff
 800a3b0:	e004      	b.n	800a3bc <aci_gap_pass_key_resp+0xc4>
  return status;
 800a3b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3b6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a3ba:	781b      	ldrb	r3, [r3, #0]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}

0800a3c6 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800a3c6:	b590      	push	{r4, r7, lr}
 800a3c8:	b0cd      	sub	sp, #308	; 0x134
 800a3ca:	af00      	add	r7, sp, #0
 800a3cc:	4604      	mov	r4, r0
 800a3ce:	4608      	mov	r0, r1
 800a3d0:	4611      	mov	r1, r2
 800a3d2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a3d6:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800a3da:	6013      	str	r3, [r2, #0]
 800a3dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3e0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a3e4:	4622      	mov	r2, r4
 800a3e6:	701a      	strb	r2, [r3, #0]
 800a3e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3ec:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a3f0:	4602      	mov	r2, r0
 800a3f2:	701a      	strb	r2, [r3, #0]
 800a3f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3f8:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800a3fc:	460a      	mov	r2, r1
 800a3fe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800a400:	f107 0310 	add.w	r3, r7, #16
 800a404:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a408:	f107 0308 	add.w	r3, r7, #8
 800a40c:	2207      	movs	r2, #7
 800a40e:	2100      	movs	r1, #0
 800a410:	4618      	mov	r0, r3
 800a412:	f000 ff90 	bl	800b336 <Osal_MemSet>
  int index_input = 0;
 800a416:	2300      	movs	r3, #0
 800a418:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800a41c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a420:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a424:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a428:	7812      	ldrb	r2, [r2, #0]
 800a42a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a42c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a430:	3301      	adds	r3, #1
 800a432:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800a436:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a43a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a43e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a442:	7812      	ldrb	r2, [r2, #0]
 800a444:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800a446:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a44a:	3301      	adds	r3, #1
 800a44c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800a450:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a454:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a458:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800a45c:	7812      	ldrb	r2, [r2, #0]
 800a45e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a460:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a464:	3301      	adds	r3, #1
 800a466:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a46a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a46e:	2218      	movs	r2, #24
 800a470:	2100      	movs	r1, #0
 800a472:	4618      	mov	r0, r3
 800a474:	f000 ff5f 	bl	800b336 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a478:	233f      	movs	r3, #63	; 0x3f
 800a47a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800a47e:	238a      	movs	r3, #138	; 0x8a
 800a480:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a484:	f107 0310 	add.w	r3, r7, #16
 800a488:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a48c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a490:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800a494:	f107 0308 	add.w	r3, r7, #8
 800a498:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800a49c:	2307      	movs	r3, #7
 800a49e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a4a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a4a6:	2100      	movs	r1, #0
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f001 fafb 	bl	800baa4 <hci_send_req>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	da01      	bge.n	800a4b8 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800a4b4:	23ff      	movs	r3, #255	; 0xff
 800a4b6:	e02e      	b.n	800a516 <aci_gap_init+0x150>
  if ( resp.Status )
 800a4b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4bc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a4c0:	781b      	ldrb	r3, [r3, #0]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d005      	beq.n	800a4d2 <aci_gap_init+0x10c>
    return resp.Status;
 800a4c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	e021      	b.n	800a516 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800a4d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a4da:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800a4ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4f0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a4f4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800a4fe:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800a500:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a504:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800a508:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800a50c:	b29a      	uxth	r2, r3
 800a50e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800a512:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a514:	2300      	movs	r3, #0
}
 800a516:	4618      	mov	r0, r3
 800a518:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd90      	pop	{r4, r7, pc}

0800a520 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b0cc      	sub	sp, #304	; 0x130
 800a524:	af00      	add	r7, sp, #0
 800a526:	4602      	mov	r2, r0
 800a528:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a52c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a530:	6019      	str	r1, [r3, #0]
 800a532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a536:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a53a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800a53c:	f107 0310 	add.w	r3, r7, #16
 800a540:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a548:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a54c:	2200      	movs	r2, #0
 800a54e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a550:	2300      	movs	r3, #0
 800a552:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800a556:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a55a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a55e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800a562:	7812      	ldrb	r2, [r2, #0]
 800a564:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a566:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a56a:	3301      	adds	r3, #1
 800a56c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800a570:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a574:	1c58      	adds	r0, r3, #1
 800a576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a57a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a57e:	781a      	ldrb	r2, [r3, #0]
 800a580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a584:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a588:	6819      	ldr	r1, [r3, #0]
 800a58a:	f000 fec4 	bl	800b316 <Osal_MemCpy>
  index_input += AdvDataLen;
 800a58e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a592:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a59c:	4413      	add	r3, r2
 800a59e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a5a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a5a6:	2218      	movs	r2, #24
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f000 fec3 	bl	800b336 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a5b0:	233f      	movs	r3, #63	; 0x3f
 800a5b2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800a5b6:	238e      	movs	r3, #142	; 0x8e
 800a5b8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a5bc:	f107 0310 	add.w	r3, r7, #16
 800a5c0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a5c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a5c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a5cc:	f107 030f 	add.w	r3, r7, #15
 800a5d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a5da:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a5de:	2100      	movs	r1, #0
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f001 fa5f 	bl	800baa4 <hci_send_req>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	da01      	bge.n	800a5f0 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800a5ec:	23ff      	movs	r3, #255	; 0xff
 800a5ee:	e004      	b.n	800a5fa <aci_gap_update_adv_data+0xda>
  return status;
 800a5f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5f4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a5f8:	781b      	ldrb	r3, [r3, #0]
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b088      	sub	sp, #32
 800a608:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a60a:	2300      	movs	r3, #0
 800a60c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a60e:	f107 0308 	add.w	r3, r7, #8
 800a612:	2218      	movs	r2, #24
 800a614:	2100      	movs	r1, #0
 800a616:	4618      	mov	r0, r3
 800a618:	f000 fe8d 	bl	800b336 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a61c:	233f      	movs	r3, #63	; 0x3f
 800a61e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800a620:	2392      	movs	r3, #146	; 0x92
 800a622:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a624:	1dfb      	adds	r3, r7, #7
 800a626:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a628:	2301      	movs	r3, #1
 800a62a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a62c:	f107 0308 	add.w	r3, r7, #8
 800a630:	2100      	movs	r1, #0
 800a632:	4618      	mov	r0, r3
 800a634:	f001 fa36 	bl	800baa4 <hci_send_req>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	da01      	bge.n	800a642 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800a63e:	23ff      	movs	r3, #255	; 0xff
 800a640:	e000      	b.n	800a644 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800a642:	79fb      	ldrb	r3, [r7, #7]
}
 800a644:	4618      	mov	r0, r3
 800a646:	3720      	adds	r7, #32
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b0cc      	sub	sp, #304	; 0x130
 800a650:	af00      	add	r7, sp, #0
 800a652:	4602      	mov	r2, r0
 800a654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a658:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a65c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 800a65e:	f107 0310 	add.w	r3, r7, #16
 800a662:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a66a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a66e:	2200      	movs	r2, #0
 800a670:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a672:	2300      	movs	r3, #0
 800a674:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a678:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a67c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a680:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a684:	8812      	ldrh	r2, [r2, #0]
 800a686:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a688:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a68c:	3302      	adds	r3, #2
 800a68e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a692:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a696:	2218      	movs	r2, #24
 800a698:	2100      	movs	r1, #0
 800a69a:	4618      	mov	r0, r3
 800a69c:	f000 fe4b 	bl	800b336 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a6a0:	233f      	movs	r3, #63	; 0x3f
 800a6a2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 800a6a6:	2395      	movs	r3, #149	; 0x95
 800a6a8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a6ac:	f107 0310 	add.w	r3, r7, #16
 800a6b0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a6b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a6b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a6bc:	f107 030f 	add.w	r3, r7, #15
 800a6c0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a6ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a6ce:	2100      	movs	r1, #0
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f001 f9e7 	bl	800baa4 <hci_send_req>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	da01      	bge.n	800a6e0 <aci_gap_allow_rebond+0x94>
    return BLE_STATUS_TIMEOUT;
 800a6dc:	23ff      	movs	r3, #255	; 0xff
 800a6de:	e004      	b.n	800a6ea <aci_gap_allow_rebond+0x9e>
  return status;
 800a6e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6e4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a6e8:	781b      	ldrb	r3, [r3, #0]
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b0cc      	sub	sp, #304	; 0x130
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a700:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800a704:	801a      	strh	r2, [r3, #0]
 800a706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a70a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800a70e:	460a      	mov	r2, r1
 800a710:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800a712:	f107 0310 	add.w	r3, r7, #16
 800a716:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800a71a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a71e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a722:	2200      	movs	r2, #0
 800a724:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800a726:	2300      	movs	r3, #0
 800a728:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800a72c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a730:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a734:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800a738:	8812      	ldrh	r2, [r2, #0]
 800a73a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800a73c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a740:	3302      	adds	r3, #2
 800a742:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800a746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a74a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a74e:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800a752:	7812      	ldrb	r2, [r2, #0]
 800a754:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800a756:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a75a:	3301      	adds	r3, #1
 800a75c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a760:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a764:	2218      	movs	r2, #24
 800a766:	2100      	movs	r1, #0
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 fde4 	bl	800b336 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a76e:	233f      	movs	r3, #63	; 0x3f
 800a770:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800a774:	23a5      	movs	r3, #165	; 0xa5
 800a776:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a77a:	f107 0310 	add.w	r3, r7, #16
 800a77e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a782:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a786:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800a78a:	f107 030f 	add.w	r3, r7, #15
 800a78e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800a792:	2301      	movs	r3, #1
 800a794:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a798:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a79c:	2100      	movs	r1, #0
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f001 f980 	bl	800baa4 <hci_send_req>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	da01      	bge.n	800a7ae <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800a7aa:	23ff      	movs	r3, #255	; 0xff
 800a7ac:	e004      	b.n	800a7b8 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800a7ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7b2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800a7b6:	781b      	ldrb	r3, [r3, #0]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b088      	sub	sp, #32
 800a7c6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a7cc:	f107 0308 	add.w	r3, r7, #8
 800a7d0:	2218      	movs	r2, #24
 800a7d2:	2100      	movs	r1, #0
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f000 fdae 	bl	800b336 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a7da:	233f      	movs	r3, #63	; 0x3f
 800a7dc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800a7de:	f240 1301 	movw	r3, #257	; 0x101
 800a7e2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800a7e4:	1dfb      	adds	r3, r7, #7
 800a7e6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a7ec:	f107 0308 	add.w	r3, r7, #8
 800a7f0:	2100      	movs	r1, #0
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f001 f956 	bl	800baa4 <hci_send_req>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	da01      	bge.n	800a802 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800a7fe:	23ff      	movs	r3, #255	; 0xff
 800a800:	e000      	b.n	800a804 <aci_gatt_init+0x42>
  return status;
 800a802:	79fb      	ldrb	r3, [r7, #7]
}
 800a804:	4618      	mov	r0, r3
 800a806:	3720      	adds	r7, #32
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800a80c:	b590      	push	{r4, r7, lr}
 800a80e:	b0cf      	sub	sp, #316	; 0x13c
 800a810:	af00      	add	r7, sp, #0
 800a812:	4604      	mov	r4, r0
 800a814:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800a818:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800a81c:	6001      	str	r1, [r0, #0]
 800a81e:	4610      	mov	r0, r2
 800a820:	4619      	mov	r1, r3
 800a822:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a826:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800a82a:	4622      	mov	r2, r4
 800a82c:	701a      	strb	r2, [r3, #0]
 800a82e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a832:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800a836:	4602      	mov	r2, r0
 800a838:	701a      	strb	r2, [r3, #0]
 800a83a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a83e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800a842:	460a      	mov	r2, r1
 800a844:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800a846:	f107 0310 	add.w	r3, r7, #16
 800a84a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800a84e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a852:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	2b01      	cmp	r3, #1
 800a85a:	d00a      	beq.n	800a872 <aci_gatt_add_service+0x66>
 800a85c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a860:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	2b02      	cmp	r3, #2
 800a868:	d101      	bne.n	800a86e <aci_gatt_add_service+0x62>
 800a86a:	2311      	movs	r3, #17
 800a86c:	e002      	b.n	800a874 <aci_gatt_add_service+0x68>
 800a86e:	2301      	movs	r3, #1
 800a870:	e000      	b.n	800a874 <aci_gatt_add_service+0x68>
 800a872:	2303      	movs	r3, #3
 800a874:	f107 0210 	add.w	r2, r7, #16
 800a878:	4413      	add	r3, r2
 800a87a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800a87e:	f107 030c 	add.w	r3, r7, #12
 800a882:	2203      	movs	r2, #3
 800a884:	2100      	movs	r1, #0
 800a886:	4618      	mov	r0, r3
 800a888:	f000 fd55 	bl	800b336 <Osal_MemSet>
  int index_input = 0;
 800a88c:	2300      	movs	r3, #0
 800a88e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800a892:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a896:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a89a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800a89e:	7812      	ldrb	r2, [r2, #0]
 800a8a0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800a8a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800a8ac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a8b0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d002      	beq.n	800a8c0 <aci_gatt_add_service+0xb4>
 800a8ba:	2b02      	cmp	r3, #2
 800a8bc:	d004      	beq.n	800a8c8 <aci_gatt_add_service+0xbc>
 800a8be:	e007      	b.n	800a8d0 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800a8c0:	2302      	movs	r3, #2
 800a8c2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800a8c6:	e005      	b.n	800a8d4 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800a8c8:	2310      	movs	r3, #16
 800a8ca:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800a8ce:	e001      	b.n	800a8d4 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800a8d0:	2397      	movs	r3, #151	; 0x97
 800a8d2:	e06c      	b.n	800a9ae <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800a8d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800a8d8:	1c58      	adds	r0, r3, #1
 800a8da:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800a8de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a8e2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a8e6:	6819      	ldr	r1, [r3, #0]
 800a8e8:	f000 fd15 	bl	800b316 <Osal_MemCpy>
    index_input += size;
 800a8ec:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800a8f0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a8f4:	4413      	add	r3, r2
 800a8f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800a8fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8fe:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a902:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800a906:	7812      	ldrb	r2, [r2, #0]
 800a908:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800a90a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a90e:	3301      	adds	r3, #1
 800a910:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800a914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a918:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800a91c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800a920:	7812      	ldrb	r2, [r2, #0]
 800a922:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800a924:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a928:	3301      	adds	r3, #1
 800a92a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800a92e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a932:	2218      	movs	r2, #24
 800a934:	2100      	movs	r1, #0
 800a936:	4618      	mov	r0, r3
 800a938:	f000 fcfd 	bl	800b336 <Osal_MemSet>
  rq.ogf = 0x3f;
 800a93c:	233f      	movs	r3, #63	; 0x3f
 800a93e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800a942:	f44f 7381 	mov.w	r3, #258	; 0x102
 800a946:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800a94a:	f107 0310 	add.w	r3, r7, #16
 800a94e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800a952:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a956:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800a95a:	f107 030c 	add.w	r3, r7, #12
 800a95e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800a962:	2303      	movs	r3, #3
 800a964:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800a968:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a96c:	2100      	movs	r1, #0
 800a96e:	4618      	mov	r0, r3
 800a970:	f001 f898 	bl	800baa4 <hci_send_req>
 800a974:	4603      	mov	r3, r0
 800a976:	2b00      	cmp	r3, #0
 800a978:	da01      	bge.n	800a97e <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800a97a:	23ff      	movs	r3, #255	; 0xff
 800a97c:	e017      	b.n	800a9ae <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800a97e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a982:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d005      	beq.n	800a998 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800a98c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a990:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	e00a      	b.n	800a9ae <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800a998:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800a99c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a9a0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a9a4:	b29a      	uxth	r2, r3
 800a9a6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a9aa:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800a9ac:	2300      	movs	r3, #0
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd90      	pop	{r4, r7, pc}

0800a9b8 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800a9b8:	b590      	push	{r4, r7, lr}
 800a9ba:	b0d1      	sub	sp, #324	; 0x144
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	4604      	mov	r4, r0
 800a9c0:	4608      	mov	r0, r1
 800a9c2:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800a9c6:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800a9ca:	600a      	str	r2, [r1, #0]
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a9d2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800a9d6:	4622      	mov	r2, r4
 800a9d8:	801a      	strh	r2, [r3, #0]
 800a9da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a9de:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	701a      	strb	r2, [r3, #0]
 800a9e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a9ea:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800a9ee:	460a      	mov	r2, r1
 800a9f0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800a9f2:	f107 0318 	add.w	r3, r7, #24
 800a9f6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800a9fa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800a9fe:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d00a      	beq.n	800aa1e <aci_gatt_add_char+0x66>
 800aa08:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800aa0c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	2b02      	cmp	r3, #2
 800aa14:	d101      	bne.n	800aa1a <aci_gatt_add_char+0x62>
 800aa16:	2313      	movs	r3, #19
 800aa18:	e002      	b.n	800aa20 <aci_gatt_add_char+0x68>
 800aa1a:	2303      	movs	r3, #3
 800aa1c:	e000      	b.n	800aa20 <aci_gatt_add_char+0x68>
 800aa1e:	2305      	movs	r3, #5
 800aa20:	f107 0218 	add.w	r2, r7, #24
 800aa24:	4413      	add	r3, r2
 800aa26:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800aa2a:	f107 0314 	add.w	r3, r7, #20
 800aa2e:	2203      	movs	r2, #3
 800aa30:	2100      	movs	r1, #0
 800aa32:	4618      	mov	r0, r3
 800aa34:	f000 fc7f 	bl	800b336 <Osal_MemSet>
  int index_input = 0;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800aa3e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800aa42:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800aa46:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800aa4a:	8812      	ldrh	r2, [r2, #0]
 800aa4c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800aa4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aa52:	3302      	adds	r3, #2
 800aa54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800aa58:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800aa5c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800aa60:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800aa64:	7812      	ldrb	r2, [r2, #0]
 800aa66:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800aa68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800aa72:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800aa76:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d002      	beq.n	800aa86 <aci_gatt_add_char+0xce>
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	d004      	beq.n	800aa8e <aci_gatt_add_char+0xd6>
 800aa84:	e007      	b.n	800aa96 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800aa86:	2302      	movs	r3, #2
 800aa88:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800aa8c:	e005      	b.n	800aa9a <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800aa8e:	2310      	movs	r3, #16
 800aa90:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800aa94:	e001      	b.n	800aa9a <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800aa96:	2397      	movs	r3, #151	; 0x97
 800aa98:	e091      	b.n	800abbe <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800aa9a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800aa9e:	1cd8      	adds	r0, r3, #3
 800aaa0:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800aaa4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800aaa8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800aaac:	6819      	ldr	r1, [r3, #0]
 800aaae:	f000 fc32 	bl	800b316 <Osal_MemCpy>
    index_input += size;
 800aab2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800aab6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800aaba:	4413      	add	r3, r2
 800aabc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800aac0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aac4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800aac8:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800aacc:	8812      	ldrh	r2, [r2, #0]
 800aace:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800aad0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aad4:	3302      	adds	r3, #2
 800aad6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800aada:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aade:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800aae2:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800aae4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aae8:	3301      	adds	r3, #1
 800aaea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800aaee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800aaf2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800aaf6:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800aaf8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800aafc:	3301      	adds	r3, #1
 800aafe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800ab02:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ab06:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800ab0a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800ab0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ab10:	3301      	adds	r3, #1
 800ab12:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800ab16:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ab1a:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800ab1e:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800ab20:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ab24:	3301      	adds	r3, #1
 800ab26:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800ab2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800ab2e:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800ab32:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800ab34:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ab38:	3301      	adds	r3, #1
 800ab3a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ab3e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ab42:	2218      	movs	r2, #24
 800ab44:	2100      	movs	r1, #0
 800ab46:	4618      	mov	r0, r3
 800ab48:	f000 fbf5 	bl	800b336 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ab4c:	233f      	movs	r3, #63	; 0x3f
 800ab4e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800ab52:	f44f 7382 	mov.w	r3, #260	; 0x104
 800ab56:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800ab5a:	f107 0318 	add.w	r3, r7, #24
 800ab5e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800ab62:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ab66:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800ab6a:	f107 0314 	add.w	r3, r7, #20
 800ab6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800ab72:	2303      	movs	r3, #3
 800ab74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ab78:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f000 ff90 	bl	800baa4 <hci_send_req>
 800ab84:	4603      	mov	r3, r0
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	da01      	bge.n	800ab8e <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800ab8a:	23ff      	movs	r3, #255	; 0xff
 800ab8c:	e017      	b.n	800abbe <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800ab8e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ab92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d005      	beq.n	800aba8 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800ab9c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800aba0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	e00a      	b.n	800abbe <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800aba8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800abac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800abb0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800abba:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd90      	pop	{r4, r7, pc}

0800abc8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800abc8:	b5b0      	push	{r4, r5, r7, lr}
 800abca:	b0cc      	sub	sp, #304	; 0x130
 800abcc:	af00      	add	r7, sp, #0
 800abce:	4605      	mov	r5, r0
 800abd0:	460c      	mov	r4, r1
 800abd2:	4610      	mov	r0, r2
 800abd4:	4619      	mov	r1, r3
 800abd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abda:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800abde:	462a      	mov	r2, r5
 800abe0:	801a      	strh	r2, [r3, #0]
 800abe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abe6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800abea:	4622      	mov	r2, r4
 800abec:	801a      	strh	r2, [r3, #0]
 800abee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abf2:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800abf6:	4602      	mov	r2, r0
 800abf8:	701a      	strb	r2, [r3, #0]
 800abfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abfe:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800ac02:	460a      	mov	r2, r1
 800ac04:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800ac06:	f107 0310 	add.w	r3, r7, #16
 800ac0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ac0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac12:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ac16:	2200      	movs	r2, #0
 800ac18:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800ac20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac24:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ac28:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ac2c:	8812      	ldrh	r2, [r2, #0]
 800ac2e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ac30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac34:	3302      	adds	r3, #2
 800ac36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800ac3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac3e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ac42:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800ac46:	8812      	ldrh	r2, [r2, #0]
 800ac48:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800ac4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac4e:	3302      	adds	r3, #2
 800ac50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800ac54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac58:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ac5c:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800ac60:	7812      	ldrb	r2, [r2, #0]
 800ac62:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800ac64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac68:	3301      	adds	r3, #1
 800ac6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800ac6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac72:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ac76:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800ac7a:	7812      	ldrb	r2, [r2, #0]
 800ac7c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ac7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ac82:	3301      	adds	r3, #1
 800ac84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800ac88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac8c:	1d98      	adds	r0, r3, #6
 800ac8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac92:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	461a      	mov	r2, r3
 800ac9a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800ac9e:	f000 fb3a 	bl	800b316 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800aca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aca6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800acb0:	4413      	add	r3, r2
 800acb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800acb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800acba:	2218      	movs	r2, #24
 800acbc:	2100      	movs	r1, #0
 800acbe:	4618      	mov	r0, r3
 800acc0:	f000 fb39 	bl	800b336 <Osal_MemSet>
  rq.ogf = 0x3f;
 800acc4:	233f      	movs	r3, #63	; 0x3f
 800acc6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800acca:	f44f 7383 	mov.w	r3, #262	; 0x106
 800acce:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800acd2:	f107 0310 	add.w	r3, r7, #16
 800acd6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800acda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800acde:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ace2:	f107 030f 	add.w	r3, r7, #15
 800ace6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800acea:	2301      	movs	r3, #1
 800acec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800acf0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800acf4:	2100      	movs	r1, #0
 800acf6:	4618      	mov	r0, r3
 800acf8:	f000 fed4 	bl	800baa4 <hci_send_req>
 800acfc:	4603      	mov	r3, r0
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	da01      	bge.n	800ad06 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800ad02:	23ff      	movs	r3, #255	; 0xff
 800ad04:	e004      	b.n	800ad10 <aci_gatt_update_char_value+0x148>
  return status;
 800ad06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad0a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ad0e:	781b      	ldrb	r3, [r3, #0]
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bdb0      	pop	{r4, r5, r7, pc}

0800ad1a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b0cc      	sub	sp, #304	; 0x130
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad28:	601a      	str	r2, [r3, #0]
 800ad2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad2e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ad32:	4602      	mov	r2, r0
 800ad34:	701a      	strb	r2, [r3, #0]
 800ad36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad3a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ad3e:	460a      	mov	r2, r1
 800ad40:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800ad42:	f107 0310 	add.w	r3, r7, #16
 800ad46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ad4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad4e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ad52:	2200      	movs	r2, #0
 800ad54:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ad56:	2300      	movs	r3, #0
 800ad58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800ad5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad60:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ad64:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800ad68:	7812      	ldrb	r2, [r2, #0]
 800ad6a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ad6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad70:	3301      	adds	r3, #1
 800ad72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800ad76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad7a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ad7e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ad82:	7812      	ldrb	r2, [r2, #0]
 800ad84:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ad86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800ad90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad94:	1c98      	adds	r0, r3, #2
 800ad96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad9a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ad9e:	781a      	ldrb	r2, [r3, #0]
 800ada0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ada4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ada8:	6819      	ldr	r1, [r3, #0]
 800adaa:	f000 fab4 	bl	800b316 <Osal_MemCpy>
  index_input += Length;
 800adae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800adb2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800adbc:	4413      	add	r3, r2
 800adbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800adc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800adc6:	2218      	movs	r2, #24
 800adc8:	2100      	movs	r1, #0
 800adca:	4618      	mov	r0, r3
 800adcc:	f000 fab3 	bl	800b336 <Osal_MemSet>
  rq.ogf = 0x3f;
 800add0:	233f      	movs	r3, #63	; 0x3f
 800add2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800add6:	230c      	movs	r3, #12
 800add8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800addc:	f107 0310 	add.w	r3, r7, #16
 800ade0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ade4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ade8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800adec:	f107 030f 	add.w	r3, r7, #15
 800adf0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800adf4:	2301      	movs	r3, #1
 800adf6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800adfa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800adfe:	2100      	movs	r1, #0
 800ae00:	4618      	mov	r0, r3
 800ae02:	f000 fe4f 	bl	800baa4 <hci_send_req>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	da01      	bge.n	800ae10 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800ae0c:	23ff      	movs	r3, #255	; 0xff
 800ae0e:	e004      	b.n	800ae1a <aci_hal_write_config_data+0x100>
  return status;
 800ae10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae14:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ae18:	781b      	ldrb	r3, [r3, #0]
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b0cc      	sub	sp, #304	; 0x130
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae30:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ae34:	701a      	strb	r2, [r3, #0]
 800ae36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae3a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ae3e:	460a      	mov	r2, r1
 800ae40:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800ae42:	f107 0310 	add.w	r3, r7, #16
 800ae46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ae4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae4e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ae52:	2200      	movs	r2, #0
 800ae54:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ae56:	2300      	movs	r3, #0
 800ae58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800ae5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae60:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ae64:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800ae68:	7812      	ldrb	r2, [r2, #0]
 800ae6a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ae6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae70:	3301      	adds	r3, #1
 800ae72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800ae76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae7a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ae7e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ae82:	7812      	ldrb	r2, [r2, #0]
 800ae84:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ae86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ae8a:	3301      	adds	r3, #1
 800ae8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ae90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ae94:	2218      	movs	r2, #24
 800ae96:	2100      	movs	r1, #0
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f000 fa4c 	bl	800b336 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ae9e:	233f      	movs	r3, #63	; 0x3f
 800aea0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800aea4:	230f      	movs	r3, #15
 800aea6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800aeaa:	f107 0310 	add.w	r3, r7, #16
 800aeae:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800aeb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800aeb6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800aeba:	f107 030f 	add.w	r3, r7, #15
 800aebe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800aec2:	2301      	movs	r3, #1
 800aec4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800aec8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800aecc:	2100      	movs	r1, #0
 800aece:	4618      	mov	r0, r3
 800aed0:	f000 fde8 	bl	800baa4 <hci_send_req>
 800aed4:	4603      	mov	r3, r0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	da01      	bge.n	800aede <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800aeda:	23ff      	movs	r3, #255	; 0xff
 800aedc:	e004      	b.n	800aee8 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800aede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aee2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800aee6:	781b      	ldrb	r3, [r3, #0]
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b0cc      	sub	sp, #304	; 0x130
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	4602      	mov	r2, r0
 800aefa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aefe:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800af02:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800af04:	f107 0310 	add.w	r3, r7, #16
 800af08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800af0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af10:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800af14:	2200      	movs	r2, #0
 800af16:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800af18:	2300      	movs	r3, #0
 800af1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800af1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af22:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800af26:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800af2a:	8812      	ldrh	r2, [r2, #0]
 800af2c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800af2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af32:	3302      	adds	r3, #2
 800af34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800af38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800af3c:	2218      	movs	r2, #24
 800af3e:	2100      	movs	r1, #0
 800af40:	4618      	mov	r0, r3
 800af42:	f000 f9f8 	bl	800b336 <Osal_MemSet>
  rq.ogf = 0x3f;
 800af46:	233f      	movs	r3, #63	; 0x3f
 800af48:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800af4c:	2318      	movs	r3, #24
 800af4e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800af52:	f107 0310 	add.w	r3, r7, #16
 800af56:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800af5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af5e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800af62:	f107 030f 	add.w	r3, r7, #15
 800af66:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800af6a:	2301      	movs	r3, #1
 800af6c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800af70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800af74:	2100      	movs	r1, #0
 800af76:	4618      	mov	r0, r3
 800af78:	f000 fd94 	bl	800baa4 <hci_send_req>
 800af7c:	4603      	mov	r3, r0
 800af7e:	2b00      	cmp	r3, #0
 800af80:	da01      	bge.n	800af86 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800af82:	23ff      	movs	r3, #255	; 0xff
 800af84:	e004      	b.n	800af90 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800af86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af8a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800af8e:	781b      	ldrb	r3, [r3, #0]
}
 800af90:	4618      	mov	r0, r3
 800af92:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b088      	sub	sp, #32
 800af9e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800afa0:	2300      	movs	r3, #0
 800afa2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800afa4:	f107 0308 	add.w	r3, r7, #8
 800afa8:	2218      	movs	r2, #24
 800afaa:	2100      	movs	r1, #0
 800afac:	4618      	mov	r0, r3
 800afae:	f000 f9c2 	bl	800b336 <Osal_MemSet>
  rq.ogf = 0x03;
 800afb2:	2303      	movs	r3, #3
 800afb4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800afb6:	2303      	movs	r3, #3
 800afb8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800afba:	1dfb      	adds	r3, r7, #7
 800afbc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800afbe:	2301      	movs	r3, #1
 800afc0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800afc2:	f107 0308 	add.w	r3, r7, #8
 800afc6:	2100      	movs	r1, #0
 800afc8:	4618      	mov	r0, r3
 800afca:	f000 fd6b 	bl	800baa4 <hci_send_req>
 800afce:	4603      	mov	r3, r0
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	da01      	bge.n	800afd8 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800afd4:	23ff      	movs	r3, #255	; 0xff
 800afd6:	e000      	b.n	800afda <hci_reset+0x40>
  return status;
 800afd8:	79fb      	ldrb	r3, [r7, #7]
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3720      	adds	r7, #32
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}

0800afe2 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800afe2:	b580      	push	{r7, lr}
 800afe4:	b0ce      	sub	sp, #312	; 0x138
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800afec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aff0:	6019      	str	r1, [r3, #0]
 800aff2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800aff6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800affa:	601a      	str	r2, [r3, #0]
 800affc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b000:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b004:	4602      	mov	r2, r0
 800b006:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800b008:	f107 0318 	add.w	r3, r7, #24
 800b00c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800b010:	f107 0310 	add.w	r3, r7, #16
 800b014:	2205      	movs	r2, #5
 800b016:	2100      	movs	r1, #0
 800b018:	4618      	mov	r0, r3
 800b01a:	f000 f98c 	bl	800b336 <Osal_MemSet>
  int index_input = 0;
 800b01e:	2300      	movs	r3, #0
 800b020:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800b024:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b028:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800b02c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800b030:	8812      	ldrh	r2, [r2, #0]
 800b032:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b034:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b038:	3302      	adds	r3, #2
 800b03a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b03e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b042:	2218      	movs	r2, #24
 800b044:	2100      	movs	r1, #0
 800b046:	4618      	mov	r0, r3
 800b048:	f000 f975 	bl	800b336 <Osal_MemSet>
  rq.ogf = 0x08;
 800b04c:	2308      	movs	r3, #8
 800b04e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800b052:	2330      	movs	r3, #48	; 0x30
 800b054:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800b058:	f107 0318 	add.w	r3, r7, #24
 800b05c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800b060:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b064:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800b068:	f107 0310 	add.w	r3, r7, #16
 800b06c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800b070:	2305      	movs	r3, #5
 800b072:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b076:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800b07a:	2100      	movs	r1, #0
 800b07c:	4618      	mov	r0, r3
 800b07e:	f000 fd11 	bl	800baa4 <hci_send_req>
 800b082:	4603      	mov	r3, r0
 800b084:	2b00      	cmp	r3, #0
 800b086:	da01      	bge.n	800b08c <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 800b088:	23ff      	movs	r3, #255	; 0xff
 800b08a:	e023      	b.n	800b0d4 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 800b08c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b090:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d005      	beq.n	800b0a6 <hci_le_read_phy+0xc4>
    return resp.Status;
 800b09a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b09e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800b0a2:	781b      	ldrb	r3, [r3, #0]
 800b0a4:	e016      	b.n	800b0d4 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 800b0a6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b0aa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800b0ae:	78da      	ldrb	r2, [r3, #3]
 800b0b0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b0b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800b0bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b0c0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800b0c4:	791a      	ldrb	r2, [r3, #4]
 800b0c6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b0ca:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800b0d2:	2300      	movs	r3, #0
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800b0de:	b590      	push	{r4, r7, lr}
 800b0e0:	b0cd      	sub	sp, #308	; 0x134
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	4604      	mov	r4, r0
 800b0e6:	4608      	mov	r0, r1
 800b0e8:	4611      	mov	r1, r2
 800b0ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0ee:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b0f2:	4622      	mov	r2, r4
 800b0f4:	701a      	strb	r2, [r3, #0]
 800b0f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0fa:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b0fe:	4602      	mov	r2, r0
 800b100:	701a      	strb	r2, [r3, #0]
 800b102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b106:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800b10a:	460a      	mov	r2, r1
 800b10c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800b10e:	f107 0310 	add.w	r3, r7, #16
 800b112:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b11a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b11e:	2200      	movs	r2, #0
 800b120:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b122:	2300      	movs	r3, #0
 800b124:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800b128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b12c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b130:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800b134:	7812      	ldrb	r2, [r2, #0]
 800b136:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b138:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b13c:	3301      	adds	r3, #1
 800b13e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800b142:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b146:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b14a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800b14e:	7812      	ldrb	r2, [r2, #0]
 800b150:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800b152:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b156:	3301      	adds	r3, #1
 800b158:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800b15c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b160:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b164:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800b168:	7812      	ldrb	r2, [r2, #0]
 800b16a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800b16c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b170:	3301      	adds	r3, #1
 800b172:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b176:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b17a:	2218      	movs	r2, #24
 800b17c:	2100      	movs	r1, #0
 800b17e:	4618      	mov	r0, r3
 800b180:	f000 f8d9 	bl	800b336 <Osal_MemSet>
  rq.ogf = 0x08;
 800b184:	2308      	movs	r3, #8
 800b186:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800b18a:	2331      	movs	r3, #49	; 0x31
 800b18c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b190:	f107 0310 	add.w	r3, r7, #16
 800b194:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b198:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b19c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b1a0:	f107 030f 	add.w	r3, r7, #15
 800b1a4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b1ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b1b2:	2100      	movs	r1, #0
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f000 fc75 	bl	800baa4 <hci_send_req>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	da01      	bge.n	800b1c4 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800b1c0:	23ff      	movs	r3, #255	; 0xff
 800b1c2:	e004      	b.n	800b1ce <hci_le_set_default_phy+0xf0>
  return status;
 800b1c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1c8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b1cc:	781b      	ldrb	r3, [r3, #0]
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd90      	pop	{r4, r7, pc}

0800b1d8 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 800b1d8:	b5b0      	push	{r4, r5, r7, lr}
 800b1da:	b0cc      	sub	sp, #304	; 0x130
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	4605      	mov	r5, r0
 800b1e0:	460c      	mov	r4, r1
 800b1e2:	4610      	mov	r0, r2
 800b1e4:	4619      	mov	r1, r3
 800b1e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1ea:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800b1ee:	462a      	mov	r2, r5
 800b1f0:	801a      	strh	r2, [r3, #0]
 800b1f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b1fa:	4622      	mov	r2, r4
 800b1fc:	801a      	strh	r2, [r3, #0]
 800b1fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b202:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800b206:	4602      	mov	r2, r0
 800b208:	801a      	strh	r2, [r3, #0]
 800b20a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b20e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b212:	460a      	mov	r2, r1
 800b214:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 800b216:	f107 0310 	add.w	r3, r7, #16
 800b21a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b21e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b222:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b226:	2200      	movs	r2, #0
 800b228:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b22a:	2300      	movs	r3, #0
 800b22c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800b230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b234:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b238:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800b23c:	8812      	ldrh	r2, [r2, #0]
 800b23e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800b240:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b244:	3302      	adds	r3, #2
 800b246:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 800b24a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b24e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b252:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800b256:	8812      	ldrh	r2, [r2, #0]
 800b258:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800b25a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b25e:	3302      	adds	r3, #2
 800b260:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 800b264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b268:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b26c:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800b270:	8812      	ldrh	r2, [r2, #0]
 800b272:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800b274:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b278:	3302      	adds	r3, #2
 800b27a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Latency = Latency;
 800b27e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b282:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b286:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800b28a:	8812      	ldrh	r2, [r2, #0]
 800b28c:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 800b28e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b292:	3302      	adds	r3, #2
 800b294:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 800b298:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b29c:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800b2a0:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 800b2a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b2a6:	3302      	adds	r3, #2
 800b2a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b2ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b2b0:	2218      	movs	r2, #24
 800b2b2:	2100      	movs	r1, #0
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f000 f83e 	bl	800b336 <Osal_MemSet>
  rq.ogf = 0x3f;
 800b2ba:	233f      	movs	r3, #63	; 0x3f
 800b2bc:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x181;
 800b2c0:	f240 1381 	movw	r3, #385	; 0x181
 800b2c4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800b2c8:	230f      	movs	r3, #15
 800b2ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800b2ce:	f107 0310 	add.w	r3, r7, #16
 800b2d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b2d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b2da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b2de:	f107 030f 	add.w	r3, r7, #15
 800b2e2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b2e6:	2301      	movs	r3, #1
 800b2e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b2ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b2f0:	2100      	movs	r1, #0
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f000 fbd6 	bl	800baa4 <hci_send_req>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	da01      	bge.n	800b302 <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 800b2fe:	23ff      	movs	r3, #255	; 0xff
 800b300:	e004      	b.n	800b30c <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 800b302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b306:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b30a:	781b      	ldrb	r3, [r3, #0]
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800b312:	46bd      	mov	sp, r7
 800b314:	bdb0      	pop	{r4, r5, r7, pc}

0800b316 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800b316:	b580      	push	{r7, lr}
 800b318:	b084      	sub	sp, #16
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	60f8      	str	r0, [r7, #12]
 800b31e:	60b9      	str	r1, [r7, #8]
 800b320:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	68b9      	ldr	r1, [r7, #8]
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f003 fdc3 	bl	800eeb2 <memcpy>
 800b32c:	4603      	mov	r3, r0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800b336:	b580      	push	{r7, lr}
 800b338:	b084      	sub	sp, #16
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	60f8      	str	r0, [r7, #12]
 800b33e:	60b9      	str	r1, [r7, #8]
 800b340:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	68b9      	ldr	r1, [r7, #8]
 800b346:	68f8      	ldr	r0, [r7, #12]
 800b348:	f003 fd3e 	bl	800edc8 <memset>
 800b34c:	4603      	mov	r3, r0
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3710      	adds	r7, #16
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
	...

0800b358 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b08a      	sub	sp, #40	; 0x28
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800b360:	2300      	movs	r3, #0
 800b362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	3301      	adds	r3, #1
 800b36a:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800b36c:	6a3b      	ldr	r3, [r7, #32]
 800b36e:	781b      	ldrb	r3, [r3, #0]
 800b370:	2bff      	cmp	r3, #255	; 0xff
 800b372:	d14f      	bne.n	800b414 <PeerToPeer_Event_Handler+0xbc>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800b374:	6a3b      	ldr	r3, [r7, #32]
 800b376:	3302      	adds	r3, #2
 800b378:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	881b      	ldrh	r3, [r3, #0]
 800b37e:	b29b      	uxth	r3, r3
 800b380:	461a      	mov	r2, r3
 800b382:	f640 4301 	movw	r3, #3073	; 0xc01
 800b386:	429a      	cmp	r2, r3
 800b388:	d140      	bne.n	800b40c <PeerToPeer_Event_Handler+0xb4>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	3302      	adds	r3, #2
 800b38e:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	885b      	ldrh	r3, [r3, #2]
 800b394:	b29b      	uxth	r3, r3
 800b396:	461a      	mov	r2, r3
 800b398:	4b22      	ldr	r3, [pc, #136]	; (800b424 <PeerToPeer_Event_Handler+0xcc>)
 800b39a:	889b      	ldrh	r3, [r3, #4]
 800b39c:	3302      	adds	r3, #2
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d118      	bne.n	800b3d4 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	7a1b      	ldrb	r3, [r3, #8]
 800b3ac:	f003 0301 	and.w	r3, r3, #1
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d007      	beq.n	800b3c4 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800b3b8:	f107 0308 	add.w	r3, r7, #8
 800b3bc:	4618      	mov	r0, r3
 800b3be:	f002 fcd1 	bl	800dd64 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 800b3c2:	e025      	b.n	800b410 <PeerToPeer_Event_Handler+0xb8>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800b3c8:	f107 0308 	add.w	r3, r7, #8
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f002 fcc9 	bl	800dd64 <P2PS_STM_App_Notification>
        break;
 800b3d2:	e01d      	b.n	800b410 <PeerToPeer_Event_Handler+0xb8>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800b3d4:	69bb      	ldr	r3, [r7, #24]
 800b3d6:	885b      	ldrh	r3, [r3, #2]
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	461a      	mov	r2, r3
 800b3dc:	4b11      	ldr	r3, [pc, #68]	; (800b424 <PeerToPeer_Event_Handler+0xcc>)
 800b3de:	885b      	ldrh	r3, [r3, #2]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d114      	bne.n	800b410 <PeerToPeer_Event_Handler+0xb8>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 800b3e6:	4810      	ldr	r0, [pc, #64]	; (800b428 <PeerToPeer_Event_Handler+0xd0>)
 800b3e8:	f003 fc0e 	bl	800ec08 <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800b3ec:	2303      	movs	r3, #3
 800b3ee:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800b3f0:	69bb      	ldr	r3, [r7, #24]
 800b3f2:	88db      	ldrh	r3, [r3, #6]
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	b2db      	uxtb	r3, r3
 800b3f8:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800b3fa:	69bb      	ldr	r3, [r7, #24]
 800b3fc:	3308      	adds	r3, #8
 800b3fe:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800b400:	f107 0308 	add.w	r3, r7, #8
 800b404:	4618      	mov	r0, r3
 800b406:	f002 fcad 	bl	800dd64 <P2PS_STM_App_Notification>
        break;
 800b40a:	e001      	b.n	800b410 <PeerToPeer_Event_Handler+0xb8>

        default:
          break;
 800b40c:	bf00      	nop
 800b40e:	e002      	b.n	800b416 <PeerToPeer_Event_Handler+0xbe>
        break;
 800b410:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800b412:	e000      	b.n	800b416 <PeerToPeer_Event_Handler+0xbe>

    default:
      break;
 800b414:	bf00      	nop
  }

  return(return_value);
 800b416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800b41a:	4618      	mov	r0, r3
 800b41c:	3728      	adds	r7, #40	; 0x28
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	200000a8 	.word	0x200000a8
 800b428:	0800fdb4 	.word	0x0800fdb4

0800b42c <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b08a      	sub	sp, #40	; 0x28
 800b430:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800b432:	484a      	ldr	r0, [pc, #296]	; (800b55c <P2PS_STM_Init+0x130>)
 800b434:	f000 f96c 	bl	800b710 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800b438:	238f      	movs	r3, #143	; 0x8f
 800b43a:	703b      	strb	r3, [r7, #0]
 800b43c:	23e5      	movs	r3, #229	; 0xe5
 800b43e:	707b      	strb	r3, [r7, #1]
 800b440:	23b3      	movs	r3, #179	; 0xb3
 800b442:	70bb      	strb	r3, [r7, #2]
 800b444:	23d5      	movs	r3, #213	; 0xd5
 800b446:	70fb      	strb	r3, [r7, #3]
 800b448:	232e      	movs	r3, #46	; 0x2e
 800b44a:	713b      	strb	r3, [r7, #4]
 800b44c:	237f      	movs	r3, #127	; 0x7f
 800b44e:	717b      	strb	r3, [r7, #5]
 800b450:	234a      	movs	r3, #74	; 0x4a
 800b452:	71bb      	strb	r3, [r7, #6]
 800b454:	2398      	movs	r3, #152	; 0x98
 800b456:	71fb      	strb	r3, [r7, #7]
 800b458:	232a      	movs	r3, #42	; 0x2a
 800b45a:	723b      	strb	r3, [r7, #8]
 800b45c:	2348      	movs	r3, #72	; 0x48
 800b45e:	727b      	strb	r3, [r7, #9]
 800b460:	237a      	movs	r3, #122	; 0x7a
 800b462:	72bb      	strb	r3, [r7, #10]
 800b464:	23cc      	movs	r3, #204	; 0xcc
 800b466:	72fb      	strb	r3, [r7, #11]
 800b468:	2340      	movs	r3, #64	; 0x40
 800b46a:	733b      	strb	r3, [r7, #12]
 800b46c:	23fe      	movs	r3, #254	; 0xfe
 800b46e:	737b      	strb	r3, [r7, #13]
 800b470:	2300      	movs	r3, #0
 800b472:	73bb      	strb	r3, [r7, #14]
 800b474:	2300      	movs	r3, #0
 800b476:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800b478:	4639      	mov	r1, r7
 800b47a:	4b39      	ldr	r3, [pc, #228]	; (800b560 <P2PS_STM_Init+0x134>)
 800b47c:	9300      	str	r3, [sp, #0]
 800b47e:	2306      	movs	r3, #6
 800b480:	2201      	movs	r2, #1
 800b482:	2002      	movs	r0, #2
 800b484:	f7ff f9c2 	bl	800a80c <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800b488:	2319      	movs	r3, #25
 800b48a:	703b      	strb	r3, [r7, #0]
 800b48c:	23ed      	movs	r3, #237	; 0xed
 800b48e:	707b      	strb	r3, [r7, #1]
 800b490:	2382      	movs	r3, #130	; 0x82
 800b492:	70bb      	strb	r3, [r7, #2]
 800b494:	23ae      	movs	r3, #174	; 0xae
 800b496:	70fb      	strb	r3, [r7, #3]
 800b498:	23ed      	movs	r3, #237	; 0xed
 800b49a:	713b      	strb	r3, [r7, #4]
 800b49c:	2321      	movs	r3, #33	; 0x21
 800b49e:	717b      	strb	r3, [r7, #5]
 800b4a0:	234c      	movs	r3, #76	; 0x4c
 800b4a2:	71bb      	strb	r3, [r7, #6]
 800b4a4:	239d      	movs	r3, #157	; 0x9d
 800b4a6:	71fb      	strb	r3, [r7, #7]
 800b4a8:	2341      	movs	r3, #65	; 0x41
 800b4aa:	723b      	strb	r3, [r7, #8]
 800b4ac:	2345      	movs	r3, #69	; 0x45
 800b4ae:	727b      	strb	r3, [r7, #9]
 800b4b0:	2322      	movs	r3, #34	; 0x22
 800b4b2:	72bb      	strb	r3, [r7, #10]
 800b4b4:	238e      	movs	r3, #142	; 0x8e
 800b4b6:	72fb      	strb	r3, [r7, #11]
 800b4b8:	2341      	movs	r3, #65	; 0x41
 800b4ba:	733b      	strb	r3, [r7, #12]
 800b4bc:	23fe      	movs	r3, #254	; 0xfe
 800b4be:	737b      	strb	r3, [r7, #13]
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	73bb      	strb	r3, [r7, #14]
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800b4c8:	4b25      	ldr	r3, [pc, #148]	; (800b560 <P2PS_STM_Init+0x134>)
 800b4ca:	8818      	ldrh	r0, [r3, #0]
 800b4cc:	463a      	mov	r2, r7
 800b4ce:	4b25      	ldr	r3, [pc, #148]	; (800b564 <P2PS_STM_Init+0x138>)
 800b4d0:	9305      	str	r3, [sp, #20]
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	9304      	str	r3, [sp, #16]
 800b4d6:	230a      	movs	r3, #10
 800b4d8:	9303      	str	r3, [sp, #12]
 800b4da:	2301      	movs	r3, #1
 800b4dc:	9302      	str	r3, [sp, #8]
 800b4de:	2300      	movs	r3, #0
 800b4e0:	9301      	str	r3, [sp, #4]
 800b4e2:	2306      	movs	r3, #6
 800b4e4:	9300      	str	r3, [sp, #0]
 800b4e6:	2302      	movs	r3, #2
 800b4e8:	2102      	movs	r1, #2
 800b4ea:	f7ff fa65 	bl	800a9b8 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800b4ee:	2319      	movs	r3, #25
 800b4f0:	703b      	strb	r3, [r7, #0]
 800b4f2:	23ed      	movs	r3, #237	; 0xed
 800b4f4:	707b      	strb	r3, [r7, #1]
 800b4f6:	2382      	movs	r3, #130	; 0x82
 800b4f8:	70bb      	strb	r3, [r7, #2]
 800b4fa:	23ae      	movs	r3, #174	; 0xae
 800b4fc:	70fb      	strb	r3, [r7, #3]
 800b4fe:	23ed      	movs	r3, #237	; 0xed
 800b500:	713b      	strb	r3, [r7, #4]
 800b502:	2321      	movs	r3, #33	; 0x21
 800b504:	717b      	strb	r3, [r7, #5]
 800b506:	234c      	movs	r3, #76	; 0x4c
 800b508:	71bb      	strb	r3, [r7, #6]
 800b50a:	239d      	movs	r3, #157	; 0x9d
 800b50c:	71fb      	strb	r3, [r7, #7]
 800b50e:	2341      	movs	r3, #65	; 0x41
 800b510:	723b      	strb	r3, [r7, #8]
 800b512:	2345      	movs	r3, #69	; 0x45
 800b514:	727b      	strb	r3, [r7, #9]
 800b516:	2322      	movs	r3, #34	; 0x22
 800b518:	72bb      	strb	r3, [r7, #10]
 800b51a:	238e      	movs	r3, #142	; 0x8e
 800b51c:	72fb      	strb	r3, [r7, #11]
 800b51e:	2342      	movs	r3, #66	; 0x42
 800b520:	733b      	strb	r3, [r7, #12]
 800b522:	23fe      	movs	r3, #254	; 0xfe
 800b524:	737b      	strb	r3, [r7, #13]
 800b526:	2300      	movs	r3, #0
 800b528:	73bb      	strb	r3, [r7, #14]
 800b52a:	2300      	movs	r3, #0
 800b52c:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800b52e:	4b0c      	ldr	r3, [pc, #48]	; (800b560 <P2PS_STM_Init+0x134>)
 800b530:	8818      	ldrh	r0, [r3, #0]
 800b532:	463a      	mov	r2, r7
 800b534:	4b0c      	ldr	r3, [pc, #48]	; (800b568 <P2PS_STM_Init+0x13c>)
 800b536:	9305      	str	r3, [sp, #20]
 800b538:	2301      	movs	r3, #1
 800b53a:	9304      	str	r3, [sp, #16]
 800b53c:	230a      	movs	r3, #10
 800b53e:	9303      	str	r3, [sp, #12]
 800b540:	2301      	movs	r3, #1
 800b542:	9302      	str	r3, [sp, #8]
 800b544:	2300      	movs	r3, #0
 800b546:	9301      	str	r3, [sp, #4]
 800b548:	2310      	movs	r3, #16
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	2302      	movs	r3, #2
 800b54e:	2102      	movs	r1, #2
 800b550:	f7ff fa32 	bl	800a9b8 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800b554:	bf00      	nop
}
 800b556:	3710      	adds	r7, #16
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}
 800b55c:	0800b359 	.word	0x0800b359
 800b560:	200000a8 	.word	0x200000a8
 800b564:	200000aa 	.word	0x200000aa
 800b568:	200000ac 	.word	0x200000ac

0800b56c <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b086      	sub	sp, #24
 800b570:	af02      	add	r7, sp, #8
 800b572:	4603      	mov	r3, r0
 800b574:	6039      	str	r1, [r7, #0]
 800b576:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800b578:	2392      	movs	r3, #146	; 0x92
 800b57a:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800b57c:	88fb      	ldrh	r3, [r7, #6]
 800b57e:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800b582:	4293      	cmp	r3, r2
 800b584:	d10c      	bne.n	800b5a0 <P2PS_STM_App_Update_Char+0x34>
  {
    case P2P_NOTIFY_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800b586:	4b09      	ldr	r3, [pc, #36]	; (800b5ac <P2PS_STM_App_Update_Char+0x40>)
 800b588:	8818      	ldrh	r0, [r3, #0]
 800b58a:	4b08      	ldr	r3, [pc, #32]	; (800b5ac <P2PS_STM_App_Update_Char+0x40>)
 800b58c:	8899      	ldrh	r1, [r3, #4]
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	9300      	str	r3, [sp, #0]
 800b592:	2302      	movs	r3, #2
 800b594:	2200      	movs	r2, #0
 800b596:	f7ff fb17 	bl	800abc8 <aci_gatt_update_char_value>
 800b59a:	4603      	mov	r3, r0
 800b59c:	73fb      	strb	r3, [r7, #15]
                             aPeerToPeerContext.P2PNotifyServerToClientCharHdle,
                              0, /* charValOffset */
                             2, /* charValueLen */
                             (uint8_t *)  pPayload);
    
      break;
 800b59e:	e000      	b.n	800b5a2 <P2PS_STM_App_Update_Char+0x36>

    default:
      break;
 800b5a0:	bf00      	nop
  }

  return result;
 800b5a2:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	3710      	adds	r7, #16
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	200000a8 	.word	0x200000a8

0800b5b0 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	af00      	add	r7, sp, #0
  return;
 800b5b4:	bf00      	nop
}
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr

0800b5be <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800b5be:	b480      	push	{r7}
 800b5c0:	af00      	add	r7, sp, #0
  return;
 800b5c2:	bf00      	nop
}
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	af00      	add	r7, sp, #0
  return;
 800b5d0:	bf00      	nop
}
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr

0800b5da <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800b5da:	b480      	push	{r7}
 800b5dc:	af00      	add	r7, sp, #0
  return;
 800b5de:	bf00      	nop
}
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	af00      	add	r7, sp, #0
  return;
 800b5ec:	bf00      	nop
}
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr

0800b5f6 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800b5f6:	b480      	push	{r7}
 800b5f8:	af00      	add	r7, sp, #0
  return;
 800b5fa:	bf00      	nop
}
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr

0800b604 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800b604:	b480      	push	{r7}
 800b606:	af00      	add	r7, sp, #0
  return;
 800b608:	bf00      	nop
}
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr

0800b612 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800b612:	b480      	push	{r7}
 800b614:	af00      	add	r7, sp, #0
  return;
 800b616:	bf00      	nop
}
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800b620:	b480      	push	{r7}
 800b622:	af00      	add	r7, sp, #0
  return;
 800b624:	bf00      	nop
}
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr

0800b62e <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800b62e:	b480      	push	{r7}
 800b630:	af00      	add	r7, sp, #0
  return;
 800b632:	bf00      	nop
}
 800b634:	46bd      	mov	sp, r7
 800b636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63a:	4770      	bx	lr

0800b63c <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800b63c:	b480      	push	{r7}
 800b63e:	af00      	add	r7, sp, #0
  return;
 800b640:	bf00      	nop
}
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr

0800b64a <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800b64a:	b480      	push	{r7}
 800b64c:	af00      	add	r7, sp, #0
  return;
 800b64e:	bf00      	nop
}
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr

0800b658 <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 800b658:	b480      	push	{r7}
 800b65a:	af00      	add	r7, sp, #0
  return;
 800b65c:	bf00      	nop
}
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr

0800b666 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800b666:	b480      	push	{r7}
 800b668:	af00      	add	r7, sp, #0
  return;
 800b66a:	bf00      	nop
}
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr

0800b674 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800b674:	b480      	push	{r7}
 800b676:	af00      	add	r7, sp, #0
  return;
 800b678:	bf00      	nop
}
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr

0800b682 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800b682:	b480      	push	{r7}
 800b684:	af00      	add	r7, sp, #0
  return;
 800b686:	bf00      	nop
}
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr

0800b690 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800b690:	b480      	push	{r7}
 800b692:	af00      	add	r7, sp, #0
  return;
 800b694:	bf00      	nop
}
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr
	...

0800b6a0 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800b6a4:	4b04      	ldr	r3, [pc, #16]	; (800b6b8 <SVCCTL_Init+0x18>)
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800b6aa:	4b04      	ldr	r3, [pc, #16]	; (800b6bc <SVCCTL_Init+0x1c>)
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800b6b0:	f000 f806 	bl	800b6c0 <SVCCTL_SvcInit>

  return;
 800b6b4:	bf00      	nop
}
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	200000b0 	.word	0x200000b0
 800b6bc:	200000b8 	.word	0x200000b8

0800b6c0 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	af00      	add	r7, sp, #0
  BAS_Init();
 800b6c4:	f7ff ff74 	bl	800b5b0 <BAS_Init>

  BLS_Init();
 800b6c8:	f7ff ff79 	bl	800b5be <BLS_Init>

  CRS_STM_Init();
 800b6cc:	f7ff ff7e 	bl	800b5cc <CRS_STM_Init>

  DIS_Init();
 800b6d0:	f7ff ff83 	bl	800b5da <DIS_Init>

  EDS_STM_Init();
 800b6d4:	f7ff ff88 	bl	800b5e8 <EDS_STM_Init>

  HIDS_Init();
 800b6d8:	f7ff ff8d 	bl	800b5f6 <HIDS_Init>

  HRS_Init();
 800b6dc:	f7ff ff92 	bl	800b604 <HRS_Init>

  HTS_Init();
 800b6e0:	f7ff ff97 	bl	800b612 <HTS_Init>

  IAS_Init();
 800b6e4:	f7ff ff9c 	bl	800b620 <IAS_Init>

  LLS_Init();
 800b6e8:	f7ff ffa1 	bl	800b62e <LLS_Init>

  TPS_Init();
 800b6ec:	f7ff ffa6 	bl	800b63c <TPS_Init>

  MOTENV_STM_Init();
 800b6f0:	f7ff ffab 	bl	800b64a <MOTENV_STM_Init>

  P2PS_STM_Init();
 800b6f4:	f7ff fe9a 	bl	800b42c <P2PS_STM_Init>

  ZDD_STM_Init();
 800b6f8:	f7ff ffae 	bl	800b658 <ZDD_STM_Init>

  OTAS_STM_Init();
 800b6fc:	f7ff ffb3 	bl	800b666 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800b700:	f7ff ffbf 	bl	800b682 <BVOPUS_STM_Init>

  MESH_Init();
 800b704:	f7ff ffb6 	bl	800b674 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800b708:	f7ff ffc2 	bl	800b690 <SVCCTL_InitCustomSvc>
  
  return;
 800b70c:	bf00      	nop
}
 800b70e:	bd80      	pop	{r7, pc}

0800b710 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800b718:	4b09      	ldr	r3, [pc, #36]	; (800b740 <SVCCTL_RegisterSvcHandler+0x30>)
 800b71a:	791b      	ldrb	r3, [r3, #4]
 800b71c:	4619      	mov	r1, r3
 800b71e:	4a08      	ldr	r2, [pc, #32]	; (800b740 <SVCCTL_RegisterSvcHandler+0x30>)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800b726:	4b06      	ldr	r3, [pc, #24]	; (800b740 <SVCCTL_RegisterSvcHandler+0x30>)
 800b728:	791b      	ldrb	r3, [r3, #4]
 800b72a:	3301      	adds	r3, #1
 800b72c:	b2da      	uxtb	r2, r3
 800b72e:	4b04      	ldr	r3, [pc, #16]	; (800b740 <SVCCTL_RegisterSvcHandler+0x30>)
 800b730:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800b732:	bf00      	nop
}
 800b734:	370c      	adds	r7, #12
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop
 800b740:	200000b0 	.word	0x200000b0

0800b744 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b086      	sub	sp, #24
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	3301      	adds	r3, #1
 800b750:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800b752:	2300      	movs	r3, #0
 800b754:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	2bff      	cmp	r3, #255	; 0xff
 800b75c:	d125      	bne.n	800b7aa <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	3302      	adds	r3, #2
 800b762:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	881b      	ldrh	r3, [r3, #0]
 800b768:	b29b      	uxth	r3, r3
 800b76a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b76e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b772:	d118      	bne.n	800b7a6 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800b774:	2300      	movs	r3, #0
 800b776:	757b      	strb	r3, [r7, #21]
 800b778:	e00d      	b.n	800b796 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800b77a:	7d7b      	ldrb	r3, [r7, #21]
 800b77c:	4a1a      	ldr	r2, [pc, #104]	; (800b7e8 <SVCCTL_UserEvtRx+0xa4>)
 800b77e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	4798      	blx	r3
 800b786:	4603      	mov	r3, r0
 800b788:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800b78a:	7dfb      	ldrb	r3, [r7, #23]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d108      	bne.n	800b7a2 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800b790:	7d7b      	ldrb	r3, [r7, #21]
 800b792:	3301      	adds	r3, #1
 800b794:	757b      	strb	r3, [r7, #21]
 800b796:	4b14      	ldr	r3, [pc, #80]	; (800b7e8 <SVCCTL_UserEvtRx+0xa4>)
 800b798:	791b      	ldrb	r3, [r3, #4]
 800b79a:	7d7a      	ldrb	r2, [r7, #21]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d3ec      	bcc.n	800b77a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800b7a0:	e002      	b.n	800b7a8 <SVCCTL_UserEvtRx+0x64>
              break;
 800b7a2:	bf00      	nop
          break;
 800b7a4:	e000      	b.n	800b7a8 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800b7a6:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800b7a8:	e000      	b.n	800b7ac <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800b7aa:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800b7ac:	7dfb      	ldrb	r3, [r7, #23]
 800b7ae:	2b02      	cmp	r3, #2
 800b7b0:	d00f      	beq.n	800b7d2 <SVCCTL_UserEvtRx+0x8e>
 800b7b2:	2b02      	cmp	r3, #2
 800b7b4:	dc10      	bgt.n	800b7d8 <SVCCTL_UserEvtRx+0x94>
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d002      	beq.n	800b7c0 <SVCCTL_UserEvtRx+0x7c>
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d006      	beq.n	800b7cc <SVCCTL_UserEvtRx+0x88>
 800b7be:	e00b      	b.n	800b7d8 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f001 fc8b 	bl	800d0dc <SVCCTL_App_Notification>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	75bb      	strb	r3, [r7, #22]
      break;
 800b7ca:	e008      	b.n	800b7de <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	75bb      	strb	r3, [r7, #22]
      break;
 800b7d0:	e005      	b.n	800b7de <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	75bb      	strb	r3, [r7, #22]
      break;
 800b7d6:	e002      	b.n	800b7de <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	75bb      	strb	r3, [r7, #22]
      break;
 800b7dc:	bf00      	nop
  }

  return (return_status);
 800b7de:	7dbb      	ldrb	r3, [r7, #22]
}
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	3718      	adds	r7, #24
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	bd80      	pop	{r7, pc}
 800b7e8:	200000b0 	.word	0x200000b0

0800b7ec <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b088      	sub	sp, #32
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b7f4:	f107 030c 	add.w	r3, r7, #12
 800b7f8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800b800:	69fb      	ldr	r3, [r7, #28]
 800b802:	212e      	movs	r1, #46	; 0x2e
 800b804:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800b808:	f000 fae8 	bl	800bddc <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b80c:	69fb      	ldr	r3, [r7, #28]
 800b80e:	330b      	adds	r3, #11
 800b810:	78db      	ldrb	r3, [r3, #3]
}
 800b812:	4618      	mov	r0, r3
 800b814:	3720      	adds	r7, #32
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}

0800b81a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800b81a:	b580      	push	{r7, lr}
 800b81c:	b088      	sub	sp, #32
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b822:	f107 030c 	add.w	r3, r7, #12
 800b826:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800b82e:	69fb      	ldr	r3, [r7, #28]
 800b830:	210f      	movs	r1, #15
 800b832:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800b836:	f000 fad1 	bl	800bddc <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b83a:	69fb      	ldr	r3, [r7, #28]
 800b83c:	330b      	adds	r3, #11
 800b83e:	78db      	ldrb	r3, [r3, #3]
}
 800b840:	4618      	mov	r0, r3
 800b842:	3720      	adds	r7, #32
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800b848:	b580      	push	{r7, lr}
 800b84a:	b088      	sub	sp, #32
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b850:	f107 030c 	add.w	r3, r7, #12
 800b854:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800b856:	69fb      	ldr	r3, [r7, #28]
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	2110      	movs	r1, #16
 800b85c:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800b860:	f000 fabc 	bl	800bddc <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b864:	69fb      	ldr	r3, [r7, #28]
 800b866:	330b      	adds	r3, #11
 800b868:	78db      	ldrb	r3, [r3, #3]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3720      	adds	r7, #32
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
	...

0800b874 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800b874:	b480      	push	{r7}
 800b876:	b08b      	sub	sp, #44	; 0x2c
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800b87c:	2300      	movs	r3, #0
 800b87e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800b880:	2300      	movs	r3, #0
 800b882:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800b884:	2300      	movs	r3, #0
 800b886:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800b888:	2300      	movs	r3, #0
 800b88a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800b88c:	2300      	movs	r3, #0
 800b88e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800b890:	2300      	movs	r3, #0
 800b892:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800b894:	2300      	movs	r3, #0
 800b896:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800b898:	2300      	movs	r3, #0
 800b89a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800b89c:	4b4a      	ldr	r3, [pc, #296]	; (800b9c8 <SHCI_GetWirelessFwInfo+0x154>)
 800b89e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b8a4:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b8ae:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800b8b6:	68bb      	ldr	r3, [r7, #8]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	4a44      	ldr	r2, [pc, #272]	; (800b9cc <SHCI_GetWirelessFwInfo+0x158>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d10f      	bne.n	800b8e0 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	695b      	ldr	r3, [r3, #20]
 800b8c4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	699b      	ldr	r3, [r3, #24]
 800b8ca:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800b8cc:	68bb      	ldr	r3, [r7, #8]
 800b8ce:	69db      	ldr	r3, [r3, #28]
 800b8d0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	68db      	ldr	r3, [r3, #12]
 800b8d6:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	691b      	ldr	r3, [r3, #16]
 800b8dc:	617b      	str	r3, [r7, #20]
 800b8de:	e01a      	b.n	800b916 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800b8e0:	693b      	ldr	r3, [r7, #16]
 800b8e2:	009b      	lsls	r3, r3, #2
 800b8e4:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800b8e8:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800b8ec:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	691b      	ldr	r3, [r3, #16]
 800b8f4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	695b      	ldr	r3, [r3, #20]
 800b8fc:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	699b      	ldr	r3, [r3, #24]
 800b904:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	689b      	ldr	r3, [r3, #8]
 800b914:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800b916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b918:	0e1b      	lsrs	r3, r3, #24
 800b91a:	b2da      	uxtb	r2, r3
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800b920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b922:	0c1b      	lsrs	r3, r3, #16
 800b924:	b2da      	uxtb	r2, r3
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800b92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92c:	0a1b      	lsrs	r3, r3, #8
 800b92e:	b2da      	uxtb	r2, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800b934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b936:	091b      	lsrs	r3, r3, #4
 800b938:	b2db      	uxtb	r3, r3
 800b93a:	f003 030f 	and.w	r3, r3, #15
 800b93e:	b2da      	uxtb	r2, r3
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800b944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b946:	b2db      	uxtb	r3, r3
 800b948:	f003 030f 	and.w	r3, r3, #15
 800b94c:	b2da      	uxtb	r2, r3
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800b952:	6a3b      	ldr	r3, [r7, #32]
 800b954:	0e1b      	lsrs	r3, r3, #24
 800b956:	b2da      	uxtb	r2, r3
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800b95c:	6a3b      	ldr	r3, [r7, #32]
 800b95e:	0c1b      	lsrs	r3, r3, #16
 800b960:	b2da      	uxtb	r2, r3
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800b966:	6a3b      	ldr	r3, [r7, #32]
 800b968:	0a1b      	lsrs	r3, r3, #8
 800b96a:	b2da      	uxtb	r2, r3
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800b970:	6a3b      	ldr	r3, [r7, #32]
 800b972:	b2da      	uxtb	r2, r3
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800b978:	69fb      	ldr	r3, [r7, #28]
 800b97a:	b2da      	uxtb	r2, r3
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800b980:	69bb      	ldr	r3, [r7, #24]
 800b982:	0e1b      	lsrs	r3, r3, #24
 800b984:	b2da      	uxtb	r2, r3
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800b98a:	69bb      	ldr	r3, [r7, #24]
 800b98c:	0c1b      	lsrs	r3, r3, #16
 800b98e:	b2da      	uxtb	r2, r3
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800b994:	69bb      	ldr	r3, [r7, #24]
 800b996:	0a1b      	lsrs	r3, r3, #8
 800b998:	b2da      	uxtb	r2, r3
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	0e1b      	lsrs	r3, r3, #24
 800b9a2:	b2da      	uxtb	r2, r3
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	0c1b      	lsrs	r3, r3, #16
 800b9ac:	b2da      	uxtb	r2, r3
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	b2da      	uxtb	r2, r3
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800b9ba:	2300      	movs	r3, #0
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	372c      	adds	r7, #44	; 0x2c
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c6:	4770      	bx	lr
 800b9c8:	58004000 	.word	0x58004000
 800b9cc:	a94656b9 	.word	0xa94656b9

0800b9d0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b9da:	683b      	ldr	r3, [r7, #0]
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	4a08      	ldr	r2, [pc, #32]	; (800ba00 <hci_init+0x30>)
 800b9e0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800b9e2:	4a08      	ldr	r2, [pc, #32]	; (800ba04 <hci_init+0x34>)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800b9e8:	4806      	ldr	r0, [pc, #24]	; (800ba04 <hci_init+0x34>)
 800b9ea:	f000 f979 	bl	800bce0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f000 f8da 	bl	800bbac <TlInit>

  return;
 800b9f8:	bf00      	nop
}
 800b9fa:	3708      	adds	r7, #8
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}
 800ba00:	200005e4 	.word	0x200005e4
 800ba04:	200005bc 	.word	0x200005bc

0800ba08 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800ba0e:	4822      	ldr	r0, [pc, #136]	; (800ba98 <hci_user_evt_proc+0x90>)
 800ba10:	f000 fde8 	bl	800c5e4 <LST_is_empty>
 800ba14:	4603      	mov	r3, r0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d12b      	bne.n	800ba72 <hci_user_evt_proc+0x6a>
 800ba1a:	4b20      	ldr	r3, [pc, #128]	; (800ba9c <hci_user_evt_proc+0x94>)
 800ba1c:	781b      	ldrb	r3, [r3, #0]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d027      	beq.n	800ba72 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800ba22:	f107 030c 	add.w	r3, r7, #12
 800ba26:	4619      	mov	r1, r3
 800ba28:	481b      	ldr	r0, [pc, #108]	; (800ba98 <hci_user_evt_proc+0x90>)
 800ba2a:	f000 fe6a 	bl	800c702 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800ba2e:	4b1c      	ldr	r3, [pc, #112]	; (800baa0 <hci_user_evt_proc+0x98>)
 800ba30:	69db      	ldr	r3, [r3, #28]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d00c      	beq.n	800ba50 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800ba3e:	4b18      	ldr	r3, [pc, #96]	; (800baa0 <hci_user_evt_proc+0x98>)
 800ba40:	69db      	ldr	r3, [r3, #28]
 800ba42:	1d3a      	adds	r2, r7, #4
 800ba44:	4610      	mov	r0, r2
 800ba46:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800ba48:	793a      	ldrb	r2, [r7, #4]
 800ba4a:	4b14      	ldr	r3, [pc, #80]	; (800ba9c <hci_user_evt_proc+0x94>)
 800ba4c:	701a      	strb	r2, [r3, #0]
 800ba4e:	e002      	b.n	800ba56 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800ba50:	4b12      	ldr	r3, [pc, #72]	; (800ba9c <hci_user_evt_proc+0x94>)
 800ba52:	2201      	movs	r2, #1
 800ba54:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800ba56:	4b11      	ldr	r3, [pc, #68]	; (800ba9c <hci_user_evt_proc+0x94>)
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d004      	beq.n	800ba68 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	4618      	mov	r0, r3
 800ba62:	f000 fc0d 	bl	800c280 <TL_MM_EvtDone>
 800ba66:	e004      	b.n	800ba72 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	480a      	ldr	r0, [pc, #40]	; (800ba98 <hci_user_evt_proc+0x90>)
 800ba6e:	f000 fddb 	bl	800c628 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800ba72:	4809      	ldr	r0, [pc, #36]	; (800ba98 <hci_user_evt_proc+0x90>)
 800ba74:	f000 fdb6 	bl	800c5e4 <LST_is_empty>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d107      	bne.n	800ba8e <hci_user_evt_proc+0x86>
 800ba7e:	4b07      	ldr	r3, [pc, #28]	; (800ba9c <hci_user_evt_proc+0x94>)
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d003      	beq.n	800ba8e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800ba86:	4804      	ldr	r0, [pc, #16]	; (800ba98 <hci_user_evt_proc+0x90>)
 800ba88:	f002 f910 	bl	800dcac <hci_notify_asynch_evt>
  }


  return;
 800ba8c:	bf00      	nop
 800ba8e:	bf00      	nop
}
 800ba90:	3710      	adds	r7, #16
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	200000c0 	.word	0x200000c0
 800ba9c:	200000cc 	.word	0x200000cc
 800baa0:	200005bc 	.word	0x200005bc

0800baa4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b088      	sub	sp, #32
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
 800baac:	460b      	mov	r3, r1
 800baae:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800bab0:	2000      	movs	r0, #0
 800bab2:	f000 f8d1 	bl	800bc58 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800bab6:	2300      	movs	r3, #0
 800bab8:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	885b      	ldrh	r3, [r3, #2]
 800babe:	b21b      	sxth	r3, r3
 800bac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bac4:	b21a      	sxth	r2, r3
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	881b      	ldrh	r3, [r3, #0]
 800baca:	029b      	lsls	r3, r3, #10
 800bacc:	b21b      	sxth	r3, r3
 800bace:	4313      	orrs	r3, r2
 800bad0:	b21b      	sxth	r3, r3
 800bad2:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800bad4:	4b33      	ldr	r3, [pc, #204]	; (800bba4 <hci_send_req+0x100>)
 800bad6:	2201      	movs	r2, #1
 800bad8:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	68db      	ldr	r3, [r3, #12]
 800bade:	b2d9      	uxtb	r1, r3
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	689a      	ldr	r2, [r3, #8]
 800bae4:	8bbb      	ldrh	r3, [r7, #28]
 800bae6:	4618      	mov	r0, r3
 800bae8:	f000 f890 	bl	800bc0c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800baec:	e04e      	b.n	800bb8c <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800baee:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800baf2:	f002 f8f2 	bl	800dcda <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800baf6:	e043      	b.n	800bb80 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800baf8:	f107 030c 	add.w	r3, r7, #12
 800bafc:	4619      	mov	r1, r3
 800bafe:	482a      	ldr	r0, [pc, #168]	; (800bba8 <hci_send_req+0x104>)
 800bb00:	f000 fdff 	bl	800c702 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	7a5b      	ldrb	r3, [r3, #9]
 800bb08:	2b0f      	cmp	r3, #15
 800bb0a:	d114      	bne.n	800bb36 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	330b      	adds	r3, #11
 800bb10:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	885b      	ldrh	r3, [r3, #2]
 800bb16:	b29b      	uxth	r3, r3
 800bb18:	8bba      	ldrh	r2, [r7, #28]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d104      	bne.n	800bb28 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	691b      	ldr	r3, [r3, #16]
 800bb22:	693a      	ldr	r2, [r7, #16]
 800bb24:	7812      	ldrb	r2, [r2, #0]
 800bb26:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	785b      	ldrb	r3, [r3, #1]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d027      	beq.n	800bb80 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800bb30:	2301      	movs	r3, #1
 800bb32:	77fb      	strb	r3, [r7, #31]
 800bb34:	e024      	b.n	800bb80 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	330b      	adds	r3, #11
 800bb3a:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800bb3c:	69bb      	ldr	r3, [r7, #24]
 800bb3e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	8bba      	ldrh	r2, [r7, #28]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d114      	bne.n	800bb74 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	7a9b      	ldrb	r3, [r3, #10]
 800bb4e:	3b03      	subs	r3, #3
 800bb50:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	695a      	ldr	r2, [r3, #20]
 800bb56:	7dfb      	ldrb	r3, [r7, #23]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	bfa8      	it	ge
 800bb5c:	461a      	movge	r2, r3
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6918      	ldr	r0, [r3, #16]
 800bb66:	69bb      	ldr	r3, [r7, #24]
 800bb68:	1cd9      	adds	r1, r3, #3
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	695b      	ldr	r3, [r3, #20]
 800bb6e:	461a      	mov	r2, r3
 800bb70:	f003 f99f 	bl	800eeb2 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800bb74:	69bb      	ldr	r3, [r7, #24]
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d001      	beq.n	800bb80 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800bb80:	4809      	ldr	r0, [pc, #36]	; (800bba8 <hci_send_req+0x104>)
 800bb82:	f000 fd2f 	bl	800c5e4 <LST_is_empty>
 800bb86:	4603      	mov	r3, r0
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d0b5      	beq.n	800baf8 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800bb8c:	7ffb      	ldrb	r3, [r7, #31]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d0ad      	beq.n	800baee <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800bb92:	2001      	movs	r0, #1
 800bb94:	f000 f860 	bl	800bc58 <NotifyCmdStatus>

  return 0;
 800bb98:	2300      	movs	r3, #0
}
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	3720      	adds	r7, #32
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	200005e8 	.word	0x200005e8
 800bba8:	200005dc 	.word	0x200005dc

0800bbac <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b086      	sub	sp, #24
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800bbb4:	480f      	ldr	r0, [pc, #60]	; (800bbf4 <TlInit+0x48>)
 800bbb6:	f000 fd05 	bl	800c5c4 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800bbba:	4a0f      	ldr	r2, [pc, #60]	; (800bbf8 <TlInit+0x4c>)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800bbc0:	480e      	ldr	r0, [pc, #56]	; (800bbfc <TlInit+0x50>)
 800bbc2:	f000 fcff 	bl	800c5c4 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800bbc6:	4b0e      	ldr	r3, [pc, #56]	; (800bc00 <TlInit+0x54>)
 800bbc8:	2201      	movs	r2, #1
 800bbca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800bbcc:	4b0d      	ldr	r3, [pc, #52]	; (800bc04 <TlInit+0x58>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d00a      	beq.n	800bbea <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800bbd8:	4b0b      	ldr	r3, [pc, #44]	; (800bc08 <TlInit+0x5c>)
 800bbda:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800bbdc:	4b09      	ldr	r3, [pc, #36]	; (800bc04 <TlInit+0x58>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f107 0208 	add.w	r2, r7, #8
 800bbe4:	4610      	mov	r0, r2
 800bbe6:	4798      	blx	r3
  }

  return;
 800bbe8:	bf00      	nop
 800bbea:	bf00      	nop
}
 800bbec:	3718      	adds	r7, #24
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
 800bbf2:	bf00      	nop
 800bbf4:	200005dc 	.word	0x200005dc
 800bbf8:	200000c8 	.word	0x200000c8
 800bbfc:	200000c0 	.word	0x200000c0
 800bc00:	200000cc 	.word	0x200000cc
 800bc04:	200005bc 	.word	0x200005bc
 800bc08:	0800bc99 	.word	0x0800bc99

0800bc0c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b082      	sub	sp, #8
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	4603      	mov	r3, r0
 800bc14:	603a      	str	r2, [r7, #0]
 800bc16:	80fb      	strh	r3, [r7, #6]
 800bc18:	460b      	mov	r3, r1
 800bc1a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800bc1c:	4b0c      	ldr	r3, [pc, #48]	; (800bc50 <SendCmd+0x44>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	88fa      	ldrh	r2, [r7, #6]
 800bc22:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800bc26:	4b0a      	ldr	r3, [pc, #40]	; (800bc50 <SendCmd+0x44>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	797a      	ldrb	r2, [r7, #5]
 800bc2c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800bc2e:	4b08      	ldr	r3, [pc, #32]	; (800bc50 <SendCmd+0x44>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	330c      	adds	r3, #12
 800bc34:	797a      	ldrb	r2, [r7, #5]
 800bc36:	6839      	ldr	r1, [r7, #0]
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f003 f93a 	bl	800eeb2 <memcpy>

  hciContext.io.Send(0,0);
 800bc3e:	4b05      	ldr	r3, [pc, #20]	; (800bc54 <SendCmd+0x48>)
 800bc40:	691b      	ldr	r3, [r3, #16]
 800bc42:	2100      	movs	r1, #0
 800bc44:	2000      	movs	r0, #0
 800bc46:	4798      	blx	r3

  return;
 800bc48:	bf00      	nop
}
 800bc4a:	3708      	adds	r7, #8
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	200000c8 	.word	0x200000c8
 800bc54:	200005bc 	.word	0x200005bc

0800bc58 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	4603      	mov	r3, r0
 800bc60:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800bc62:	79fb      	ldrb	r3, [r7, #7]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d108      	bne.n	800bc7a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800bc68:	4b0a      	ldr	r3, [pc, #40]	; (800bc94 <NotifyCmdStatus+0x3c>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d00d      	beq.n	800bc8c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800bc70:	4b08      	ldr	r3, [pc, #32]	; (800bc94 <NotifyCmdStatus+0x3c>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	2000      	movs	r0, #0
 800bc76:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800bc78:	e008      	b.n	800bc8c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800bc7a:	4b06      	ldr	r3, [pc, #24]	; (800bc94 <NotifyCmdStatus+0x3c>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d004      	beq.n	800bc8c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800bc82:	4b04      	ldr	r3, [pc, #16]	; (800bc94 <NotifyCmdStatus+0x3c>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2001      	movs	r0, #1
 800bc88:	4798      	blx	r3
  return;
 800bc8a:	bf00      	nop
 800bc8c:	bf00      	nop
}
 800bc8e:	3708      	adds	r7, #8
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	200005e4 	.word	0x200005e4

0800bc98 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	7a5b      	ldrb	r3, [r3, #9]
 800bca4:	2b0f      	cmp	r3, #15
 800bca6:	d003      	beq.n	800bcb0 <TlEvtReceived+0x18>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	7a5b      	ldrb	r3, [r3, #9]
 800bcac:	2b0e      	cmp	r3, #14
 800bcae:	d107      	bne.n	800bcc0 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800bcb0:	6879      	ldr	r1, [r7, #4]
 800bcb2:	4809      	ldr	r0, [pc, #36]	; (800bcd8 <TlEvtReceived+0x40>)
 800bcb4:	f000 fcde 	bl	800c674 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800bcb8:	2000      	movs	r0, #0
 800bcba:	f002 f803 	bl	800dcc4 <hci_cmd_resp_release>
 800bcbe:	e006      	b.n	800bcce <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800bcc0:	6879      	ldr	r1, [r7, #4]
 800bcc2:	4806      	ldr	r0, [pc, #24]	; (800bcdc <TlEvtReceived+0x44>)
 800bcc4:	f000 fcd6 	bl	800c674 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800bcc8:	4804      	ldr	r0, [pc, #16]	; (800bcdc <TlEvtReceived+0x44>)
 800bcca:	f001 ffef 	bl	800dcac <hci_notify_asynch_evt>
  }

  return;
 800bcce:	bf00      	nop
}
 800bcd0:	3708      	adds	r7, #8
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}
 800bcd6:	bf00      	nop
 800bcd8:	200005dc 	.word	0x200005dc
 800bcdc:	200000c0 	.word	0x200000c0

0800bce0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b083      	sub	sp, #12
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4a05      	ldr	r2, [pc, #20]	; (800bd00 <hci_register_io_bus+0x20>)
 800bcec:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	4a04      	ldr	r2, [pc, #16]	; (800bd04 <hci_register_io_bus+0x24>)
 800bcf2:	611a      	str	r2, [r3, #16]

  return;
 800bcf4:	bf00      	nop
}
 800bcf6:	370c      	adds	r7, #12
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr
 800bd00:	0800bff9 	.word	0x0800bff9
 800bd04:	0800c061 	.word	0x0800c061

0800bd08 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	4a08      	ldr	r2, [pc, #32]	; (800bd38 <shci_init+0x30>)
 800bd18:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800bd1a:	4a08      	ldr	r2, [pc, #32]	; (800bd3c <shci_init+0x34>)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800bd20:	4806      	ldr	r0, [pc, #24]	; (800bd3c <shci_init+0x34>)
 800bd22:	f000 f915 	bl	800bf50 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f000 f898 	bl	800be60 <TlInit>

  return;
 800bd30:	bf00      	nop
}
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	2000060c 	.word	0x2000060c
 800bd3c:	200005ec 	.word	0x200005ec

0800bd40 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800bd46:	4822      	ldr	r0, [pc, #136]	; (800bdd0 <shci_user_evt_proc+0x90>)
 800bd48:	f000 fc4c 	bl	800c5e4 <LST_is_empty>
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d12b      	bne.n	800bdaa <shci_user_evt_proc+0x6a>
 800bd52:	4b20      	ldr	r3, [pc, #128]	; (800bdd4 <shci_user_evt_proc+0x94>)
 800bd54:	781b      	ldrb	r3, [r3, #0]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d027      	beq.n	800bdaa <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800bd5a:	f107 030c 	add.w	r3, r7, #12
 800bd5e:	4619      	mov	r1, r3
 800bd60:	481b      	ldr	r0, [pc, #108]	; (800bdd0 <shci_user_evt_proc+0x90>)
 800bd62:	f000 fcce 	bl	800c702 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800bd66:	4b1c      	ldr	r3, [pc, #112]	; (800bdd8 <shci_user_evt_proc+0x98>)
 800bd68:	69db      	ldr	r3, [r3, #28]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d00c      	beq.n	800bd88 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800bd72:	2301      	movs	r3, #1
 800bd74:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800bd76:	4b18      	ldr	r3, [pc, #96]	; (800bdd8 <shci_user_evt_proc+0x98>)
 800bd78:	69db      	ldr	r3, [r3, #28]
 800bd7a:	1d3a      	adds	r2, r7, #4
 800bd7c:	4610      	mov	r0, r2
 800bd7e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800bd80:	793a      	ldrb	r2, [r7, #4]
 800bd82:	4b14      	ldr	r3, [pc, #80]	; (800bdd4 <shci_user_evt_proc+0x94>)
 800bd84:	701a      	strb	r2, [r3, #0]
 800bd86:	e002      	b.n	800bd8e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800bd88:	4b12      	ldr	r3, [pc, #72]	; (800bdd4 <shci_user_evt_proc+0x94>)
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800bd8e:	4b11      	ldr	r3, [pc, #68]	; (800bdd4 <shci_user_evt_proc+0x94>)
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d004      	beq.n	800bda0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f000 fa71 	bl	800c280 <TL_MM_EvtDone>
 800bd9e:	e004      	b.n	800bdaa <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	4619      	mov	r1, r3
 800bda4:	480a      	ldr	r0, [pc, #40]	; (800bdd0 <shci_user_evt_proc+0x90>)
 800bda6:	f000 fc3f 	bl	800c628 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800bdaa:	4809      	ldr	r0, [pc, #36]	; (800bdd0 <shci_user_evt_proc+0x90>)
 800bdac:	f000 fc1a 	bl	800c5e4 <LST_is_empty>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d107      	bne.n	800bdc6 <shci_user_evt_proc+0x86>
 800bdb6:	4b07      	ldr	r3, [pc, #28]	; (800bdd4 <shci_user_evt_proc+0x94>)
 800bdb8:	781b      	ldrb	r3, [r3, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d003      	beq.n	800bdc6 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800bdbe:	4804      	ldr	r0, [pc, #16]	; (800bdd0 <shci_user_evt_proc+0x90>)
 800bdc0:	f7f5 fcd1 	bl	8001766 <shci_notify_asynch_evt>
  }


  return;
 800bdc4:	bf00      	nop
 800bdc6:	bf00      	nop
}
 800bdc8:	3710      	adds	r7, #16
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	200000d0 	.word	0x200000d0
 800bdd4:	200000e0 	.word	0x200000e0
 800bdd8:	200005ec 	.word	0x200005ec

0800bddc <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	60ba      	str	r2, [r7, #8]
 800bde4:	607b      	str	r3, [r7, #4]
 800bde6:	4603      	mov	r3, r0
 800bde8:	81fb      	strh	r3, [r7, #14]
 800bdea:	460b      	mov	r3, r1
 800bdec:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800bdee:	2000      	movs	r0, #0
 800bdf0:	f000 f868 	bl	800bec4 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800bdf4:	4b17      	ldr	r3, [pc, #92]	; (800be54 <shci_send+0x78>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	89fa      	ldrh	r2, [r7, #14]
 800bdfa:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800bdfe:	4b15      	ldr	r3, [pc, #84]	; (800be54 <shci_send+0x78>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	7b7a      	ldrb	r2, [r7, #13]
 800be04:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800be06:	4b13      	ldr	r3, [pc, #76]	; (800be54 <shci_send+0x78>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	330c      	adds	r3, #12
 800be0c:	7b7a      	ldrb	r2, [r7, #13]
 800be0e:	68b9      	ldr	r1, [r7, #8]
 800be10:	4618      	mov	r0, r3
 800be12:	f003 f84e 	bl	800eeb2 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800be16:	4b10      	ldr	r3, [pc, #64]	; (800be58 <shci_send+0x7c>)
 800be18:	2201      	movs	r2, #1
 800be1a:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800be1c:	4b0f      	ldr	r3, [pc, #60]	; (800be5c <shci_send+0x80>)
 800be1e:	691b      	ldr	r3, [r3, #16]
 800be20:	2100      	movs	r1, #0
 800be22:	2000      	movs	r0, #0
 800be24:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800be26:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800be2a:	f7f5 fcb4 	bl	8001796 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f103 0008 	add.w	r0, r3, #8
 800be34:	4b07      	ldr	r3, [pc, #28]	; (800be54 <shci_send+0x78>)
 800be36:	6819      	ldr	r1, [r3, #0]
 800be38:	4b06      	ldr	r3, [pc, #24]	; (800be54 <shci_send+0x78>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	789b      	ldrb	r3, [r3, #2]
 800be3e:	3303      	adds	r3, #3
 800be40:	461a      	mov	r2, r3
 800be42:	f003 f836 	bl	800eeb2 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800be46:	2001      	movs	r0, #1
 800be48:	f000 f83c 	bl	800bec4 <Cmd_SetStatus>

  return;
 800be4c:	bf00      	nop
}
 800be4e:	3710      	adds	r7, #16
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	200000dc 	.word	0x200000dc
 800be58:	20000610 	.word	0x20000610
 800be5c:	200005ec 	.word	0x200005ec

0800be60 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800be68:	4a10      	ldr	r2, [pc, #64]	; (800beac <TlInit+0x4c>)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800be6e:	4810      	ldr	r0, [pc, #64]	; (800beb0 <TlInit+0x50>)
 800be70:	f000 fba8 	bl	800c5c4 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800be74:	2001      	movs	r0, #1
 800be76:	f000 f825 	bl	800bec4 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800be7a:	4b0e      	ldr	r3, [pc, #56]	; (800beb4 <TlInit+0x54>)
 800be7c:	2201      	movs	r2, #1
 800be7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800be80:	4b0d      	ldr	r3, [pc, #52]	; (800beb8 <TlInit+0x58>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d00c      	beq.n	800bea2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800be8c:	4b0b      	ldr	r3, [pc, #44]	; (800bebc <TlInit+0x5c>)
 800be8e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800be90:	4b0b      	ldr	r3, [pc, #44]	; (800bec0 <TlInit+0x60>)
 800be92:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800be94:	4b08      	ldr	r3, [pc, #32]	; (800beb8 <TlInit+0x58>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f107 020c 	add.w	r2, r7, #12
 800be9c:	4610      	mov	r0, r2
 800be9e:	4798      	blx	r3
  }

  return;
 800bea0:	bf00      	nop
 800bea2:	bf00      	nop
}
 800bea4:	3718      	adds	r7, #24
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}
 800beaa:	bf00      	nop
 800beac:	200000dc 	.word	0x200000dc
 800beb0:	200000d0 	.word	0x200000d0
 800beb4:	200000e0 	.word	0x200000e0
 800beb8:	200005ec 	.word	0x200005ec
 800bebc:	0800bf15 	.word	0x0800bf15
 800bec0:	0800bf2d 	.word	0x0800bf2d

0800bec4 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	4603      	mov	r3, r0
 800becc:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800bece:	79fb      	ldrb	r3, [r7, #7]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d10b      	bne.n	800beec <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800bed4:	4b0d      	ldr	r3, [pc, #52]	; (800bf0c <Cmd_SetStatus+0x48>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d003      	beq.n	800bee4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800bedc:	4b0b      	ldr	r3, [pc, #44]	; (800bf0c <Cmd_SetStatus+0x48>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	2000      	movs	r0, #0
 800bee2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800bee4:	4b0a      	ldr	r3, [pc, #40]	; (800bf10 <Cmd_SetStatus+0x4c>)
 800bee6:	2200      	movs	r2, #0
 800bee8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800beea:	e00b      	b.n	800bf04 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800beec:	4b08      	ldr	r3, [pc, #32]	; (800bf10 <Cmd_SetStatus+0x4c>)
 800beee:	2201      	movs	r2, #1
 800bef0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800bef2:	4b06      	ldr	r3, [pc, #24]	; (800bf0c <Cmd_SetStatus+0x48>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d004      	beq.n	800bf04 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800befa:	4b04      	ldr	r3, [pc, #16]	; (800bf0c <Cmd_SetStatus+0x48>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	2001      	movs	r0, #1
 800bf00:	4798      	blx	r3
  return;
 800bf02:	bf00      	nop
 800bf04:	bf00      	nop
}
 800bf06:	3708      	adds	r7, #8
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}
 800bf0c:	2000060c 	.word	0x2000060c
 800bf10:	200000d8 	.word	0x200000d8

0800bf14 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b082      	sub	sp, #8
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800bf1c:	2000      	movs	r0, #0
 800bf1e:	f7f5 fc2f 	bl	8001780 <shci_cmd_resp_release>

  return;
 800bf22:	bf00      	nop
}
 800bf24:	3708      	adds	r7, #8
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
	...

0800bf2c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800bf34:	6879      	ldr	r1, [r7, #4]
 800bf36:	4805      	ldr	r0, [pc, #20]	; (800bf4c <TlUserEvtReceived+0x20>)
 800bf38:	f000 fb9c 	bl	800c674 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800bf3c:	4803      	ldr	r0, [pc, #12]	; (800bf4c <TlUserEvtReceived+0x20>)
 800bf3e:	f7f5 fc12 	bl	8001766 <shci_notify_asynch_evt>

  return;
 800bf42:	bf00      	nop
}
 800bf44:	3708      	adds	r7, #8
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	200000d0 	.word	0x200000d0

0800bf50 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b083      	sub	sp, #12
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	4a05      	ldr	r2, [pc, #20]	; (800bf70 <shci_register_io_bus+0x20>)
 800bf5c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	4a04      	ldr	r2, [pc, #16]	; (800bf74 <shci_register_io_bus+0x24>)
 800bf62:	611a      	str	r2, [r3, #16]

  return;
 800bf64:	bf00      	nop
}
 800bf66:	370c      	adds	r7, #12
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6e:	4770      	bx	lr
 800bf70:	0800c10d 	.word	0x0800c10d
 800bf74:	0800c161 	.word	0x0800c161

0800bf78 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800bf7c:	f002 f9c2 	bl	800e304 <HW_IPCC_Enable>

  return;
 800bf80:	bf00      	nop
}
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <TL_Init>:


void TL_Init( void )
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800bf88:	4b10      	ldr	r3, [pc, #64]	; (800bfcc <TL_Init+0x48>)
 800bf8a:	4a11      	ldr	r2, [pc, #68]	; (800bfd0 <TL_Init+0x4c>)
 800bf8c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800bf8e:	4b0f      	ldr	r3, [pc, #60]	; (800bfcc <TL_Init+0x48>)
 800bf90:	4a10      	ldr	r2, [pc, #64]	; (800bfd4 <TL_Init+0x50>)
 800bf92:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800bf94:	4b0d      	ldr	r3, [pc, #52]	; (800bfcc <TL_Init+0x48>)
 800bf96:	4a10      	ldr	r2, [pc, #64]	; (800bfd8 <TL_Init+0x54>)
 800bf98:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800bf9a:	4b0c      	ldr	r3, [pc, #48]	; (800bfcc <TL_Init+0x48>)
 800bf9c:	4a0f      	ldr	r2, [pc, #60]	; (800bfdc <TL_Init+0x58>)
 800bf9e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800bfa0:	4b0a      	ldr	r3, [pc, #40]	; (800bfcc <TL_Init+0x48>)
 800bfa2:	4a0f      	ldr	r2, [pc, #60]	; (800bfe0 <TL_Init+0x5c>)
 800bfa4:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800bfa6:	4b09      	ldr	r3, [pc, #36]	; (800bfcc <TL_Init+0x48>)
 800bfa8:	4a0e      	ldr	r2, [pc, #56]	; (800bfe4 <TL_Init+0x60>)
 800bfaa:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800bfac:	4b07      	ldr	r3, [pc, #28]	; (800bfcc <TL_Init+0x48>)
 800bfae:	4a0e      	ldr	r2, [pc, #56]	; (800bfe8 <TL_Init+0x64>)
 800bfb0:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800bfb2:	4b06      	ldr	r3, [pc, #24]	; (800bfcc <TL_Init+0x48>)
 800bfb4:	4a0d      	ldr	r2, [pc, #52]	; (800bfec <TL_Init+0x68>)
 800bfb6:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800bfb8:	4b04      	ldr	r3, [pc, #16]	; (800bfcc <TL_Init+0x48>)
 800bfba:	4a0d      	ldr	r2, [pc, #52]	; (800bff0 <TL_Init+0x6c>)
 800bfbc:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800bfbe:	4b03      	ldr	r3, [pc, #12]	; (800bfcc <TL_Init+0x48>)
 800bfc0:	4a0c      	ldr	r2, [pc, #48]	; (800bff4 <TL_Init+0x70>)
 800bfc2:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800bfc4:	f002 f9b2 	bl	800e32c <HW_IPCC_Init>

  return;
 800bfc8:	bf00      	nop
}
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	20030000 	.word	0x20030000
 800bfd0:	20030028 	.word	0x20030028
 800bfd4:	20030048 	.word	0x20030048
 800bfd8:	20030058 	.word	0x20030058
 800bfdc:	20030068 	.word	0x20030068
 800bfe0:	20030070 	.word	0x20030070
 800bfe4:	20030078 	.word	0x20030078
 800bfe8:	20030080 	.word	0x20030080
 800bfec:	2003009c 	.word	0x2003009c
 800bff0:	200300a0 	.word	0x200300a0
 800bff4:	200300ac 	.word	0x200300ac

0800bff8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800c004:	4811      	ldr	r0, [pc, #68]	; (800c04c <TL_BLE_Init+0x54>)
 800c006:	f000 fadd 	bl	800c5c4 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800c00a:	4b11      	ldr	r3, [pc, #68]	; (800c050 <TL_BLE_Init+0x58>)
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	689a      	ldr	r2, [r3, #8]
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	68da      	ldr	r2, [r3, #12]
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	4a0c      	ldr	r2, [pc, #48]	; (800c054 <TL_BLE_Init+0x5c>)
 800c024:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	4a08      	ldr	r2, [pc, #32]	; (800c04c <TL_BLE_Init+0x54>)
 800c02a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800c02c:	f002 f994 	bl	800e358 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4a08      	ldr	r2, [pc, #32]	; (800c058 <TL_BLE_Init+0x60>)
 800c036:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	4a07      	ldr	r2, [pc, #28]	; (800c05c <TL_BLE_Init+0x64>)
 800c03e:	6013      	str	r3, [r2, #0]

  return 0;
 800c040:	2300      	movs	r3, #0
}
 800c042:	4618      	mov	r0, r3
 800c044:	3710      	adds	r7, #16
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	200300c8 	.word	0x200300c8
 800c050:	20030000 	.word	0x20030000
 800c054:	20030a58 	.word	0x20030a58
 800c058:	2000061c 	.word	0x2000061c
 800c05c:	20000620 	.word	0x20000620

0800c060 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b082      	sub	sp, #8
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	460b      	mov	r3, r1
 800c06a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800c06c:	4b09      	ldr	r3, [pc, #36]	; (800c094 <TL_BLE_SendCmd+0x34>)
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	2201      	movs	r2, #1
 800c074:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800c076:	4b07      	ldr	r3, [pc, #28]	; (800c094 <TL_BLE_SendCmd+0x34>)
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4619      	mov	r1, r3
 800c07e:	2001      	movs	r0, #1
 800c080:	f000 f96c 	bl	800c35c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800c084:	f002 f972 	bl	800e36c <HW_IPCC_BLE_SendCmd>

  return 0;
 800c088:	2300      	movs	r3, #0
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3708      	adds	r7, #8
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	20030000 	.word	0x20030000

0800c098 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800c09e:	e01c      	b.n	800c0da <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800c0a0:	1d3b      	adds	r3, r7, #4
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	4812      	ldr	r0, [pc, #72]	; (800c0f0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c0a6:	f000 fb2c 	bl	800c702 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	7a5b      	ldrb	r3, [r3, #9]
 800c0ae:	2b0f      	cmp	r3, #15
 800c0b0:	d003      	beq.n	800c0ba <HW_IPCC_BLE_RxEvtNot+0x22>
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	7a5b      	ldrb	r3, [r3, #9]
 800c0b6:	2b0e      	cmp	r3, #14
 800c0b8:	d105      	bne.n	800c0c6 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	4619      	mov	r1, r3
 800c0be:	2002      	movs	r0, #2
 800c0c0:	f000 f94c 	bl	800c35c <OutputDbgTrace>
 800c0c4:	e004      	b.n	800c0d0 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	2003      	movs	r0, #3
 800c0cc:	f000 f946 	bl	800c35c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800c0d0:	4b08      	ldr	r3, [pc, #32]	; (800c0f4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	4610      	mov	r0, r2
 800c0d8:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800c0da:	4805      	ldr	r0, [pc, #20]	; (800c0f0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800c0dc:	f000 fa82 	bl	800c5e4 <LST_is_empty>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d0dc      	beq.n	800c0a0 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800c0e6:	bf00      	nop
}
 800c0e8:	3708      	adds	r7, #8
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	200300c8 	.word	0x200300c8
 800c0f4:	2000061c 	.word	0x2000061c

0800c0f8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800c0fc:	4b02      	ldr	r3, [pc, #8]	; (800c108 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4798      	blx	r3

  return;
 800c102:	bf00      	nop
}
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	20000620 	.word	0x20000620

0800c10c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	b084      	sub	sp, #16
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800c118:	480d      	ldr	r0, [pc, #52]	; (800c150 <TL_SYS_Init+0x44>)
 800c11a:	f000 fa53 	bl	800c5c4 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800c11e:	4b0d      	ldr	r3, [pc, #52]	; (800c154 <TL_SYS_Init+0x48>)
 800c120:	68db      	ldr	r3, [r3, #12]
 800c122:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	689a      	ldr	r2, [r3, #8]
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	4a08      	ldr	r2, [pc, #32]	; (800c150 <TL_SYS_Init+0x44>)
 800c130:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800c132:	f002 f93d 	bl	800e3b0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a07      	ldr	r2, [pc, #28]	; (800c158 <TL_SYS_Init+0x4c>)
 800c13c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	4a06      	ldr	r2, [pc, #24]	; (800c15c <TL_SYS_Init+0x50>)
 800c144:	6013      	str	r3, [r2, #0]

  return 0;
 800c146:	2300      	movs	r3, #0
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3710      	adds	r7, #16
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	200300d0 	.word	0x200300d0
 800c154:	20030000 	.word	0x20030000
 800c158:	20000624 	.word	0x20000624
 800c15c:	20000628 	.word	0x20000628

0800c160 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	460b      	mov	r3, r1
 800c16a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800c16c:	4b09      	ldr	r3, [pc, #36]	; (800c194 <TL_SYS_SendCmd+0x34>)
 800c16e:	68db      	ldr	r3, [r3, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2210      	movs	r2, #16
 800c174:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800c176:	4b07      	ldr	r3, [pc, #28]	; (800c194 <TL_SYS_SendCmd+0x34>)
 800c178:	68db      	ldr	r3, [r3, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	4619      	mov	r1, r3
 800c17e:	2004      	movs	r0, #4
 800c180:	f000 f8ec 	bl	800c35c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800c184:	f002 f91e 	bl	800e3c4 <HW_IPCC_SYS_SendCmd>

  return 0;
 800c188:	2300      	movs	r3, #0
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3708      	adds	r7, #8
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	20030000 	.word	0x20030000

0800c198 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c19c:	4b07      	ldr	r3, [pc, #28]	; (800c1bc <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c19e:	68db      	ldr	r3, [r3, #12]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4619      	mov	r1, r3
 800c1a4:	2005      	movs	r0, #5
 800c1a6:	f000 f8d9 	bl	800c35c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800c1aa:	4b05      	ldr	r3, [pc, #20]	; (800c1c0 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4a03      	ldr	r2, [pc, #12]	; (800c1bc <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800c1b0:	68d2      	ldr	r2, [r2, #12]
 800c1b2:	6812      	ldr	r2, [r2, #0]
 800c1b4:	4610      	mov	r0, r2
 800c1b6:	4798      	blx	r3

  return;
 800c1b8:	bf00      	nop
}
 800c1ba:	bd80      	pop	{r7, pc}
 800c1bc:	20030000 	.word	0x20030000
 800c1c0:	20000624 	.word	0x20000624

0800c1c4 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b082      	sub	sp, #8
 800c1c8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c1ca:	e00e      	b.n	800c1ea <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800c1cc:	1d3b      	adds	r3, r7, #4
 800c1ce:	4619      	mov	r1, r3
 800c1d0:	480b      	ldr	r0, [pc, #44]	; (800c200 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c1d2:	f000 fa96 	bl	800c702 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	4619      	mov	r1, r3
 800c1da:	2006      	movs	r0, #6
 800c1dc:	f000 f8be 	bl	800c35c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800c1e0:	4b08      	ldr	r3, [pc, #32]	; (800c204 <HW_IPCC_SYS_EvtNot+0x40>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	4610      	mov	r0, r2
 800c1e8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800c1ea:	4805      	ldr	r0, [pc, #20]	; (800c200 <HW_IPCC_SYS_EvtNot+0x3c>)
 800c1ec:	f000 f9fa 	bl	800c5e4 <LST_is_empty>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d0ea      	beq.n	800c1cc <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800c1f6:	bf00      	nop
}
 800c1f8:	3708      	adds	r7, #8
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd80      	pop	{r7, pc}
 800c1fe:	bf00      	nop
 800c200:	200300d0 	.word	0x200300d0
 800c204:	20000628 	.word	0x20000628

0800c208 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800c210:	4817      	ldr	r0, [pc, #92]	; (800c270 <TL_MM_Init+0x68>)
 800c212:	f000 f9d7 	bl	800c5c4 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800c216:	4817      	ldr	r0, [pc, #92]	; (800c274 <TL_MM_Init+0x6c>)
 800c218:	f000 f9d4 	bl	800c5c4 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800c21c:	4b16      	ldr	r3, [pc, #88]	; (800c278 <TL_MM_Init+0x70>)
 800c21e:	691b      	ldr	r3, [r3, #16]
 800c220:	4a16      	ldr	r2, [pc, #88]	; (800c27c <TL_MM_Init+0x74>)
 800c222:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800c224:	4b15      	ldr	r3, [pc, #84]	; (800c27c <TL_MM_Init+0x74>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	6892      	ldr	r2, [r2, #8]
 800c22c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800c22e:	4b13      	ldr	r3, [pc, #76]	; (800c27c <TL_MM_Init+0x74>)
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	68d2      	ldr	r2, [r2, #12]
 800c236:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800c238:	4b10      	ldr	r3, [pc, #64]	; (800c27c <TL_MM_Init+0x74>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a0c      	ldr	r2, [pc, #48]	; (800c270 <TL_MM_Init+0x68>)
 800c23e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800c240:	4b0e      	ldr	r3, [pc, #56]	; (800c27c <TL_MM_Init+0x74>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	687a      	ldr	r2, [r7, #4]
 800c246:	6812      	ldr	r2, [r2, #0]
 800c248:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800c24a:	4b0c      	ldr	r3, [pc, #48]	; (800c27c <TL_MM_Init+0x74>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	6852      	ldr	r2, [r2, #4]
 800c252:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800c254:	4b09      	ldr	r3, [pc, #36]	; (800c27c <TL_MM_Init+0x74>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	6912      	ldr	r2, [r2, #16]
 800c25c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800c25e:	4b07      	ldr	r3, [pc, #28]	; (800c27c <TL_MM_Init+0x74>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	687a      	ldr	r2, [r7, #4]
 800c264:	6952      	ldr	r2, [r2, #20]
 800c266:	619a      	str	r2, [r3, #24]

  return;
 800c268:	bf00      	nop
}
 800c26a:	3708      	adds	r7, #8
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	200300b8 	.word	0x200300b8
 800c274:	20000614 	.word	0x20000614
 800c278:	20030000 	.word	0x20030000
 800c27c:	2000062c 	.word	0x2000062c

0800c280 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800c288:	6879      	ldr	r1, [r7, #4]
 800c28a:	4807      	ldr	r0, [pc, #28]	; (800c2a8 <TL_MM_EvtDone+0x28>)
 800c28c:	f000 f9f2 	bl	800c674 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800c290:	6879      	ldr	r1, [r7, #4]
 800c292:	2000      	movs	r0, #0
 800c294:	f000 f862 	bl	800c35c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800c298:	4804      	ldr	r0, [pc, #16]	; (800c2ac <TL_MM_EvtDone+0x2c>)
 800c29a:	f002 f8b9 	bl	800e410 <HW_IPCC_MM_SendFreeBuf>

  return;
 800c29e:	bf00      	nop
}
 800c2a0:	3708      	adds	r7, #8
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	20000614 	.word	0x20000614
 800c2ac:	0800c2b1 	.word	0x0800c2b1

0800c2b0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c2b6:	e00c      	b.n	800c2d2 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800c2b8:	1d3b      	adds	r3, r7, #4
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	480a      	ldr	r0, [pc, #40]	; (800c2e8 <SendFreeBuf+0x38>)
 800c2be:	f000 fa20 	bl	800c702 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800c2c2:	4b0a      	ldr	r3, [pc, #40]	; (800c2ec <SendFreeBuf+0x3c>)
 800c2c4:	691b      	ldr	r3, [r3, #16]
 800c2c6:	691b      	ldr	r3, [r3, #16]
 800c2c8:	687a      	ldr	r2, [r7, #4]
 800c2ca:	4611      	mov	r1, r2
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f000 f9d1 	bl	800c674 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800c2d2:	4805      	ldr	r0, [pc, #20]	; (800c2e8 <SendFreeBuf+0x38>)
 800c2d4:	f000 f986 	bl	800c5e4 <LST_is_empty>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d0ec      	beq.n	800c2b8 <SendFreeBuf+0x8>
  }

  return;
 800c2de:	bf00      	nop
}
 800c2e0:	3708      	adds	r7, #8
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	20000614 	.word	0x20000614
 800c2ec:	20030000 	.word	0x20030000

0800c2f0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800c2f4:	4805      	ldr	r0, [pc, #20]	; (800c30c <TL_TRACES_Init+0x1c>)
 800c2f6:	f000 f965 	bl	800c5c4 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800c2fa:	4b05      	ldr	r3, [pc, #20]	; (800c310 <TL_TRACES_Init+0x20>)
 800c2fc:	695b      	ldr	r3, [r3, #20]
 800c2fe:	4a03      	ldr	r2, [pc, #12]	; (800c30c <TL_TRACES_Init+0x1c>)
 800c300:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800c302:	f002 f8bb 	bl	800e47c <HW_IPCC_TRACES_Init>

  return;
 800c306:	bf00      	nop
}
 800c308:	bd80      	pop	{r7, pc}
 800c30a:	bf00      	nop
 800c30c:	200300c0 	.word	0x200300c0
 800c310:	20030000 	.word	0x20030000

0800c314 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c31a:	e008      	b.n	800c32e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800c31c:	1d3b      	adds	r3, r7, #4
 800c31e:	4619      	mov	r1, r3
 800c320:	4808      	ldr	r0, [pc, #32]	; (800c344 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c322:	f000 f9ee 	bl	800c702 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	4618      	mov	r0, r3
 800c32a:	f000 f80d 	bl	800c348 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800c32e:	4805      	ldr	r0, [pc, #20]	; (800c344 <HW_IPCC_TRACES_EvtNot+0x30>)
 800c330:	f000 f958 	bl	800c5e4 <LST_is_empty>
 800c334:	4603      	mov	r3, r0
 800c336:	2b00      	cmp	r3, #0
 800c338:	d0f0      	beq.n	800c31c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800c33a:	bf00      	nop
}
 800c33c:	3708      	adds	r7, #8
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}
 800c342:	bf00      	nop
 800c344:	200300c0 	.word	0x200300c0

0800c348 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800c348:	b480      	push	{r7}
 800c34a:	b083      	sub	sp, #12
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800c350:	bf00      	nop
 800c352:	370c      	adds	r7, #12
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr

0800c35c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b085      	sub	sp, #20
 800c360:	af00      	add	r7, sp, #0
 800c362:	4603      	mov	r3, r0
 800c364:	6039      	str	r1, [r7, #0]
 800c366:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800c368:	79fb      	ldrb	r3, [r7, #7]
 800c36a:	2b06      	cmp	r3, #6
 800c36c:	d845      	bhi.n	800c3fa <OutputDbgTrace+0x9e>
 800c36e:	a201      	add	r2, pc, #4	; (adr r2, 800c374 <OutputDbgTrace+0x18>)
 800c370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c374:	0800c391 	.word	0x0800c391
 800c378:	0800c3b5 	.word	0x0800c3b5
 800c37c:	0800c3bb 	.word	0x0800c3bb
 800c380:	0800c3cf 	.word	0x0800c3cf
 800c384:	0800c3db 	.word	0x0800c3db
 800c388:	0800c3e1 	.word	0x0800c3e1
 800c38c:	0800c3ef 	.word	0x0800c3ef
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	7a5b      	ldrb	r3, [r3, #9]
 800c398:	2bff      	cmp	r3, #255	; 0xff
 800c39a:	d005      	beq.n	800c3a8 <OutputDbgTrace+0x4c>
 800c39c:	2bff      	cmp	r3, #255	; 0xff
 800c39e:	dc05      	bgt.n	800c3ac <OutputDbgTrace+0x50>
 800c3a0:	2b0e      	cmp	r3, #14
 800c3a2:	d005      	beq.n	800c3b0 <OutputDbgTrace+0x54>
 800c3a4:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800c3a6:	e001      	b.n	800c3ac <OutputDbgTrace+0x50>
          break;
 800c3a8:	bf00      	nop
 800c3aa:	e027      	b.n	800c3fc <OutputDbgTrace+0xa0>
          break;
 800c3ac:	bf00      	nop
 800c3ae:	e025      	b.n	800c3fc <OutputDbgTrace+0xa0>
          break;
 800c3b0:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800c3b2:	e023      	b.n	800c3fc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c3b8:	e020      	b.n	800c3fc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	7a5b      	ldrb	r3, [r3, #9]
 800c3c2:	2b0e      	cmp	r3, #14
 800c3c4:	d001      	beq.n	800c3ca <OutputDbgTrace+0x6e>
 800c3c6:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c3c8:	e000      	b.n	800c3cc <OutputDbgTrace+0x70>
          break;
 800c3ca:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c3cc:	e016      	b.n	800c3fc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	7a5b      	ldrb	r3, [r3, #9]
 800c3d6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c3d8:	e010      	b.n	800c3fc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c3de:	e00d      	b.n	800c3fc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	7a5b      	ldrb	r3, [r3, #9]
 800c3e8:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c3ea:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c3ec:	e006      	b.n	800c3fc <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	7a5b      	ldrb	r3, [r3, #9]
 800c3f6:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c3f8:	e000      	b.n	800c3fc <OutputDbgTrace+0xa0>

    default:
      break;
 800c3fa:	bf00      	nop
  }

  return;
 800c3fc:	bf00      	nop
}
 800c3fe:	3714      	adds	r7, #20
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr

0800c408 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b086      	sub	sp, #24
 800c40c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c40e:	f3ef 8310 	mrs	r3, PRIMASK
 800c412:	60fb      	str	r3, [r7, #12]
  return(result);
 800c414:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800c416:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c418:	b672      	cpsid	i
}
 800c41a:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800c41c:	1cbb      	adds	r3, r7, #2
 800c41e:	4619      	mov	r1, r3
 800c420:	4812      	ldr	r0, [pc, #72]	; (800c46c <DbgTrace_TxCpltCallback+0x64>)
 800c422:	f000 fbe6 	bl	800cbf2 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800c426:	1cbb      	adds	r3, r7, #2
 800c428:	4619      	mov	r1, r3
 800c42a:	4810      	ldr	r0, [pc, #64]	; (800c46c <DbgTrace_TxCpltCallback+0x64>)
 800c42c:	f000 fcd2 	bl	800cdd4 <CircularQueue_Sense>
 800c430:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d00c      	beq.n	800c452 <DbgTrace_TxCpltCallback+0x4a>
 800c438:	697b      	ldr	r3, [r7, #20]
 800c43a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	f383 8810 	msr	PRIMASK, r3
}
 800c442:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800c444:	887b      	ldrh	r3, [r7, #2]
 800c446:	4a0a      	ldr	r2, [pc, #40]	; (800c470 <DbgTrace_TxCpltCallback+0x68>)
 800c448:	4619      	mov	r1, r3
 800c44a:	6938      	ldr	r0, [r7, #16]
 800c44c:	f7f4 fd93 	bl	8000f76 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800c450:	e008      	b.n	800c464 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800c452:	4b08      	ldr	r3, [pc, #32]	; (800c474 <DbgTrace_TxCpltCallback+0x6c>)
 800c454:	2201      	movs	r2, #1
 800c456:	701a      	strb	r2, [r3, #0]
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f383 8810 	msr	PRIMASK, r3
}
 800c462:	bf00      	nop
}
 800c464:	bf00      	nop
 800c466:	3718      	adds	r7, #24
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	20000630 	.word	0x20000630
 800c470:	0800c409 	.word	0x0800c409
 800c474:	20000029 	.word	0x20000029

0800c478 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b082      	sub	sp, #8
 800c47c:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800c47e:	f7f4 fd74 	bl	8000f6a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800c482:	2302      	movs	r3, #2
 800c484:	9300      	str	r3, [sp, #0]
 800c486:	2300      	movs	r3, #0
 800c488:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c48c:	4903      	ldr	r1, [pc, #12]	; (800c49c <DbgTraceInit+0x24>)
 800c48e:	4804      	ldr	r0, [pc, #16]	; (800c4a0 <DbgTraceInit+0x28>)
 800c490:	f000 f956 	bl	800c740 <CircularQueue_Init>
#endif 
#endif
  return;
 800c494:	bf00      	nop
}
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
 800c49a:	bf00      	nop
 800c49c:	20000650 	.word	0x20000650
 800c4a0:	20000630 	.word	0x20000630

0800c4a4 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b084      	sub	sp, #16
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	60f8      	str	r0, [r7, #12]
 800c4ac:	60b9      	str	r1, [r7, #8]
 800c4ae:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	68b9      	ldr	r1, [r7, #8]
 800c4b4:	68f8      	ldr	r0, [r7, #12]
 800c4b6:	f000 f805 	bl	800c4c4 <DbgTraceWrite>
 800c4ba:	4603      	mov	r3, r0
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3710      	adds	r7, #16
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800c4c4:	b580      	push	{r7, lr}
 800c4c6:	b08a      	sub	sp, #40	; 0x28
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	60f8      	str	r0, [r7, #12]
 800c4cc:	60b9      	str	r1, [r7, #8]
 800c4ce:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c4d4:	f3ef 8310 	mrs	r3, PRIMASK
 800c4d8:	61bb      	str	r3, [r7, #24]
  return(result);
 800c4da:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800c4dc:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4e4:	d102      	bne.n	800c4ec <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	627b      	str	r3, [r7, #36]	; 0x24
 800c4ea:	e037      	b.n	800c55c <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	2b01      	cmp	r3, #1
 800c4f0:	d006      	beq.n	800c500 <DbgTraceWrite+0x3c>
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2b02      	cmp	r3, #2
 800c4f6:	d003      	beq.n	800c500 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800c4f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c4fc:	627b      	str	r3, [r7, #36]	; 0x24
 800c4fe:	e02d      	b.n	800c55c <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d02a      	beq.n	800c55c <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800c50a:	b672      	cpsid	i
}
 800c50c:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	b29a      	uxth	r2, r3
 800c512:	2301      	movs	r3, #1
 800c514:	68b9      	ldr	r1, [r7, #8]
 800c516:	4814      	ldr	r0, [pc, #80]	; (800c568 <DbgTraceWrite+0xa4>)
 800c518:	f000 f944 	bl	800c7a4 <CircularQueue_Add>
 800c51c:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800c51e:	69fb      	ldr	r3, [r7, #28]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d015      	beq.n	800c550 <DbgTraceWrite+0x8c>
 800c524:	4b11      	ldr	r3, [pc, #68]	; (800c56c <DbgTraceWrite+0xa8>)
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	b2db      	uxtb	r3, r3
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d010      	beq.n	800c550 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800c52e:	4b0f      	ldr	r3, [pc, #60]	; (800c56c <DbgTraceWrite+0xa8>)
 800c530:	2200      	movs	r2, #0
 800c532:	701a      	strb	r2, [r3, #0]
 800c534:	6a3b      	ldr	r3, [r7, #32]
 800c536:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	f383 8810 	msr	PRIMASK, r3
}
 800c53e:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	b29b      	uxth	r3, r3
 800c544:	4a0a      	ldr	r2, [pc, #40]	; (800c570 <DbgTraceWrite+0xac>)
 800c546:	4619      	mov	r1, r3
 800c548:	69f8      	ldr	r0, [r7, #28]
 800c54a:	f7f4 fd14 	bl	8000f76 <DbgOutputTraces>
 800c54e:	e005      	b.n	800c55c <DbgTraceWrite+0x98>
 800c550:	6a3b      	ldr	r3, [r7, #32]
 800c552:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	f383 8810 	msr	PRIMASK, r3
}
 800c55a:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800c55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3728      	adds	r7, #40	; 0x28
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop
 800c568:	20000630 	.word	0x20000630
 800c56c:	20000029 	.word	0x20000029
 800c570:	0800c409 	.word	0x0800c409

0800c574 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800c574:	b480      	push	{r7}
 800c576:	b085      	sub	sp, #20
 800c578:	af00      	add	r7, sp, #0
 800c57a:	4603      	mov	r3, r0
 800c57c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800c57e:	4b0f      	ldr	r3, [pc, #60]	; (800c5bc <OTP_Read+0x48>)
 800c580:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c582:	e002      	b.n	800c58a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	3b08      	subs	r3, #8
 800c588:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	3307      	adds	r3, #7
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	79fa      	ldrb	r2, [r7, #7]
 800c592:	429a      	cmp	r2, r3
 800c594:	d003      	beq.n	800c59e <OTP_Read+0x2a>
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	4a09      	ldr	r2, [pc, #36]	; (800c5c0 <OTP_Read+0x4c>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d1f2      	bne.n	800c584 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	3307      	adds	r3, #7
 800c5a2:	781b      	ldrb	r3, [r3, #0]
 800c5a4:	79fa      	ldrb	r2, [r7, #7]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d001      	beq.n	800c5ae <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3714      	adds	r7, #20
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr
 800c5bc:	1fff73f8 	.word	0x1fff73f8
 800c5c0:	1fff7000 	.word	0x1fff7000

0800c5c4 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	687a      	ldr	r2, [r7, #4]
 800c5d6:	605a      	str	r2, [r3, #4]
}
 800c5d8:	bf00      	nop
 800c5da:	370c      	adds	r7, #12
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr

0800c5e4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b087      	sub	sp, #28
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c5ec:	f3ef 8310 	mrs	r3, PRIMASK
 800c5f0:	60fb      	str	r3, [r7, #12]
  return(result);
 800c5f2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c5f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c5f6:	b672      	cpsid	i
}
 800c5f8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	429a      	cmp	r2, r3
 800c602:	d102      	bne.n	800c60a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800c604:	2301      	movs	r3, #1
 800c606:	75fb      	strb	r3, [r7, #23]
 800c608:	e001      	b.n	800c60e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800c60a:	2300      	movs	r3, #0
 800c60c:	75fb      	strb	r3, [r7, #23]
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	f383 8810 	msr	PRIMASK, r3
}
 800c618:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800c61a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	371c      	adds	r7, #28
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr

0800c628 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800c628:	b480      	push	{r7}
 800c62a:	b087      	sub	sp, #28
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c632:	f3ef 8310 	mrs	r3, PRIMASK
 800c636:	60fb      	str	r3, [r7, #12]
  return(result);
 800c638:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c63a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c63c:	b672      	cpsid	i
}
 800c63e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681a      	ldr	r2, [r3, #0]
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	687a      	ldr	r2, [r7, #4]
 800c64c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	683a      	ldr	r2, [r7, #0]
 800c652:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	683a      	ldr	r2, [r7, #0]
 800c65a:	605a      	str	r2, [r3, #4]
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	f383 8810 	msr	PRIMASK, r3
}
 800c666:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c668:	bf00      	nop
 800c66a:	371c      	adds	r7, #28
 800c66c:	46bd      	mov	sp, r7
 800c66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c672:	4770      	bx	lr

0800c674 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800c674:	b480      	push	{r7}
 800c676:	b087      	sub	sp, #28
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c67e:	f3ef 8310 	mrs	r3, PRIMASK
 800c682:	60fb      	str	r3, [r7, #12]
  return(result);
 800c684:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c686:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c688:	b672      	cpsid	i
}
 800c68a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	687a      	ldr	r2, [r7, #4]
 800c690:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	685a      	ldr	r2, [r3, #4]
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	683a      	ldr	r2, [r7, #0]
 800c69e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	685b      	ldr	r3, [r3, #4]
 800c6a4:	683a      	ldr	r2, [r7, #0]
 800c6a6:	601a      	str	r2, [r3, #0]
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	f383 8810 	msr	PRIMASK, r3
}
 800c6b2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c6b4:	bf00      	nop
 800c6b6:	371c      	adds	r7, #28
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr

0800c6c0 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b087      	sub	sp, #28
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c6c8:	f3ef 8310 	mrs	r3, PRIMASK
 800c6cc:	60fb      	str	r3, [r7, #12]
  return(result);
 800c6ce:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c6d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c6d2:	b672      	cpsid	i
}
 800c6d4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	685b      	ldr	r3, [r3, #4]
 800c6da:	687a      	ldr	r2, [r7, #4]
 800c6dc:	6812      	ldr	r2, [r2, #0]
 800c6de:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	6852      	ldr	r2, [r2, #4]
 800c6e8:	605a      	str	r2, [r3, #4]
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	f383 8810 	msr	PRIMASK, r3
}
 800c6f4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c6f6:	bf00      	nop
 800c6f8:	371c      	adds	r7, #28
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr

0800c702 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800c702:	b580      	push	{r7, lr}
 800c704:	b086      	sub	sp, #24
 800c706:	af00      	add	r7, sp, #0
 800c708:	6078      	str	r0, [r7, #4]
 800c70a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c70c:	f3ef 8310 	mrs	r3, PRIMASK
 800c710:	60fb      	str	r3, [r7, #12]
  return(result);
 800c712:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c714:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c716:	b672      	cpsid	i
}
 800c718:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681a      	ldr	r2, [r3, #0]
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	4618      	mov	r0, r3
 800c728:	f7ff ffca 	bl	800c6c0 <LST_remove_node>
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	f383 8810 	msr	PRIMASK, r3
}
 800c736:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c738:	bf00      	nop
 800c73a:	3718      	adds	r7, #24
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bd80      	pop	{r7, pc}

0800c740 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800c740:	b480      	push	{r7}
 800c742:	b085      	sub	sp, #20
 800c744:	af00      	add	r7, sp, #0
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	60b9      	str	r1, [r7, #8]
 800c74a:	607a      	str	r2, [r7, #4]
 800c74c:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	68ba      	ldr	r2, [r7, #8]
 800c752:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	2200      	movs	r2, #0
 800c758:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2200      	movs	r2, #0
 800c75e:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2200      	movs	r2, #0
 800c764:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	2200      	movs	r2, #0
 800c76a:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	887a      	ldrh	r2, [r7, #2]
 800c776:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	7e3a      	ldrb	r2, [r7, #24]
 800c77c:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800c77e:	7e3b      	ldrb	r3, [r7, #24]
 800c780:	f003 0302 	and.w	r3, r3, #2
 800c784:	2b00      	cmp	r3, #0
 800c786:	d006      	beq.n	800c796 <CircularQueue_Init+0x56>
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	891b      	ldrh	r3, [r3, #8]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d002      	beq.n	800c796 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800c790:	f04f 33ff 	mov.w	r3, #4294967295
 800c794:	e000      	b.n	800c798 <CircularQueue_Init+0x58>
  }
  return 0;
 800c796:	2300      	movs	r3, #0
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3714      	adds	r7, #20
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr

0800c7a4 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b08e      	sub	sp, #56	; 0x38
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	60f8      	str	r0, [r7, #12]
 800c7ac:	60b9      	str	r1, [r7, #8]
 800c7ae:	603b      	str	r3, [r7, #0]
 800c7b0:	4613      	mov	r3, r2
 800c7b2:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800c7bc:	2300      	movs	r3, #0
 800c7be:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	891b      	ldrh	r3, [r3, #8]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d101      	bne.n	800c7dc <CircularQueue_Add+0x38>
 800c7d8:	2302      	movs	r3, #2
 800c7da:	e000      	b.n	800c7de <CircularQueue_Add+0x3a>
 800c7dc:	2300      	movs	r3, #0
 800c7de:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	695b      	ldr	r3, [r3, #20]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d02a      	beq.n	800c83e <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	891b      	ldrh	r3, [r3, #8]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d123      	bne.n	800c838 <CircularQueue_Add+0x94>
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681a      	ldr	r2, [r3, #0]
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	691b      	ldr	r3, [r3, #16]
 800c7f8:	4413      	add	r3, r2
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	b29a      	uxth	r2, r3
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	6819      	ldr	r1, [r3, #0]
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	691b      	ldr	r3, [r3, #16]
 800c806:	1c58      	adds	r0, r3, #1
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	685b      	ldr	r3, [r3, #4]
 800c80c:	4298      	cmp	r0, r3
 800c80e:	d306      	bcc.n	800c81e <CircularQueue_Add+0x7a>
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	6918      	ldr	r0, [r3, #16]
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	1ac3      	subs	r3, r0, r3
 800c81a:	3301      	adds	r3, #1
 800c81c:	e002      	b.n	800c824 <CircularQueue_Add+0x80>
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	691b      	ldr	r3, [r3, #16]
 800c822:	3301      	adds	r3, #1
 800c824:	440b      	add	r3, r1
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	b29b      	uxth	r3, r3
 800c82a:	021b      	lsls	r3, r3, #8
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	4413      	add	r3, r2
 800c830:	b29b      	uxth	r3, r3
 800c832:	3302      	adds	r3, #2
 800c834:	b29b      	uxth	r3, r3
 800c836:	e001      	b.n	800c83c <CircularQueue_Add+0x98>
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	891b      	ldrh	r3, [r3, #8]
 800c83c:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	891b      	ldrh	r3, [r3, #8]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d002      	beq.n	800c84c <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	891b      	ldrh	r3, [r3, #8]
 800c84a:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	691a      	ldr	r2, [r3, #16]
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	429a      	cmp	r2, r3
 800c856:	d307      	bcc.n	800c868 <CircularQueue_Add+0xc4>
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	685a      	ldr	r2, [r3, #4]
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	6919      	ldr	r1, [r3, #16]
 800c860:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c862:	440b      	add	r3, r1
 800c864:	1ad3      	subs	r3, r2, r3
 800c866:	e000      	b.n	800c86a <CircularQueue_Add+0xc6>
 800c868:	2300      	movs	r3, #0
 800c86a:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800c86c:	88fa      	ldrh	r2, [r7, #6]
 800c86e:	7ffb      	ldrb	r3, [r7, #31]
 800c870:	4413      	add	r3, r2
 800c872:	461a      	mov	r2, r3
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	fb02 f303 	mul.w	r3, r2, r3
 800c87a:	69ba      	ldr	r2, [r7, #24]
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d80b      	bhi.n	800c898 <CircularQueue_Add+0xf4>
 800c880:	88fa      	ldrh	r2, [r7, #6]
 800c882:	7ffb      	ldrb	r3, [r7, #31]
 800c884:	4413      	add	r3, r2
 800c886:	461a      	mov	r2, r3
 800c888:	69bb      	ldr	r3, [r7, #24]
 800c88a:	fbb3 f1f2 	udiv	r1, r3, r2
 800c88e:	fb01 f202 	mul.w	r2, r1, r2
 800c892:	1a9b      	subs	r3, r3, r2
 800c894:	b2db      	uxtb	r3, r3
 800c896:	e000      	b.n	800c89a <CircularQueue_Add+0xf6>
 800c898:	2300      	movs	r3, #0
 800c89a:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800c89c:	7dfa      	ldrb	r2, [r7, #23]
 800c89e:	7ffb      	ldrb	r3, [r7, #31]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	bf8c      	ite	hi
 800c8a4:	2301      	movhi	r3, #1
 800c8a6:	2300      	movls	r3, #0
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800c8ac:	7fbb      	ldrb	r3, [r7, #30]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d008      	beq.n	800c8c4 <CircularQueue_Add+0x120>
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	7f1b      	ldrb	r3, [r3, #28]
 800c8b6:	f003 0301 	and.w	r3, r3, #1
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d002      	beq.n	800c8c4 <CircularQueue_Add+0x120>
 800c8be:	7dfb      	ldrb	r3, [r7, #23]
 800c8c0:	b29b      	uxth	r3, r3
 800c8c2:	e000      	b.n	800c8c6 <CircularQueue_Add+0x122>
 800c8c4:	8bbb      	ldrh	r3, [r7, #28]
 800c8c6:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800c8c8:	7fbb      	ldrb	r3, [r7, #30]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d008      	beq.n	800c8e0 <CircularQueue_Add+0x13c>
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	7f1b      	ldrb	r3, [r3, #28]
 800c8d2:	f003 0302 	and.w	r3, r3, #2
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d002      	beq.n	800c8e0 <CircularQueue_Add+0x13c>
 800c8da:	7ffb      	ldrb	r3, [r7, #31]
 800c8dc:	b29b      	uxth	r3, r3
 800c8de:	e000      	b.n	800c8e2 <CircularQueue_Add+0x13e>
 800c8e0:	8bbb      	ldrh	r3, [r7, #28]
 800c8e2:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800c8e4:	88fb      	ldrh	r3, [r7, #6]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	f000 817e 	beq.w	800cbe8 <CircularQueue_Add+0x444>
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	695a      	ldr	r2, [r3, #20]
 800c8f0:	88f9      	ldrh	r1, [r7, #6]
 800c8f2:	7ffb      	ldrb	r3, [r7, #31]
 800c8f4:	440b      	add	r3, r1
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	fb01 f303 	mul.w	r3, r1, r3
 800c8fe:	441a      	add	r2, r3
 800c900:	8bbb      	ldrh	r3, [r7, #28]
 800c902:	441a      	add	r2, r3
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	429a      	cmp	r2, r3
 800c90a:	f200 816d 	bhi.w	800cbe8 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800c90e:	2300      	movs	r3, #0
 800c910:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c912:	e14a      	b.n	800cbaa <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	691a      	ldr	r2, [r3, #16]
 800c918:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c91a:	441a      	add	r2, r3
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	685b      	ldr	r3, [r3, #4]
 800c920:	429a      	cmp	r2, r3
 800c922:	d307      	bcc.n	800c934 <CircularQueue_Add+0x190>
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	691a      	ldr	r2, [r3, #16]
 800c928:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c92a:	441a      	add	r2, r3
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	685b      	ldr	r3, [r3, #4]
 800c930:	1ad3      	subs	r3, r2, r3
 800c932:	e003      	b.n	800c93c <CircularQueue_Add+0x198>
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	691a      	ldr	r2, [r3, #16]
 800c938:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c93a:	4413      	add	r3, r2
 800c93c:	68fa      	ldr	r2, [r7, #12]
 800c93e:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	691b      	ldr	r3, [r3, #16]
 800c944:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	891b      	ldrh	r3, [r3, #8]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d130      	bne.n	800c9b0 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c954:	1c59      	adds	r1, r3, #1
 800c956:	6339      	str	r1, [r7, #48]	; 0x30
 800c958:	4413      	add	r3, r2
 800c95a:	88fa      	ldrh	r2, [r7, #6]
 800c95c:	b2d2      	uxtb	r2, r2
 800c95e:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c966:	429a      	cmp	r2, r3
 800c968:	d304      	bcc.n	800c974 <CircularQueue_Add+0x1d0>
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c970:	1ad3      	subs	r3, r2, r3
 800c972:	e000      	b.n	800c976 <CircularQueue_Add+0x1d2>
 800c974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c976:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800c978:	88fb      	ldrh	r3, [r7, #6]
 800c97a:	0a1b      	lsrs	r3, r3, #8
 800c97c:	b298      	uxth	r0, r3
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681a      	ldr	r2, [r3, #0]
 800c982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c984:	1c59      	adds	r1, r3, #1
 800c986:	6339      	str	r1, [r7, #48]	; 0x30
 800c988:	4413      	add	r3, r2
 800c98a:	b2c2      	uxtb	r2, r0
 800c98c:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	685b      	ldr	r3, [r3, #4]
 800c992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c994:	429a      	cmp	r2, r3
 800c996:	d304      	bcc.n	800c9a2 <CircularQueue_Add+0x1fe>
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c99e:	1ad3      	subs	r3, r2, r3
 800c9a0:	e000      	b.n	800c9a4 <CircularQueue_Add+0x200>
 800c9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a4:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	695b      	ldr	r3, [r3, #20]
 800c9aa:	1c9a      	adds	r2, r3, #2
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800c9b0:	88fa      	ldrh	r2, [r7, #6]
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	6859      	ldr	r1, [r3, #4]
 800c9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9b8:	1acb      	subs	r3, r1, r3
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	bf28      	it	cs
 800c9be:	4613      	movcs	r3, r2
 800c9c0:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800c9c2:	88fb      	ldrh	r3, [r7, #6]
 800c9c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9c6:	429a      	cmp	r2, r3
 800c9c8:	d007      	beq.n	800c9da <CircularQueue_Add+0x236>
 800c9ca:	88fb      	ldrh	r3, [r7, #6]
 800c9cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d225      	bcs.n	800ca1e <CircularQueue_Add+0x27a>
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	7f1b      	ldrb	r3, [r3, #28]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d121      	bne.n	800ca1e <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e0:	18d0      	adds	r0, r2, r3
 800c9e2:	88fb      	ldrh	r3, [r7, #6]
 800c9e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9e6:	fb02 f303 	mul.w	r3, r2, r3
 800c9ea:	68ba      	ldr	r2, [r7, #8]
 800c9ec:	4413      	add	r3, r2
 800c9ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	f002 fa5e 	bl	800eeb2 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	695a      	ldr	r2, [r3, #20]
 800c9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fc:	441a      	add	r2, r3
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800ca02:	2300      	movs	r3, #0
 800ca04:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800ca06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca08:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800ca0a:	88fa      	ldrh	r2, [r7, #6]
 800ca0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca0e:	1ad3      	subs	r3, r2, r3
 800ca10:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800ca12:	7ffb      	ldrb	r3, [r7, #31]
 800ca14:	b29a      	uxth	r2, r3
 800ca16:	88fb      	ldrh	r3, [r7, #6]
 800ca18:	4413      	add	r3, r2
 800ca1a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ca1c:	e0a4      	b.n	800cb68 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800ca1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	f000 80a1 	beq.w	800cb68 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	7f1b      	ldrb	r3, [r3, #28]
 800ca2a:	f003 0301 	and.w	r3, r3, #1
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d03a      	beq.n	800caa8 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	891b      	ldrh	r3, [r3, #8]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d10d      	bne.n	800ca56 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681a      	ldr	r2, [r3, #0]
 800ca3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca40:	3b02      	subs	r3, #2
 800ca42:	4413      	add	r3, r2
 800ca44:	22ff      	movs	r2, #255	; 0xff
 800ca46:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	681a      	ldr	r2, [r3, #0]
 800ca4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca4e:	3b01      	subs	r3, #1
 800ca50:	4413      	add	r3, r2
 800ca52:	22ff      	movs	r2, #255	; 0xff
 800ca54:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	695a      	ldr	r2, [r3, #20]
 800ca5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5c:	441a      	add	r2, r3
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800ca62:	2300      	movs	r3, #0
 800ca64:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800ca66:	88fb      	ldrh	r3, [r7, #6]
 800ca68:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	891b      	ldrh	r3, [r3, #8]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d16f      	bne.n	800cb56 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	681a      	ldr	r2, [r3, #0]
 800ca7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7c:	1c59      	adds	r1, r3, #1
 800ca7e:	6339      	str	r1, [r7, #48]	; 0x30
 800ca80:	4413      	add	r3, r2
 800ca82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca84:	b2d2      	uxtb	r2, r2
 800ca86:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800ca88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca8a:	0a18      	lsrs	r0, r3, #8
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681a      	ldr	r2, [r3, #0]
 800ca90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca92:	1c59      	adds	r1, r3, #1
 800ca94:	6339      	str	r1, [r7, #48]	; 0x30
 800ca96:	4413      	add	r3, r2
 800ca98:	b2c2      	uxtb	r2, r0
 800ca9a:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	695b      	ldr	r3, [r3, #20]
 800caa0:	1c9a      	adds	r2, r3, #2
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	615a      	str	r2, [r3, #20]
 800caa6:	e056      	b.n	800cb56 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	7f1b      	ldrb	r3, [r3, #28]
 800caac:	f003 0302 	and.w	r3, r3, #2
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d050      	beq.n	800cb56 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	891b      	ldrh	r3, [r3, #8]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d14a      	bne.n	800cb52 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	681a      	ldr	r2, [r3, #0]
 800cac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cac2:	3b02      	subs	r3, #2
 800cac4:	4413      	add	r3, r2
 800cac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cac8:	b2d2      	uxtb	r2, r2
 800caca:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800cacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cace:	0a19      	lsrs	r1, r3, #8
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	681a      	ldr	r2, [r3, #0]
 800cad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad6:	3b01      	subs	r3, #1
 800cad8:	4413      	add	r3, r2
 800cada:	b2ca      	uxtb	r2, r1
 800cadc:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681a      	ldr	r2, [r3, #0]
 800cae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cae4:	18d0      	adds	r0, r2, r3
 800cae6:	88fb      	ldrh	r3, [r7, #6]
 800cae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800caea:	fb02 f303 	mul.w	r3, r2, r3
 800caee:	68ba      	ldr	r2, [r7, #8]
 800caf0:	4413      	add	r3, r2
 800caf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800caf4:	4619      	mov	r1, r3
 800caf6:	f002 f9dc 	bl	800eeb2 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	695a      	ldr	r2, [r3, #20]
 800cafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb00:	441a      	add	r2, r3
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800cb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb08:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800cb0a:	88fa      	ldrh	r2, [r7, #6]
 800cb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb0e:	1ad3      	subs	r3, r2, r3
 800cb10:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	699b      	ldr	r3, [r3, #24]
 800cb16:	1c5a      	adds	r2, r3, #1
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb26:	1c59      	adds	r1, r3, #1
 800cb28:	6339      	str	r1, [r7, #48]	; 0x30
 800cb2a:	4413      	add	r3, r2
 800cb2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb2e:	b2d2      	uxtb	r2, r2
 800cb30:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800cb32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb34:	0a18      	lsrs	r0, r3, #8
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3c:	1c59      	adds	r1, r3, #1
 800cb3e:	6339      	str	r1, [r7, #48]	; 0x30
 800cb40:	4413      	add	r3, r2
 800cb42:	b2c2      	uxtb	r2, r0
 800cb44:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	695b      	ldr	r3, [r3, #20]
 800cb4a:	1c9a      	adds	r2, r3, #2
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	615a      	str	r2, [r3, #20]
 800cb50:	e001      	b.n	800cb56 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800cb52:	2300      	movs	r3, #0
 800cb54:	e049      	b.n	800cbea <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800cb56:	7ffb      	ldrb	r3, [r7, #31]
 800cb58:	b29a      	uxth	r2, r3
 800cb5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb5c:	b29b      	uxth	r3, r3
 800cb5e:	4413      	add	r3, r2
 800cb60:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	2200      	movs	r2, #0
 800cb66:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800cb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d015      	beq.n	800cb9a <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	681a      	ldr	r2, [r3, #0]
 800cb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb74:	18d0      	adds	r0, r2, r3
 800cb76:	88fb      	ldrh	r3, [r7, #6]
 800cb78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb7a:	fb03 f202 	mul.w	r2, r3, r2
 800cb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb80:	4413      	add	r3, r2
 800cb82:	68ba      	ldr	r2, [r7, #8]
 800cb84:	4413      	add	r3, r2
 800cb86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb88:	4619      	mov	r1, r3
 800cb8a:	f002 f992 	bl	800eeb2 <memcpy>
        q->byteCount += NbBytesToCopy;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	695a      	ldr	r2, [r3, #20]
 800cb92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb94:	441a      	add	r2, r3
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	699b      	ldr	r3, [r3, #24]
 800cb9e:	1c5a      	adds	r2, r3, #1
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800cba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba6:	3301      	adds	r3, #1
 800cba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	f4ff aeb0 	bcc.w	800c914 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	681a      	ldr	r2, [r3, #0]
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	6919      	ldr	r1, [r3, #16]
 800cbbc:	7ffb      	ldrb	r3, [r7, #31]
 800cbbe:	4419      	add	r1, r3
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	4299      	cmp	r1, r3
 800cbc6:	d307      	bcc.n	800cbd8 <CircularQueue_Add+0x434>
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	6919      	ldr	r1, [r3, #16]
 800cbcc:	7ffb      	ldrb	r3, [r7, #31]
 800cbce:	4419      	add	r1, r3
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	1acb      	subs	r3, r1, r3
 800cbd6:	e003      	b.n	800cbe0 <CircularQueue_Add+0x43c>
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	6919      	ldr	r1, [r3, #16]
 800cbdc:	7ffb      	ldrb	r3, [r7, #31]
 800cbde:	440b      	add	r3, r1
 800cbe0:	4413      	add	r3, r2
 800cbe2:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800cbe4:	6a3b      	ldr	r3, [r7, #32]
 800cbe6:	e000      	b.n	800cbea <CircularQueue_Add+0x446>
    return NULL;
 800cbe8:	2300      	movs	r3, #0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3738      	adds	r7, #56	; 0x38
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bd80      	pop	{r7, pc}

0800cbf2 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800cbf2:	b480      	push	{r7}
 800cbf4:	b085      	sub	sp, #20
 800cbf6:	af00      	add	r7, sp, #0
 800cbf8:	6078      	str	r0, [r7, #4]
 800cbfa:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800cc00:	2300      	movs	r3, #0
 800cc02:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	891b      	ldrh	r3, [r3, #8]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d101      	bne.n	800cc10 <CircularQueue_Remove+0x1e>
 800cc0c:	2302      	movs	r3, #2
 800cc0e:	e000      	b.n	800cc12 <CircularQueue_Remove+0x20>
 800cc10:	2300      	movs	r3, #0
 800cc12:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800cc14:	2300      	movs	r3, #0
 800cc16:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	695b      	ldr	r3, [r3, #20]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	f000 80cc 	beq.w	800cdba <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	891b      	ldrh	r3, [r3, #8]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d121      	bne.n	800cc6e <CircularQueue_Remove+0x7c>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681a      	ldr	r2, [r3, #0]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	68db      	ldr	r3, [r3, #12]
 800cc32:	4413      	add	r3, r2
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	b29a      	uxth	r2, r3
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6819      	ldr	r1, [r3, #0]
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	68db      	ldr	r3, [r3, #12]
 800cc40:	1c58      	adds	r0, r3, #1
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	4298      	cmp	r0, r3
 800cc48:	d306      	bcc.n	800cc58 <CircularQueue_Remove+0x66>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	68d8      	ldr	r0, [r3, #12]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	685b      	ldr	r3, [r3, #4]
 800cc52:	1ac3      	subs	r3, r0, r3
 800cc54:	3301      	adds	r3, #1
 800cc56:	e002      	b.n	800cc5e <CircularQueue_Remove+0x6c>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	68db      	ldr	r3, [r3, #12]
 800cc5c:	3301      	adds	r3, #1
 800cc5e:	440b      	add	r3, r1
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	b29b      	uxth	r3, r3
 800cc64:	021b      	lsls	r3, r3, #8
 800cc66:	b29b      	uxth	r3, r3
 800cc68:	4413      	add	r3, r2
 800cc6a:	b29b      	uxth	r3, r3
 800cc6c:	e001      	b.n	800cc72 <CircularQueue_Remove+0x80>
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	891b      	ldrh	r3, [r3, #8]
 800cc72:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	7f1b      	ldrb	r3, [r3, #28]
 800cc78:	f003 0301 	and.w	r3, r3, #1
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d057      	beq.n	800cd30 <CircularQueue_Remove+0x13e>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	7f1b      	ldrb	r3, [r3, #28]
 800cc84:	f003 0302 	and.w	r3, r3, #2
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d151      	bne.n	800cd30 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800cc8c:	897b      	ldrh	r3, [r7, #10]
 800cc8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d103      	bne.n	800cc9e <CircularQueue_Remove+0xac>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	891b      	ldrh	r3, [r3, #8]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d012      	beq.n	800ccc4 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	68da      	ldr	r2, [r3, #12]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d942      	bls.n	800cd30 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	891b      	ldrh	r3, [r3, #8]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d03e      	beq.n	800cd30 <CircularQueue_Remove+0x13e>
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	685a      	ldr	r2, [r3, #4]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	68db      	ldr	r3, [r3, #12]
 800ccba:	1ad3      	subs	r3, r2, r3
 800ccbc:	687a      	ldr	r2, [r7, #4]
 800ccbe:	8912      	ldrh	r2, [r2, #8]
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d235      	bcs.n	800cd30 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	695a      	ldr	r2, [r3, #20]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	68d9      	ldr	r1, [r3, #12]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	1acb      	subs	r3, r1, r3
 800ccd2:	441a      	add	r2, r3
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	891b      	ldrh	r3, [r3, #8]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d121      	bne.n	800cd2a <CircularQueue_Remove+0x138>
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681a      	ldr	r2, [r3, #0]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	68db      	ldr	r3, [r3, #12]
 800ccee:	4413      	add	r3, r2
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	b29a      	uxth	r2, r3
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6819      	ldr	r1, [r3, #0]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	68db      	ldr	r3, [r3, #12]
 800ccfc:	1c58      	adds	r0, r3, #1
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	4298      	cmp	r0, r3
 800cd04:	d306      	bcc.n	800cd14 <CircularQueue_Remove+0x122>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	68d8      	ldr	r0, [r3, #12]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	1ac3      	subs	r3, r0, r3
 800cd10:	3301      	adds	r3, #1
 800cd12:	e002      	b.n	800cd1a <CircularQueue_Remove+0x128>
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	68db      	ldr	r3, [r3, #12]
 800cd18:	3301      	adds	r3, #1
 800cd1a:	440b      	add	r3, r1
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	021b      	lsls	r3, r3, #8
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	4413      	add	r3, r2
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	e001      	b.n	800cd2e <CircularQueue_Remove+0x13c>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	891b      	ldrh	r3, [r3, #8]
 800cd2e:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681a      	ldr	r2, [r3, #0]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	68d9      	ldr	r1, [r3, #12]
 800cd38:	7a7b      	ldrb	r3, [r7, #9]
 800cd3a:	4419      	add	r1, r3
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	4299      	cmp	r1, r3
 800cd42:	d307      	bcc.n	800cd54 <CircularQueue_Remove+0x162>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	68d9      	ldr	r1, [r3, #12]
 800cd48:	7a7b      	ldrb	r3, [r7, #9]
 800cd4a:	4419      	add	r1, r3
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	1acb      	subs	r3, r1, r3
 800cd52:	e003      	b.n	800cd5c <CircularQueue_Remove+0x16a>
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	68d9      	ldr	r1, [r3, #12]
 800cd58:	7a7b      	ldrb	r3, [r7, #9]
 800cd5a:	440b      	add	r3, r1
 800cd5c:	4413      	add	r3, r2
 800cd5e:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	695b      	ldr	r3, [r3, #20]
 800cd64:	8979      	ldrh	r1, [r7, #10]
 800cd66:	7a7a      	ldrb	r2, [r7, #9]
 800cd68:	440a      	add	r2, r1
 800cd6a:	1a9a      	subs	r2, r3, r2
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	695b      	ldr	r3, [r3, #20]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d01b      	beq.n	800cdb0 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	68da      	ldr	r2, [r3, #12]
 800cd7c:	897b      	ldrh	r3, [r7, #10]
 800cd7e:	441a      	add	r2, r3
 800cd80:	7a7b      	ldrb	r3, [r7, #9]
 800cd82:	441a      	add	r2, r3
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	d309      	bcc.n	800cda0 <CircularQueue_Remove+0x1ae>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	68da      	ldr	r2, [r3, #12]
 800cd90:	897b      	ldrh	r3, [r7, #10]
 800cd92:	441a      	add	r2, r3
 800cd94:	7a7b      	ldrb	r3, [r7, #9]
 800cd96:	441a      	add	r2, r3
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	1ad3      	subs	r3, r2, r3
 800cd9e:	e005      	b.n	800cdac <CircularQueue_Remove+0x1ba>
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	68da      	ldr	r2, [r3, #12]
 800cda4:	897b      	ldrh	r3, [r7, #10]
 800cda6:	441a      	add	r2, r3
 800cda8:	7a7b      	ldrb	r3, [r7, #9]
 800cdaa:	4413      	add	r3, r2
 800cdac:	687a      	ldr	r2, [r7, #4]
 800cdae:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	699b      	ldr	r3, [r3, #24]
 800cdb4:	1e5a      	subs	r2, r3, #1
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d002      	beq.n	800cdc6 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	897a      	ldrh	r2, [r7, #10]
 800cdc4:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800cdc6:	68fb      	ldr	r3, [r7, #12]
}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3714      	adds	r7, #20
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr

0800cdd4 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b087      	sub	sp, #28
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800cdde:	2300      	movs	r3, #0
 800cde0:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800cde2:	2300      	movs	r3, #0
 800cde4:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	891b      	ldrh	r3, [r3, #8]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d101      	bne.n	800cdf2 <CircularQueue_Sense+0x1e>
 800cdee:	2302      	movs	r3, #2
 800cdf0:	e000      	b.n	800cdf4 <CircularQueue_Sense+0x20>
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	695b      	ldr	r3, [r3, #20]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	f000 8090 	beq.w	800cf28 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	68db      	ldr	r3, [r3, #12]
 800ce0c:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	891b      	ldrh	r3, [r3, #8]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d121      	bne.n	800ce5a <CircularQueue_Sense+0x86>
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681a      	ldr	r2, [r3, #0]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	68db      	ldr	r3, [r3, #12]
 800ce1e:	4413      	add	r3, r2
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	b29a      	uxth	r2, r3
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6819      	ldr	r1, [r3, #0]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	68db      	ldr	r3, [r3, #12]
 800ce2c:	1c58      	adds	r0, r3, #1
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	4298      	cmp	r0, r3
 800ce34:	d306      	bcc.n	800ce44 <CircularQueue_Sense+0x70>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	68d8      	ldr	r0, [r3, #12]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	685b      	ldr	r3, [r3, #4]
 800ce3e:	1ac3      	subs	r3, r0, r3
 800ce40:	3301      	adds	r3, #1
 800ce42:	e002      	b.n	800ce4a <CircularQueue_Sense+0x76>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	68db      	ldr	r3, [r3, #12]
 800ce48:	3301      	adds	r3, #1
 800ce4a:	440b      	add	r3, r1
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	b29b      	uxth	r3, r3
 800ce50:	021b      	lsls	r3, r3, #8
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	4413      	add	r3, r2
 800ce56:	b29b      	uxth	r3, r3
 800ce58:	e001      	b.n	800ce5e <CircularQueue_Sense+0x8a>
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	891b      	ldrh	r3, [r3, #8]
 800ce5e:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	7f1b      	ldrb	r3, [r3, #28]
 800ce64:	f003 0301 	and.w	r3, r3, #1
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d048      	beq.n	800cefe <CircularQueue_Sense+0x12a>
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	7f1b      	ldrb	r3, [r3, #28]
 800ce70:	f003 0302 	and.w	r3, r3, #2
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d142      	bne.n	800cefe <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800ce78:	8a7b      	ldrh	r3, [r7, #18]
 800ce7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d103      	bne.n	800ce8a <CircularQueue_Sense+0xb6>
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	891b      	ldrh	r3, [r3, #8]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d012      	beq.n	800ceb0 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	68da      	ldr	r2, [r3, #12]
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d933      	bls.n	800cefe <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	891b      	ldrh	r3, [r3, #8]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d02f      	beq.n	800cefe <CircularQueue_Sense+0x12a>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	685a      	ldr	r2, [r3, #4]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	68db      	ldr	r3, [r3, #12]
 800cea6:	1ad3      	subs	r3, r2, r3
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	8912      	ldrh	r2, [r2, #8]
 800ceac:	4293      	cmp	r3, r2
 800ceae:	d226      	bcs.n	800cefe <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	891b      	ldrh	r3, [r3, #8]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d11d      	bne.n	800cef8 <CircularQueue_Sense+0x124>
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681a      	ldr	r2, [r3, #0]
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	4413      	add	r3, r2
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	b29a      	uxth	r2, r3
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6819      	ldr	r1, [r3, #0]
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	1c58      	adds	r0, r3, #1
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	685b      	ldr	r3, [r3, #4]
 800ced4:	4298      	cmp	r0, r3
 800ced6:	d305      	bcc.n	800cee4 <CircularQueue_Sense+0x110>
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	685b      	ldr	r3, [r3, #4]
 800cedc:	68f8      	ldr	r0, [r7, #12]
 800cede:	1ac3      	subs	r3, r0, r3
 800cee0:	3301      	adds	r3, #1
 800cee2:	e001      	b.n	800cee8 <CircularQueue_Sense+0x114>
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	3301      	adds	r3, #1
 800cee8:	440b      	add	r3, r1
 800ceea:	781b      	ldrb	r3, [r3, #0]
 800ceec:	b29b      	uxth	r3, r3
 800ceee:	021b      	lsls	r3, r3, #8
 800cef0:	b29b      	uxth	r3, r3
 800cef2:	4413      	add	r3, r2
 800cef4:	b29b      	uxth	r3, r3
 800cef6:	e001      	b.n	800cefc <CircularQueue_Sense+0x128>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	891b      	ldrh	r3, [r3, #8]
 800cefc:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681a      	ldr	r2, [r3, #0]
 800cf02:	7af9      	ldrb	r1, [r7, #11]
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	4419      	add	r1, r3
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	685b      	ldr	r3, [r3, #4]
 800cf0c:	4299      	cmp	r1, r3
 800cf0e:	d306      	bcc.n	800cf1e <CircularQueue_Sense+0x14a>
 800cf10:	7af9      	ldrb	r1, [r7, #11]
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	4419      	add	r1, r3
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	685b      	ldr	r3, [r3, #4]
 800cf1a:	1acb      	subs	r3, r1, r3
 800cf1c:	e002      	b.n	800cf24 <CircularQueue_Sense+0x150>
 800cf1e:	7af9      	ldrb	r1, [r7, #11]
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	440b      	add	r3, r1
 800cf24:	4413      	add	r3, r2
 800cf26:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d002      	beq.n	800cf34 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	8a7a      	ldrh	r2, [r7, #18]
 800cf32:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800cf34:	697b      	ldr	r3, [r7, #20]
}
 800cf36:	4618      	mov	r0, r3
 800cf38:	371c      	adds	r7, #28
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf40:	4770      	bx	lr
	...

0800cf44 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800cf44:	b480      	push	{r7}
 800cf46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800cf48:	4b03      	ldr	r3, [pc, #12]	; (800cf58 <LL_FLASH_GetUDN+0x14>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf54:	4770      	bx	lr
 800cf56:	bf00      	nop
 800cf58:	1fff7580 	.word	0x1fff7580

0800cf5c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800cf60:	4b03      	ldr	r3, [pc, #12]	; (800cf70 <LL_FLASH_GetDeviceID+0x14>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	b2db      	uxtb	r3, r3
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr
 800cf70:	1fff7584 	.word	0x1fff7584

0800cf74 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800cf74:	b480      	push	{r7}
 800cf76:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800cf78:	4b03      	ldr	r3, [pc, #12]	; (800cf88 <LL_FLASH_GetSTCompanyID+0x14>)
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	0a1b      	lsrs	r3, r3, #8
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	46bd      	mov	sp, r7
 800cf82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf86:	4770      	bx	lr
 800cf88:	1fff7584 	.word	0x1fff7584

0800cf8c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800cf8c:	b5b0      	push	{r4, r5, r7, lr}
 800cf8e:	b090      	sub	sp, #64	; 0x40
 800cf90:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800cf92:	2392      	movs	r3, #146	; 0x92
 800cf94:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800cf98:	4b3f      	ldr	r3, [pc, #252]	; (800d098 <APP_BLE_Init+0x10c>)
 800cf9a:	1d3c      	adds	r4, r7, #4
 800cf9c:	461d      	mov	r5, r3
 800cf9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cfa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cfa2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cfa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cfa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cfa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cfaa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cfae:	c403      	stmia	r4!, {r0, r1}
 800cfb0:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800cfb2:	f000 fb0b 	bl	800d5cc <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800cfb6:	2101      	movs	r1, #1
 800cfb8:	2002      	movs	r0, #2
 800cfba:	f001 fa87 	bl	800e4cc <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800cfbe:	4a37      	ldr	r2, [pc, #220]	; (800d09c <APP_BLE_Init+0x110>)
 800cfc0:	2100      	movs	r1, #0
 800cfc2:	2004      	movs	r0, #4
 800cfc4:	f001 fbae 	bl	800e724 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800cfc8:	1d3b      	adds	r3, r7, #4
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7fe fc0e 	bl	800b7ec <SHCI_C2_BLE_Init>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800cfd6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d008      	beq.n	800cff0 <APP_BLE_Init+0x64>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800cfde:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800cfe2:	4619      	mov	r1, r3
 800cfe4:	482e      	ldr	r0, [pc, #184]	; (800d0a0 <APP_BLE_Init+0x114>)
 800cfe6:	f001 fda1 	bl	800eb2c <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800cfea:	f7f6 f90f 	bl	800320c <Error_Handler>
 800cfee:	e002      	b.n	800cff6 <APP_BLE_Init+0x6a>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800cff0:	482c      	ldr	r0, [pc, #176]	; (800d0a4 <APP_BLE_Init+0x118>)
 800cff2:	f001 fd9b 	bl	800eb2c <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800cff6:	f000 faff 	bl	800d5f8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800cffa:	f7fe fb51 	bl	800b6a0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800cffe:	4b2a      	ldr	r3, [pc, #168]	; (800d0a8 <APP_BLE_Init+0x11c>)
 800d000:	2200      	movs	r2, #0
 800d002:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800d006:	4b28      	ldr	r3, [pc, #160]	; (800d0a8 <APP_BLE_Init+0x11c>)
 800d008:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d00c:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800d00e:	4a27      	ldr	r2, [pc, #156]	; (800d0ac <APP_BLE_Init+0x120>)
 800d010:	2100      	movs	r1, #0
 800d012:	2001      	movs	r0, #1
 800d014:	f001 fb86 	bl	800e724 <UTIL_SEQ_RegTask>
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_UPDATE_REG_ID, UTIL_SEQ_RFU, Connection_Interval_Update_Req);
 800d018:	4a25      	ldr	r2, [pc, #148]	; (800d0b0 <APP_BLE_Init+0x124>)
 800d01a:	2100      	movs	r1, #0
 800d01c:	2002      	movs	r0, #2
 800d01e:	f001 fb81 	bl	800e724 <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800d022:	2006      	movs	r0, #6
 800d024:	f7fd ff65 	bl	800aef2 <aci_hal_set_radio_activity_mask>
 800d028:	4603      	mov	r3, r0
 800d02a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800d02e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d032:	2b00      	cmp	r3, #0
 800d034:	d006      	beq.n	800d044 <APP_BLE_Init+0xb8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800d036:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d03a:	4619      	mov	r1, r3
 800d03c:	481d      	ldr	r0, [pc, #116]	; (800d0b4 <APP_BLE_Init+0x128>)
 800d03e:	f001 fd75 	bl	800eb2c <iprintf>
 800d042:	e002      	b.n	800d04a <APP_BLE_Init+0xbe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800d044:	481c      	ldr	r0, [pc, #112]	; (800d0b8 <APP_BLE_Init+0x12c>)
 800d046:	f001 fd71 	bl	800eb2c <iprintf>
  }
#endif /* RADIO_ACTIVITY_EVENT != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  index_con_int = 0;
 800d04a:	4b1c      	ldr	r3, [pc, #112]	; (800d0bc <APP_BLE_Init+0x130>)
 800d04c:	2200      	movs	r2, #0
 800d04e:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 800d050:	4b1b      	ldr	r3, [pc, #108]	; (800d0c0 <APP_BLE_Init+0x134>)
 800d052:	2201      	movs	r2, #1
 800d054:	701a      	strb	r2, [r3, #0]
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800d056:	f000 ff19 	bl	800de8c <P2PS_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800d05a:	4b1a      	ldr	r3, [pc, #104]	; (800d0c4 <APP_BLE_Init+0x138>)
 800d05c:	2200      	movs	r2, #0
 800d05e:	491a      	ldr	r1, [pc, #104]	; (800d0c8 <APP_BLE_Init+0x13c>)
 800d060:	2000      	movs	r0, #0
 800d062:	f7f5 fb0d 	bl	8002680 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800d066:	4b19      	ldr	r3, [pc, #100]	; (800d0cc <APP_BLE_Init+0x140>)
 800d068:	2200      	movs	r2, #0
 800d06a:	4919      	ldr	r1, [pc, #100]	; (800d0d0 <APP_BLE_Init+0x144>)
 800d06c:	2000      	movs	r0, #0
 800d06e:	f7f5 fb07 	bl	8002680 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800d072:	4b0d      	ldr	r3, [pc, #52]	; (800d0a8 <APP_BLE_Init+0x11c>)
 800d074:	2200      	movs	r2, #0
 800d076:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800d078:	4b0b      	ldr	r3, [pc, #44]	; (800d0a8 <APP_BLE_Init+0x11c>)
 800d07a:	2200      	movs	r2, #0
 800d07c:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800d07e:	4b15      	ldr	r3, [pc, #84]	; (800d0d4 <APP_BLE_Init+0x148>)
 800d080:	2280      	movs	r2, #128	; 0x80
 800d082:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800d084:	4b14      	ldr	r3, [pc, #80]	; (800d0d8 <APP_BLE_Init+0x14c>)
 800d086:	22a0      	movs	r2, #160	; 0xa0
 800d088:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800d08a:	2001      	movs	r0, #1
 800d08c:	f000 fc64 	bl	800d958 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800d090:	bf00      	nop
}
 800d092:	3740      	adds	r7, #64	; 0x40
 800d094:	46bd      	mov	sp, r7
 800d096:	bdb0      	pop	{r4, r5, r7, pc}
 800d098:	0800feb8 	.word	0x0800feb8
 800d09c:	0800ba09 	.word	0x0800ba09
 800d0a0:	0800fddc 	.word	0x0800fddc
 800d0a4:	0800fe14 	.word	0x0800fe14
 800d0a8:	20001658 	.word	0x20001658
 800d0ac:	0800db39 	.word	0x0800db39
 800d0b0:	0800dc81 	.word	0x0800dc81
 800d0b4:	0800fe3c 	.word	0x0800fe3c
 800d0b8:	0800fe80 	.word	0x0800fe80
 800d0bc:	200016e4 	.word	0x200016e4
 800d0c0:	200016e5 	.word	0x200016e5
 800d0c4:	0800db99 	.word	0x0800db99
 800d0c8:	200016d9 	.word	0x200016d9
 800d0cc:	0800dba9 	.word	0x0800dba9
 800d0d0:	200016da 	.word	0x200016da
 800d0d4:	200016dc 	.word	0x200016dc
 800d0d8:	200016de 	.word	0x200016de

0800d0dc <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800d0dc:	b5b0      	push	{r4, r5, r7, lr}
 800d0de:	b090      	sub	sp, #64	; 0x40
 800d0e0:	af04      	add	r7, sp, #16
 800d0e2:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800d0e4:	2392      	movs	r3, #146	; 0x92
 800d0e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (p_event_pckt->evt)
 800d0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f2:	781b      	ldrb	r3, [r3, #0]
 800d0f4:	2bff      	cmp	r3, #255	; 0xff
 800d0f6:	f000 8120 	beq.w	800d33a <SVCCTL_App_Notification+0x25e>
 800d0fa:	2bff      	cmp	r3, #255	; 0xff
 800d0fc:	f300 8222 	bgt.w	800d544 <SVCCTL_App_Notification+0x468>
 800d100:	2b05      	cmp	r3, #5
 800d102:	d002      	beq.n	800d10a <SVCCTL_App_Notification+0x2e>
 800d104:	2b3e      	cmp	r3, #62	; 0x3e
 800d106:	d02e      	beq.n	800d166 <SVCCTL_App_Notification+0x8a>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800d108:	e21c      	b.n	800d544 <SVCCTL_App_Notification+0x468>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800d10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10c:	3302      	adds	r3, #2
 800d10e:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d116:	b29a      	uxth	r2, r3
 800d118:	4bb3      	ldr	r3, [pc, #716]	; (800d3e8 <SVCCTL_App_Notification+0x30c>)
 800d11a:	8adb      	ldrh	r3, [r3, #22]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d114      	bne.n	800d14a <SVCCTL_App_Notification+0x6e>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800d120:	4bb1      	ldr	r3, [pc, #708]	; (800d3e8 <SVCCTL_App_Notification+0x30c>)
 800d122:	2200      	movs	r2, #0
 800d124:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800d126:	4bb0      	ldr	r3, [pc, #704]	; (800d3e8 <SVCCTL_App_Notification+0x30c>)
 800d128:	2200      	movs	r2, #0
 800d12a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800d12e:	48af      	ldr	r0, [pc, #700]	; (800d3ec <SVCCTL_App_Notification+0x310>)
 800d130:	f001 fd6a 	bl	800ec08 <puts>
                    p_disconnection_complete_event->Connection_Handle,
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d13a:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800d13c:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800d142:	461a      	mov	r2, r3
 800d144:	48aa      	ldr	r0, [pc, #680]	; (800d3f0 <SVCCTL_App_Notification+0x314>)
 800d146:	f001 fcf1 	bl	800eb2c <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800d14a:	2001      	movs	r0, #1
 800d14c:	f000 fc04 	bl	800d958 <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800d150:	4ba8      	ldr	r3, [pc, #672]	; (800d3f4 <SVCCTL_App_Notification+0x318>)
 800d152:	2201      	movs	r2, #1
 800d154:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800d156:	4ba4      	ldr	r3, [pc, #656]	; (800d3e8 <SVCCTL_App_Notification+0x30c>)
 800d158:	8ada      	ldrh	r2, [r3, #22]
 800d15a:	4ba6      	ldr	r3, [pc, #664]	; (800d3f4 <SVCCTL_App_Notification+0x318>)
 800d15c:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 800d15e:	48a5      	ldr	r0, [pc, #660]	; (800d3f4 <SVCCTL_App_Notification+0x318>)
 800d160:	f000 fe80 	bl	800de64 <P2PS_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800d164:	e1f1      	b.n	800d54a <SVCCTL_App_Notification+0x46e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800d166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d168:	3302      	adds	r3, #2
 800d16a:	61fb      	str	r3, [r7, #28]
      switch (p_meta_evt->subevent)
 800d16c:	69fb      	ldr	r3, [r7, #28]
 800d16e:	781b      	ldrb	r3, [r3, #0]
 800d170:	2b0c      	cmp	r3, #12
 800d172:	d033      	beq.n	800d1dc <SVCCTL_App_Notification+0x100>
 800d174:	2b0c      	cmp	r3, #12
 800d176:	f300 80de 	bgt.w	800d336 <SVCCTL_App_Notification+0x25a>
 800d17a:	2b01      	cmp	r3, #1
 800d17c:	d06c      	beq.n	800d258 <SVCCTL_App_Notification+0x17c>
 800d17e:	2b03      	cmp	r3, #3
 800d180:	f040 80d9 	bne.w	800d336 <SVCCTL_App_Notification+0x25a>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800d184:	69fb      	ldr	r3, [r7, #28]
 800d186:	3301      	adds	r3, #1
 800d188:	617b      	str	r3, [r7, #20]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800d18a:	489b      	ldr	r0, [pc, #620]	; (800d3f8 <SVCCTL_App_Notification+0x31c>)
 800d18c:	f001 fd3c 	bl	800ec08 <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d196:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800d198:	4618      	mov	r0, r3
 800d19a:	f7f3 f9ab 	bl	80004f4 <__aeabi_i2d>
 800d19e:	f04f 0200 	mov.w	r2, #0
 800d1a2:	4b96      	ldr	r3, [pc, #600]	; (800d3fc <SVCCTL_App_Notification+0x320>)
 800d1a4:	f7f3 fa10 	bl	80005c8 <__aeabi_dmul>
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	4610      	mov	r0, r2
 800d1ae:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800d1b6:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800d1b8:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800d1c4:	4613      	mov	r3, r2
 800d1c6:	009b      	lsls	r3, r3, #2
 800d1c8:	4413      	add	r3, r2
 800d1ca:	005b      	lsls	r3, r3, #1
 800d1cc:	9301      	str	r3, [sp, #4]
 800d1ce:	9400      	str	r4, [sp, #0]
 800d1d0:	4602      	mov	r2, r0
 800d1d2:	460b      	mov	r3, r1
 800d1d4:	488a      	ldr	r0, [pc, #552]	; (800d400 <SVCCTL_App_Notification+0x324>)
 800d1d6:	f001 fca9 	bl	800eb2c <iprintf>
          break;
 800d1da:	e0ad      	b.n	800d338 <SVCCTL_App_Notification+0x25c>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 800d1dc:	69fb      	ldr	r3, [r7, #28]
 800d1de:	3301      	adds	r3, #1
 800d1e0:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG("==>> HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE - ");
 800d1e2:	4888      	ldr	r0, [pc, #544]	; (800d404 <SVCCTL_App_Notification+0x328>)
 800d1e4:	f001 fca2 	bl	800eb2c <iprintf>
          if (p_evt_le_phy_update_complete->Status == 0)
 800d1e8:	69bb      	ldr	r3, [r7, #24]
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d103      	bne.n	800d1f8 <SVCCTL_App_Notification+0x11c>
            APP_DBG_MSG("status ok \n");
 800d1f0:	4885      	ldr	r0, [pc, #532]	; (800d408 <SVCCTL_App_Notification+0x32c>)
 800d1f2:	f001 fd09 	bl	800ec08 <puts>
 800d1f6:	e002      	b.n	800d1fe <SVCCTL_App_Notification+0x122>
            APP_DBG_MSG("status nok \n");
 800d1f8:	4884      	ldr	r0, [pc, #528]	; (800d40c <SVCCTL_App_Notification+0x330>)
 800d1fa:	f001 fd05 	bl	800ec08 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 800d1fe:	4b7a      	ldr	r3, [pc, #488]	; (800d3e8 <SVCCTL_App_Notification+0x30c>)
 800d200:	8adb      	ldrh	r3, [r3, #22]
 800d202:	f107 020a 	add.w	r2, r7, #10
 800d206:	f107 010b 	add.w	r1, r7, #11
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7fd fee9 	bl	800afe2 <hci_le_read_phy>
 800d210:	4603      	mov	r3, r0
 800d212:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800d216:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d003      	beq.n	800d226 <SVCCTL_App_Notification+0x14a>
            APP_DBG_MSG("==>> hci_le_read_phy : fail\n\r");
 800d21e:	487c      	ldr	r0, [pc, #496]	; (800d410 <SVCCTL_App_Notification+0x334>)
 800d220:	f001 fc84 	bl	800eb2c <iprintf>
          break;
 800d224:	e088      	b.n	800d338 <SVCCTL_App_Notification+0x25c>
            APP_DBG_MSG("==>> hci_le_read_phy - Success \n");
 800d226:	487b      	ldr	r0, [pc, #492]	; (800d414 <SVCCTL_App_Notification+0x338>)
 800d228:	f001 fcee 	bl	800ec08 <puts>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 800d22c:	7afb      	ldrb	r3, [r7, #11]
 800d22e:	2b02      	cmp	r3, #2
 800d230:	d10a      	bne.n	800d248 <SVCCTL_App_Notification+0x16c>
 800d232:	7abb      	ldrb	r3, [r7, #10]
 800d234:	2b02      	cmp	r3, #2
 800d236:	d107      	bne.n	800d248 <SVCCTL_App_Notification+0x16c>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 800d238:	7afb      	ldrb	r3, [r7, #11]
 800d23a:	4619      	mov	r1, r3
 800d23c:	7abb      	ldrb	r3, [r7, #10]
 800d23e:	461a      	mov	r2, r3
 800d240:	4875      	ldr	r0, [pc, #468]	; (800d418 <SVCCTL_App_Notification+0x33c>)
 800d242:	f001 fc73 	bl	800eb2c <iprintf>
          break;
 800d246:	e077      	b.n	800d338 <SVCCTL_App_Notification+0x25c>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 800d248:	7afb      	ldrb	r3, [r7, #11]
 800d24a:	4619      	mov	r1, r3
 800d24c:	7abb      	ldrb	r3, [r7, #10]
 800d24e:	461a      	mov	r2, r3
 800d250:	4871      	ldr	r0, [pc, #452]	; (800d418 <SVCCTL_App_Notification+0x33c>)
 800d252:	f001 fc6b 	bl	800eb2c <iprintf>
          break;
 800d256:	e06f      	b.n	800d338 <SVCCTL_App_Notification+0x25c>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800d258:	69fb      	ldr	r3, [r7, #28]
 800d25a:	3301      	adds	r3, #1
 800d25c:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800d25e:	4b62      	ldr	r3, [pc, #392]	; (800d3e8 <SVCCTL_App_Notification+0x30c>)
 800d260:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d264:	4618      	mov	r0, r3
 800d266:	f7f5 fa85 	bl	8002774 <HW_TS_Stop>
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d270:	b29b      	uxth	r3, r3
 800d272:	4619      	mov	r1, r3
 800d274:	4869      	ldr	r0, [pc, #420]	; (800d41c <SVCCTL_App_Notification+0x340>)
 800d276:	f001 fc59 	bl	800eb2c <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800d27e:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 800d280:	693b      	ldr	r3, [r7, #16]
 800d282:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800d284:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800d28a:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800d290:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800d296:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800d29c:	9302      	str	r3, [sp, #8]
 800d29e:	9101      	str	r1, [sp, #4]
 800d2a0:	9200      	str	r2, [sp, #0]
 800d2a2:	462b      	mov	r3, r5
 800d2a4:	4622      	mov	r2, r4
 800d2a6:	4601      	mov	r1, r0
 800d2a8:	485d      	ldr	r0, [pc, #372]	; (800d420 <SVCCTL_App_Notification+0x344>)
 800d2aa:	f001 fc3f 	bl	800eb2c <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800d2b4:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f7f3 f91c 	bl	80004f4 <__aeabi_i2d>
 800d2bc:	f04f 0200 	mov.w	r2, #0
 800d2c0:	4b4e      	ldr	r3, [pc, #312]	; (800d3fc <SVCCTL_App_Notification+0x320>)
 800d2c2:	f7f3 f981 	bl	80005c8 <__aeabi_dmul>
 800d2c6:	4602      	mov	r2, r0
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	4610      	mov	r0, r2
 800d2cc:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800d2d4:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800d2d6:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 800d2d8:	693b      	ldr	r3, [r7, #16]
 800d2da:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800d2de:	b29b      	uxth	r3, r3
 800d2e0:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800d2e2:	4613      	mov	r3, r2
 800d2e4:	009b      	lsls	r3, r3, #2
 800d2e6:	4413      	add	r3, r2
 800d2e8:	005b      	lsls	r3, r3, #1
 800d2ea:	9301      	str	r3, [sp, #4]
 800d2ec:	9400      	str	r4, [sp, #0]
 800d2ee:	4602      	mov	r2, r0
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	4843      	ldr	r0, [pc, #268]	; (800d400 <SVCCTL_App_Notification+0x324>)
 800d2f4:	f001 fc1a 	bl	800eb2c <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800d2f8:	4b3b      	ldr	r3, [pc, #236]	; (800d3e8 <SVCCTL_App_Notification+0x30c>)
 800d2fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d2fe:	2b04      	cmp	r3, #4
 800d300:	d104      	bne.n	800d30c <SVCCTL_App_Notification+0x230>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800d302:	4b39      	ldr	r3, [pc, #228]	; (800d3e8 <SVCCTL_App_Notification+0x30c>)
 800d304:	2206      	movs	r2, #6
 800d306:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800d30a:	e003      	b.n	800d314 <SVCCTL_App_Notification+0x238>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800d30c:	4b36      	ldr	r3, [pc, #216]	; (800d3e8 <SVCCTL_App_Notification+0x30c>)
 800d30e:	2205      	movs	r2, #5
 800d310:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d31a:	b29a      	uxth	r2, r3
 800d31c:	4b32      	ldr	r3, [pc, #200]	; (800d3e8 <SVCCTL_App_Notification+0x30c>)
 800d31e:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800d320:	4b34      	ldr	r3, [pc, #208]	; (800d3f4 <SVCCTL_App_Notification+0x318>)
 800d322:	2200      	movs	r2, #0
 800d324:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800d326:	4b30      	ldr	r3, [pc, #192]	; (800d3e8 <SVCCTL_App_Notification+0x30c>)
 800d328:	8ada      	ldrh	r2, [r3, #22]
 800d32a:	4b32      	ldr	r3, [pc, #200]	; (800d3f4 <SVCCTL_App_Notification+0x318>)
 800d32c:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 800d32e:	4831      	ldr	r0, [pc, #196]	; (800d3f4 <SVCCTL_App_Notification+0x318>)
 800d330:	f000 fd98 	bl	800de64 <P2PS_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800d334:	e000      	b.n	800d338 <SVCCTL_App_Notification+0x25c>
          break;
 800d336:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800d338:	e107      	b.n	800d54a <SVCCTL_App_Notification+0x46e>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800d33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33c:	3302      	adds	r3, #2
 800d33e:	627b      	str	r3, [r7, #36]	; 0x24
      switch (p_blecore_evt->ecode)
 800d340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d342:	881b      	ldrh	r3, [r3, #0]
 800d344:	b29b      	uxth	r3, r3
 800d346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d34a:	f000 80e7 	beq.w	800d51c <SVCCTL_App_Notification+0x440>
 800d34e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d352:	f300 80f9 	bgt.w	800d548 <SVCCTL_App_Notification+0x46c>
 800d356:	2b04      	cmp	r3, #4
 800d358:	f000 80e8 	beq.w	800d52c <SVCCTL_App_Notification+0x450>
 800d35c:	2b04      	cmp	r3, #4
 800d35e:	f2c0 80f3 	blt.w	800d548 <SVCCTL_App_Notification+0x46c>
 800d362:	f240 420a 	movw	r2, #1034	; 0x40a
 800d366:	4293      	cmp	r3, r2
 800d368:	f300 80ee 	bgt.w	800d548 <SVCCTL_App_Notification+0x46c>
 800d36c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d370:	f2c0 80ea 	blt.w	800d548 <SVCCTL_App_Notification+0x46c>
 800d374:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800d378:	2b0a      	cmp	r3, #10
 800d37a:	f200 80e5 	bhi.w	800d548 <SVCCTL_App_Notification+0x46c>
 800d37e:	a201      	add	r2, pc, #4	; (adr r2, 800d384 <SVCCTL_App_Notification+0x2a8>)
 800d380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d384:	0800d3b1 	.word	0x0800d3b1
 800d388:	0800d4e7 	.word	0x0800d4e7
 800d38c:	0800d3b9 	.word	0x0800d3b9
 800d390:	0800d43d 	.word	0x0800d43d
 800d394:	0800d445 	.word	0x0800d445
 800d398:	0800d44d 	.word	0x0800d44d
 800d39c:	0800d549 	.word	0x0800d549
 800d3a0:	0800d525 	.word	0x0800d525
 800d3a4:	0800d481 	.word	0x0800d481
 800d3a8:	0800d491 	.word	0x0800d491
 800d3ac:	0800d489 	.word	0x0800d489
          APP_DBG_MSG(">>== ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE \n");
 800d3b0:	481c      	ldr	r0, [pc, #112]	; (800d424 <SVCCTL_App_Notification+0x348>)
 800d3b2:	f001 fc29 	bl	800ec08 <puts>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 800d3b6:	e0c4      	b.n	800d542 <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800d3b8:	481b      	ldr	r0, [pc, #108]	; (800d428 <SVCCTL_App_Notification+0x34c>)
 800d3ba:	f001 fc25 	bl	800ec08 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,123456);
 800d3be:	4b0a      	ldr	r3, [pc, #40]	; (800d3e8 <SVCCTL_App_Notification+0x30c>)
 800d3c0:	8adb      	ldrh	r3, [r3, #22]
 800d3c2:	491a      	ldr	r1, [pc, #104]	; (800d42c <SVCCTL_App_Notification+0x350>)
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7fc ff97 	bl	800a2f8 <aci_gap_pass_key_resp>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800d3d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d02d      	beq.n	800d434 <SVCCTL_App_Notification+0x358>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800d3d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d3dc:	4619      	mov	r1, r3
 800d3de:	4814      	ldr	r0, [pc, #80]	; (800d430 <SVCCTL_App_Notification+0x354>)
 800d3e0:	f001 fba4 	bl	800eb2c <iprintf>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 800d3e4:	e0ad      	b.n	800d542 <SVCCTL_App_Notification+0x466>
 800d3e6:	bf00      	nop
 800d3e8:	20001658 	.word	0x20001658
 800d3ec:	0800fef4 	.word	0x0800fef4
 800d3f0:	0800ff20 	.word	0x0800ff20
 800d3f4:	200016e0 	.word	0x200016e0
 800d3f8:	0800ff5c 	.word	0x0800ff5c
 800d3fc:	3ff40000 	.word	0x3ff40000
 800d400:	0800ff90 	.word	0x0800ff90
 800d404:	0800fffc 	.word	0x0800fffc
 800d408:	0801002c 	.word	0x0801002c
 800d40c:	08010038 	.word	0x08010038
 800d410:	08010044 	.word	0x08010044
 800d414:	08010064 	.word	0x08010064
 800d418:	08010084 	.word	0x08010084
 800d41c:	080100a8 	.word	0x080100a8
 800d420:	080100f0 	.word	0x080100f0
 800d424:	08010140 	.word	0x08010140
 800d428:	08010170 	.word	0x08010170
 800d42c:	0001e240 	.word	0x0001e240
 800d430:	08010198 	.word	0x08010198
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800d434:	4847      	ldr	r0, [pc, #284]	; (800d554 <SVCCTL_App_Notification+0x478>)
 800d436:	f001 fbe7 	bl	800ec08 <puts>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 800d43a:	e082      	b.n	800d542 <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG(">>== ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE\n");
 800d43c:	4846      	ldr	r0, [pc, #280]	; (800d558 <SVCCTL_App_Notification+0x47c>)
 800d43e:	f001 fbe3 	bl	800ec08 <puts>
          break; /* ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE */
 800d442:	e07e      	b.n	800d542 <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG("==>> ACI_GAP_PERIPHERAL_SECURITY_INITIATED_VSEVT_CODE \n");
 800d444:	4845      	ldr	r0, [pc, #276]	; (800d55c <SVCCTL_App_Notification+0x480>)
 800d446:	f001 fbdf 	bl	800ec08 <puts>
          break; /* ACI_GAP_PERIPHERAL_SECURITY_INITIATED_VSEVT_CODE */
 800d44a:	e07a      	b.n	800d542 <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG("==>> ACI_GAP_BOND_LOST_VSEVT_CODE \n");
 800d44c:	4844      	ldr	r0, [pc, #272]	; (800d560 <SVCCTL_App_Notification+0x484>)
 800d44e:	f001 fbdb 	bl	800ec08 <puts>
          ret = aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800d452:	4b44      	ldr	r3, [pc, #272]	; (800d564 <SVCCTL_App_Notification+0x488>)
 800d454:	8adb      	ldrh	r3, [r3, #22]
 800d456:	4618      	mov	r0, r3
 800d458:	f7fd f8f8 	bl	800a64c <aci_gap_allow_rebond>
 800d45c:	4603      	mov	r3, r0
 800d45e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800d462:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d466:	2b00      	cmp	r3, #0
 800d468:	d006      	beq.n	800d478 <SVCCTL_App_Notification+0x39c>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Fail, reason: 0x%x\n", ret);
 800d46a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d46e:	4619      	mov	r1, r3
 800d470:	483d      	ldr	r0, [pc, #244]	; (800d568 <SVCCTL_App_Notification+0x48c>)
 800d472:	f001 fb5b 	bl	800eb2c <iprintf>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 800d476:	e064      	b.n	800d542 <SVCCTL_App_Notification+0x466>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Success \n");
 800d478:	483c      	ldr	r0, [pc, #240]	; (800d56c <SVCCTL_App_Notification+0x490>)
 800d47a:	f001 fbc5 	bl	800ec08 <puts>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 800d47e:	e060      	b.n	800d542 <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG(">>== ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE \n");
 800d480:	483b      	ldr	r0, [pc, #236]	; (800d570 <SVCCTL_App_Notification+0x494>)
 800d482:	f001 fbc1 	bl	800ec08 <puts>
          break; /* ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE */
 800d486:	e05c      	b.n	800d542 <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800d488:	483a      	ldr	r0, [pc, #232]	; (800d574 <SVCCTL_App_Notification+0x498>)
 800d48a:	f001 fbbd 	bl	800ec08 <puts>
          break; /* ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE */    
 800d48e:	e058      	b.n	800d542 <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800d490:	4839      	ldr	r0, [pc, #228]	; (800d578 <SVCCTL_App_Notification+0x49c>)
 800d492:	f001 fbb9 	bl	800ec08 <puts>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800d496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d498:	3302      	adds	r3, #2
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800d49a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800d49e:	4619      	mov	r1, r3
 800d4a0:	4836      	ldr	r0, [pc, #216]	; (800d57c <SVCCTL_App_Notification+0x4a0>)
 800d4a2:	f001 fb43 	bl	800eb2c <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800d4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a8:	3302      	adds	r3, #2
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800d4aa:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	4833      	ldr	r0, [pc, #204]	; (800d580 <SVCCTL_App_Notification+0x4a4>)
 800d4b2:	f001 fb3b 	bl	800eb2c <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES); /* CONFIRM_YES = 1 */
 800d4b6:	4b2b      	ldr	r3, [pc, #172]	; (800d564 <SVCCTL_App_Notification+0x488>)
 800d4b8:	8adb      	ldrh	r3, [r3, #22]
 800d4ba:	2101      	movs	r1, #1
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f7fd f919 	bl	800a6f4 <aci_gap_numeric_comparison_value_confirm_yesno>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800d4c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d006      	beq.n	800d4de <SVCCTL_App_Notification+0x402>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800d4d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d4d4:	4619      	mov	r1, r3
 800d4d6:	482b      	ldr	r0, [pc, #172]	; (800d584 <SVCCTL_App_Notification+0x4a8>)
 800d4d8:	f001 fb28 	bl	800eb2c <iprintf>
          break;
 800d4dc:	e031      	b.n	800d542 <SVCCTL_App_Notification+0x466>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800d4de:	482a      	ldr	r0, [pc, #168]	; (800d588 <SVCCTL_App_Notification+0x4ac>)
 800d4e0:	f001 fb92 	bl	800ec08 <puts>
          break;
 800d4e4:	e02d      	b.n	800d542 <SVCCTL_App_Notification+0x466>
          pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800d4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e8:	3302      	adds	r3, #2
 800d4ea:	623b      	str	r3, [r7, #32]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800d4ec:	4827      	ldr	r0, [pc, #156]	; (800d58c <SVCCTL_App_Notification+0x4b0>)
 800d4ee:	f001 fb8b 	bl	800ec08 <puts>
          if (pairing_complete->Status == 0)
 800d4f2:	6a3b      	ldr	r3, [r7, #32]
 800d4f4:	789b      	ldrb	r3, [r3, #2]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d103      	bne.n	800d502 <SVCCTL_App_Notification+0x426>
            APP_DBG_MSG("     - Pairing Success\n");
 800d4fa:	4825      	ldr	r0, [pc, #148]	; (800d590 <SVCCTL_App_Notification+0x4b4>)
 800d4fc:	f001 fb84 	bl	800ec08 <puts>
 800d500:	e008      	b.n	800d514 <SVCCTL_App_Notification+0x438>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n",pairing_complete->Status, pairing_complete->Reason);
 800d502:	6a3b      	ldr	r3, [r7, #32]
 800d504:	789b      	ldrb	r3, [r3, #2]
 800d506:	4619      	mov	r1, r3
 800d508:	6a3b      	ldr	r3, [r7, #32]
 800d50a:	78db      	ldrb	r3, [r3, #3]
 800d50c:	461a      	mov	r2, r3
 800d50e:	4821      	ldr	r0, [pc, #132]	; (800d594 <SVCCTL_App_Notification+0x4b8>)
 800d510:	f001 fb0c 	bl	800eb2c <iprintf>
          APP_DBG_MSG("\n");
 800d514:	200a      	movs	r0, #10
 800d516:	f001 fb1b 	bl	800eb50 <putchar>
          break;    
 800d51a:	e012      	b.n	800d542 <SVCCTL_App_Notification+0x466>
          mutex = 1;
 800d51c:	4b1e      	ldr	r3, [pc, #120]	; (800d598 <SVCCTL_App_Notification+0x4bc>)
 800d51e:	2201      	movs	r2, #1
 800d520:	701a      	strb	r2, [r3, #0]
          break;
 800d522:	e00e      	b.n	800d542 <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800d524:	481d      	ldr	r0, [pc, #116]	; (800d59c <SVCCTL_App_Notification+0x4c0>)
 800d526:	f001 fb01 	bl	800eb2c <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800d52a:	e00a      	b.n	800d542 <SVCCTL_App_Notification+0x466>
          BSP_LED_On(LED_GREEN);
 800d52c:	2001      	movs	r0, #1
 800d52e:	f7f6 f9cf 	bl	80038d0 <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 800d532:	4b0c      	ldr	r3, [pc, #48]	; (800d564 <SVCCTL_App_Notification+0x488>)
 800d534:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800d538:	210a      	movs	r1, #10
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7f5 f99e 	bl	800287c <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800d540:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800d542:	e001      	b.n	800d548 <SVCCTL_App_Notification+0x46c>
      break;
 800d544:	bf00      	nop
 800d546:	e000      	b.n	800d54a <SVCCTL_App_Notification+0x46e>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800d548:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800d54a:	2301      	movs	r3, #1
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3730      	adds	r7, #48	; 0x30
 800d550:	46bd      	mov	sp, r7
 800d552:	bdb0      	pop	{r4, r5, r7, pc}
 800d554:	080101cc 	.word	0x080101cc
 800d558:	080101f4 	.word	0x080101f4
 800d55c:	08010220 	.word	0x08010220
 800d560:	08010258 	.word	0x08010258
 800d564:	20001658 	.word	0x20001658
 800d568:	0801027c 	.word	0x0801027c
 800d56c:	080102ac 	.word	0x080102ac
 800d570:	080102d4 	.word	0x080102d4
 800d574:	08010300 	.word	0x08010300
 800d578:	08010330 	.word	0x08010330
 800d57c:	08010364 	.word	0x08010364
 800d580:	08010380 	.word	0x08010380
 800d584:	08010398 	.word	0x08010398
 800d588:	080103e8 	.word	0x080103e8
 800d58c:	08010430 	.word	0x08010430
 800d590:	0801045c 	.word	0x0801045c
 800d594:	08010474 	.word	0x08010474
 800d598:	200016e5 	.word	0x200016e5
 800d59c:	080104b0 	.word	0x080104b0

0800d5a0 <APP_BLE_Key_Button1_Action>:
  return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 800d5a4:	f000 fcaa 	bl	800defc <P2PS_APP_SW1_Button_Action>
}
 800d5a8:	bf00      	nop
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	af00      	add	r7, sp, #0
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )    
  UTIL_SEQ_SetTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, CFG_SCH_PRIO_0);
 800d5b0:	2100      	movs	r1, #0
 800d5b2:	2002      	movs	r0, #2
 800d5b4:	f001 f8d8 	bl	800e768 <UTIL_SEQ_SetTask>
#endif
  
  return;
 800d5b8:	bf00      	nop
}
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	af00      	add	r7, sp, #0
}
 800d5c0:	bf00      	nop
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c8:	4770      	bx	lr
	...

0800d5cc <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800d5d2:	4b06      	ldr	r3, [pc, #24]	; (800d5ec <Ble_Tl_Init+0x20>)
 800d5d4:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800d5d6:	4b06      	ldr	r3, [pc, #24]	; (800d5f0 <Ble_Tl_Init+0x24>)
 800d5d8:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800d5da:	463b      	mov	r3, r7
 800d5dc:	4619      	mov	r1, r3
 800d5de:	4805      	ldr	r0, [pc, #20]	; (800d5f4 <Ble_Tl_Init+0x28>)
 800d5e0:	f7fe f9f6 	bl	800b9d0 <hci_init>

  return;
 800d5e4:	bf00      	nop
}
 800d5e6:	3708      	adds	r7, #8
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	200300d8 	.word	0x200300d8
 800d5f0:	0800dd29 	.word	0x0800dd29
 800d5f4:	0800dcf1 	.word	0x0800dcf1

0800d5f8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800d5f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5fa:	b08d      	sub	sp, #52	; 0x34
 800d5fc:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800d5fe:	2300      	movs	r3, #0
 800d600:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d602:	2392      	movs	r3, #146	; 0x92
 800d604:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800d606:	48a5      	ldr	r0, [pc, #660]	; (800d89c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800d608:	f001 fafe 	bl	800ec08 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800d60c:	f7fd fcc5 	bl	800af9a <hci_reset>
 800d610:	4603      	mov	r3, r0
 800d612:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d614:	7dfb      	ldrb	r3, [r7, #23]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d005      	beq.n	800d626 <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800d61a:	7dfb      	ldrb	r3, [r7, #23]
 800d61c:	4619      	mov	r1, r3
 800d61e:	48a0      	ldr	r0, [pc, #640]	; (800d8a0 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800d620:	f001 fa84 	bl	800eb2c <iprintf>
 800d624:	e002      	b.n	800d62c <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800d626:	489f      	ldr	r0, [pc, #636]	; (800d8a4 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800d628:	f001 faee 	bl	800ec08 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800d62c:	f000 fa40 	bl	800dab0 <BleGetBdAddress>
 800d630:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800d632:	693a      	ldr	r2, [r7, #16]
 800d634:	2106      	movs	r1, #6
 800d636:	2000      	movs	r0, #0
 800d638:	f7fd fb6f 	bl	800ad1a <aci_hal_write_config_data>
 800d63c:	4603      	mov	r3, r0
 800d63e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d640:	7dfb      	ldrb	r3, [r7, #23]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d005      	beq.n	800d652 <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800d646:	7dfb      	ldrb	r3, [r7, #23]
 800d648:	4619      	mov	r1, r3
 800d64a:	4897      	ldr	r0, [pc, #604]	; (800d8a8 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800d64c:	f001 fa6e 	bl	800eb2c <iprintf>
 800d650:	e021      	b.n	800d696 <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800d652:	4896      	ldr	r0, [pc, #600]	; (800d8ac <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800d654:	f001 fad8 	bl	800ec08 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	3305      	adds	r3, #5
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	4618      	mov	r0, r3
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	3304      	adds	r3, #4
 800d664:	781b      	ldrb	r3, [r3, #0]
 800d666:	461c      	mov	r4, r3
 800d668:	693b      	ldr	r3, [r7, #16]
 800d66a:	3303      	adds	r3, #3
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	461d      	mov	r5, r3
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	3302      	adds	r3, #2
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	461a      	mov	r2, r3
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	3301      	adds	r3, #1
 800d67c:	781b      	ldrb	r3, [r3, #0]
 800d67e:	4619      	mov	r1, r3
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	9302      	str	r3, [sp, #8]
 800d686:	9101      	str	r1, [sp, #4]
 800d688:	9200      	str	r2, [sp, #0]
 800d68a:	462b      	mov	r3, r5
 800d68c:	4622      	mov	r2, r4
 800d68e:	4601      	mov	r1, r0
 800d690:	4887      	ldr	r0, [pc, #540]	; (800d8b0 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800d692:	f001 fa4b 	bl	800eb2c <iprintf>
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 800d696:	693b      	ldr	r3, [r7, #16]
 800d698:	3305      	adds	r3, #5
 800d69a:	781a      	ldrb	r2, [r3, #0]
 800d69c:	4b85      	ldr	r3, [pc, #532]	; (800d8b4 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d69e:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	3304      	adds	r3, #4
 800d6a4:	781a      	ldrb	r2, [r3, #0]
 800d6a6:	4b83      	ldr	r3, [pc, #524]	; (800d8b4 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d6a8:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	3303      	adds	r3, #3
 800d6ae:	781a      	ldrb	r2, [r3, #0]
 800d6b0:	4b80      	ldr	r3, [pc, #512]	; (800d8b4 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d6b2:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 800d6b4:	693b      	ldr	r3, [r7, #16]
 800d6b6:	3302      	adds	r3, #2
 800d6b8:	781a      	ldrb	r2, [r3, #0]
 800d6ba:	4b7e      	ldr	r3, [pc, #504]	; (800d8b4 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d6bc:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	781a      	ldrb	r2, [r3, #0]
 800d6c4:	4b7b      	ldr	r3, [pc, #492]	; (800d8b4 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d6c6:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	781a      	ldrb	r2, [r3, #0]
 800d6cc:	4b79      	ldr	r3, [pc, #484]	; (800d8b4 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800d6ce:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800d6d0:	4a79      	ldr	r2, [pc, #484]	; (800d8b8 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800d6d2:	2110      	movs	r1, #16
 800d6d4:	2018      	movs	r0, #24
 800d6d6:	f7fd fb20 	bl	800ad1a <aci_hal_write_config_data>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d6de:	7dfb      	ldrb	r3, [r7, #23]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d005      	beq.n	800d6f0 <Ble_Hci_Gap_Gatt_Init+0xf8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800d6e4:	7dfb      	ldrb	r3, [r7, #23]
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	4874      	ldr	r0, [pc, #464]	; (800d8bc <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800d6ea:	f001 fa1f 	bl	800eb2c <iprintf>
 800d6ee:	e002      	b.n	800d6f6 <Ble_Hci_Gap_Gatt_Init+0xfe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800d6f0:	4873      	ldr	r0, [pc, #460]	; (800d8c0 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800d6f2:	f001 fa89 	bl	800ec08 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800d6f6:	4a73      	ldr	r2, [pc, #460]	; (800d8c4 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800d6f8:	2110      	movs	r1, #16
 800d6fa:	2008      	movs	r0, #8
 800d6fc:	f7fd fb0d 	bl	800ad1a <aci_hal_write_config_data>
 800d700:	4603      	mov	r3, r0
 800d702:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d704:	7dfb      	ldrb	r3, [r7, #23]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d005      	beq.n	800d716 <Ble_Hci_Gap_Gatt_Init+0x11e>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800d70a:	7dfb      	ldrb	r3, [r7, #23]
 800d70c:	4619      	mov	r1, r3
 800d70e:	486e      	ldr	r0, [pc, #440]	; (800d8c8 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800d710:	f001 fa0c 	bl	800eb2c <iprintf>
 800d714:	e002      	b.n	800d71c <Ble_Hci_Gap_Gatt_Init+0x124>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800d716:	486d      	ldr	r0, [pc, #436]	; (800d8cc <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800d718:	f001 fa76 	bl	800ec08 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800d71c:	2118      	movs	r1, #24
 800d71e:	2001      	movs	r0, #1
 800d720:	f7fd fb80 	bl	800ae24 <aci_hal_set_tx_power_level>
 800d724:	4603      	mov	r3, r0
 800d726:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d728:	7dfb      	ldrb	r3, [r7, #23]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d005      	beq.n	800d73a <Ble_Hci_Gap_Gatt_Init+0x142>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800d72e:	7dfb      	ldrb	r3, [r7, #23]
 800d730:	4619      	mov	r1, r3
 800d732:	4867      	ldr	r0, [pc, #412]	; (800d8d0 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800d734:	f001 f9fa 	bl	800eb2c <iprintf>
 800d738:	e002      	b.n	800d740 <Ble_Hci_Gap_Gatt_Init+0x148>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800d73a:	4866      	ldr	r0, [pc, #408]	; (800d8d4 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800d73c:	f001 fa64 	bl	800ec08 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800d740:	f7fd f83f 	bl	800a7c2 <aci_gatt_init>
 800d744:	4603      	mov	r3, r0
 800d746:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d748:	7dfb      	ldrb	r3, [r7, #23]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d005      	beq.n	800d75a <Ble_Hci_Gap_Gatt_Init+0x162>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800d74e:	7dfb      	ldrb	r3, [r7, #23]
 800d750:	4619      	mov	r1, r3
 800d752:	4861      	ldr	r0, [pc, #388]	; (800d8d8 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800d754:	f001 f9ea 	bl	800eb2c <iprintf>
 800d758:	e002      	b.n	800d760 <Ble_Hci_Gap_Gatt_Init+0x168>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800d75a:	4860      	ldr	r0, [pc, #384]	; (800d8dc <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800d75c:	f001 fa54 	bl	800ec08 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800d760:	2300      	movs	r3, #0
 800d762:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800d764:	7bfb      	ldrb	r3, [r7, #15]
 800d766:	f043 0301 	orr.w	r3, r3, #1
 800d76a:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800d76c:	7bfb      	ldrb	r3, [r7, #15]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d02b      	beq.n	800d7ca <Ble_Hci_Gap_Gatt_Init+0x1d2>
  {
    const char *name = "P2PSRV1";
 800d772:	4b5b      	ldr	r3, [pc, #364]	; (800d8e0 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800d774:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800d776:	1dba      	adds	r2, r7, #6
 800d778:	7bf8      	ldrb	r0, [r7, #15]
 800d77a:	1cbb      	adds	r3, r7, #2
 800d77c:	9301      	str	r3, [sp, #4]
 800d77e:	1d3b      	adds	r3, r7, #4
 800d780:	9300      	str	r3, [sp, #0]
 800d782:	4613      	mov	r3, r2
 800d784:	2207      	movs	r2, #7
 800d786:	2100      	movs	r1, #0
 800d788:	f7fc fe1d 	bl	800a3c6 <aci_gap_init>
 800d78c:	4603      	mov	r3, r0
 800d78e:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800d790:	7dfb      	ldrb	r3, [r7, #23]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d005      	beq.n	800d7a2 <Ble_Hci_Gap_Gatt_Init+0x1aa>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800d796:	7dfb      	ldrb	r3, [r7, #23]
 800d798:	4619      	mov	r1, r3
 800d79a:	4852      	ldr	r0, [pc, #328]	; (800d8e4 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800d79c:	f001 f9c6 	bl	800eb2c <iprintf>
 800d7a0:	e002      	b.n	800d7a8 <Ble_Hci_Gap_Gatt_Init+0x1b0>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800d7a2:	4851      	ldr	r0, [pc, #324]	; (800d8e8 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800d7a4:	f001 fa30 	bl	800ec08 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800d7a8:	88fc      	ldrh	r4, [r7, #6]
 800d7aa:	88bd      	ldrh	r5, [r7, #4]
 800d7ac:	68b8      	ldr	r0, [r7, #8]
 800d7ae:	f7f2 fcf1 	bl	8000194 <strlen>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	b2da      	uxtb	r2, r3
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	9300      	str	r3, [sp, #0]
 800d7ba:	4613      	mov	r3, r2
 800d7bc:	2200      	movs	r2, #0
 800d7be:	4629      	mov	r1, r5
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	f7fd fa01 	bl	800abc8 <aci_gatt_update_char_value>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800d7ca:	88f8      	ldrh	r0, [r7, #6]
 800d7cc:	8879      	ldrh	r1, [r7, #2]
 800d7ce:	463b      	mov	r3, r7
 800d7d0:	9300      	str	r3, [sp, #0]
 800d7d2:	2302      	movs	r3, #2
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	f7fd f9f7 	bl	800abc8 <aci_gatt_update_char_value>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800d7de:	2202      	movs	r2, #2
 800d7e0:	2102      	movs	r1, #2
 800d7e2:	2000      	movs	r0, #0
 800d7e4:	f7fd fc7b 	bl	800b0de <hci_le_set_default_phy>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d7ec:	7dfb      	ldrb	r3, [r7, #23]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d005      	beq.n	800d7fe <Ble_Hci_Gap_Gatt_Init+0x206>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800d7f2:	7dfb      	ldrb	r3, [r7, #23]
 800d7f4:	4619      	mov	r1, r3
 800d7f6:	483d      	ldr	r0, [pc, #244]	; (800d8ec <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 800d7f8:	f001 f998 	bl	800eb2c <iprintf>
 800d7fc:	e002      	b.n	800d804 <Ble_Hci_Gap_Gatt_Init+0x20c>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800d7fe:	483c      	ldr	r0, [pc, #240]	; (800d8f0 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800d800:	f001 fa02 	bl	800ec08 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800d804:	4b3b      	ldr	r3, [pc, #236]	; (800d8f4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d806:	2201      	movs	r2, #1
 800d808:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800d80a:	4b3a      	ldr	r3, [pc, #232]	; (800d8f4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d80c:	781b      	ldrb	r3, [r3, #0]
 800d80e:	4618      	mov	r0, r3
 800d810:	f7fc fc5a 	bl	800a0c8 <aci_gap_set_io_capability>
 800d814:	4603      	mov	r3, r0
 800d816:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800d818:	7dfb      	ldrb	r3, [r7, #23]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d005      	beq.n	800d82a <Ble_Hci_Gap_Gatt_Init+0x232>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800d81e:	7dfb      	ldrb	r3, [r7, #23]
 800d820:	4619      	mov	r1, r3
 800d822:	4835      	ldr	r0, [pc, #212]	; (800d8f8 <Ble_Hci_Gap_Gatt_Init+0x300>)
 800d824:	f001 f982 	bl	800eb2c <iprintf>
 800d828:	e002      	b.n	800d830 <Ble_Hci_Gap_Gatt_Init+0x238>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800d82a:	4834      	ldr	r0, [pc, #208]	; (800d8fc <Ble_Hci_Gap_Gatt_Init+0x304>)
 800d82c:	f001 f9ec 	bl	800ec08 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800d830:	4b30      	ldr	r3, [pc, #192]	; (800d8f4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d832:	2201      	movs	r2, #1
 800d834:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800d836:	4b2f      	ldr	r3, [pc, #188]	; (800d8f4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d838:	2208      	movs	r2, #8
 800d83a:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800d83c:	4b2d      	ldr	r3, [pc, #180]	; (800d8f4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d83e:	2210      	movs	r2, #16
 800d840:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800d842:	4b2c      	ldr	r3, [pc, #176]	; (800d8f4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d844:	2200      	movs	r2, #0
 800d846:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800d848:	4b2a      	ldr	r3, [pc, #168]	; (800d8f4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d84a:	4a2d      	ldr	r2, [pc, #180]	; (800d900 <Ble_Hci_Gap_Gatt_Init+0x308>)
 800d84c:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800d84e:	4b29      	ldr	r3, [pc, #164]	; (800d8f4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d850:	2201      	movs	r2, #1
 800d852:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800d854:	4b27      	ldr	r3, [pc, #156]	; (800d8f4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d856:	789c      	ldrb	r4, [r3, #2]
 800d858:	4b26      	ldr	r3, [pc, #152]	; (800d8f4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d85a:	785d      	ldrb	r5, [r3, #1]
 800d85c:	4b25      	ldr	r3, [pc, #148]	; (800d8f4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d85e:	791b      	ldrb	r3, [r3, #4]
 800d860:	4a24      	ldr	r2, [pc, #144]	; (800d8f4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d862:	7952      	ldrb	r2, [r2, #5]
 800d864:	4923      	ldr	r1, [pc, #140]	; (800d8f4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d866:	78c9      	ldrb	r1, [r1, #3]
 800d868:	4822      	ldr	r0, [pc, #136]	; (800d8f4 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800d86a:	6880      	ldr	r0, [r0, #8]
 800d86c:	2600      	movs	r6, #0
 800d86e:	9604      	str	r6, [sp, #16]
 800d870:	9003      	str	r0, [sp, #12]
 800d872:	9102      	str	r1, [sp, #8]
 800d874:	9201      	str	r2, [sp, #4]
 800d876:	9300      	str	r3, [sp, #0]
 800d878:	2300      	movs	r3, #0
 800d87a:	2201      	movs	r2, #1
 800d87c:	4629      	mov	r1, r5
 800d87e:	4620      	mov	r0, r4
 800d880:	f7fc fc76 	bl	800a170 <aci_gap_set_authentication_requirement>
 800d884:	4603      	mov	r3, r0
 800d886:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800d888:	7dfb      	ldrb	r3, [r7, #23]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d03c      	beq.n	800d908 <Ble_Hci_Gap_Gatt_Init+0x310>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800d88e:	7dfb      	ldrb	r3, [r7, #23]
 800d890:	4619      	mov	r1, r3
 800d892:	481c      	ldr	r0, [pc, #112]	; (800d904 <Ble_Hci_Gap_Gatt_Init+0x30c>)
 800d894:	f001 f94a 	bl	800eb2c <iprintf>
 800d898:	e039      	b.n	800d90e <Ble_Hci_Gap_Gatt_Init+0x316>
 800d89a:	bf00      	nop
 800d89c:	080104d8 	.word	0x080104d8
 800d8a0:	08010504 	.word	0x08010504
 800d8a4:	08010534 	.word	0x08010534
 800d8a8:	08010554 	.word	0x08010554
 800d8ac:	080105b0 	.word	0x080105b0
 800d8b0:	080105fc 	.word	0x080105fc
 800d8b4:	20000034 	.word	0x20000034
 800d8b8:	080110d0 	.word	0x080110d0
 800d8bc:	08010638 	.word	0x08010638
 800d8c0:	08010690 	.word	0x08010690
 800d8c4:	080110e0 	.word	0x080110e0
 800d8c8:	080106d8 	.word	0x080106d8
 800d8cc:	08010730 	.word	0x08010730
 800d8d0:	08010778 	.word	0x08010778
 800d8d4:	080107b8 	.word	0x080107b8
 800d8d8:	080107e8 	.word	0x080107e8
 800d8dc:	0801081c 	.word	0x0801081c
 800d8e0:	08010840 	.word	0x08010840
 800d8e4:	08010848 	.word	0x08010848
 800d8e8:	08010878 	.word	0x08010878
 800d8ec:	08010898 	.word	0x08010898
 800d8f0:	080108d4 	.word	0x080108d4
 800d8f4:	20001658 	.word	0x20001658
 800d8f8:	08010900 	.word	0x08010900
 800d8fc:	08010940 	.word	0x08010940
 800d900:	0001b207 	.word	0x0001b207
 800d904:	08010970 	.word	0x08010970
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800d908:	480e      	ldr	r0, [pc, #56]	; (800d944 <Ble_Hci_Gap_Gatt_Init+0x34c>)
 800d90a:	f001 f97d 	bl	800ec08 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800d90e:	4b0e      	ldr	r3, [pc, #56]	; (800d948 <Ble_Hci_Gap_Gatt_Init+0x350>)
 800d910:	789b      	ldrb	r3, [r3, #2]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d00f      	beq.n	800d936 <Ble_Hci_Gap_Gatt_Init+0x33e>
  {
    ret = aci_gap_configure_whitelist();
 800d916:	f7fc fe75 	bl	800a604 <aci_gap_configure_filter_accept_list>
 800d91a:	4603      	mov	r3, r0
 800d91c:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800d91e:	7dfb      	ldrb	r3, [r7, #23]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d005      	beq.n	800d930 <Ble_Hci_Gap_Gatt_Init+0x338>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800d924:	7dfb      	ldrb	r3, [r7, #23]
 800d926:	4619      	mov	r1, r3
 800d928:	4808      	ldr	r0, [pc, #32]	; (800d94c <Ble_Hci_Gap_Gatt_Init+0x354>)
 800d92a:	f001 f8ff 	bl	800eb2c <iprintf>
 800d92e:	e002      	b.n	800d936 <Ble_Hci_Gap_Gatt_Init+0x33e>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800d930:	4807      	ldr	r0, [pc, #28]	; (800d950 <Ble_Hci_Gap_Gatt_Init+0x358>)
 800d932:	f001 f969 	bl	800ec08 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800d936:	4807      	ldr	r0, [pc, #28]	; (800d954 <Ble_Hci_Gap_Gatt_Init+0x35c>)
 800d938:	f001 f8f8 	bl	800eb2c <iprintf>
}
 800d93c:	bf00      	nop
 800d93e:	371c      	adds	r7, #28
 800d940:	46bd      	mov	sp, r7
 800d942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d944:	080109bc 	.word	0x080109bc
 800d948:	20001658 	.word	0x20001658
 800d94c:	080109f8 	.word	0x080109f8
 800d950:	08010a38 	.word	0x08010a38
 800d954:	08010a68 	.word	0x08010a68

0800d958 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b08c      	sub	sp, #48	; 0x30
 800d95c:	af08      	add	r7, sp, #32
 800d95e:	4603      	mov	r3, r0
 800d960:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800d962:	2392      	movs	r3, #146	; 0x92
 800d964:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 800d966:	79fb      	ldrb	r3, [r7, #7]
 800d968:	2b01      	cmp	r3, #1
 800d96a:	d106      	bne.n	800d97a <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800d96c:	4b41      	ldr	r3, [pc, #260]	; (800da74 <Adv_Request+0x11c>)
 800d96e:	881b      	ldrh	r3, [r3, #0]
 800d970:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800d972:	4b41      	ldr	r3, [pc, #260]	; (800da78 <Adv_Request+0x120>)
 800d974:	881b      	ldrh	r3, [r3, #0]
 800d976:	81bb      	strh	r3, [r7, #12]
 800d978:	e005      	b.n	800d986 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800d97a:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800d97e:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800d980:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800d984:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800d986:	4b3d      	ldr	r3, [pc, #244]	; (800da7c <Adv_Request+0x124>)
 800d988:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7f4 fef1 	bl	8002774 <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 800d992:	79fb      	ldrb	r3, [r7, #7]
 800d994:	2b02      	cmp	r3, #2
 800d996:	d119      	bne.n	800d9cc <Adv_Request+0x74>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800d998:	4b38      	ldr	r3, [pc, #224]	; (800da7c <Adv_Request+0x124>)
 800d99a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d99e:	2b01      	cmp	r3, #1
 800d9a0:	d004      	beq.n	800d9ac <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800d9a2:	4b36      	ldr	r3, [pc, #216]	; (800da7c <Adv_Request+0x124>)
 800d9a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d9a8:	2b02      	cmp	r3, #2
 800d9aa:	d10f      	bne.n	800d9cc <Adv_Request+0x74>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 800d9ac:	f7fc fa6e 	bl	8009e8c <aci_gap_set_non_discoverable>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	72fb      	strb	r3, [r7, #11]
    if (ret != BLE_STATUS_SUCCESS)
 800d9b4:	7afb      	ldrb	r3, [r7, #11]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d005      	beq.n	800d9c6 <Adv_Request+0x6e>
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Stop Advertising Failed , result: %d \n", ret);
 800d9ba:	7afb      	ldrb	r3, [r7, #11]
 800d9bc:	4619      	mov	r1, r3
 800d9be:	4830      	ldr	r0, [pc, #192]	; (800da80 <Adv_Request+0x128>)
 800d9c0:	f001 f8b4 	bl	800eb2c <iprintf>
 800d9c4:	e002      	b.n	800d9cc <Adv_Request+0x74>
    }
    else
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
 800d9c6:	482f      	ldr	r0, [pc, #188]	; (800da84 <Adv_Request+0x12c>)
 800d9c8:	f001 f91e 	bl	800ec08 <puts>
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800d9cc:	4a2b      	ldr	r2, [pc, #172]	; (800da7c <Adv_Request+0x124>)
 800d9ce:	79fb      	ldrb	r3, [r7, #7]
 800d9d0:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 800d9d4:	4b29      	ldr	r3, [pc, #164]	; (800da7c <Adv_Request+0x124>)
 800d9d6:	7e1b      	ldrb	r3, [r3, #24]
 800d9d8:	89ba      	ldrh	r2, [r7, #12]
 800d9da:	89f9      	ldrh	r1, [r7, #14]
 800d9dc:	2000      	movs	r0, #0
 800d9de:	9006      	str	r0, [sp, #24]
 800d9e0:	2000      	movs	r0, #0
 800d9e2:	9005      	str	r0, [sp, #20]
 800d9e4:	4828      	ldr	r0, [pc, #160]	; (800da88 <Adv_Request+0x130>)
 800d9e6:	9004      	str	r0, [sp, #16]
 800d9e8:	9303      	str	r3, [sp, #12]
 800d9ea:	4b28      	ldr	r3, [pc, #160]	; (800da8c <Adv_Request+0x134>)
 800d9ec:	9302      	str	r3, [sp, #8]
 800d9ee:	2308      	movs	r3, #8
 800d9f0:	9301      	str	r3, [sp, #4]
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	9300      	str	r3, [sp, #0]
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	2000      	movs	r0, #0
 800d9fa:	f7fc fa6b 	bl	8009ed4 <aci_gap_set_discoverable>
 800d9fe:	4603      	mov	r3, r0
 800da00:	72fb      	strb	r3, [r7, #11]
                                 (uint8_t*) &a_LocalName,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800da02:	7afb      	ldrb	r3, [r7, #11]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d005      	beq.n	800da14 <Adv_Request+0xbc>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800da08:	7afb      	ldrb	r3, [r7, #11]
 800da0a:	4619      	mov	r1, r3
 800da0c:	4820      	ldr	r0, [pc, #128]	; (800da90 <Adv_Request+0x138>)
 800da0e:	f001 f88d 	bl	800eb2c <iprintf>
 800da12:	e002      	b.n	800da1a <Adv_Request+0xc2>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800da14:	481f      	ldr	r0, [pc, #124]	; (800da94 <Adv_Request+0x13c>)
 800da16:	f001 f8f7 	bl	800ec08 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 800da1a:	491f      	ldr	r1, [pc, #124]	; (800da98 <Adv_Request+0x140>)
 800da1c:	200e      	movs	r0, #14
 800da1e:	f7fc fd7f 	bl	800a520 <aci_gap_update_adv_data>
 800da22:	4603      	mov	r3, r0
 800da24:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 800da26:	7afb      	ldrb	r3, [r7, #11]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d00e      	beq.n	800da4a <Adv_Request+0xf2>
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 800da2c:	79fb      	ldrb	r3, [r7, #7]
 800da2e:	2b01      	cmp	r3, #1
 800da30:	d105      	bne.n	800da3e <Adv_Request+0xe6>
    {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800da32:	7afb      	ldrb	r3, [r7, #11]
 800da34:	4619      	mov	r1, r3
 800da36:	4819      	ldr	r0, [pc, #100]	; (800da9c <Adv_Request+0x144>)
 800da38:	f001 f878 	bl	800eb2c <iprintf>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 800da3c:	e017      	b.n	800da6e <Adv_Request+0x116>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
 800da3e:	7afb      	ldrb	r3, [r7, #11]
 800da40:	4619      	mov	r1, r3
 800da42:	4817      	ldr	r0, [pc, #92]	; (800daa0 <Adv_Request+0x148>)
 800da44:	f001 f872 	bl	800eb2c <iprintf>
  return;
 800da48:	e011      	b.n	800da6e <Adv_Request+0x116>
    if (NewStatus == APP_BLE_FAST_ADV)
 800da4a:	79fb      	ldrb	r3, [r7, #7]
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	d10a      	bne.n	800da66 <Adv_Request+0x10e>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800da50:	4814      	ldr	r0, [pc, #80]	; (800daa4 <Adv_Request+0x14c>)
 800da52:	f001 f86b 	bl	800eb2c <iprintf>
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800da56:	4b09      	ldr	r3, [pc, #36]	; (800da7c <Adv_Request+0x124>)
 800da58:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800da5c:	4912      	ldr	r1, [pc, #72]	; (800daa8 <Adv_Request+0x150>)
 800da5e:	4618      	mov	r0, r3
 800da60:	f7f4 ff0c 	bl	800287c <HW_TS_Start>
  return;
 800da64:	e003      	b.n	800da6e <Adv_Request+0x116>
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
 800da66:	4811      	ldr	r0, [pc, #68]	; (800daac <Adv_Request+0x154>)
 800da68:	f001 f860 	bl	800eb2c <iprintf>
  return;
 800da6c:	bf00      	nop
}
 800da6e:	3710      	adds	r7, #16
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}
 800da74:	200016dc 	.word	0x200016dc
 800da78:	200016de 	.word	0x200016de
 800da7c:	20001658 	.word	0x20001658
 800da80:	08010a94 	.word	0x08010a94
 800da84:	08010ae0 	.word	0x08010ae0
 800da88:	20001671 	.word	0x20001671
 800da8c:	080110f0 	.word	0x080110f0
 800da90:	08010b28 	.word	0x08010b28
 800da94:	08010b60 	.word	0x08010b60
 800da98:	20000034 	.word	0x20000034
 800da9c:	08010b88 	.word	0x08010b88
 800daa0:	08010bbc 	.word	0x08010bbc
 800daa4:	08010bf4 	.word	0x08010bf4
 800daa8:	0001e046 	.word	0x0001e046
 800daac:	08010c1c 	.word	0x08010c1c

0800dab0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b086      	sub	sp, #24
 800dab4:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800dab6:	f7ff fa45 	bl	800cf44 <LL_FLASH_GetUDN>
 800daba:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dac2:	d023      	beq.n	800db0c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800dac4:	f7ff fa56 	bl	800cf74 <LL_FLASH_GetSTCompanyID>
 800dac8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800daca:	f7ff fa47 	bl	800cf5c <LL_FLASH_GetDeviceID>
 800dace:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800dad0:	693b      	ldr	r3, [r7, #16]
 800dad2:	b2da      	uxtb	r2, r3
 800dad4:	4b16      	ldr	r3, [pc, #88]	; (800db30 <BleGetBdAddress+0x80>)
 800dad6:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800dad8:	693b      	ldr	r3, [r7, #16]
 800dada:	0a1b      	lsrs	r3, r3, #8
 800dadc:	b2da      	uxtb	r2, r3
 800dade:	4b14      	ldr	r3, [pc, #80]	; (800db30 <BleGetBdAddress+0x80>)
 800dae0:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	b2da      	uxtb	r2, r3
 800dae6:	4b12      	ldr	r3, [pc, #72]	; (800db30 <BleGetBdAddress+0x80>)
 800dae8:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	b2da      	uxtb	r2, r3
 800daee:	4b10      	ldr	r3, [pc, #64]	; (800db30 <BleGetBdAddress+0x80>)
 800daf0:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800daf2:	68bb      	ldr	r3, [r7, #8]
 800daf4:	0a1b      	lsrs	r3, r3, #8
 800daf6:	b2da      	uxtb	r2, r3
 800daf8:	4b0d      	ldr	r3, [pc, #52]	; (800db30 <BleGetBdAddress+0x80>)
 800dafa:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	0c1b      	lsrs	r3, r3, #16
 800db00:	b2da      	uxtb	r2, r3
 800db02:	4b0b      	ldr	r3, [pc, #44]	; (800db30 <BleGetBdAddress+0x80>)
 800db04:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800db06:	4b0a      	ldr	r3, [pc, #40]	; (800db30 <BleGetBdAddress+0x80>)
 800db08:	617b      	str	r3, [r7, #20]
 800db0a:	e00b      	b.n	800db24 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800db0c:	2000      	movs	r0, #0
 800db0e:	f7fe fd31 	bl	800c574 <OTP_Read>
 800db12:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d002      	beq.n	800db20 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	617b      	str	r3, [r7, #20]
 800db1e:	e001      	b.n	800db24 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800db20:	4b04      	ldr	r3, [pc, #16]	; (800db34 <BleGetBdAddress+0x84>)
 800db22:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800db24:	697b      	ldr	r3, [r7, #20]
}
 800db26:	4618      	mov	r0, r3
 800db28:	3718      	adds	r7, #24
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
 800db2e:	bf00      	nop
 800db30:	20001650 	.word	0x20001650
 800db34:	080110c8 	.word	0x080110c8

0800db38 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b082      	sub	sp, #8
 800db3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */
  BSP_LED_Off(LED_GREEN);
 800db3e:	2001      	movs	r0, #1
 800db40:	f7f5 fee0 	bl	8003904 <BSP_LED_Off>
  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800db44:	4b10      	ldr	r3, [pc, #64]	; (800db88 <Adv_Cancel+0x50>)
 800db46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db4a:	2b05      	cmp	r3, #5
 800db4c:	d017      	beq.n	800db7e <Adv_Cancel+0x46>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800db4e:	2392      	movs	r3, #146	; 0x92
 800db50:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800db52:	f7fc f99b 	bl	8009e8c <aci_gap_set_non_discoverable>
 800db56:	4603      	mov	r3, r0
 800db58:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800db5a:	4b0b      	ldr	r3, [pc, #44]	; (800db88 <Adv_Cancel+0x50>)
 800db5c:	2200      	movs	r2, #0
 800db5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800db62:	79fb      	ldrb	r3, [r7, #7]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d003      	beq.n	800db70 <Adv_Cancel+0x38>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800db68:	4808      	ldr	r0, [pc, #32]	; (800db8c <Adv_Cancel+0x54>)
 800db6a:	f000 ffdf 	bl	800eb2c <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800db6e:	e006      	b.n	800db7e <Adv_Cancel+0x46>
      APP_DBG_MSG("  \r\n\r");
 800db70:	4807      	ldr	r0, [pc, #28]	; (800db90 <Adv_Cancel+0x58>)
 800db72:	f000 ffdb 	bl	800eb2c <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800db76:	4807      	ldr	r0, [pc, #28]	; (800db94 <Adv_Cancel+0x5c>)
 800db78:	f000 ffd8 	bl	800eb2c <iprintf>
  return;
 800db7c:	bf00      	nop
 800db7e:	bf00      	nop
}
 800db80:	3708      	adds	r7, #8
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	20001658 	.word	0x20001658
 800db8c:	08010c4c 	.word	0x08010c4c
 800db90:	08010c70 	.word	0x08010c70
 800db94:	08010c78 	.word	0x08010c78

0800db98 <Adv_Cancel_Req>:

static void Adv_Cancel_Req(void)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_Req_1 */

  /* USER CODE END Adv_Cancel_Req_1 */

  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800db9c:	2100      	movs	r1, #0
 800db9e:	2001      	movs	r0, #1
 800dba0:	f000 fde2 	bl	800e768 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN Adv_Cancel_Req_2 */

  /* USER CODE END Adv_Cancel_Req_2 */

  return;
 800dba4:	bf00      	nop
}
 800dba6:	bd80      	pop	{r7, pc}

0800dba8 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 800dbac:	2001      	movs	r0, #1
 800dbae:	f7f5 fea9 	bl	8003904 <BSP_LED_Off>
  /* USER CODE END Switch_OFF_GPIO */
}
 800dbb2:	bf00      	nop
 800dbb4:	bd80      	pop	{r7, pc}
	...

0800dbb8 <BLE_SVC_L2CAP_Conn_Update>:

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t ConnectionHandle)
{
 800dbb8:	b590      	push	{r4, r7, lr}
 800dbba:	b089      	sub	sp, #36	; 0x24
 800dbbc:	af02      	add	r7, sp, #8
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */

  if (mutex == 1)
 800dbc2:	4b29      	ldr	r3, [pc, #164]	; (800dc68 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 800dbc4:	781b      	ldrb	r3, [r3, #0]
 800dbc6:	2b01      	cmp	r3, #1
 800dbc8:	d149      	bne.n	800dc5e <BLE_SVC_L2CAP_Conn_Update+0xa6>
  {
    mutex = 0;
 800dbca:	4b27      	ldr	r3, [pc, #156]	; (800dc68 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 800dbcc:	2200      	movs	r2, #0
 800dbce:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 800dbd0:	4b26      	ldr	r3, [pc, #152]	; (800dc6c <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	3301      	adds	r3, #1
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	f003 0301 	and.w	r3, r3, #1
 800dbdc:	bfb8      	it	lt
 800dbde:	425b      	neglt	r3, r3
 800dbe0:	b2da      	uxtb	r2, r3
 800dbe2:	4b22      	ldr	r3, [pc, #136]	; (800dc6c <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800dbe4:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 800dbe6:	4b21      	ldr	r3, [pc, #132]	; (800dc6c <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	4a21      	ldr	r2, [pc, #132]	; (800dc70 <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 800dbec:	009b      	lsls	r3, r3, #2
 800dbee:	4413      	add	r3, r2
 800dbf0:	ed93 7a00 	vldr	s14, [r3]
 800dbf4:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 800dbf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800dbfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc00:	ee17 3a90 	vmov	r3, s15
 800dc04:	82fb      	strh	r3, [r7, #22]
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 800dc06:	4b19      	ldr	r3, [pc, #100]	; (800dc6c <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	4a19      	ldr	r2, [pc, #100]	; (800dc70 <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 800dc0c:	009b      	lsls	r3, r3, #2
 800dc0e:	4413      	add	r3, r2
 800dc10:	ed93 7a00 	vldr	s14, [r3]
 800dc14:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 800dc18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800dc1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc20:	ee17 3a90 	vmov	r3, s15
 800dc24:	82bb      	strh	r3, [r7, #20]
    uint16_t peripheral_latency = L2CAP_PERIPHERAL_LATENCY;
 800dc26:	2300      	movs	r3, #0
 800dc28:	827b      	strh	r3, [r7, #18]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 800dc2a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800dc2e:	823b      	strh	r3, [r7, #16]
    tBleStatus ret;

    ret = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800dc30:	4b10      	ldr	r3, [pc, #64]	; (800dc74 <BLE_SVC_L2CAP_Conn_Update+0xbc>)
 800dc32:	8ad8      	ldrh	r0, [r3, #22]
 800dc34:	8a7c      	ldrh	r4, [r7, #18]
 800dc36:	8aba      	ldrh	r2, [r7, #20]
 800dc38:	8af9      	ldrh	r1, [r7, #22]
 800dc3a:	8a3b      	ldrh	r3, [r7, #16]
 800dc3c:	9300      	str	r3, [sp, #0]
 800dc3e:	4623      	mov	r3, r4
 800dc40:	f7fd faca 	bl	800b1d8 <aci_l2cap_connection_parameter_update_req>
 800dc44:	4603      	mov	r3, r0
 800dc46:	73fb      	strb	r3, [r7, #15]
                                                    interval_min, interval_max,
                                                    peripheral_latency, timeout_multiplier);
    if (ret != BLE_STATUS_SUCCESS)
 800dc48:	7bfb      	ldrb	r3, [r7, #15]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d003      	beq.n	800dc56 <BLE_SVC_L2CAP_Conn_Update+0x9e>
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 800dc4e:	480a      	ldr	r0, [pc, #40]	; (800dc78 <BLE_SVC_L2CAP_Conn_Update+0xc0>)
 800dc50:	f000 ff6c 	bl	800eb2c <iprintf>

  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */

  return;
 800dc54:	e003      	b.n	800dc5e <BLE_SVC_L2CAP_Conn_Update+0xa6>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 800dc56:	4809      	ldr	r0, [pc, #36]	; (800dc7c <BLE_SVC_L2CAP_Conn_Update+0xc4>)
 800dc58:	f000 ff68 	bl	800eb2c <iprintf>
  return;
 800dc5c:	bf00      	nop
 800dc5e:	bf00      	nop
}
 800dc60:	371c      	adds	r7, #28
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd90      	pop	{r4, r7, pc}
 800dc66:	bf00      	nop
 800dc68:	200016e5 	.word	0x200016e5
 800dc6c:	200016e4 	.word	0x200016e4
 800dc70:	2000002c 	.word	0x2000002c
 800dc74:	20001658 	.word	0x20001658
 800dc78:	08010c94 	.word	0x08010c94
 800dc7c:	08010cbc 	.word	0x08010cbc

0800dc80 <Connection_Interval_Update_Req>:
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
static void Connection_Interval_Update_Req(void)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 800dc84:	4b08      	ldr	r3, [pc, #32]	; (800dca8 <Connection_Interval_Update_Req+0x28>)
 800dc86:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc8a:	2b01      	cmp	r3, #1
 800dc8c:	d00a      	beq.n	800dca4 <Connection_Interval_Update_Req+0x24>
 800dc8e:	4b06      	ldr	r3, [pc, #24]	; (800dca8 <Connection_Interval_Update_Req+0x28>)
 800dc90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d005      	beq.n	800dca4 <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800dc98:	4b03      	ldr	r3, [pc, #12]	; (800dca8 <Connection_Interval_Update_Req+0x28>)
 800dc9a:	8adb      	ldrh	r3, [r3, #22]
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f7ff ff8b 	bl	800dbb8 <BLE_SVC_L2CAP_Conn_Update>
  }

  return;
 800dca2:	bf00      	nop
 800dca4:	bf00      	nop
}
 800dca6:	bd80      	pop	{r7, pc}
 800dca8:	20001658 	.word	0x20001658

0800dcac <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b082      	sub	sp, #8
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800dcb4:	2100      	movs	r1, #0
 800dcb6:	2004      	movs	r0, #4
 800dcb8:	f000 fd56 	bl	800e768 <UTIL_SEQ_SetTask>

  return;
 800dcbc:	bf00      	nop
}
 800dcbe:	3708      	adds	r7, #8
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}

0800dcc4 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800dccc:	2001      	movs	r0, #1
 800dcce:	f000 fdb7 	bl	800e840 <UTIL_SEQ_SetEvt>

  return;
 800dcd2:	bf00      	nop
}
 800dcd4:	3708      	adds	r7, #8
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}

0800dcda <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800dcda:	b580      	push	{r7, lr}
 800dcdc:	b082      	sub	sp, #8
 800dcde:	af00      	add	r7, sp, #0
 800dce0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800dce2:	2001      	movs	r0, #1
 800dce4:	f000 fdcc 	bl	800e880 <UTIL_SEQ_WaitEvt>

  return;
 800dce8:	bf00      	nop
}
 800dcea:	3708      	adds	r7, #8
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	3308      	adds	r3, #8
 800dd02:	4618      	mov	r0, r3
 800dd04:	f7fd fd1e 	bl	800b744 <SVCCTL_UserEvtRx>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800dd0c:	7afb      	ldrb	r3, [r7, #11]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d003      	beq.n	800dd1a <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	2201      	movs	r2, #1
 800dd16:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800dd18:	e003      	b.n	800dd22 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	701a      	strb	r2, [r3, #0]
  return;
 800dd20:	bf00      	nop
}
 800dd22:	3710      	adds	r7, #16
 800dd24:	46bd      	mov	sp, r7
 800dd26:	bd80      	pop	{r7, pc}

0800dd28 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b084      	sub	sp, #16
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	4603      	mov	r3, r0
 800dd30:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800dd32:	79fb      	ldrb	r3, [r7, #7]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d002      	beq.n	800dd3e <BLE_StatusNot+0x16>
 800dd38:	2b01      	cmp	r3, #1
 800dd3a:	d007      	beq.n	800dd4c <BLE_StatusNot+0x24>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800dd3c:	e00d      	b.n	800dd5a <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800dd3e:	f240 13ff 	movw	r3, #511	; 0x1ff
 800dd42:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800dd44:	68f8      	ldr	r0, [r7, #12]
 800dd46:	f000 fd3b 	bl	800e7c0 <UTIL_SEQ_PauseTask>
      break;
 800dd4a:	e006      	b.n	800dd5a <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800dd4c:	f240 13ff 	movw	r3, #511	; 0x1ff
 800dd50:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800dd52:	68f8      	ldr	r0, [r7, #12]
 800dd54:	f000 fd54 	bl	800e800 <UTIL_SEQ_ResumeTask>
      break;
 800dd58:	bf00      	nop
  }

  return;
 800dd5a:	bf00      	nop
}
 800dd5c:	3710      	adds	r7, #16
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}
	...

0800dd64 <P2PS_STM_App_Notification>:
static void P2PS_Send_Notification_Done(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b084      	sub	sp, #16
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	781b      	ldrb	r3, [r3, #0]
 800dd70:	2b03      	cmp	r3, #3
 800dd72:	d01a      	beq.n	800ddaa <P2PS_STM_App_Notification+0x46>
 800dd74:	2b03      	cmp	r3, #3
 800dd76:	dc61      	bgt.n	800de3c <P2PS_STM_App_Notification+0xd8>
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d002      	beq.n	800dd82 <P2PS_STM_App_Notification+0x1e>
 800dd7c:	2b01      	cmp	r3, #1
 800dd7e:	d00a      	beq.n	800dd96 <P2PS_STM_App_Notification+0x32>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800dd80:	e05c      	b.n	800de3c <P2PS_STM_App_Notification+0xd8>
      P2P_Server_App_Context.Notification_Status = 1;
 800dd82:	4b32      	ldr	r3, [pc, #200]	; (800de4c <P2PS_STM_App_Notification+0xe8>)
 800dd84:	2201      	movs	r2, #1
 800dd86:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 800dd88:	4831      	ldr	r0, [pc, #196]	; (800de50 <P2PS_STM_App_Notification+0xec>)
 800dd8a:	f000 ff3d 	bl	800ec08 <puts>
      APP_DBG_MSG(" \n\r");
 800dd8e:	4831      	ldr	r0, [pc, #196]	; (800de54 <P2PS_STM_App_Notification+0xf0>)
 800dd90:	f000 fecc 	bl	800eb2c <iprintf>
      break;
 800dd94:	e055      	b.n	800de42 <P2PS_STM_App_Notification+0xde>
      P2P_Server_App_Context.Notification_Status = 0;
 800dd96:	4b2d      	ldr	r3, [pc, #180]	; (800de4c <P2PS_STM_App_Notification+0xe8>)
 800dd98:	2200      	movs	r2, #0
 800dd9a:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 800dd9c:	482e      	ldr	r0, [pc, #184]	; (800de58 <P2PS_STM_App_Notification+0xf4>)
 800dd9e:	f000 ff33 	bl	800ec08 <puts>
      APP_DBG_MSG(" \n\r");
 800dda2:	482c      	ldr	r0, [pc, #176]	; (800de54 <P2PS_STM_App_Notification+0xf0>)
 800dda4:	f000 fec2 	bl	800eb2c <iprintf>
      break;
 800dda8:	e04b      	b.n	800de42 <P2PS_STM_App_Notification+0xde>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	685b      	ldr	r3, [r3, #4]
 800ddae:	881b      	ldrh	r3, [r3, #0]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d11e      	bne.n	800ddf2 <P2PS_STM_App_Notification+0x8e>
    	  uint16_t goal_speed = pNotification->DataTransfered.pPayload[1];
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	685b      	ldr	r3, [r3, #4]
 800ddb8:	885b      	ldrh	r3, [r3, #2]
 800ddba:	81fb      	strh	r3, [r7, #14]
    	  P2P_Server_App_Context.GoalControl.GoalSpeed = goal_speed;
 800ddbc:	4a23      	ldr	r2, [pc, #140]	; (800de4c <P2PS_STM_App_Notification+0xe8>)
 800ddbe:	89fb      	ldrh	r3, [r7, #14]
 800ddc0:	8053      	strh	r3, [r2, #2]
    	  Motor_Pending_Complete();
 800ddc2:	f000 f8ab 	bl	800df1c <Motor_Pending_Complete>
    	  if(goal_speed == 0)
 800ddc6:	89fb      	ldrh	r3, [r7, #14]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d108      	bne.n	800ddde <P2PS_STM_App_Notification+0x7a>
    		  APP_DBG_MSG("-- P2P APPLICATION SERVER  : STOP MOTOR\n");
 800ddcc:	4823      	ldr	r0, [pc, #140]	; (800de5c <P2PS_STM_App_Notification+0xf8>)
 800ddce:	f000 ff1b 	bl	800ec08 <puts>
    		  APP_DBG_MSG(" \n\r");
 800ddd2:	4820      	ldr	r0, [pc, #128]	; (800de54 <P2PS_STM_App_Notification+0xf0>)
 800ddd4:	f000 feaa 	bl	800eb2c <iprintf>
    		  Stop_Motor();
 800ddd8:	f7f3 fdc6 	bl	8001968 <Stop_Motor>
 800dddc:	e009      	b.n	800ddf2 <P2PS_STM_App_Notification+0x8e>
    		  APP_DBG_MSG("-- P2P APPLICATION SERVER  : SETTING SPEED\n");
 800ddde:	4820      	ldr	r0, [pc, #128]	; (800de60 <P2PS_STM_App_Notification+0xfc>)
 800dde0:	f000 ff12 	bl	800ec08 <puts>
    		  APP_DBG_MSG(" \n\r");
 800dde4:	481b      	ldr	r0, [pc, #108]	; (800de54 <P2PS_STM_App_Notification+0xf0>)
 800dde6:	f000 fea1 	bl	800eb2c <iprintf>
    		  Set_Speed(goal_speed);
 800ddea:	89fb      	ldrh	r3, [r7, #14]
 800ddec:	4618      	mov	r0, r3
 800ddee:	f7f3 feaf 	bl	8001b50 <Set_Speed>
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	685b      	ldr	r3, [r3, #4]
 800ddf6:	881b      	ldrh	r3, [r3, #0]
 800ddf8:	2b01      	cmp	r3, #1
 800ddfa:	d121      	bne.n	800de40 <P2PS_STM_App_Notification+0xdc>
    	  uint16_t goal_speed = pNotification->DataTransfered.pPayload[1];
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	885b      	ldrh	r3, [r3, #2]
 800de02:	81bb      	strh	r3, [r7, #12]
    	  P2P_Server_App_Context.GoalControl.GoalSpeed = goal_speed;
 800de04:	4a11      	ldr	r2, [pc, #68]	; (800de4c <P2PS_STM_App_Notification+0xe8>)
 800de06:	89bb      	ldrh	r3, [r7, #12]
 800de08:	8053      	strh	r3, [r2, #2]
    	  Motor_Pending_Complete();
 800de0a:	f000 f887 	bl	800df1c <Motor_Pending_Complete>
    	  if(goal_speed == 0)
 800de0e:	89bb      	ldrh	r3, [r7, #12]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d108      	bne.n	800de26 <P2PS_STM_App_Notification+0xc2>
    		  APP_DBG_MSG("-- P2P APPLICATION SERVER  : STOP MOTOR\n");
 800de14:	4811      	ldr	r0, [pc, #68]	; (800de5c <P2PS_STM_App_Notification+0xf8>)
 800de16:	f000 fef7 	bl	800ec08 <puts>
    		  APP_DBG_MSG(" \n\r");
 800de1a:	480e      	ldr	r0, [pc, #56]	; (800de54 <P2PS_STM_App_Notification+0xf0>)
 800de1c:	f000 fe86 	bl	800eb2c <iprintf>
    		  Stop_Motor();
 800de20:	f7f3 fda2 	bl	8001968 <Stop_Motor>
      break;
 800de24:	e00c      	b.n	800de40 <P2PS_STM_App_Notification+0xdc>
    		  APP_DBG_MSG("-- P2P APPLICATION SERVER  : SETTING SPEED\n");
 800de26:	480e      	ldr	r0, [pc, #56]	; (800de60 <P2PS_STM_App_Notification+0xfc>)
 800de28:	f000 feee 	bl	800ec08 <puts>
    		  APP_DBG_MSG(" \n\r");
 800de2c:	4809      	ldr	r0, [pc, #36]	; (800de54 <P2PS_STM_App_Notification+0xf0>)
 800de2e:	f000 fe7d 	bl	800eb2c <iprintf>
    		  Set_Speed(goal_speed);
 800de32:	89bb      	ldrh	r3, [r7, #12]
 800de34:	4618      	mov	r0, r3
 800de36:	f7f3 fe8b 	bl	8001b50 <Set_Speed>
      break;
 800de3a:	e001      	b.n	800de40 <P2PS_STM_App_Notification+0xdc>
      break;
 800de3c:	bf00      	nop
 800de3e:	e000      	b.n	800de42 <P2PS_STM_App_Notification+0xde>
      break;
 800de40:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800de42:	bf00      	nop
}
 800de44:	3710      	adds	r7, #16
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}
 800de4a:	bf00      	nop
 800de4c:	200016e8 	.word	0x200016e8
 800de50:	08010cec 	.word	0x08010cec
 800de54:	08010d20 	.word	0x08010d20
 800de58:	08010d24 	.word	0x08010d24
 800de5c:	08010d58 	.word	0x08010d58
 800de60:	08010d80 	.word	0x08010d80

0800de64 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */
//TODO incoming data function
/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d005      	beq.n	800de80 <P2PS_APP_Notification+0x1c>
 800de74:	2b01      	cmp	r3, #1
 800de76:	d000      	beq.n	800de7a <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800de78:	e003      	b.n	800de82 <P2PS_APP_Notification+0x1e>
       P2PS_APP_MOTOR_context_Init();
 800de7a:	f000 f829 	bl	800ded0 <P2PS_APP_MOTOR_context_Init>
    break;
 800de7e:	e000      	b.n	800de82 <P2PS_APP_Notification+0x1e>
    break;
 800de80:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800de82:	bf00      	nop
}
 800de84:	3708      	adds	r7, #8
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
	...

0800de8c <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
	//TODO registers send notification task to sequencer under ID
  //UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MOTOR_STOPPED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification_Stopped);
 800de90:	4a0b      	ldr	r2, [pc, #44]	; (800dec0 <P2PS_APP_Init+0x34>)
 800de92:	2100      	movs	r1, #0
 800de94:	2040      	movs	r0, #64	; 0x40
 800de96:	f000 fc45 	bl	800e724 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MOTOR_PENDING_ID, UTIL_SEQ_RFU, P2PS_Send_Notification_Pending);
 800de9a:	4a0a      	ldr	r2, [pc, #40]	; (800dec4 <P2PS_APP_Init+0x38>)
 800de9c:	2100      	movs	r1, #0
 800de9e:	2080      	movs	r0, #128	; 0x80
 800dea0:	f000 fc40 	bl	800e724 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MOTOR_DONE_ID, UTIL_SEQ_RFU, P2PS_Send_Notification_Done);
 800dea4:	4a08      	ldr	r2, [pc, #32]	; (800dec8 <P2PS_APP_Init+0x3c>)
 800dea6:	2100      	movs	r1, #0
 800dea8:	f44f 7080 	mov.w	r0, #256	; 0x100
 800deac:	f000 fc3a 	bl	800e724 <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  //TODO
  P2P_Server_App_Context.Notification_Status=0; 
 800deb0:	4b06      	ldr	r3, [pc, #24]	; (800decc <P2PS_APP_Init+0x40>)
 800deb2:	2200      	movs	r2, #0
 800deb4:	701a      	strb	r2, [r3, #0]
  //P2PS_APP_LED_BUTTON_context_Init();
  P2PS_APP_MOTOR_context_Init();
 800deb6:	f000 f80b 	bl	800ded0 <P2PS_APP_MOTOR_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 800deba:	bf00      	nop
}
 800debc:	bd80      	pop	{r7, pc}
 800debe:	bf00      	nop
 800dec0:	0800df89 	.word	0x0800df89
 800dec4:	0800dfd1 	.word	0x0800dfd1
 800dec8:	0800df41 	.word	0x0800df41
 800decc:	200016e8 	.word	0x200016e8

0800ded0 <P2PS_APP_MOTOR_context_Init>:
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;// Device1
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif
}*/

void P2PS_APP_MOTOR_context_Init(void){
 800ded0:	b580      	push	{r7, lr}
 800ded2:	af00      	add	r7, sp, #0
  //initializes peripheral state
  Stop_Motor();
 800ded4:	f7f3 fd48 	bl	8001968 <Stop_Motor>
  Set_CW();
 800ded8:	f7f3 fd1e 	bl	8001918 <Set_CW>
  APP_DBG_MSG("MOTOR STOPPED\n");
 800dedc:	4805      	ldr	r0, [pc, #20]	; (800def4 <P2PS_APP_MOTOR_context_Init+0x24>)
 800dede:	f000 fe93 	bl	800ec08 <puts>

  //initializes struct
  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.GoalControl.GoalSpeed=0; //goal speed is 0
 800dee2:	4b05      	ldr	r3, [pc, #20]	; (800def8 <P2PS_APP_MOTOR_context_Init+0x28>)
 800dee4:	2200      	movs	r2, #0
 800dee6:	805a      	strh	r2, [r3, #2]
  P2P_Server_App_Context.MotorStateControl.MotorState=STOPPED;
 800dee8:	4b03      	ldr	r3, [pc, #12]	; (800def8 <P2PS_APP_MOTOR_context_Init+0x28>)
 800deea:	2200      	movs	r2, #0
 800deec:	711a      	strb	r2, [r3, #4]
#endif
}
 800deee:	bf00      	nop
 800def0:	bd80      	pop	{r7, pc}
 800def2:	bf00      	nop
 800def4:	08010dac 	.word	0x08010dac
 800def8:	200016e8 	.word	0x200016e8

0800defc <P2PS_APP_SW1_Button_Action>:

void P2PS_APP_SW1_Button_Action(void) //run from button interrupt
{
 800defc:	b580      	push	{r7, lr}
 800defe:	af00      	add	r7, sp, #0
	//TODO runs task from sequencer, this ID corresponds to send notification
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800df00:	2100      	movs	r1, #0
 800df02:	2008      	movs	r0, #8
 800df04:	f000 fc30 	bl	800e768 <UTIL_SEQ_SetTask>

  return;
 800df08:	bf00      	nop
}
 800df0a:	bd80      	pop	{r7, pc}

0800df0c <Motor_Stopped_Complete>:

void Motor_Stopped_Complete(void)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask( 1<<CFG_TASK_MOTOR_STOPPED_ID, CFG_SCH_PRIO_0);
 800df10:	2100      	movs	r1, #0
 800df12:	2040      	movs	r0, #64	; 0x40
 800df14:	f000 fc28 	bl	800e768 <UTIL_SEQ_SetTask>

	return;
 800df18:	bf00      	nop
}
 800df1a:	bd80      	pop	{r7, pc}

0800df1c <Motor_Pending_Complete>:

void Motor_Pending_Complete(void)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask( 1<<CFG_TASK_MOTOR_PENDING_ID, CFG_SCH_PRIO_0);
 800df20:	2100      	movs	r1, #0
 800df22:	2080      	movs	r0, #128	; 0x80
 800df24:	f000 fc20 	bl	800e768 <UTIL_SEQ_SetTask>

	return;
 800df28:	bf00      	nop
}
 800df2a:	bd80      	pop	{r7, pc}

0800df2c <Motor_Done_Complete>:

void Motor_Done_Complete(void)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask( 1<<CFG_TASK_MOTOR_DONE_ID, CFG_SCH_PRIO_0);
 800df30:	2100      	movs	r1, #0
 800df32:	f44f 7080 	mov.w	r0, #256	; 0x100
 800df36:	f000 fc17 	bl	800e768 <UTIL_SEQ_SetTask>

	return;
 800df3a:	bf00      	nop
}
 800df3c:	bd80      	pop	{r7, pc}
	...

0800df40 <P2PS_Send_Notification_Done>:

  return;
} */

void P2PS_Send_Notification_Done(void) //run from sequencer
{
 800df40:	b580      	push	{r7, lr}
 800df42:	af00      	add	r7, sp, #0
	P2P_Server_App_Context.MotorStateControl.MotorState = DONE;
 800df44:	4b0b      	ldr	r3, [pc, #44]	; (800df74 <P2PS_Send_Notification_Done+0x34>)
 800df46:	2202      	movs	r2, #2
 800df48:	711a      	strb	r2, [r3, #4]

  //TODO sending notification of new button status
   if(P2P_Server_App_Context.Notification_Status){
 800df4a:	4b0a      	ldr	r3, [pc, #40]	; (800df74 <P2PS_Send_Notification_Done+0x34>)
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d00b      	beq.n	800df6a <P2PS_Send_Notification_Done+0x2a>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT MOTOR DONE \n ");
 800df52:	4809      	ldr	r0, [pc, #36]	; (800df78 <P2PS_Send_Notification_Done+0x38>)
 800df54:	f000 fdea 	bl	800eb2c <iprintf>
    APP_DBG_MSG(" \n\r");
 800df58:	4808      	ldr	r0, [pc, #32]	; (800df7c <P2PS_Send_Notification_Done+0x3c>)
 800df5a:	f000 fde7 	bl	800eb2c <iprintf>
    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.MotorStateControl.MotorState);
 800df5e:	4908      	ldr	r1, [pc, #32]	; (800df80 <P2PS_Send_Notification_Done+0x40>)
 800df60:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800df64:	f7fd fb02 	bl	800b56c <P2PS_STM_App_Update_Char>
   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
   }

  return;
 800df68:	e003      	b.n	800df72 <P2PS_Send_Notification_Done+0x32>
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
 800df6a:	4806      	ldr	r0, [pc, #24]	; (800df84 <P2PS_Send_Notification_Done+0x44>)
 800df6c:	f000 fdde 	bl	800eb2c <iprintf>
  return;
 800df70:	bf00      	nop
}
 800df72:	bd80      	pop	{r7, pc}
 800df74:	200016e8 	.word	0x200016e8
 800df78:	08010dbc 	.word	0x08010dbc
 800df7c:	08010d20 	.word	0x08010d20
 800df80:	200016ec 	.word	0x200016ec
 800df84:	08010df8 	.word	0x08010df8

0800df88 <P2PS_Send_Notification_Stopped>:

void P2PS_Send_Notification_Stopped(void) //run from sequencer
{
 800df88:	b580      	push	{r7, lr}
 800df8a:	af00      	add	r7, sp, #0
	P2P_Server_App_Context.MotorStateControl.MotorState = STOPPED;
 800df8c:	4b0b      	ldr	r3, [pc, #44]	; (800dfbc <P2PS_Send_Notification_Stopped+0x34>)
 800df8e:	2200      	movs	r2, #0
 800df90:	711a      	strb	r2, [r3, #4]

  //TODO sending notification of new button status
   if(P2P_Server_App_Context.Notification_Status){
 800df92:	4b0a      	ldr	r3, [pc, #40]	; (800dfbc <P2PS_Send_Notification_Stopped+0x34>)
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d00b      	beq.n	800dfb2 <P2PS_Send_Notification_Stopped+0x2a>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT MOTOR STOPPED \n ");
 800df9a:	4809      	ldr	r0, [pc, #36]	; (800dfc0 <P2PS_Send_Notification_Stopped+0x38>)
 800df9c:	f000 fdc6 	bl	800eb2c <iprintf>
    APP_DBG_MSG(" \n\r");
 800dfa0:	4808      	ldr	r0, [pc, #32]	; (800dfc4 <P2PS_Send_Notification_Stopped+0x3c>)
 800dfa2:	f000 fdc3 	bl	800eb2c <iprintf>
    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.MotorStateControl.MotorState);
 800dfa6:	4908      	ldr	r1, [pc, #32]	; (800dfc8 <P2PS_Send_Notification_Stopped+0x40>)
 800dfa8:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800dfac:	f7fd fade 	bl	800b56c <P2PS_STM_App_Update_Char>
   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
   }

  return;
 800dfb0:	e003      	b.n	800dfba <P2PS_Send_Notification_Stopped+0x32>
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
 800dfb2:	4806      	ldr	r0, [pc, #24]	; (800dfcc <P2PS_Send_Notification_Stopped+0x44>)
 800dfb4:	f000 fdba 	bl	800eb2c <iprintf>
  return;
 800dfb8:	bf00      	nop
}
 800dfba:	bd80      	pop	{r7, pc}
 800dfbc:	200016e8 	.word	0x200016e8
 800dfc0:	08010e44 	.word	0x08010e44
 800dfc4:	08010d20 	.word	0x08010d20
 800dfc8:	200016ec 	.word	0x200016ec
 800dfcc:	08010df8 	.word	0x08010df8

0800dfd0 <P2PS_Send_Notification_Pending>:

void P2PS_Send_Notification_Pending(void) //run from sequencer
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	af00      	add	r7, sp, #0
	P2P_Server_App_Context.MotorStateControl.MotorState = PENDING;
 800dfd4:	4b0b      	ldr	r3, [pc, #44]	; (800e004 <P2PS_Send_Notification_Pending+0x34>)
 800dfd6:	2201      	movs	r2, #1
 800dfd8:	711a      	strb	r2, [r3, #4]

  //TODO sending notification of new button status
   if(P2P_Server_App_Context.Notification_Status){
 800dfda:	4b0a      	ldr	r3, [pc, #40]	; (800e004 <P2PS_Send_Notification_Pending+0x34>)
 800dfdc:	781b      	ldrb	r3, [r3, #0]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d00b      	beq.n	800dffa <P2PS_Send_Notification_Pending+0x2a>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT MOTOR PENDING \n ");
 800dfe2:	4809      	ldr	r0, [pc, #36]	; (800e008 <P2PS_Send_Notification_Pending+0x38>)
 800dfe4:	f000 fda2 	bl	800eb2c <iprintf>
    APP_DBG_MSG(" \n\r");
 800dfe8:	4808      	ldr	r0, [pc, #32]	; (800e00c <P2PS_Send_Notification_Pending+0x3c>)
 800dfea:	f000 fd9f 	bl	800eb2c <iprintf>
    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.MotorStateControl.MotorState);
 800dfee:	4908      	ldr	r1, [pc, #32]	; (800e010 <P2PS_Send_Notification_Pending+0x40>)
 800dff0:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800dff4:	f7fd faba 	bl	800b56c <P2PS_STM_App_Update_Char>
   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
   }

  return;
 800dff8:	e003      	b.n	800e002 <P2PS_Send_Notification_Pending+0x32>
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
 800dffa:	4806      	ldr	r0, [pc, #24]	; (800e014 <P2PS_Send_Notification_Pending+0x44>)
 800dffc:	f000 fd96 	bl	800eb2c <iprintf>
  return;
 800e000:	bf00      	nop
}
 800e002:	bd80      	pop	{r7, pc}
 800e004:	200016e8 	.word	0x200016e8
 800e008:	08010e80 	.word	0x08010e80
 800e00c:	08010d20 	.word	0x08010d20
 800e010:	200016ec 	.word	0x200016ec
 800e014:	08010df8 	.word	0x08010df8

0800e018 <LL_PWR_EnableBootC2>:
{
 800e018:	b480      	push	{r7}
 800e01a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800e01c:	4b05      	ldr	r3, [pc, #20]	; (800e034 <LL_PWR_EnableBootC2+0x1c>)
 800e01e:	68db      	ldr	r3, [r3, #12]
 800e020:	4a04      	ldr	r2, [pc, #16]	; (800e034 <LL_PWR_EnableBootC2+0x1c>)
 800e022:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e026:	60d3      	str	r3, [r2, #12]
}
 800e028:	bf00      	nop
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr
 800e032:	bf00      	nop
 800e034:	58000400 	.word	0x58000400

0800e038 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800e038:	b480      	push	{r7}
 800e03a:	b083      	sub	sp, #12
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800e040:	4b06      	ldr	r3, [pc, #24]	; (800e05c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800e042:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800e046:	4905      	ldr	r1, [pc, #20]	; (800e05c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	4313      	orrs	r3, r2
 800e04c:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800e050:	bf00      	nop
 800e052:	370c      	adds	r7, #12
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr
 800e05c:	58000800 	.word	0x58000800

0800e060 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800e060:	b480      	push	{r7}
 800e062:	b083      	sub	sp, #12
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800e068:	4b05      	ldr	r3, [pc, #20]	; (800e080 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800e06a:	6a1a      	ldr	r2, [r3, #32]
 800e06c:	4904      	ldr	r1, [pc, #16]	; (800e080 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	4313      	orrs	r3, r2
 800e072:	620b      	str	r3, [r1, #32]
}
 800e074:	bf00      	nop
 800e076:	370c      	adds	r7, #12
 800e078:	46bd      	mov	sp, r7
 800e07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07e:	4770      	bx	lr
 800e080:	58000800 	.word	0x58000800

0800e084 <LL_AHB3_GRP1_EnableClock>:
{
 800e084:	b480      	push	{r7}
 800e086:	b085      	sub	sp, #20
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800e08c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e090:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e092:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	4313      	orrs	r3, r2
 800e09a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800e09c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e0a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	4013      	ands	r3, r2
 800e0a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
}
 800e0aa:	bf00      	nop
 800e0ac:	3714      	adds	r7, #20
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b4:	4770      	bx	lr

0800e0b6 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800e0b6:	b480      	push	{r7}
 800e0b8:	b085      	sub	sp, #20
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800e0be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e0c2:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800e0c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	4313      	orrs	r3, r2
 800e0ce:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800e0d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800e0d6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	4013      	ands	r3, r2
 800e0de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
}
 800e0e2:	bf00      	nop
 800e0e4:	3714      	adds	r7, #20
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ec:	4770      	bx	lr

0800e0ee <LL_C1_IPCC_EnableIT_TXF>:
{
 800e0ee:	b480      	push	{r7}
 800e0f0:	b083      	sub	sp, #12
 800e0f2:	af00      	add	r7, sp, #0
 800e0f4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	601a      	str	r2, [r3, #0]
}
 800e102:	bf00      	nop
 800e104:	370c      	adds	r7, #12
 800e106:	46bd      	mov	sp, r7
 800e108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10c:	4770      	bx	lr

0800e10e <LL_C1_IPCC_EnableIT_RXO>:
{
 800e10e:	b480      	push	{r7}
 800e110:	b083      	sub	sp, #12
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f043 0201 	orr.w	r2, r3, #1
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	601a      	str	r2, [r3, #0]
}
 800e122:	bf00      	nop
 800e124:	370c      	adds	r7, #12
 800e126:	46bd      	mov	sp, r7
 800e128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12c:	4770      	bx	lr

0800e12e <LL_C1_IPCC_EnableTransmitChannel>:
{
 800e12e:	b480      	push	{r7}
 800e130:	b083      	sub	sp, #12
 800e132:	af00      	add	r7, sp, #0
 800e134:	6078      	str	r0, [r7, #4]
 800e136:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	685a      	ldr	r2, [r3, #4]
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	041b      	lsls	r3, r3, #16
 800e140:	43db      	mvns	r3, r3
 800e142:	401a      	ands	r2, r3
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	605a      	str	r2, [r3, #4]
}
 800e148:	bf00      	nop
 800e14a:	370c      	adds	r7, #12
 800e14c:	46bd      	mov	sp, r7
 800e14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e152:	4770      	bx	lr

0800e154 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800e154:	b480      	push	{r7}
 800e156:	b083      	sub	sp, #12
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
 800e15c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	685a      	ldr	r2, [r3, #4]
 800e162:	683b      	ldr	r3, [r7, #0]
 800e164:	041b      	lsls	r3, r3, #16
 800e166:	431a      	orrs	r2, r3
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	605a      	str	r2, [r3, #4]
}
 800e16c:	bf00      	nop
 800e16e:	370c      	adds	r7, #12
 800e170:	46bd      	mov	sp, r7
 800e172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e176:	4770      	bx	lr

0800e178 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800e178:	b480      	push	{r7}
 800e17a:	b083      	sub	sp, #12
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	685a      	ldr	r2, [r3, #4]
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	43db      	mvns	r3, r3
 800e18a:	401a      	ands	r2, r3
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	605a      	str	r2, [r3, #4]
}
 800e190:	bf00      	nop
 800e192:	370c      	adds	r7, #12
 800e194:	46bd      	mov	sp, r7
 800e196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19a:	4770      	bx	lr

0800e19c <LL_C1_IPCC_ClearFlag_CHx>:
{
 800e19c:	b480      	push	{r7}
 800e19e:	b083      	sub	sp, #12
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
 800e1a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	683a      	ldr	r2, [r7, #0]
 800e1aa:	609a      	str	r2, [r3, #8]
}
 800e1ac:	bf00      	nop
 800e1ae:	370c      	adds	r7, #12
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b6:	4770      	bx	lr

0800e1b8 <LL_C1_IPCC_SetFlag_CHx>:
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	b083      	sub	sp, #12
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	041a      	lsls	r2, r3, #16
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	609a      	str	r2, [r3, #8]
}
 800e1ca:	bf00      	nop
 800e1cc:	370c      	adds	r7, #12
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d4:	4770      	bx	lr

0800e1d6 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800e1d6:	b480      	push	{r7}
 800e1d8:	b083      	sub	sp, #12
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6078      	str	r0, [r7, #4]
 800e1de:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	68da      	ldr	r2, [r3, #12]
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	4013      	ands	r3, r2
 800e1e8:	683a      	ldr	r2, [r7, #0]
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	d101      	bne.n	800e1f2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800e1ee:	2301      	movs	r3, #1
 800e1f0:	e000      	b.n	800e1f4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800e1f2:	2300      	movs	r3, #0
}
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	370c      	adds	r7, #12
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fe:	4770      	bx	lr

0800e200 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800e200:	b480      	push	{r7}
 800e202:	b083      	sub	sp, #12
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	69da      	ldr	r2, [r3, #28]
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	4013      	ands	r3, r2
 800e212:	683a      	ldr	r2, [r7, #0]
 800e214:	429a      	cmp	r2, r3
 800e216:	d101      	bne.n	800e21c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800e218:	2301      	movs	r3, #1
 800e21a:	e000      	b.n	800e21e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800e21c:	2300      	movs	r3, #0
}
 800e21e:	4618      	mov	r0, r3
 800e220:	370c      	adds	r7, #12
 800e222:	46bd      	mov	sp, r7
 800e224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e228:	4770      	bx	lr
	...

0800e22c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800e230:	2102      	movs	r1, #2
 800e232:	4818      	ldr	r0, [pc, #96]	; (800e294 <HW_IPCC_Rx_Handler+0x68>)
 800e234:	f7ff ffe4 	bl	800e200 <LL_C2_IPCC_IsActiveFlag_CHx>
 800e238:	4603      	mov	r3, r0
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d008      	beq.n	800e250 <HW_IPCC_Rx_Handler+0x24>
 800e23e:	4b15      	ldr	r3, [pc, #84]	; (800e294 <HW_IPCC_Rx_Handler+0x68>)
 800e240:	685b      	ldr	r3, [r3, #4]
 800e242:	f003 0302 	and.w	r3, r3, #2
 800e246:	2b00      	cmp	r3, #0
 800e248:	d102      	bne.n	800e250 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800e24a:	f000 f8d5 	bl	800e3f8 <HW_IPCC_SYS_EvtHandler>
 800e24e:	e01e      	b.n	800e28e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800e250:	2101      	movs	r1, #1
 800e252:	4810      	ldr	r0, [pc, #64]	; (800e294 <HW_IPCC_Rx_Handler+0x68>)
 800e254:	f7ff ffd4 	bl	800e200 <LL_C2_IPCC_IsActiveFlag_CHx>
 800e258:	4603      	mov	r3, r0
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d008      	beq.n	800e270 <HW_IPCC_Rx_Handler+0x44>
 800e25e:	4b0d      	ldr	r3, [pc, #52]	; (800e294 <HW_IPCC_Rx_Handler+0x68>)
 800e260:	685b      	ldr	r3, [r3, #4]
 800e262:	f003 0301 	and.w	r3, r3, #1
 800e266:	2b00      	cmp	r3, #0
 800e268:	d102      	bne.n	800e270 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800e26a:	f000 f889 	bl	800e380 <HW_IPCC_BLE_EvtHandler>
 800e26e:	e00e      	b.n	800e28e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800e270:	2108      	movs	r1, #8
 800e272:	4808      	ldr	r0, [pc, #32]	; (800e294 <HW_IPCC_Rx_Handler+0x68>)
 800e274:	f7ff ffc4 	bl	800e200 <LL_C2_IPCC_IsActiveFlag_CHx>
 800e278:	4603      	mov	r3, r0
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d008      	beq.n	800e290 <HW_IPCC_Rx_Handler+0x64>
 800e27e:	4b05      	ldr	r3, [pc, #20]	; (800e294 <HW_IPCC_Rx_Handler+0x68>)
 800e280:	685b      	ldr	r3, [r3, #4]
 800e282:	f003 0308 	and.w	r3, r3, #8
 800e286:	2b00      	cmp	r3, #0
 800e288:	d102      	bne.n	800e290 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800e28a:	f000 f901 	bl	800e490 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800e28e:	bf00      	nop
 800e290:	bf00      	nop
}
 800e292:	bd80      	pop	{r7, pc}
 800e294:	58000c00 	.word	0x58000c00

0800e298 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800e29c:	2102      	movs	r1, #2
 800e29e:	4818      	ldr	r0, [pc, #96]	; (800e300 <HW_IPCC_Tx_Handler+0x68>)
 800e2a0:	f7ff ff99 	bl	800e1d6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d108      	bne.n	800e2bc <HW_IPCC_Tx_Handler+0x24>
 800e2aa:	4b15      	ldr	r3, [pc, #84]	; (800e300 <HW_IPCC_Tx_Handler+0x68>)
 800e2ac:	685b      	ldr	r3, [r3, #4]
 800e2ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d102      	bne.n	800e2bc <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800e2b6:	f000 f893 	bl	800e3e0 <HW_IPCC_SYS_CmdEvtHandler>
 800e2ba:	e01e      	b.n	800e2fa <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800e2bc:	2108      	movs	r1, #8
 800e2be:	4810      	ldr	r0, [pc, #64]	; (800e300 <HW_IPCC_Tx_Handler+0x68>)
 800e2c0:	f7ff ff89 	bl	800e1d6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d108      	bne.n	800e2dc <HW_IPCC_Tx_Handler+0x44>
 800e2ca:	4b0d      	ldr	r3, [pc, #52]	; (800e300 <HW_IPCC_Tx_Handler+0x68>)
 800e2cc:	685b      	ldr	r3, [r3, #4]
 800e2ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d102      	bne.n	800e2dc <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800e2d6:	f000 f8bd 	bl	800e454 <HW_IPCC_MM_FreeBufHandler>
 800e2da:	e00e      	b.n	800e2fa <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800e2dc:	2120      	movs	r1, #32
 800e2de:	4808      	ldr	r0, [pc, #32]	; (800e300 <HW_IPCC_Tx_Handler+0x68>)
 800e2e0:	f7ff ff79 	bl	800e1d6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d108      	bne.n	800e2fc <HW_IPCC_Tx_Handler+0x64>
 800e2ea:	4b05      	ldr	r3, [pc, #20]	; (800e300 <HW_IPCC_Tx_Handler+0x68>)
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d102      	bne.n	800e2fc <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800e2f6:	f000 f84f 	bl	800e398 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800e2fa:	bf00      	nop
 800e2fc:	bf00      	nop
}
 800e2fe:	bd80      	pop	{r7, pc}
 800e300:	58000c00 	.word	0x58000c00

0800e304 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800e304:	b580      	push	{r7, lr}
 800e306:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800e308:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800e30c:	f7ff fed3 	bl	800e0b6 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800e310:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e314:	f7ff fea4 	bl	800e060 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800e318:	f44f 7000 	mov.w	r0, #512	; 0x200
 800e31c:	f7ff fe8c 	bl	800e038 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800e320:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800e322:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800e324:	f7ff fe78 	bl	800e018 <LL_PWR_EnableBootC2>

  return;
 800e328:	bf00      	nop
}
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800e330:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800e334:	f7ff fea6 	bl	800e084 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800e338:	4806      	ldr	r0, [pc, #24]	; (800e354 <HW_IPCC_Init+0x28>)
 800e33a:	f7ff fee8 	bl	800e10e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800e33e:	4805      	ldr	r0, [pc, #20]	; (800e354 <HW_IPCC_Init+0x28>)
 800e340:	f7ff fed5 	bl	800e0ee <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800e344:	202c      	movs	r0, #44	; 0x2c
 800e346:	f7f5 fe0a 	bl	8003f5e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800e34a:	202d      	movs	r0, #45	; 0x2d
 800e34c:	f7f5 fe07 	bl	8003f5e <HAL_NVIC_EnableIRQ>

  return;
 800e350:	bf00      	nop
}
 800e352:	bd80      	pop	{r7, pc}
 800e354:	58000c00 	.word	0x58000c00

0800e358 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800e35c:	2101      	movs	r1, #1
 800e35e:	4802      	ldr	r0, [pc, #8]	; (800e368 <HW_IPCC_BLE_Init+0x10>)
 800e360:	f7ff ff0a 	bl	800e178 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e364:	bf00      	nop
}
 800e366:	bd80      	pop	{r7, pc}
 800e368:	58000c00 	.word	0x58000c00

0800e36c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800e370:	2101      	movs	r1, #1
 800e372:	4802      	ldr	r0, [pc, #8]	; (800e37c <HW_IPCC_BLE_SendCmd+0x10>)
 800e374:	f7ff ff20 	bl	800e1b8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800e378:	bf00      	nop
}
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	58000c00 	.word	0x58000c00

0800e380 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800e380:	b580      	push	{r7, lr}
 800e382:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800e384:	f7fd fe88 	bl	800c098 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800e388:	2101      	movs	r1, #1
 800e38a:	4802      	ldr	r0, [pc, #8]	; (800e394 <HW_IPCC_BLE_EvtHandler+0x14>)
 800e38c:	f7ff ff06 	bl	800e19c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800e390:	bf00      	nop
}
 800e392:	bd80      	pop	{r7, pc}
 800e394:	58000c00 	.word	0x58000c00

0800e398 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800e39c:	2120      	movs	r1, #32
 800e39e:	4803      	ldr	r0, [pc, #12]	; (800e3ac <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800e3a0:	f7ff fed8 	bl	800e154 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800e3a4:	f7fd fea8 	bl	800c0f8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800e3a8:	bf00      	nop
}
 800e3aa:	bd80      	pop	{r7, pc}
 800e3ac:	58000c00 	.word	0x58000c00

0800e3b0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800e3b4:	2102      	movs	r1, #2
 800e3b6:	4802      	ldr	r0, [pc, #8]	; (800e3c0 <HW_IPCC_SYS_Init+0x10>)
 800e3b8:	f7ff fede 	bl	800e178 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e3bc:	bf00      	nop
}
 800e3be:	bd80      	pop	{r7, pc}
 800e3c0:	58000c00 	.word	0x58000c00

0800e3c4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e3c8:	2102      	movs	r1, #2
 800e3ca:	4804      	ldr	r0, [pc, #16]	; (800e3dc <HW_IPCC_SYS_SendCmd+0x18>)
 800e3cc:	f7ff fef4 	bl	800e1b8 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e3d0:	2102      	movs	r1, #2
 800e3d2:	4802      	ldr	r0, [pc, #8]	; (800e3dc <HW_IPCC_SYS_SendCmd+0x18>)
 800e3d4:	f7ff feab 	bl	800e12e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800e3d8:	bf00      	nop
}
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	58000c00 	.word	0x58000c00

0800e3e0 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800e3e4:	2102      	movs	r1, #2
 800e3e6:	4803      	ldr	r0, [pc, #12]	; (800e3f4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800e3e8:	f7ff feb4 	bl	800e154 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800e3ec:	f7fd fed4 	bl	800c198 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800e3f0:	bf00      	nop
}
 800e3f2:	bd80      	pop	{r7, pc}
 800e3f4:	58000c00 	.word	0x58000c00

0800e3f8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800e3fc:	f7fd fee2 	bl	800c1c4 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800e400:	2102      	movs	r1, #2
 800e402:	4802      	ldr	r0, [pc, #8]	; (800e40c <HW_IPCC_SYS_EvtHandler+0x14>)
 800e404:	f7ff feca 	bl	800e19c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800e408:	bf00      	nop
}
 800e40a:	bd80      	pop	{r7, pc}
 800e40c:	58000c00 	.word	0x58000c00

0800e410 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b082      	sub	sp, #8
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800e418:	2108      	movs	r1, #8
 800e41a:	480c      	ldr	r0, [pc, #48]	; (800e44c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e41c:	f7ff fedb 	bl	800e1d6 <LL_C1_IPCC_IsActiveFlag_CHx>
 800e420:	4603      	mov	r3, r0
 800e422:	2b00      	cmp	r3, #0
 800e424:	d007      	beq.n	800e436 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800e426:	4a0a      	ldr	r2, [pc, #40]	; (800e450 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e42c:	2108      	movs	r1, #8
 800e42e:	4807      	ldr	r0, [pc, #28]	; (800e44c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e430:	f7ff fe7d 	bl	800e12e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800e434:	e006      	b.n	800e444 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e43a:	2108      	movs	r1, #8
 800e43c:	4803      	ldr	r0, [pc, #12]	; (800e44c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800e43e:	f7ff febb 	bl	800e1b8 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800e442:	bf00      	nop
}
 800e444:	3708      	adds	r7, #8
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
 800e44a:	bf00      	nop
 800e44c:	58000c00 	.word	0x58000c00
 800e450:	200016f0 	.word	0x200016f0

0800e454 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800e454:	b580      	push	{r7, lr}
 800e456:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e458:	2108      	movs	r1, #8
 800e45a:	4806      	ldr	r0, [pc, #24]	; (800e474 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800e45c:	f7ff fe7a 	bl	800e154 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800e460:	4b05      	ldr	r3, [pc, #20]	; (800e478 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800e466:	2108      	movs	r1, #8
 800e468:	4802      	ldr	r0, [pc, #8]	; (800e474 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800e46a:	f7ff fea5 	bl	800e1b8 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800e46e:	bf00      	nop
}
 800e470:	bd80      	pop	{r7, pc}
 800e472:	bf00      	nop
 800e474:	58000c00 	.word	0x58000c00
 800e478:	200016f0 	.word	0x200016f0

0800e47c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800e480:	2108      	movs	r1, #8
 800e482:	4802      	ldr	r0, [pc, #8]	; (800e48c <HW_IPCC_TRACES_Init+0x10>)
 800e484:	f7ff fe78 	bl	800e178 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800e488:	bf00      	nop
}
 800e48a:	bd80      	pop	{r7, pc}
 800e48c:	58000c00 	.word	0x58000c00

0800e490 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800e490:	b580      	push	{r7, lr}
 800e492:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800e494:	f7fd ff3e 	bl	800c314 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800e498:	2108      	movs	r1, #8
 800e49a:	4802      	ldr	r0, [pc, #8]	; (800e4a4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800e49c:	f7ff fe7e 	bl	800e19c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800e4a0:	bf00      	nop
}
 800e4a2:	bd80      	pop	{r7, pc}
 800e4a4:	58000c00 	.word	0x58000c00

0800e4a8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800e4a8:	b480      	push	{r7}
 800e4aa:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800e4ac:	4b05      	ldr	r3, [pc, #20]	; (800e4c4 <UTIL_LPM_Init+0x1c>)
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800e4b2:	4b05      	ldr	r3, [pc, #20]	; (800e4c8 <UTIL_LPM_Init+0x20>)
 800e4b4:	2200      	movs	r2, #0
 800e4b6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800e4b8:	bf00      	nop
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c0:	4770      	bx	lr
 800e4c2:	bf00      	nop
 800e4c4:	200016f4 	.word	0x200016f4
 800e4c8:	200016f8 	.word	0x200016f8

0800e4cc <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b087      	sub	sp, #28
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e4d8:	f3ef 8310 	mrs	r3, PRIMASK
 800e4dc:	613b      	str	r3, [r7, #16]
  return(result);
 800e4de:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800e4e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e4e2:	b672      	cpsid	i
}
 800e4e4:	bf00      	nop
  
  switch(state)
 800e4e6:	78fb      	ldrb	r3, [r7, #3]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d008      	beq.n	800e4fe <UTIL_LPM_SetOffMode+0x32>
 800e4ec:	2b01      	cmp	r3, #1
 800e4ee:	d10e      	bne.n	800e50e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800e4f0:	4b0d      	ldr	r3, [pc, #52]	; (800e528 <UTIL_LPM_SetOffMode+0x5c>)
 800e4f2:	681a      	ldr	r2, [r3, #0]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	4313      	orrs	r3, r2
 800e4f8:	4a0b      	ldr	r2, [pc, #44]	; (800e528 <UTIL_LPM_SetOffMode+0x5c>)
 800e4fa:	6013      	str	r3, [r2, #0]
      break;
 800e4fc:	e008      	b.n	800e510 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	43da      	mvns	r2, r3
 800e502:	4b09      	ldr	r3, [pc, #36]	; (800e528 <UTIL_LPM_SetOffMode+0x5c>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	4013      	ands	r3, r2
 800e508:	4a07      	ldr	r2, [pc, #28]	; (800e528 <UTIL_LPM_SetOffMode+0x5c>)
 800e50a:	6013      	str	r3, [r2, #0]
      break;
 800e50c:	e000      	b.n	800e510 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800e50e:	bf00      	nop
 800e510:	697b      	ldr	r3, [r7, #20]
 800e512:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	f383 8810 	msr	PRIMASK, r3
}
 800e51a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800e51c:	bf00      	nop
 800e51e:	371c      	adds	r7, #28
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr
 800e528:	200016f8 	.word	0x200016f8

0800e52c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b090      	sub	sp, #64	; 0x40
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800e534:	4b73      	ldr	r3, [pc, #460]	; (800e704 <UTIL_SEQ_Run+0x1d8>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800e53a:	4b72      	ldr	r3, [pc, #456]	; (800e704 <UTIL_SEQ_Run+0x1d8>)
 800e53c:	681a      	ldr	r2, [r3, #0]
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	4013      	ands	r3, r2
 800e542:	4a70      	ldr	r2, [pc, #448]	; (800e704 <UTIL_SEQ_Run+0x1d8>)
 800e544:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800e546:	4b70      	ldr	r3, [pc, #448]	; (800e708 <UTIL_SEQ_Run+0x1dc>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800e54c:	4b6f      	ldr	r3, [pc, #444]	; (800e70c <UTIL_SEQ_Run+0x1e0>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800e552:	4b6f      	ldr	r3, [pc, #444]	; (800e710 <UTIL_SEQ_Run+0x1e4>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800e558:	4b6e      	ldr	r3, [pc, #440]	; (800e714 <UTIL_SEQ_Run+0x1e8>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800e55e:	e08d      	b.n	800e67c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800e560:	2300      	movs	r3, #0
 800e562:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800e564:	e002      	b.n	800e56c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800e566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e568:	3301      	adds	r3, #1
 800e56a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800e56c:	4a6a      	ldr	r2, [pc, #424]	; (800e718 <UTIL_SEQ_Run+0x1ec>)
 800e56e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e570:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e576:	401a      	ands	r2, r3
 800e578:	4b62      	ldr	r3, [pc, #392]	; (800e704 <UTIL_SEQ_Run+0x1d8>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	4013      	ands	r3, r2
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d0f1      	beq.n	800e566 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800e582:	4a65      	ldr	r2, [pc, #404]	; (800e718 <UTIL_SEQ_Run+0x1ec>)
 800e584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e586:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e58c:	401a      	ands	r2, r3
 800e58e:	4b5d      	ldr	r3, [pc, #372]	; (800e704 <UTIL_SEQ_Run+0x1d8>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	4013      	ands	r3, r2
 800e594:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800e596:	4a60      	ldr	r2, [pc, #384]	; (800e718 <UTIL_SEQ_Run+0x1ec>)
 800e598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e59a:	00db      	lsls	r3, r3, #3
 800e59c:	4413      	add	r3, r2
 800e59e:	685a      	ldr	r2, [r3, #4]
 800e5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a2:	4013      	ands	r3, r2
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d106      	bne.n	800e5b6 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800e5a8:	4a5b      	ldr	r2, [pc, #364]	; (800e718 <UTIL_SEQ_Run+0x1ec>)
 800e5aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ac:	00db      	lsls	r3, r3, #3
 800e5ae:	4413      	add	r3, r2
 800e5b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e5b4:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800e5b6:	4a58      	ldr	r2, [pc, #352]	; (800e718 <UTIL_SEQ_Run+0x1ec>)
 800e5b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ba:	00db      	lsls	r3, r3, #3
 800e5bc:	4413      	add	r3, r2
 800e5be:	685a      	ldr	r2, [r3, #4]
 800e5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c2:	4013      	ands	r3, r2
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f000 f9b3 	bl	800e930 <SEQ_BitPosition>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	461a      	mov	r2, r3
 800e5ce:	4b53      	ldr	r3, [pc, #332]	; (800e71c <UTIL_SEQ_Run+0x1f0>)
 800e5d0:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800e5d2:	4a51      	ldr	r2, [pc, #324]	; (800e718 <UTIL_SEQ_Run+0x1ec>)
 800e5d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5d6:	00db      	lsls	r3, r3, #3
 800e5d8:	4413      	add	r3, r2
 800e5da:	685a      	ldr	r2, [r3, #4]
 800e5dc:	4b4f      	ldr	r3, [pc, #316]	; (800e71c <UTIL_SEQ_Run+0x1f0>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	2101      	movs	r1, #1
 800e5e2:	fa01 f303 	lsl.w	r3, r1, r3
 800e5e6:	43db      	mvns	r3, r3
 800e5e8:	401a      	ands	r2, r3
 800e5ea:	494b      	ldr	r1, [pc, #300]	; (800e718 <UTIL_SEQ_Run+0x1ec>)
 800e5ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5ee:	00db      	lsls	r3, r3, #3
 800e5f0:	440b      	add	r3, r1
 800e5f2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5f4:	f3ef 8310 	mrs	r3, PRIMASK
 800e5f8:	61bb      	str	r3, [r7, #24]
  return(result);
 800e5fa:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e5fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800e5fe:	b672      	cpsid	i
}
 800e600:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800e602:	4b46      	ldr	r3, [pc, #280]	; (800e71c <UTIL_SEQ_Run+0x1f0>)
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	2201      	movs	r2, #1
 800e608:	fa02 f303 	lsl.w	r3, r2, r3
 800e60c:	43da      	mvns	r2, r3
 800e60e:	4b3e      	ldr	r3, [pc, #248]	; (800e708 <UTIL_SEQ_Run+0x1dc>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	4013      	ands	r3, r2
 800e614:	4a3c      	ldr	r2, [pc, #240]	; (800e708 <UTIL_SEQ_Run+0x1dc>)
 800e616:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800e618:	2302      	movs	r3, #2
 800e61a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e61c:	e013      	b.n	800e646 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800e61e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e620:	3b01      	subs	r3, #1
 800e622:	4a3d      	ldr	r2, [pc, #244]	; (800e718 <UTIL_SEQ_Run+0x1ec>)
 800e624:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800e628:	4b3c      	ldr	r3, [pc, #240]	; (800e71c <UTIL_SEQ_Run+0x1f0>)
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	2201      	movs	r2, #1
 800e62e:	fa02 f303 	lsl.w	r3, r2, r3
 800e632:	43da      	mvns	r2, r3
 800e634:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e636:	3b01      	subs	r3, #1
 800e638:	400a      	ands	r2, r1
 800e63a:	4937      	ldr	r1, [pc, #220]	; (800e718 <UTIL_SEQ_Run+0x1ec>)
 800e63c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800e640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e642:	3b01      	subs	r3, #1
 800e644:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d1e8      	bne.n	800e61e <UTIL_SEQ_Run+0xf2>
 800e64c:	6a3b      	ldr	r3, [r7, #32]
 800e64e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	f383 8810 	msr	PRIMASK, r3
}
 800e656:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800e658:	4b30      	ldr	r3, [pc, #192]	; (800e71c <UTIL_SEQ_Run+0x1f0>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	4a30      	ldr	r2, [pc, #192]	; (800e720 <UTIL_SEQ_Run+0x1f4>)
 800e65e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e662:	4798      	blx	r3

    local_taskset = TaskSet;
 800e664:	4b28      	ldr	r3, [pc, #160]	; (800e708 <UTIL_SEQ_Run+0x1dc>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800e66a:	4b28      	ldr	r3, [pc, #160]	; (800e70c <UTIL_SEQ_Run+0x1e0>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800e670:	4b27      	ldr	r3, [pc, #156]	; (800e710 <UTIL_SEQ_Run+0x1e4>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800e676:	4b27      	ldr	r3, [pc, #156]	; (800e714 <UTIL_SEQ_Run+0x1e8>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800e67c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e680:	401a      	ands	r2, r3
 800e682:	4b20      	ldr	r3, [pc, #128]	; (800e704 <UTIL_SEQ_Run+0x1d8>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	4013      	ands	r3, r2
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d005      	beq.n	800e698 <UTIL_SEQ_Run+0x16c>
 800e68c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e690:	4013      	ands	r3, r2
 800e692:	2b00      	cmp	r3, #0
 800e694:	f43f af64 	beq.w	800e560 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800e698:	4b20      	ldr	r3, [pc, #128]	; (800e71c <UTIL_SEQ_Run+0x1f0>)
 800e69a:	f04f 32ff 	mov.w	r2, #4294967295
 800e69e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800e6a0:	f000 f938 	bl	800e914 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6a4:	f3ef 8310 	mrs	r3, PRIMASK
 800e6a8:	613b      	str	r3, [r7, #16]
  return(result);
 800e6aa:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800e6ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800e6ae:	b672      	cpsid	i
}
 800e6b0:	bf00      	nop
  local_taskset = TaskSet;
 800e6b2:	4b15      	ldr	r3, [pc, #84]	; (800e708 <UTIL_SEQ_Run+0x1dc>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800e6b8:	4b14      	ldr	r3, [pc, #80]	; (800e70c <UTIL_SEQ_Run+0x1e0>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800e6be:	4b14      	ldr	r3, [pc, #80]	; (800e710 <UTIL_SEQ_Run+0x1e4>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800e6c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c8:	401a      	ands	r2, r3
 800e6ca:	4b0e      	ldr	r3, [pc, #56]	; (800e704 <UTIL_SEQ_Run+0x1d8>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	4013      	ands	r3, r2
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d107      	bne.n	800e6e4 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800e6d4:	4b0f      	ldr	r3, [pc, #60]	; (800e714 <UTIL_SEQ_Run+0x1e8>)
 800e6d6:	681a      	ldr	r2, [r3, #0]
 800e6d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6da:	4013      	ands	r3, r2
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d101      	bne.n	800e6e4 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800e6e0:	f7f3 f82d 	bl	800173e <UTIL_SEQ_Idle>
 800e6e4:	69fb      	ldr	r3, [r7, #28]
 800e6e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	f383 8810 	msr	PRIMASK, r3
}
 800e6ee:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800e6f0:	f000 f917 	bl	800e922 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800e6f4:	4a03      	ldr	r2, [pc, #12]	; (800e704 <UTIL_SEQ_Run+0x1d8>)
 800e6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f8:	6013      	str	r3, [r2, #0]

  return;
 800e6fa:	bf00      	nop
}
 800e6fc:	3740      	adds	r7, #64	; 0x40
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}
 800e702:	bf00      	nop
 800e704:	20000048 	.word	0x20000048
 800e708:	200016fc 	.word	0x200016fc
 800e70c:	20001700 	.word	0x20001700
 800e710:	20000044 	.word	0x20000044
 800e714:	20001704 	.word	0x20001704
 800e718:	2000178c 	.word	0x2000178c
 800e71c:	20001708 	.word	0x20001708
 800e720:	2000170c 	.word	0x2000170c

0800e724 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b088      	sub	sp, #32
 800e728:	af00      	add	r7, sp, #0
 800e72a:	60f8      	str	r0, [r7, #12]
 800e72c:	60b9      	str	r1, [r7, #8]
 800e72e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e730:	f3ef 8310 	mrs	r3, PRIMASK
 800e734:	617b      	str	r3, [r7, #20]
  return(result);
 800e736:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800e738:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800e73a:	b672      	cpsid	i
}
 800e73c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800e73e:	68f8      	ldr	r0, [r7, #12]
 800e740:	f000 f8f6 	bl	800e930 <SEQ_BitPosition>
 800e744:	4603      	mov	r3, r0
 800e746:	4619      	mov	r1, r3
 800e748:	4a06      	ldr	r2, [pc, #24]	; (800e764 <UTIL_SEQ_RegTask+0x40>)
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800e750:	69fb      	ldr	r3, [r7, #28]
 800e752:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e754:	69bb      	ldr	r3, [r7, #24]
 800e756:	f383 8810 	msr	PRIMASK, r3
}
 800e75a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800e75c:	bf00      	nop
}
 800e75e:	3720      	adds	r7, #32
 800e760:	46bd      	mov	sp, r7
 800e762:	bd80      	pop	{r7, pc}
 800e764:	2000170c 	.word	0x2000170c

0800e768 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800e768:	b480      	push	{r7}
 800e76a:	b087      	sub	sp, #28
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
 800e770:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e772:	f3ef 8310 	mrs	r3, PRIMASK
 800e776:	60fb      	str	r3, [r7, #12]
  return(result);
 800e778:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e77a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e77c:	b672      	cpsid	i
}
 800e77e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800e780:	4b0d      	ldr	r3, [pc, #52]	; (800e7b8 <UTIL_SEQ_SetTask+0x50>)
 800e782:	681a      	ldr	r2, [r3, #0]
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	4313      	orrs	r3, r2
 800e788:	4a0b      	ldr	r2, [pc, #44]	; (800e7b8 <UTIL_SEQ_SetTask+0x50>)
 800e78a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800e78c:	4a0b      	ldr	r2, [pc, #44]	; (800e7bc <UTIL_SEQ_SetTask+0x54>)
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	431a      	orrs	r2, r3
 800e798:	4908      	ldr	r1, [pc, #32]	; (800e7bc <UTIL_SEQ_SetTask+0x54>)
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e7a4:	693b      	ldr	r3, [r7, #16]
 800e7a6:	f383 8810 	msr	PRIMASK, r3
}
 800e7aa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e7ac:	bf00      	nop
}
 800e7ae:	371c      	adds	r7, #28
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	4770      	bx	lr
 800e7b8:	200016fc 	.word	0x200016fc
 800e7bc:	2000178c 	.word	0x2000178c

0800e7c0 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b087      	sub	sp, #28
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e7c8:	f3ef 8310 	mrs	r3, PRIMASK
 800e7cc:	60fb      	str	r3, [r7, #12]
  return(result);
 800e7ce:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e7d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e7d2:	b672      	cpsid	i
}
 800e7d4:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	43da      	mvns	r2, r3
 800e7da:	4b08      	ldr	r3, [pc, #32]	; (800e7fc <UTIL_SEQ_PauseTask+0x3c>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	4013      	ands	r3, r2
 800e7e0:	4a06      	ldr	r2, [pc, #24]	; (800e7fc <UTIL_SEQ_PauseTask+0x3c>)
 800e7e2:	6013      	str	r3, [r2, #0]
 800e7e4:	697b      	ldr	r3, [r7, #20]
 800e7e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	f383 8810 	msr	PRIMASK, r3
}
 800e7ee:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e7f0:	bf00      	nop
}
 800e7f2:	371c      	adds	r7, #28
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr
 800e7fc:	20000044 	.word	0x20000044

0800e800 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800e800:	b480      	push	{r7}
 800e802:	b087      	sub	sp, #28
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e808:	f3ef 8310 	mrs	r3, PRIMASK
 800e80c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e80e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e810:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e812:	b672      	cpsid	i
}
 800e814:	bf00      	nop

  TaskMask |= TaskId_bm;
 800e816:	4b09      	ldr	r3, [pc, #36]	; (800e83c <UTIL_SEQ_ResumeTask+0x3c>)
 800e818:	681a      	ldr	r2, [r3, #0]
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	4313      	orrs	r3, r2
 800e81e:	4a07      	ldr	r2, [pc, #28]	; (800e83c <UTIL_SEQ_ResumeTask+0x3c>)
 800e820:	6013      	str	r3, [r2, #0]
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	f383 8810 	msr	PRIMASK, r3
}
 800e82c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e82e:	bf00      	nop
}
 800e830:	371c      	adds	r7, #28
 800e832:	46bd      	mov	sp, r7
 800e834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e838:	4770      	bx	lr
 800e83a:	bf00      	nop
 800e83c:	20000044 	.word	0x20000044

0800e840 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800e840:	b480      	push	{r7}
 800e842:	b087      	sub	sp, #28
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e848:	f3ef 8310 	mrs	r3, PRIMASK
 800e84c:	60fb      	str	r3, [r7, #12]
  return(result);
 800e84e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e850:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e852:	b672      	cpsid	i
}
 800e854:	bf00      	nop

  EvtSet |= EvtId_bm;
 800e856:	4b09      	ldr	r3, [pc, #36]	; (800e87c <UTIL_SEQ_SetEvt+0x3c>)
 800e858:	681a      	ldr	r2, [r3, #0]
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	4313      	orrs	r3, r2
 800e85e:	4a07      	ldr	r2, [pc, #28]	; (800e87c <UTIL_SEQ_SetEvt+0x3c>)
 800e860:	6013      	str	r3, [r2, #0]
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	f383 8810 	msr	PRIMASK, r3
}
 800e86c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800e86e:	bf00      	nop
}
 800e870:	371c      	adds	r7, #28
 800e872:	46bd      	mov	sp, r7
 800e874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e878:	4770      	bx	lr
 800e87a:	bf00      	nop
 800e87c:	20001700 	.word	0x20001700

0800e880 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b088      	sub	sp, #32
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800e888:	4b1f      	ldr	r3, [pc, #124]	; (800e908 <UTIL_SEQ_WaitEvt+0x88>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800e88e:	4b1e      	ldr	r3, [pc, #120]	; (800e908 <UTIL_SEQ_WaitEvt+0x88>)
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e896:	d102      	bne.n	800e89e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800e898:	2300      	movs	r3, #0
 800e89a:	61fb      	str	r3, [r7, #28]
 800e89c:	e005      	b.n	800e8aa <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800e89e:	4b1a      	ldr	r3, [pc, #104]	; (800e908 <UTIL_SEQ_WaitEvt+0x88>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	fa02 f303 	lsl.w	r3, r2, r3
 800e8a8:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800e8aa:	4b18      	ldr	r3, [pc, #96]	; (800e90c <UTIL_SEQ_WaitEvt+0x8c>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800e8b0:	4a16      	ldr	r2, [pc, #88]	; (800e90c <UTIL_SEQ_WaitEvt+0x8c>)
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800e8b6:	e003      	b.n	800e8c0 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800e8b8:	6879      	ldr	r1, [r7, #4]
 800e8ba:	69f8      	ldr	r0, [r7, #28]
 800e8bc:	f7f2 ff46 	bl	800174c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800e8c0:	4b13      	ldr	r3, [pc, #76]	; (800e910 <UTIL_SEQ_WaitEvt+0x90>)
 800e8c2:	681a      	ldr	r2, [r3, #0]
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	4013      	ands	r3, r2
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d0f5      	beq.n	800e8b8 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800e8cc:	4a0e      	ldr	r2, [pc, #56]	; (800e908 <UTIL_SEQ_WaitEvt+0x88>)
 800e8ce:	69bb      	ldr	r3, [r7, #24]
 800e8d0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8d2:	f3ef 8310 	mrs	r3, PRIMASK
 800e8d6:	60bb      	str	r3, [r7, #8]
  return(result);
 800e8d8:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e8da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800e8dc:	b672      	cpsid	i
}
 800e8de:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	43da      	mvns	r2, r3
 800e8e4:	4b0a      	ldr	r3, [pc, #40]	; (800e910 <UTIL_SEQ_WaitEvt+0x90>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	4013      	ands	r3, r2
 800e8ea:	4a09      	ldr	r2, [pc, #36]	; (800e910 <UTIL_SEQ_WaitEvt+0x90>)
 800e8ec:	6013      	str	r3, [r2, #0]
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	f383 8810 	msr	PRIMASK, r3
}
 800e8f8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800e8fa:	4a04      	ldr	r2, [pc, #16]	; (800e90c <UTIL_SEQ_WaitEvt+0x8c>)
 800e8fc:	697b      	ldr	r3, [r7, #20]
 800e8fe:	6013      	str	r3, [r2, #0]
  return;
 800e900:	bf00      	nop
}
 800e902:	3720      	adds	r7, #32
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}
 800e908:	20001708 	.word	0x20001708
 800e90c:	20001704 	.word	0x20001704
 800e910:	20001700 	.word	0x20001700

0800e914 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800e914:	b480      	push	{r7}
 800e916:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800e918:	bf00      	nop
}
 800e91a:	46bd      	mov	sp, r7
 800e91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e920:	4770      	bx	lr

0800e922 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800e922:	b480      	push	{r7}
 800e924:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800e926:	bf00      	nop
}
 800e928:	46bd      	mov	sp, r7
 800e92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92e:	4770      	bx	lr

0800e930 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800e930:	b480      	push	{r7}
 800e932:	b085      	sub	sp, #20
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800e938:	2300      	movs	r3, #0
 800e93a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	0c1b      	lsrs	r3, r3, #16
 800e944:	041b      	lsls	r3, r3, #16
 800e946:	2b00      	cmp	r3, #0
 800e948:	d104      	bne.n	800e954 <SEQ_BitPosition+0x24>
 800e94a:	2310      	movs	r3, #16
 800e94c:	73fb      	strb	r3, [r7, #15]
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	041b      	lsls	r3, r3, #16
 800e952:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d105      	bne.n	800e96a <SEQ_BitPosition+0x3a>
 800e95e:	7bfb      	ldrb	r3, [r7, #15]
 800e960:	3308      	adds	r3, #8
 800e962:	73fb      	strb	r3, [r7, #15]
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	021b      	lsls	r3, r3, #8
 800e968:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800e96a:	68bb      	ldr	r3, [r7, #8]
 800e96c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e970:	2b00      	cmp	r3, #0
 800e972:	d105      	bne.n	800e980 <SEQ_BitPosition+0x50>
 800e974:	7bfb      	ldrb	r3, [r7, #15]
 800e976:	3304      	adds	r3, #4
 800e978:	73fb      	strb	r3, [r7, #15]
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	011b      	lsls	r3, r3, #4
 800e97e:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800e980:	68bb      	ldr	r3, [r7, #8]
 800e982:	0f1b      	lsrs	r3, r3, #28
 800e984:	4a07      	ldr	r2, [pc, #28]	; (800e9a4 <SEQ_BitPosition+0x74>)
 800e986:	5cd2      	ldrb	r2, [r2, r3]
 800e988:	7bfb      	ldrb	r3, [r7, #15]
 800e98a:	4413      	add	r3, r2
 800e98c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800e98e:	7bfb      	ldrb	r3, [r7, #15]
 800e990:	f1c3 031f 	rsb	r3, r3, #31
 800e994:	b2db      	uxtb	r3, r3
}
 800e996:	4618      	mov	r0, r3
 800e998:	3714      	adds	r7, #20
 800e99a:	46bd      	mov	sp, r7
 800e99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a0:	4770      	bx	lr
 800e9a2:	bf00      	nop
 800e9a4:	080110f8 	.word	0x080110f8

0800e9a8 <std>:
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	b510      	push	{r4, lr}
 800e9ac:	4604      	mov	r4, r0
 800e9ae:	e9c0 3300 	strd	r3, r3, [r0]
 800e9b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e9b6:	6083      	str	r3, [r0, #8]
 800e9b8:	8181      	strh	r1, [r0, #12]
 800e9ba:	6643      	str	r3, [r0, #100]	; 0x64
 800e9bc:	81c2      	strh	r2, [r0, #14]
 800e9be:	6183      	str	r3, [r0, #24]
 800e9c0:	4619      	mov	r1, r3
 800e9c2:	2208      	movs	r2, #8
 800e9c4:	305c      	adds	r0, #92	; 0x5c
 800e9c6:	f000 f9ff 	bl	800edc8 <memset>
 800e9ca:	4b0d      	ldr	r3, [pc, #52]	; (800ea00 <std+0x58>)
 800e9cc:	6263      	str	r3, [r4, #36]	; 0x24
 800e9ce:	4b0d      	ldr	r3, [pc, #52]	; (800ea04 <std+0x5c>)
 800e9d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e9d2:	4b0d      	ldr	r3, [pc, #52]	; (800ea08 <std+0x60>)
 800e9d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e9d6:	4b0d      	ldr	r3, [pc, #52]	; (800ea0c <std+0x64>)
 800e9d8:	6323      	str	r3, [r4, #48]	; 0x30
 800e9da:	4b0d      	ldr	r3, [pc, #52]	; (800ea10 <std+0x68>)
 800e9dc:	6224      	str	r4, [r4, #32]
 800e9de:	429c      	cmp	r4, r3
 800e9e0:	d006      	beq.n	800e9f0 <std+0x48>
 800e9e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e9e6:	4294      	cmp	r4, r2
 800e9e8:	d002      	beq.n	800e9f0 <std+0x48>
 800e9ea:	33d0      	adds	r3, #208	; 0xd0
 800e9ec:	429c      	cmp	r4, r3
 800e9ee:	d105      	bne.n	800e9fc <std+0x54>
 800e9f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e9f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9f8:	f000 ba58 	b.w	800eeac <__retarget_lock_init_recursive>
 800e9fc:	bd10      	pop	{r4, pc}
 800e9fe:	bf00      	nop
 800ea00:	0800ec19 	.word	0x0800ec19
 800ea04:	0800ec3b 	.word	0x0800ec3b
 800ea08:	0800ec73 	.word	0x0800ec73
 800ea0c:	0800ec97 	.word	0x0800ec97
 800ea10:	2000179c 	.word	0x2000179c

0800ea14 <stdio_exit_handler>:
 800ea14:	4a02      	ldr	r2, [pc, #8]	; (800ea20 <stdio_exit_handler+0xc>)
 800ea16:	4903      	ldr	r1, [pc, #12]	; (800ea24 <stdio_exit_handler+0x10>)
 800ea18:	4803      	ldr	r0, [pc, #12]	; (800ea28 <stdio_exit_handler+0x14>)
 800ea1a:	f000 b869 	b.w	800eaf0 <_fwalk_sglue>
 800ea1e:	bf00      	nop
 800ea20:	2000004c 	.word	0x2000004c
 800ea24:	0800f775 	.word	0x0800f775
 800ea28:	20000058 	.word	0x20000058

0800ea2c <cleanup_stdio>:
 800ea2c:	6841      	ldr	r1, [r0, #4]
 800ea2e:	4b0c      	ldr	r3, [pc, #48]	; (800ea60 <cleanup_stdio+0x34>)
 800ea30:	4299      	cmp	r1, r3
 800ea32:	b510      	push	{r4, lr}
 800ea34:	4604      	mov	r4, r0
 800ea36:	d001      	beq.n	800ea3c <cleanup_stdio+0x10>
 800ea38:	f000 fe9c 	bl	800f774 <_fflush_r>
 800ea3c:	68a1      	ldr	r1, [r4, #8]
 800ea3e:	4b09      	ldr	r3, [pc, #36]	; (800ea64 <cleanup_stdio+0x38>)
 800ea40:	4299      	cmp	r1, r3
 800ea42:	d002      	beq.n	800ea4a <cleanup_stdio+0x1e>
 800ea44:	4620      	mov	r0, r4
 800ea46:	f000 fe95 	bl	800f774 <_fflush_r>
 800ea4a:	68e1      	ldr	r1, [r4, #12]
 800ea4c:	4b06      	ldr	r3, [pc, #24]	; (800ea68 <cleanup_stdio+0x3c>)
 800ea4e:	4299      	cmp	r1, r3
 800ea50:	d004      	beq.n	800ea5c <cleanup_stdio+0x30>
 800ea52:	4620      	mov	r0, r4
 800ea54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea58:	f000 be8c 	b.w	800f774 <_fflush_r>
 800ea5c:	bd10      	pop	{r4, pc}
 800ea5e:	bf00      	nop
 800ea60:	2000179c 	.word	0x2000179c
 800ea64:	20001804 	.word	0x20001804
 800ea68:	2000186c 	.word	0x2000186c

0800ea6c <global_stdio_init.part.0>:
 800ea6c:	b510      	push	{r4, lr}
 800ea6e:	4b0b      	ldr	r3, [pc, #44]	; (800ea9c <global_stdio_init.part.0+0x30>)
 800ea70:	4c0b      	ldr	r4, [pc, #44]	; (800eaa0 <global_stdio_init.part.0+0x34>)
 800ea72:	4a0c      	ldr	r2, [pc, #48]	; (800eaa4 <global_stdio_init.part.0+0x38>)
 800ea74:	601a      	str	r2, [r3, #0]
 800ea76:	4620      	mov	r0, r4
 800ea78:	2200      	movs	r2, #0
 800ea7a:	2104      	movs	r1, #4
 800ea7c:	f7ff ff94 	bl	800e9a8 <std>
 800ea80:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ea84:	2201      	movs	r2, #1
 800ea86:	2109      	movs	r1, #9
 800ea88:	f7ff ff8e 	bl	800e9a8 <std>
 800ea8c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ea90:	2202      	movs	r2, #2
 800ea92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea96:	2112      	movs	r1, #18
 800ea98:	f7ff bf86 	b.w	800e9a8 <std>
 800ea9c:	200018d4 	.word	0x200018d4
 800eaa0:	2000179c 	.word	0x2000179c
 800eaa4:	0800ea15 	.word	0x0800ea15

0800eaa8 <__sfp_lock_acquire>:
 800eaa8:	4801      	ldr	r0, [pc, #4]	; (800eab0 <__sfp_lock_acquire+0x8>)
 800eaaa:	f000 ba00 	b.w	800eeae <__retarget_lock_acquire_recursive>
 800eaae:	bf00      	nop
 800eab0:	200018dd 	.word	0x200018dd

0800eab4 <__sfp_lock_release>:
 800eab4:	4801      	ldr	r0, [pc, #4]	; (800eabc <__sfp_lock_release+0x8>)
 800eab6:	f000 b9fb 	b.w	800eeb0 <__retarget_lock_release_recursive>
 800eaba:	bf00      	nop
 800eabc:	200018dd 	.word	0x200018dd

0800eac0 <__sinit>:
 800eac0:	b510      	push	{r4, lr}
 800eac2:	4604      	mov	r4, r0
 800eac4:	f7ff fff0 	bl	800eaa8 <__sfp_lock_acquire>
 800eac8:	6a23      	ldr	r3, [r4, #32]
 800eaca:	b11b      	cbz	r3, 800ead4 <__sinit+0x14>
 800eacc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ead0:	f7ff bff0 	b.w	800eab4 <__sfp_lock_release>
 800ead4:	4b04      	ldr	r3, [pc, #16]	; (800eae8 <__sinit+0x28>)
 800ead6:	6223      	str	r3, [r4, #32]
 800ead8:	4b04      	ldr	r3, [pc, #16]	; (800eaec <__sinit+0x2c>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d1f5      	bne.n	800eacc <__sinit+0xc>
 800eae0:	f7ff ffc4 	bl	800ea6c <global_stdio_init.part.0>
 800eae4:	e7f2      	b.n	800eacc <__sinit+0xc>
 800eae6:	bf00      	nop
 800eae8:	0800ea2d 	.word	0x0800ea2d
 800eaec:	200018d4 	.word	0x200018d4

0800eaf0 <_fwalk_sglue>:
 800eaf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eaf4:	4607      	mov	r7, r0
 800eaf6:	4688      	mov	r8, r1
 800eaf8:	4614      	mov	r4, r2
 800eafa:	2600      	movs	r6, #0
 800eafc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eb00:	f1b9 0901 	subs.w	r9, r9, #1
 800eb04:	d505      	bpl.n	800eb12 <_fwalk_sglue+0x22>
 800eb06:	6824      	ldr	r4, [r4, #0]
 800eb08:	2c00      	cmp	r4, #0
 800eb0a:	d1f7      	bne.n	800eafc <_fwalk_sglue+0xc>
 800eb0c:	4630      	mov	r0, r6
 800eb0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb12:	89ab      	ldrh	r3, [r5, #12]
 800eb14:	2b01      	cmp	r3, #1
 800eb16:	d907      	bls.n	800eb28 <_fwalk_sglue+0x38>
 800eb18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	d003      	beq.n	800eb28 <_fwalk_sglue+0x38>
 800eb20:	4629      	mov	r1, r5
 800eb22:	4638      	mov	r0, r7
 800eb24:	47c0      	blx	r8
 800eb26:	4306      	orrs	r6, r0
 800eb28:	3568      	adds	r5, #104	; 0x68
 800eb2a:	e7e9      	b.n	800eb00 <_fwalk_sglue+0x10>

0800eb2c <iprintf>:
 800eb2c:	b40f      	push	{r0, r1, r2, r3}
 800eb2e:	b507      	push	{r0, r1, r2, lr}
 800eb30:	4906      	ldr	r1, [pc, #24]	; (800eb4c <iprintf+0x20>)
 800eb32:	ab04      	add	r3, sp, #16
 800eb34:	6808      	ldr	r0, [r1, #0]
 800eb36:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb3a:	6881      	ldr	r1, [r0, #8]
 800eb3c:	9301      	str	r3, [sp, #4]
 800eb3e:	f000 fae9 	bl	800f114 <_vfiprintf_r>
 800eb42:	b003      	add	sp, #12
 800eb44:	f85d eb04 	ldr.w	lr, [sp], #4
 800eb48:	b004      	add	sp, #16
 800eb4a:	4770      	bx	lr
 800eb4c:	200000a4 	.word	0x200000a4

0800eb50 <putchar>:
 800eb50:	4b02      	ldr	r3, [pc, #8]	; (800eb5c <putchar+0xc>)
 800eb52:	4601      	mov	r1, r0
 800eb54:	6818      	ldr	r0, [r3, #0]
 800eb56:	6882      	ldr	r2, [r0, #8]
 800eb58:	f000 be96 	b.w	800f888 <_putc_r>
 800eb5c:	200000a4 	.word	0x200000a4

0800eb60 <_puts_r>:
 800eb60:	6a03      	ldr	r3, [r0, #32]
 800eb62:	b570      	push	{r4, r5, r6, lr}
 800eb64:	6884      	ldr	r4, [r0, #8]
 800eb66:	4605      	mov	r5, r0
 800eb68:	460e      	mov	r6, r1
 800eb6a:	b90b      	cbnz	r3, 800eb70 <_puts_r+0x10>
 800eb6c:	f7ff ffa8 	bl	800eac0 <__sinit>
 800eb70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb72:	07db      	lsls	r3, r3, #31
 800eb74:	d405      	bmi.n	800eb82 <_puts_r+0x22>
 800eb76:	89a3      	ldrh	r3, [r4, #12]
 800eb78:	0598      	lsls	r0, r3, #22
 800eb7a:	d402      	bmi.n	800eb82 <_puts_r+0x22>
 800eb7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb7e:	f000 f996 	bl	800eeae <__retarget_lock_acquire_recursive>
 800eb82:	89a3      	ldrh	r3, [r4, #12]
 800eb84:	0719      	lsls	r1, r3, #28
 800eb86:	d513      	bpl.n	800ebb0 <_puts_r+0x50>
 800eb88:	6923      	ldr	r3, [r4, #16]
 800eb8a:	b18b      	cbz	r3, 800ebb0 <_puts_r+0x50>
 800eb8c:	3e01      	subs	r6, #1
 800eb8e:	68a3      	ldr	r3, [r4, #8]
 800eb90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eb94:	3b01      	subs	r3, #1
 800eb96:	60a3      	str	r3, [r4, #8]
 800eb98:	b9e9      	cbnz	r1, 800ebd6 <_puts_r+0x76>
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	da2e      	bge.n	800ebfc <_puts_r+0x9c>
 800eb9e:	4622      	mov	r2, r4
 800eba0:	210a      	movs	r1, #10
 800eba2:	4628      	mov	r0, r5
 800eba4:	f000 f87b 	bl	800ec9e <__swbuf_r>
 800eba8:	3001      	adds	r0, #1
 800ebaa:	d007      	beq.n	800ebbc <_puts_r+0x5c>
 800ebac:	250a      	movs	r5, #10
 800ebae:	e007      	b.n	800ebc0 <_puts_r+0x60>
 800ebb0:	4621      	mov	r1, r4
 800ebb2:	4628      	mov	r0, r5
 800ebb4:	f000 f8b0 	bl	800ed18 <__swsetup_r>
 800ebb8:	2800      	cmp	r0, #0
 800ebba:	d0e7      	beq.n	800eb8c <_puts_r+0x2c>
 800ebbc:	f04f 35ff 	mov.w	r5, #4294967295
 800ebc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ebc2:	07da      	lsls	r2, r3, #31
 800ebc4:	d405      	bmi.n	800ebd2 <_puts_r+0x72>
 800ebc6:	89a3      	ldrh	r3, [r4, #12]
 800ebc8:	059b      	lsls	r3, r3, #22
 800ebca:	d402      	bmi.n	800ebd2 <_puts_r+0x72>
 800ebcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ebce:	f000 f96f 	bl	800eeb0 <__retarget_lock_release_recursive>
 800ebd2:	4628      	mov	r0, r5
 800ebd4:	bd70      	pop	{r4, r5, r6, pc}
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	da04      	bge.n	800ebe4 <_puts_r+0x84>
 800ebda:	69a2      	ldr	r2, [r4, #24]
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	dc06      	bgt.n	800ebee <_puts_r+0x8e>
 800ebe0:	290a      	cmp	r1, #10
 800ebe2:	d004      	beq.n	800ebee <_puts_r+0x8e>
 800ebe4:	6823      	ldr	r3, [r4, #0]
 800ebe6:	1c5a      	adds	r2, r3, #1
 800ebe8:	6022      	str	r2, [r4, #0]
 800ebea:	7019      	strb	r1, [r3, #0]
 800ebec:	e7cf      	b.n	800eb8e <_puts_r+0x2e>
 800ebee:	4622      	mov	r2, r4
 800ebf0:	4628      	mov	r0, r5
 800ebf2:	f000 f854 	bl	800ec9e <__swbuf_r>
 800ebf6:	3001      	adds	r0, #1
 800ebf8:	d1c9      	bne.n	800eb8e <_puts_r+0x2e>
 800ebfa:	e7df      	b.n	800ebbc <_puts_r+0x5c>
 800ebfc:	6823      	ldr	r3, [r4, #0]
 800ebfe:	250a      	movs	r5, #10
 800ec00:	1c5a      	adds	r2, r3, #1
 800ec02:	6022      	str	r2, [r4, #0]
 800ec04:	701d      	strb	r5, [r3, #0]
 800ec06:	e7db      	b.n	800ebc0 <_puts_r+0x60>

0800ec08 <puts>:
 800ec08:	4b02      	ldr	r3, [pc, #8]	; (800ec14 <puts+0xc>)
 800ec0a:	4601      	mov	r1, r0
 800ec0c:	6818      	ldr	r0, [r3, #0]
 800ec0e:	f7ff bfa7 	b.w	800eb60 <_puts_r>
 800ec12:	bf00      	nop
 800ec14:	200000a4 	.word	0x200000a4

0800ec18 <__sread>:
 800ec18:	b510      	push	{r4, lr}
 800ec1a:	460c      	mov	r4, r1
 800ec1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec20:	f000 f8fc 	bl	800ee1c <_read_r>
 800ec24:	2800      	cmp	r0, #0
 800ec26:	bfab      	itete	ge
 800ec28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ec2a:	89a3      	ldrhlt	r3, [r4, #12]
 800ec2c:	181b      	addge	r3, r3, r0
 800ec2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ec32:	bfac      	ite	ge
 800ec34:	6563      	strge	r3, [r4, #84]	; 0x54
 800ec36:	81a3      	strhlt	r3, [r4, #12]
 800ec38:	bd10      	pop	{r4, pc}

0800ec3a <__swrite>:
 800ec3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec3e:	461f      	mov	r7, r3
 800ec40:	898b      	ldrh	r3, [r1, #12]
 800ec42:	05db      	lsls	r3, r3, #23
 800ec44:	4605      	mov	r5, r0
 800ec46:	460c      	mov	r4, r1
 800ec48:	4616      	mov	r6, r2
 800ec4a:	d505      	bpl.n	800ec58 <__swrite+0x1e>
 800ec4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec50:	2302      	movs	r3, #2
 800ec52:	2200      	movs	r2, #0
 800ec54:	f000 f8d0 	bl	800edf8 <_lseek_r>
 800ec58:	89a3      	ldrh	r3, [r4, #12]
 800ec5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec62:	81a3      	strh	r3, [r4, #12]
 800ec64:	4632      	mov	r2, r6
 800ec66:	463b      	mov	r3, r7
 800ec68:	4628      	mov	r0, r5
 800ec6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec6e:	f000 b8e7 	b.w	800ee40 <_write_r>

0800ec72 <__sseek>:
 800ec72:	b510      	push	{r4, lr}
 800ec74:	460c      	mov	r4, r1
 800ec76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec7a:	f000 f8bd 	bl	800edf8 <_lseek_r>
 800ec7e:	1c43      	adds	r3, r0, #1
 800ec80:	89a3      	ldrh	r3, [r4, #12]
 800ec82:	bf15      	itete	ne
 800ec84:	6560      	strne	r0, [r4, #84]	; 0x54
 800ec86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ec8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ec8e:	81a3      	strheq	r3, [r4, #12]
 800ec90:	bf18      	it	ne
 800ec92:	81a3      	strhne	r3, [r4, #12]
 800ec94:	bd10      	pop	{r4, pc}

0800ec96 <__sclose>:
 800ec96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec9a:	f000 b89d 	b.w	800edd8 <_close_r>

0800ec9e <__swbuf_r>:
 800ec9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eca0:	460e      	mov	r6, r1
 800eca2:	4614      	mov	r4, r2
 800eca4:	4605      	mov	r5, r0
 800eca6:	b118      	cbz	r0, 800ecb0 <__swbuf_r+0x12>
 800eca8:	6a03      	ldr	r3, [r0, #32]
 800ecaa:	b90b      	cbnz	r3, 800ecb0 <__swbuf_r+0x12>
 800ecac:	f7ff ff08 	bl	800eac0 <__sinit>
 800ecb0:	69a3      	ldr	r3, [r4, #24]
 800ecb2:	60a3      	str	r3, [r4, #8]
 800ecb4:	89a3      	ldrh	r3, [r4, #12]
 800ecb6:	071a      	lsls	r2, r3, #28
 800ecb8:	d525      	bpl.n	800ed06 <__swbuf_r+0x68>
 800ecba:	6923      	ldr	r3, [r4, #16]
 800ecbc:	b31b      	cbz	r3, 800ed06 <__swbuf_r+0x68>
 800ecbe:	6823      	ldr	r3, [r4, #0]
 800ecc0:	6922      	ldr	r2, [r4, #16]
 800ecc2:	1a98      	subs	r0, r3, r2
 800ecc4:	6963      	ldr	r3, [r4, #20]
 800ecc6:	b2f6      	uxtb	r6, r6
 800ecc8:	4283      	cmp	r3, r0
 800ecca:	4637      	mov	r7, r6
 800eccc:	dc04      	bgt.n	800ecd8 <__swbuf_r+0x3a>
 800ecce:	4621      	mov	r1, r4
 800ecd0:	4628      	mov	r0, r5
 800ecd2:	f000 fd4f 	bl	800f774 <_fflush_r>
 800ecd6:	b9e0      	cbnz	r0, 800ed12 <__swbuf_r+0x74>
 800ecd8:	68a3      	ldr	r3, [r4, #8]
 800ecda:	3b01      	subs	r3, #1
 800ecdc:	60a3      	str	r3, [r4, #8]
 800ecde:	6823      	ldr	r3, [r4, #0]
 800ece0:	1c5a      	adds	r2, r3, #1
 800ece2:	6022      	str	r2, [r4, #0]
 800ece4:	701e      	strb	r6, [r3, #0]
 800ece6:	6962      	ldr	r2, [r4, #20]
 800ece8:	1c43      	adds	r3, r0, #1
 800ecea:	429a      	cmp	r2, r3
 800ecec:	d004      	beq.n	800ecf8 <__swbuf_r+0x5a>
 800ecee:	89a3      	ldrh	r3, [r4, #12]
 800ecf0:	07db      	lsls	r3, r3, #31
 800ecf2:	d506      	bpl.n	800ed02 <__swbuf_r+0x64>
 800ecf4:	2e0a      	cmp	r6, #10
 800ecf6:	d104      	bne.n	800ed02 <__swbuf_r+0x64>
 800ecf8:	4621      	mov	r1, r4
 800ecfa:	4628      	mov	r0, r5
 800ecfc:	f000 fd3a 	bl	800f774 <_fflush_r>
 800ed00:	b938      	cbnz	r0, 800ed12 <__swbuf_r+0x74>
 800ed02:	4638      	mov	r0, r7
 800ed04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed06:	4621      	mov	r1, r4
 800ed08:	4628      	mov	r0, r5
 800ed0a:	f000 f805 	bl	800ed18 <__swsetup_r>
 800ed0e:	2800      	cmp	r0, #0
 800ed10:	d0d5      	beq.n	800ecbe <__swbuf_r+0x20>
 800ed12:	f04f 37ff 	mov.w	r7, #4294967295
 800ed16:	e7f4      	b.n	800ed02 <__swbuf_r+0x64>

0800ed18 <__swsetup_r>:
 800ed18:	b538      	push	{r3, r4, r5, lr}
 800ed1a:	4b2a      	ldr	r3, [pc, #168]	; (800edc4 <__swsetup_r+0xac>)
 800ed1c:	4605      	mov	r5, r0
 800ed1e:	6818      	ldr	r0, [r3, #0]
 800ed20:	460c      	mov	r4, r1
 800ed22:	b118      	cbz	r0, 800ed2c <__swsetup_r+0x14>
 800ed24:	6a03      	ldr	r3, [r0, #32]
 800ed26:	b90b      	cbnz	r3, 800ed2c <__swsetup_r+0x14>
 800ed28:	f7ff feca 	bl	800eac0 <__sinit>
 800ed2c:	89a3      	ldrh	r3, [r4, #12]
 800ed2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed32:	0718      	lsls	r0, r3, #28
 800ed34:	d422      	bmi.n	800ed7c <__swsetup_r+0x64>
 800ed36:	06d9      	lsls	r1, r3, #27
 800ed38:	d407      	bmi.n	800ed4a <__swsetup_r+0x32>
 800ed3a:	2309      	movs	r3, #9
 800ed3c:	602b      	str	r3, [r5, #0]
 800ed3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ed42:	81a3      	strh	r3, [r4, #12]
 800ed44:	f04f 30ff 	mov.w	r0, #4294967295
 800ed48:	e034      	b.n	800edb4 <__swsetup_r+0x9c>
 800ed4a:	0758      	lsls	r0, r3, #29
 800ed4c:	d512      	bpl.n	800ed74 <__swsetup_r+0x5c>
 800ed4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed50:	b141      	cbz	r1, 800ed64 <__swsetup_r+0x4c>
 800ed52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed56:	4299      	cmp	r1, r3
 800ed58:	d002      	beq.n	800ed60 <__swsetup_r+0x48>
 800ed5a:	4628      	mov	r0, r5
 800ed5c:	f000 f8b8 	bl	800eed0 <_free_r>
 800ed60:	2300      	movs	r3, #0
 800ed62:	6363      	str	r3, [r4, #52]	; 0x34
 800ed64:	89a3      	ldrh	r3, [r4, #12]
 800ed66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ed6a:	81a3      	strh	r3, [r4, #12]
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	6063      	str	r3, [r4, #4]
 800ed70:	6923      	ldr	r3, [r4, #16]
 800ed72:	6023      	str	r3, [r4, #0]
 800ed74:	89a3      	ldrh	r3, [r4, #12]
 800ed76:	f043 0308 	orr.w	r3, r3, #8
 800ed7a:	81a3      	strh	r3, [r4, #12]
 800ed7c:	6923      	ldr	r3, [r4, #16]
 800ed7e:	b94b      	cbnz	r3, 800ed94 <__swsetup_r+0x7c>
 800ed80:	89a3      	ldrh	r3, [r4, #12]
 800ed82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ed86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed8a:	d003      	beq.n	800ed94 <__swsetup_r+0x7c>
 800ed8c:	4621      	mov	r1, r4
 800ed8e:	4628      	mov	r0, r5
 800ed90:	f000 fd3e 	bl	800f810 <__smakebuf_r>
 800ed94:	89a0      	ldrh	r0, [r4, #12]
 800ed96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed9a:	f010 0301 	ands.w	r3, r0, #1
 800ed9e:	d00a      	beq.n	800edb6 <__swsetup_r+0x9e>
 800eda0:	2300      	movs	r3, #0
 800eda2:	60a3      	str	r3, [r4, #8]
 800eda4:	6963      	ldr	r3, [r4, #20]
 800eda6:	425b      	negs	r3, r3
 800eda8:	61a3      	str	r3, [r4, #24]
 800edaa:	6923      	ldr	r3, [r4, #16]
 800edac:	b943      	cbnz	r3, 800edc0 <__swsetup_r+0xa8>
 800edae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800edb2:	d1c4      	bne.n	800ed3e <__swsetup_r+0x26>
 800edb4:	bd38      	pop	{r3, r4, r5, pc}
 800edb6:	0781      	lsls	r1, r0, #30
 800edb8:	bf58      	it	pl
 800edba:	6963      	ldrpl	r3, [r4, #20]
 800edbc:	60a3      	str	r3, [r4, #8]
 800edbe:	e7f4      	b.n	800edaa <__swsetup_r+0x92>
 800edc0:	2000      	movs	r0, #0
 800edc2:	e7f7      	b.n	800edb4 <__swsetup_r+0x9c>
 800edc4:	200000a4 	.word	0x200000a4

0800edc8 <memset>:
 800edc8:	4402      	add	r2, r0
 800edca:	4603      	mov	r3, r0
 800edcc:	4293      	cmp	r3, r2
 800edce:	d100      	bne.n	800edd2 <memset+0xa>
 800edd0:	4770      	bx	lr
 800edd2:	f803 1b01 	strb.w	r1, [r3], #1
 800edd6:	e7f9      	b.n	800edcc <memset+0x4>

0800edd8 <_close_r>:
 800edd8:	b538      	push	{r3, r4, r5, lr}
 800edda:	4d06      	ldr	r5, [pc, #24]	; (800edf4 <_close_r+0x1c>)
 800eddc:	2300      	movs	r3, #0
 800edde:	4604      	mov	r4, r0
 800ede0:	4608      	mov	r0, r1
 800ede2:	602b      	str	r3, [r5, #0]
 800ede4:	f000 fdb6 	bl	800f954 <_close>
 800ede8:	1c43      	adds	r3, r0, #1
 800edea:	d102      	bne.n	800edf2 <_close_r+0x1a>
 800edec:	682b      	ldr	r3, [r5, #0]
 800edee:	b103      	cbz	r3, 800edf2 <_close_r+0x1a>
 800edf0:	6023      	str	r3, [r4, #0]
 800edf2:	bd38      	pop	{r3, r4, r5, pc}
 800edf4:	200018d8 	.word	0x200018d8

0800edf8 <_lseek_r>:
 800edf8:	b538      	push	{r3, r4, r5, lr}
 800edfa:	4d07      	ldr	r5, [pc, #28]	; (800ee18 <_lseek_r+0x20>)
 800edfc:	4604      	mov	r4, r0
 800edfe:	4608      	mov	r0, r1
 800ee00:	4611      	mov	r1, r2
 800ee02:	2200      	movs	r2, #0
 800ee04:	602a      	str	r2, [r5, #0]
 800ee06:	461a      	mov	r2, r3
 800ee08:	f000 fdbc 	bl	800f984 <_lseek>
 800ee0c:	1c43      	adds	r3, r0, #1
 800ee0e:	d102      	bne.n	800ee16 <_lseek_r+0x1e>
 800ee10:	682b      	ldr	r3, [r5, #0]
 800ee12:	b103      	cbz	r3, 800ee16 <_lseek_r+0x1e>
 800ee14:	6023      	str	r3, [r4, #0]
 800ee16:	bd38      	pop	{r3, r4, r5, pc}
 800ee18:	200018d8 	.word	0x200018d8

0800ee1c <_read_r>:
 800ee1c:	b538      	push	{r3, r4, r5, lr}
 800ee1e:	4d07      	ldr	r5, [pc, #28]	; (800ee3c <_read_r+0x20>)
 800ee20:	4604      	mov	r4, r0
 800ee22:	4608      	mov	r0, r1
 800ee24:	4611      	mov	r1, r2
 800ee26:	2200      	movs	r2, #0
 800ee28:	602a      	str	r2, [r5, #0]
 800ee2a:	461a      	mov	r2, r3
 800ee2c:	f000 fdb2 	bl	800f994 <_read>
 800ee30:	1c43      	adds	r3, r0, #1
 800ee32:	d102      	bne.n	800ee3a <_read_r+0x1e>
 800ee34:	682b      	ldr	r3, [r5, #0]
 800ee36:	b103      	cbz	r3, 800ee3a <_read_r+0x1e>
 800ee38:	6023      	str	r3, [r4, #0]
 800ee3a:	bd38      	pop	{r3, r4, r5, pc}
 800ee3c:	200018d8 	.word	0x200018d8

0800ee40 <_write_r>:
 800ee40:	b538      	push	{r3, r4, r5, lr}
 800ee42:	4d07      	ldr	r5, [pc, #28]	; (800ee60 <_write_r+0x20>)
 800ee44:	4604      	mov	r4, r0
 800ee46:	4608      	mov	r0, r1
 800ee48:	4611      	mov	r1, r2
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	602a      	str	r2, [r5, #0]
 800ee4e:	461a      	mov	r2, r3
 800ee50:	f7fd fb28 	bl	800c4a4 <_write>
 800ee54:	1c43      	adds	r3, r0, #1
 800ee56:	d102      	bne.n	800ee5e <_write_r+0x1e>
 800ee58:	682b      	ldr	r3, [r5, #0]
 800ee5a:	b103      	cbz	r3, 800ee5e <_write_r+0x1e>
 800ee5c:	6023      	str	r3, [r4, #0]
 800ee5e:	bd38      	pop	{r3, r4, r5, pc}
 800ee60:	200018d8 	.word	0x200018d8

0800ee64 <__libc_init_array>:
 800ee64:	b570      	push	{r4, r5, r6, lr}
 800ee66:	4d0d      	ldr	r5, [pc, #52]	; (800ee9c <__libc_init_array+0x38>)
 800ee68:	4c0d      	ldr	r4, [pc, #52]	; (800eea0 <__libc_init_array+0x3c>)
 800ee6a:	1b64      	subs	r4, r4, r5
 800ee6c:	10a4      	asrs	r4, r4, #2
 800ee6e:	2600      	movs	r6, #0
 800ee70:	42a6      	cmp	r6, r4
 800ee72:	d109      	bne.n	800ee88 <__libc_init_array+0x24>
 800ee74:	4d0b      	ldr	r5, [pc, #44]	; (800eea4 <__libc_init_array+0x40>)
 800ee76:	4c0c      	ldr	r4, [pc, #48]	; (800eea8 <__libc_init_array+0x44>)
 800ee78:	f000 fda2 	bl	800f9c0 <_init>
 800ee7c:	1b64      	subs	r4, r4, r5
 800ee7e:	10a4      	asrs	r4, r4, #2
 800ee80:	2600      	movs	r6, #0
 800ee82:	42a6      	cmp	r6, r4
 800ee84:	d105      	bne.n	800ee92 <__libc_init_array+0x2e>
 800ee86:	bd70      	pop	{r4, r5, r6, pc}
 800ee88:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee8c:	4798      	blx	r3
 800ee8e:	3601      	adds	r6, #1
 800ee90:	e7ee      	b.n	800ee70 <__libc_init_array+0xc>
 800ee92:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee96:	4798      	blx	r3
 800ee98:	3601      	adds	r6, #1
 800ee9a:	e7f2      	b.n	800ee82 <__libc_init_array+0x1e>
 800ee9c:	08011144 	.word	0x08011144
 800eea0:	08011144 	.word	0x08011144
 800eea4:	08011144 	.word	0x08011144
 800eea8:	08011148 	.word	0x08011148

0800eeac <__retarget_lock_init_recursive>:
 800eeac:	4770      	bx	lr

0800eeae <__retarget_lock_acquire_recursive>:
 800eeae:	4770      	bx	lr

0800eeb0 <__retarget_lock_release_recursive>:
 800eeb0:	4770      	bx	lr

0800eeb2 <memcpy>:
 800eeb2:	440a      	add	r2, r1
 800eeb4:	4291      	cmp	r1, r2
 800eeb6:	f100 33ff 	add.w	r3, r0, #4294967295
 800eeba:	d100      	bne.n	800eebe <memcpy+0xc>
 800eebc:	4770      	bx	lr
 800eebe:	b510      	push	{r4, lr}
 800eec0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eec4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eec8:	4291      	cmp	r1, r2
 800eeca:	d1f9      	bne.n	800eec0 <memcpy+0xe>
 800eecc:	bd10      	pop	{r4, pc}
	...

0800eed0 <_free_r>:
 800eed0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eed2:	2900      	cmp	r1, #0
 800eed4:	d044      	beq.n	800ef60 <_free_r+0x90>
 800eed6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eeda:	9001      	str	r0, [sp, #4]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	f1a1 0404 	sub.w	r4, r1, #4
 800eee2:	bfb8      	it	lt
 800eee4:	18e4      	addlt	r4, r4, r3
 800eee6:	f000 f8df 	bl	800f0a8 <__malloc_lock>
 800eeea:	4a1e      	ldr	r2, [pc, #120]	; (800ef64 <_free_r+0x94>)
 800eeec:	9801      	ldr	r0, [sp, #4]
 800eeee:	6813      	ldr	r3, [r2, #0]
 800eef0:	b933      	cbnz	r3, 800ef00 <_free_r+0x30>
 800eef2:	6063      	str	r3, [r4, #4]
 800eef4:	6014      	str	r4, [r2, #0]
 800eef6:	b003      	add	sp, #12
 800eef8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eefc:	f000 b8da 	b.w	800f0b4 <__malloc_unlock>
 800ef00:	42a3      	cmp	r3, r4
 800ef02:	d908      	bls.n	800ef16 <_free_r+0x46>
 800ef04:	6825      	ldr	r5, [r4, #0]
 800ef06:	1961      	adds	r1, r4, r5
 800ef08:	428b      	cmp	r3, r1
 800ef0a:	bf01      	itttt	eq
 800ef0c:	6819      	ldreq	r1, [r3, #0]
 800ef0e:	685b      	ldreq	r3, [r3, #4]
 800ef10:	1949      	addeq	r1, r1, r5
 800ef12:	6021      	streq	r1, [r4, #0]
 800ef14:	e7ed      	b.n	800eef2 <_free_r+0x22>
 800ef16:	461a      	mov	r2, r3
 800ef18:	685b      	ldr	r3, [r3, #4]
 800ef1a:	b10b      	cbz	r3, 800ef20 <_free_r+0x50>
 800ef1c:	42a3      	cmp	r3, r4
 800ef1e:	d9fa      	bls.n	800ef16 <_free_r+0x46>
 800ef20:	6811      	ldr	r1, [r2, #0]
 800ef22:	1855      	adds	r5, r2, r1
 800ef24:	42a5      	cmp	r5, r4
 800ef26:	d10b      	bne.n	800ef40 <_free_r+0x70>
 800ef28:	6824      	ldr	r4, [r4, #0]
 800ef2a:	4421      	add	r1, r4
 800ef2c:	1854      	adds	r4, r2, r1
 800ef2e:	42a3      	cmp	r3, r4
 800ef30:	6011      	str	r1, [r2, #0]
 800ef32:	d1e0      	bne.n	800eef6 <_free_r+0x26>
 800ef34:	681c      	ldr	r4, [r3, #0]
 800ef36:	685b      	ldr	r3, [r3, #4]
 800ef38:	6053      	str	r3, [r2, #4]
 800ef3a:	440c      	add	r4, r1
 800ef3c:	6014      	str	r4, [r2, #0]
 800ef3e:	e7da      	b.n	800eef6 <_free_r+0x26>
 800ef40:	d902      	bls.n	800ef48 <_free_r+0x78>
 800ef42:	230c      	movs	r3, #12
 800ef44:	6003      	str	r3, [r0, #0]
 800ef46:	e7d6      	b.n	800eef6 <_free_r+0x26>
 800ef48:	6825      	ldr	r5, [r4, #0]
 800ef4a:	1961      	adds	r1, r4, r5
 800ef4c:	428b      	cmp	r3, r1
 800ef4e:	bf04      	itt	eq
 800ef50:	6819      	ldreq	r1, [r3, #0]
 800ef52:	685b      	ldreq	r3, [r3, #4]
 800ef54:	6063      	str	r3, [r4, #4]
 800ef56:	bf04      	itt	eq
 800ef58:	1949      	addeq	r1, r1, r5
 800ef5a:	6021      	streq	r1, [r4, #0]
 800ef5c:	6054      	str	r4, [r2, #4]
 800ef5e:	e7ca      	b.n	800eef6 <_free_r+0x26>
 800ef60:	b003      	add	sp, #12
 800ef62:	bd30      	pop	{r4, r5, pc}
 800ef64:	200018e0 	.word	0x200018e0

0800ef68 <sbrk_aligned>:
 800ef68:	b570      	push	{r4, r5, r6, lr}
 800ef6a:	4e0e      	ldr	r6, [pc, #56]	; (800efa4 <sbrk_aligned+0x3c>)
 800ef6c:	460c      	mov	r4, r1
 800ef6e:	6831      	ldr	r1, [r6, #0]
 800ef70:	4605      	mov	r5, r0
 800ef72:	b911      	cbnz	r1, 800ef7a <sbrk_aligned+0x12>
 800ef74:	f000 fcde 	bl	800f934 <_sbrk_r>
 800ef78:	6030      	str	r0, [r6, #0]
 800ef7a:	4621      	mov	r1, r4
 800ef7c:	4628      	mov	r0, r5
 800ef7e:	f000 fcd9 	bl	800f934 <_sbrk_r>
 800ef82:	1c43      	adds	r3, r0, #1
 800ef84:	d00a      	beq.n	800ef9c <sbrk_aligned+0x34>
 800ef86:	1cc4      	adds	r4, r0, #3
 800ef88:	f024 0403 	bic.w	r4, r4, #3
 800ef8c:	42a0      	cmp	r0, r4
 800ef8e:	d007      	beq.n	800efa0 <sbrk_aligned+0x38>
 800ef90:	1a21      	subs	r1, r4, r0
 800ef92:	4628      	mov	r0, r5
 800ef94:	f000 fcce 	bl	800f934 <_sbrk_r>
 800ef98:	3001      	adds	r0, #1
 800ef9a:	d101      	bne.n	800efa0 <sbrk_aligned+0x38>
 800ef9c:	f04f 34ff 	mov.w	r4, #4294967295
 800efa0:	4620      	mov	r0, r4
 800efa2:	bd70      	pop	{r4, r5, r6, pc}
 800efa4:	200018e4 	.word	0x200018e4

0800efa8 <_malloc_r>:
 800efa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800efac:	1ccd      	adds	r5, r1, #3
 800efae:	f025 0503 	bic.w	r5, r5, #3
 800efb2:	3508      	adds	r5, #8
 800efb4:	2d0c      	cmp	r5, #12
 800efb6:	bf38      	it	cc
 800efb8:	250c      	movcc	r5, #12
 800efba:	2d00      	cmp	r5, #0
 800efbc:	4607      	mov	r7, r0
 800efbe:	db01      	blt.n	800efc4 <_malloc_r+0x1c>
 800efc0:	42a9      	cmp	r1, r5
 800efc2:	d905      	bls.n	800efd0 <_malloc_r+0x28>
 800efc4:	230c      	movs	r3, #12
 800efc6:	603b      	str	r3, [r7, #0]
 800efc8:	2600      	movs	r6, #0
 800efca:	4630      	mov	r0, r6
 800efcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efd0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800f0a4 <_malloc_r+0xfc>
 800efd4:	f000 f868 	bl	800f0a8 <__malloc_lock>
 800efd8:	f8d8 3000 	ldr.w	r3, [r8]
 800efdc:	461c      	mov	r4, r3
 800efde:	bb5c      	cbnz	r4, 800f038 <_malloc_r+0x90>
 800efe0:	4629      	mov	r1, r5
 800efe2:	4638      	mov	r0, r7
 800efe4:	f7ff ffc0 	bl	800ef68 <sbrk_aligned>
 800efe8:	1c43      	adds	r3, r0, #1
 800efea:	4604      	mov	r4, r0
 800efec:	d155      	bne.n	800f09a <_malloc_r+0xf2>
 800efee:	f8d8 4000 	ldr.w	r4, [r8]
 800eff2:	4626      	mov	r6, r4
 800eff4:	2e00      	cmp	r6, #0
 800eff6:	d145      	bne.n	800f084 <_malloc_r+0xdc>
 800eff8:	2c00      	cmp	r4, #0
 800effa:	d048      	beq.n	800f08e <_malloc_r+0xe6>
 800effc:	6823      	ldr	r3, [r4, #0]
 800effe:	4631      	mov	r1, r6
 800f000:	4638      	mov	r0, r7
 800f002:	eb04 0903 	add.w	r9, r4, r3
 800f006:	f000 fc95 	bl	800f934 <_sbrk_r>
 800f00a:	4581      	cmp	r9, r0
 800f00c:	d13f      	bne.n	800f08e <_malloc_r+0xe6>
 800f00e:	6821      	ldr	r1, [r4, #0]
 800f010:	1a6d      	subs	r5, r5, r1
 800f012:	4629      	mov	r1, r5
 800f014:	4638      	mov	r0, r7
 800f016:	f7ff ffa7 	bl	800ef68 <sbrk_aligned>
 800f01a:	3001      	adds	r0, #1
 800f01c:	d037      	beq.n	800f08e <_malloc_r+0xe6>
 800f01e:	6823      	ldr	r3, [r4, #0]
 800f020:	442b      	add	r3, r5
 800f022:	6023      	str	r3, [r4, #0]
 800f024:	f8d8 3000 	ldr.w	r3, [r8]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d038      	beq.n	800f09e <_malloc_r+0xf6>
 800f02c:	685a      	ldr	r2, [r3, #4]
 800f02e:	42a2      	cmp	r2, r4
 800f030:	d12b      	bne.n	800f08a <_malloc_r+0xe2>
 800f032:	2200      	movs	r2, #0
 800f034:	605a      	str	r2, [r3, #4]
 800f036:	e00f      	b.n	800f058 <_malloc_r+0xb0>
 800f038:	6822      	ldr	r2, [r4, #0]
 800f03a:	1b52      	subs	r2, r2, r5
 800f03c:	d41f      	bmi.n	800f07e <_malloc_r+0xd6>
 800f03e:	2a0b      	cmp	r2, #11
 800f040:	d917      	bls.n	800f072 <_malloc_r+0xca>
 800f042:	1961      	adds	r1, r4, r5
 800f044:	42a3      	cmp	r3, r4
 800f046:	6025      	str	r5, [r4, #0]
 800f048:	bf18      	it	ne
 800f04a:	6059      	strne	r1, [r3, #4]
 800f04c:	6863      	ldr	r3, [r4, #4]
 800f04e:	bf08      	it	eq
 800f050:	f8c8 1000 	streq.w	r1, [r8]
 800f054:	5162      	str	r2, [r4, r5]
 800f056:	604b      	str	r3, [r1, #4]
 800f058:	4638      	mov	r0, r7
 800f05a:	f104 060b 	add.w	r6, r4, #11
 800f05e:	f000 f829 	bl	800f0b4 <__malloc_unlock>
 800f062:	f026 0607 	bic.w	r6, r6, #7
 800f066:	1d23      	adds	r3, r4, #4
 800f068:	1af2      	subs	r2, r6, r3
 800f06a:	d0ae      	beq.n	800efca <_malloc_r+0x22>
 800f06c:	1b9b      	subs	r3, r3, r6
 800f06e:	50a3      	str	r3, [r4, r2]
 800f070:	e7ab      	b.n	800efca <_malloc_r+0x22>
 800f072:	42a3      	cmp	r3, r4
 800f074:	6862      	ldr	r2, [r4, #4]
 800f076:	d1dd      	bne.n	800f034 <_malloc_r+0x8c>
 800f078:	f8c8 2000 	str.w	r2, [r8]
 800f07c:	e7ec      	b.n	800f058 <_malloc_r+0xb0>
 800f07e:	4623      	mov	r3, r4
 800f080:	6864      	ldr	r4, [r4, #4]
 800f082:	e7ac      	b.n	800efde <_malloc_r+0x36>
 800f084:	4634      	mov	r4, r6
 800f086:	6876      	ldr	r6, [r6, #4]
 800f088:	e7b4      	b.n	800eff4 <_malloc_r+0x4c>
 800f08a:	4613      	mov	r3, r2
 800f08c:	e7cc      	b.n	800f028 <_malloc_r+0x80>
 800f08e:	230c      	movs	r3, #12
 800f090:	603b      	str	r3, [r7, #0]
 800f092:	4638      	mov	r0, r7
 800f094:	f000 f80e 	bl	800f0b4 <__malloc_unlock>
 800f098:	e797      	b.n	800efca <_malloc_r+0x22>
 800f09a:	6025      	str	r5, [r4, #0]
 800f09c:	e7dc      	b.n	800f058 <_malloc_r+0xb0>
 800f09e:	605b      	str	r3, [r3, #4]
 800f0a0:	deff      	udf	#255	; 0xff
 800f0a2:	bf00      	nop
 800f0a4:	200018e0 	.word	0x200018e0

0800f0a8 <__malloc_lock>:
 800f0a8:	4801      	ldr	r0, [pc, #4]	; (800f0b0 <__malloc_lock+0x8>)
 800f0aa:	f7ff bf00 	b.w	800eeae <__retarget_lock_acquire_recursive>
 800f0ae:	bf00      	nop
 800f0b0:	200018dc 	.word	0x200018dc

0800f0b4 <__malloc_unlock>:
 800f0b4:	4801      	ldr	r0, [pc, #4]	; (800f0bc <__malloc_unlock+0x8>)
 800f0b6:	f7ff befb 	b.w	800eeb0 <__retarget_lock_release_recursive>
 800f0ba:	bf00      	nop
 800f0bc:	200018dc 	.word	0x200018dc

0800f0c0 <__sfputc_r>:
 800f0c0:	6893      	ldr	r3, [r2, #8]
 800f0c2:	3b01      	subs	r3, #1
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	b410      	push	{r4}
 800f0c8:	6093      	str	r3, [r2, #8]
 800f0ca:	da08      	bge.n	800f0de <__sfputc_r+0x1e>
 800f0cc:	6994      	ldr	r4, [r2, #24]
 800f0ce:	42a3      	cmp	r3, r4
 800f0d0:	db01      	blt.n	800f0d6 <__sfputc_r+0x16>
 800f0d2:	290a      	cmp	r1, #10
 800f0d4:	d103      	bne.n	800f0de <__sfputc_r+0x1e>
 800f0d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0da:	f7ff bde0 	b.w	800ec9e <__swbuf_r>
 800f0de:	6813      	ldr	r3, [r2, #0]
 800f0e0:	1c58      	adds	r0, r3, #1
 800f0e2:	6010      	str	r0, [r2, #0]
 800f0e4:	7019      	strb	r1, [r3, #0]
 800f0e6:	4608      	mov	r0, r1
 800f0e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0ec:	4770      	bx	lr

0800f0ee <__sfputs_r>:
 800f0ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0f0:	4606      	mov	r6, r0
 800f0f2:	460f      	mov	r7, r1
 800f0f4:	4614      	mov	r4, r2
 800f0f6:	18d5      	adds	r5, r2, r3
 800f0f8:	42ac      	cmp	r4, r5
 800f0fa:	d101      	bne.n	800f100 <__sfputs_r+0x12>
 800f0fc:	2000      	movs	r0, #0
 800f0fe:	e007      	b.n	800f110 <__sfputs_r+0x22>
 800f100:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f104:	463a      	mov	r2, r7
 800f106:	4630      	mov	r0, r6
 800f108:	f7ff ffda 	bl	800f0c0 <__sfputc_r>
 800f10c:	1c43      	adds	r3, r0, #1
 800f10e:	d1f3      	bne.n	800f0f8 <__sfputs_r+0xa>
 800f110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f114 <_vfiprintf_r>:
 800f114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f118:	460d      	mov	r5, r1
 800f11a:	b09d      	sub	sp, #116	; 0x74
 800f11c:	4614      	mov	r4, r2
 800f11e:	4698      	mov	r8, r3
 800f120:	4606      	mov	r6, r0
 800f122:	b118      	cbz	r0, 800f12c <_vfiprintf_r+0x18>
 800f124:	6a03      	ldr	r3, [r0, #32]
 800f126:	b90b      	cbnz	r3, 800f12c <_vfiprintf_r+0x18>
 800f128:	f7ff fcca 	bl	800eac0 <__sinit>
 800f12c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f12e:	07d9      	lsls	r1, r3, #31
 800f130:	d405      	bmi.n	800f13e <_vfiprintf_r+0x2a>
 800f132:	89ab      	ldrh	r3, [r5, #12]
 800f134:	059a      	lsls	r2, r3, #22
 800f136:	d402      	bmi.n	800f13e <_vfiprintf_r+0x2a>
 800f138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f13a:	f7ff feb8 	bl	800eeae <__retarget_lock_acquire_recursive>
 800f13e:	89ab      	ldrh	r3, [r5, #12]
 800f140:	071b      	lsls	r3, r3, #28
 800f142:	d501      	bpl.n	800f148 <_vfiprintf_r+0x34>
 800f144:	692b      	ldr	r3, [r5, #16]
 800f146:	b99b      	cbnz	r3, 800f170 <_vfiprintf_r+0x5c>
 800f148:	4629      	mov	r1, r5
 800f14a:	4630      	mov	r0, r6
 800f14c:	f7ff fde4 	bl	800ed18 <__swsetup_r>
 800f150:	b170      	cbz	r0, 800f170 <_vfiprintf_r+0x5c>
 800f152:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f154:	07dc      	lsls	r4, r3, #31
 800f156:	d504      	bpl.n	800f162 <_vfiprintf_r+0x4e>
 800f158:	f04f 30ff 	mov.w	r0, #4294967295
 800f15c:	b01d      	add	sp, #116	; 0x74
 800f15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f162:	89ab      	ldrh	r3, [r5, #12]
 800f164:	0598      	lsls	r0, r3, #22
 800f166:	d4f7      	bmi.n	800f158 <_vfiprintf_r+0x44>
 800f168:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f16a:	f7ff fea1 	bl	800eeb0 <__retarget_lock_release_recursive>
 800f16e:	e7f3      	b.n	800f158 <_vfiprintf_r+0x44>
 800f170:	2300      	movs	r3, #0
 800f172:	9309      	str	r3, [sp, #36]	; 0x24
 800f174:	2320      	movs	r3, #32
 800f176:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f17a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f17e:	2330      	movs	r3, #48	; 0x30
 800f180:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f334 <_vfiprintf_r+0x220>
 800f184:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f188:	f04f 0901 	mov.w	r9, #1
 800f18c:	4623      	mov	r3, r4
 800f18e:	469a      	mov	sl, r3
 800f190:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f194:	b10a      	cbz	r2, 800f19a <_vfiprintf_r+0x86>
 800f196:	2a25      	cmp	r2, #37	; 0x25
 800f198:	d1f9      	bne.n	800f18e <_vfiprintf_r+0x7a>
 800f19a:	ebba 0b04 	subs.w	fp, sl, r4
 800f19e:	d00b      	beq.n	800f1b8 <_vfiprintf_r+0xa4>
 800f1a0:	465b      	mov	r3, fp
 800f1a2:	4622      	mov	r2, r4
 800f1a4:	4629      	mov	r1, r5
 800f1a6:	4630      	mov	r0, r6
 800f1a8:	f7ff ffa1 	bl	800f0ee <__sfputs_r>
 800f1ac:	3001      	adds	r0, #1
 800f1ae:	f000 80a9 	beq.w	800f304 <_vfiprintf_r+0x1f0>
 800f1b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1b4:	445a      	add	r2, fp
 800f1b6:	9209      	str	r2, [sp, #36]	; 0x24
 800f1b8:	f89a 3000 	ldrb.w	r3, [sl]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	f000 80a1 	beq.w	800f304 <_vfiprintf_r+0x1f0>
 800f1c2:	2300      	movs	r3, #0
 800f1c4:	f04f 32ff 	mov.w	r2, #4294967295
 800f1c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1cc:	f10a 0a01 	add.w	sl, sl, #1
 800f1d0:	9304      	str	r3, [sp, #16]
 800f1d2:	9307      	str	r3, [sp, #28]
 800f1d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f1d8:	931a      	str	r3, [sp, #104]	; 0x68
 800f1da:	4654      	mov	r4, sl
 800f1dc:	2205      	movs	r2, #5
 800f1de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1e2:	4854      	ldr	r0, [pc, #336]	; (800f334 <_vfiprintf_r+0x220>)
 800f1e4:	f7f0 ffe4 	bl	80001b0 <memchr>
 800f1e8:	9a04      	ldr	r2, [sp, #16]
 800f1ea:	b9d8      	cbnz	r0, 800f224 <_vfiprintf_r+0x110>
 800f1ec:	06d1      	lsls	r1, r2, #27
 800f1ee:	bf44      	itt	mi
 800f1f0:	2320      	movmi	r3, #32
 800f1f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f1f6:	0713      	lsls	r3, r2, #28
 800f1f8:	bf44      	itt	mi
 800f1fa:	232b      	movmi	r3, #43	; 0x2b
 800f1fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f200:	f89a 3000 	ldrb.w	r3, [sl]
 800f204:	2b2a      	cmp	r3, #42	; 0x2a
 800f206:	d015      	beq.n	800f234 <_vfiprintf_r+0x120>
 800f208:	9a07      	ldr	r2, [sp, #28]
 800f20a:	4654      	mov	r4, sl
 800f20c:	2000      	movs	r0, #0
 800f20e:	f04f 0c0a 	mov.w	ip, #10
 800f212:	4621      	mov	r1, r4
 800f214:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f218:	3b30      	subs	r3, #48	; 0x30
 800f21a:	2b09      	cmp	r3, #9
 800f21c:	d94d      	bls.n	800f2ba <_vfiprintf_r+0x1a6>
 800f21e:	b1b0      	cbz	r0, 800f24e <_vfiprintf_r+0x13a>
 800f220:	9207      	str	r2, [sp, #28]
 800f222:	e014      	b.n	800f24e <_vfiprintf_r+0x13a>
 800f224:	eba0 0308 	sub.w	r3, r0, r8
 800f228:	fa09 f303 	lsl.w	r3, r9, r3
 800f22c:	4313      	orrs	r3, r2
 800f22e:	9304      	str	r3, [sp, #16]
 800f230:	46a2      	mov	sl, r4
 800f232:	e7d2      	b.n	800f1da <_vfiprintf_r+0xc6>
 800f234:	9b03      	ldr	r3, [sp, #12]
 800f236:	1d19      	adds	r1, r3, #4
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	9103      	str	r1, [sp, #12]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	bfbb      	ittet	lt
 800f240:	425b      	neglt	r3, r3
 800f242:	f042 0202 	orrlt.w	r2, r2, #2
 800f246:	9307      	strge	r3, [sp, #28]
 800f248:	9307      	strlt	r3, [sp, #28]
 800f24a:	bfb8      	it	lt
 800f24c:	9204      	strlt	r2, [sp, #16]
 800f24e:	7823      	ldrb	r3, [r4, #0]
 800f250:	2b2e      	cmp	r3, #46	; 0x2e
 800f252:	d10c      	bne.n	800f26e <_vfiprintf_r+0x15a>
 800f254:	7863      	ldrb	r3, [r4, #1]
 800f256:	2b2a      	cmp	r3, #42	; 0x2a
 800f258:	d134      	bne.n	800f2c4 <_vfiprintf_r+0x1b0>
 800f25a:	9b03      	ldr	r3, [sp, #12]
 800f25c:	1d1a      	adds	r2, r3, #4
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	9203      	str	r2, [sp, #12]
 800f262:	2b00      	cmp	r3, #0
 800f264:	bfb8      	it	lt
 800f266:	f04f 33ff 	movlt.w	r3, #4294967295
 800f26a:	3402      	adds	r4, #2
 800f26c:	9305      	str	r3, [sp, #20]
 800f26e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f344 <_vfiprintf_r+0x230>
 800f272:	7821      	ldrb	r1, [r4, #0]
 800f274:	2203      	movs	r2, #3
 800f276:	4650      	mov	r0, sl
 800f278:	f7f0 ff9a 	bl	80001b0 <memchr>
 800f27c:	b138      	cbz	r0, 800f28e <_vfiprintf_r+0x17a>
 800f27e:	9b04      	ldr	r3, [sp, #16]
 800f280:	eba0 000a 	sub.w	r0, r0, sl
 800f284:	2240      	movs	r2, #64	; 0x40
 800f286:	4082      	lsls	r2, r0
 800f288:	4313      	orrs	r3, r2
 800f28a:	3401      	adds	r4, #1
 800f28c:	9304      	str	r3, [sp, #16]
 800f28e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f292:	4829      	ldr	r0, [pc, #164]	; (800f338 <_vfiprintf_r+0x224>)
 800f294:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f298:	2206      	movs	r2, #6
 800f29a:	f7f0 ff89 	bl	80001b0 <memchr>
 800f29e:	2800      	cmp	r0, #0
 800f2a0:	d03f      	beq.n	800f322 <_vfiprintf_r+0x20e>
 800f2a2:	4b26      	ldr	r3, [pc, #152]	; (800f33c <_vfiprintf_r+0x228>)
 800f2a4:	bb1b      	cbnz	r3, 800f2ee <_vfiprintf_r+0x1da>
 800f2a6:	9b03      	ldr	r3, [sp, #12]
 800f2a8:	3307      	adds	r3, #7
 800f2aa:	f023 0307 	bic.w	r3, r3, #7
 800f2ae:	3308      	adds	r3, #8
 800f2b0:	9303      	str	r3, [sp, #12]
 800f2b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2b4:	443b      	add	r3, r7
 800f2b6:	9309      	str	r3, [sp, #36]	; 0x24
 800f2b8:	e768      	b.n	800f18c <_vfiprintf_r+0x78>
 800f2ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2be:	460c      	mov	r4, r1
 800f2c0:	2001      	movs	r0, #1
 800f2c2:	e7a6      	b.n	800f212 <_vfiprintf_r+0xfe>
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	3401      	adds	r4, #1
 800f2c8:	9305      	str	r3, [sp, #20]
 800f2ca:	4619      	mov	r1, r3
 800f2cc:	f04f 0c0a 	mov.w	ip, #10
 800f2d0:	4620      	mov	r0, r4
 800f2d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2d6:	3a30      	subs	r2, #48	; 0x30
 800f2d8:	2a09      	cmp	r2, #9
 800f2da:	d903      	bls.n	800f2e4 <_vfiprintf_r+0x1d0>
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d0c6      	beq.n	800f26e <_vfiprintf_r+0x15a>
 800f2e0:	9105      	str	r1, [sp, #20]
 800f2e2:	e7c4      	b.n	800f26e <_vfiprintf_r+0x15a>
 800f2e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2e8:	4604      	mov	r4, r0
 800f2ea:	2301      	movs	r3, #1
 800f2ec:	e7f0      	b.n	800f2d0 <_vfiprintf_r+0x1bc>
 800f2ee:	ab03      	add	r3, sp, #12
 800f2f0:	9300      	str	r3, [sp, #0]
 800f2f2:	462a      	mov	r2, r5
 800f2f4:	4b12      	ldr	r3, [pc, #72]	; (800f340 <_vfiprintf_r+0x22c>)
 800f2f6:	a904      	add	r1, sp, #16
 800f2f8:	4630      	mov	r0, r6
 800f2fa:	f3af 8000 	nop.w
 800f2fe:	4607      	mov	r7, r0
 800f300:	1c78      	adds	r0, r7, #1
 800f302:	d1d6      	bne.n	800f2b2 <_vfiprintf_r+0x19e>
 800f304:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f306:	07d9      	lsls	r1, r3, #31
 800f308:	d405      	bmi.n	800f316 <_vfiprintf_r+0x202>
 800f30a:	89ab      	ldrh	r3, [r5, #12]
 800f30c:	059a      	lsls	r2, r3, #22
 800f30e:	d402      	bmi.n	800f316 <_vfiprintf_r+0x202>
 800f310:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f312:	f7ff fdcd 	bl	800eeb0 <__retarget_lock_release_recursive>
 800f316:	89ab      	ldrh	r3, [r5, #12]
 800f318:	065b      	lsls	r3, r3, #25
 800f31a:	f53f af1d 	bmi.w	800f158 <_vfiprintf_r+0x44>
 800f31e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f320:	e71c      	b.n	800f15c <_vfiprintf_r+0x48>
 800f322:	ab03      	add	r3, sp, #12
 800f324:	9300      	str	r3, [sp, #0]
 800f326:	462a      	mov	r2, r5
 800f328:	4b05      	ldr	r3, [pc, #20]	; (800f340 <_vfiprintf_r+0x22c>)
 800f32a:	a904      	add	r1, sp, #16
 800f32c:	4630      	mov	r0, r6
 800f32e:	f000 f879 	bl	800f424 <_printf_i>
 800f332:	e7e4      	b.n	800f2fe <_vfiprintf_r+0x1ea>
 800f334:	08011108 	.word	0x08011108
 800f338:	08011112 	.word	0x08011112
 800f33c:	00000000 	.word	0x00000000
 800f340:	0800f0ef 	.word	0x0800f0ef
 800f344:	0801110e 	.word	0x0801110e

0800f348 <_printf_common>:
 800f348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f34c:	4616      	mov	r6, r2
 800f34e:	4699      	mov	r9, r3
 800f350:	688a      	ldr	r2, [r1, #8]
 800f352:	690b      	ldr	r3, [r1, #16]
 800f354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f358:	4293      	cmp	r3, r2
 800f35a:	bfb8      	it	lt
 800f35c:	4613      	movlt	r3, r2
 800f35e:	6033      	str	r3, [r6, #0]
 800f360:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f364:	4607      	mov	r7, r0
 800f366:	460c      	mov	r4, r1
 800f368:	b10a      	cbz	r2, 800f36e <_printf_common+0x26>
 800f36a:	3301      	adds	r3, #1
 800f36c:	6033      	str	r3, [r6, #0]
 800f36e:	6823      	ldr	r3, [r4, #0]
 800f370:	0699      	lsls	r1, r3, #26
 800f372:	bf42      	ittt	mi
 800f374:	6833      	ldrmi	r3, [r6, #0]
 800f376:	3302      	addmi	r3, #2
 800f378:	6033      	strmi	r3, [r6, #0]
 800f37a:	6825      	ldr	r5, [r4, #0]
 800f37c:	f015 0506 	ands.w	r5, r5, #6
 800f380:	d106      	bne.n	800f390 <_printf_common+0x48>
 800f382:	f104 0a19 	add.w	sl, r4, #25
 800f386:	68e3      	ldr	r3, [r4, #12]
 800f388:	6832      	ldr	r2, [r6, #0]
 800f38a:	1a9b      	subs	r3, r3, r2
 800f38c:	42ab      	cmp	r3, r5
 800f38e:	dc26      	bgt.n	800f3de <_printf_common+0x96>
 800f390:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f394:	1e13      	subs	r3, r2, #0
 800f396:	6822      	ldr	r2, [r4, #0]
 800f398:	bf18      	it	ne
 800f39a:	2301      	movne	r3, #1
 800f39c:	0692      	lsls	r2, r2, #26
 800f39e:	d42b      	bmi.n	800f3f8 <_printf_common+0xb0>
 800f3a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f3a4:	4649      	mov	r1, r9
 800f3a6:	4638      	mov	r0, r7
 800f3a8:	47c0      	blx	r8
 800f3aa:	3001      	adds	r0, #1
 800f3ac:	d01e      	beq.n	800f3ec <_printf_common+0xa4>
 800f3ae:	6823      	ldr	r3, [r4, #0]
 800f3b0:	6922      	ldr	r2, [r4, #16]
 800f3b2:	f003 0306 	and.w	r3, r3, #6
 800f3b6:	2b04      	cmp	r3, #4
 800f3b8:	bf02      	ittt	eq
 800f3ba:	68e5      	ldreq	r5, [r4, #12]
 800f3bc:	6833      	ldreq	r3, [r6, #0]
 800f3be:	1aed      	subeq	r5, r5, r3
 800f3c0:	68a3      	ldr	r3, [r4, #8]
 800f3c2:	bf0c      	ite	eq
 800f3c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f3c8:	2500      	movne	r5, #0
 800f3ca:	4293      	cmp	r3, r2
 800f3cc:	bfc4      	itt	gt
 800f3ce:	1a9b      	subgt	r3, r3, r2
 800f3d0:	18ed      	addgt	r5, r5, r3
 800f3d2:	2600      	movs	r6, #0
 800f3d4:	341a      	adds	r4, #26
 800f3d6:	42b5      	cmp	r5, r6
 800f3d8:	d11a      	bne.n	800f410 <_printf_common+0xc8>
 800f3da:	2000      	movs	r0, #0
 800f3dc:	e008      	b.n	800f3f0 <_printf_common+0xa8>
 800f3de:	2301      	movs	r3, #1
 800f3e0:	4652      	mov	r2, sl
 800f3e2:	4649      	mov	r1, r9
 800f3e4:	4638      	mov	r0, r7
 800f3e6:	47c0      	blx	r8
 800f3e8:	3001      	adds	r0, #1
 800f3ea:	d103      	bne.n	800f3f4 <_printf_common+0xac>
 800f3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800f3f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3f4:	3501      	adds	r5, #1
 800f3f6:	e7c6      	b.n	800f386 <_printf_common+0x3e>
 800f3f8:	18e1      	adds	r1, r4, r3
 800f3fa:	1c5a      	adds	r2, r3, #1
 800f3fc:	2030      	movs	r0, #48	; 0x30
 800f3fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f402:	4422      	add	r2, r4
 800f404:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f408:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f40c:	3302      	adds	r3, #2
 800f40e:	e7c7      	b.n	800f3a0 <_printf_common+0x58>
 800f410:	2301      	movs	r3, #1
 800f412:	4622      	mov	r2, r4
 800f414:	4649      	mov	r1, r9
 800f416:	4638      	mov	r0, r7
 800f418:	47c0      	blx	r8
 800f41a:	3001      	adds	r0, #1
 800f41c:	d0e6      	beq.n	800f3ec <_printf_common+0xa4>
 800f41e:	3601      	adds	r6, #1
 800f420:	e7d9      	b.n	800f3d6 <_printf_common+0x8e>
	...

0800f424 <_printf_i>:
 800f424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f428:	7e0f      	ldrb	r7, [r1, #24]
 800f42a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f42c:	2f78      	cmp	r7, #120	; 0x78
 800f42e:	4691      	mov	r9, r2
 800f430:	4680      	mov	r8, r0
 800f432:	460c      	mov	r4, r1
 800f434:	469a      	mov	sl, r3
 800f436:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f43a:	d807      	bhi.n	800f44c <_printf_i+0x28>
 800f43c:	2f62      	cmp	r7, #98	; 0x62
 800f43e:	d80a      	bhi.n	800f456 <_printf_i+0x32>
 800f440:	2f00      	cmp	r7, #0
 800f442:	f000 80d4 	beq.w	800f5ee <_printf_i+0x1ca>
 800f446:	2f58      	cmp	r7, #88	; 0x58
 800f448:	f000 80c0 	beq.w	800f5cc <_printf_i+0x1a8>
 800f44c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f450:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f454:	e03a      	b.n	800f4cc <_printf_i+0xa8>
 800f456:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f45a:	2b15      	cmp	r3, #21
 800f45c:	d8f6      	bhi.n	800f44c <_printf_i+0x28>
 800f45e:	a101      	add	r1, pc, #4	; (adr r1, 800f464 <_printf_i+0x40>)
 800f460:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f464:	0800f4bd 	.word	0x0800f4bd
 800f468:	0800f4d1 	.word	0x0800f4d1
 800f46c:	0800f44d 	.word	0x0800f44d
 800f470:	0800f44d 	.word	0x0800f44d
 800f474:	0800f44d 	.word	0x0800f44d
 800f478:	0800f44d 	.word	0x0800f44d
 800f47c:	0800f4d1 	.word	0x0800f4d1
 800f480:	0800f44d 	.word	0x0800f44d
 800f484:	0800f44d 	.word	0x0800f44d
 800f488:	0800f44d 	.word	0x0800f44d
 800f48c:	0800f44d 	.word	0x0800f44d
 800f490:	0800f5d5 	.word	0x0800f5d5
 800f494:	0800f4fd 	.word	0x0800f4fd
 800f498:	0800f58f 	.word	0x0800f58f
 800f49c:	0800f44d 	.word	0x0800f44d
 800f4a0:	0800f44d 	.word	0x0800f44d
 800f4a4:	0800f5f7 	.word	0x0800f5f7
 800f4a8:	0800f44d 	.word	0x0800f44d
 800f4ac:	0800f4fd 	.word	0x0800f4fd
 800f4b0:	0800f44d 	.word	0x0800f44d
 800f4b4:	0800f44d 	.word	0x0800f44d
 800f4b8:	0800f597 	.word	0x0800f597
 800f4bc:	682b      	ldr	r3, [r5, #0]
 800f4be:	1d1a      	adds	r2, r3, #4
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	602a      	str	r2, [r5, #0]
 800f4c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f4c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f4cc:	2301      	movs	r3, #1
 800f4ce:	e09f      	b.n	800f610 <_printf_i+0x1ec>
 800f4d0:	6820      	ldr	r0, [r4, #0]
 800f4d2:	682b      	ldr	r3, [r5, #0]
 800f4d4:	0607      	lsls	r7, r0, #24
 800f4d6:	f103 0104 	add.w	r1, r3, #4
 800f4da:	6029      	str	r1, [r5, #0]
 800f4dc:	d501      	bpl.n	800f4e2 <_printf_i+0xbe>
 800f4de:	681e      	ldr	r6, [r3, #0]
 800f4e0:	e003      	b.n	800f4ea <_printf_i+0xc6>
 800f4e2:	0646      	lsls	r6, r0, #25
 800f4e4:	d5fb      	bpl.n	800f4de <_printf_i+0xba>
 800f4e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f4ea:	2e00      	cmp	r6, #0
 800f4ec:	da03      	bge.n	800f4f6 <_printf_i+0xd2>
 800f4ee:	232d      	movs	r3, #45	; 0x2d
 800f4f0:	4276      	negs	r6, r6
 800f4f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4f6:	485a      	ldr	r0, [pc, #360]	; (800f660 <_printf_i+0x23c>)
 800f4f8:	230a      	movs	r3, #10
 800f4fa:	e012      	b.n	800f522 <_printf_i+0xfe>
 800f4fc:	682b      	ldr	r3, [r5, #0]
 800f4fe:	6820      	ldr	r0, [r4, #0]
 800f500:	1d19      	adds	r1, r3, #4
 800f502:	6029      	str	r1, [r5, #0]
 800f504:	0605      	lsls	r5, r0, #24
 800f506:	d501      	bpl.n	800f50c <_printf_i+0xe8>
 800f508:	681e      	ldr	r6, [r3, #0]
 800f50a:	e002      	b.n	800f512 <_printf_i+0xee>
 800f50c:	0641      	lsls	r1, r0, #25
 800f50e:	d5fb      	bpl.n	800f508 <_printf_i+0xe4>
 800f510:	881e      	ldrh	r6, [r3, #0]
 800f512:	4853      	ldr	r0, [pc, #332]	; (800f660 <_printf_i+0x23c>)
 800f514:	2f6f      	cmp	r7, #111	; 0x6f
 800f516:	bf0c      	ite	eq
 800f518:	2308      	moveq	r3, #8
 800f51a:	230a      	movne	r3, #10
 800f51c:	2100      	movs	r1, #0
 800f51e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f522:	6865      	ldr	r5, [r4, #4]
 800f524:	60a5      	str	r5, [r4, #8]
 800f526:	2d00      	cmp	r5, #0
 800f528:	bfa2      	ittt	ge
 800f52a:	6821      	ldrge	r1, [r4, #0]
 800f52c:	f021 0104 	bicge.w	r1, r1, #4
 800f530:	6021      	strge	r1, [r4, #0]
 800f532:	b90e      	cbnz	r6, 800f538 <_printf_i+0x114>
 800f534:	2d00      	cmp	r5, #0
 800f536:	d04b      	beq.n	800f5d0 <_printf_i+0x1ac>
 800f538:	4615      	mov	r5, r2
 800f53a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f53e:	fb03 6711 	mls	r7, r3, r1, r6
 800f542:	5dc7      	ldrb	r7, [r0, r7]
 800f544:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f548:	4637      	mov	r7, r6
 800f54a:	42bb      	cmp	r3, r7
 800f54c:	460e      	mov	r6, r1
 800f54e:	d9f4      	bls.n	800f53a <_printf_i+0x116>
 800f550:	2b08      	cmp	r3, #8
 800f552:	d10b      	bne.n	800f56c <_printf_i+0x148>
 800f554:	6823      	ldr	r3, [r4, #0]
 800f556:	07de      	lsls	r6, r3, #31
 800f558:	d508      	bpl.n	800f56c <_printf_i+0x148>
 800f55a:	6923      	ldr	r3, [r4, #16]
 800f55c:	6861      	ldr	r1, [r4, #4]
 800f55e:	4299      	cmp	r1, r3
 800f560:	bfde      	ittt	le
 800f562:	2330      	movle	r3, #48	; 0x30
 800f564:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f568:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f56c:	1b52      	subs	r2, r2, r5
 800f56e:	6122      	str	r2, [r4, #16]
 800f570:	f8cd a000 	str.w	sl, [sp]
 800f574:	464b      	mov	r3, r9
 800f576:	aa03      	add	r2, sp, #12
 800f578:	4621      	mov	r1, r4
 800f57a:	4640      	mov	r0, r8
 800f57c:	f7ff fee4 	bl	800f348 <_printf_common>
 800f580:	3001      	adds	r0, #1
 800f582:	d14a      	bne.n	800f61a <_printf_i+0x1f6>
 800f584:	f04f 30ff 	mov.w	r0, #4294967295
 800f588:	b004      	add	sp, #16
 800f58a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f58e:	6823      	ldr	r3, [r4, #0]
 800f590:	f043 0320 	orr.w	r3, r3, #32
 800f594:	6023      	str	r3, [r4, #0]
 800f596:	4833      	ldr	r0, [pc, #204]	; (800f664 <_printf_i+0x240>)
 800f598:	2778      	movs	r7, #120	; 0x78
 800f59a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f59e:	6823      	ldr	r3, [r4, #0]
 800f5a0:	6829      	ldr	r1, [r5, #0]
 800f5a2:	061f      	lsls	r7, r3, #24
 800f5a4:	f851 6b04 	ldr.w	r6, [r1], #4
 800f5a8:	d402      	bmi.n	800f5b0 <_printf_i+0x18c>
 800f5aa:	065f      	lsls	r7, r3, #25
 800f5ac:	bf48      	it	mi
 800f5ae:	b2b6      	uxthmi	r6, r6
 800f5b0:	07df      	lsls	r7, r3, #31
 800f5b2:	bf48      	it	mi
 800f5b4:	f043 0320 	orrmi.w	r3, r3, #32
 800f5b8:	6029      	str	r1, [r5, #0]
 800f5ba:	bf48      	it	mi
 800f5bc:	6023      	strmi	r3, [r4, #0]
 800f5be:	b91e      	cbnz	r6, 800f5c8 <_printf_i+0x1a4>
 800f5c0:	6823      	ldr	r3, [r4, #0]
 800f5c2:	f023 0320 	bic.w	r3, r3, #32
 800f5c6:	6023      	str	r3, [r4, #0]
 800f5c8:	2310      	movs	r3, #16
 800f5ca:	e7a7      	b.n	800f51c <_printf_i+0xf8>
 800f5cc:	4824      	ldr	r0, [pc, #144]	; (800f660 <_printf_i+0x23c>)
 800f5ce:	e7e4      	b.n	800f59a <_printf_i+0x176>
 800f5d0:	4615      	mov	r5, r2
 800f5d2:	e7bd      	b.n	800f550 <_printf_i+0x12c>
 800f5d4:	682b      	ldr	r3, [r5, #0]
 800f5d6:	6826      	ldr	r6, [r4, #0]
 800f5d8:	6961      	ldr	r1, [r4, #20]
 800f5da:	1d18      	adds	r0, r3, #4
 800f5dc:	6028      	str	r0, [r5, #0]
 800f5de:	0635      	lsls	r5, r6, #24
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	d501      	bpl.n	800f5e8 <_printf_i+0x1c4>
 800f5e4:	6019      	str	r1, [r3, #0]
 800f5e6:	e002      	b.n	800f5ee <_printf_i+0x1ca>
 800f5e8:	0670      	lsls	r0, r6, #25
 800f5ea:	d5fb      	bpl.n	800f5e4 <_printf_i+0x1c0>
 800f5ec:	8019      	strh	r1, [r3, #0]
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	6123      	str	r3, [r4, #16]
 800f5f2:	4615      	mov	r5, r2
 800f5f4:	e7bc      	b.n	800f570 <_printf_i+0x14c>
 800f5f6:	682b      	ldr	r3, [r5, #0]
 800f5f8:	1d1a      	adds	r2, r3, #4
 800f5fa:	602a      	str	r2, [r5, #0]
 800f5fc:	681d      	ldr	r5, [r3, #0]
 800f5fe:	6862      	ldr	r2, [r4, #4]
 800f600:	2100      	movs	r1, #0
 800f602:	4628      	mov	r0, r5
 800f604:	f7f0 fdd4 	bl	80001b0 <memchr>
 800f608:	b108      	cbz	r0, 800f60e <_printf_i+0x1ea>
 800f60a:	1b40      	subs	r0, r0, r5
 800f60c:	6060      	str	r0, [r4, #4]
 800f60e:	6863      	ldr	r3, [r4, #4]
 800f610:	6123      	str	r3, [r4, #16]
 800f612:	2300      	movs	r3, #0
 800f614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f618:	e7aa      	b.n	800f570 <_printf_i+0x14c>
 800f61a:	6923      	ldr	r3, [r4, #16]
 800f61c:	462a      	mov	r2, r5
 800f61e:	4649      	mov	r1, r9
 800f620:	4640      	mov	r0, r8
 800f622:	47d0      	blx	sl
 800f624:	3001      	adds	r0, #1
 800f626:	d0ad      	beq.n	800f584 <_printf_i+0x160>
 800f628:	6823      	ldr	r3, [r4, #0]
 800f62a:	079b      	lsls	r3, r3, #30
 800f62c:	d413      	bmi.n	800f656 <_printf_i+0x232>
 800f62e:	68e0      	ldr	r0, [r4, #12]
 800f630:	9b03      	ldr	r3, [sp, #12]
 800f632:	4298      	cmp	r0, r3
 800f634:	bfb8      	it	lt
 800f636:	4618      	movlt	r0, r3
 800f638:	e7a6      	b.n	800f588 <_printf_i+0x164>
 800f63a:	2301      	movs	r3, #1
 800f63c:	4632      	mov	r2, r6
 800f63e:	4649      	mov	r1, r9
 800f640:	4640      	mov	r0, r8
 800f642:	47d0      	blx	sl
 800f644:	3001      	adds	r0, #1
 800f646:	d09d      	beq.n	800f584 <_printf_i+0x160>
 800f648:	3501      	adds	r5, #1
 800f64a:	68e3      	ldr	r3, [r4, #12]
 800f64c:	9903      	ldr	r1, [sp, #12]
 800f64e:	1a5b      	subs	r3, r3, r1
 800f650:	42ab      	cmp	r3, r5
 800f652:	dcf2      	bgt.n	800f63a <_printf_i+0x216>
 800f654:	e7eb      	b.n	800f62e <_printf_i+0x20a>
 800f656:	2500      	movs	r5, #0
 800f658:	f104 0619 	add.w	r6, r4, #25
 800f65c:	e7f5      	b.n	800f64a <_printf_i+0x226>
 800f65e:	bf00      	nop
 800f660:	08011119 	.word	0x08011119
 800f664:	0801112a 	.word	0x0801112a

0800f668 <__sflush_r>:
 800f668:	898a      	ldrh	r2, [r1, #12]
 800f66a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f66e:	4605      	mov	r5, r0
 800f670:	0710      	lsls	r0, r2, #28
 800f672:	460c      	mov	r4, r1
 800f674:	d458      	bmi.n	800f728 <__sflush_r+0xc0>
 800f676:	684b      	ldr	r3, [r1, #4]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	dc05      	bgt.n	800f688 <__sflush_r+0x20>
 800f67c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f67e:	2b00      	cmp	r3, #0
 800f680:	dc02      	bgt.n	800f688 <__sflush_r+0x20>
 800f682:	2000      	movs	r0, #0
 800f684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f688:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f68a:	2e00      	cmp	r6, #0
 800f68c:	d0f9      	beq.n	800f682 <__sflush_r+0x1a>
 800f68e:	2300      	movs	r3, #0
 800f690:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f694:	682f      	ldr	r7, [r5, #0]
 800f696:	6a21      	ldr	r1, [r4, #32]
 800f698:	602b      	str	r3, [r5, #0]
 800f69a:	d032      	beq.n	800f702 <__sflush_r+0x9a>
 800f69c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f69e:	89a3      	ldrh	r3, [r4, #12]
 800f6a0:	075a      	lsls	r2, r3, #29
 800f6a2:	d505      	bpl.n	800f6b0 <__sflush_r+0x48>
 800f6a4:	6863      	ldr	r3, [r4, #4]
 800f6a6:	1ac0      	subs	r0, r0, r3
 800f6a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f6aa:	b10b      	cbz	r3, 800f6b0 <__sflush_r+0x48>
 800f6ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f6ae:	1ac0      	subs	r0, r0, r3
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	4602      	mov	r2, r0
 800f6b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f6b6:	6a21      	ldr	r1, [r4, #32]
 800f6b8:	4628      	mov	r0, r5
 800f6ba:	47b0      	blx	r6
 800f6bc:	1c43      	adds	r3, r0, #1
 800f6be:	89a3      	ldrh	r3, [r4, #12]
 800f6c0:	d106      	bne.n	800f6d0 <__sflush_r+0x68>
 800f6c2:	6829      	ldr	r1, [r5, #0]
 800f6c4:	291d      	cmp	r1, #29
 800f6c6:	d82b      	bhi.n	800f720 <__sflush_r+0xb8>
 800f6c8:	4a29      	ldr	r2, [pc, #164]	; (800f770 <__sflush_r+0x108>)
 800f6ca:	410a      	asrs	r2, r1
 800f6cc:	07d6      	lsls	r6, r2, #31
 800f6ce:	d427      	bmi.n	800f720 <__sflush_r+0xb8>
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	6062      	str	r2, [r4, #4]
 800f6d4:	04d9      	lsls	r1, r3, #19
 800f6d6:	6922      	ldr	r2, [r4, #16]
 800f6d8:	6022      	str	r2, [r4, #0]
 800f6da:	d504      	bpl.n	800f6e6 <__sflush_r+0x7e>
 800f6dc:	1c42      	adds	r2, r0, #1
 800f6de:	d101      	bne.n	800f6e4 <__sflush_r+0x7c>
 800f6e0:	682b      	ldr	r3, [r5, #0]
 800f6e2:	b903      	cbnz	r3, 800f6e6 <__sflush_r+0x7e>
 800f6e4:	6560      	str	r0, [r4, #84]	; 0x54
 800f6e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f6e8:	602f      	str	r7, [r5, #0]
 800f6ea:	2900      	cmp	r1, #0
 800f6ec:	d0c9      	beq.n	800f682 <__sflush_r+0x1a>
 800f6ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f6f2:	4299      	cmp	r1, r3
 800f6f4:	d002      	beq.n	800f6fc <__sflush_r+0x94>
 800f6f6:	4628      	mov	r0, r5
 800f6f8:	f7ff fbea 	bl	800eed0 <_free_r>
 800f6fc:	2000      	movs	r0, #0
 800f6fe:	6360      	str	r0, [r4, #52]	; 0x34
 800f700:	e7c0      	b.n	800f684 <__sflush_r+0x1c>
 800f702:	2301      	movs	r3, #1
 800f704:	4628      	mov	r0, r5
 800f706:	47b0      	blx	r6
 800f708:	1c41      	adds	r1, r0, #1
 800f70a:	d1c8      	bne.n	800f69e <__sflush_r+0x36>
 800f70c:	682b      	ldr	r3, [r5, #0]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d0c5      	beq.n	800f69e <__sflush_r+0x36>
 800f712:	2b1d      	cmp	r3, #29
 800f714:	d001      	beq.n	800f71a <__sflush_r+0xb2>
 800f716:	2b16      	cmp	r3, #22
 800f718:	d101      	bne.n	800f71e <__sflush_r+0xb6>
 800f71a:	602f      	str	r7, [r5, #0]
 800f71c:	e7b1      	b.n	800f682 <__sflush_r+0x1a>
 800f71e:	89a3      	ldrh	r3, [r4, #12]
 800f720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f724:	81a3      	strh	r3, [r4, #12]
 800f726:	e7ad      	b.n	800f684 <__sflush_r+0x1c>
 800f728:	690f      	ldr	r7, [r1, #16]
 800f72a:	2f00      	cmp	r7, #0
 800f72c:	d0a9      	beq.n	800f682 <__sflush_r+0x1a>
 800f72e:	0793      	lsls	r3, r2, #30
 800f730:	680e      	ldr	r6, [r1, #0]
 800f732:	bf08      	it	eq
 800f734:	694b      	ldreq	r3, [r1, #20]
 800f736:	600f      	str	r7, [r1, #0]
 800f738:	bf18      	it	ne
 800f73a:	2300      	movne	r3, #0
 800f73c:	eba6 0807 	sub.w	r8, r6, r7
 800f740:	608b      	str	r3, [r1, #8]
 800f742:	f1b8 0f00 	cmp.w	r8, #0
 800f746:	dd9c      	ble.n	800f682 <__sflush_r+0x1a>
 800f748:	6a21      	ldr	r1, [r4, #32]
 800f74a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f74c:	4643      	mov	r3, r8
 800f74e:	463a      	mov	r2, r7
 800f750:	4628      	mov	r0, r5
 800f752:	47b0      	blx	r6
 800f754:	2800      	cmp	r0, #0
 800f756:	dc06      	bgt.n	800f766 <__sflush_r+0xfe>
 800f758:	89a3      	ldrh	r3, [r4, #12]
 800f75a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f75e:	81a3      	strh	r3, [r4, #12]
 800f760:	f04f 30ff 	mov.w	r0, #4294967295
 800f764:	e78e      	b.n	800f684 <__sflush_r+0x1c>
 800f766:	4407      	add	r7, r0
 800f768:	eba8 0800 	sub.w	r8, r8, r0
 800f76c:	e7e9      	b.n	800f742 <__sflush_r+0xda>
 800f76e:	bf00      	nop
 800f770:	dfbffffe 	.word	0xdfbffffe

0800f774 <_fflush_r>:
 800f774:	b538      	push	{r3, r4, r5, lr}
 800f776:	690b      	ldr	r3, [r1, #16]
 800f778:	4605      	mov	r5, r0
 800f77a:	460c      	mov	r4, r1
 800f77c:	b913      	cbnz	r3, 800f784 <_fflush_r+0x10>
 800f77e:	2500      	movs	r5, #0
 800f780:	4628      	mov	r0, r5
 800f782:	bd38      	pop	{r3, r4, r5, pc}
 800f784:	b118      	cbz	r0, 800f78e <_fflush_r+0x1a>
 800f786:	6a03      	ldr	r3, [r0, #32]
 800f788:	b90b      	cbnz	r3, 800f78e <_fflush_r+0x1a>
 800f78a:	f7ff f999 	bl	800eac0 <__sinit>
 800f78e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d0f3      	beq.n	800f77e <_fflush_r+0xa>
 800f796:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f798:	07d0      	lsls	r0, r2, #31
 800f79a:	d404      	bmi.n	800f7a6 <_fflush_r+0x32>
 800f79c:	0599      	lsls	r1, r3, #22
 800f79e:	d402      	bmi.n	800f7a6 <_fflush_r+0x32>
 800f7a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7a2:	f7ff fb84 	bl	800eeae <__retarget_lock_acquire_recursive>
 800f7a6:	4628      	mov	r0, r5
 800f7a8:	4621      	mov	r1, r4
 800f7aa:	f7ff ff5d 	bl	800f668 <__sflush_r>
 800f7ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f7b0:	07da      	lsls	r2, r3, #31
 800f7b2:	4605      	mov	r5, r0
 800f7b4:	d4e4      	bmi.n	800f780 <_fflush_r+0xc>
 800f7b6:	89a3      	ldrh	r3, [r4, #12]
 800f7b8:	059b      	lsls	r3, r3, #22
 800f7ba:	d4e1      	bmi.n	800f780 <_fflush_r+0xc>
 800f7bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7be:	f7ff fb77 	bl	800eeb0 <__retarget_lock_release_recursive>
 800f7c2:	e7dd      	b.n	800f780 <_fflush_r+0xc>

0800f7c4 <__swhatbuf_r>:
 800f7c4:	b570      	push	{r4, r5, r6, lr}
 800f7c6:	460c      	mov	r4, r1
 800f7c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7cc:	2900      	cmp	r1, #0
 800f7ce:	b096      	sub	sp, #88	; 0x58
 800f7d0:	4615      	mov	r5, r2
 800f7d2:	461e      	mov	r6, r3
 800f7d4:	da0d      	bge.n	800f7f2 <__swhatbuf_r+0x2e>
 800f7d6:	89a3      	ldrh	r3, [r4, #12]
 800f7d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f7dc:	f04f 0100 	mov.w	r1, #0
 800f7e0:	bf0c      	ite	eq
 800f7e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f7e6:	2340      	movne	r3, #64	; 0x40
 800f7e8:	2000      	movs	r0, #0
 800f7ea:	6031      	str	r1, [r6, #0]
 800f7ec:	602b      	str	r3, [r5, #0]
 800f7ee:	b016      	add	sp, #88	; 0x58
 800f7f0:	bd70      	pop	{r4, r5, r6, pc}
 800f7f2:	466a      	mov	r2, sp
 800f7f4:	f000 f87c 	bl	800f8f0 <_fstat_r>
 800f7f8:	2800      	cmp	r0, #0
 800f7fa:	dbec      	blt.n	800f7d6 <__swhatbuf_r+0x12>
 800f7fc:	9901      	ldr	r1, [sp, #4]
 800f7fe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f802:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f806:	4259      	negs	r1, r3
 800f808:	4159      	adcs	r1, r3
 800f80a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f80e:	e7eb      	b.n	800f7e8 <__swhatbuf_r+0x24>

0800f810 <__smakebuf_r>:
 800f810:	898b      	ldrh	r3, [r1, #12]
 800f812:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f814:	079d      	lsls	r5, r3, #30
 800f816:	4606      	mov	r6, r0
 800f818:	460c      	mov	r4, r1
 800f81a:	d507      	bpl.n	800f82c <__smakebuf_r+0x1c>
 800f81c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f820:	6023      	str	r3, [r4, #0]
 800f822:	6123      	str	r3, [r4, #16]
 800f824:	2301      	movs	r3, #1
 800f826:	6163      	str	r3, [r4, #20]
 800f828:	b002      	add	sp, #8
 800f82a:	bd70      	pop	{r4, r5, r6, pc}
 800f82c:	ab01      	add	r3, sp, #4
 800f82e:	466a      	mov	r2, sp
 800f830:	f7ff ffc8 	bl	800f7c4 <__swhatbuf_r>
 800f834:	9900      	ldr	r1, [sp, #0]
 800f836:	4605      	mov	r5, r0
 800f838:	4630      	mov	r0, r6
 800f83a:	f7ff fbb5 	bl	800efa8 <_malloc_r>
 800f83e:	b948      	cbnz	r0, 800f854 <__smakebuf_r+0x44>
 800f840:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f844:	059a      	lsls	r2, r3, #22
 800f846:	d4ef      	bmi.n	800f828 <__smakebuf_r+0x18>
 800f848:	f023 0303 	bic.w	r3, r3, #3
 800f84c:	f043 0302 	orr.w	r3, r3, #2
 800f850:	81a3      	strh	r3, [r4, #12]
 800f852:	e7e3      	b.n	800f81c <__smakebuf_r+0xc>
 800f854:	89a3      	ldrh	r3, [r4, #12]
 800f856:	6020      	str	r0, [r4, #0]
 800f858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f85c:	81a3      	strh	r3, [r4, #12]
 800f85e:	9b00      	ldr	r3, [sp, #0]
 800f860:	6163      	str	r3, [r4, #20]
 800f862:	9b01      	ldr	r3, [sp, #4]
 800f864:	6120      	str	r0, [r4, #16]
 800f866:	b15b      	cbz	r3, 800f880 <__smakebuf_r+0x70>
 800f868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f86c:	4630      	mov	r0, r6
 800f86e:	f000 f851 	bl	800f914 <_isatty_r>
 800f872:	b128      	cbz	r0, 800f880 <__smakebuf_r+0x70>
 800f874:	89a3      	ldrh	r3, [r4, #12]
 800f876:	f023 0303 	bic.w	r3, r3, #3
 800f87a:	f043 0301 	orr.w	r3, r3, #1
 800f87e:	81a3      	strh	r3, [r4, #12]
 800f880:	89a3      	ldrh	r3, [r4, #12]
 800f882:	431d      	orrs	r5, r3
 800f884:	81a5      	strh	r5, [r4, #12]
 800f886:	e7cf      	b.n	800f828 <__smakebuf_r+0x18>

0800f888 <_putc_r>:
 800f888:	b570      	push	{r4, r5, r6, lr}
 800f88a:	460d      	mov	r5, r1
 800f88c:	4614      	mov	r4, r2
 800f88e:	4606      	mov	r6, r0
 800f890:	b118      	cbz	r0, 800f89a <_putc_r+0x12>
 800f892:	6a03      	ldr	r3, [r0, #32]
 800f894:	b90b      	cbnz	r3, 800f89a <_putc_r+0x12>
 800f896:	f7ff f913 	bl	800eac0 <__sinit>
 800f89a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f89c:	07d8      	lsls	r0, r3, #31
 800f89e:	d405      	bmi.n	800f8ac <_putc_r+0x24>
 800f8a0:	89a3      	ldrh	r3, [r4, #12]
 800f8a2:	0599      	lsls	r1, r3, #22
 800f8a4:	d402      	bmi.n	800f8ac <_putc_r+0x24>
 800f8a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8a8:	f7ff fb01 	bl	800eeae <__retarget_lock_acquire_recursive>
 800f8ac:	68a3      	ldr	r3, [r4, #8]
 800f8ae:	3b01      	subs	r3, #1
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	60a3      	str	r3, [r4, #8]
 800f8b4:	da05      	bge.n	800f8c2 <_putc_r+0x3a>
 800f8b6:	69a2      	ldr	r2, [r4, #24]
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	db12      	blt.n	800f8e2 <_putc_r+0x5a>
 800f8bc:	b2eb      	uxtb	r3, r5
 800f8be:	2b0a      	cmp	r3, #10
 800f8c0:	d00f      	beq.n	800f8e2 <_putc_r+0x5a>
 800f8c2:	6823      	ldr	r3, [r4, #0]
 800f8c4:	1c5a      	adds	r2, r3, #1
 800f8c6:	6022      	str	r2, [r4, #0]
 800f8c8:	701d      	strb	r5, [r3, #0]
 800f8ca:	b2ed      	uxtb	r5, r5
 800f8cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f8ce:	07da      	lsls	r2, r3, #31
 800f8d0:	d405      	bmi.n	800f8de <_putc_r+0x56>
 800f8d2:	89a3      	ldrh	r3, [r4, #12]
 800f8d4:	059b      	lsls	r3, r3, #22
 800f8d6:	d402      	bmi.n	800f8de <_putc_r+0x56>
 800f8d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f8da:	f7ff fae9 	bl	800eeb0 <__retarget_lock_release_recursive>
 800f8de:	4628      	mov	r0, r5
 800f8e0:	bd70      	pop	{r4, r5, r6, pc}
 800f8e2:	4629      	mov	r1, r5
 800f8e4:	4622      	mov	r2, r4
 800f8e6:	4630      	mov	r0, r6
 800f8e8:	f7ff f9d9 	bl	800ec9e <__swbuf_r>
 800f8ec:	4605      	mov	r5, r0
 800f8ee:	e7ed      	b.n	800f8cc <_putc_r+0x44>

0800f8f0 <_fstat_r>:
 800f8f0:	b538      	push	{r3, r4, r5, lr}
 800f8f2:	4d07      	ldr	r5, [pc, #28]	; (800f910 <_fstat_r+0x20>)
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	4604      	mov	r4, r0
 800f8f8:	4608      	mov	r0, r1
 800f8fa:	4611      	mov	r1, r2
 800f8fc:	602b      	str	r3, [r5, #0]
 800f8fe:	f000 f831 	bl	800f964 <_fstat>
 800f902:	1c43      	adds	r3, r0, #1
 800f904:	d102      	bne.n	800f90c <_fstat_r+0x1c>
 800f906:	682b      	ldr	r3, [r5, #0]
 800f908:	b103      	cbz	r3, 800f90c <_fstat_r+0x1c>
 800f90a:	6023      	str	r3, [r4, #0]
 800f90c:	bd38      	pop	{r3, r4, r5, pc}
 800f90e:	bf00      	nop
 800f910:	200018d8 	.word	0x200018d8

0800f914 <_isatty_r>:
 800f914:	b538      	push	{r3, r4, r5, lr}
 800f916:	4d06      	ldr	r5, [pc, #24]	; (800f930 <_isatty_r+0x1c>)
 800f918:	2300      	movs	r3, #0
 800f91a:	4604      	mov	r4, r0
 800f91c:	4608      	mov	r0, r1
 800f91e:	602b      	str	r3, [r5, #0]
 800f920:	f000 f828 	bl	800f974 <_isatty>
 800f924:	1c43      	adds	r3, r0, #1
 800f926:	d102      	bne.n	800f92e <_isatty_r+0x1a>
 800f928:	682b      	ldr	r3, [r5, #0]
 800f92a:	b103      	cbz	r3, 800f92e <_isatty_r+0x1a>
 800f92c:	6023      	str	r3, [r4, #0]
 800f92e:	bd38      	pop	{r3, r4, r5, pc}
 800f930:	200018d8 	.word	0x200018d8

0800f934 <_sbrk_r>:
 800f934:	b538      	push	{r3, r4, r5, lr}
 800f936:	4d06      	ldr	r5, [pc, #24]	; (800f950 <_sbrk_r+0x1c>)
 800f938:	2300      	movs	r3, #0
 800f93a:	4604      	mov	r4, r0
 800f93c:	4608      	mov	r0, r1
 800f93e:	602b      	str	r3, [r5, #0]
 800f940:	f000 f830 	bl	800f9a4 <_sbrk>
 800f944:	1c43      	adds	r3, r0, #1
 800f946:	d102      	bne.n	800f94e <_sbrk_r+0x1a>
 800f948:	682b      	ldr	r3, [r5, #0]
 800f94a:	b103      	cbz	r3, 800f94e <_sbrk_r+0x1a>
 800f94c:	6023      	str	r3, [r4, #0]
 800f94e:	bd38      	pop	{r3, r4, r5, pc}
 800f950:	200018d8 	.word	0x200018d8

0800f954 <_close>:
 800f954:	4b02      	ldr	r3, [pc, #8]	; (800f960 <_close+0xc>)
 800f956:	2258      	movs	r2, #88	; 0x58
 800f958:	601a      	str	r2, [r3, #0]
 800f95a:	f04f 30ff 	mov.w	r0, #4294967295
 800f95e:	4770      	bx	lr
 800f960:	200018d8 	.word	0x200018d8

0800f964 <_fstat>:
 800f964:	4b02      	ldr	r3, [pc, #8]	; (800f970 <_fstat+0xc>)
 800f966:	2258      	movs	r2, #88	; 0x58
 800f968:	601a      	str	r2, [r3, #0]
 800f96a:	f04f 30ff 	mov.w	r0, #4294967295
 800f96e:	4770      	bx	lr
 800f970:	200018d8 	.word	0x200018d8

0800f974 <_isatty>:
 800f974:	4b02      	ldr	r3, [pc, #8]	; (800f980 <_isatty+0xc>)
 800f976:	2258      	movs	r2, #88	; 0x58
 800f978:	601a      	str	r2, [r3, #0]
 800f97a:	2000      	movs	r0, #0
 800f97c:	4770      	bx	lr
 800f97e:	bf00      	nop
 800f980:	200018d8 	.word	0x200018d8

0800f984 <_lseek>:
 800f984:	4b02      	ldr	r3, [pc, #8]	; (800f990 <_lseek+0xc>)
 800f986:	2258      	movs	r2, #88	; 0x58
 800f988:	601a      	str	r2, [r3, #0]
 800f98a:	f04f 30ff 	mov.w	r0, #4294967295
 800f98e:	4770      	bx	lr
 800f990:	200018d8 	.word	0x200018d8

0800f994 <_read>:
 800f994:	4b02      	ldr	r3, [pc, #8]	; (800f9a0 <_read+0xc>)
 800f996:	2258      	movs	r2, #88	; 0x58
 800f998:	601a      	str	r2, [r3, #0]
 800f99a:	f04f 30ff 	mov.w	r0, #4294967295
 800f99e:	4770      	bx	lr
 800f9a0:	200018d8 	.word	0x200018d8

0800f9a4 <_sbrk>:
 800f9a4:	4a04      	ldr	r2, [pc, #16]	; (800f9b8 <_sbrk+0x14>)
 800f9a6:	6811      	ldr	r1, [r2, #0]
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	b909      	cbnz	r1, 800f9b0 <_sbrk+0xc>
 800f9ac:	4903      	ldr	r1, [pc, #12]	; (800f9bc <_sbrk+0x18>)
 800f9ae:	6011      	str	r1, [r2, #0]
 800f9b0:	6810      	ldr	r0, [r2, #0]
 800f9b2:	4403      	add	r3, r0
 800f9b4:	6013      	str	r3, [r2, #0]
 800f9b6:	4770      	bx	lr
 800f9b8:	200018e8 	.word	0x200018e8
 800f9bc:	200018f0 	.word	0x200018f0

0800f9c0 <_init>:
 800f9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9c2:	bf00      	nop
 800f9c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9c6:	bc08      	pop	{r3}
 800f9c8:	469e      	mov	lr, r3
 800f9ca:	4770      	bx	lr

0800f9cc <_fini>:
 800f9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ce:	bf00      	nop
 800f9d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9d2:	bc08      	pop	{r3}
 800f9d4:	469e      	mov	lr, r3
 800f9d6:	4770      	bx	lr
