
Server_arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ddf8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000173c  0800df38  0800df38  0001df38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f674  0800f674  0001f674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f67c  0800f67c  0001f67c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f680  0800f680  0001f680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  20000008  0800f684  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000025  200000a8  0800f724  000200a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000d0  0800f749  000200d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001770  200000e4  0800f75a  000200e4  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  20001854  0800f75a  00021854  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800f75a  000201e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .comment      00000043  00000000  00000000  00020a97  2**0
                  CONTENTS, READONLY
 16 .debug_info   0002f6ad  00000000  00000000  00020ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00006a74  00000000  00000000  00050187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002a68  00000000  00000000  00056c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000206f  00000000  00000000  00059668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002cdc4  00000000  00000000  0005b6d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00030e98  00000000  00000000  0008849b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000fa1fa  00000000  00000000  000b9333  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000b93c  00000000  00000000  001b3530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000007e  00000000  00000000  001bee6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000e4 	.word	0x200000e4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800df20 	.word	0x0800df20

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000e8 	.word	0x200000e8
 800017c:	0800df20 	.word	0x0800df20

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr
	...

080001b0 <memchr>:
 80001b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001b4:	2a10      	cmp	r2, #16
 80001b6:	db2b      	blt.n	8000210 <memchr+0x60>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	d008      	beq.n	80001d0 <memchr+0x20>
 80001be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001c2:	3a01      	subs	r2, #1
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d02d      	beq.n	8000224 <memchr+0x74>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	b342      	cbz	r2, 8000220 <memchr+0x70>
 80001ce:	d1f6      	bne.n	80001be <memchr+0xe>
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
 80001d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001da:	f022 0407 	bic.w	r4, r2, #7
 80001de:	f07f 0700 	mvns.w	r7, #0
 80001e2:	2300      	movs	r3, #0
 80001e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001e8:	3c08      	subs	r4, #8
 80001ea:	ea85 0501 	eor.w	r5, r5, r1
 80001ee:	ea86 0601 	eor.w	r6, r6, r1
 80001f2:	fa85 f547 	uadd8	r5, r5, r7
 80001f6:	faa3 f587 	sel	r5, r3, r7
 80001fa:	fa86 f647 	uadd8	r6, r6, r7
 80001fe:	faa5 f687 	sel	r6, r5, r7
 8000202:	b98e      	cbnz	r6, 8000228 <memchr+0x78>
 8000204:	d1ee      	bne.n	80001e4 <memchr+0x34>
 8000206:	bcf0      	pop	{r4, r5, r6, r7}
 8000208:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800020c:	f002 0207 	and.w	r2, r2, #7
 8000210:	b132      	cbz	r2, 8000220 <memchr+0x70>
 8000212:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000216:	3a01      	subs	r2, #1
 8000218:	ea83 0301 	eor.w	r3, r3, r1
 800021c:	b113      	cbz	r3, 8000224 <memchr+0x74>
 800021e:	d1f8      	bne.n	8000212 <memchr+0x62>
 8000220:	2000      	movs	r0, #0
 8000222:	4770      	bx	lr
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr
 8000228:	2d00      	cmp	r5, #0
 800022a:	bf06      	itte	eq
 800022c:	4635      	moveq	r5, r6
 800022e:	3803      	subeq	r0, #3
 8000230:	3807      	subne	r0, #7
 8000232:	f015 0f01 	tst.w	r5, #1
 8000236:	d107      	bne.n	8000248 <memchr+0x98>
 8000238:	3001      	adds	r0, #1
 800023a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800023e:	bf02      	ittt	eq
 8000240:	3001      	addeq	r0, #1
 8000242:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000246:	3001      	addeq	r0, #1
 8000248:	bcf0      	pop	{r4, r5, r6, r7}
 800024a:	3801      	subs	r0, #1
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop

08000250 <__aeabi_dmul>:
 8000250:	b570      	push	{r4, r5, r6, lr}
 8000252:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000256:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800025a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800025e:	bf1d      	ittte	ne
 8000260:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000264:	ea94 0f0c 	teqne	r4, ip
 8000268:	ea95 0f0c 	teqne	r5, ip
 800026c:	f000 f8de 	bleq	800042c <__aeabi_dmul+0x1dc>
 8000270:	442c      	add	r4, r5
 8000272:	ea81 0603 	eor.w	r6, r1, r3
 8000276:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800027a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800027e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000282:	bf18      	it	ne
 8000284:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000288:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800028c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000290:	d038      	beq.n	8000304 <__aeabi_dmul+0xb4>
 8000292:	fba0 ce02 	umull	ip, lr, r0, r2
 8000296:	f04f 0500 	mov.w	r5, #0
 800029a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800029e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002a6:	f04f 0600 	mov.w	r6, #0
 80002aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ae:	f09c 0f00 	teq	ip, #0
 80002b2:	bf18      	it	ne
 80002b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002c4:	d204      	bcs.n	80002d0 <__aeabi_dmul+0x80>
 80002c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ca:	416d      	adcs	r5, r5
 80002cc:	eb46 0606 	adc.w	r6, r6, r6
 80002d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002e8:	bf88      	it	hi
 80002ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002ee:	d81e      	bhi.n	800032e <__aeabi_dmul+0xde>
 80002f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000308:	ea46 0101 	orr.w	r1, r6, r1
 800030c:	ea40 0002 	orr.w	r0, r0, r2
 8000310:	ea81 0103 	eor.w	r1, r1, r3
 8000314:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000318:	bfc2      	ittt	gt
 800031a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800031e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000322:	bd70      	popgt	{r4, r5, r6, pc}
 8000324:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000328:	f04f 0e00 	mov.w	lr, #0
 800032c:	3c01      	subs	r4, #1
 800032e:	f300 80ab 	bgt.w	8000488 <__aeabi_dmul+0x238>
 8000332:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000336:	bfde      	ittt	le
 8000338:	2000      	movle	r0, #0
 800033a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800033e:	bd70      	pople	{r4, r5, r6, pc}
 8000340:	f1c4 0400 	rsb	r4, r4, #0
 8000344:	3c20      	subs	r4, #32
 8000346:	da35      	bge.n	80003b4 <__aeabi_dmul+0x164>
 8000348:	340c      	adds	r4, #12
 800034a:	dc1b      	bgt.n	8000384 <__aeabi_dmul+0x134>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f305 	lsl.w	r3, r0, r5
 8000358:	fa20 f004 	lsr.w	r0, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000368:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800036c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000370:	fa21 f604 	lsr.w	r6, r1, r4
 8000374:	eb42 0106 	adc.w	r1, r2, r6
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f1c4 040c 	rsb	r4, r4, #12
 8000388:	f1c4 0520 	rsb	r5, r4, #32
 800038c:	fa00 f304 	lsl.w	r3, r0, r4
 8000390:	fa20 f005 	lsr.w	r0, r0, r5
 8000394:	fa01 f204 	lsl.w	r2, r1, r4
 8000398:	ea40 0002 	orr.w	r0, r0, r2
 800039c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a4:	f141 0100 	adc.w	r1, r1, #0
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 0520 	rsb	r5, r4, #32
 80003b8:	fa00 f205 	lsl.w	r2, r0, r5
 80003bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003c0:	fa20 f304 	lsr.w	r3, r0, r4
 80003c4:	fa01 f205 	lsl.w	r2, r1, r5
 80003c8:	ea43 0302 	orr.w	r3, r3, r2
 80003cc:	fa21 f004 	lsr.w	r0, r1, r4
 80003d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d4:	fa21 f204 	lsr.w	r2, r1, r4
 80003d8:	ea20 0002 	bic.w	r0, r0, r2
 80003dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003e4:	bf08      	it	eq
 80003e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ea:	bd70      	pop	{r4, r5, r6, pc}
 80003ec:	f094 0f00 	teq	r4, #0
 80003f0:	d10f      	bne.n	8000412 <__aeabi_dmul+0x1c2>
 80003f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003f6:	0040      	lsls	r0, r0, #1
 80003f8:	eb41 0101 	adc.w	r1, r1, r1
 80003fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000400:	bf08      	it	eq
 8000402:	3c01      	subeq	r4, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1a6>
 8000406:	ea41 0106 	orr.w	r1, r1, r6
 800040a:	f095 0f00 	teq	r5, #0
 800040e:	bf18      	it	ne
 8000410:	4770      	bxne	lr
 8000412:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000416:	0052      	lsls	r2, r2, #1
 8000418:	eb43 0303 	adc.w	r3, r3, r3
 800041c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3d01      	subeq	r5, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1c6>
 8000426:	ea43 0306 	orr.w	r3, r3, r6
 800042a:	4770      	bx	lr
 800042c:	ea94 0f0c 	teq	r4, ip
 8000430:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000434:	bf18      	it	ne
 8000436:	ea95 0f0c 	teqne	r5, ip
 800043a:	d00c      	beq.n	8000456 <__aeabi_dmul+0x206>
 800043c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000440:	bf18      	it	ne
 8000442:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000446:	d1d1      	bne.n	80003ec <__aeabi_dmul+0x19c>
 8000448:	ea81 0103 	eor.w	r1, r1, r3
 800044c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd70      	pop	{r4, r5, r6, pc}
 8000456:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800045a:	bf06      	itte	eq
 800045c:	4610      	moveq	r0, r2
 800045e:	4619      	moveq	r1, r3
 8000460:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000464:	d019      	beq.n	800049a <__aeabi_dmul+0x24a>
 8000466:	ea94 0f0c 	teq	r4, ip
 800046a:	d102      	bne.n	8000472 <__aeabi_dmul+0x222>
 800046c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000470:	d113      	bne.n	800049a <__aeabi_dmul+0x24a>
 8000472:	ea95 0f0c 	teq	r5, ip
 8000476:	d105      	bne.n	8000484 <__aeabi_dmul+0x234>
 8000478:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800047c:	bf1c      	itt	ne
 800047e:	4610      	movne	r0, r2
 8000480:	4619      	movne	r1, r3
 8000482:	d10a      	bne.n	800049a <__aeabi_dmul+0x24a>
 8000484:	ea81 0103 	eor.w	r1, r1, r3
 8000488:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800048c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd70      	pop	{r4, r5, r6, pc}
 800049a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800049e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004a2:	bd70      	pop	{r4, r5, r6, pc}

080004a4 <__aeabi_drsub>:
 80004a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004a8:	e002      	b.n	80004b0 <__adddf3>
 80004aa:	bf00      	nop

080004ac <__aeabi_dsub>:
 80004ac:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004b0 <__adddf3>:
 80004b0:	b530      	push	{r4, r5, lr}
 80004b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	bf1f      	itttt	ne
 80004c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d6:	f000 80e2 	beq.w	800069e <__adddf3+0x1ee>
 80004da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004e2:	bfb8      	it	lt
 80004e4:	426d      	neglt	r5, r5
 80004e6:	dd0c      	ble.n	8000502 <__adddf3+0x52>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea80 0202 	eor.w	r2, r0, r2
 80004ee:	ea81 0303 	eor.w	r3, r1, r3
 80004f2:	ea82 0000 	eor.w	r0, r2, r0
 80004f6:	ea83 0101 	eor.w	r1, r3, r1
 80004fa:	ea80 0202 	eor.w	r2, r0, r2
 80004fe:	ea81 0303 	eor.w	r3, r1, r3
 8000502:	2d36      	cmp	r5, #54	; 0x36
 8000504:	bf88      	it	hi
 8000506:	bd30      	pophi	{r4, r5, pc}
 8000508:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800050c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000510:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000514:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000518:	d002      	beq.n	8000520 <__adddf3+0x70>
 800051a:	4240      	negs	r0, r0
 800051c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000520:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000524:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000528:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800052c:	d002      	beq.n	8000534 <__adddf3+0x84>
 800052e:	4252      	negs	r2, r2
 8000530:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000534:	ea94 0f05 	teq	r4, r5
 8000538:	f000 80a7 	beq.w	800068a <__adddf3+0x1da>
 800053c:	f1a4 0401 	sub.w	r4, r4, #1
 8000540:	f1d5 0e20 	rsbs	lr, r5, #32
 8000544:	db0d      	blt.n	8000562 <__adddf3+0xb2>
 8000546:	fa02 fc0e 	lsl.w	ip, r2, lr
 800054a:	fa22 f205 	lsr.w	r2, r2, r5
 800054e:	1880      	adds	r0, r0, r2
 8000550:	f141 0100 	adc.w	r1, r1, #0
 8000554:	fa03 f20e 	lsl.w	r2, r3, lr
 8000558:	1880      	adds	r0, r0, r2
 800055a:	fa43 f305 	asr.w	r3, r3, r5
 800055e:	4159      	adcs	r1, r3
 8000560:	e00e      	b.n	8000580 <__adddf3+0xd0>
 8000562:	f1a5 0520 	sub.w	r5, r5, #32
 8000566:	f10e 0e20 	add.w	lr, lr, #32
 800056a:	2a01      	cmp	r2, #1
 800056c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000570:	bf28      	it	cs
 8000572:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000576:	fa43 f305 	asr.w	r3, r3, r5
 800057a:	18c0      	adds	r0, r0, r3
 800057c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	d507      	bpl.n	8000596 <__adddf3+0xe6>
 8000586:	f04f 0e00 	mov.w	lr, #0
 800058a:	f1dc 0c00 	rsbs	ip, ip, #0
 800058e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000592:	eb6e 0101 	sbc.w	r1, lr, r1
 8000596:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800059a:	d31b      	bcc.n	80005d4 <__adddf3+0x124>
 800059c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005a0:	d30c      	bcc.n	80005bc <__adddf3+0x10c>
 80005a2:	0849      	lsrs	r1, r1, #1
 80005a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ac:	f104 0401 	add.w	r4, r4, #1
 80005b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005b4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005b8:	f080 809a 	bcs.w	80006f0 <__adddf3+0x240>
 80005bc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005c6:	f150 0000 	adcs.w	r0, r0, #0
 80005ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ce:	ea41 0105 	orr.w	r1, r1, r5
 80005d2:	bd30      	pop	{r4, r5, pc}
 80005d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005d8:	4140      	adcs	r0, r0
 80005da:	eb41 0101 	adc.w	r1, r1, r1
 80005de:	3c01      	subs	r4, #1
 80005e0:	bf28      	it	cs
 80005e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005e6:	d2e9      	bcs.n	80005bc <__adddf3+0x10c>
 80005e8:	f091 0f00 	teq	r1, #0
 80005ec:	bf04      	itt	eq
 80005ee:	4601      	moveq	r1, r0
 80005f0:	2000      	moveq	r0, #0
 80005f2:	fab1 f381 	clz	r3, r1
 80005f6:	bf08      	it	eq
 80005f8:	3320      	addeq	r3, #32
 80005fa:	f1a3 030b 	sub.w	r3, r3, #11
 80005fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000602:	da0c      	bge.n	800061e <__adddf3+0x16e>
 8000604:	320c      	adds	r2, #12
 8000606:	dd08      	ble.n	800061a <__adddf3+0x16a>
 8000608:	f102 0c14 	add.w	ip, r2, #20
 800060c:	f1c2 020c 	rsb	r2, r2, #12
 8000610:	fa01 f00c 	lsl.w	r0, r1, ip
 8000614:	fa21 f102 	lsr.w	r1, r1, r2
 8000618:	e00c      	b.n	8000634 <__adddf3+0x184>
 800061a:	f102 0214 	add.w	r2, r2, #20
 800061e:	bfd8      	it	le
 8000620:	f1c2 0c20 	rsble	ip, r2, #32
 8000624:	fa01 f102 	lsl.w	r1, r1, r2
 8000628:	fa20 fc0c 	lsr.w	ip, r0, ip
 800062c:	bfdc      	itt	le
 800062e:	ea41 010c 	orrle.w	r1, r1, ip
 8000632:	4090      	lslle	r0, r2
 8000634:	1ae4      	subs	r4, r4, r3
 8000636:	bfa2      	ittt	ge
 8000638:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800063c:	4329      	orrge	r1, r5
 800063e:	bd30      	popge	{r4, r5, pc}
 8000640:	ea6f 0404 	mvn.w	r4, r4
 8000644:	3c1f      	subs	r4, #31
 8000646:	da1c      	bge.n	8000682 <__adddf3+0x1d2>
 8000648:	340c      	adds	r4, #12
 800064a:	dc0e      	bgt.n	800066a <__adddf3+0x1ba>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0220 	rsb	r2, r4, #32
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f302 	lsl.w	r3, r1, r2
 800065c:	ea40 0003 	orr.w	r0, r0, r3
 8000660:	fa21 f304 	lsr.w	r3, r1, r4
 8000664:	ea45 0103 	orr.w	r1, r5, r3
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f1c4 040c 	rsb	r4, r4, #12
 800066e:	f1c4 0220 	rsb	r2, r4, #32
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 f304 	lsl.w	r3, r1, r4
 800067a:	ea40 0003 	orr.w	r0, r0, r3
 800067e:	4629      	mov	r1, r5
 8000680:	bd30      	pop	{r4, r5, pc}
 8000682:	fa21 f004 	lsr.w	r0, r1, r4
 8000686:	4629      	mov	r1, r5
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f094 0f00 	teq	r4, #0
 800068e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000692:	bf06      	itte	eq
 8000694:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000698:	3401      	addeq	r4, #1
 800069a:	3d01      	subne	r5, #1
 800069c:	e74e      	b.n	800053c <__adddf3+0x8c>
 800069e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006a2:	bf18      	it	ne
 80006a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006a8:	d029      	beq.n	80006fe <__adddf3+0x24e>
 80006aa:	ea94 0f05 	teq	r4, r5
 80006ae:	bf08      	it	eq
 80006b0:	ea90 0f02 	teqeq	r0, r2
 80006b4:	d005      	beq.n	80006c2 <__adddf3+0x212>
 80006b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ba:	bf04      	itt	eq
 80006bc:	4619      	moveq	r1, r3
 80006be:	4610      	moveq	r0, r2
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	ea91 0f03 	teq	r1, r3
 80006c6:	bf1e      	ittt	ne
 80006c8:	2100      	movne	r1, #0
 80006ca:	2000      	movne	r0, #0
 80006cc:	bd30      	popne	{r4, r5, pc}
 80006ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006d2:	d105      	bne.n	80006e0 <__adddf3+0x230>
 80006d4:	0040      	lsls	r0, r0, #1
 80006d6:	4149      	adcs	r1, r1
 80006d8:	bf28      	it	cs
 80006da:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd30      	pop	{r4, r5, pc}
 80006e0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006e4:	bf3c      	itt	cc
 80006e6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006ea:	bd30      	popcc	{r4, r5, pc}
 80006ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006f0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006f4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf1a      	itte	ne
 8000704:	4619      	movne	r1, r3
 8000706:	4610      	movne	r0, r2
 8000708:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800070c:	bf1c      	itt	ne
 800070e:	460b      	movne	r3, r1
 8000710:	4602      	movne	r2, r0
 8000712:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000716:	bf06      	itte	eq
 8000718:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800071c:	ea91 0f03 	teqeq	r1, r3
 8000720:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000724:	bd30      	pop	{r4, r5, pc}
 8000726:	bf00      	nop

08000728 <__aeabi_ui2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800073c:	f04f 0500 	mov.w	r5, #0
 8000740:	f04f 0100 	mov.w	r1, #0
 8000744:	e750      	b.n	80005e8 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_i2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000760:	bf48      	it	mi
 8000762:	4240      	negmi	r0, r0
 8000764:	f04f 0100 	mov.w	r1, #0
 8000768:	e73e      	b.n	80005e8 <__adddf3+0x138>
 800076a:	bf00      	nop

0800076c <__aeabi_f2d>:
 800076c:	0042      	lsls	r2, r0, #1
 800076e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000772:	ea4f 0131 	mov.w	r1, r1, rrx
 8000776:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800077a:	bf1f      	itttt	ne
 800077c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000780:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000784:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000788:	4770      	bxne	lr
 800078a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800078e:	bf08      	it	eq
 8000790:	4770      	bxeq	lr
 8000792:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000796:	bf04      	itt	eq
 8000798:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800079c:	4770      	bxeq	lr
 800079e:	b530      	push	{r4, r5, lr}
 80007a0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	e71c      	b.n	80005e8 <__adddf3+0x138>
 80007ae:	bf00      	nop

080007b0 <__aeabi_ul2d>:
 80007b0:	ea50 0201 	orrs.w	r2, r0, r1
 80007b4:	bf08      	it	eq
 80007b6:	4770      	bxeq	lr
 80007b8:	b530      	push	{r4, r5, lr}
 80007ba:	f04f 0500 	mov.w	r5, #0
 80007be:	e00a      	b.n	80007d6 <__aeabi_l2d+0x16>

080007c0 <__aeabi_l2d>:
 80007c0:	ea50 0201 	orrs.w	r2, r0, r1
 80007c4:	bf08      	it	eq
 80007c6:	4770      	bxeq	lr
 80007c8:	b530      	push	{r4, r5, lr}
 80007ca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ce:	d502      	bpl.n	80007d6 <__aeabi_l2d+0x16>
 80007d0:	4240      	negs	r0, r0
 80007d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007d6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007da:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007e2:	f43f aed8 	beq.w	8000596 <__adddf3+0xe6>
 80007e6:	f04f 0203 	mov.w	r2, #3
 80007ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ee:	bf18      	it	ne
 80007f0:	3203      	addne	r2, #3
 80007f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007f6:	bf18      	it	ne
 80007f8:	3203      	addne	r2, #3
 80007fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007fe:	f1c2 0320 	rsb	r3, r2, #32
 8000802:	fa00 fc03 	lsl.w	ip, r0, r3
 8000806:	fa20 f002 	lsr.w	r0, r0, r2
 800080a:	fa01 fe03 	lsl.w	lr, r1, r3
 800080e:	ea40 000e 	orr.w	r0, r0, lr
 8000812:	fa21 f102 	lsr.w	r1, r1, r2
 8000816:	4414      	add	r4, r2
 8000818:	e6bd      	b.n	8000596 <__adddf3+0xe6>
 800081a:	bf00      	nop

0800081c <__aeabi_uldivmod>:
 800081c:	b953      	cbnz	r3, 8000834 <__aeabi_uldivmod+0x18>
 800081e:	b94a      	cbnz	r2, 8000834 <__aeabi_uldivmod+0x18>
 8000820:	2900      	cmp	r1, #0
 8000822:	bf08      	it	eq
 8000824:	2800      	cmpeq	r0, #0
 8000826:	bf1c      	itt	ne
 8000828:	f04f 31ff 	movne.w	r1, #4294967295
 800082c:	f04f 30ff 	movne.w	r0, #4294967295
 8000830:	f000 b970 	b.w	8000b14 <__aeabi_idiv0>
 8000834:	f1ad 0c08 	sub.w	ip, sp, #8
 8000838:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800083c:	f000 f806 	bl	800084c <__udivmoddi4>
 8000840:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000844:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000848:	b004      	add	sp, #16
 800084a:	4770      	bx	lr

0800084c <__udivmoddi4>:
 800084c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000850:	9e08      	ldr	r6, [sp, #32]
 8000852:	460d      	mov	r5, r1
 8000854:	4604      	mov	r4, r0
 8000856:	460f      	mov	r7, r1
 8000858:	2b00      	cmp	r3, #0
 800085a:	d14a      	bne.n	80008f2 <__udivmoddi4+0xa6>
 800085c:	428a      	cmp	r2, r1
 800085e:	4694      	mov	ip, r2
 8000860:	d965      	bls.n	800092e <__udivmoddi4+0xe2>
 8000862:	fab2 f382 	clz	r3, r2
 8000866:	b143      	cbz	r3, 800087a <__udivmoddi4+0x2e>
 8000868:	fa02 fc03 	lsl.w	ip, r2, r3
 800086c:	f1c3 0220 	rsb	r2, r3, #32
 8000870:	409f      	lsls	r7, r3
 8000872:	fa20 f202 	lsr.w	r2, r0, r2
 8000876:	4317      	orrs	r7, r2
 8000878:	409c      	lsls	r4, r3
 800087a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800087e:	fa1f f58c 	uxth.w	r5, ip
 8000882:	fbb7 f1fe 	udiv	r1, r7, lr
 8000886:	0c22      	lsrs	r2, r4, #16
 8000888:	fb0e 7711 	mls	r7, lr, r1, r7
 800088c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000890:	fb01 f005 	mul.w	r0, r1, r5
 8000894:	4290      	cmp	r0, r2
 8000896:	d90a      	bls.n	80008ae <__udivmoddi4+0x62>
 8000898:	eb1c 0202 	adds.w	r2, ip, r2
 800089c:	f101 37ff 	add.w	r7, r1, #4294967295
 80008a0:	f080 811c 	bcs.w	8000adc <__udivmoddi4+0x290>
 80008a4:	4290      	cmp	r0, r2
 80008a6:	f240 8119 	bls.w	8000adc <__udivmoddi4+0x290>
 80008aa:	3902      	subs	r1, #2
 80008ac:	4462      	add	r2, ip
 80008ae:	1a12      	subs	r2, r2, r0
 80008b0:	b2a4      	uxth	r4, r4
 80008b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80008b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80008ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008be:	fb00 f505 	mul.w	r5, r0, r5
 80008c2:	42a5      	cmp	r5, r4
 80008c4:	d90a      	bls.n	80008dc <__udivmoddi4+0x90>
 80008c6:	eb1c 0404 	adds.w	r4, ip, r4
 80008ca:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ce:	f080 8107 	bcs.w	8000ae0 <__udivmoddi4+0x294>
 80008d2:	42a5      	cmp	r5, r4
 80008d4:	f240 8104 	bls.w	8000ae0 <__udivmoddi4+0x294>
 80008d8:	4464      	add	r4, ip
 80008da:	3802      	subs	r0, #2
 80008dc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008e0:	1b64      	subs	r4, r4, r5
 80008e2:	2100      	movs	r1, #0
 80008e4:	b11e      	cbz	r6, 80008ee <__udivmoddi4+0xa2>
 80008e6:	40dc      	lsrs	r4, r3
 80008e8:	2300      	movs	r3, #0
 80008ea:	e9c6 4300 	strd	r4, r3, [r6]
 80008ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008f2:	428b      	cmp	r3, r1
 80008f4:	d908      	bls.n	8000908 <__udivmoddi4+0xbc>
 80008f6:	2e00      	cmp	r6, #0
 80008f8:	f000 80ed 	beq.w	8000ad6 <__udivmoddi4+0x28a>
 80008fc:	2100      	movs	r1, #0
 80008fe:	e9c6 0500 	strd	r0, r5, [r6]
 8000902:	4608      	mov	r0, r1
 8000904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000908:	fab3 f183 	clz	r1, r3
 800090c:	2900      	cmp	r1, #0
 800090e:	d149      	bne.n	80009a4 <__udivmoddi4+0x158>
 8000910:	42ab      	cmp	r3, r5
 8000912:	d302      	bcc.n	800091a <__udivmoddi4+0xce>
 8000914:	4282      	cmp	r2, r0
 8000916:	f200 80f8 	bhi.w	8000b0a <__udivmoddi4+0x2be>
 800091a:	1a84      	subs	r4, r0, r2
 800091c:	eb65 0203 	sbc.w	r2, r5, r3
 8000920:	2001      	movs	r0, #1
 8000922:	4617      	mov	r7, r2
 8000924:	2e00      	cmp	r6, #0
 8000926:	d0e2      	beq.n	80008ee <__udivmoddi4+0xa2>
 8000928:	e9c6 4700 	strd	r4, r7, [r6]
 800092c:	e7df      	b.n	80008ee <__udivmoddi4+0xa2>
 800092e:	b902      	cbnz	r2, 8000932 <__udivmoddi4+0xe6>
 8000930:	deff      	udf	#255	; 0xff
 8000932:	fab2 f382 	clz	r3, r2
 8000936:	2b00      	cmp	r3, #0
 8000938:	f040 8090 	bne.w	8000a5c <__udivmoddi4+0x210>
 800093c:	1a8a      	subs	r2, r1, r2
 800093e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000942:	fa1f fe8c 	uxth.w	lr, ip
 8000946:	2101      	movs	r1, #1
 8000948:	fbb2 f5f7 	udiv	r5, r2, r7
 800094c:	fb07 2015 	mls	r0, r7, r5, r2
 8000950:	0c22      	lsrs	r2, r4, #16
 8000952:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000956:	fb0e f005 	mul.w	r0, lr, r5
 800095a:	4290      	cmp	r0, r2
 800095c:	d908      	bls.n	8000970 <__udivmoddi4+0x124>
 800095e:	eb1c 0202 	adds.w	r2, ip, r2
 8000962:	f105 38ff 	add.w	r8, r5, #4294967295
 8000966:	d202      	bcs.n	800096e <__udivmoddi4+0x122>
 8000968:	4290      	cmp	r0, r2
 800096a:	f200 80cb 	bhi.w	8000b04 <__udivmoddi4+0x2b8>
 800096e:	4645      	mov	r5, r8
 8000970:	1a12      	subs	r2, r2, r0
 8000972:	b2a4      	uxth	r4, r4
 8000974:	fbb2 f0f7 	udiv	r0, r2, r7
 8000978:	fb07 2210 	mls	r2, r7, r0, r2
 800097c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000980:	fb0e fe00 	mul.w	lr, lr, r0
 8000984:	45a6      	cmp	lr, r4
 8000986:	d908      	bls.n	800099a <__udivmoddi4+0x14e>
 8000988:	eb1c 0404 	adds.w	r4, ip, r4
 800098c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000990:	d202      	bcs.n	8000998 <__udivmoddi4+0x14c>
 8000992:	45a6      	cmp	lr, r4
 8000994:	f200 80bb 	bhi.w	8000b0e <__udivmoddi4+0x2c2>
 8000998:	4610      	mov	r0, r2
 800099a:	eba4 040e 	sub.w	r4, r4, lr
 800099e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009a2:	e79f      	b.n	80008e4 <__udivmoddi4+0x98>
 80009a4:	f1c1 0720 	rsb	r7, r1, #32
 80009a8:	408b      	lsls	r3, r1
 80009aa:	fa22 fc07 	lsr.w	ip, r2, r7
 80009ae:	ea4c 0c03 	orr.w	ip, ip, r3
 80009b2:	fa05 f401 	lsl.w	r4, r5, r1
 80009b6:	fa20 f307 	lsr.w	r3, r0, r7
 80009ba:	40fd      	lsrs	r5, r7
 80009bc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009c0:	4323      	orrs	r3, r4
 80009c2:	fbb5 f8f9 	udiv	r8, r5, r9
 80009c6:	fa1f fe8c 	uxth.w	lr, ip
 80009ca:	fb09 5518 	mls	r5, r9, r8, r5
 80009ce:	0c1c      	lsrs	r4, r3, #16
 80009d0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009d4:	fb08 f50e 	mul.w	r5, r8, lr
 80009d8:	42a5      	cmp	r5, r4
 80009da:	fa02 f201 	lsl.w	r2, r2, r1
 80009de:	fa00 f001 	lsl.w	r0, r0, r1
 80009e2:	d90b      	bls.n	80009fc <__udivmoddi4+0x1b0>
 80009e4:	eb1c 0404 	adds.w	r4, ip, r4
 80009e8:	f108 3aff 	add.w	sl, r8, #4294967295
 80009ec:	f080 8088 	bcs.w	8000b00 <__udivmoddi4+0x2b4>
 80009f0:	42a5      	cmp	r5, r4
 80009f2:	f240 8085 	bls.w	8000b00 <__udivmoddi4+0x2b4>
 80009f6:	f1a8 0802 	sub.w	r8, r8, #2
 80009fa:	4464      	add	r4, ip
 80009fc:	1b64      	subs	r4, r4, r5
 80009fe:	b29d      	uxth	r5, r3
 8000a00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a04:	fb09 4413 	mls	r4, r9, r3, r4
 8000a08:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a0c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a10:	45a6      	cmp	lr, r4
 8000a12:	d908      	bls.n	8000a26 <__udivmoddi4+0x1da>
 8000a14:	eb1c 0404 	adds.w	r4, ip, r4
 8000a18:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a1c:	d26c      	bcs.n	8000af8 <__udivmoddi4+0x2ac>
 8000a1e:	45a6      	cmp	lr, r4
 8000a20:	d96a      	bls.n	8000af8 <__udivmoddi4+0x2ac>
 8000a22:	3b02      	subs	r3, #2
 8000a24:	4464      	add	r4, ip
 8000a26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a2a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a2e:	eba4 040e 	sub.w	r4, r4, lr
 8000a32:	42ac      	cmp	r4, r5
 8000a34:	46c8      	mov	r8, r9
 8000a36:	46ae      	mov	lr, r5
 8000a38:	d356      	bcc.n	8000ae8 <__udivmoddi4+0x29c>
 8000a3a:	d053      	beq.n	8000ae4 <__udivmoddi4+0x298>
 8000a3c:	b156      	cbz	r6, 8000a54 <__udivmoddi4+0x208>
 8000a3e:	ebb0 0208 	subs.w	r2, r0, r8
 8000a42:	eb64 040e 	sbc.w	r4, r4, lr
 8000a46:	fa04 f707 	lsl.w	r7, r4, r7
 8000a4a:	40ca      	lsrs	r2, r1
 8000a4c:	40cc      	lsrs	r4, r1
 8000a4e:	4317      	orrs	r7, r2
 8000a50:	e9c6 7400 	strd	r7, r4, [r6]
 8000a54:	4618      	mov	r0, r3
 8000a56:	2100      	movs	r1, #0
 8000a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a5c:	f1c3 0120 	rsb	r1, r3, #32
 8000a60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a64:	fa20 f201 	lsr.w	r2, r0, r1
 8000a68:	fa25 f101 	lsr.w	r1, r5, r1
 8000a6c:	409d      	lsls	r5, r3
 8000a6e:	432a      	orrs	r2, r5
 8000a70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a74:	fa1f fe8c 	uxth.w	lr, ip
 8000a78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a7c:	fb07 1510 	mls	r5, r7, r0, r1
 8000a80:	0c11      	lsrs	r1, r2, #16
 8000a82:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a86:	fb00 f50e 	mul.w	r5, r0, lr
 8000a8a:	428d      	cmp	r5, r1
 8000a8c:	fa04 f403 	lsl.w	r4, r4, r3
 8000a90:	d908      	bls.n	8000aa4 <__udivmoddi4+0x258>
 8000a92:	eb1c 0101 	adds.w	r1, ip, r1
 8000a96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a9a:	d22f      	bcs.n	8000afc <__udivmoddi4+0x2b0>
 8000a9c:	428d      	cmp	r5, r1
 8000a9e:	d92d      	bls.n	8000afc <__udivmoddi4+0x2b0>
 8000aa0:	3802      	subs	r0, #2
 8000aa2:	4461      	add	r1, ip
 8000aa4:	1b49      	subs	r1, r1, r5
 8000aa6:	b292      	uxth	r2, r2
 8000aa8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000aac:	fb07 1115 	mls	r1, r7, r5, r1
 8000ab0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ab4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ab8:	4291      	cmp	r1, r2
 8000aba:	d908      	bls.n	8000ace <__udivmoddi4+0x282>
 8000abc:	eb1c 0202 	adds.w	r2, ip, r2
 8000ac0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ac4:	d216      	bcs.n	8000af4 <__udivmoddi4+0x2a8>
 8000ac6:	4291      	cmp	r1, r2
 8000ac8:	d914      	bls.n	8000af4 <__udivmoddi4+0x2a8>
 8000aca:	3d02      	subs	r5, #2
 8000acc:	4462      	add	r2, ip
 8000ace:	1a52      	subs	r2, r2, r1
 8000ad0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ad4:	e738      	b.n	8000948 <__udivmoddi4+0xfc>
 8000ad6:	4631      	mov	r1, r6
 8000ad8:	4630      	mov	r0, r6
 8000ada:	e708      	b.n	80008ee <__udivmoddi4+0xa2>
 8000adc:	4639      	mov	r1, r7
 8000ade:	e6e6      	b.n	80008ae <__udivmoddi4+0x62>
 8000ae0:	4610      	mov	r0, r2
 8000ae2:	e6fb      	b.n	80008dc <__udivmoddi4+0x90>
 8000ae4:	4548      	cmp	r0, r9
 8000ae6:	d2a9      	bcs.n	8000a3c <__udivmoddi4+0x1f0>
 8000ae8:	ebb9 0802 	subs.w	r8, r9, r2
 8000aec:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000af0:	3b01      	subs	r3, #1
 8000af2:	e7a3      	b.n	8000a3c <__udivmoddi4+0x1f0>
 8000af4:	4645      	mov	r5, r8
 8000af6:	e7ea      	b.n	8000ace <__udivmoddi4+0x282>
 8000af8:	462b      	mov	r3, r5
 8000afa:	e794      	b.n	8000a26 <__udivmoddi4+0x1da>
 8000afc:	4640      	mov	r0, r8
 8000afe:	e7d1      	b.n	8000aa4 <__udivmoddi4+0x258>
 8000b00:	46d0      	mov	r8, sl
 8000b02:	e77b      	b.n	80009fc <__udivmoddi4+0x1b0>
 8000b04:	3d02      	subs	r5, #2
 8000b06:	4462      	add	r2, ip
 8000b08:	e732      	b.n	8000970 <__udivmoddi4+0x124>
 8000b0a:	4608      	mov	r0, r1
 8000b0c:	e70a      	b.n	8000924 <__udivmoddi4+0xd8>
 8000b0e:	4464      	add	r4, ip
 8000b10:	3802      	subs	r0, #2
 8000b12:	e742      	b.n	800099a <__udivmoddi4+0x14e>

08000b14 <__aeabi_idiv0>:
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000b20:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <LL_EXTI_EnableIT_32_63+0x24>)
 8000b22:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000b26:	4905      	ldr	r1, [pc, #20]	; (8000b3c <LL_EXTI_EnableIT_32_63+0x24>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	58000800 	.word	0x58000800

08000b40 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4013      	ands	r3, r2
 8000b62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b64:	68fb      	ldr	r3, [r7, #12]
}
 8000b66:	bf00      	nop
 8000b68:	3714      	adds	r7, #20
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b085      	sub	sp, #20
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b7e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000b82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b92:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
}
 8000b9e:	bf00      	nop
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000bae:	f002 fbb9 	bl	8003324 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000bb2:	f002 fbbd 	bl	8003330 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000bb6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000bba:	f7ff ffad 	bl	8000b18 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000bbe:	f009 ff65 	bl	800aa8c <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000bc2:	f000 f821 	bl	8000c08 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000bc6:	f000 f8c1 	bl	8000d4c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000bca:	bf00      	nop
}
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000bd0:	b5b0      	push	{r4, r5, r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <APPD_EnableCPU2+0x34>)
 8000bd8:	1d3c      	adds	r4, r7, #4
 8000bda:	461d      	mov	r5, r3
 8000bdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000be4:	c403      	stmia	r4!, {r0, r1}
 8000be6:	8022      	strh	r2, [r4, #0]
 8000be8:	3402      	adds	r4, #2
 8000bea:	0c13      	lsrs	r3, r2, #16
 8000bec:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000bee:	f009 fe89 	bl	800a904 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f009 f91a 	bl	8009e2e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000bfa:	bf00      	nop
}
 8000bfc:	3720      	adds	r7, #32
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bdb0      	pop	{r4, r5, r7, pc}
 8000c02:	bf00      	nop
 8000c04:	0800df38 	.word	0x0800df38

08000c08 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c28:	2300      	movs	r3, #0
 8000c2a:	77fb      	strb	r3, [r7, #31]
 8000c2c:	e036      	b.n	8000c9c <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000c2e:	7ffb      	ldrb	r3, [r7, #31]
 8000c30:	4a43      	ldr	r2, [pc, #268]	; (8000d40 <APPD_SetCPU2GpioConfig+0x138>)
 8000c32:	00db      	lsls	r3, r3, #3
 8000c34:	4413      	add	r3, r2
 8000c36:	799b      	ldrb	r3, [r3, #6]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d02c      	beq.n	8000c96 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000c3c:	7ffb      	ldrb	r3, [r7, #31]
 8000c3e:	4a40      	ldr	r2, [pc, #256]	; (8000d40 <APPD_SetCPU2GpioConfig+0x138>)
 8000c40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000c44:	4a3f      	ldr	r2, [pc, #252]	; (8000d44 <APPD_SetCPU2GpioConfig+0x13c>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d01b      	beq.n	8000c82 <APPD_SetCPU2GpioConfig+0x7a>
 8000c4a:	4a3e      	ldr	r2, [pc, #248]	; (8000d44 <APPD_SetCPU2GpioConfig+0x13c>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d821      	bhi.n	8000c94 <APPD_SetCPU2GpioConfig+0x8c>
 8000c50:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c54:	d003      	beq.n	8000c5e <APPD_SetCPU2GpioConfig+0x56>
 8000c56:	4a3c      	ldr	r2, [pc, #240]	; (8000d48 <APPD_SetCPU2GpioConfig+0x140>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d009      	beq.n	8000c70 <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000c5c:	e01a      	b.n	8000c94 <APPD_SetCPU2GpioConfig+0x8c>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000c5e:	7ffb      	ldrb	r3, [r7, #31]
 8000c60:	4a37      	ldr	r2, [pc, #220]	; (8000d40 <APPD_SetCPU2GpioConfig+0x138>)
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	4413      	add	r3, r2
 8000c66:	889a      	ldrh	r2, [r3, #4]
 8000c68:	8bbb      	ldrh	r3, [r7, #28]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	83bb      	strh	r3, [r7, #28]
          break;
 8000c6e:	e012      	b.n	8000c96 <APPD_SetCPU2GpioConfig+0x8e>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000c70:	7ffb      	ldrb	r3, [r7, #31]
 8000c72:	4a33      	ldr	r2, [pc, #204]	; (8000d40 <APPD_SetCPU2GpioConfig+0x138>)
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	4413      	add	r3, r2
 8000c78:	889a      	ldrh	r2, [r3, #4]
 8000c7a:	8b7b      	ldrh	r3, [r7, #26]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	837b      	strh	r3, [r7, #26]
          break;
 8000c80:	e009      	b.n	8000c96 <APPD_SetCPU2GpioConfig+0x8e>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000c82:	7ffb      	ldrb	r3, [r7, #31]
 8000c84:	4a2e      	ldr	r2, [pc, #184]	; (8000d40 <APPD_SetCPU2GpioConfig+0x138>)
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	4413      	add	r3, r2
 8000c8a:	889a      	ldrh	r2, [r3, #4]
 8000c8c:	8b3b      	ldrh	r3, [r7, #24]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	833b      	strh	r3, [r7, #24]
          break;
 8000c92:	e000      	b.n	8000c96 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000c94:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000c96:	7ffb      	ldrb	r3, [r7, #31]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	77fb      	strb	r3, [r7, #31]
 8000c9c:	7ffb      	ldrb	r3, [r7, #31]
 8000c9e:	2b25      	cmp	r3, #37	; 0x25
 8000ca0:	d9c5      	bls.n	8000c2e <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000caa:	2303      	movs	r3, #3
 8000cac:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000cae:	8bbb      	ldrh	r3, [r7, #28]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d014      	beq.n	8000cde <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000cb4:	8bbb      	ldrh	r3, [r7, #28]
 8000cb6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f7ff ff41 	bl	8000b40 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	f7ff ff57 	bl	8000b72 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ccc:	f003 f864 	bl	8003d98 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000cd0:	8bbb      	ldrh	r3, [r7, #28]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cda:	f003 f9cd 	bl	8004078 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000cde:	8b7b      	ldrh	r3, [r7, #26]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d012      	beq.n	8000d0a <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000ce4:	8b7b      	ldrh	r3, [r7, #26]
 8000ce6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce8:	2002      	movs	r0, #2
 8000cea:	f7ff ff29 	bl	8000b40 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000cee:	2002      	movs	r0, #2
 8000cf0:	f7ff ff3f 	bl	8000b72 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4813      	ldr	r0, [pc, #76]	; (8000d48 <APPD_SetCPU2GpioConfig+0x140>)
 8000cfa:	f003 f84d 	bl	8003d98 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000cfe:	8b7b      	ldrh	r3, [r7, #26]
 8000d00:	2200      	movs	r2, #0
 8000d02:	4619      	mov	r1, r3
 8000d04:	4810      	ldr	r0, [pc, #64]	; (8000d48 <APPD_SetCPU2GpioConfig+0x140>)
 8000d06:	f003 f9b7 	bl	8004078 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000d0a:	8b3b      	ldrh	r3, [r7, #24]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d013      	beq.n	8000d38 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000d10:	8b3b      	ldrh	r3, [r7, #24]
 8000d12:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d14:	2004      	movs	r0, #4
 8000d16:	f7ff ff13 	bl	8000b40 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000d1a:	2004      	movs	r0, #4
 8000d1c:	f7ff ff29 	bl	8000b72 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	4619      	mov	r1, r3
 8000d24:	4807      	ldr	r0, [pc, #28]	; (8000d44 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d26:	f003 f837 	bl	8003d98 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000d2a:	8b3b      	ldrh	r3, [r7, #24]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <APPD_SetCPU2GpioConfig+0x13c>)
 8000d32:	f003 f9a1 	bl	8004078 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000d36:	bf00      	nop
 8000d38:	bf00      	nop
}
 8000d3a:	3720      	adds	r7, #32
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	0800f3f4 	.word	0x0800f3f4
 8000d44:	48000800 	.word	0x48000800
 8000d48:	48000400 	.word	0x48000400

08000d4c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000d50:	bf00      	nop
}
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	af00      	add	r7, sp, #0
#endif
  }
  else if (CFG_DEBUG_TRACE_UART == hw_uart1)
  {
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000d5e:	f001 fd3b 	bl	80027d8 <MX_USART1_UART_Init>
#endif
  }
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000d62:	bf00      	nop
}
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b084      	sub	sp, #16
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	60f8      	str	r0, [r7, #12]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000d74:	897a      	ldrh	r2, [r7, #10]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	68f9      	ldr	r1, [r7, #12]
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f001 fb7c 	bl	8002478 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000d80:	bf00      	nop
}
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000d90:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d96:	f023 0207 	bic.w	r2, r3, #7
 8000d9a:	4905      	ldr	r1, [pc, #20]	; (8000db0 <LL_C2_PWR_SetPowerMode+0x28>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	58000400 	.word	0x58000400

08000db4 <LL_EXTI_EnableIT_32_63>:
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000dbe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000dc2:	4905      	ldr	r1, [pc, #20]	; (8000dd8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr
 8000dd8:	58000800 	.word	0x58000800

08000ddc <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000de8:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000dea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000df2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000df6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e02:	4313      	orrs	r3, r2
 8000e04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	cafecafe 	.word	0xcafecafe

08000e18 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000e2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	608b      	str	r3, [r1, #8]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000e66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e90:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000e94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000e98:	d101      	bne.n	8000e9e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e000      	b.n	8000ea0 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8000eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000ebe:	d101      	bne.n	8000ec4 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e000      	b.n	8000ec6 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <LL_AHB3_GRP1_EnableClock>:
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000edc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ede:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
}
 8000ef6:	bf00      	nop
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <LL_DBGMCU_GetDeviceID+0x18>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e0042000 	.word	0xe0042000

08000f20 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <LL_DBGMCU_GetRevisionID+0x18>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	0c1b      	lsrs	r3, r3, #16
 8000f2a:	b29b      	uxth	r3, r3
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e0042000 	.word	0xe0042000

08000f3c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	041b      	lsls	r3, r3, #16
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	605a      	str	r2, [r3, #4]
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	431a      	orrs	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	605a      	str	r2, [r3, #4]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	695a      	ldr	r2, [r3, #20]
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	041b      	lsls	r3, r3, #16
 8000f94:	431a      	orrs	r2, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	615a      	str	r2, [r3, #20]
}
 8000f9a:	bf00      	nop
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	695a      	ldr	r2, [r3, #20]
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	615a      	str	r2, [r3, #20]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	609a      	str	r2, [r3, #8]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	619a      	str	r2, [r3, #24]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <LL_LPM_EnableSleep+0x1c>)
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	4a04      	ldr	r2, [pc, #16]	; (800101c <LL_LPM_EnableSleep+0x1c>)
 800100a:	f023 0304 	bic.w	r3, r3, #4
 800100e:	6113      	str	r3, [r2, #16]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	22ff      	movs	r2, #255	; 0xff
 800102c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	22ca      	movs	r2, #202	; 0xca
 8001046:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2253      	movs	r2, #83	; 0x53
 800104c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800104e:	bf00      	nop
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	f023 0207 	bic.w	r2, r3, #7
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	431a      	orrs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	609a      	str	r2, [r3, #8]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <MX_APPE_Config+0x18>)
 8001086:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800108a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800108c:	f000 f830 	bl	80010f0 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001090:	f000 f870 	bl	8001174 <Config_HSE>

  return;
 8001094:	bf00      	nop
}
 8001096:	bd80      	pop	{r7, pc}
 8001098:	58004000 	.word	0x58004000

0800109c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80010a0:	f000 f87c 	bl	800119c <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80010a4:	f000 f894 	bl	80011d0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80010a8:	4909      	ldr	r1, [pc, #36]	; (80010d0 <MX_APPE_Init+0x34>)
 80010aa:	2000      	movs	r0, #0
 80010ac:	f000 ff3e 	bl	8001f2c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 80010b0:	f7ff fd7b 	bl	8000baa <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80010b4:	2101      	movs	r1, #1
 80010b6:	2001      	movs	r0, #1
 80010b8:	f00b fcb8 	bl	800ca2c <UTIL_LPM_SetOffMode>

  Led_Init();
 80010bc:	f000 f9ea 	bl	8001494 <Led_Init>

  Button_Init();
 80010c0:	f000 f9f8 	bl	80014b4 <Button_Init>
  
  RxUART_Init();
 80010c4:	f000 fa86 	bl	80015d4 <RxUART_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80010c8:	f000 f890 	bl	80011ec <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 80010cc:	bf00      	nop
}
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200004fc 	.word	0x200004fc

080010d4 <Init_Smps>:

void Init_Smps(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80010d8:	bf00      	nop
}
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <Init_Exti>:

void Init_Exti(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80010e6:	2050      	movs	r0, #80	; 0x50
 80010e8:	f7ff fe64 	bl	8000db4 <LL_EXTI_EnableIT_32_63>

  return;
 80010ec:	bf00      	nop
}
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80010f4:	f000 f804 	bl	8001100 <Reset_BackupDomain>

  Reset_IPCC();
 80010f8:	f000 f81a 	bl	8001130 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80010fc:	bf00      	nop
}
 80010fe:	bd80      	pop	{r7, pc}

08001100 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001104:	f7ff febe 	bl	8000e84 <LL_RCC_IsActiveFlag_PINRST>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d00d      	beq.n	800112a <Reset_BackupDomain+0x2a>
 800110e:	f7ff fecc 	bl	8000eaa <LL_RCC_IsActiveFlag_SFTRST>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d108      	bne.n	800112a <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001118:	f003 f888 	bl	800422c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800111c:	f003 f886 	bl	800422c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001120:	f7ff fe8e 	bl	8000e40 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001124:	f7ff fe9d 	bl	8000e62 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001128:	bf00      	nop
 800112a:	bf00      	nop
}
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001134:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001138:	f7ff feca 	bl	8000ed0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 800113c:	213f      	movs	r1, #63	; 0x3f
 800113e:	480c      	ldr	r0, [pc, #48]	; (8001170 <Reset_IPCC+0x40>)
 8001140:	f7ff ff42 	bl	8000fc8 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001144:	213f      	movs	r1, #63	; 0x3f
 8001146:	480a      	ldr	r0, [pc, #40]	; (8001170 <Reset_IPCC+0x40>)
 8001148:	f7ff ff4c 	bl	8000fe4 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 800114c:	213f      	movs	r1, #63	; 0x3f
 800114e:	4808      	ldr	r0, [pc, #32]	; (8001170 <Reset_IPCC+0x40>)
 8001150:	f7ff fef4 	bl	8000f3c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001154:	213f      	movs	r1, #63	; 0x3f
 8001156:	4806      	ldr	r0, [pc, #24]	; (8001170 <Reset_IPCC+0x40>)
 8001158:	f7ff ff13 	bl	8000f82 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 800115c:	213f      	movs	r1, #63	; 0x3f
 800115e:	4804      	ldr	r0, [pc, #16]	; (8001170 <Reset_IPCC+0x40>)
 8001160:	f7ff fefe 	bl	8000f60 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001164:	213f      	movs	r1, #63	; 0x3f
 8001166:	4802      	ldr	r0, [pc, #8]	; (8001170 <Reset_IPCC+0x40>)
 8001168:	f7ff ff1d 	bl	8000fa6 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 800116c:	bf00      	nop
}
 800116e:	bd80      	pop	{r7, pc}
 8001170:	58000c00 	.word	0x58000c00

08001174 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800117a:	2000      	movs	r0, #0
 800117c:	f009 fd04 	bl	800ab88 <OTP_Read>
 8001180:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d005      	beq.n	8001194 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	799b      	ldrb	r3, [r3, #6]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fe25 	bl	8000ddc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001192:	bf00      	nop
 8001194:	bf00      	nop
}
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <System_Init>:

static void System_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  Init_Smps();
 80011a0:	f7ff ff98 	bl	80010d4 <Init_Smps>

  Init_Exti();
 80011a4:	f7ff ff9d 	bl	80010e2 <Init_Exti>

  Init_Rtc();
 80011a8:	f000 f802 	bl	80011b0 <Init_Rtc>

  return;
 80011ac:	bf00      	nop
}
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <Init_Rtc>:

static void Init_Rtc(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80011b4:	4805      	ldr	r0, [pc, #20]	; (80011cc <Init_Rtc+0x1c>)
 80011b6:	f7ff ff40 	bl	800103a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80011ba:	2100      	movs	r1, #0
 80011bc:	4803      	ldr	r0, [pc, #12]	; (80011cc <Init_Rtc+0x1c>)
 80011be:	f7ff ff4c 	bl	800105a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80011c2:	4802      	ldr	r0, [pc, #8]	; (80011cc <Init_Rtc+0x1c>)
 80011c4:	f7ff ff2c 	bl	8001020 <LL_RTC_EnableWriteProtection>

  return;
 80011c8:	bf00      	nop
}
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40002800 	.word	0x40002800

080011d0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80011d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80011d8:	f7ff fe1e 	bl	8000e18 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80011dc:	f00b fc14 	bl	800ca08 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80011e0:	2004      	movs	r0, #4
 80011e2:	f7ff fdd1 	bl	8000d88 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80011e6:	bf00      	nop
}
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80011f2:	f009 f9d1 	bl	800a598 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80011f6:	4a11      	ldr	r2, [pc, #68]	; (800123c <appe_Tl_Init+0x50>)
 80011f8:	2100      	movs	r1, #0
 80011fa:	2040      	movs	r0, #64	; 0x40
 80011fc:	f00b fd42 	bl	800cc84 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <appe_Tl_Init+0x54>)
 8001202:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <appe_Tl_Init+0x58>)
 8001206:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001208:	463b      	mov	r3, r7
 800120a:	4619      	mov	r1, r3
 800120c:	480e      	ldr	r0, [pc, #56]	; (8001248 <appe_Tl_Init+0x5c>)
 800120e:	f009 f885 	bl	800a31c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <appe_Tl_Init+0x60>)
 8001214:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <appe_Tl_Init+0x64>)
 8001218:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <appe_Tl_Init+0x68>)
 800121c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800121e:	f240 533c 	movw	r3, #1340	; 0x53c
 8001222:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001224:	f107 0308 	add.w	r3, r7, #8
 8001228:	4618      	mov	r0, r3
 800122a:	f009 faf7 	bl	800a81c <TL_MM_Init>

  TL_Enable();
 800122e:	f009 f9ad 	bl	800a58c <TL_Enable>

  return;
 8001232:	bf00      	nop
}
 8001234:	3720      	adds	r7, #32
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	0800a355 	.word	0x0800a355
 8001240:	20030734 	.word	0x20030734
 8001244:	08001259 	.word	0x08001259
 8001248:	08001271 	.word	0x08001271
 800124c:	2003094c 	.word	0x2003094c
 8001250:	20030840 	.word	0x20030840
 8001254:	200301f8 	.word	0x200301f8

08001258 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001262:	bf00      	nop
}
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	330b      	adds	r3, #11
 800127e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	881b      	ldrh	r3, [r3, #0]
 8001284:	b29b      	uxth	r3, r3
 8001286:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800128a:	2b07      	cmp	r3, #7
 800128c:	d860      	bhi.n	8001350 <APPE_SysUserEvtRx+0xe0>
 800128e:	a201      	add	r2, pc, #4	; (adr r2, 8001294 <APPE_SysUserEvtRx+0x24>)
 8001290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001294:	080012b5 	.word	0x080012b5
 8001298:	080012f7 	.word	0x080012f7
 800129c:	08001305 	.word	0x08001305
 80012a0:	08001351 	.word	0x08001351
 80012a4:	08001321 	.word	0x08001321
 80012a8:	08001331 	.word	0x08001331
 80012ac:	08001339 	.word	0x08001339
 80012b0:	08001349 	.word	0x08001349
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80012b4:	f107 030c 	add.w	r3, r7, #12
 80012b8:	4618      	mov	r0, r3
 80012ba:	f008 fde5 	bl	8009e88 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 80012be:	7b3b      	ldrb	r3, [r7, #12]
 80012c0:	4619      	mov	r1, r3
 80012c2:	7b7b      	ldrb	r3, [r7, #13]
 80012c4:	461a      	mov	r2, r3
 80012c6:	7bbb      	ldrb	r3, [r7, #14]
 80012c8:	4824      	ldr	r0, [pc, #144]	; (800135c <APPE_SysUserEvtRx+0xec>)
 80012ca:	f00b fedf 	bl	800d08c <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 80012ce:	7c3b      	ldrb	r3, [r7, #16]
 80012d0:	4619      	mov	r1, r3
 80012d2:	4823      	ldr	r0, [pc, #140]	; (8001360 <APPE_SysUserEvtRx+0xf0>)
 80012d4:	f00b feda 	bl	800d08c <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80012d8:	7dbb      	ldrb	r3, [r7, #22]
 80012da:	4619      	mov	r1, r3
 80012dc:	7dfb      	ldrb	r3, [r7, #23]
 80012de:	461a      	mov	r2, r3
 80012e0:	7e3b      	ldrb	r3, [r7, #24]
 80012e2:	4820      	ldr	r0, [pc, #128]	; (8001364 <APPE_SysUserEvtRx+0xf4>)
 80012e4:	f00b fed2 	bl	800d08c <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80012e8:	481f      	ldr	r0, [pc, #124]	; (8001368 <APPE_SysUserEvtRx+0xf8>)
 80012ea:	f00b fecf 	bl	800d08c <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f870 	bl	80013d4 <APPE_SysEvtReadyProcessing>
    break;
 80012f4:	e02d      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80012f6:	481d      	ldr	r0, [pc, #116]	; (800136c <APPE_SysUserEvtRx+0xfc>)
 80012f8:	f00b fec8 	bl	800d08c <iprintf>
    APPE_SysEvtError(pPayload);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f000 f843 	bl	8001388 <APPE_SysEvtError>
    break;
 8001302:	e026      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001304:	481a      	ldr	r0, [pc, #104]	; (8001370 <APPE_SysUserEvtRx+0x100>)
 8001306:	f00b ff2f 	bl	800d168 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 800130a:	69fb      	ldr	r3, [r7, #28]
 800130c:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800130e:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	461a      	mov	r2, r3
 8001318:	4816      	ldr	r0, [pc, #88]	; (8001374 <APPE_SysUserEvtRx+0x104>)
 800131a:	f00b feb7 	bl	800d08c <iprintf>
    break;
 800131e:	e018      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4619      	mov	r1, r3
 8001328:	4813      	ldr	r0, [pc, #76]	; (8001378 <APPE_SysUserEvtRx+0x108>)
 800132a:	f00b feaf 	bl	800d08c <iprintf>
    break;
 800132e:	e010      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001330:	4812      	ldr	r0, [pc, #72]	; (800137c <APPE_SysUserEvtRx+0x10c>)
 8001332:	f00b feab 	bl	800d08c <iprintf>
    break;
 8001336:	e00c      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4619      	mov	r1, r3
 8001340:	480f      	ldr	r0, [pc, #60]	; (8001380 <APPE_SysUserEvtRx+0x110>)
 8001342:	f00b fea3 	bl	800d08c <iprintf>
    break;
 8001346:	e004      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001348:	480e      	ldr	r0, [pc, #56]	; (8001384 <APPE_SysUserEvtRx+0x114>)
 800134a:	f00b fe9f 	bl	800d08c <iprintf>
    break;
 800134e:	e000      	b.n	8001352 <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 8001350:	bf00      	nop
  }

  return;
 8001352:	bf00      	nop
}
 8001354:	3720      	adds	r7, #32
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	0800df54 	.word	0x0800df54
 8001360:	0800df78 	.word	0x0800df78
 8001364:	0800df94 	.word	0x0800df94
 8001368:	0800dfac 	.word	0x0800dfac
 800136c:	0800dfcc 	.word	0x0800dfcc
 8001370:	0800dff0 	.word	0x0800dff0
 8001374:	0800e040 	.word	0x0800e040
 8001378:	0800e068 	.word	0x0800e068
 800137c:	0800e0a4 	.word	0x0800e0a4
 8001380:	0800e0c8 	.word	0x0800e0c8
 8001384:	0800e104 	.word	0x0800e104

08001388 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	330b      	adds	r3, #11
 8001396:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3302      	adds	r3, #2
 800139c:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	4619      	mov	r1, r3
 80013a4:	4808      	ldr	r0, [pc, #32]	; (80013c8 <APPE_SysEvtError+0x40>)
 80013a6:	f00b fe71 	bl	800d08c <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d103      	bne.n	80013ba <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 80013b2:	4806      	ldr	r0, [pc, #24]	; (80013cc <APPE_SysEvtError+0x44>)
 80013b4:	f00b fed8 	bl	800d168 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80013b8:	e003      	b.n	80013c2 <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80013ba:	4805      	ldr	r0, [pc, #20]	; (80013d0 <APPE_SysEvtError+0x48>)
 80013bc:	f00b fed4 	bl	800d168 <puts>
  return;
 80013c0:	bf00      	nop
}
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	0800e128 	.word	0x0800e128
 80013cc:	0800e158 	.word	0x0800e158
 80013d0:	0800e194 	.word	0x0800e194

080013d4 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	330b      	adds	r3, #11
 80013f8:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3302      	adds	r3, #2
 80013fe:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d128      	bne.n	800145a <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001408:	481d      	ldr	r0, [pc, #116]	; (8001480 <APPE_SysEvtReadyProcessing+0xac>)
 800140a:	f00b fead 	bl	800d168 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800140e:	f7ff fbdf 	bl	8000bd0 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001412:	230f      	movs	r3, #15
 8001414:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001416:	237f      	movs	r3, #127	; 0x7f
 8001418:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800141a:	f7ff fd81 	bl	8000f20 <LL_DBGMCU_GetRevisionID>
 800141e:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001420:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001422:	4818      	ldr	r0, [pc, #96]	; (8001484 <APPE_SysEvtReadyProcessing+0xb0>)
 8001424:	f00b fe32 	bl	800d08c <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	b29b      	uxth	r3, r3
 800142c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800142e:	f7ff fd69 	bl	8000f04 <LL_DBGMCU_GetDeviceID>
 8001432:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001434:	6a39      	ldr	r1, [r7, #32]
 8001436:	4814      	ldr	r0, [pc, #80]	; (8001488 <APPE_SysEvtReadyProcessing+0xb4>)
 8001438:	f00b fe28 	bl	800d08c <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 800143c:	6a3b      	ldr	r3, [r7, #32]
 800143e:	b29b      	uxth	r3, r3
 8001440:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	4618      	mov	r0, r3
 8001448:	f008 fd08 	bl	8009e5c <SHCI_C2_Config>

    APP_BLE_Init();
 800144c:	f00a f8a8 	bl	800b5a0 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001450:	2100      	movs	r1, #0
 8001452:	2001      	movs	r0, #1
 8001454:	f00b faea 	bl	800ca2c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001458:	e00e      	b.n	8001478 <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d106      	bne.n	8001470 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001462:	480a      	ldr	r0, [pc, #40]	; (800148c <APPE_SysEvtReadyProcessing+0xb8>)
 8001464:	f00b fe12 	bl	800d08c <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]
  return;
 800146e:	e003      	b.n	8001478 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001470:	4807      	ldr	r0, [pc, #28]	; (8001490 <APPE_SysEvtReadyProcessing+0xbc>)
 8001472:	f00b fe0b 	bl	800d08c <iprintf>
  return;
 8001476:	bf00      	nop
}
 8001478:	3728      	adds	r7, #40	; 0x28
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	0800e1cc 	.word	0x0800e1cc
 8001484:	0800e1e8 	.word	0x0800e1e8
 8001488:	0800e20c 	.word	0x0800e20c
 800148c:	0800e22c 	.word	0x0800e22c
 8001490:	0800e260 	.word	0x0800e260

08001494 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 8001498:	2000      	movs	r0, #0
 800149a:	f001 fd23 	bl	8002ee4 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 800149e:	2001      	movs	r0, #1
 80014a0:	f001 fd20 	bl	8002ee4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80014a4:	2002      	movs	r0, #2
 80014a6:	f001 fd1d 	bl	8002ee4 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 80014aa:	2001      	movs	r0, #1
 80014ac:	f001 fd54 	bl	8002f58 <BSP_LED_On>
#endif

  return;
 80014b0:	bf00      	nop
}
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <Button_Init>:

static void Button_Init( void )
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80014b8:	2101      	movs	r1, #1
 80014ba:	2000      	movs	r0, #0
 80014bc:	f001 fd80 	bl	8002fc0 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80014c0:	2101      	movs	r1, #1
 80014c2:	2001      	movs	r0, #1
 80014c4:	f001 fd7c 	bl	8002fc0 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 80014c8:	2101      	movs	r1, #1
 80014ca:	2002      	movs	r0, #2
 80014cc:	f001 fd78 	bl	8002fc0 <BSP_PB_Init>
#endif

  return;
 80014d0:	bf00      	nop
}
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014dc:	f001 fefe 	bl	80032dc <HAL_GetTick>
 80014e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ec:	d00a      	beq.n	8001504 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80014ee:	f001 ff0d 	bl	800330c <HAL_GetTickFreq>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461a      	mov	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	4413      	add	r3, r2
 80014fa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014fc:	e002      	b.n	8001504 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80014fe:	f7ff fd7f 	bl	8001000 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8001502:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001504:	f001 feea 	bl	80032dc <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	429a      	cmp	r2, r3
 8001512:	d8f4      	bhi.n	80014fe <HAL_Delay+0x2a>
  }
}
 8001514:	bf00      	nop
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001522:	f04f 30ff 	mov.w	r0, #4294967295
 8001526:	f00b fab1 	bl	800ca8c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}

0800152e <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001532:	bf00      	nop
}
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001546:	f04f 30ff 	mov.w	r0, #4294967295
 800154a:	f00b fa9f 	bl	800ca8c <UTIL_SEQ_Run>

  return;
 800154e:	bf00      	nop
}
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800155e:	2100      	movs	r1, #0
 8001560:	2040      	movs	r0, #64	; 0x40
 8001562:	f00b fbb1 	bl	800ccc8 <UTIL_SEQ_SetTask>
  return;
 8001566:	bf00      	nop
}
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001576:	2002      	movs	r0, #2
 8001578:	f00b fc12 	bl	800cda0 <UTIL_SEQ_SetEvt>
  return;
 800157c:	bf00      	nop
}
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800158c:	2002      	movs	r0, #2
 800158e:	f00b fc27 	bl	800cde0 <UTIL_SEQ_WaitEvt>
  return;
 8001592:	bf00      	nop
}
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80015a4:	88fb      	ldrh	r3, [r7, #6]
 80015a6:	2b10      	cmp	r3, #16
 80015a8:	d006      	beq.n	80015b8 <HAL_GPIO_EXTI_Callback+0x1e>
 80015aa:	2b10      	cmp	r3, #16
 80015ac:	dc0d      	bgt.n	80015ca <HAL_GPIO_EXTI_Callback+0x30>
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d005      	beq.n	80015be <HAL_GPIO_EXTI_Callback+0x24>
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d006      	beq.n	80015c4 <HAL_GPIO_EXTI_Callback+0x2a>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 80015b6:	e008      	b.n	80015ca <HAL_GPIO_EXTI_Callback+0x30>
      APP_BLE_Key_Button1_Action();
 80015b8:	f00a fafc 	bl	800bbb4 <APP_BLE_Key_Button1_Action>
      break; 
 80015bc:	e006      	b.n	80015cc <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 80015be:	f00a faff 	bl	800bbc0 <APP_BLE_Key_Button2_Action>
      break; 
 80015c2:	e003      	b.n	80015cc <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 80015c4:	f00a fb04 	bl	800bbd0 <APP_BLE_Key_Button3_Action>
      break;
 80015c8:	e000      	b.n	80015cc <HAL_GPIO_EXTI_Callback+0x32>
      break;
 80015ca:	bf00      	nop

  }
  return;
 80015cc:	bf00      	nop
}
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <RxUART_Init>:

static void RxUART_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <RxUART_Init+0x14>)
 80015da:	2201      	movs	r2, #1
 80015dc:	4903      	ldr	r1, [pc, #12]	; (80015ec <RxUART_Init+0x18>)
 80015de:	2000      	movs	r0, #0
 80015e0:	f000 ff10 	bl	8002404 <HW_UART_Receive_IT>
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	080015f1 	.word	0x080015f1
 80015ec:	20000108 	.word	0x20000108

080015f0 <RxCpltCallback>:

static void RxCpltCallback(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 80015f4:	4b15      	ldr	r3, [pc, #84]	; (800164c <RxCpltCallback+0x5c>)
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	2bff      	cmp	r3, #255	; 0xff
 80015fa:	d81e      	bhi.n	800163a <RxCpltCallback+0x4a>
  {
    if (aRxBuffer[0] == '\r')
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <RxCpltCallback+0x60>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b0d      	cmp	r3, #13
 8001602:	d10f      	bne.n	8001624 <RxCpltCallback+0x34>
    {
      APP_DBG_MSG("received %s\n", CommandString);
 8001604:	4913      	ldr	r1, [pc, #76]	; (8001654 <RxCpltCallback+0x64>)
 8001606:	4814      	ldr	r0, [pc, #80]	; (8001658 <RxCpltCallback+0x68>)
 8001608:	f00b fd40 	bl	800d08c <iprintf>

      UartCmdExecute();
 800160c:	f000 f828 	bl	8001660 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 8001610:	4b0e      	ldr	r3, [pc, #56]	; (800164c <RxCpltCallback+0x5c>)
 8001612:	2200      	movs	r2, #0
 8001614:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 8001616:	f44f 7280 	mov.w	r2, #256	; 0x100
 800161a:	2100      	movs	r1, #0
 800161c:	480d      	ldr	r0, [pc, #52]	; (8001654 <RxCpltCallback+0x64>)
 800161e:	f00b fe83 	bl	800d328 <memset>
 8001622:	e00a      	b.n	800163a <RxCpltCallback+0x4a>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <RxCpltCallback+0x5c>)
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	1c5a      	adds	r2, r3, #1
 800162a:	b291      	uxth	r1, r2
 800162c:	4a07      	ldr	r2, [pc, #28]	; (800164c <RxCpltCallback+0x5c>)
 800162e:	8011      	strh	r1, [r2, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b07      	ldr	r3, [pc, #28]	; (8001650 <RxCpltCallback+0x60>)
 8001634:	7819      	ldrb	r1, [r3, #0]
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <RxCpltCallback+0x64>)
 8001638:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <RxCpltCallback+0x6c>)
 800163c:	2201      	movs	r2, #1
 800163e:	4904      	ldr	r1, [pc, #16]	; (8001650 <RxCpltCallback+0x60>)
 8001640:	2000      	movs	r0, #0
 8001642:	f000 fedf 	bl	8002404 <HW_UART_Receive_IT>
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000210 	.word	0x20000210
 8001650:	20000108 	.word	0x20000108
 8001654:	20000110 	.word	0x20000110
 8001658:	0800e294 	.word	0x0800e294
 800165c:	080015f1 	.word	0x080015f1

08001660 <UartCmdExecute>:

static void UartCmdExecute(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 8001664:	491c      	ldr	r1, [pc, #112]	; (80016d8 <UartCmdExecute+0x78>)
 8001666:	481d      	ldr	r0, [pc, #116]	; (80016dc <UartCmdExecute+0x7c>)
 8001668:	f7fe fd8a 	bl	8000180 <strcmp>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d109      	bne.n	8001686 <UartCmdExecute+0x26>
  {
    APP_DBG_MSG("SW1 OK\n");
 8001672:	481b      	ldr	r0, [pc, #108]	; (80016e0 <UartCmdExecute+0x80>)
 8001674:	f00b fd78 	bl	800d168 <puts>
    exti_handle.Line = EXTI_LINE_4;
 8001678:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <UartCmdExecute+0x84>)
 800167a:	4a1b      	ldr	r2, [pc, #108]	; (80016e8 <UartCmdExecute+0x88>)
 800167c:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 800167e:	4819      	ldr	r0, [pc, #100]	; (80016e4 <UartCmdExecute+0x84>)
 8001680:	f002 fb68 	bl	8003d54 <HAL_EXTI_GenerateSWI>
  }
  else
  {
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
  }
}
 8001684:	e026      	b.n	80016d4 <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 8001686:	4919      	ldr	r1, [pc, #100]	; (80016ec <UartCmdExecute+0x8c>)
 8001688:	4814      	ldr	r0, [pc, #80]	; (80016dc <UartCmdExecute+0x7c>)
 800168a:	f7fe fd79 	bl	8000180 <strcmp>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10a      	bne.n	80016aa <UartCmdExecute+0x4a>
    APP_DBG_MSG("SW2 OK\n");
 8001694:	4816      	ldr	r0, [pc, #88]	; (80016f0 <UartCmdExecute+0x90>)
 8001696:	f00b fd67 	bl	800d168 <puts>
    exti_handle.Line = EXTI_LINE_0;
 800169a:	4b12      	ldr	r3, [pc, #72]	; (80016e4 <UartCmdExecute+0x84>)
 800169c:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 80016a0:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80016a2:	4810      	ldr	r0, [pc, #64]	; (80016e4 <UartCmdExecute+0x84>)
 80016a4:	f002 fb56 	bl	8003d54 <HAL_EXTI_GenerateSWI>
}
 80016a8:	e014      	b.n	80016d4 <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW3") == 0)
 80016aa:	4912      	ldr	r1, [pc, #72]	; (80016f4 <UartCmdExecute+0x94>)
 80016ac:	480b      	ldr	r0, [pc, #44]	; (80016dc <UartCmdExecute+0x7c>)
 80016ae:	f7fe fd67 	bl	8000180 <strcmp>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d109      	bne.n	80016cc <UartCmdExecute+0x6c>
    APP_DBG_MSG("SW3 OK\n");
 80016b8:	480f      	ldr	r0, [pc, #60]	; (80016f8 <UartCmdExecute+0x98>)
 80016ba:	f00b fd55 	bl	800d168 <puts>
    exti_handle.Line = EXTI_LINE_1;
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <UartCmdExecute+0x84>)
 80016c0:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <UartCmdExecute+0x9c>)
 80016c2:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80016c4:	4807      	ldr	r0, [pc, #28]	; (80016e4 <UartCmdExecute+0x84>)
 80016c6:	f002 fb45 	bl	8003d54 <HAL_EXTI_GenerateSWI>
}
 80016ca:	e003      	b.n	80016d4 <UartCmdExecute+0x74>
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
 80016cc:	4903      	ldr	r1, [pc, #12]	; (80016dc <UartCmdExecute+0x7c>)
 80016ce:	480c      	ldr	r0, [pc, #48]	; (8001700 <UartCmdExecute+0xa0>)
 80016d0:	f00b fcdc 	bl	800d08c <iprintf>
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	0800e2a4 	.word	0x0800e2a4
 80016dc:	20000110 	.word	0x20000110
 80016e0:	0800e2a8 	.word	0x0800e2a8
 80016e4:	20000100 	.word	0x20000100
 80016e8:	16000004 	.word	0x16000004
 80016ec:	0800e2b0 	.word	0x0800e2b0
 80016f0:	0800e2b4 	.word	0x0800e2b4
 80016f4:	0800e2bc 	.word	0x0800e2bc
 80016f8:	0800e2c0 	.word	0x0800e2c0
 80016fc:	16000001 	.word	0x16000001
 8001700:	0800e2c8 	.word	0x0800e2c8

08001704 <LL_EXTI_EnableIT_0_31>:
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <LL_EXTI_EnableIT_0_31+0x24>)
 800170e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001712:	4905      	ldr	r1, [pc, #20]	; (8001728 <LL_EXTI_EnableIT_0_31+0x24>)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4313      	orrs	r3, r2
 8001718:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	58000800 	.word	0x58000800

0800172c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4904      	ldr	r1, [pc, #16]	; (800174c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4313      	orrs	r3, r2
 800173e:	600b      	str	r3, [r1, #0]

}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	58000800 	.word	0x58000800

08001750 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <ReadRtcSsrValue+0x3c>)
 8001758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800175a:	b29b      	uxth	r3, r3
 800175c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <ReadRtcSsrValue+0x3c>)
 8001760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001762:	b29b      	uxth	r3, r3
 8001764:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001766:	e005      	b.n	8001774 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800176c:	4b07      	ldr	r3, [pc, #28]	; (800178c <ReadRtcSsrValue+0x3c>)
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001770:	b29b      	uxth	r3, r3
 8001772:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d1f5      	bne.n	8001768 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 800177c:	683b      	ldr	r3, [r7, #0]
}
 800177e:	4618      	mov	r0, r3
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40002800 	.word	0x40002800

08001790 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	460a      	mov	r2, r1
 800179a:	71fb      	strb	r3, [r7, #7]
 800179c:	4613      	mov	r3, r2
 800179e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80017a0:	79ba      	ldrb	r2, [r7, #6]
 80017a2:	491d      	ldr	r1, [pc, #116]	; (8001818 <LinkTimerAfter+0x88>)
 80017a4:	4613      	mov	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4413      	add	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	440b      	add	r3, r1
 80017ae:	3315      	adds	r3, #21
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
 80017b6:	2b06      	cmp	r3, #6
 80017b8:	d009      	beq.n	80017ce <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80017ba:	7bfa      	ldrb	r2, [r7, #15]
 80017bc:	4916      	ldr	r1, [pc, #88]	; (8001818 <LinkTimerAfter+0x88>)
 80017be:	4613      	mov	r3, r2
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	4413      	add	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	440b      	add	r3, r1
 80017c8:	3314      	adds	r3, #20
 80017ca:	79fa      	ldrb	r2, [r7, #7]
 80017cc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80017ce:	79fa      	ldrb	r2, [r7, #7]
 80017d0:	4911      	ldr	r1, [pc, #68]	; (8001818 <LinkTimerAfter+0x88>)
 80017d2:	4613      	mov	r3, r2
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4413      	add	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	440b      	add	r3, r1
 80017dc:	3315      	adds	r3, #21
 80017de:	7bfa      	ldrb	r2, [r7, #15]
 80017e0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80017e2:	79fa      	ldrb	r2, [r7, #7]
 80017e4:	490c      	ldr	r1, [pc, #48]	; (8001818 <LinkTimerAfter+0x88>)
 80017e6:	4613      	mov	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	440b      	add	r3, r1
 80017f0:	3314      	adds	r3, #20
 80017f2:	79ba      	ldrb	r2, [r7, #6]
 80017f4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80017f6:	79ba      	ldrb	r2, [r7, #6]
 80017f8:	4907      	ldr	r1, [pc, #28]	; (8001818 <LinkTimerAfter+0x88>)
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	440b      	add	r3, r1
 8001804:	3315      	adds	r3, #21
 8001806:	79fa      	ldrb	r2, [r7, #7]
 8001808:	701a      	strb	r2, [r3, #0]

  return;
 800180a:	bf00      	nop
}
 800180c:	3714      	adds	r7, #20
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000214 	.word	0x20000214

0800181c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	460a      	mov	r2, r1
 8001826:	71fb      	strb	r3, [r7, #7]
 8001828:	4613      	mov	r3, r2
 800182a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 800182c:	4b29      	ldr	r3, [pc, #164]	; (80018d4 <LinkTimerBefore+0xb8>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	b2db      	uxtb	r3, r3
 8001832:	79ba      	ldrb	r2, [r7, #6]
 8001834:	429a      	cmp	r2, r3
 8001836:	d032      	beq.n	800189e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001838:	79ba      	ldrb	r2, [r7, #6]
 800183a:	4927      	ldr	r1, [pc, #156]	; (80018d8 <LinkTimerBefore+0xbc>)
 800183c:	4613      	mov	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	4413      	add	r3, r2
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	440b      	add	r3, r1
 8001846:	3314      	adds	r3, #20
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 800184c:	7bfa      	ldrb	r2, [r7, #15]
 800184e:	4922      	ldr	r1, [pc, #136]	; (80018d8 <LinkTimerBefore+0xbc>)
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	3315      	adds	r3, #21
 800185c:	79fa      	ldrb	r2, [r7, #7]
 800185e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001860:	79fa      	ldrb	r2, [r7, #7]
 8001862:	491d      	ldr	r1, [pc, #116]	; (80018d8 <LinkTimerBefore+0xbc>)
 8001864:	4613      	mov	r3, r2
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4413      	add	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	440b      	add	r3, r1
 800186e:	3315      	adds	r3, #21
 8001870:	79ba      	ldrb	r2, [r7, #6]
 8001872:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001874:	79fa      	ldrb	r2, [r7, #7]
 8001876:	4918      	ldr	r1, [pc, #96]	; (80018d8 <LinkTimerBefore+0xbc>)
 8001878:	4613      	mov	r3, r2
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	4413      	add	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	440b      	add	r3, r1
 8001882:	3314      	adds	r3, #20
 8001884:	7bfa      	ldrb	r2, [r7, #15]
 8001886:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001888:	79ba      	ldrb	r2, [r7, #6]
 800188a:	4913      	ldr	r1, [pc, #76]	; (80018d8 <LinkTimerBefore+0xbc>)
 800188c:	4613      	mov	r3, r2
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4413      	add	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	440b      	add	r3, r1
 8001896:	3314      	adds	r3, #20
 8001898:	79fa      	ldrb	r2, [r7, #7]
 800189a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800189c:	e014      	b.n	80018c8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800189e:	79fa      	ldrb	r2, [r7, #7]
 80018a0:	490d      	ldr	r1, [pc, #52]	; (80018d8 <LinkTimerBefore+0xbc>)
 80018a2:	4613      	mov	r3, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4413      	add	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	440b      	add	r3, r1
 80018ac:	3315      	adds	r3, #21
 80018ae:	79ba      	ldrb	r2, [r7, #6]
 80018b0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80018b2:	79ba      	ldrb	r2, [r7, #6]
 80018b4:	4908      	ldr	r1, [pc, #32]	; (80018d8 <LinkTimerBefore+0xbc>)
 80018b6:	4613      	mov	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4413      	add	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	440b      	add	r3, r1
 80018c0:	3314      	adds	r3, #20
 80018c2:	79fa      	ldrb	r2, [r7, #7]
 80018c4:	701a      	strb	r2, [r3, #0]
  return;
 80018c6:	bf00      	nop
}
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	200002a4 	.word	0x200002a4
 80018d8:	20000214 	.word	0x20000214

080018dc <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018e6:	4b4e      	ldr	r3, [pc, #312]	; (8001a20 <linkTimer+0x144>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2b06      	cmp	r3, #6
 80018ee:	d118      	bne.n	8001922 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80018f0:	4b4b      	ldr	r3, [pc, #300]	; (8001a20 <linkTimer+0x144>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	4b4b      	ldr	r3, [pc, #300]	; (8001a24 <linkTimer+0x148>)
 80018f8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80018fa:	4a49      	ldr	r2, [pc, #292]	; (8001a20 <linkTimer+0x144>)
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001900:	79fa      	ldrb	r2, [r7, #7]
 8001902:	4949      	ldr	r1, [pc, #292]	; (8001a28 <linkTimer+0x14c>)
 8001904:	4613      	mov	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	4413      	add	r3, r2
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	440b      	add	r3, r1
 800190e:	3315      	adds	r3, #21
 8001910:	2206      	movs	r2, #6
 8001912:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001914:	4b45      	ldr	r3, [pc, #276]	; (8001a2c <linkTimer+0x150>)
 8001916:	f04f 32ff 	mov.w	r2, #4294967295
 800191a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	81fb      	strh	r3, [r7, #14]
 8001920:	e078      	b.n	8001a14 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001922:	f000 f909 	bl	8001b38 <ReturnTimeElapsed>
 8001926:	4603      	mov	r3, r0
 8001928:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800192a:	79fa      	ldrb	r2, [r7, #7]
 800192c:	493e      	ldr	r1, [pc, #248]	; (8001a28 <linkTimer+0x14c>)
 800192e:	4613      	mov	r3, r2
 8001930:	005b      	lsls	r3, r3, #1
 8001932:	4413      	add	r3, r2
 8001934:	00db      	lsls	r3, r3, #3
 8001936:	440b      	add	r3, r1
 8001938:	3308      	adds	r3, #8
 800193a:	6819      	ldr	r1, [r3, #0]
 800193c:	89fb      	ldrh	r3, [r7, #14]
 800193e:	79fa      	ldrb	r2, [r7, #7]
 8001940:	4419      	add	r1, r3
 8001942:	4839      	ldr	r0, [pc, #228]	; (8001a28 <linkTimer+0x14c>)
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	4403      	add	r3, r0
 800194e:	3308      	adds	r3, #8
 8001950:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001952:	79fa      	ldrb	r2, [r7, #7]
 8001954:	4934      	ldr	r1, [pc, #208]	; (8001a28 <linkTimer+0x14c>)
 8001956:	4613      	mov	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	440b      	add	r3, r1
 8001960:	3308      	adds	r3, #8
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001966:	4b2e      	ldr	r3, [pc, #184]	; (8001a20 <linkTimer+0x144>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	b2db      	uxtb	r3, r3
 800196c:	4619      	mov	r1, r3
 800196e:	4a2e      	ldr	r2, [pc, #184]	; (8001a28 <linkTimer+0x14c>)
 8001970:	460b      	mov	r3, r1
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	440b      	add	r3, r1
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4413      	add	r3, r2
 800197a:	3308      	adds	r3, #8
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	429a      	cmp	r2, r3
 8001982:	d337      	bcc.n	80019f4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001984:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <linkTimer+0x144>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800198a:	7b7a      	ldrb	r2, [r7, #13]
 800198c:	4926      	ldr	r1, [pc, #152]	; (8001a28 <linkTimer+0x14c>)
 800198e:	4613      	mov	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	4413      	add	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	440b      	add	r3, r1
 8001998:	3315      	adds	r3, #21
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800199e:	e013      	b.n	80019c8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80019a0:	7b7a      	ldrb	r2, [r7, #13]
 80019a2:	4921      	ldr	r1, [pc, #132]	; (8001a28 <linkTimer+0x14c>)
 80019a4:	4613      	mov	r3, r2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	440b      	add	r3, r1
 80019ae:	3315      	adds	r3, #21
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80019b4:	7b7a      	ldrb	r2, [r7, #13]
 80019b6:	491c      	ldr	r1, [pc, #112]	; (8001a28 <linkTimer+0x14c>)
 80019b8:	4613      	mov	r3, r2
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	4413      	add	r3, r2
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	440b      	add	r3, r1
 80019c2:	3315      	adds	r3, #21
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80019c8:	7b3b      	ldrb	r3, [r7, #12]
 80019ca:	2b06      	cmp	r3, #6
 80019cc:	d00b      	beq.n	80019e6 <linkTimer+0x10a>
 80019ce:	7b3a      	ldrb	r2, [r7, #12]
 80019d0:	4915      	ldr	r1, [pc, #84]	; (8001a28 <linkTimer+0x14c>)
 80019d2:	4613      	mov	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	440b      	add	r3, r1
 80019dc:	3308      	adds	r3, #8
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d2dc      	bcs.n	80019a0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80019e6:	7b7a      	ldrb	r2, [r7, #13]
 80019e8:	79fb      	ldrb	r3, [r7, #7]
 80019ea:	4611      	mov	r1, r2
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fecf 	bl	8001790 <LinkTimerAfter>
 80019f2:	e00f      	b.n	8001a14 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <linkTimer+0x144>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	4611      	mov	r1, r2
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff ff0c 	bl	800181c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <linkTimer+0x144>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <linkTimer+0x148>)
 8001a0c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001a0e:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <linkTimer+0x144>)
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001a14:	89fb      	ldrh	r3, [r7, #14]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200002a4 	.word	0x200002a4
 8001a24:	200002a5 	.word	0x200002a5
 8001a28:	20000214 	.word	0x20000214
 8001a2c:	200002a8 	.word	0x200002a8

08001a30 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	460a      	mov	r2, r1
 8001a3a:	71fb      	strb	r3, [r7, #7]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001a40:	4b39      	ldr	r3, [pc, #228]	; (8001b28 <UnlinkTimer+0xf8>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	79fa      	ldrb	r2, [r7, #7]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d111      	bne.n	8001a70 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001a4c:	4b36      	ldr	r3, [pc, #216]	; (8001b28 <UnlinkTimer+0xf8>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4b36      	ldr	r3, [pc, #216]	; (8001b2c <UnlinkTimer+0xfc>)
 8001a54:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001a56:	79fa      	ldrb	r2, [r7, #7]
 8001a58:	4935      	ldr	r1, [pc, #212]	; (8001b30 <UnlinkTimer+0x100>)
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	440b      	add	r3, r1
 8001a64:	3315      	adds	r3, #21
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4b2f      	ldr	r3, [pc, #188]	; (8001b28 <UnlinkTimer+0xf8>)
 8001a6c:	701a      	strb	r2, [r3, #0]
 8001a6e:	e03e      	b.n	8001aee <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001a70:	79fa      	ldrb	r2, [r7, #7]
 8001a72:	492f      	ldr	r1, [pc, #188]	; (8001b30 <UnlinkTimer+0x100>)
 8001a74:	4613      	mov	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4413      	add	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	440b      	add	r3, r1
 8001a7e:	3314      	adds	r3, #20
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001a84:	79fa      	ldrb	r2, [r7, #7]
 8001a86:	492a      	ldr	r1, [pc, #168]	; (8001b30 <UnlinkTimer+0x100>)
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	440b      	add	r3, r1
 8001a92:	3315      	adds	r3, #21
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001a98:	79f9      	ldrb	r1, [r7, #7]
 8001a9a:	7bfa      	ldrb	r2, [r7, #15]
 8001a9c:	4824      	ldr	r0, [pc, #144]	; (8001b30 <UnlinkTimer+0x100>)
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	440b      	add	r3, r1
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	4403      	add	r3, r0
 8001aa8:	3315      	adds	r3, #21
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	b2d8      	uxtb	r0, r3
 8001aae:	4920      	ldr	r1, [pc, #128]	; (8001b30 <UnlinkTimer+0x100>)
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4413      	add	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	440b      	add	r3, r1
 8001aba:	3315      	adds	r3, #21
 8001abc:	4602      	mov	r2, r0
 8001abe:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001ac0:	7bbb      	ldrb	r3, [r7, #14]
 8001ac2:	2b06      	cmp	r3, #6
 8001ac4:	d013      	beq.n	8001aee <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001ac6:	79f9      	ldrb	r1, [r7, #7]
 8001ac8:	7bba      	ldrb	r2, [r7, #14]
 8001aca:	4819      	ldr	r0, [pc, #100]	; (8001b30 <UnlinkTimer+0x100>)
 8001acc:	460b      	mov	r3, r1
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	440b      	add	r3, r1
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4403      	add	r3, r0
 8001ad6:	3314      	adds	r3, #20
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	b2d8      	uxtb	r0, r3
 8001adc:	4914      	ldr	r1, [pc, #80]	; (8001b30 <UnlinkTimer+0x100>)
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	440b      	add	r3, r1
 8001ae8:	3314      	adds	r3, #20
 8001aea:	4602      	mov	r2, r0
 8001aec:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001aee:	79fa      	ldrb	r2, [r7, #7]
 8001af0:	490f      	ldr	r1, [pc, #60]	; (8001b30 <UnlinkTimer+0x100>)
 8001af2:	4613      	mov	r3, r2
 8001af4:	005b      	lsls	r3, r3, #1
 8001af6:	4413      	add	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	440b      	add	r3, r1
 8001afc:	330c      	adds	r3, #12
 8001afe:	2201      	movs	r2, #1
 8001b00:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <UnlinkTimer+0xf8>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b06      	cmp	r3, #6
 8001b0a:	d107      	bne.n	8001b1c <UnlinkTimer+0xec>
 8001b0c:	79bb      	ldrb	r3, [r7, #6]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d104      	bne.n	8001b1c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <UnlinkTimer+0x104>)
 8001b14:	f04f 32ff 	mov.w	r2, #4294967295
 8001b18:	601a      	str	r2, [r3, #0]
  }

  return;
 8001b1a:	bf00      	nop
 8001b1c:	bf00      	nop
}
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	200002a4 	.word	0x200002a4
 8001b2c:	200002a5 	.word	0x200002a5
 8001b30:	20000214 	.word	0x20000214
 8001b34:	200002a8 	.word	0x200002a8

08001b38 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001b3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <ReturnTimeElapsed+0x70>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b46:	d026      	beq.n	8001b96 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001b48:	f7ff fe02 	bl	8001750 <ReadRtcSsrValue>
 8001b4c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001b4e:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <ReturnTimeElapsed+0x70>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d805      	bhi.n	8001b64 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001b58:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <ReturnTimeElapsed+0x70>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	e00a      	b.n	8001b7a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001b64:	4b11      	ldr	r3, [pc, #68]	; (8001bac <ReturnTimeElapsed+0x74>)
 8001b66:	881b      	ldrh	r3, [r3, #0]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001b70:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <ReturnTimeElapsed+0x70>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	; (8001bb0 <ReturnTimeElapsed+0x78>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	fb02 f303 	mul.w	r3, r2, r3
 8001b86:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001b88:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <ReturnTimeElapsed+0x7c>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	40d3      	lsrs	r3, r2
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	e001      	b.n	8001b9a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	b29b      	uxth	r3, r3
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200002a8 	.word	0x200002a8
 8001bac:	200002b0 	.word	0x200002b0
 8001bb0:	200002ae 	.word	0x200002ae
 8001bb4:	200002ad 	.word	0x200002ad

08001bb8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001bc2:	88fb      	ldrh	r3, [r7, #6]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d108      	bne.n	8001bda <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001bc8:	f7ff fdc2 	bl	8001750 <ReadRtcSsrValue>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4a21      	ldr	r2, [pc, #132]	; (8001c54 <RestartWakeupCounter+0x9c>)
 8001bd0:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001bd2:	2003      	movs	r0, #3
 8001bd4:	f001 fd2f 	bl	8003636 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001bd8:	e039      	b.n	8001c4e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001bda:	88fb      	ldrh	r3, [r7, #6]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d803      	bhi.n	8001be8 <RestartWakeupCounter+0x30>
 8001be0:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <RestartWakeupCounter+0xa0>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d002      	beq.n	8001bee <RestartWakeupCounter+0x36>
      Value -= 1;
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001bee:	bf00      	nop
 8001bf0:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <RestartWakeupCounter+0xa4>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f8      	beq.n	8001bf0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001bfe:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <RestartWakeupCounter+0xa4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <RestartWakeupCounter+0xa4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001c0e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <RestartWakeupCounter+0xa8>)
 8001c12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c16:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001c18:	2003      	movs	r0, #3
 8001c1a:	f001 fd1a 	bl	8003652 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <RestartWakeupCounter+0xac>)
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	0c1b      	lsrs	r3, r3, #16
 8001c24:	041b      	lsls	r3, r3, #16
 8001c26:	88fa      	ldrh	r2, [r7, #6]
 8001c28:	490e      	ldr	r1, [pc, #56]	; (8001c64 <RestartWakeupCounter+0xac>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001c2e:	f7ff fd8f 	bl	8001750 <ReadRtcSsrValue>
 8001c32:	4603      	mov	r3, r0
 8001c34:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <RestartWakeupCounter+0x9c>)
 8001c36:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001c38:	4b08      	ldr	r3, [pc, #32]	; (8001c5c <RestartWakeupCounter+0xa4>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <RestartWakeupCounter+0xa4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c46:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001c48:	f3af 8000 	nop.w
  return ;
 8001c4c:	bf00      	nop
}
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	200002a8 	.word	0x200002a8
 8001c58:	200002ad 	.word	0x200002ad
 8001c5c:	200004fc 	.word	0x200004fc
 8001c60:	58000800 	.word	0x58000800
 8001c64:	40002800 	.word	0x40002800

08001c68 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001c6e:	4b45      	ldr	r3, [pc, #276]	; (8001d84 <RescheduleTimerList+0x11c>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c7a:	d107      	bne.n	8001c8c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001c7c:	bf00      	nop
 8001c7e:	4b42      	ldr	r3, [pc, #264]	; (8001d88 <RescheduleTimerList+0x120>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1f8      	bne.n	8001c7e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001c8c:	4b3e      	ldr	r3, [pc, #248]	; (8001d88 <RescheduleTimerList+0x120>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	4b3d      	ldr	r3, [pc, #244]	; (8001d88 <RescheduleTimerList+0x120>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c9a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001c9c:	4b3b      	ldr	r3, [pc, #236]	; (8001d8c <RescheduleTimerList+0x124>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001ca2:	7bfa      	ldrb	r2, [r7, #15]
 8001ca4:	493a      	ldr	r1, [pc, #232]	; (8001d90 <RescheduleTimerList+0x128>)
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	440b      	add	r3, r1
 8001cb0:	3308      	adds	r3, #8
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001cb6:	f7ff ff3f 	bl	8001b38 <ReturnTimeElapsed>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d205      	bcs.n	8001cd2 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001cca:	4b32      	ldr	r3, [pc, #200]	; (8001d94 <RescheduleTimerList+0x12c>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	701a      	strb	r2, [r3, #0]
 8001cd0:	e04d      	b.n	8001d6e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	4a30      	ldr	r2, [pc, #192]	; (8001d98 <RescheduleTimerList+0x130>)
 8001cd6:	8812      	ldrh	r2, [r2, #0]
 8001cd8:	b292      	uxth	r2, r2
 8001cda:	4413      	add	r3, r2
 8001cdc:	461a      	mov	r2, r3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d906      	bls.n	8001cf2 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001ce4:	4b2c      	ldr	r3, [pc, #176]	; (8001d98 <RescheduleTimerList+0x130>)
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001cea:	4b2a      	ldr	r3, [pc, #168]	; (8001d94 <RescheduleTimerList+0x12c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]
 8001cf0:	e03d      	b.n	8001d6e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001cfc:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <RescheduleTimerList+0x12c>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d02:	e034      	b.n	8001d6e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001d04:	7bfa      	ldrb	r2, [r7, #15]
 8001d06:	4922      	ldr	r1, [pc, #136]	; (8001d90 <RescheduleTimerList+0x128>)
 8001d08:	4613      	mov	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4413      	add	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	440b      	add	r3, r1
 8001d12:	3308      	adds	r3, #8
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d20a      	bcs.n	8001d32 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001d1c:	7bfa      	ldrb	r2, [r7, #15]
 8001d1e:	491c      	ldr	r1, [pc, #112]	; (8001d90 <RescheduleTimerList+0x128>)
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	440b      	add	r3, r1
 8001d2a:	3308      	adds	r3, #8
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	e013      	b.n	8001d5a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001d32:	7bfa      	ldrb	r2, [r7, #15]
 8001d34:	4916      	ldr	r1, [pc, #88]	; (8001d90 <RescheduleTimerList+0x128>)
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	440b      	add	r3, r1
 8001d40:	3308      	adds	r3, #8
 8001d42:	6819      	ldr	r1, [r3, #0]
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	7bfa      	ldrb	r2, [r7, #15]
 8001d48:	1ac9      	subs	r1, r1, r3
 8001d4a:	4811      	ldr	r0, [pc, #68]	; (8001d90 <RescheduleTimerList+0x128>)
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4413      	add	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4403      	add	r3, r0
 8001d56:	3308      	adds	r3, #8
 8001d58:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001d5a:	7bfa      	ldrb	r2, [r7, #15]
 8001d5c:	490c      	ldr	r1, [pc, #48]	; (8001d90 <RescheduleTimerList+0x128>)
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	440b      	add	r3, r1
 8001d68:	3315      	adds	r3, #21
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	2b06      	cmp	r3, #6
 8001d72:	d1c7      	bne.n	8001d04 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001d74:	89bb      	ldrh	r3, [r7, #12]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff ff1e 	bl	8001bb8 <RestartWakeupCounter>

  return ;
 8001d7c:	bf00      	nop
}
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40002800 	.word	0x40002800
 8001d88:	200004fc 	.word	0x200004fc
 8001d8c:	200002a4 	.word	0x200002a4
 8001d90:	20000214 	.word	0x20000214
 8001d94:	200002ac 	.word	0x200002ac
 8001d98:	200002b2 	.word	0x200002b2

08001d9c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001da2:	f3ef 8310 	mrs	r3, PRIMASK
 8001da6:	617b      	str	r3, [r7, #20]
  return(result);
 8001da8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001dac:	b672      	cpsid	i
}
 8001dae:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001db0:	4b59      	ldr	r3, [pc, #356]	; (8001f18 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	22ca      	movs	r2, #202	; 0xca
 8001db6:	625a      	str	r2, [r3, #36]	; 0x24
 8001db8:	4b57      	ldr	r3, [pc, #348]	; (8001f18 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2253      	movs	r2, #83	; 0x53
 8001dbe:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001dc0:	4b55      	ldr	r3, [pc, #340]	; (8001f18 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	4b54      	ldr	r3, [pc, #336]	; (8001f18 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dce:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001dd0:	4b52      	ldr	r3, [pc, #328]	; (8001f1c <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001dd8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ddc:	4950      	ldr	r1, [pc, #320]	; (8001f20 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001dde:	4613      	mov	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4413      	add	r3, r2
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	440b      	add	r3, r1
 8001de8:	330c      	adds	r3, #12
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d16e      	bne.n	8001ed0 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001df2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001df6:	494a      	ldr	r1, [pc, #296]	; (8001f20 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001df8:	4613      	mov	r3, r2
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	00db      	lsls	r3, r3, #3
 8001e00:	440b      	add	r3, r1
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001e06:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e0a:	4945      	ldr	r1, [pc, #276]	; (8001f20 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	440b      	add	r3, r1
 8001e16:	3310      	adds	r3, #16
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001e1c:	4b41      	ldr	r3, [pc, #260]	; (8001f24 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d04c      	beq.n	8001ec0 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001e26:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e2a:	493d      	ldr	r1, [pc, #244]	; (8001f20 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	4413      	add	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	440b      	add	r3, r1
 8001e36:	330d      	adds	r3, #13
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d124      	bne.n	8001e8a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001e40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e44:	2101      	movs	r1, #1
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fdf2 	bl	8001a30 <UnlinkTimer>
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	f383 8810 	msr	PRIMASK, r3
}
 8001e56:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001e58:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001e5c:	4930      	ldr	r1, [pc, #192]	; (8001f20 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	440b      	add	r3, r1
 8001e68:	3304      	adds	r3, #4
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e70:	4611      	mov	r1, r2
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 fa32 	bl	80022dc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001e78:	4b27      	ldr	r3, [pc, #156]	; (8001f18 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	22ca      	movs	r2, #202	; 0xca
 8001e7e:	625a      	str	r2, [r3, #36]	; 0x24
 8001e80:	4b25      	ldr	r3, [pc, #148]	; (8001f18 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2253      	movs	r2, #83	; 0x53
 8001e86:	625a      	str	r2, [r3, #36]	; 0x24
 8001e88:	e012      	b.n	8001eb0 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f383 8810 	msr	PRIMASK, r3
}
 8001e94:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001e96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f99a 	bl	80021d4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001ea0:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	22ca      	movs	r2, #202	; 0xca
 8001ea6:	625a      	str	r2, [r3, #36]	; 0x24
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2253      	movs	r2, #83	; 0x53
 8001eae:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001eb0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	69b8      	ldr	r0, [r7, #24]
 8001eba:	f000 fa95 	bl	80023e8 <HW_TS_RTC_Int_AppNot>
 8001ebe:	e022      	b.n	8001f06 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001ec0:	f7ff fed2 	bl	8001c68 <RescheduleTimerList>
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	f383 8810 	msr	PRIMASK, r3
}
 8001ece:	e01a      	b.n	8001f06 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001ed0:	bf00      	nop
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f8      	beq.n	8001ed2 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001ee0:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001ef0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001ef2:	4b0d      	ldr	r3, [pc, #52]	; (8001f28 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001ef4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f383 8810 	msr	PRIMASK, r3
}
 8001f04:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	22ff      	movs	r2, #255	; 0xff
 8001f0c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8001f0e:	bf00      	nop
}
 8001f10:	3728      	adds	r7, #40	; 0x28
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	200004fc 	.word	0x200004fc
 8001f1c:	200002a4 	.word	0x200002a4
 8001f20:	20000214 	.word	0x20000214
 8001f24:	200002ac 	.word	0x200002ac
 8001f28:	58000800 	.word	0x58000800

08001f2c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b088      	sub	sp, #32
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	6039      	str	r1, [r7, #0]
 8001f36:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f38:	4b5e      	ldr	r3, [pc, #376]	; (80020b4 <HW_TS_Init+0x188>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	22ca      	movs	r2, #202	; 0xca
 8001f3e:	625a      	str	r2, [r3, #36]	; 0x24
 8001f40:	4b5c      	ldr	r3, [pc, #368]	; (80020b4 <HW_TS_Init+0x188>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2253      	movs	r2, #83	; 0x53
 8001f46:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001f48:	4b5b      	ldr	r3, [pc, #364]	; (80020b8 <HW_TS_Init+0x18c>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	4a5a      	ldr	r2, [pc, #360]	; (80020b8 <HW_TS_Init+0x18c>)
 8001f4e:	f043 0320 	orr.w	r3, r3, #32
 8001f52:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001f54:	4b58      	ldr	r3, [pc, #352]	; (80020b8 <HW_TS_Init+0x18c>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	f003 0307 	and.w	r3, r3, #7
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	f1c3 0304 	rsb	r3, r3, #4
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	4b55      	ldr	r3, [pc, #340]	; (80020bc <HW_TS_Init+0x190>)
 8001f68:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001f6a:	4b53      	ldr	r3, [pc, #332]	; (80020b8 <HW_TS_Init+0x18c>)
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001f72:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001f76:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	fa92 f2a2 	rbit	r2, r2
 8001f7e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	2a00      	cmp	r2, #0
 8001f88:	d101      	bne.n	8001f8e <HW_TS_Init+0x62>
  {
    return 32U;
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	e003      	b.n	8001f96 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	fab2 f282 	clz	r2, r2
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	40d3      	lsrs	r3, r2
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4b48      	ldr	r3, [pc, #288]	; (80020c0 <HW_TS_Init+0x194>)
 8001fa0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001fa2:	4b45      	ldr	r3, [pc, #276]	; (80020b8 <HW_TS_Init+0x18c>)
 8001fa4:	691b      	ldr	r3, [r3, #16]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	3301      	adds	r3, #1
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	4b44      	ldr	r3, [pc, #272]	; (80020c4 <HW_TS_Init+0x198>)
 8001fb4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001fb6:	4b43      	ldr	r3, [pc, #268]	; (80020c4 <HW_TS_Init+0x198>)
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	4a40      	ldr	r2, [pc, #256]	; (80020c0 <HW_TS_Init+0x194>)
 8001fbe:	7812      	ldrb	r2, [r2, #0]
 8001fc0:	fb02 f303 	mul.w	r3, r2, r3
 8001fc4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001fc8:	4a3c      	ldr	r2, [pc, #240]	; (80020bc <HW_TS_Init+0x190>)
 8001fca:	7812      	ldrb	r2, [r2, #0]
 8001fcc:	40d3      	lsrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d904      	bls.n	8001fe4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001fda:	4b3b      	ldr	r3, [pc, #236]	; (80020c8 <HW_TS_Init+0x19c>)
 8001fdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fe0:	801a      	strh	r2, [r3, #0]
 8001fe2:	e003      	b.n	8001fec <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	4b37      	ldr	r3, [pc, #220]	; (80020c8 <HW_TS_Init+0x19c>)
 8001fea:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001fec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001ff0:	f7ff fb9c 	bl	800172c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001ff4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001ff8:	f7ff fb84 	bl	8001704 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d13d      	bne.n	800207e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002002:	4b32      	ldr	r3, [pc, #200]	; (80020cc <HW_TS_Init+0x1a0>)
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002008:	4b31      	ldr	r3, [pc, #196]	; (80020d0 <HW_TS_Init+0x1a4>)
 800200a:	f04f 32ff 	mov.w	r2, #4294967295
 800200e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002010:	2300      	movs	r3, #0
 8002012:	77fb      	strb	r3, [r7, #31]
 8002014:	e00c      	b.n	8002030 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002016:	7ffa      	ldrb	r2, [r7, #31]
 8002018:	492e      	ldr	r1, [pc, #184]	; (80020d4 <HW_TS_Init+0x1a8>)
 800201a:	4613      	mov	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4413      	add	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	440b      	add	r3, r1
 8002024:	330c      	adds	r3, #12
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800202a:	7ffb      	ldrb	r3, [r7, #31]
 800202c:	3301      	adds	r3, #1
 800202e:	77fb      	strb	r3, [r7, #31]
 8002030:	7ffb      	ldrb	r3, [r7, #31]
 8002032:	2b05      	cmp	r3, #5
 8002034:	d9ef      	bls.n	8002016 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002036:	4b28      	ldr	r3, [pc, #160]	; (80020d8 <HW_TS_Init+0x1ac>)
 8002038:	2206      	movs	r2, #6
 800203a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 800203c:	4b1d      	ldr	r3, [pc, #116]	; (80020b4 <HW_TS_Init+0x188>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <HW_TS_Init+0x188>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800204a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800204c:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HW_TS_Init+0x188>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	b2da      	uxtb	r2, r3
 8002054:	4b17      	ldr	r3, [pc, #92]	; (80020b4 <HW_TS_Init+0x188>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800205c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800205e:	4b1f      	ldr	r3, [pc, #124]	; (80020dc <HW_TS_Init+0x1b0>)
 8002060:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002064:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002066:	2003      	movs	r0, #3
 8002068:	f001 faf3 	bl	8003652 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800206c:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <HW_TS_Init+0x188>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <HW_TS_Init+0x188>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	e009      	b.n	8002092 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800207e:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <HW_TS_Init+0x188>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002088:	2b00      	cmp	r3, #0
 800208a:	d002      	beq.n	8002092 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800208c:	2003      	movs	r0, #3
 800208e:	f001 fad2 	bl	8003636 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002092:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <HW_TS_Init+0x188>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	22ff      	movs	r2, #255	; 0xff
 8002098:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800209a:	2200      	movs	r2, #0
 800209c:	2103      	movs	r1, #3
 800209e:	2003      	movs	r0, #3
 80020a0:	f001 fa87 	bl	80035b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80020a4:	2003      	movs	r0, #3
 80020a6:	f001 fa9e 	bl	80035e6 <HAL_NVIC_EnableIRQ>

  return;
 80020aa:	bf00      	nop
}
 80020ac:	3720      	adds	r7, #32
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	200004fc 	.word	0x200004fc
 80020b8:	40002800 	.word	0x40002800
 80020bc:	200002ad 	.word	0x200002ad
 80020c0:	200002ae 	.word	0x200002ae
 80020c4:	200002b0 	.word	0x200002b0
 80020c8:	200002b2 	.word	0x200002b2
 80020cc:	200002ac 	.word	0x200002ac
 80020d0:	200002a8 	.word	0x200002a8
 80020d4:	20000214 	.word	0x20000214
 80020d8:	200002a4 	.word	0x200002a4
 80020dc:	58000800 	.word	0x58000800

080020e0 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b08b      	sub	sp, #44	; 0x2c
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	4613      	mov	r3, r2
 80020ee:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020f6:	f3ef 8310 	mrs	r3, PRIMASK
 80020fa:	61fb      	str	r3, [r7, #28]
  return(result);
 80020fc:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80020fe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002100:	b672      	cpsid	i
}
 8002102:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002104:	e004      	b.n	8002110 <HW_TS_Create+0x30>
  {
    loop++;
 8002106:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800210a:	3301      	adds	r3, #1
 800210c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002110:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002114:	2b05      	cmp	r3, #5
 8002116:	d80c      	bhi.n	8002132 <HW_TS_Create+0x52>
 8002118:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800211c:	492c      	ldr	r1, [pc, #176]	; (80021d0 <HW_TS_Create+0xf0>)
 800211e:	4613      	mov	r3, r2
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	4413      	add	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	440b      	add	r3, r1
 8002128:	330c      	adds	r3, #12
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1e9      	bne.n	8002106 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002132:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002136:	2b06      	cmp	r3, #6
 8002138:	d038      	beq.n	80021ac <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800213a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800213e:	4924      	ldr	r1, [pc, #144]	; (80021d0 <HW_TS_Create+0xf0>)
 8002140:	4613      	mov	r3, r2
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	4413      	add	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	440b      	add	r3, r1
 800214a:	330c      	adds	r3, #12
 800214c:	2201      	movs	r2, #1
 800214e:	701a      	strb	r2, [r3, #0]
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	f383 8810 	msr	PRIMASK, r3
}
 800215a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800215c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002160:	491b      	ldr	r1, [pc, #108]	; (80021d0 <HW_TS_Create+0xf0>)
 8002162:	4613      	mov	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	440b      	add	r3, r1
 800216c:	3310      	adds	r3, #16
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 8002172:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002176:	4916      	ldr	r1, [pc, #88]	; (80021d0 <HW_TS_Create+0xf0>)
 8002178:	4613      	mov	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4413      	add	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	440b      	add	r3, r1
 8002182:	330d      	adds	r3, #13
 8002184:	79fa      	ldrb	r2, [r7, #7]
 8002186:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8002188:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800218c:	4910      	ldr	r1, [pc, #64]	; (80021d0 <HW_TS_Create+0xf0>)
 800218e:	4613      	mov	r3, r2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	4413      	add	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	440b      	add	r3, r1
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80021a2:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80021aa:	e008      	b.n	80021be <HW_TS_Create+0xde>
 80021ac:	6a3b      	ldr	r3, [r7, #32]
 80021ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f383 8810 	msr	PRIMASK, r3
}
 80021b6:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80021b8:	2301      	movs	r3, #1
 80021ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80021be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	372c      	adds	r7, #44	; 0x2c
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	20000214 	.word	0x20000214

080021d4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021de:	f3ef 8310 	mrs	r3, PRIMASK
 80021e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80021e4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80021e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80021e8:	b672      	cpsid	i
}
 80021ea:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80021ec:	2003      	movs	r0, #3
 80021ee:	f001 fa08 	bl	8003602 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80021f2:	4b34      	ldr	r3, [pc, #208]	; (80022c4 <HW_TS_Stop+0xf0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	22ca      	movs	r2, #202	; 0xca
 80021f8:	625a      	str	r2, [r3, #36]	; 0x24
 80021fa:	4b32      	ldr	r3, [pc, #200]	; (80022c4 <HW_TS_Stop+0xf0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2253      	movs	r2, #83	; 0x53
 8002200:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002202:	79fa      	ldrb	r2, [r7, #7]
 8002204:	4930      	ldr	r1, [pc, #192]	; (80022c8 <HW_TS_Stop+0xf4>)
 8002206:	4613      	mov	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4413      	add	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	440b      	add	r3, r1
 8002210:	330c      	adds	r3, #12
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d142      	bne.n	80022a0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fc06 	bl	8001a30 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002224:	4b29      	ldr	r3, [pc, #164]	; (80022cc <HW_TS_Stop+0xf8>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800222a:	7cfb      	ldrb	r3, [r7, #19]
 800222c:	2b06      	cmp	r3, #6
 800222e:	d12f      	bne.n	8002290 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002230:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <HW_TS_Stop+0xfc>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800223c:	d107      	bne.n	800224e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800223e:	bf00      	nop
 8002240:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <HW_TS_Stop+0xf0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f8      	bne.n	8002240 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800224e:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <HW_TS_Stop+0xf0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <HW_TS_Stop+0xf0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800225c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800225e:	bf00      	nop
 8002260:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <HW_TS_Stop+0xf0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f8      	beq.n	8002260 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800226e:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <HW_TS_Stop+0xf0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	b2da      	uxtb	r2, r3
 8002276:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <HW_TS_Stop+0xf0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800227e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002280:	4b14      	ldr	r3, [pc, #80]	; (80022d4 <HW_TS_Stop+0x100>)
 8002282:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002286:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002288:	2003      	movs	r0, #3
 800228a:	f001 f9e2 	bl	8003652 <HAL_NVIC_ClearPendingIRQ>
 800228e:	e007      	b.n	80022a0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HW_TS_Stop+0x104>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	7cfa      	ldrb	r2, [r7, #19]
 8002298:	429a      	cmp	r2, r3
 800229a:	d001      	beq.n	80022a0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800229c:	f7ff fce4 	bl	8001c68 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80022a0:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <HW_TS_Stop+0xf0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	22ff      	movs	r2, #255	; 0xff
 80022a6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80022a8:	2003      	movs	r0, #3
 80022aa:	f001 f99c 	bl	80035e6 <HAL_NVIC_EnableIRQ>
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	f383 8810 	msr	PRIMASK, r3
}
 80022b8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80022ba:	bf00      	nop
}
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	200004fc 	.word	0x200004fc
 80022c8:	20000214 	.word	0x20000214
 80022cc:	200002a4 	.word	0x200002a4
 80022d0:	40002800 	.word	0x40002800
 80022d4:	58000800 	.word	0x58000800
 80022d8:	200002a5 	.word	0x200002a5

080022dc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80022e8:	79fa      	ldrb	r2, [r7, #7]
 80022ea:	493b      	ldr	r1, [pc, #236]	; (80023d8 <HW_TS_Start+0xfc>)
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	440b      	add	r3, r1
 80022f6:	330c      	adds	r3, #12
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d103      	bne.n	8002308 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff ff66 	bl	80021d4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002308:	f3ef 8310 	mrs	r3, PRIMASK
 800230c:	60fb      	str	r3, [r7, #12]
  return(result);
 800230e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002310:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002312:	b672      	cpsid	i
}
 8002314:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002316:	2003      	movs	r0, #3
 8002318:	f001 f973 	bl	8003602 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800231c:	4b2f      	ldr	r3, [pc, #188]	; (80023dc <HW_TS_Start+0x100>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	22ca      	movs	r2, #202	; 0xca
 8002322:	625a      	str	r2, [r3, #36]	; 0x24
 8002324:	4b2d      	ldr	r3, [pc, #180]	; (80023dc <HW_TS_Start+0x100>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2253      	movs	r2, #83	; 0x53
 800232a:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800232c:	79fa      	ldrb	r2, [r7, #7]
 800232e:	492a      	ldr	r1, [pc, #168]	; (80023d8 <HW_TS_Start+0xfc>)
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	440b      	add	r3, r1
 800233a:	330c      	adds	r3, #12
 800233c:	2202      	movs	r2, #2
 800233e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002340:	79fa      	ldrb	r2, [r7, #7]
 8002342:	4925      	ldr	r1, [pc, #148]	; (80023d8 <HW_TS_Start+0xfc>)
 8002344:	4613      	mov	r3, r2
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4413      	add	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	440b      	add	r3, r1
 800234e:	3308      	adds	r3, #8
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002354:	79fa      	ldrb	r2, [r7, #7]
 8002356:	4920      	ldr	r1, [pc, #128]	; (80023d8 <HW_TS_Start+0xfc>)
 8002358:	4613      	mov	r3, r2
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4413      	add	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	440b      	add	r3, r1
 8002362:	3304      	adds	r3, #4
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fab6 	bl	80018dc <linkTimer>
 8002370:	4603      	mov	r3, r0
 8002372:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002374:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <HW_TS_Start+0x104>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800237a:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <HW_TS_Start+0x108>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	b2db      	uxtb	r3, r3
 8002380:	7c7a      	ldrb	r2, [r7, #17]
 8002382:	429a      	cmp	r2, r3
 8002384:	d002      	beq.n	800238c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002386:	f7ff fc6f 	bl	8001c68 <RescheduleTimerList>
 800238a:	e013      	b.n	80023b4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800238c:	79fa      	ldrb	r2, [r7, #7]
 800238e:	4912      	ldr	r1, [pc, #72]	; (80023d8 <HW_TS_Start+0xfc>)
 8002390:	4613      	mov	r3, r2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4413      	add	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	440b      	add	r3, r1
 800239a:	3308      	adds	r3, #8
 800239c:	6819      	ldr	r1, [r3, #0]
 800239e:	8a7b      	ldrh	r3, [r7, #18]
 80023a0:	79fa      	ldrb	r2, [r7, #7]
 80023a2:	1ac9      	subs	r1, r1, r3
 80023a4:	480c      	ldr	r0, [pc, #48]	; (80023d8 <HW_TS_Start+0xfc>)
 80023a6:	4613      	mov	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	4413      	add	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4403      	add	r3, r0
 80023b0:	3308      	adds	r3, #8
 80023b2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HW_TS_Start+0x100>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	22ff      	movs	r2, #255	; 0xff
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80023bc:	2003      	movs	r0, #3
 80023be:	f001 f912 	bl	80035e6 <HAL_NVIC_EnableIRQ>
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	f383 8810 	msr	PRIMASK, r3
}
 80023cc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80023ce:	bf00      	nop
}
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000214 	.word	0x20000214
 80023dc:	200004fc 	.word	0x200004fc
 80023e0:	200002a4 	.word	0x200002a4
 80023e4:	200002a5 	.word	0x200002a5

080023e8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	460b      	mov	r3, r1
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4798      	blx	r3

  return;
 80023fa:	bf00      	nop
}
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607b      	str	r3, [r7, #4]
 800240e:	4603      	mov	r3, r0
 8002410:	73fb      	strb	r3, [r7, #15]
 8002412:	4613      	mov	r3, r2
 8002414:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8002416:	7bfb      	ldrb	r3, [r7, #15]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d002      	beq.n	8002422 <HW_UART_Receive_IT+0x1e>
 800241c:	2b02      	cmp	r3, #2
 800241e:	d00d      	beq.n	800243c <HW_UART_Receive_IT+0x38>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8002420:	e019      	b.n	8002456 <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(huart1, USART1);
 8002422:	4a0f      	ldr	r2, [pc, #60]	; (8002460 <HW_UART_Receive_IT+0x5c>)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	4b0e      	ldr	r3, [pc, #56]	; (8002464 <HW_UART_Receive_IT+0x60>)
 800242a:	4a0f      	ldr	r2, [pc, #60]	; (8002468 <HW_UART_Receive_IT+0x64>)
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	89bb      	ldrh	r3, [r7, #12]
 8002430:	461a      	mov	r2, r3
 8002432:	68b9      	ldr	r1, [r7, #8]
 8002434:	480b      	ldr	r0, [pc, #44]	; (8002464 <HW_UART_Receive_IT+0x60>)
 8002436:	f003 ff5d 	bl	80062f4 <HAL_UART_Receive_IT>
            break;
 800243a:	e00c      	b.n	8002456 <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(hlpuart1, LPUART1);
 800243c:	4a0b      	ldr	r2, [pc, #44]	; (800246c <HW_UART_Receive_IT+0x68>)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HW_UART_Receive_IT+0x6c>)
 8002444:	4a0b      	ldr	r2, [pc, #44]	; (8002474 <HW_UART_Receive_IT+0x70>)
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	89bb      	ldrh	r3, [r7, #12]
 800244a:	461a      	mov	r2, r3
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	4808      	ldr	r0, [pc, #32]	; (8002470 <HW_UART_Receive_IT+0x6c>)
 8002450:	f003 ff50 	bl	80062f4 <HAL_UART_Receive_IT>
            break;
 8002454:	bf00      	nop
    }

    return;
 8002456:	bf00      	nop
}
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	200002b4 	.word	0x200002b4
 8002464:	20000394 	.word	0x20000394
 8002468:	40013800 	.word	0x40013800
 800246c:	200002bc 	.word	0x200002bc
 8002470:	20000300 	.word	0x20000300
 8002474:	40008000 	.word	0x40008000

08002478 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607b      	str	r3, [r7, #4]
 8002482:	4603      	mov	r3, r0
 8002484:	73fb      	strb	r3, [r7, #15]
 8002486:	4613      	mov	r3, r2
 8002488:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800248e:	2300      	movs	r3, #0
 8002490:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <HW_UART_Transmit_DMA+0x26>
 8002498:	2b02      	cmp	r3, #2
 800249a:	d00f      	beq.n	80024bc <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 800249c:	e01d      	b.n	80024da <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 800249e:	4a1f      	ldr	r2, [pc, #124]	; (800251c <HW_UART_Transmit_DMA+0xa4>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80024a4:	4b1e      	ldr	r3, [pc, #120]	; (8002520 <HW_UART_Transmit_DMA+0xa8>)
 80024a6:	4a1f      	ldr	r2, [pc, #124]	; (8002524 <HW_UART_Transmit_DMA+0xac>)
 80024a8:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80024aa:	89bb      	ldrh	r3, [r7, #12]
 80024ac:	461a      	mov	r2, r3
 80024ae:	68b9      	ldr	r1, [r7, #8]
 80024b0:	481b      	ldr	r0, [pc, #108]	; (8002520 <HW_UART_Transmit_DMA+0xa8>)
 80024b2:	f003 ff6b 	bl	800638c <HAL_UART_Transmit_DMA>
 80024b6:	4603      	mov	r3, r0
 80024b8:	75fb      	strb	r3, [r7, #23]
            break;
 80024ba:	e00e      	b.n	80024da <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 80024bc:	4a1a      	ldr	r2, [pc, #104]	; (8002528 <HW_UART_Transmit_DMA+0xb0>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 80024c2:	4b1a      	ldr	r3, [pc, #104]	; (800252c <HW_UART_Transmit_DMA+0xb4>)
 80024c4:	4a1a      	ldr	r2, [pc, #104]	; (8002530 <HW_UART_Transmit_DMA+0xb8>)
 80024c6:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 80024c8:	89bb      	ldrh	r3, [r7, #12]
 80024ca:	461a      	mov	r2, r3
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	4817      	ldr	r0, [pc, #92]	; (800252c <HW_UART_Transmit_DMA+0xb4>)
 80024d0:	f003 ff5c 	bl	800638c <HAL_UART_Transmit_DMA>
 80024d4:	4603      	mov	r3, r0
 80024d6:	75fb      	strb	r3, [r7, #23]
            break;
 80024d8:	bf00      	nop
    }

    switch (hal_status)
 80024da:	7dfb      	ldrb	r3, [r7, #23]
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d817      	bhi.n	8002510 <HW_UART_Transmit_DMA+0x98>
 80024e0:	a201      	add	r2, pc, #4	; (adr r2, 80024e8 <HW_UART_Transmit_DMA+0x70>)
 80024e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e6:	bf00      	nop
 80024e8:	080024f9 	.word	0x080024f9
 80024ec:	080024ff 	.word	0x080024ff
 80024f0:	08002505 	.word	0x08002505
 80024f4:	0800250b 	.word	0x0800250b
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80024f8:	2300      	movs	r3, #0
 80024fa:	75bb      	strb	r3, [r7, #22]
            break;
 80024fc:	e009      	b.n	8002512 <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80024fe:	2301      	movs	r3, #1
 8002500:	75bb      	strb	r3, [r7, #22]
            break;
 8002502:	e006      	b.n	8002512 <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002504:	2302      	movs	r3, #2
 8002506:	75bb      	strb	r3, [r7, #22]
            break;
 8002508:	e003      	b.n	8002512 <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800250a:	2303      	movs	r3, #3
 800250c:	75bb      	strb	r3, [r7, #22]
            break;
 800250e:	e000      	b.n	8002512 <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 8002510:	bf00      	nop
    }

    return hw_status;
 8002512:	7dbb      	ldrb	r3, [r7, #22]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	200002b8 	.word	0x200002b8
 8002520:	20000394 	.word	0x20000394
 8002524:	40013800 	.word	0x40013800
 8002528:	200002c0 	.word	0x200002c0
 800252c:	20000300 	.word	0x20000300
 8002530:	40008000 	.word	0x40008000

08002534 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a0f      	ldr	r2, [pc, #60]	; (8002580 <HAL_UART_RxCpltCallback+0x4c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00a      	beq.n	800255c <HAL_UART_RxCpltCallback+0x28>
 8002546:	4a0f      	ldr	r2, [pc, #60]	; (8002584 <HAL_UART_RxCpltCallback+0x50>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d10f      	bne.n	800256c <HAL_UART_RxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 800254c:	4b0e      	ldr	r3, [pc, #56]	; (8002588 <HAL_UART_RxCpltCallback+0x54>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00d      	beq.n	8002570 <HAL_UART_RxCpltCallback+0x3c>
            {
                HW_huart1RxCb();
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <HAL_UART_RxCpltCallback+0x54>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4798      	blx	r3
            }
            break;
 800255a:	e009      	b.n	8002570 <HAL_UART_RxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1RxCb)
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_UART_RxCpltCallback+0x58>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d007      	beq.n	8002574 <HAL_UART_RxCpltCallback+0x40>
            {
                HW_hlpuart1RxCb();
 8002564:	4b09      	ldr	r3, [pc, #36]	; (800258c <HAL_UART_RxCpltCallback+0x58>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4798      	blx	r3
            }
            break;
 800256a:	e003      	b.n	8002574 <HAL_UART_RxCpltCallback+0x40>
#endif

        default:
            break;
 800256c:	bf00      	nop
 800256e:	e002      	b.n	8002576 <HAL_UART_RxCpltCallback+0x42>
            break;
 8002570:	bf00      	nop
 8002572:	e000      	b.n	8002576 <HAL_UART_RxCpltCallback+0x42>
            break;
 8002574:	bf00      	nop
    }

    return;
 8002576:	bf00      	nop
}
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40008000 	.word	0x40008000
 8002584:	40013800 	.word	0x40013800
 8002588:	200002b4 	.word	0x200002b4
 800258c:	200002bc 	.word	0x200002bc

08002590 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a0f      	ldr	r2, [pc, #60]	; (80025dc <HAL_UART_TxCpltCallback+0x4c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d00a      	beq.n	80025b8 <HAL_UART_TxCpltCallback+0x28>
 80025a2:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <HAL_UART_TxCpltCallback+0x50>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d10f      	bne.n	80025c8 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80025a8:	4b0e      	ldr	r3, [pc, #56]	; (80025e4 <HAL_UART_TxCpltCallback+0x54>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00d      	beq.n	80025cc <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_UART_TxCpltCallback+0x54>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4798      	blx	r3
            }
            break;
 80025b6:	e009      	b.n	80025cc <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_UART_TxCpltCallback+0x58>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d007      	beq.n	80025d0 <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 80025c0:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <HAL_UART_TxCpltCallback+0x58>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4798      	blx	r3
            }
            break;
 80025c6:	e003      	b.n	80025d0 <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 80025c8:	bf00      	nop
 80025ca:	e002      	b.n	80025d2 <HAL_UART_TxCpltCallback+0x42>
            break;
 80025cc:	bf00      	nop
 80025ce:	e000      	b.n	80025d2 <HAL_UART_TxCpltCallback+0x42>
            break;
 80025d0:	bf00      	nop
    }

    return;
 80025d2:	bf00      	nop
}
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40008000 	.word	0x40008000
 80025e0:	40013800 	.word	0x40013800
 80025e4:	200002b8 	.word	0x200002b8
 80025e8:	200002c0 	.word	0x200002c0

080025ec <LL_RCC_LSE_SetDriveCapability>:
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80025f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fc:	f023 0218 	bic.w	r2, r3, #24
 8002600:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <LL_AHB1_GRP1_EnableClock>:
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002624:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002626:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4313      	orrs	r3, r2
 800262e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002634:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4013      	ands	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800263c:	68fb      	ldr	r3, [r7, #12]
}
 800263e:	bf00      	nop
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <LL_AHB2_GRP1_EnableClock>:
{
 800264a:	b480      	push	{r7}
 800264c:	b085      	sub	sp, #20
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002652:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002656:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002658:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4313      	orrs	r3, r2
 8002660:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002666:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4013      	ands	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800266e:	68fb      	ldr	r3, [r7, #12]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002680:	f000 fdbe 	bl	8003200 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002684:	f7fe fcfc 	bl	8001080 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002688:	f000 f814 	bl	80026b4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800268c:	f000 f870 	bl	8002770 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002690:	f000 f88e 	bl	80027b0 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002694:	f000 f95d 	bl	8002952 <MX_GPIO_Init>
  MX_DMA_Init();
 8002698:	f000 f93e 	bl	8002918 <MX_DMA_Init>
  MX_RTC_Init();
 800269c:	f000 f908 	bl	80028b0 <MX_RTC_Init>
  MX_RNG_Init();
 80026a0:	f000 f8f0 	bl	8002884 <MX_RNG_Init>
  MX_RF_Init();
 80026a4:	f000 f8e6 	bl	8002874 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80026a8:	f7fe fcf8 	bl	800109c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80026ac:	f7fe ff37 	bl	800151e <MX_APPE_Process>
 80026b0:	e7fc      	b.n	80026ac <main+0x30>
	...

080026b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b09a      	sub	sp, #104	; 0x68
 80026b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026ba:	f107 0320 	add.w	r3, r7, #32
 80026be:	2248      	movs	r2, #72	; 0x48
 80026c0:	2100      	movs	r1, #0
 80026c2:	4618      	mov	r0, r3
 80026c4:	f00a fe30 	bl	800d328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026c8:	1d3b      	adds	r3, r7, #4
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	605a      	str	r2, [r3, #4]
 80026d0:	609a      	str	r2, [r3, #8]
 80026d2:	60da      	str	r2, [r3, #12]
 80026d4:	611a      	str	r2, [r3, #16]
 80026d6:	615a      	str	r2, [r3, #20]
 80026d8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80026da:	f001 fda7 	bl	800422c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80026de:	2000      	movs	r0, #0
 80026e0:	f7ff ff84 	bl	80025ec <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026e4:	4b21      	ldr	r3, [pc, #132]	; (800276c <SystemClock_Config+0xb8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026ec:	4a1f      	ldr	r2, [pc, #124]	; (800276c <SystemClock_Config+0xb8>)
 80026ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	4b1d      	ldr	r3, [pc, #116]	; (800276c <SystemClock_Config+0xb8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026fc:	603b      	str	r3, [r7, #0]
 80026fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8002700:	2347      	movs	r3, #71	; 0x47
 8002702:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002704:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800270a:	2301      	movs	r3, #1
 800270c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800270e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002712:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002714:	2301      	movs	r3, #1
 8002716:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002718:	2340      	movs	r3, #64	; 0x40
 800271a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800271c:	2300      	movs	r3, #0
 800271e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002720:	f107 0320 	add.w	r3, r7, #32
 8002724:	4618      	mov	r0, r3
 8002726:	f002 f915 	bl	8004954 <HAL_RCC_OscConfig>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002730:	f000 f91c 	bl	800296c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002734:	236f      	movs	r3, #111	; 0x6f
 8002736:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002738:	2302      	movs	r3, #2
 800273a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002740:	2300      	movs	r3, #0
 8002742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002748:	2300      	movs	r3, #0
 800274a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800274c:	2300      	movs	r3, #0
 800274e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002750:	1d3b      	adds	r3, r7, #4
 8002752:	2101      	movs	r1, #1
 8002754:	4618      	mov	r0, r3
 8002756:	f002 fc71 	bl	800503c <HAL_RCC_ClockConfig>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002760:	f000 f904 	bl	800296c <Error_Handler>
  }
}
 8002764:	bf00      	nop
 8002766:	3768      	adds	r7, #104	; 0x68
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	58000400 	.word	0x58000400

08002770 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b094      	sub	sp, #80	; 0x50
 8002774:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002776:	463b      	mov	r3, r7
 8002778:	2250      	movs	r2, #80	; 0x50
 800277a:	2100      	movs	r1, #0
 800277c:	4618      	mov	r0, r3
 800277e:	f00a fdd3 	bl	800d328 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002782:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002786:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002788:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800278c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800278e:	2302      	movs	r3, #2
 8002790:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002792:	2310      	movs	r3, #16
 8002794:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002796:	463b      	mov	r3, r7
 8002798:	4618      	mov	r0, r3
 800279a:	f003 f88c 	bl	80058b6 <HAL_RCCEx_PeriphCLKConfig>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80027a4:	f000 f8e2 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80027a8:	bf00      	nop
 80027aa:	3750      	adds	r7, #80	; 0x50
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80027b4:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <MX_IPCC_Init+0x20>)
 80027b6:	4a07      	ldr	r2, [pc, #28]	; (80027d4 <MX_IPCC_Init+0x24>)
 80027b8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80027ba:	4805      	ldr	r0, [pc, #20]	; (80027d0 <MX_IPCC_Init+0x20>)
 80027bc:	f001 fcb0 	bl	8004120 <HAL_IPCC_Init>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80027c6:	f000 f8d1 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	200002c4 	.word	0x200002c4
 80027d4:	58000c00 	.word	0x58000c00

080027d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80027dc:	4b23      	ldr	r3, [pc, #140]	; (800286c <MX_USART1_UART_Init+0x94>)
 80027de:	4a24      	ldr	r2, [pc, #144]	; (8002870 <MX_USART1_UART_Init+0x98>)
 80027e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80027e2:	4b22      	ldr	r3, [pc, #136]	; (800286c <MX_USART1_UART_Init+0x94>)
 80027e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027ea:	4b20      	ldr	r3, [pc, #128]	; (800286c <MX_USART1_UART_Init+0x94>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027f0:	4b1e      	ldr	r3, [pc, #120]	; (800286c <MX_USART1_UART_Init+0x94>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027f6:	4b1d      	ldr	r3, [pc, #116]	; (800286c <MX_USART1_UART_Init+0x94>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027fc:	4b1b      	ldr	r3, [pc, #108]	; (800286c <MX_USART1_UART_Init+0x94>)
 80027fe:	220c      	movs	r2, #12
 8002800:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002802:	4b1a      	ldr	r3, [pc, #104]	; (800286c <MX_USART1_UART_Init+0x94>)
 8002804:	2200      	movs	r2, #0
 8002806:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002808:	4b18      	ldr	r3, [pc, #96]	; (800286c <MX_USART1_UART_Init+0x94>)
 800280a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800280e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002810:	4b16      	ldr	r3, [pc, #88]	; (800286c <MX_USART1_UART_Init+0x94>)
 8002812:	2200      	movs	r2, #0
 8002814:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002816:	4b15      	ldr	r3, [pc, #84]	; (800286c <MX_USART1_UART_Init+0x94>)
 8002818:	2200      	movs	r2, #0
 800281a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800281c:	4b13      	ldr	r3, [pc, #76]	; (800286c <MX_USART1_UART_Init+0x94>)
 800281e:	2200      	movs	r2, #0
 8002820:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002822:	4812      	ldr	r0, [pc, #72]	; (800286c <MX_USART1_UART_Init+0x94>)
 8002824:	f003 fd16 	bl	8006254 <HAL_UART_Init>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800282e:	f000 f89d 	bl	800296c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002832:	2100      	movs	r1, #0
 8002834:	480d      	ldr	r0, [pc, #52]	; (800286c <MX_USART1_UART_Init+0x94>)
 8002836:	f005 fd68 	bl	800830a <HAL_UARTEx_SetTxFifoThreshold>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002840:	f000 f894 	bl	800296c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002844:	2100      	movs	r1, #0
 8002846:	4809      	ldr	r0, [pc, #36]	; (800286c <MX_USART1_UART_Init+0x94>)
 8002848:	f005 fd9d 	bl	8008386 <HAL_UARTEx_SetRxFifoThreshold>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002852:	f000 f88b 	bl	800296c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002856:	4805      	ldr	r0, [pc, #20]	; (800286c <MX_USART1_UART_Init+0x94>)
 8002858:	f005 fd1e 	bl	8008298 <HAL_UARTEx_DisableFifoMode>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002862:	f000 f883 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000394 	.word	0x20000394
 8002870:	40013800 	.word	0x40013800

08002874 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
	...

08002884 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002888:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <MX_RNG_Init+0x24>)
 800288a:	4a08      	ldr	r2, [pc, #32]	; (80028ac <MX_RNG_Init+0x28>)
 800288c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <MX_RNG_Init+0x24>)
 8002890:	2200      	movs	r2, #0
 8002892:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002894:	4804      	ldr	r0, [pc, #16]	; (80028a8 <MX_RNG_Init+0x24>)
 8002896:	f003 fa95 	bl	8005dc4 <HAL_RNG_Init>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80028a0:	f000 f864 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80028a4:	bf00      	nop
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	200004e8 	.word	0x200004e8
 80028ac:	58001000 	.word	0x58001000

080028b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028b4:	4b16      	ldr	r3, [pc, #88]	; (8002910 <MX_RTC_Init+0x60>)
 80028b6:	4a17      	ldr	r2, [pc, #92]	; (8002914 <MX_RTC_Init+0x64>)
 80028b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80028ba:	4b15      	ldr	r3, [pc, #84]	; (8002910 <MX_RTC_Init+0x60>)
 80028bc:	2200      	movs	r2, #0
 80028be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80028c0:	4b13      	ldr	r3, [pc, #76]	; (8002910 <MX_RTC_Init+0x60>)
 80028c2:	220f      	movs	r2, #15
 80028c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80028c6:	4b12      	ldr	r3, [pc, #72]	; (8002910 <MX_RTC_Init+0x60>)
 80028c8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80028cc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80028ce:	4b10      	ldr	r3, [pc, #64]	; (8002910 <MX_RTC_Init+0x60>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028d4:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <MX_RTC_Init+0x60>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028da:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <MX_RTC_Init+0x60>)
 80028dc:	2200      	movs	r2, #0
 80028de:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <MX_RTC_Init+0x60>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028e6:	480a      	ldr	r0, [pc, #40]	; (8002910 <MX_RTC_Init+0x60>)
 80028e8:	f003 faa2 	bl	8005e30 <HAL_RTC_Init>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80028f2:	f000 f83b 	bl	800296c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80028f6:	2200      	movs	r2, #0
 80028f8:	2100      	movs	r1, #0
 80028fa:	4805      	ldr	r0, [pc, #20]	; (8002910 <MX_RTC_Init+0x60>)
 80028fc:	f003 fb98 	bl	8006030 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002906:	f000 f831 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800290a:	bf00      	nop
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	200004fc 	.word	0x200004fc
 8002914:	40002800 	.word	0x40002800

08002918 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800291c:	2004      	movs	r0, #4
 800291e:	f7ff fe7b 	bl	8002618 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002922:	2001      	movs	r0, #1
 8002924:	f7ff fe78 	bl	8002618 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002928:	2002      	movs	r0, #2
 800292a:	f7ff fe75 	bl	8002618 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 800292e:	2200      	movs	r2, #0
 8002930:	210f      	movs	r1, #15
 8002932:	200e      	movs	r0, #14
 8002934:	f000 fe3d 	bl	80035b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002938:	200e      	movs	r0, #14
 800293a:	f000 fe54 	bl	80035e6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 800293e:	2200      	movs	r2, #0
 8002940:	210f      	movs	r1, #15
 8002942:	203a      	movs	r0, #58	; 0x3a
 8002944:	f000 fe35 	bl	80035b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002948:	203a      	movs	r0, #58	; 0x3a
 800294a:	f000 fe4c 	bl	80035e6 <HAL_NVIC_EnableIRQ>

}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}

08002952 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002956:	2004      	movs	r0, #4
 8002958:	f7ff fe77 	bl	800264a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800295c:	2001      	movs	r0, #1
 800295e:	f7ff fe74 	bl	800264a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002962:	2002      	movs	r0, #2
 8002964:	f7ff fe71 	bl	800264a <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002968:	bf00      	nop
 800296a:	bd80      	pop	{r7, pc}

0800296c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002970:	bf00      	nop
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_RCC_EnableRTC>:
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800297e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002986:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800298a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800298e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002992:	bf00      	nop
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <LL_AHB2_GRP1_EnableClock>:
{
 800299c:	b480      	push	{r7}
 800299e:	b085      	sub	sp, #20
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80029a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80029b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4013      	ands	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029c0:	68fb      	ldr	r3, [r7, #12]
}
 80029c2:	bf00      	nop
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <LL_AHB3_GRP1_EnableClock>:
{
 80029ce:	b480      	push	{r7}
 80029d0:	b085      	sub	sp, #20
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80029d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80029e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4013      	ands	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029f2:	68fb      	ldr	r3, [r7, #12]
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <LL_APB1_GRP1_EnableClock>:
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4013      	ands	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a24:	68fb      	ldr	r3, [r7, #12]
}
 8002a26:	bf00      	nop
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <LL_APB1_GRP2_EnableClock>:
{
 8002a32:	b480      	push	{r7}
 8002a34:	b085      	sub	sp, #20
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4013      	ands	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a56:	68fb      	ldr	r3, [r7, #12]
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <LL_APB2_GRP1_EnableClock>:
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a70:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4013      	ands	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a88:	68fb      	ldr	r3, [r7, #12]
}
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a96:	b580      	push	{r7, lr}
 8002a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002a9a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002a9e:	f7ff ff96 	bl	80029ce <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	202e      	movs	r0, #46	; 0x2e
 8002aa8:	f000 fd83 	bl	80035b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002aac:	202e      	movs	r0, #46	; 0x2e
 8002aae:	f000 fd9a 	bl	80035e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a0d      	ldr	r2, [pc, #52]	; (8002afc <HAL_IPCC_MspInit+0x44>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d113      	bne.n	8002af2 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002aca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002ace:	f7ff ff7e 	bl	80029ce <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	202c      	movs	r0, #44	; 0x2c
 8002ad8:	f000 fd6b 	bl	80035b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002adc:	202c      	movs	r0, #44	; 0x2c
 8002ade:	f000 fd82 	bl	80035e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	202d      	movs	r0, #45	; 0x2d
 8002ae8:	f000 fd63 	bl	80035b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002aec:	202d      	movs	r0, #45	; 0x2d
 8002aee:	f000 fd7a 	bl	80035e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	58000c00 	.word	0x58000c00

08002b00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b0a0      	sub	sp, #128	; 0x80
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	609a      	str	r2, [r3, #8]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b18:	f107 030c 	add.w	r3, r7, #12
 8002b1c:	2250      	movs	r2, #80	; 0x50
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f00a fc01 	bl	800d328 <memset>
  if(huart->Instance==LPUART1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a68      	ldr	r2, [pc, #416]	; (8002ccc <HAL_UART_MspInit+0x1cc>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d16e      	bne.n	8002c0e <HAL_UART_MspInit+0x10e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002b30:	2302      	movs	r3, #2
 8002b32:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002b34:	2300      	movs	r3, #0
 8002b36:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b38:	f107 030c 	add.w	r3, r7, #12
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f002 feba 	bl	80058b6 <HAL_RCCEx_PeriphCLKConfig>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b48:	f7ff ff10 	bl	800296c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002b4c:	2001      	movs	r0, #1
 8002b4e:	f7ff ff70 	bl	8002a32 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b52:	2001      	movs	r0, #1
 8002b54:	f7ff ff22 	bl	800299c <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b58:	230c      	movs	r3, #12
 8002b5a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b60:	2300      	movs	r3, #0
 8002b62:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b64:	2303      	movs	r3, #3
 8002b66:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002b68:	2308      	movs	r3, #8
 8002b6a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b70:	4619      	mov	r1, r3
 8002b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b76:	f001 f90f 	bl	8003d98 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8002b7a:	4b55      	ldr	r3, [pc, #340]	; (8002cd0 <HAL_UART_MspInit+0x1d0>)
 8002b7c:	4a55      	ldr	r2, [pc, #340]	; (8002cd4 <HAL_UART_MspInit+0x1d4>)
 8002b7e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002b80:	4b53      	ldr	r3, [pc, #332]	; (8002cd0 <HAL_UART_MspInit+0x1d0>)
 8002b82:	2211      	movs	r2, #17
 8002b84:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b86:	4b52      	ldr	r3, [pc, #328]	; (8002cd0 <HAL_UART_MspInit+0x1d0>)
 8002b88:	2210      	movs	r2, #16
 8002b8a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b8c:	4b50      	ldr	r3, [pc, #320]	; (8002cd0 <HAL_UART_MspInit+0x1d0>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b92:	4b4f      	ldr	r3, [pc, #316]	; (8002cd0 <HAL_UART_MspInit+0x1d0>)
 8002b94:	2280      	movs	r2, #128	; 0x80
 8002b96:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b98:	4b4d      	ldr	r3, [pc, #308]	; (8002cd0 <HAL_UART_MspInit+0x1d0>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b9e:	4b4c      	ldr	r3, [pc, #304]	; (8002cd0 <HAL_UART_MspInit+0x1d0>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002ba4:	4b4a      	ldr	r3, [pc, #296]	; (8002cd0 <HAL_UART_MspInit+0x1d0>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002baa:	4b49      	ldr	r3, [pc, #292]	; (8002cd0 <HAL_UART_MspInit+0x1d0>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002bb0:	4847      	ldr	r0, [pc, #284]	; (8002cd0 <HAL_UART_MspInit+0x1d0>)
 8002bb2:	f000 fd5d 	bl	8003670 <HAL_DMA_Init>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002bbc:	f7ff fed6 	bl	800296c <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 8002bc0:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8002bc4:	65fb      	str	r3, [r7, #92]	; 0x5c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	663b      	str	r3, [r7, #96]	; 0x60
    pSyncConfig.SyncEnable = DISABLE;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    pSyncConfig.EventEnable = DISABLE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
    pSyncConfig.RequestNumber = 1;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 8002bda:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002bde:	4619      	mov	r1, r3
 8002be0:	483b      	ldr	r0, [pc, #236]	; (8002cd0 <HAL_UART_MspInit+0x1d0>)
 8002be2:	f001 f877 	bl	8003cd4 <HAL_DMAEx_ConfigMuxSync>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8002bec:	f7ff febe 	bl	800296c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	4a37      	ldr	r2, [pc, #220]	; (8002cd0 <HAL_UART_MspInit+0x1d0>)
 8002bf4:	67da      	str	r2, [r3, #124]	; 0x7c
 8002bf6:	4a36      	ldr	r2, [pc, #216]	; (8002cd0 <HAL_UART_MspInit+0x1d0>)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2100      	movs	r1, #0
 8002c00:	2025      	movs	r0, #37	; 0x25
 8002c02:	f000 fcd6 	bl	80035b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002c06:	2025      	movs	r0, #37	; 0x25
 8002c08:	f000 fced 	bl	80035e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c0c:	e05a      	b.n	8002cc4 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a31      	ldr	r2, [pc, #196]	; (8002cd8 <HAL_UART_MspInit+0x1d8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d155      	bne.n	8002cc4 <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c20:	f107 030c 	add.w	r3, r7, #12
 8002c24:	4618      	mov	r0, r3
 8002c26:	f002 fe46 	bl	80058b6 <HAL_RCCEx_PeriphCLKConfig>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <HAL_UART_MspInit+0x134>
      Error_Handler();
 8002c30:	f7ff fe9c 	bl	800296c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c34:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002c38:	f7ff ff14 	bl	8002a64 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c3c:	2002      	movs	r0, #2
 8002c3e:	f7ff fead 	bl	800299c <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c42:	23c0      	movs	r3, #192	; 0xc0
 8002c44:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c46:	2302      	movs	r3, #2
 8002c48:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c52:	2307      	movs	r3, #7
 8002c54:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c56:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	481f      	ldr	r0, [pc, #124]	; (8002cdc <HAL_UART_MspInit+0x1dc>)
 8002c5e:	f001 f89b 	bl	8003d98 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8002c62:	4b1f      	ldr	r3, [pc, #124]	; (8002ce0 <HAL_UART_MspInit+0x1e0>)
 8002c64:	4a1f      	ldr	r2, [pc, #124]	; (8002ce4 <HAL_UART_MspInit+0x1e4>)
 8002c66:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002c68:	4b1d      	ldr	r3, [pc, #116]	; (8002ce0 <HAL_UART_MspInit+0x1e0>)
 8002c6a:	220f      	movs	r2, #15
 8002c6c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ce0 <HAL_UART_MspInit+0x1e0>)
 8002c70:	2210      	movs	r2, #16
 8002c72:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c74:	4b1a      	ldr	r3, [pc, #104]	; (8002ce0 <HAL_UART_MspInit+0x1e0>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c7a:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_UART_MspInit+0x1e0>)
 8002c7c:	2280      	movs	r2, #128	; 0x80
 8002c7e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c80:	4b17      	ldr	r3, [pc, #92]	; (8002ce0 <HAL_UART_MspInit+0x1e0>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c86:	4b16      	ldr	r3, [pc, #88]	; (8002ce0 <HAL_UART_MspInit+0x1e0>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002c8c:	4b14      	ldr	r3, [pc, #80]	; (8002ce0 <HAL_UART_MspInit+0x1e0>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c92:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <HAL_UART_MspInit+0x1e0>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002c98:	4811      	ldr	r0, [pc, #68]	; (8002ce0 <HAL_UART_MspInit+0x1e0>)
 8002c9a:	f000 fce9 	bl	8003670 <HAL_DMA_Init>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8002ca4:	f7ff fe62 	bl	800296c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a0d      	ldr	r2, [pc, #52]	; (8002ce0 <HAL_UART_MspInit+0x1e0>)
 8002cac:	67da      	str	r2, [r3, #124]	; 0x7c
 8002cae:	4a0c      	ldr	r2, [pc, #48]	; (8002ce0 <HAL_UART_MspInit+0x1e0>)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	2024      	movs	r0, #36	; 0x24
 8002cba:	f000 fc7a 	bl	80035b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002cbe:	2024      	movs	r0, #36	; 0x24
 8002cc0:	f000 fc91 	bl	80035e6 <HAL_NVIC_EnableIRQ>
}
 8002cc4:	bf00      	nop
 8002cc6:	3780      	adds	r7, #128	; 0x80
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40008000 	.word	0x40008000
 8002cd0:	20000428 	.word	0x20000428
 8002cd4:	40020044 	.word	0x40020044
 8002cd8:	40013800 	.word	0x40013800
 8002cdc:	48000400 	.word	0x48000400
 8002ce0:	20000488 	.word	0x20000488
 8002ce4:	40020444 	.word	0x40020444

08002ce8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b096      	sub	sp, #88	; 0x58
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cf0:	f107 0308 	add.w	r3, r7, #8
 8002cf4:	2250      	movs	r2, #80	; 0x50
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f00a fb15 	bl	800d328 <memset>
  if(hrng->Instance==RNG)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a0d      	ldr	r2, [pc, #52]	; (8002d38 <HAL_RNG_MspInit+0x50>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d113      	bne.n	8002d30 <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d0c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002d0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002d12:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d14:	f107 0308 	add.w	r3, r7, #8
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f002 fdcc 	bl	80058b6 <HAL_RCCEx_PeriphCLKConfig>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8002d24:	f7ff fe22 	bl	800296c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002d28:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8002d2c:	f7ff fe4f 	bl	80029ce <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002d30:	bf00      	nop
 8002d32:	3758      	adds	r7, #88	; 0x58
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	58001000 	.word	0x58001000

08002d3c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b096      	sub	sp, #88	; 0x58
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d44:	f107 0308 	add.w	r3, r7, #8
 8002d48:	2250      	movs	r2, #80	; 0x50
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f00a faeb 	bl	800d328 <memset>
  if(hrtc->Instance==RTC)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a14      	ldr	r2, [pc, #80]	; (8002da8 <HAL_RTC_MspInit+0x6c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d120      	bne.n	8002d9e <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002d5c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d60:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002d62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d66:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d68:	f107 0308 	add.w	r3, r7, #8
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f002 fda2 	bl	80058b6 <HAL_RCCEx_PeriphCLKConfig>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002d78:	f7ff fdf8 	bl	800296c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002d7c:	f7ff fdfd 	bl	800297a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002d80:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002d84:	f7ff fe3c 	bl	8002a00 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002d88:	2200      	movs	r2, #0
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	2003      	movs	r0, #3
 8002d8e:	f000 fc10 	bl	80035b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002d92:	2003      	movs	r0, #3
 8002d94:	f000 fc27 	bl	80035e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f003 fa05 	bl	80061a8 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002d9e:	bf00      	nop
 8002da0:	3758      	adds	r7, #88	; 0x58
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40002800 	.word	0x40002800

08002dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dbe:	e7fe      	b.n	8002dbe <HardFault_Handler+0x4>

08002dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dc4:	e7fe      	b.n	8002dc4 <MemManage_Handler+0x4>

08002dc6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dca:	e7fe      	b.n	8002dca <BusFault_Handler+0x4>

08002dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dd0:	e7fe      	b.n	8002dd0 <UsageFault_Handler+0x4>

08002dd2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002de4:	bf00      	nop
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dee:	b480      	push	{r7}
 8002df0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e00:	f000 fa58 	bl	80032b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e04:	bf00      	nop
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002e0c:	f7fe ffc6 	bl	8001d9c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002e10:	bf00      	nop
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002e18:	4802      	ldr	r0, [pc, #8]	; (8002e24 <DMA1_Channel4_IRQHandler+0x10>)
 8002e1a:	f000 fe0a 	bl	8003a32 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002e1e:	bf00      	nop
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000428 	.word	0x20000428

08002e28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e2c:	4802      	ldr	r0, [pc, #8]	; (8002e38 <USART1_IRQHandler+0x10>)
 8002e2e:	f003 fb2d 	bl	800648c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000394 	.word	0x20000394

08002e3c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002e40:	4802      	ldr	r0, [pc, #8]	; (8002e4c <LPUART1_IRQHandler+0x10>)
 8002e42:	f003 fb23 	bl	800648c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000300 	.word	0x20000300

08002e50 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002e54:	f009 fc9a 	bl	800c78c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002e58:	bf00      	nop
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002e60:	f009 fcca 	bl	800c7f8 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002e64:	bf00      	nop
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002e6c:	f001 f934 	bl	80040d8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002e70:	bf00      	nop
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002e78:	4802      	ldr	r0, [pc, #8]	; (8002e84 <DMA2_Channel4_IRQHandler+0x10>)
 8002e7a:	f000 fdda 	bl	8003a32 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000488 	.word	0x20000488

08002e88 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8002e8c:	2010      	movs	r0, #16
 8002e8e:	f001 f90b 	bl	80040a8 <HAL_GPIO_EXTI_IRQHandler>
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	f001 f904 	bl	80040a8 <HAL_GPIO_EXTI_IRQHandler>
}
 8002ea0:	bf00      	nop
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8002ea8:	2002      	movs	r0, #2
 8002eaa:	f001 f8fd 	bl	80040a8 <HAL_GPIO_EXTI_IRQHandler>
}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <LL_AHB2_GRP1_EnableClock>:
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b085      	sub	sp, #20
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ebe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ec0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ece:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
}
 8002ed8:	bf00      	nop
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b088      	sub	sp, #32
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8002eee:	f107 030c 	add.w	r3, r7, #12
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	601a      	str	r2, [r3, #0]
 8002ef6:	605a      	str	r2, [r3, #4]
 8002ef8:	609a      	str	r2, [r3, #8]
 8002efa:	60da      	str	r2, [r3, #12]
 8002efc:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002efe:	2002      	movs	r0, #2
 8002f00:	f7ff ffd7 	bl	8002eb2 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8002f04:	79fb      	ldrb	r3, [r7, #7]
 8002f06:	4a12      	ldr	r2, [pc, #72]	; (8002f50 <BSP_LED_Init+0x6c>)
 8002f08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f0c:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f16:	2302      	movs	r3, #2
 8002f18:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	4a0d      	ldr	r2, [pc, #52]	; (8002f54 <BSP_LED_Init+0x70>)
 8002f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f22:	f107 020c 	add.w	r2, r7, #12
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 ff35 	bl	8003d98 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	4a08      	ldr	r2, [pc, #32]	; (8002f54 <BSP_LED_Init+0x70>)
 8002f32:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	4a05      	ldr	r2, [pc, #20]	; (8002f50 <BSP_LED_Init+0x6c>)
 8002f3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	4619      	mov	r1, r3
 8002f42:	f001 f899 	bl	8004078 <HAL_GPIO_WritePin>
}
 8002f46:	bf00      	nop
 8002f48:	3720      	adds	r7, #32
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	0800f524 	.word	0x0800f524
 8002f54:	20000008 	.word	0x20000008

08002f58 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	4a07      	ldr	r2, [pc, #28]	; (8002f84 <BSP_LED_On+0x2c>)
 8002f66:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	4a06      	ldr	r2, [pc, #24]	; (8002f88 <BSP_LED_On+0x30>)
 8002f6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f72:	2201      	movs	r2, #1
 8002f74:	4619      	mov	r1, r3
 8002f76:	f001 f87f 	bl	8004078 <HAL_GPIO_WritePin>
}
 8002f7a:	bf00      	nop
 8002f7c:	3708      	adds	r7, #8
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	20000008 	.word	0x20000008
 8002f88:	0800f524 	.word	0x0800f524

08002f8c <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	4a07      	ldr	r2, [pc, #28]	; (8002fb8 <BSP_LED_Off+0x2c>)
 8002f9a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	4a06      	ldr	r2, [pc, #24]	; (8002fbc <BSP_LED_Off+0x30>)
 8002fa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f001 f865 	bl	8004078 <HAL_GPIO_WritePin>
}
 8002fae:	bf00      	nop
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	20000008 	.word	0x20000008
 8002fbc:	0800f524 	.word	0x0800f524

08002fc0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b088      	sub	sp, #32
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	460a      	mov	r2, r1
 8002fca:	71fb      	strb	r3, [r7, #7]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8002fd0:	f107 030c 	add.w	r3, r7, #12
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
 8002fde:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d103      	bne.n	8002fee <BSP_PB_Init+0x2e>
 8002fe6:	2004      	movs	r0, #4
 8002fe8:	f7ff ff63 	bl	8002eb2 <LL_AHB2_GRP1_EnableClock>
 8002fec:	e00c      	b.n	8003008 <BSP_PB_Init+0x48>
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d103      	bne.n	8002ffc <BSP_PB_Init+0x3c>
 8002ff4:	2008      	movs	r0, #8
 8002ff6:	f7ff ff5c 	bl	8002eb2 <LL_AHB2_GRP1_EnableClock>
 8002ffa:	e005      	b.n	8003008 <BSP_PB_Init+0x48>
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d102      	bne.n	8003008 <BSP_PB_Init+0x48>
 8003002:	2008      	movs	r0, #8
 8003004:	f7ff ff55 	bl	8002eb2 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8003008:	79bb      	ldrb	r3, [r7, #6]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d117      	bne.n	800303e <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	4a20      	ldr	r2, [pc, #128]	; (8003094 <BSP_PB_Init+0xd4>)
 8003012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003016:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8003018:	2300      	movs	r3, #0
 800301a:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 800301c:	2301      	movs	r3, #1
 800301e:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003020:	2302      	movs	r3, #2
 8003022:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	4a1c      	ldr	r2, [pc, #112]	; (8003098 <BSP_PB_Init+0xd8>)
 8003028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800302c:	f107 020c 	add.w	r2, r7, #12
 8003030:	4611      	mov	r1, r2
 8003032:	4618      	mov	r0, r3
 8003034:	f000 feb0 	bl	8003d98 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8003038:	2001      	movs	r0, #1
 800303a:	f7fe fa4b 	bl	80014d4 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800303e:	79bb      	ldrb	r3, [r7, #6]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d123      	bne.n	800308c <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	4a13      	ldr	r2, [pc, #76]	; (8003094 <BSP_PB_Init+0xd4>)
 8003048:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800304c:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 800304e:	2301      	movs	r3, #1
 8003050:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8003052:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003056:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	4a0f      	ldr	r2, [pc, #60]	; (8003098 <BSP_PB_Init+0xd8>)
 800305c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003060:	f107 020c 	add.w	r2, r7, #12
 8003064:	4611      	mov	r1, r2
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fe96 	bl	8003d98 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	4a0b      	ldr	r2, [pc, #44]	; (800309c <BSP_PB_Init+0xdc>)
 8003070:	5cd3      	ldrb	r3, [r2, r3]
 8003072:	b25b      	sxtb	r3, r3
 8003074:	2200      	movs	r2, #0
 8003076:	210f      	movs	r1, #15
 8003078:	4618      	mov	r0, r3
 800307a:	f000 fa9a 	bl	80035b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	4a06      	ldr	r2, [pc, #24]	; (800309c <BSP_PB_Init+0xdc>)
 8003082:	5cd3      	ldrb	r3, [r2, r3]
 8003084:	b25b      	sxtb	r3, r3
 8003086:	4618      	mov	r0, r3
 8003088:	f000 faad 	bl	80035e6 <HAL_NVIC_EnableIRQ>
  }
}
 800308c:	bf00      	nop
 800308e:	3720      	adds	r7, #32
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	0800f52c 	.word	0x0800f52c
 8003098:	20000014 	.word	0x20000014
 800309c:	0800f534 	.word	0x0800f534

080030a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80030a4:	4b26      	ldr	r3, [pc, #152]	; (8003140 <SystemInit+0xa0>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80030aa:	4b25      	ldr	r3, [pc, #148]	; (8003140 <SystemInit+0xa0>)
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b0:	4a23      	ldr	r2, [pc, #140]	; (8003140 <SystemInit+0xa0>)
 80030b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80030ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030c4:	f043 0301 	orr.w	r3, r3, #1
 80030c8:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80030ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ce:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80030d2:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80030d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030de:	4b19      	ldr	r3, [pc, #100]	; (8003144 <SystemInit+0xa4>)
 80030e0:	4013      	ands	r3, r2
 80030e2:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80030e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030f0:	f023 0305 	bic.w	r3, r3, #5
 80030f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80030f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003100:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003104:	f023 0301 	bic.w	r3, r3, #1
 8003108:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800310c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003110:	4a0d      	ldr	r2, [pc, #52]	; (8003148 <SystemInit+0xa8>)
 8003112:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003118:	4a0b      	ldr	r2, [pc, #44]	; (8003148 <SystemInit+0xa8>)
 800311a:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800311c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800312a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800312c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003130:	2200      	movs	r2, #0
 8003132:	619a      	str	r2, [r3, #24]
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	e000ed00 	.word	0xe000ed00
 8003144:	faf6fefb 	.word	0xfaf6fefb
 8003148:	22041000 	.word	0x22041000

0800314c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800314c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800314e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003150:	3304      	adds	r3, #4

08003152 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003152:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003154:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003156:	d3f9      	bcc.n	800314c <CopyDataInit>
  bx lr
 8003158:	4770      	bx	lr

0800315a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800315a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800315c:	3004      	adds	r0, #4

0800315e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800315e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003160:	d3fb      	bcc.n	800315a <FillZerobss>
  bx lr
 8003162:	4770      	bx	lr

08003164 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003164:	480c      	ldr	r0, [pc, #48]	; (8003198 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003166:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003168:	f7ff ff9a 	bl	80030a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800316c:	480b      	ldr	r0, [pc, #44]	; (800319c <LoopForever+0x6>)
 800316e:	490c      	ldr	r1, [pc, #48]	; (80031a0 <LoopForever+0xa>)
 8003170:	4a0c      	ldr	r2, [pc, #48]	; (80031a4 <LoopForever+0xe>)
 8003172:	2300      	movs	r3, #0
 8003174:	f7ff ffed 	bl	8003152 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003178:	480b      	ldr	r0, [pc, #44]	; (80031a8 <LoopForever+0x12>)
 800317a:	490c      	ldr	r1, [pc, #48]	; (80031ac <LoopForever+0x16>)
 800317c:	4a0c      	ldr	r2, [pc, #48]	; (80031b0 <LoopForever+0x1a>)
 800317e:	2300      	movs	r3, #0
 8003180:	f7ff ffe7 	bl	8003152 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003184:	480b      	ldr	r0, [pc, #44]	; (80031b4 <LoopForever+0x1e>)
 8003186:	490c      	ldr	r1, [pc, #48]	; (80031b8 <LoopForever+0x22>)
 8003188:	2300      	movs	r3, #0
 800318a:	f7ff ffe8 	bl	800315e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800318e:	f00a f919 	bl	800d3c4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003192:	f7ff fa73 	bl	800267c <main>

08003196 <LoopForever>:

LoopForever:
  b LoopForever
 8003196:	e7fe      	b.n	8003196 <LoopForever>
  ldr   r0, =_estack
 8003198:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800319c:	20000008 	.word	0x20000008
 80031a0:	200000a8 	.word	0x200000a8
 80031a4:	0800f684 	.word	0x0800f684
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80031a8:	200301e4 	.word	0x200301e4
 80031ac:	20030a67 	.word	0x20030a67
 80031b0:	0800f75a 	.word	0x0800f75a
  INIT_BSS _sbss, _ebss
 80031b4:	200000e4 	.word	0x200000e4
 80031b8:	20001854 	.word	0x20001854

080031bc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031bc:	e7fe      	b.n	80031bc <ADC1_IRQHandler>
	...

080031c0 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80031c4:	4b05      	ldr	r3, [pc, #20]	; (80031dc <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	4a04      	ldr	r2, [pc, #16]	; (80031dc <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	6053      	str	r3, [r2, #4]
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	e0042000 	.word	0xe0042000

080031e0 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	4a04      	ldr	r2, [pc, #16]	; (80031fc <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80031ea:	f043 0302 	orr.w	r3, r3, #2
 80031ee:	6053      	str	r3, [r2, #4]
}
 80031f0:	bf00      	nop
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	e0042000 	.word	0xe0042000

08003200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003206:	2300      	movs	r3, #0
 8003208:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800320a:	4b0c      	ldr	r3, [pc, #48]	; (800323c <HAL_Init+0x3c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a0b      	ldr	r2, [pc, #44]	; (800323c <HAL_Init+0x3c>)
 8003210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003214:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003216:	2003      	movs	r0, #3
 8003218:	f000 f9c0 	bl	800359c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800321c:	2000      	movs	r0, #0
 800321e:	f000 f80f 	bl	8003240 <HAL_InitTick>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	71fb      	strb	r3, [r7, #7]
 800322c:	e001      	b.n	8003232 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800322e:	f7ff fc32 	bl	8002a96 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003232:	79fb      	ldrb	r3, [r7, #7]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	58004000 	.word	0x58004000

08003240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800324c:	4b17      	ldr	r3, [pc, #92]	; (80032ac <HAL_InitTick+0x6c>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d024      	beq.n	800329e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003254:	f002 f89e 	bl	8005394 <HAL_RCC_GetHCLKFreq>
 8003258:	4602      	mov	r2, r0
 800325a:	4b14      	ldr	r3, [pc, #80]	; (80032ac <HAL_InitTick+0x6c>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	4619      	mov	r1, r3
 8003260:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003264:	fbb3 f3f1 	udiv	r3, r3, r1
 8003268:	fbb2 f3f3 	udiv	r3, r2, r3
 800326c:	4618      	mov	r0, r3
 800326e:	f000 f9d6 	bl	800361e <HAL_SYSTICK_Config>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10f      	bne.n	8003298 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b0f      	cmp	r3, #15
 800327c:	d809      	bhi.n	8003292 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800327e:	2200      	movs	r2, #0
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	f04f 30ff 	mov.w	r0, #4294967295
 8003286:	f000 f994 	bl	80035b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800328a:	4a09      	ldr	r2, [pc, #36]	; (80032b0 <HAL_InitTick+0x70>)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6013      	str	r3, [r2, #0]
 8003290:	e007      	b.n	80032a2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	73fb      	strb	r3, [r7, #15]
 8003296:	e004      	b.n	80032a2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
 800329c:	e001      	b.n	80032a2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	20000028 	.word	0x20000028
 80032b0:	20000024 	.word	0x20000024

080032b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032b8:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <HAL_IncTick+0x20>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	461a      	mov	r2, r3
 80032be:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <HAL_IncTick+0x24>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4413      	add	r3, r2
 80032c4:	4a04      	ldr	r2, [pc, #16]	; (80032d8 <HAL_IncTick+0x24>)
 80032c6:	6013      	str	r3, [r2, #0]
}
 80032c8:	bf00      	nop
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	20000028 	.word	0x20000028
 80032d8:	20000520 	.word	0x20000520

080032dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return uwTick;
 80032e0:	4b03      	ldr	r3, [pc, #12]	; (80032f0 <HAL_GetTick+0x14>)
 80032e2:	681b      	ldr	r3, [r3, #0]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	20000520 	.word	0x20000520

080032f4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80032f8:	4b03      	ldr	r3, [pc, #12]	; (8003308 <HAL_GetTickPrio+0x14>)
 80032fa:	681b      	ldr	r3, [r3, #0]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	20000024 	.word	0x20000024

0800330c <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003310:	4b03      	ldr	r3, [pc, #12]	; (8003320 <HAL_GetTickFreq+0x14>)
 8003312:	781b      	ldrb	r3, [r3, #0]
}
 8003314:	4618      	mov	r0, r3
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	20000028 	.word	0x20000028

08003324 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003328:	f7ff ff4a 	bl	80031c0 <LL_DBGMCU_EnableDBGSleepMode>
}
 800332c:	bf00      	nop
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003334:	f7ff ff54 	bl	80031e0 <LL_DBGMCU_EnableDBGStopMode>
}
 8003338:	bf00      	nop
 800333a:	bd80      	pop	{r7, pc}

0800333c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800334c:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <__NVIC_SetPriorityGrouping+0x44>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003358:	4013      	ands	r3, r2
 800335a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800336c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800336e:	4a04      	ldr	r2, [pc, #16]	; (8003380 <__NVIC_SetPriorityGrouping+0x44>)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	60d3      	str	r3, [r2, #12]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003388:	4b04      	ldr	r3, [pc, #16]	; (800339c <__NVIC_GetPriorityGrouping+0x18>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	0a1b      	lsrs	r3, r3, #8
 800338e:	f003 0307 	and.w	r3, r3, #7
}
 8003392:	4618      	mov	r0, r3
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	e000ed00 	.word	0xe000ed00

080033a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	db0b      	blt.n	80033ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	f003 021f 	and.w	r2, r3, #31
 80033b8:	4907      	ldr	r1, [pc, #28]	; (80033d8 <__NVIC_EnableIRQ+0x38>)
 80033ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	2001      	movs	r0, #1
 80033c2:	fa00 f202 	lsl.w	r2, r0, r2
 80033c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	e000e100 	.word	0xe000e100

080033dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	db12      	blt.n	8003414 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	f003 021f 	and.w	r2, r3, #31
 80033f4:	490a      	ldr	r1, [pc, #40]	; (8003420 <__NVIC_DisableIRQ+0x44>)
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	095b      	lsrs	r3, r3, #5
 80033fc:	2001      	movs	r0, #1
 80033fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003402:	3320      	adds	r3, #32
 8003404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003408:	f3bf 8f4f 	dsb	sy
}
 800340c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800340e:	f3bf 8f6f 	isb	sy
}
 8003412:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	e000e100 	.word	0xe000e100

08003424 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	2b00      	cmp	r3, #0
 8003434:	db0c      	blt.n	8003450 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	f003 021f 	and.w	r2, r3, #31
 800343c:	4907      	ldr	r1, [pc, #28]	; (800345c <__NVIC_SetPendingIRQ+0x38>)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	2001      	movs	r0, #1
 8003446:	fa00 f202 	lsl.w	r2, r0, r2
 800344a:	3340      	adds	r3, #64	; 0x40
 800344c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	e000e100 	.word	0xe000e100

08003460 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800346a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346e:	2b00      	cmp	r3, #0
 8003470:	db0c      	blt.n	800348c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003472:	79fb      	ldrb	r3, [r7, #7]
 8003474:	f003 021f 	and.w	r2, r3, #31
 8003478:	4907      	ldr	r1, [pc, #28]	; (8003498 <__NVIC_ClearPendingIRQ+0x38>)
 800347a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347e:	095b      	lsrs	r3, r3, #5
 8003480:	2001      	movs	r0, #1
 8003482:	fa00 f202 	lsl.w	r2, r0, r2
 8003486:	3360      	adds	r3, #96	; 0x60
 8003488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	e000e100 	.word	0xe000e100

0800349c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	4603      	mov	r3, r0
 80034a4:	6039      	str	r1, [r7, #0]
 80034a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	db0a      	blt.n	80034c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	490c      	ldr	r1, [pc, #48]	; (80034e8 <__NVIC_SetPriority+0x4c>)
 80034b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ba:	0112      	lsls	r2, r2, #4
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	440b      	add	r3, r1
 80034c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034c4:	e00a      	b.n	80034dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	4908      	ldr	r1, [pc, #32]	; (80034ec <__NVIC_SetPriority+0x50>)
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	3b04      	subs	r3, #4
 80034d4:	0112      	lsls	r2, r2, #4
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	440b      	add	r3, r1
 80034da:	761a      	strb	r2, [r3, #24]
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	e000e100 	.word	0xe000e100
 80034ec:	e000ed00 	.word	0xe000ed00

080034f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b089      	sub	sp, #36	; 0x24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f1c3 0307 	rsb	r3, r3, #7
 800350a:	2b04      	cmp	r3, #4
 800350c:	bf28      	it	cs
 800350e:	2304      	movcs	r3, #4
 8003510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3304      	adds	r3, #4
 8003516:	2b06      	cmp	r3, #6
 8003518:	d902      	bls.n	8003520 <NVIC_EncodePriority+0x30>
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	3b03      	subs	r3, #3
 800351e:	e000      	b.n	8003522 <NVIC_EncodePriority+0x32>
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003524:	f04f 32ff 	mov.w	r2, #4294967295
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	fa02 f303 	lsl.w	r3, r2, r3
 800352e:	43da      	mvns	r2, r3
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	401a      	ands	r2, r3
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003538:	f04f 31ff 	mov.w	r1, #4294967295
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	fa01 f303 	lsl.w	r3, r1, r3
 8003542:	43d9      	mvns	r1, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003548:	4313      	orrs	r3, r2
         );
}
 800354a:	4618      	mov	r0, r3
 800354c:	3724      	adds	r7, #36	; 0x24
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
	...

08003558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3b01      	subs	r3, #1
 8003564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003568:	d301      	bcc.n	800356e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800356a:	2301      	movs	r3, #1
 800356c:	e00f      	b.n	800358e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800356e:	4a0a      	ldr	r2, [pc, #40]	; (8003598 <SysTick_Config+0x40>)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3b01      	subs	r3, #1
 8003574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003576:	210f      	movs	r1, #15
 8003578:	f04f 30ff 	mov.w	r0, #4294967295
 800357c:	f7ff ff8e 	bl	800349c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003580:	4b05      	ldr	r3, [pc, #20]	; (8003598 <SysTick_Config+0x40>)
 8003582:	2200      	movs	r2, #0
 8003584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003586:	4b04      	ldr	r3, [pc, #16]	; (8003598 <SysTick_Config+0x40>)
 8003588:	2207      	movs	r2, #7
 800358a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	e000e010 	.word	0xe000e010

0800359c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f7ff fec9 	bl	800333c <__NVIC_SetPriorityGrouping>
}
 80035aa:	bf00      	nop
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b086      	sub	sp, #24
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	4603      	mov	r3, r0
 80035ba:	60b9      	str	r1, [r7, #8]
 80035bc:	607a      	str	r2, [r7, #4]
 80035be:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035c0:	f7ff fee0 	bl	8003384 <__NVIC_GetPriorityGrouping>
 80035c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	6978      	ldr	r0, [r7, #20]
 80035cc:	f7ff ff90 	bl	80034f0 <NVIC_EncodePriority>
 80035d0:	4602      	mov	r2, r0
 80035d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d6:	4611      	mov	r1, r2
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff ff5f 	bl	800349c <__NVIC_SetPriority>
}
 80035de:	bf00      	nop
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b082      	sub	sp, #8
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	4603      	mov	r3, r0
 80035ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff fed3 	bl	80033a0 <__NVIC_EnableIRQ>
}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003602:	b580      	push	{r7, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
 8003608:	4603      	mov	r3, r0
 800360a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800360c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff fee3 	bl	80033dc <__NVIC_DisableIRQ>
}
 8003616:	bf00      	nop
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff ff96 	bl	8003558 <SysTick_Config>
 800362c:	4603      	mov	r3, r0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	4603      	mov	r3, r0
 800363e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003644:	4618      	mov	r0, r3
 8003646:	f7ff feed 	bl	8003424 <__NVIC_SetPendingIRQ>
}
 800364a:	bf00      	nop
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	4603      	mov	r3, r0
 800365a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800365c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff fefd 	bl	8003460 <__NVIC_ClearPendingIRQ>
}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e08e      	b.n	80037a0 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	4b47      	ldr	r3, [pc, #284]	; (80037a8 <HAL_DMA_Init+0x138>)
 800368a:	429a      	cmp	r2, r3
 800368c:	d80f      	bhi.n	80036ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	461a      	mov	r2, r3
 8003694:	4b45      	ldr	r3, [pc, #276]	; (80037ac <HAL_DMA_Init+0x13c>)
 8003696:	4413      	add	r3, r2
 8003698:	4a45      	ldr	r2, [pc, #276]	; (80037b0 <HAL_DMA_Init+0x140>)
 800369a:	fba2 2303 	umull	r2, r3, r2, r3
 800369e:	091b      	lsrs	r3, r3, #4
 80036a0:	009a      	lsls	r2, r3, #2
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a42      	ldr	r2, [pc, #264]	; (80037b4 <HAL_DMA_Init+0x144>)
 80036aa:	641a      	str	r2, [r3, #64]	; 0x40
 80036ac:	e00e      	b.n	80036cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	461a      	mov	r2, r3
 80036b4:	4b40      	ldr	r3, [pc, #256]	; (80037b8 <HAL_DMA_Init+0x148>)
 80036b6:	4413      	add	r3, r2
 80036b8:	4a3d      	ldr	r2, [pc, #244]	; (80037b0 <HAL_DMA_Init+0x140>)
 80036ba:	fba2 2303 	umull	r2, r3, r2, r3
 80036be:	091b      	lsrs	r3, r3, #4
 80036c0:	009a      	lsls	r2, r3, #2
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a3c      	ldr	r2, [pc, #240]	; (80037bc <HAL_DMA_Init+0x14c>)
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2202      	movs	r2, #2
 80036d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80036e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80036f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003708:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fa74 	bl	8003c0c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800372c:	d102      	bne.n	8003734 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800373c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003740:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800374a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d010      	beq.n	8003776 <HAL_DMA_Init+0x106>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b04      	cmp	r3, #4
 800375a:	d80c      	bhi.n	8003776 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fa93 	bl	8003c88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003772:	605a      	str	r2, [r3, #4]
 8003774:	e008      	b.n	8003788 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40020407 	.word	0x40020407
 80037ac:	bffdfff8 	.word	0xbffdfff8
 80037b0:	cccccccd 	.word	0xcccccccd
 80037b4:	40020000 	.word	0x40020000
 80037b8:	bffdfbf8 	.word	0xbffdfbf8
 80037bc:	40020400 	.word	0x40020400

080037c0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_DMA_Start_IT+0x20>
 80037dc:	2302      	movs	r3, #2
 80037de:	e066      	b.n	80038ae <HAL_DMA_Start_IT+0xee>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d155      	bne.n	80038a0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2202      	movs	r2, #2
 80037f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f022 0201 	bic.w	r2, r2, #1
 8003810:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 f9b9 	bl	8003b90 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	2b00      	cmp	r3, #0
 8003824:	d008      	beq.n	8003838 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 020e 	orr.w	r2, r2, #14
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	e00f      	b.n	8003858 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0204 	bic.w	r2, r2, #4
 8003846:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 020a 	orr.w	r2, r2, #10
 8003856:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d007      	beq.n	8003876 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003874:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800387a:	2b00      	cmp	r3, #0
 800387c:	d007      	beq.n	800388e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003888:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800388c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f042 0201 	orr.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	e005      	b.n	80038ac <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80038a8:	2302      	movs	r3, #2
 80038aa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80038ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e04f      	b.n	8003968 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d008      	beq.n	80038e6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2204      	movs	r2, #4
 80038d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e040      	b.n	8003968 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 020e 	bic.w	r2, r2, #14
 80038f4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003904:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0201 	bic.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	f003 021c 	and.w	r2, r3, #28
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003922:	2101      	movs	r1, #1
 8003924:	fa01 f202 	lsl.w	r2, r1, r2
 8003928:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003932:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00c      	beq.n	8003956 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003946:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800394a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003954:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800397c:	2300      	movs	r3, #0
 800397e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d005      	beq.n	8003998 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2204      	movs	r2, #4
 8003990:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	73fb      	strb	r3, [r7, #15]
 8003996:	e047      	b.n	8003a28 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 020e 	bic.w	r2, r2, #14
 80039a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0201 	bic.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039c6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039cc:	f003 021c 	and.w	r2, r3, #28
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	2101      	movs	r1, #1
 80039d6:	fa01 f202 	lsl.w	r2, r1, r2
 80039da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00c      	beq.n	8003a08 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a06:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	4798      	blx	r3
    }
  }
  return status;
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a4e:	f003 031c 	and.w	r3, r3, #28
 8003a52:	2204      	movs	r2, #4
 8003a54:	409a      	lsls	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d026      	beq.n	8003aac <HAL_DMA_IRQHandler+0x7a>
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d021      	beq.n	8003aac <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d107      	bne.n	8003a86 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0204 	bic.w	r2, r2, #4
 8003a84:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8a:	f003 021c 	and.w	r2, r3, #28
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	2104      	movs	r1, #4
 8003a94:	fa01 f202 	lsl.w	r2, r1, r2
 8003a98:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d071      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003aaa:	e06c      	b.n	8003b86 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab0:	f003 031c 	and.w	r3, r3, #28
 8003ab4:	2202      	movs	r2, #2
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4013      	ands	r3, r2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d02e      	beq.n	8003b1e <HAL_DMA_IRQHandler+0xec>
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d029      	beq.n	8003b1e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0320 	and.w	r3, r3, #32
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10b      	bne.n	8003af0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 020a 	bic.w	r2, r2, #10
 8003ae6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af4:	f003 021c 	and.w	r2, r3, #28
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	2102      	movs	r1, #2
 8003afe:	fa01 f202 	lsl.w	r2, r1, r2
 8003b02:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d038      	beq.n	8003b86 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003b1c:	e033      	b.n	8003b86 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	f003 031c 	and.w	r3, r3, #28
 8003b26:	2208      	movs	r2, #8
 8003b28:	409a      	lsls	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d02a      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x156>
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d025      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 020e 	bic.w	r2, r2, #14
 8003b4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b50:	f003 021c 	and.w	r2, r3, #28
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	2101      	movs	r1, #1
 8003b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8003b5e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d004      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003b86:	bf00      	nop
 8003b88:	bf00      	nop
}
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
 8003b9c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ba6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d004      	beq.n	8003bba <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003bb8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbe:	f003 021c 	and.w	r2, r3, #28
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bcc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b10      	cmp	r3, #16
 8003bdc:	d108      	bne.n	8003bf0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003bee:	e007      	b.n	8003c00 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	60da      	str	r2, [r3, #12]
}
 8003c00:	bf00      	nop
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4b17      	ldr	r3, [pc, #92]	; (8003c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d80a      	bhi.n	8003c36 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c24:	089b      	lsrs	r3, r3, #2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c2c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6493      	str	r3, [r2, #72]	; 0x48
 8003c34:	e007      	b.n	8003c46 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3a:	089b      	lsrs	r3, r3, #2
 8003c3c:	009a      	lsls	r2, r3, #2
 8003c3e:	4b0f      	ldr	r3, [pc, #60]	; (8003c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003c40:	4413      	add	r3, r2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	3b08      	subs	r3, #8
 8003c4e:	4a0c      	ldr	r2, [pc, #48]	; (8003c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003c50:	fba2 2303 	umull	r2, r3, r2, r3
 8003c54:	091b      	lsrs	r3, r3, #4
 8003c56:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a0a      	ldr	r2, [pc, #40]	; (8003c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003c5c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f003 031f 	and.w	r3, r3, #31
 8003c64:	2201      	movs	r2, #1
 8003c66:	409a      	lsls	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c6c:	bf00      	nop
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	40020407 	.word	0x40020407
 8003c7c:	4002081c 	.word	0x4002081c
 8003c80:	cccccccd 	.word	0xcccccccd
 8003c84:	40020880 	.word	0x40020880

08003c88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c98:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c9e:	4413      	add	r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a09      	ldr	r2, [pc, #36]	; (8003cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003cac:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	409a      	lsls	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003cbe:	bf00      	nop
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	1000823f 	.word	0x1000823f
 8003cd0:	40020940 	.word	0x40020940

08003cd4 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d12b      	bne.n	8003d42 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_DMAEx_ConfigMuxSync+0x24>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e025      	b.n	8003d44 <HAL_DMAEx_ConfigMuxSync+0x70>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	4b12      	ldr	r3, [pc, #72]	; (8003d50 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	6811      	ldr	r1, [r2, #0]
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	68d2      	ldr	r2, [r2, #12]
 8003d12:	3a01      	subs	r2, #1
 8003d14:	04d2      	lsls	r2, r2, #19
 8003d16:	4311      	orrs	r1, r2
 8003d18:	683a      	ldr	r2, [r7, #0]
 8003d1a:	6852      	ldr	r2, [r2, #4]
 8003d1c:	4311      	orrs	r1, r2
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	7a12      	ldrb	r2, [r2, #8]
 8003d22:	0412      	lsls	r2, r2, #16
 8003d24:	4311      	orrs	r1, r2
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	7a52      	ldrb	r2, [r2, #9]
 8003d2a:	0252      	lsls	r2, r2, #9
 8003d2c:	4311      	orrs	r1, r2
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d32:	430b      	orrs	r3, r1
 8003d34:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	e000      	b.n	8003d44 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
  }
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr
 8003d50:	e000fdff 	.word	0xe000fdff

08003d54 <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b087      	sub	sp, #28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	0c1b      	lsrs	r3, r3, #16
 8003d62:	f003 0301 	and.w	r3, r3, #1
 8003d66:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 031f 	and.w	r3, r3, #31
 8003d70:	2201      	movs	r2, #1
 8003d72:	fa02 f303 	lsl.w	r3, r2, r3
 8003d76:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	015b      	lsls	r3, r3, #5
 8003d7c:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8003d80:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8003d84:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	601a      	str	r2, [r3, #0]
}
 8003d8c:	bf00      	nop
 8003d8e:	371c      	adds	r7, #28
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003da6:	e14c      	b.n	8004042 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	2101      	movs	r1, #1
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	fa01 f303 	lsl.w	r3, r1, r3
 8003db4:	4013      	ands	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 813e 	beq.w	800403c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 0303 	and.w	r3, r3, #3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d005      	beq.n	8003dd8 <HAL_GPIO_Init+0x40>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d130      	bne.n	8003e3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	2203      	movs	r2, #3
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	43db      	mvns	r3, r3
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4013      	ands	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e0e:	2201      	movs	r2, #1
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43db      	mvns	r3, r3
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	091b      	lsrs	r3, r3, #4
 8003e24:	f003 0201 	and.w	r2, r3, #1
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	2b03      	cmp	r3, #3
 8003e44:	d017      	beq.n	8003e76 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	2203      	movs	r2, #3
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	43db      	mvns	r3, r3
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d123      	bne.n	8003eca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	08da      	lsrs	r2, r3, #3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3208      	adds	r2, #8
 8003e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	220f      	movs	r2, #15
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	691a      	ldr	r2, [r3, #16]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	08da      	lsrs	r2, r3, #3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3208      	adds	r2, #8
 8003ec4:	6939      	ldr	r1, [r7, #16]
 8003ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	2203      	movs	r2, #3
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43db      	mvns	r3, r3
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f003 0203 	and.w	r2, r3, #3
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 8098 	beq.w	800403c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003f0c:	4a54      	ldr	r2, [pc, #336]	; (8004060 <HAL_GPIO_Init+0x2c8>)
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	089b      	lsrs	r3, r3, #2
 8003f12:	3302      	adds	r3, #2
 8003f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f003 0303 	and.w	r3, r3, #3
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	220f      	movs	r2, #15
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f36:	d019      	beq.n	8003f6c <HAL_GPIO_Init+0x1d4>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a4a      	ldr	r2, [pc, #296]	; (8004064 <HAL_GPIO_Init+0x2cc>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d013      	beq.n	8003f68 <HAL_GPIO_Init+0x1d0>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a49      	ldr	r2, [pc, #292]	; (8004068 <HAL_GPIO_Init+0x2d0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00d      	beq.n	8003f64 <HAL_GPIO_Init+0x1cc>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a48      	ldr	r2, [pc, #288]	; (800406c <HAL_GPIO_Init+0x2d4>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d007      	beq.n	8003f60 <HAL_GPIO_Init+0x1c8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a47      	ldr	r2, [pc, #284]	; (8004070 <HAL_GPIO_Init+0x2d8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d101      	bne.n	8003f5c <HAL_GPIO_Init+0x1c4>
 8003f58:	2304      	movs	r3, #4
 8003f5a:	e008      	b.n	8003f6e <HAL_GPIO_Init+0x1d6>
 8003f5c:	2307      	movs	r3, #7
 8003f5e:	e006      	b.n	8003f6e <HAL_GPIO_Init+0x1d6>
 8003f60:	2303      	movs	r3, #3
 8003f62:	e004      	b.n	8003f6e <HAL_GPIO_Init+0x1d6>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e002      	b.n	8003f6e <HAL_GPIO_Init+0x1d6>
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <HAL_GPIO_Init+0x1d6>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	f002 0203 	and.w	r2, r2, #3
 8003f74:	0092      	lsls	r2, r2, #2
 8003f76:	4093      	lsls	r3, r2
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f7e:	4938      	ldr	r1, [pc, #224]	; (8004060 <HAL_GPIO_Init+0x2c8>)
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	089b      	lsrs	r3, r3, #2
 8003f84:	3302      	adds	r3, #2
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f8c:	4b39      	ldr	r3, [pc, #228]	; (8004074 <HAL_GPIO_Init+0x2dc>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	43db      	mvns	r3, r3
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fb0:	4a30      	ldr	r2, [pc, #192]	; (8004074 <HAL_GPIO_Init+0x2dc>)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003fb6:	4b2f      	ldr	r3, [pc, #188]	; (8004074 <HAL_GPIO_Init+0x2dc>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fda:	4a26      	ldr	r2, [pc, #152]	; (8004074 <HAL_GPIO_Init+0x2dc>)
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003fe0:	4b24      	ldr	r3, [pc, #144]	; (8004074 <HAL_GPIO_Init+0x2dc>)
 8003fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	43db      	mvns	r3, r3
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004006:	4a1b      	ldr	r2, [pc, #108]	; (8004074 <HAL_GPIO_Init+0x2dc>)
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800400e:	4b19      	ldr	r3, [pc, #100]	; (8004074 <HAL_GPIO_Init+0x2dc>)
 8004010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	43db      	mvns	r3, r3
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4013      	ands	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004034:	4a0f      	ldr	r2, [pc, #60]	; (8004074 <HAL_GPIO_Init+0x2dc>)
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	3301      	adds	r3, #1
 8004040:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	fa22 f303 	lsr.w	r3, r2, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	f47f aeab 	bne.w	8003da8 <HAL_GPIO_Init+0x10>
  }
}
 8004052:	bf00      	nop
 8004054:	bf00      	nop
 8004056:	371c      	adds	r7, #28
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	40010000 	.word	0x40010000
 8004064:	48000400 	.word	0x48000400
 8004068:	48000800 	.word	0x48000800
 800406c:	48000c00 	.word	0x48000c00
 8004070:	48001000 	.word	0x48001000
 8004074:	58000800 	.word	0x58000800

08004078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	807b      	strh	r3, [r7, #2]
 8004084:	4613      	mov	r3, r2
 8004086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004088:	787b      	ldrb	r3, [r7, #1]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800408e:	887a      	ldrh	r2, [r7, #2]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004094:	e002      	b.n	800409c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004096:	887a      	ldrh	r2, [r7, #2]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	4603      	mov	r3, r0
 80040b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80040b2:	4b08      	ldr	r3, [pc, #32]	; (80040d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	88fb      	ldrh	r3, [r7, #6]
 80040b8:	4013      	ands	r3, r2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d006      	beq.n	80040cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040be:	4a05      	ldr	r2, [pc, #20]	; (80040d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040c0:	88fb      	ldrh	r3, [r7, #6]
 80040c2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040c4:	88fb      	ldrh	r3, [r7, #6]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fd fa67 	bl	800159a <HAL_GPIO_EXTI_Callback>
  }
}
 80040cc:	bf00      	nop
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	58000800 	.word	0x58000800

080040d8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80040de:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <HAL_HSEM_IRQHandler+0x30>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80040e4:	4b08      	ldr	r3, [pc, #32]	; (8004108 <HAL_HSEM_IRQHandler+0x30>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	43db      	mvns	r3, r3
 80040ec:	4906      	ldr	r1, [pc, #24]	; (8004108 <HAL_HSEM_IRQHandler+0x30>)
 80040ee:	4013      	ands	r3, r2
 80040f0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80040f2:	4a05      	ldr	r2, [pc, #20]	; (8004108 <HAL_HSEM_IRQHandler+0x30>)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f807 	bl	800410c <HAL_HSEM_FreeCallback>
}
 80040fe:	bf00      	nop
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	58001500 	.word	0x58001500

0800410c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d01e      	beq.n	8004170 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004132:	4b13      	ldr	r3, [pc, #76]	; (8004180 <HAL_IPCC_Init+0x60>)
 8004134:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d102      	bne.n	8004148 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fe fcb8 	bl	8002ab8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004148:	68b8      	ldr	r0, [r7, #8]
 800414a:	f000 f85b 	bl	8004204 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f82c 	bl	80041b8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800416e:	e001      	b.n	8004174 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004174:	7bfb      	ldrb	r3, [r7, #15]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	58000c00 	.word	0x58000c00

08004184 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	4613      	mov	r3, r2
 8004190:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004192:	bf00      	nop
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800419e:	b480      	push	{r7}
 80041a0:	b085      	sub	sp, #20
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	4613      	mov	r3, r2
 80041aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80041ac:	bf00      	nop
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80041c0:	2300      	movs	r3, #0
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	e00f      	b.n	80041e6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	4a0b      	ldr	r2, [pc, #44]	; (80041fc <IPCC_SetDefaultCallbacks+0x44>)
 80041d0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	3306      	adds	r3, #6
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	4a08      	ldr	r2, [pc, #32]	; (8004200 <IPCC_SetDefaultCallbacks+0x48>)
 80041de:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	3301      	adds	r3, #1
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b05      	cmp	r3, #5
 80041ea:	d9ec      	bls.n	80041c6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80041ec:	bf00      	nop
 80041ee:	bf00      	nop
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	08004185 	.word	0x08004185
 8004200:	0800419f 	.word	0x0800419f

08004204 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004218:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	223f      	movs	r2, #63	; 0x3f
 800421e:	609a      	str	r2, [r3, #8]
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004230:	4b05      	ldr	r3, [pc, #20]	; (8004248 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a04      	ldr	r2, [pc, #16]	; (8004248 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800423a:	6013      	str	r3, [r2, #0]
}
 800423c:	bf00      	nop
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	58000400 	.word	0x58000400

0800424c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004250:	4b04      	ldr	r3, [pc, #16]	; (8004264 <HAL_PWREx_GetVoltageRange+0x18>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004258:	4618      	mov	r0, r3
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	58000400 	.word	0x58000400

08004268 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800426c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800427a:	d101      	bne.n	8004280 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <LL_RCC_HSE_Enable>:
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800429a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429e:	6013      	str	r3, [r2, #0]
}
 80042a0:	bf00      	nop
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <LL_RCC_HSE_Disable>:
{
 80042aa:	b480      	push	{r7}
 80042ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80042ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042bc:	6013      	str	r3, [r2, #0]
}
 80042be:	bf00      	nop
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <LL_RCC_HSE_IsReady>:
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80042cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042da:	d101      	bne.n	80042e0 <LL_RCC_HSE_IsReady+0x18>
 80042dc:	2301      	movs	r3, #1
 80042de:	e000      	b.n	80042e2 <LL_RCC_HSE_IsReady+0x1a>
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <LL_RCC_HSI_Enable>:
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80042f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042fe:	6013      	str	r3, [r2, #0]
}
 8004300:	bf00      	nop
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <LL_RCC_HSI_Disable>:
{
 800430a:	b480      	push	{r7}
 800430c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800430e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800431c:	6013      	str	r3, [r2, #0]
}
 800431e:	bf00      	nop
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <LL_RCC_HSI_IsReady>:
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800432c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004336:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800433a:	d101      	bne.n	8004340 <LL_RCC_HSI_IsReady+0x18>
 800433c:	2301      	movs	r3, #1
 800433e:	e000      	b.n	8004342 <LL_RCC_HSI_IsReady+0x1a>
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <LL_RCC_HSI_SetCalibTrimming>:
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004354:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	061b      	lsls	r3, r3, #24
 8004362:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004366:	4313      	orrs	r3, r2
 8004368:	604b      	str	r3, [r1, #4]
}
 800436a:	bf00      	nop
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <LL_RCC_HSI48_Enable>:
{
 8004376:	b480      	push	{r7}
 8004378:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800437a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800437e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004382:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800438e:	bf00      	nop
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <LL_RCC_HSI48_Disable>:
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800439c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043a8:	f023 0301 	bic.w	r3, r3, #1
 80043ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80043b0:	bf00      	nop
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <LL_RCC_HSI48_IsReady>:
{
 80043ba:	b480      	push	{r7}
 80043bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80043be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d101      	bne.n	80043d2 <LL_RCC_HSI48_IsReady+0x18>
 80043ce:	2301      	movs	r3, #1
 80043d0:	e000      	b.n	80043d4 <LL_RCC_HSI48_IsReady+0x1a>
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr

080043de <LL_RCC_LSE_Enable>:
{
 80043de:	b480      	push	{r7}
 80043e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80043e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80043ee:	f043 0301 	orr.w	r3, r3, #1
 80043f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80043f6:	bf00      	nop
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <LL_RCC_LSE_Disable>:
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004410:	f023 0301 	bic.w	r3, r3, #1
 8004414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004418:	bf00      	nop
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <LL_RCC_LSE_EnableBypass>:
{
 8004422:	b480      	push	{r7}
 8004424:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800442a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800442e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004432:	f043 0304 	orr.w	r3, r3, #4
 8004436:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800443a:	bf00      	nop
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <LL_RCC_LSE_DisableBypass>:
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800444c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004450:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004454:	f023 0304 	bic.w	r3, r3, #4
 8004458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800445c:	bf00      	nop
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <LL_RCC_LSE_IsReady>:
{
 8004466:	b480      	push	{r7}
 8004468:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800446a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b02      	cmp	r3, #2
 8004478:	d101      	bne.n	800447e <LL_RCC_LSE_IsReady+0x18>
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <LL_RCC_LSE_IsReady+0x1a>
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <LL_RCC_LSI1_Enable>:
{
 800448a:	b480      	push	{r7}
 800448c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800448e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004496:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800449a:	f043 0301 	orr.w	r3, r3, #1
 800449e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80044a2:	bf00      	nop
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <LL_RCC_LSI1_Disable>:
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80044b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044bc:	f023 0301 	bic.w	r3, r3, #1
 80044c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80044c4:	bf00      	nop
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr

080044ce <LL_RCC_LSI1_IsReady>:
{
 80044ce:	b480      	push	{r7}
 80044d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80044d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d101      	bne.n	80044e6 <LL_RCC_LSI1_IsReady+0x18>
 80044e2:	2301      	movs	r3, #1
 80044e4:	e000      	b.n	80044e8 <LL_RCC_LSI1_IsReady+0x1a>
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <LL_RCC_LSI2_Enable>:
{
 80044f2:	b480      	push	{r7}
 80044f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80044f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004502:	f043 0304 	orr.w	r3, r3, #4
 8004506:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800450a:	bf00      	nop
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <LL_RCC_LSI2_Disable>:
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800451c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004520:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004524:	f023 0304 	bic.w	r3, r3, #4
 8004528:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800452c:	bf00      	nop
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr

08004536 <LL_RCC_LSI2_IsReady>:
{
 8004536:	b480      	push	{r7}
 8004538:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800453a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800453e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b08      	cmp	r3, #8
 8004548:	d101      	bne.n	800454e <LL_RCC_LSI2_IsReady+0x18>
 800454a:	2301      	movs	r3, #1
 800454c:	e000      	b.n	8004550 <LL_RCC_LSI2_IsReady+0x1a>
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <LL_RCC_LSI2_SetTrimming>:
{
 800455a:	b480      	push	{r7}
 800455c:	b083      	sub	sp, #12
 800455e:	af00      	add	r7, sp, #0
 8004560:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004566:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800456a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	021b      	lsls	r3, r3, #8
 8004572:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004576:	4313      	orrs	r3, r2
 8004578:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <LL_RCC_MSI_Enable>:
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800458c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	6013      	str	r3, [r2, #0]
}
 800459c:	bf00      	nop
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <LL_RCC_MSI_Disable>:
{
 80045a6:	b480      	push	{r7}
 80045a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80045aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045b4:	f023 0301 	bic.w	r3, r3, #1
 80045b8:	6013      	str	r3, [r2, #0]
}
 80045ba:	bf00      	nop
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <LL_RCC_MSI_IsReady>:
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80045c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d101      	bne.n	80045da <LL_RCC_MSI_IsReady+0x16>
 80045d6:	2301      	movs	r3, #1
 80045d8:	e000      	b.n	80045dc <LL_RCC_MSI_IsReady+0x18>
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr

080045e6 <LL_RCC_MSI_SetRange>:
{
 80045e6:	b480      	push	{r7}
 80045e8:	b083      	sub	sp, #12
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80045ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4313      	orrs	r3, r2
 8004600:	600b      	str	r3, [r1, #0]
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <LL_RCC_MSI_GetRange>:
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800461e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2bb0      	cmp	r3, #176	; 0xb0
 8004624:	d901      	bls.n	800462a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004626:	23b0      	movs	r3, #176	; 0xb0
 8004628:	607b      	str	r3, [r7, #4]
  return msiRange;
 800462a:	687b      	ldr	r3, [r7, #4]
}
 800462c:	4618      	mov	r0, r3
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004640:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	021b      	lsls	r3, r3, #8
 800464e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004652:	4313      	orrs	r3, r2
 8004654:	604b      	str	r3, [r1, #4]
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <LL_RCC_SetSysClkSource>:
{
 8004662:	b480      	push	{r7}
 8004664:	b083      	sub	sp, #12
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800466a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f023 0203 	bic.w	r2, r3, #3
 8004674:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4313      	orrs	r3, r2
 800467c:	608b      	str	r3, [r1, #8]
}
 800467e:	bf00      	nop
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <LL_RCC_GetSysClkSource>:
{
 800468a:	b480      	push	{r7}
 800468c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800468e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 030c 	and.w	r3, r3, #12
}
 8004698:	4618      	mov	r0, r3
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <LL_RCC_SetAHBPrescaler>:
{
 80046a2:	b480      	push	{r7}
 80046a4:	b083      	sub	sp, #12
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80046aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	608b      	str	r3, [r1, #8]
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <LL_C2_RCC_SetAHBPrescaler>:
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80046d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80046da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <LL_RCC_SetAHB4Prescaler>:
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80046fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004702:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004706:	f023 020f 	bic.w	r2, r3, #15
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	091b      	lsrs	r3, r3, #4
 800470e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004712:	4313      	orrs	r3, r2
 8004714:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <LL_RCC_SetAPB1Prescaler>:
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800472c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004736:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4313      	orrs	r3, r2
 800473e:	608b      	str	r3, [r1, #8]
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <LL_RCC_SetAPB2Prescaler>:
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800475e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4313      	orrs	r3, r2
 8004766:	608b      	str	r3, [r1, #8]
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <LL_RCC_GetAHBPrescaler>:
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004782:	4618      	mov	r0, r3
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <LL_RCC_GetAHB4Prescaler>:
{
 800478c:	b480      	push	{r7}
 800478e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004794:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004798:	011b      	lsls	r3, r3, #4
 800479a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <LL_RCC_GetAPB1Prescaler>:
{
 80047a8:	b480      	push	{r7}
 80047aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80047ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <LL_RCC_GetAPB2Prescaler>:
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80047c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <LL_RCC_PLL_Enable>:
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80047dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047ea:	6013      	str	r3, [r2, #0]
}
 80047ec:	bf00      	nop
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <LL_RCC_PLL_Disable>:
{
 80047f6:	b480      	push	{r7}
 80047f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80047fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004804:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004808:	6013      	str	r3, [r2, #0]
}
 800480a:	bf00      	nop
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <LL_RCC_PLL_IsReady>:
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004822:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004826:	d101      	bne.n	800482c <LL_RCC_PLL_IsReady+0x18>
 8004828:	2301      	movs	r3, #1
 800482a:	e000      	b.n	800482e <LL_RCC_PLL_IsReady+0x1a>
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <LL_RCC_PLL_GetN>:
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800483c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	0a1b      	lsrs	r3, r3, #8
 8004844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004848:	4618      	mov	r0, r3
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <LL_RCC_PLL_GetR>:
{
 8004852:	b480      	push	{r7}
 8004854:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004860:	4618      	mov	r0, r3
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <LL_RCC_PLL_GetDivider>:
{
 800486a:	b480      	push	{r7}
 800486c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800486e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004878:	4618      	mov	r0, r3
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <LL_RCC_PLL_GetMainSource>:
{
 8004882:	b480      	push	{r7}
 8004884:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	f003 0303 	and.w	r3, r3, #3
}
 8004890:	4618      	mov	r0, r3
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <LL_RCC_IsActiveFlag_HPRE>:
{
 800489a:	b480      	push	{r7}
 800489c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800489e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ac:	d101      	bne.n	80048b2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80048ae:	2301      	movs	r3, #1
 80048b0:	e000      	b.n	80048b4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80048be:	b480      	push	{r7}
 80048c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80048c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80048ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048d2:	d101      	bne.n	80048d8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80048d4:	2301      	movs	r3, #1
 80048d6:	e000      	b.n	80048da <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80048e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80048f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f8:	d101      	bne.n	80048fe <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <LL_RCC_IsActiveFlag_PPRE1>:
{
 800490a:	b480      	push	{r7}
 800490c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800490e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004918:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800491c:	d101      	bne.n	8004922 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800491e:	2301      	movs	r3, #1
 8004920:	e000      	b.n	8004924 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <LL_RCC_IsActiveFlag_PPRE2>:
{
 800492e:	b480      	push	{r7}
 8004930:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800493c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004940:	d101      	bne.n	8004946 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004942:	2301      	movs	r3, #1
 8004944:	e000      	b.n	8004948 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
	...

08004954 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004954:	b590      	push	{r4, r7, lr}
 8004956:	b08d      	sub	sp, #52	; 0x34
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e363      	b.n	800502e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0320 	and.w	r3, r3, #32
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 808d 	beq.w	8004a8e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004974:	f7ff fe89 	bl	800468a <LL_RCC_GetSysClkSource>
 8004978:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800497a:	f7ff ff82 	bl	8004882 <LL_RCC_PLL_GetMainSource>
 800497e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004982:	2b00      	cmp	r3, #0
 8004984:	d005      	beq.n	8004992 <HAL_RCC_OscConfig+0x3e>
 8004986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004988:	2b0c      	cmp	r3, #12
 800498a:	d147      	bne.n	8004a1c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800498c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498e:	2b01      	cmp	r3, #1
 8004990:	d144      	bne.n	8004a1c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e347      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80049a2:	f7ff fe34 	bl	800460e <LL_RCC_MSI_GetRange>
 80049a6:	4603      	mov	r3, r0
 80049a8:	429c      	cmp	r4, r3
 80049aa:	d914      	bls.n	80049d6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 fd2f 	bl	8005414 <RCC_SetFlashLatencyFromMSIRange>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e336      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff fe0e 	bl	80045e6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7ff fe32 	bl	8004638 <LL_RCC_MSI_SetCalibTrimming>
 80049d4:	e013      	b.n	80049fe <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff fe03 	bl	80045e6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff fe27 	bl	8004638 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	4618      	mov	r0, r3
 80049f0:	f000 fd10 	bl	8005414 <RCC_SetFlashLatencyFromMSIRange>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e317      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80049fe:	f000 fcc9 	bl	8005394 <HAL_RCC_GetHCLKFreq>
 8004a02:	4603      	mov	r3, r0
 8004a04:	4aa4      	ldr	r2, [pc, #656]	; (8004c98 <HAL_RCC_OscConfig+0x344>)
 8004a06:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a08:	4ba4      	ldr	r3, [pc, #656]	; (8004c9c <HAL_RCC_OscConfig+0x348>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7fe fc17 	bl	8003240 <HAL_InitTick>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d039      	beq.n	8004a8c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e308      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	69db      	ldr	r3, [r3, #28]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d01e      	beq.n	8004a62 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a24:	f7ff fdb0 	bl	8004588 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a28:	f7fe fc58 	bl	80032dc <HAL_GetTick>
 8004a2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a30:	f7fe fc54 	bl	80032dc <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e2f5      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004a42:	f7ff fdbf 	bl	80045c4 <LL_RCC_MSI_IsReady>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0f1      	beq.n	8004a30 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7ff fdc8 	bl	80045e6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a1b      	ldr	r3, [r3, #32]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7ff fdec 	bl	8004638 <LL_RCC_MSI_SetCalibTrimming>
 8004a60:	e015      	b.n	8004a8e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a62:	f7ff fda0 	bl	80045a6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a66:	f7fe fc39 	bl	80032dc <HAL_GetTick>
 8004a6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004a6c:	e008      	b.n	8004a80 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a6e:	f7fe fc35 	bl	80032dc <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d901      	bls.n	8004a80 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e2d6      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004a80:	f7ff fda0 	bl	80045c4 <LL_RCC_MSI_IsReady>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f1      	bne.n	8004a6e <HAL_RCC_OscConfig+0x11a>
 8004a8a:	e000      	b.n	8004a8e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004a8c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d047      	beq.n	8004b2a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a9a:	f7ff fdf6 	bl	800468a <LL_RCC_GetSysClkSource>
 8004a9e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004aa0:	f7ff feef 	bl	8004882 <LL_RCC_PLL_GetMainSource>
 8004aa4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d005      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x164>
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	2b0c      	cmp	r3, #12
 8004ab0:	d108      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	2b03      	cmp	r3, #3
 8004ab6:	d105      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d134      	bne.n	8004b2a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e2b4      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004acc:	d102      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x180>
 8004ace:	f7ff fbdd 	bl	800428c <LL_RCC_HSE_Enable>
 8004ad2:	e001      	b.n	8004ad8 <HAL_RCC_OscConfig+0x184>
 8004ad4:	f7ff fbe9 	bl	80042aa <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d012      	beq.n	8004b06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae0:	f7fe fbfc 	bl	80032dc <HAL_GetTick>
 8004ae4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ae8:	f7fe fbf8 	bl	80032dc <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b64      	cmp	r3, #100	; 0x64
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e299      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004afa:	f7ff fbe5 	bl	80042c8 <LL_RCC_HSE_IsReady>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0f1      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x194>
 8004b04:	e011      	b.n	8004b2a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b06:	f7fe fbe9 	bl	80032dc <HAL_GetTick>
 8004b0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004b0c:	e008      	b.n	8004b20 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b0e:	f7fe fbe5 	bl	80032dc <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b64      	cmp	r3, #100	; 0x64
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e286      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004b20:	f7ff fbd2 	bl	80042c8 <LL_RCC_HSE_IsReady>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f1      	bne.n	8004b0e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d04c      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b36:	f7ff fda8 	bl	800468a <LL_RCC_GetSysClkSource>
 8004b3a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b3c:	f7ff fea1 	bl	8004882 <LL_RCC_PLL_GetMainSource>
 8004b40:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	2b04      	cmp	r3, #4
 8004b46:	d005      	beq.n	8004b54 <HAL_RCC_OscConfig+0x200>
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	2b0c      	cmp	r3, #12
 8004b4c:	d10e      	bne.n	8004b6c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d10b      	bne.n	8004b6c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e266      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff fbf1 	bl	800434c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004b6a:	e031      	b.n	8004bd0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d019      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b74:	f7ff fbba 	bl	80042ec <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b78:	f7fe fbb0 	bl	80032dc <HAL_GetTick>
 8004b7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b80:	f7fe fbac 	bl	80032dc <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e24d      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004b92:	f7ff fbc9 	bl	8004328 <LL_RCC_HSI_IsReady>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0f1      	beq.n	8004b80 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff fbd3 	bl	800434c <LL_RCC_HSI_SetCalibTrimming>
 8004ba6:	e013      	b.n	8004bd0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ba8:	f7ff fbaf 	bl	800430a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bac:	f7fe fb96 	bl	80032dc <HAL_GetTick>
 8004bb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bb4:	f7fe fb92 	bl	80032dc <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e233      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004bc6:	f7ff fbaf 	bl	8004328 <LL_RCC_HSI_IsReady>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1f1      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0308 	and.w	r3, r3, #8
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d106      	bne.n	8004bea <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 80a3 	beq.w	8004d30 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d076      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0310 	and.w	r3, r3, #16
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d046      	beq.n	8004c8c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004bfe:	f7ff fc66 	bl	80044ce <LL_RCC_LSI1_IsReady>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d113      	bne.n	8004c30 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004c08:	f7ff fc3f 	bl	800448a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c0c:	f7fe fb66 	bl	80032dc <HAL_GetTick>
 8004c10:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004c14:	f7fe fb62 	bl	80032dc <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e203      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004c26:	f7ff fc52 	bl	80044ce <LL_RCC_LSI1_IsReady>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0f1      	beq.n	8004c14 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004c30:	f7ff fc5f 	bl	80044f2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c34:	f7fe fb52 	bl	80032dc <HAL_GetTick>
 8004c38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004c3c:	f7fe fb4e 	bl	80032dc <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e1ef      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004c4e:	f7ff fc72 	bl	8004536 <LL_RCC_LSI2_IsReady>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0f1      	beq.n	8004c3c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff fc7c 	bl	800455a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004c62:	f7ff fc23 	bl	80044ac <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c66:	f7fe fb39 	bl	80032dc <HAL_GetTick>
 8004c6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004c6e:	f7fe fb35 	bl	80032dc <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e1d6      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004c80:	f7ff fc25 	bl	80044ce <LL_RCC_LSI1_IsReady>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1f1      	bne.n	8004c6e <HAL_RCC_OscConfig+0x31a>
 8004c8a:	e051      	b.n	8004d30 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004c8c:	f7ff fbfd 	bl	800448a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c90:	f7fe fb24 	bl	80032dc <HAL_GetTick>
 8004c94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004c96:	e00c      	b.n	8004cb2 <HAL_RCC_OscConfig+0x35e>
 8004c98:	20000020 	.word	0x20000020
 8004c9c:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004ca0:	f7fe fb1c 	bl	80032dc <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e1bd      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004cb2:	f7ff fc0c 	bl	80044ce <LL_RCC_LSI1_IsReady>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0f1      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004cbc:	f7ff fc2a 	bl	8004514 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004cc2:	f7fe fb0b 	bl	80032dc <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b03      	cmp	r3, #3
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e1ac      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004cd4:	f7ff fc2f 	bl	8004536 <LL_RCC_LSI2_IsReady>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1f1      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x36e>
 8004cde:	e027      	b.n	8004d30 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004ce0:	f7ff fc18 	bl	8004514 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce4:	f7fe fafa 	bl	80032dc <HAL_GetTick>
 8004ce8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004cea:	e008      	b.n	8004cfe <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004cec:	f7fe faf6 	bl	80032dc <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e197      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004cfe:	f7ff fc1a 	bl	8004536 <LL_RCC_LSI2_IsReady>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1f1      	bne.n	8004cec <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004d08:	f7ff fbd0 	bl	80044ac <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d0c:	f7fe fae6 	bl	80032dc <HAL_GetTick>
 8004d10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004d14:	f7fe fae2 	bl	80032dc <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e183      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004d26:	f7ff fbd2 	bl	80044ce <LL_RCC_LSI1_IsReady>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1f1      	bne.n	8004d14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d05b      	beq.n	8004df4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d3c:	4ba7      	ldr	r3, [pc, #668]	; (8004fdc <HAL_RCC_OscConfig+0x688>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d114      	bne.n	8004d72 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004d48:	f7ff fa70 	bl	800422c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d4c:	f7fe fac6 	bl	80032dc <HAL_GetTick>
 8004d50:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d54:	f7fe fac2 	bl	80032dc <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e163      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d66:	4b9d      	ldr	r3, [pc, #628]	; (8004fdc <HAL_RCC_OscConfig+0x688>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d0f0      	beq.n	8004d54 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d102      	bne.n	8004d80 <HAL_RCC_OscConfig+0x42c>
 8004d7a:	f7ff fb30 	bl	80043de <LL_RCC_LSE_Enable>
 8004d7e:	e00c      	b.n	8004d9a <HAL_RCC_OscConfig+0x446>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	2b05      	cmp	r3, #5
 8004d86:	d104      	bne.n	8004d92 <HAL_RCC_OscConfig+0x43e>
 8004d88:	f7ff fb4b 	bl	8004422 <LL_RCC_LSE_EnableBypass>
 8004d8c:	f7ff fb27 	bl	80043de <LL_RCC_LSE_Enable>
 8004d90:	e003      	b.n	8004d9a <HAL_RCC_OscConfig+0x446>
 8004d92:	f7ff fb35 	bl	8004400 <LL_RCC_LSE_Disable>
 8004d96:	f7ff fb55 	bl	8004444 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d014      	beq.n	8004dcc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da2:	f7fe fa9b 	bl	80032dc <HAL_GetTick>
 8004da6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004da8:	e00a      	b.n	8004dc0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004daa:	f7fe fa97 	bl	80032dc <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d901      	bls.n	8004dc0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e136      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004dc0:	f7ff fb51 	bl	8004466 <LL_RCC_LSE_IsReady>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0ef      	beq.n	8004daa <HAL_RCC_OscConfig+0x456>
 8004dca:	e013      	b.n	8004df4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dcc:	f7fe fa86 	bl	80032dc <HAL_GetTick>
 8004dd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004dd2:	e00a      	b.n	8004dea <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd4:	f7fe fa82 	bl	80032dc <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e121      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004dea:	f7ff fb3c 	bl	8004466 <LL_RCC_LSE_IsReady>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1ef      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d02c      	beq.n	8004e5a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d014      	beq.n	8004e32 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e08:	f7ff fab5 	bl	8004376 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e0c:	f7fe fa66 	bl	80032dc <HAL_GetTick>
 8004e10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e14:	f7fe fa62 	bl	80032dc <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e103      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004e26:	f7ff fac8 	bl	80043ba <LL_RCC_HSI48_IsReady>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0f1      	beq.n	8004e14 <HAL_RCC_OscConfig+0x4c0>
 8004e30:	e013      	b.n	8004e5a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e32:	f7ff fab1 	bl	8004398 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e36:	f7fe fa51 	bl	80032dc <HAL_GetTick>
 8004e3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e3e:	f7fe fa4d 	bl	80032dc <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e0ee      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004e50:	f7ff fab3 	bl	80043ba <LL_RCC_HSI48_IsReady>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1f1      	bne.n	8004e3e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 80e4 	beq.w	800502c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e64:	f7ff fc11 	bl	800468a <LL_RCC_GetSysClkSource>
 8004e68:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	f040 80b4 	bne.w	8004fe4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f003 0203 	and.w	r2, r3, #3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d123      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d11c      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	0a1b      	lsrs	r3, r3, #8
 8004e9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d114      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d10d      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d106      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d05d      	beq.n	8004f8e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	2b0c      	cmp	r3, #12
 8004ed6:	d058      	beq.n	8004f8a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e0a1      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004eea:	f7ff fc84 	bl	80047f6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004eee:	f7fe f9f5 	bl	80032dc <HAL_GetTick>
 8004ef2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ef4:	e008      	b.n	8004f08 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef6:	f7fe f9f1 	bl	80032dc <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e092      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1ef      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f1a:	68da      	ldr	r2, [r3, #12]
 8004f1c:	4b30      	ldr	r3, [pc, #192]	; (8004fe0 <HAL_RCC_OscConfig+0x68c>)
 8004f1e:	4013      	ands	r3, r2
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f28:	4311      	orrs	r1, r2
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f2e:	0212      	lsls	r2, r2, #8
 8004f30:	4311      	orrs	r1, r2
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f36:	4311      	orrs	r1, r2
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f3c:	4311      	orrs	r1, r2
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004f42:	430a      	orrs	r2, r1
 8004f44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f4c:	f7ff fc44 	bl	80047d8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f5e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f60:	f7fe f9bc 	bl	80032dc <HAL_GetTick>
 8004f64:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f68:	f7fe f9b8 	bl	80032dc <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e059      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0ef      	beq.n	8004f68 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f88:	e050      	b.n	800502c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e04f      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d147      	bne.n	800502c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f9c:	f7ff fc1c 	bl	80047d8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fb0:	f7fe f994 	bl	80032dc <HAL_GetTick>
 8004fb4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb8:	f7fe f990 	bl	80032dc <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e031      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0ef      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x664>
 8004fd8:	e028      	b.n	800502c <HAL_RCC_OscConfig+0x6d8>
 8004fda:	bf00      	nop
 8004fdc:	58000400 	.word	0x58000400
 8004fe0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	2b0c      	cmp	r3, #12
 8004fe8:	d01e      	beq.n	8005028 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fea:	f7ff fc04 	bl	80047f6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fee:	f7fe f975 	bl	80032dc <HAL_GetTick>
 8004ff2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ff6:	f7fe f971 	bl	80032dc <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e012      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1ef      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005016:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005020:	4b05      	ldr	r3, [pc, #20]	; (8005038 <HAL_RCC_OscConfig+0x6e4>)
 8005022:	4013      	ands	r3, r2
 8005024:	60cb      	str	r3, [r1, #12]
 8005026:	e001      	b.n	800502c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e000      	b.n	800502e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3734      	adds	r7, #52	; 0x34
 8005032:	46bd      	mov	sp, r7
 8005034:	bd90      	pop	{r4, r7, pc}
 8005036:	bf00      	nop
 8005038:	eefefffc 	.word	0xeefefffc

0800503c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e12d      	b.n	80052ac <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005050:	4b98      	ldr	r3, [pc, #608]	; (80052b4 <HAL_RCC_ClockConfig+0x278>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d91b      	bls.n	8005096 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505e:	4b95      	ldr	r3, [pc, #596]	; (80052b4 <HAL_RCC_ClockConfig+0x278>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f023 0207 	bic.w	r2, r3, #7
 8005066:	4993      	ldr	r1, [pc, #588]	; (80052b4 <HAL_RCC_ClockConfig+0x278>)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	4313      	orrs	r3, r2
 800506c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800506e:	f7fe f935 	bl	80032dc <HAL_GetTick>
 8005072:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005074:	e008      	b.n	8005088 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005076:	f7fe f931 	bl	80032dc <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d901      	bls.n	8005088 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e111      	b.n	80052ac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005088:	4b8a      	ldr	r3, [pc, #552]	; (80052b4 <HAL_RCC_ClockConfig+0x278>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d1ef      	bne.n	8005076 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d016      	beq.n	80050d0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7ff fafb 	bl	80046a2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80050ac:	f7fe f916 	bl	80032dc <HAL_GetTick>
 80050b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80050b4:	f7fe f912 	bl	80032dc <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e0f2      	b.n	80052ac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80050c6:	f7ff fbe8 	bl	800489a <LL_RCC_IsActiveFlag_HPRE>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0f1      	beq.n	80050b4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0320 	and.w	r3, r3, #32
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d016      	beq.n	800510a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7ff faf2 	bl	80046ca <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80050e6:	f7fe f8f9 	bl	80032dc <HAL_GetTick>
 80050ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80050ec:	e008      	b.n	8005100 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80050ee:	f7fe f8f5 	bl	80032dc <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d901      	bls.n	8005100 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e0d5      	b.n	80052ac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005100:	f7ff fbdd 	bl	80048be <LL_RCC_IsActiveFlag_C2HPRE>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0f1      	beq.n	80050ee <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005112:	2b00      	cmp	r3, #0
 8005114:	d016      	beq.n	8005144 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	4618      	mov	r0, r3
 800511c:	f7ff faeb 	bl	80046f6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005120:	f7fe f8dc 	bl	80032dc <HAL_GetTick>
 8005124:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005126:	e008      	b.n	800513a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005128:	f7fe f8d8 	bl	80032dc <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e0b8      	b.n	80052ac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800513a:	f7ff fbd3 	bl	80048e4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0f1      	beq.n	8005128 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d016      	beq.n	800517e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4618      	mov	r0, r3
 8005156:	f7ff fae5 	bl	8004724 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800515a:	f7fe f8bf 	bl	80032dc <HAL_GetTick>
 800515e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005160:	e008      	b.n	8005174 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005162:	f7fe f8bb 	bl	80032dc <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d901      	bls.n	8005174 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e09b      	b.n	80052ac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005174:	f7ff fbc9 	bl	800490a <LL_RCC_IsActiveFlag_PPRE1>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0f1      	beq.n	8005162 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0308 	and.w	r3, r3, #8
 8005186:	2b00      	cmp	r3, #0
 8005188:	d017      	beq.n	80051ba <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	4618      	mov	r0, r3
 8005192:	f7ff fadb 	bl	800474c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005196:	f7fe f8a1 	bl	80032dc <HAL_GetTick>
 800519a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800519c:	e008      	b.n	80051b0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800519e:	f7fe f89d 	bl	80032dc <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e07d      	b.n	80052ac <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80051b0:	f7ff fbbd 	bl	800492e <LL_RCC_IsActiveFlag_PPRE2>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d0f1      	beq.n	800519e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d043      	beq.n	800524e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d106      	bne.n	80051dc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80051ce:	f7ff f87b 	bl	80042c8 <LL_RCC_HSE_IsReady>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d11e      	bne.n	8005216 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e067      	b.n	80052ac <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d106      	bne.n	80051f2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80051e4:	f7ff fb16 	bl	8004814 <LL_RCC_PLL_IsReady>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d113      	bne.n	8005216 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e05c      	b.n	80052ac <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80051fa:	f7ff f9e3 	bl	80045c4 <LL_RCC_MSI_IsReady>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d108      	bne.n	8005216 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e051      	b.n	80052ac <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005208:	f7ff f88e 	bl	8004328 <LL_RCC_HSI_IsReady>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e04a      	b.n	80052ac <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	4618      	mov	r0, r3
 800521c:	f7ff fa21 	bl	8004662 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005220:	f7fe f85c 	bl	80032dc <HAL_GetTick>
 8005224:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005226:	e00a      	b.n	800523e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005228:	f7fe f858 	bl	80032dc <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	f241 3288 	movw	r2, #5000	; 0x1388
 8005236:	4293      	cmp	r3, r2
 8005238:	d901      	bls.n	800523e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e036      	b.n	80052ac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800523e:	f7ff fa24 	bl	800468a <LL_RCC_GetSysClkSource>
 8005242:	4602      	mov	r2, r0
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	429a      	cmp	r2, r3
 800524c:	d1ec      	bne.n	8005228 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800524e:	4b19      	ldr	r3, [pc, #100]	; (80052b4 <HAL_RCC_ClockConfig+0x278>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0307 	and.w	r3, r3, #7
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	429a      	cmp	r2, r3
 800525a:	d21b      	bcs.n	8005294 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525c:	4b15      	ldr	r3, [pc, #84]	; (80052b4 <HAL_RCC_ClockConfig+0x278>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f023 0207 	bic.w	r2, r3, #7
 8005264:	4913      	ldr	r1, [pc, #76]	; (80052b4 <HAL_RCC_ClockConfig+0x278>)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	4313      	orrs	r3, r2
 800526a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800526c:	f7fe f836 	bl	80032dc <HAL_GetTick>
 8005270:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005272:	e008      	b.n	8005286 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005274:	f7fe f832 	bl	80032dc <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e012      	b.n	80052ac <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005286:	4b0b      	ldr	r3, [pc, #44]	; (80052b4 <HAL_RCC_ClockConfig+0x278>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	683a      	ldr	r2, [r7, #0]
 8005290:	429a      	cmp	r2, r3
 8005292:	d1ef      	bne.n	8005274 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005294:	f000 f87e 	bl	8005394 <HAL_RCC_GetHCLKFreq>
 8005298:	4603      	mov	r3, r0
 800529a:	4a07      	ldr	r2, [pc, #28]	; (80052b8 <HAL_RCC_ClockConfig+0x27c>)
 800529c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800529e:	f7fe f829 	bl	80032f4 <HAL_GetTickPrio>
 80052a2:	4603      	mov	r3, r0
 80052a4:	4618      	mov	r0, r3
 80052a6:	f7fd ffcb 	bl	8003240 <HAL_InitTick>
 80052aa:	4603      	mov	r3, r0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	58004000 	.word	0x58004000
 80052b8:	20000020 	.word	0x20000020

080052bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052bc:	b590      	push	{r4, r7, lr}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052c2:	f7ff f9e2 	bl	800468a <LL_RCC_GetSysClkSource>
 80052c6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10a      	bne.n	80052e4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80052ce:	f7ff f99e 	bl	800460e <LL_RCC_MSI_GetRange>
 80052d2:	4603      	mov	r3, r0
 80052d4:	091b      	lsrs	r3, r3, #4
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	4a2b      	ldr	r2, [pc, #172]	; (8005388 <HAL_RCC_GetSysClockFreq+0xcc>)
 80052dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052e0:	60fb      	str	r3, [r7, #12]
 80052e2:	e04b      	b.n	800537c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d102      	bne.n	80052f0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052ea:	4b28      	ldr	r3, [pc, #160]	; (800538c <HAL_RCC_GetSysClockFreq+0xd0>)
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	e045      	b.n	800537c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	d10a      	bne.n	800530c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80052f6:	f7fe ffb7 	bl	8004268 <LL_RCC_HSE_IsEnabledDiv2>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d102      	bne.n	8005306 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005300:	4b22      	ldr	r3, [pc, #136]	; (800538c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	e03a      	b.n	800537c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005306:	4b22      	ldr	r3, [pc, #136]	; (8005390 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	e037      	b.n	800537c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800530c:	f7ff fab9 	bl	8004882 <LL_RCC_PLL_GetMainSource>
 8005310:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b02      	cmp	r3, #2
 8005316:	d003      	beq.n	8005320 <HAL_RCC_GetSysClockFreq+0x64>
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2b03      	cmp	r3, #3
 800531c:	d003      	beq.n	8005326 <HAL_RCC_GetSysClockFreq+0x6a>
 800531e:	e00d      	b.n	800533c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005320:	4b1a      	ldr	r3, [pc, #104]	; (800538c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005322:	60bb      	str	r3, [r7, #8]
        break;
 8005324:	e015      	b.n	8005352 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005326:	f7fe ff9f 	bl	8004268 <LL_RCC_HSE_IsEnabledDiv2>
 800532a:	4603      	mov	r3, r0
 800532c:	2b01      	cmp	r3, #1
 800532e:	d102      	bne.n	8005336 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005330:	4b16      	ldr	r3, [pc, #88]	; (800538c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005332:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005334:	e00d      	b.n	8005352 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005336:	4b16      	ldr	r3, [pc, #88]	; (8005390 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005338:	60bb      	str	r3, [r7, #8]
        break;
 800533a:	e00a      	b.n	8005352 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800533c:	f7ff f967 	bl	800460e <LL_RCC_MSI_GetRange>
 8005340:	4603      	mov	r3, r0
 8005342:	091b      	lsrs	r3, r3, #4
 8005344:	f003 030f 	and.w	r3, r3, #15
 8005348:	4a0f      	ldr	r2, [pc, #60]	; (8005388 <HAL_RCC_GetSysClockFreq+0xcc>)
 800534a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800534e:	60bb      	str	r3, [r7, #8]
        break;
 8005350:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005352:	f7ff fa71 	bl	8004838 <LL_RCC_PLL_GetN>
 8005356:	4602      	mov	r2, r0
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	fb03 f402 	mul.w	r4, r3, r2
 800535e:	f7ff fa84 	bl	800486a <LL_RCC_PLL_GetDivider>
 8005362:	4603      	mov	r3, r0
 8005364:	091b      	lsrs	r3, r3, #4
 8005366:	3301      	adds	r3, #1
 8005368:	fbb4 f4f3 	udiv	r4, r4, r3
 800536c:	f7ff fa71 	bl	8004852 <LL_RCC_PLL_GetR>
 8005370:	4603      	mov	r3, r0
 8005372:	0f5b      	lsrs	r3, r3, #29
 8005374:	3301      	adds	r3, #1
 8005376:	fbb4 f3f3 	udiv	r3, r4, r3
 800537a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800537c:	68fb      	ldr	r3, [r7, #12]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3714      	adds	r7, #20
 8005382:	46bd      	mov	sp, r7
 8005384:	bd90      	pop	{r4, r7, pc}
 8005386:	bf00      	nop
 8005388:	0800f598 	.word	0x0800f598
 800538c:	00f42400 	.word	0x00f42400
 8005390:	01e84800 	.word	0x01e84800

08005394 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005394:	b598      	push	{r3, r4, r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005398:	f7ff ff90 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 800539c:	4604      	mov	r4, r0
 800539e:	f7ff f9e9 	bl	8004774 <LL_RCC_GetAHBPrescaler>
 80053a2:	4603      	mov	r3, r0
 80053a4:	091b      	lsrs	r3, r3, #4
 80053a6:	f003 030f 	and.w	r3, r3, #15
 80053aa:	4a03      	ldr	r2, [pc, #12]	; (80053b8 <HAL_RCC_GetHCLKFreq+0x24>)
 80053ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053b0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	bd98      	pop	{r3, r4, r7, pc}
 80053b8:	0800f538 	.word	0x0800f538

080053bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053bc:	b598      	push	{r3, r4, r7, lr}
 80053be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80053c0:	f7ff ffe8 	bl	8005394 <HAL_RCC_GetHCLKFreq>
 80053c4:	4604      	mov	r4, r0
 80053c6:	f7ff f9ef 	bl	80047a8 <LL_RCC_GetAPB1Prescaler>
 80053ca:	4603      	mov	r3, r0
 80053cc:	0a1b      	lsrs	r3, r3, #8
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	4a04      	ldr	r2, [pc, #16]	; (80053e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053d8:	f003 031f 	and.w	r3, r3, #31
 80053dc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	bd98      	pop	{r3, r4, r7, pc}
 80053e4:	0800f578 	.word	0x0800f578

080053e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053e8:	b598      	push	{r3, r4, r7, lr}
 80053ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80053ec:	f7ff ffd2 	bl	8005394 <HAL_RCC_GetHCLKFreq>
 80053f0:	4604      	mov	r4, r0
 80053f2:	f7ff f9e5 	bl	80047c0 <LL_RCC_GetAPB2Prescaler>
 80053f6:	4603      	mov	r3, r0
 80053f8:	0adb      	lsrs	r3, r3, #11
 80053fa:	f003 0307 	and.w	r3, r3, #7
 80053fe:	4a04      	ldr	r2, [pc, #16]	; (8005410 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005404:	f003 031f 	and.w	r3, r3, #31
 8005408:	fa24 f303 	lsr.w	r3, r4, r3
}
 800540c:	4618      	mov	r0, r3
 800540e:	bd98      	pop	{r3, r4, r7, pc}
 8005410:	0800f578 	.word	0x0800f578

08005414 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005414:	b590      	push	{r4, r7, lr}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2bb0      	cmp	r3, #176	; 0xb0
 8005420:	d903      	bls.n	800542a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005422:	4b15      	ldr	r3, [pc, #84]	; (8005478 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	e007      	b.n	800543a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	091b      	lsrs	r3, r3, #4
 800542e:	f003 030f 	and.w	r3, r3, #15
 8005432:	4a11      	ldr	r2, [pc, #68]	; (8005478 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005438:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800543a:	f7ff f9a7 	bl	800478c <LL_RCC_GetAHB4Prescaler>
 800543e:	4603      	mov	r3, r0
 8005440:	091b      	lsrs	r3, r3, #4
 8005442:	f003 030f 	and.w	r3, r3, #15
 8005446:	4a0d      	ldr	r2, [pc, #52]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005452:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	4a0a      	ldr	r2, [pc, #40]	; (8005480 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005458:	fba2 2303 	umull	r2, r3, r2, r3
 800545c:	0c9c      	lsrs	r4, r3, #18
 800545e:	f7fe fef5 	bl	800424c <HAL_PWREx_GetVoltageRange>
 8005462:	4603      	mov	r3, r0
 8005464:	4619      	mov	r1, r3
 8005466:	4620      	mov	r0, r4
 8005468:	f000 f80c 	bl	8005484 <RCC_SetFlashLatency>
 800546c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800546e:	4618      	mov	r0, r3
 8005470:	3714      	adds	r7, #20
 8005472:	46bd      	mov	sp, r7
 8005474:	bd90      	pop	{r4, r7, pc}
 8005476:	bf00      	nop
 8005478:	0800f598 	.word	0x0800f598
 800547c:	0800f538 	.word	0x0800f538
 8005480:	431bde83 	.word	0x431bde83

08005484 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005484:	b590      	push	{r4, r7, lr}
 8005486:	b093      	sub	sp, #76	; 0x4c
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800548e:	4b37      	ldr	r3, [pc, #220]	; (800556c <RCC_SetFlashLatency+0xe8>)
 8005490:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005494:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005496:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800549a:	4a35      	ldr	r2, [pc, #212]	; (8005570 <RCC_SetFlashLatency+0xec>)
 800549c:	f107 031c 	add.w	r3, r7, #28
 80054a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80054a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80054a6:	4b33      	ldr	r3, [pc, #204]	; (8005574 <RCC_SetFlashLatency+0xf0>)
 80054a8:	f107 040c 	add.w	r4, r7, #12
 80054ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80054ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80054b2:	2300      	movs	r3, #0
 80054b4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054bc:	d11a      	bne.n	80054f4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80054be:	2300      	movs	r3, #0
 80054c0:	643b      	str	r3, [r7, #64]	; 0x40
 80054c2:	e013      	b.n	80054ec <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80054c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	3348      	adds	r3, #72	; 0x48
 80054ca:	443b      	add	r3, r7
 80054cc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d807      	bhi.n	80054e6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80054d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	3348      	adds	r3, #72	; 0x48
 80054dc:	443b      	add	r3, r7
 80054de:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80054e2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80054e4:	e020      	b.n	8005528 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80054e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054e8:	3301      	adds	r3, #1
 80054ea:	643b      	str	r3, [r7, #64]	; 0x40
 80054ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d9e8      	bls.n	80054c4 <RCC_SetFlashLatency+0x40>
 80054f2:	e019      	b.n	8005528 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80054f4:	2300      	movs	r3, #0
 80054f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054f8:	e013      	b.n	8005522 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80054fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	3348      	adds	r3, #72	; 0x48
 8005500:	443b      	add	r3, r7
 8005502:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	429a      	cmp	r2, r3
 800550a:	d807      	bhi.n	800551c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800550c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	3348      	adds	r3, #72	; 0x48
 8005512:	443b      	add	r3, r7
 8005514:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005518:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800551a:	e005      	b.n	8005528 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800551c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800551e:	3301      	adds	r3, #1
 8005520:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005524:	2b02      	cmp	r3, #2
 8005526:	d9e8      	bls.n	80054fa <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005528:	4b13      	ldr	r3, [pc, #76]	; (8005578 <RCC_SetFlashLatency+0xf4>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f023 0207 	bic.w	r2, r3, #7
 8005530:	4911      	ldr	r1, [pc, #68]	; (8005578 <RCC_SetFlashLatency+0xf4>)
 8005532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005534:	4313      	orrs	r3, r2
 8005536:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005538:	f7fd fed0 	bl	80032dc <HAL_GetTick>
 800553c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800553e:	e008      	b.n	8005552 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005540:	f7fd fecc 	bl	80032dc <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e007      	b.n	8005562 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005552:	4b09      	ldr	r3, [pc, #36]	; (8005578 <RCC_SetFlashLatency+0xf4>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800555c:	429a      	cmp	r2, r3
 800555e:	d1ef      	bne.n	8005540 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	374c      	adds	r7, #76	; 0x4c
 8005566:	46bd      	mov	sp, r7
 8005568:	bd90      	pop	{r4, r7, pc}
 800556a:	bf00      	nop
 800556c:	0800e2e8 	.word	0x0800e2e8
 8005570:	0800e2f8 	.word	0x0800e2f8
 8005574:	0800e304 	.word	0x0800e304
 8005578:	58004000 	.word	0x58004000

0800557c <LL_RCC_LSE_IsEnabled>:
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b01      	cmp	r3, #1
 800558e:	d101      	bne.n	8005594 <LL_RCC_LSE_IsEnabled+0x18>
 8005590:	2301      	movs	r3, #1
 8005592:	e000      	b.n	8005596 <LL_RCC_LSE_IsEnabled+0x1a>
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <LL_RCC_LSE_IsReady>:
{
 80055a0:	b480      	push	{r7}
 80055a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80055a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d101      	bne.n	80055b8 <LL_RCC_LSE_IsReady+0x18>
 80055b4:	2301      	movs	r3, #1
 80055b6:	e000      	b.n	80055ba <LL_RCC_LSE_IsReady+0x1a>
 80055b8:	2300      	movs	r3, #0
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <LL_RCC_SetRFWKPClockSource>:
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80055cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80055e4:	bf00      	nop
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <LL_RCC_SetSMPSClockSource>:
{
 80055f0:	b480      	push	{r7}
 80055f2:	b083      	sub	sp, #12
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80055f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	f023 0203 	bic.w	r2, r3, #3
 8005602:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4313      	orrs	r3, r2
 800560a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800560c:	bf00      	nop
 800560e:	370c      	adds	r7, #12
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr

08005618 <LL_RCC_SetSMPSPrescaler>:
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800562a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4313      	orrs	r3, r2
 8005632:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <LL_RCC_SetUSARTClockSource>:
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005648:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800564c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005650:	f023 0203 	bic.w	r2, r3, #3
 8005654:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <LL_RCC_SetLPUARTClockSource>:
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800567c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005680:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <LL_RCC_SetI2CClockSource>:
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80056a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	091b      	lsrs	r3, r3, #4
 80056ac:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80056b0:	43db      	mvns	r3, r3
 80056b2:	401a      	ands	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	011b      	lsls	r3, r3, #4
 80056b8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80056bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056c0:	4313      	orrs	r3, r2
 80056c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <LL_RCC_SetLPTIMClockSource>:
{
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80056da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	0c1b      	lsrs	r3, r3, #16
 80056e6:	041b      	lsls	r3, r3, #16
 80056e8:	43db      	mvns	r3, r3
 80056ea:	401a      	ands	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	041b      	lsls	r3, r3, #16
 80056f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056f4:	4313      	orrs	r3, r2
 80056f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <LL_RCC_SetSAIClockSource>:
{
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800570e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005716:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800571a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4313      	orrs	r3, r2
 8005722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005726:	bf00      	nop
 8005728:	370c      	adds	r7, #12
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <LL_RCC_SetRNGClockSource>:
{
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800573a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800573e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005742:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005746:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4313      	orrs	r3, r2
 800574e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <LL_RCC_SetCLK48ClockSource>:
{
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800576a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005772:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4313      	orrs	r3, r2
 800577a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <LL_RCC_SetUSBClockSource>:
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b082      	sub	sp, #8
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7ff ffe3 	bl	800575e <LL_RCC_SetCLK48ClockSource>
}
 8005798:	bf00      	nop
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <LL_RCC_SetADCClockSource>:
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80057a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <LL_RCC_SetRTCClockSource>:
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80057d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <LL_RCC_GetRTCClockSource>:
{
 80057f8:	b480      	push	{r7}
 80057fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80057fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005804:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005808:	4618      	mov	r0, r3
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <LL_RCC_ForceBackupDomainReset>:
{
 8005812:	b480      	push	{r7}
 8005814:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800581a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005826:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800582a:	bf00      	nop
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800583c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005840:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800584c:	bf00      	nop
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <LL_RCC_PLLSAI1_Enable>:
{
 8005856:	b480      	push	{r7}
 8005858:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800585a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005864:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005868:	6013      	str	r3, [r2, #0]
}
 800586a:	bf00      	nop
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <LL_RCC_PLLSAI1_Disable>:
{
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005882:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005886:	6013      	str	r3, [r2, #0]
}
 8005888:	bf00      	nop
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <LL_RCC_PLLSAI1_IsReady>:
{
 8005892:	b480      	push	{r7}
 8005894:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058a4:	d101      	bne.n	80058aa <LL_RCC_PLLSAI1_IsReady+0x18>
 80058a6:	2301      	movs	r3, #1
 80058a8:	e000      	b.n	80058ac <LL_RCC_PLLSAI1_IsReady+0x1a>
 80058aa:	2300      	movs	r3, #0
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b088      	sub	sp, #32
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80058be:	2300      	movs	r3, #0
 80058c0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80058c2:	2300      	movs	r3, #0
 80058c4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d034      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80058da:	d021      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80058dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80058e0:	d81b      	bhi.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x64>
 80058e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058e6:	d01d      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80058e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058ec:	d815      	bhi.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x64>
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00b      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x54>
 80058f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058f6:	d110      	bne.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80058f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005906:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005908:	e00d      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3304      	adds	r3, #4
 800590e:	4618      	mov	r0, r3
 8005910:	f000 f947 	bl	8005ba2 <RCCEx_PLLSAI1_ConfigNP>
 8005914:	4603      	mov	r3, r0
 8005916:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005918:	e005      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	77fb      	strb	r3, [r7, #31]
        break;
 800591e:	e002      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005920:	bf00      	nop
 8005922:	e000      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005926:	7ffb      	ldrb	r3, [r7, #31]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d105      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005930:	4618      	mov	r0, r3
 8005932:	f7ff fee8 	bl	8005706 <LL_RCC_SetSAIClockSource>
 8005936:	e001      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005938:	7ffb      	ldrb	r3, [r7, #31]
 800593a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005944:	2b00      	cmp	r3, #0
 8005946:	d046      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005948:	f7ff ff56 	bl	80057f8 <LL_RCC_GetRTCClockSource>
 800594c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	429a      	cmp	r2, r3
 8005956:	d03c      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005958:	f7fe fc68 	bl	800422c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d105      	bne.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005966:	4618      	mov	r0, r3
 8005968:	f7ff ff30 	bl	80057cc <LL_RCC_SetRTCClockSource>
 800596c:	e02e      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800596e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005976:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005978:	f7ff ff4b 	bl	8005812 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800597c:	f7ff ff5a 	bl	8005834 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	4313      	orrs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800598e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005998:	f7ff fdf0 	bl	800557c <LL_RCC_LSE_IsEnabled>
 800599c:	4603      	mov	r3, r0
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d114      	bne.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059a2:	f7fd fc9b 	bl	80032dc <HAL_GetTick>
 80059a6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80059a8:	e00b      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059aa:	f7fd fc97 	bl	80032dc <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d902      	bls.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	77fb      	strb	r3, [r7, #31]
              break;
 80059c0:	e004      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80059c2:	f7ff fded 	bl	80055a0 <LL_RCC_LSE_IsReady>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d1ee      	bne.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80059cc:	7ffb      	ldrb	r3, [r7, #31]
 80059ce:	77bb      	strb	r3, [r7, #30]
 80059d0:	e001      	b.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d2:	7ffb      	ldrb	r3, [r7, #31]
 80059d4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d004      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7ff fe2a 	bl	8005640 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d004      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	4618      	mov	r0, r3
 80059fe:	f7ff fe35 	bl	800566c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0310 	and.w	r3, r3, #16
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d004      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7ff fe5d 	bl	80056d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0320 	and.w	r3, r3, #32
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d004      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7ff fe52 	bl	80056d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0304 	and.w	r3, r3, #4
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d004      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7ff fe2a 	bl	8005698 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0308 	and.w	r3, r3, #8
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d004      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff fe1f 	bl	8005698 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d022      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7ff fe8d 	bl	800578a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a78:	d107      	bne.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005a7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a88:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a92:	d10b      	bne.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3304      	adds	r3, #4
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 f8dd 	bl	8005c58 <RCCEx_PLLSAI1_ConfigNQ>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005aa2:	7ffb      	ldrb	r3, [r7, #31]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005aa8:	7ffb      	ldrb	r3, [r7, #31]
 8005aaa:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d02b      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac0:	d008      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005aca:	d003      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d105      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7ff fe2a 	bl	8005732 <LL_RCC_SetRNGClockSource>
 8005ade:	e00a      	b.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ae8:	60fb      	str	r3, [r7, #12]
 8005aea:	2000      	movs	r0, #0
 8005aec:	f7ff fe21 	bl	8005732 <LL_RCC_SetRNGClockSource>
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f7ff fe34 	bl	800575e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005afe:	d107      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b0e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d022      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7ff fe3d 	bl	80057a0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b2e:	d107      	bne.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b3e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b48:	d10b      	bne.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 f8dd 	bl	8005d0e <RCCEx_PLLSAI1_ConfigNR>
 8005b54:	4603      	mov	r3, r0
 8005b56:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005b58:	7ffb      	ldrb	r3, [r7, #31]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d001      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005b5e:	7ffb      	ldrb	r3, [r7, #31]
 8005b60:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d004      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7ff fd26 	bl	80055c4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d009      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7ff fd45 	bl	8005618 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7ff fd2c 	bl	80055f0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005b98:	7fbb      	ldrb	r3, [r7, #30]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3720      	adds	r7, #32
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005bae:	f7ff fe61 	bl	8005874 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005bb2:	f7fd fb93 	bl	80032dc <HAL_GetTick>
 8005bb6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005bb8:	e009      	b.n	8005bce <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005bba:	f7fd fb8f 	bl	80032dc <HAL_GetTick>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d902      	bls.n	8005bce <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	73fb      	strb	r3, [r7, #15]
      break;
 8005bcc:	e004      	b.n	8005bd8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005bce:	f7ff fe60 	bl	8005892 <LL_RCC_PLLSAI1_IsReady>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1f0      	bne.n	8005bba <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d137      	bne.n	8005c4e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	021b      	lsls	r3, r3, #8
 8005bee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005c0c:	f7ff fe23 	bl	8005856 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c10:	f7fd fb64 	bl	80032dc <HAL_GetTick>
 8005c14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c16:	e009      	b.n	8005c2c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c18:	f7fd fb60 	bl	80032dc <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d902      	bls.n	8005c2c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	73fb      	strb	r3, [r7, #15]
        break;
 8005c2a:	e004      	b.n	8005c36 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005c2c:	f7ff fe31 	bl	8005892 <LL_RCC_PLLSAI1_IsReady>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d1f0      	bne.n	8005c18 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005c36:	7bfb      	ldrb	r3, [r7, #15]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d108      	bne.n	8005c4e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c40:	691a      	ldr	r2, [r3, #16]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c60:	2300      	movs	r3, #0
 8005c62:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005c64:	f7ff fe06 	bl	8005874 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005c68:	f7fd fb38 	bl	80032dc <HAL_GetTick>
 8005c6c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005c6e:	e009      	b.n	8005c84 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c70:	f7fd fb34 	bl	80032dc <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d902      	bls.n	8005c84 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	73fb      	strb	r3, [r7, #15]
      break;
 8005c82:	e004      	b.n	8005c8e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005c84:	f7ff fe05 	bl	8005892 <LL_RCC_PLLSAI1_IsReady>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1f0      	bne.n	8005c70 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005c8e:	7bfb      	ldrb	r3, [r7, #15]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d137      	bne.n	8005d04 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	021b      	lsls	r3, r3, #8
 8005ca4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005cc2:	f7ff fdc8 	bl	8005856 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cc6:	f7fd fb09 	bl	80032dc <HAL_GetTick>
 8005cca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ccc:	e009      	b.n	8005ce2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cce:	f7fd fb05 	bl	80032dc <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d902      	bls.n	8005ce2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	73fb      	strb	r3, [r7, #15]
        break;
 8005ce0:	e004      	b.n	8005cec <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ce2:	f7ff fdd6 	bl	8005892 <LL_RCC_PLLSAI1_IsReady>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d1f0      	bne.n	8005cce <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d108      	bne.n	8005d04 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cf6:	691a      	ldr	r2, [r3, #16]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d00:	4313      	orrs	r3, r2
 8005d02:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b084      	sub	sp, #16
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005d1a:	f7ff fdab 	bl	8005874 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005d1e:	f7fd fadd 	bl	80032dc <HAL_GetTick>
 8005d22:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005d24:	e009      	b.n	8005d3a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d26:	f7fd fad9 	bl	80032dc <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d902      	bls.n	8005d3a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	73fb      	strb	r3, [r7, #15]
      break;
 8005d38:	e004      	b.n	8005d44 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005d3a:	f7ff fdaa 	bl	8005892 <LL_RCC_PLLSAI1_IsReady>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1f0      	bne.n	8005d26 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005d44:	7bfb      	ldrb	r3, [r7, #15]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d137      	bne.n	8005dba <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005d4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	021b      	lsls	r3, r3, #8
 8005d5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d74:	4313      	orrs	r3, r2
 8005d76:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005d78:	f7ff fd6d 	bl	8005856 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d7c:	f7fd faae 	bl	80032dc <HAL_GetTick>
 8005d80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005d82:	e009      	b.n	8005d98 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d84:	f7fd faaa 	bl	80032dc <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d902      	bls.n	8005d98 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	73fb      	strb	r3, [r7, #15]
        break;
 8005d96:	e004      	b.n	8005da2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005d98:	f7ff fd7b 	bl	8005892 <LL_RCC_PLLSAI1_IsReady>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d1f0      	bne.n	8005d84 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d108      	bne.n	8005dba <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dac:	691a      	ldr	r2, [r3, #16]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005db6:	4313      	orrs	r3, r2
 8005db8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e027      	b.n	8005e26 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	7a5b      	ldrb	r3, [r3, #9]
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d105      	bne.n	8005dec <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7fc ff7e 	bl	8002ce8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f023 0120 	bic.w	r1, r3, #32
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	430a      	orrs	r2, r1
 8005e06:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0204 	orr.w	r2, r2, #4
 8005e16:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
	...

08005e30 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e09f      	b.n	8005f82 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7fc ff70 	bl	8002d3c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005e64:	4b49      	ldr	r3, [pc, #292]	; (8005f8c <HAL_RTC_Init+0x15c>)
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f003 0310 	and.w	r3, r3, #16
 8005e6c:	2b10      	cmp	r3, #16
 8005e6e:	d07e      	beq.n	8005f6e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	22ca      	movs	r2, #202	; 0xca
 8005e76:	625a      	str	r2, [r3, #36]	; 0x24
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2253      	movs	r2, #83	; 0x53
 8005e7e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f8ab 	bl	8005fdc <RTC_EnterInitMode>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00a      	beq.n	8005ea2 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	22ff      	movs	r2, #255	; 0xff
 8005e92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2204      	movs	r2, #4
 8005e98:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	73fb      	strb	r3, [r7, #15]
 8005ea0:	e067      	b.n	8005f72 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	6812      	ldr	r2, [r2, #0]
 8005eac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb4:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6899      	ldr	r1, [r3, #8]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	68d2      	ldr	r2, [r2, #12]
 8005edc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6919      	ldr	r1, [r3, #16]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	041a      	lsls	r2, r3, #16
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	68da      	ldr	r2, [r3, #12]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f00:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0203 	bic.w	r2, r2, #3
 8005f10:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	69da      	ldr	r2, [r3, #28]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	431a      	orrs	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f003 0320 	and.w	r3, r3, #32
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d113      	bne.n	8005f60 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f829 	bl	8005f90 <HAL_RTC_WaitForSynchro>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00d      	beq.n	8005f60 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	22ff      	movs	r2, #255	; 0xff
 8005f4a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2204      	movs	r2, #4
 8005f50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e010      	b.n	8005f82 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	22ff      	movs	r2, #255	; 0xff
 8005f66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	73fb      	strb	r3, [r7, #15]
 8005f6c:	e001      	b.n	8005f72 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d103      	bne.n	8005f80 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8005f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	40002800 	.word	0x40002800

08005f90 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005fa6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005fa8:	f7fd f998 	bl	80032dc <HAL_GetTick>
 8005fac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005fae:	e009      	b.n	8005fc4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005fb0:	f7fd f994 	bl	80032dc <HAL_GetTick>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fbe:	d901      	bls.n	8005fc4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e007      	b.n	8005fd4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0ee      	beq.n	8005fb0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d119      	bne.n	8006026 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8005ffa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005ffc:	f7fd f96e 	bl	80032dc <HAL_GetTick>
 8006000:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006002:	e009      	b.n	8006018 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006004:	f7fd f96a 	bl	80032dc <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006012:	d901      	bls.n	8006018 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e007      	b.n	8006028 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006022:	2b00      	cmp	r3, #0
 8006024:	d0ee      	beq.n	8006004 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d101      	bne.n	800604a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8006046:	2302      	movs	r3, #2
 8006048:	e0a8      	b.n	800619c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2202      	movs	r2, #2
 8006056:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	22ca      	movs	r2, #202	; 0xca
 8006060:	625a      	str	r2, [r3, #36]	; 0x24
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2253      	movs	r2, #83	; 0x53
 8006068:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006074:	2b00      	cmp	r3, #0
 8006076:	d020      	beq.n	80060ba <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006078:	f7fd f930 	bl	80032dc <HAL_GetTick>
 800607c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800607e:	e015      	b.n	80060ac <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006080:	f7fd f92c 	bl	80032dc <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800608e:	d90d      	bls.n	80060ac <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	22ff      	movs	r2, #255	; 0xff
 8006096:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2203      	movs	r2, #3
 800609c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e077      	b.n	800619c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f003 0304 	and.w	r3, r3, #4
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1e2      	bne.n	8006080 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689a      	ldr	r2, [r3, #8]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060c8:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80060da:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80060dc:	f7fd f8fe 	bl	80032dc <HAL_GetTick>
 80060e0:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80060e2:	e015      	b.n	8006110 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060e4:	f7fd f8fa 	bl	80032dc <HAL_GetTick>
 80060e8:	4602      	mov	r2, r0
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80060f2:	d90d      	bls.n	8006110 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	22ff      	movs	r2, #255	; 0xff
 80060fa:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2203      	movs	r2, #3
 8006100:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e045      	b.n	800619c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	f003 0304 	and.w	r3, r3, #4
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0e2      	beq.n	80060e4 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f022 0207 	bic.w	r2, r2, #7
 8006134:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6899      	ldr	r1, [r3, #8]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	430a      	orrs	r2, r1
 8006144:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006146:	4b17      	ldr	r3, [pc, #92]	; (80061a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800614c:	4a15      	ldr	r2, [pc, #84]	; (80061a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800614e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006152:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006156:	4b13      	ldr	r3, [pc, #76]	; (80061a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a12      	ldr	r2, [pc, #72]	; (80061a4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800615c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006160:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	689a      	ldr	r2, [r3, #8]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006170:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689a      	ldr	r2, [r3, #8]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006180:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	22ff      	movs	r2, #255	; 0xff
 8006188:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3718      	adds	r7, #24
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	58000800 	.word	0x58000800

080061a8 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d101      	bne.n	80061be <HAL_RTCEx_EnableBypassShadow+0x16>
 80061ba:	2302      	movs	r3, #2
 80061bc:	e024      	b.n	8006208 <HAL_RTCEx_EnableBypassShadow+0x60>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2202      	movs	r2, #2
 80061ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	22ca      	movs	r2, #202	; 0xca
 80061d4:	625a      	str	r2, [r3, #36]	; 0x24
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2253      	movs	r2, #83	; 0x53
 80061dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689a      	ldr	r2, [r3, #8]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f042 0220 	orr.w	r2, r2, #32
 80061ec:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	22ff      	movs	r2, #255	; 0xff
 80061f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <LL_RCC_GetUSARTClockSource>:
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800621c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006220:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4013      	ands	r3, r2
}
 8006228:	4618      	mov	r0, r3
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <LL_RCC_GetLPUARTClockSource>:
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800623c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006240:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4013      	ands	r3, r2
}
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e042      	b.n	80062ec <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800626c:	2b00      	cmp	r3, #0
 800626e:	d106      	bne.n	800627e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f7fc fc41 	bl	8002b00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2224      	movs	r2, #36	; 0x24
 8006282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f022 0201 	bic.w	r2, r2, #1
 8006294:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fe60 	bl	8006f64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fc35 	bl	8006b14 <UART_SetConfig>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e01b      	b.n	80062ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689a      	ldr	r2, [r3, #8]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f042 0201 	orr.w	r2, r2, #1
 80062e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fedf 	bl	80070a8 <UART_CheckIdleState>
 80062ea:	4603      	mov	r3, r0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3708      	adds	r7, #8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b08a      	sub	sp, #40	; 0x28
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	4613      	mov	r3, r2
 8006300:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006308:	2b20      	cmp	r3, #32
 800630a:	d137      	bne.n	800637c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d002      	beq.n	8006318 <HAL_UART_Receive_IT+0x24>
 8006312:	88fb      	ldrh	r3, [r7, #6]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e030      	b.n	800637e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a18      	ldr	r2, [pc, #96]	; (8006388 <HAL_UART_Receive_IT+0x94>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d01f      	beq.n	800636c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d018      	beq.n	800636c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	e853 3f00 	ldrex	r3, [r3]
 8006346:	613b      	str	r3, [r7, #16]
   return(result);
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800634e:	627b      	str	r3, [r7, #36]	; 0x24
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	461a      	mov	r2, r3
 8006356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006358:	623b      	str	r3, [r7, #32]
 800635a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	69f9      	ldr	r1, [r7, #28]
 800635e:	6a3a      	ldr	r2, [r7, #32]
 8006360:	e841 2300 	strex	r3, r2, [r1]
 8006364:	61bb      	str	r3, [r7, #24]
   return(result);
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1e6      	bne.n	800633a <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 800636c:	88fb      	ldrh	r3, [r7, #6]
 800636e:	461a      	mov	r2, r3
 8006370:	68b9      	ldr	r1, [r7, #8]
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 ffb0 	bl	80072d8 <UART_Start_Receive_IT>
 8006378:	4603      	mov	r3, r0
 800637a:	e000      	b.n	800637e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800637c:	2302      	movs	r3, #2
  }
}
 800637e:	4618      	mov	r0, r3
 8006380:	3728      	adds	r7, #40	; 0x28
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	40008000 	.word	0x40008000

0800638c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b08a      	sub	sp, #40	; 0x28
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	4613      	mov	r3, r2
 8006398:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a0:	2b20      	cmp	r3, #32
 80063a2:	d167      	bne.n	8006474 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <HAL_UART_Transmit_DMA+0x24>
 80063aa:	88fb      	ldrh	r3, [r7, #6]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d101      	bne.n	80063b4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e060      	b.n	8006476 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	88fa      	ldrh	r2, [r7, #6]
 80063be:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	88fa      	ldrh	r2, [r7, #6]
 80063c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2221      	movs	r2, #33	; 0x21
 80063d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d028      	beq.n	8006434 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063e6:	4a26      	ldr	r2, [pc, #152]	; (8006480 <HAL_UART_Transmit_DMA+0xf4>)
 80063e8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063ee:	4a25      	ldr	r2, [pc, #148]	; (8006484 <HAL_UART_Transmit_DMA+0xf8>)
 80063f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063f6:	4a24      	ldr	r2, [pc, #144]	; (8006488 <HAL_UART_Transmit_DMA+0xfc>)
 80063f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063fe:	2200      	movs	r2, #0
 8006400:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800640a:	4619      	mov	r1, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3328      	adds	r3, #40	; 0x28
 8006412:	461a      	mov	r2, r3
 8006414:	88fb      	ldrh	r3, [r7, #6]
 8006416:	f7fd f9d3 	bl	80037c0 <HAL_DMA_Start_IT>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d009      	beq.n	8006434 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2210      	movs	r2, #16
 8006424:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2220      	movs	r2, #32
 800642c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e020      	b.n	8006476 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2240      	movs	r2, #64	; 0x40
 800643a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3308      	adds	r3, #8
 8006442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	e853 3f00 	ldrex	r3, [r3]
 800644a:	613b      	str	r3, [r7, #16]
   return(result);
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006452:	627b      	str	r3, [r7, #36]	; 0x24
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3308      	adds	r3, #8
 800645a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800645c:	623a      	str	r2, [r7, #32]
 800645e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006460:	69f9      	ldr	r1, [r7, #28]
 8006462:	6a3a      	ldr	r2, [r7, #32]
 8006464:	e841 2300 	strex	r3, r2, [r1]
 8006468:	61bb      	str	r3, [r7, #24]
   return(result);
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1e5      	bne.n	800643c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8006470:	2300      	movs	r3, #0
 8006472:	e000      	b.n	8006476 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006474:	2302      	movs	r3, #2
  }
}
 8006476:	4618      	mov	r0, r3
 8006478:	3728      	adds	r7, #40	; 0x28
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	0800766b 	.word	0x0800766b
 8006484:	08007705 	.word	0x08007705
 8006488:	08007721 	.word	0x08007721

0800648c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b0ba      	sub	sp, #232	; 0xe8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80064b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80064b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80064ba:	4013      	ands	r3, r2
 80064bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80064c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d11b      	bne.n	8006500 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80064c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064cc:	f003 0320 	and.w	r3, r3, #32
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d015      	beq.n	8006500 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80064d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064d8:	f003 0320 	and.w	r3, r3, #32
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d105      	bne.n	80064ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80064e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d009      	beq.n	8006500 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 82e3 	beq.w	8006abc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	4798      	blx	r3
      }
      return;
 80064fe:	e2dd      	b.n	8006abc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006500:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006504:	2b00      	cmp	r3, #0
 8006506:	f000 8123 	beq.w	8006750 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800650a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800650e:	4b8d      	ldr	r3, [pc, #564]	; (8006744 <HAL_UART_IRQHandler+0x2b8>)
 8006510:	4013      	ands	r3, r2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d106      	bne.n	8006524 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006516:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800651a:	4b8b      	ldr	r3, [pc, #556]	; (8006748 <HAL_UART_IRQHandler+0x2bc>)
 800651c:	4013      	ands	r3, r2
 800651e:	2b00      	cmp	r3, #0
 8006520:	f000 8116 	beq.w	8006750 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b00      	cmp	r3, #0
 800652e:	d011      	beq.n	8006554 <HAL_UART_IRQHandler+0xc8>
 8006530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00b      	beq.n	8006554 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2201      	movs	r2, #1
 8006542:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800654a:	f043 0201 	orr.w	r2, r3, #1
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d011      	beq.n	8006584 <HAL_UART_IRQHandler+0xf8>
 8006560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00b      	beq.n	8006584 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2202      	movs	r2, #2
 8006572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800657a:	f043 0204 	orr.w	r2, r3, #4
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006584:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006588:	f003 0304 	and.w	r3, r3, #4
 800658c:	2b00      	cmp	r3, #0
 800658e:	d011      	beq.n	80065b4 <HAL_UART_IRQHandler+0x128>
 8006590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00b      	beq.n	80065b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2204      	movs	r2, #4
 80065a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065aa:	f043 0202 	orr.w	r2, r3, #2
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80065b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065b8:	f003 0308 	and.w	r3, r3, #8
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d017      	beq.n	80065f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80065c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065c4:	f003 0320 	and.w	r3, r3, #32
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d105      	bne.n	80065d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80065cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80065d0:	4b5c      	ldr	r3, [pc, #368]	; (8006744 <HAL_UART_IRQHandler+0x2b8>)
 80065d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00b      	beq.n	80065f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2208      	movs	r2, #8
 80065de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065e6:	f043 0208 	orr.w	r2, r3, #8
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80065f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d012      	beq.n	8006622 <HAL_UART_IRQHandler+0x196>
 80065fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006600:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00c      	beq.n	8006622 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006610:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006618:	f043 0220 	orr.w	r2, r3, #32
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006628:	2b00      	cmp	r3, #0
 800662a:	f000 8249 	beq.w	8006ac0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800662e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006632:	f003 0320 	and.w	r3, r3, #32
 8006636:	2b00      	cmp	r3, #0
 8006638:	d013      	beq.n	8006662 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800663a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b00      	cmp	r3, #0
 8006644:	d105      	bne.n	8006652 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800664a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d007      	beq.n	8006662 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006668:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006676:	2b40      	cmp	r3, #64	; 0x40
 8006678:	d005      	beq.n	8006686 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800667a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800667e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006682:	2b00      	cmp	r3, #0
 8006684:	d054      	beq.n	8006730 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 ff89 	bl	800759e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006696:	2b40      	cmp	r3, #64	; 0x40
 8006698:	d146      	bne.n	8006728 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3308      	adds	r3, #8
 80066a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80066a8:	e853 3f00 	ldrex	r3, [r3]
 80066ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80066b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80066b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3308      	adds	r3, #8
 80066c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80066c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80066ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80066d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80066de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1d9      	bne.n	800669a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d017      	beq.n	8006720 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066f6:	4a15      	ldr	r2, [pc, #84]	; (800674c <HAL_UART_IRQHandler+0x2c0>)
 80066f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006700:	4618      	mov	r0, r3
 8006702:	f7fd f937 	bl	8003974 <HAL_DMA_Abort_IT>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d019      	beq.n	8006740 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800671a:	4610      	mov	r0, r2
 800671c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800671e:	e00f      	b.n	8006740 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 f9e1 	bl	8006ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006726:	e00b      	b.n	8006740 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 f9dd 	bl	8006ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800672e:	e007      	b.n	8006740 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 f9d9 	bl	8006ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800673e:	e1bf      	b.n	8006ac0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006740:	bf00      	nop
    return;
 8006742:	e1bd      	b.n	8006ac0 <HAL_UART_IRQHandler+0x634>
 8006744:	10000001 	.word	0x10000001
 8006748:	04000120 	.word	0x04000120
 800674c:	080077a1 	.word	0x080077a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006754:	2b01      	cmp	r3, #1
 8006756:	f040 8153 	bne.w	8006a00 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800675a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800675e:	f003 0310 	and.w	r3, r3, #16
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 814c 	beq.w	8006a00 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800676c:	f003 0310 	and.w	r3, r3, #16
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 8145 	beq.w	8006a00 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2210      	movs	r2, #16
 800677c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006788:	2b40      	cmp	r3, #64	; 0x40
 800678a:	f040 80bb 	bne.w	8006904 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800679c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	f000 818f 	beq.w	8006ac4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80067ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067b0:	429a      	cmp	r2, r3
 80067b2:	f080 8187 	bcs.w	8006ac4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80067bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0320 	and.w	r3, r3, #32
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f040 8087 	bne.w	80068e2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067e0:	e853 3f00 	ldrex	r3, [r3]
 80067e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80067e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80067ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	461a      	mov	r2, r3
 80067fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80067fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006802:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006806:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800680a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800680e:	e841 2300 	strex	r3, r2, [r1]
 8006812:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006816:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1da      	bne.n	80067d4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	3308      	adds	r3, #8
 8006824:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006826:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006828:	e853 3f00 	ldrex	r3, [r3]
 800682c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800682e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006830:	f023 0301 	bic.w	r3, r3, #1
 8006834:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	3308      	adds	r3, #8
 800683e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006842:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006846:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006848:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800684a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800684e:	e841 2300 	strex	r3, r2, [r1]
 8006852:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1e1      	bne.n	800681e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3308      	adds	r3, #8
 8006860:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006862:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006864:	e853 3f00 	ldrex	r3, [r3]
 8006868:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800686a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800686c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006870:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3308      	adds	r3, #8
 800687a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800687e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006880:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006882:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006884:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006886:	e841 2300 	strex	r3, r2, [r1]
 800688a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800688c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1e3      	bne.n	800685a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2220      	movs	r2, #32
 8006896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a8:	e853 3f00 	ldrex	r3, [r3]
 80068ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80068ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068b0:	f023 0310 	bic.w	r3, r3, #16
 80068b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	461a      	mov	r2, r3
 80068be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80068c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80068c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068ca:	e841 2300 	strex	r3, r2, [r1]
 80068ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80068d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1e4      	bne.n	80068a0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068dc:	4618      	mov	r0, r3
 80068de:	f7fc ffea 	bl	80038b6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2202      	movs	r2, #2
 80068e6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	4619      	mov	r1, r3
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 f8fd 	bl	8006afc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006902:	e0df      	b.n	8006ac4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006910:	b29b      	uxth	r3, r3
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800691e:	b29b      	uxth	r3, r3
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 80d1 	beq.w	8006ac8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006926:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 80cc 	beq.w	8006ac8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006938:	e853 3f00 	ldrex	r3, [r3]
 800693c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800693e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006940:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006944:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	461a      	mov	r2, r3
 800694e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006952:	647b      	str	r3, [r7, #68]	; 0x44
 8006954:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006956:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006958:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800695a:	e841 2300 	strex	r3, r2, [r1]
 800695e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1e4      	bne.n	8006930 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	3308      	adds	r3, #8
 800696c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	e853 3f00 	ldrex	r3, [r3]
 8006974:	623b      	str	r3, [r7, #32]
   return(result);
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800697c:	f023 0301 	bic.w	r3, r3, #1
 8006980:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3308      	adds	r3, #8
 800698a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800698e:	633a      	str	r2, [r7, #48]	; 0x30
 8006990:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006992:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006996:	e841 2300 	strex	r3, r2, [r1]
 800699a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800699c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1e1      	bne.n	8006966 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	e853 3f00 	ldrex	r3, [r3]
 80069c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f023 0310 	bic.w	r3, r3, #16
 80069ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	461a      	mov	r2, r3
 80069d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80069d8:	61fb      	str	r3, [r7, #28]
 80069da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069dc:	69b9      	ldr	r1, [r7, #24]
 80069de:	69fa      	ldr	r2, [r7, #28]
 80069e0:	e841 2300 	strex	r3, r2, [r1]
 80069e4:	617b      	str	r3, [r7, #20]
   return(result);
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1e4      	bne.n	80069b6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2202      	movs	r2, #2
 80069f0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069f6:	4619      	mov	r1, r3
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f87f 	bl	8006afc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069fe:	e063      	b.n	8006ac8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00e      	beq.n	8006a2a <HAL_UART_IRQHandler+0x59e>
 8006a0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d008      	beq.n	8006a2a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a20:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f001 fc1a 	bl	800825c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a28:	e051      	b.n	8006ace <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d014      	beq.n	8006a60 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d105      	bne.n	8006a4e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d008      	beq.n	8006a60 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d03a      	beq.n	8006acc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	4798      	blx	r3
    }
    return;
 8006a5e:	e035      	b.n	8006acc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d009      	beq.n	8006a80 <HAL_UART_IRQHandler+0x5f4>
 8006a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d003      	beq.n	8006a80 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fea7 	bl	80077cc <UART_EndTransmit_IT>
    return;
 8006a7e:	e026      	b.n	8006ace <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d009      	beq.n	8006aa0 <HAL_UART_IRQHandler+0x614>
 8006a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d003      	beq.n	8006aa0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f001 fbf3 	bl	8008284 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a9e:	e016      	b.n	8006ace <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d010      	beq.n	8006ace <HAL_UART_IRQHandler+0x642>
 8006aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	da0c      	bge.n	8006ace <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f001 fbdb 	bl	8008270 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006aba:	e008      	b.n	8006ace <HAL_UART_IRQHandler+0x642>
      return;
 8006abc:	bf00      	nop
 8006abe:	e006      	b.n	8006ace <HAL_UART_IRQHandler+0x642>
    return;
 8006ac0:	bf00      	nop
 8006ac2:	e004      	b.n	8006ace <HAL_UART_IRQHandler+0x642>
      return;
 8006ac4:	bf00      	nop
 8006ac6:	e002      	b.n	8006ace <HAL_UART_IRQHandler+0x642>
      return;
 8006ac8:	bf00      	nop
 8006aca:	e000      	b.n	8006ace <HAL_UART_IRQHandler+0x642>
    return;
 8006acc:	bf00      	nop
  }
}
 8006ace:	37e8      	adds	r7, #232	; 0xe8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	460b      	mov	r3, r1
 8006b06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b18:	b08c      	sub	sp, #48	; 0x30
 8006b1a:	af00      	add	r7, sp, #0
 8006b1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	689a      	ldr	r2, [r3, #8]
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	431a      	orrs	r2, r3
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	4baf      	ldr	r3, [pc, #700]	; (8006e00 <UART_SetConfig+0x2ec>)
 8006b44:	4013      	ands	r3, r2
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	6812      	ldr	r2, [r2, #0]
 8006b4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b4c:	430b      	orrs	r3, r1
 8006b4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	68da      	ldr	r2, [r3, #12]
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	699b      	ldr	r3, [r3, #24]
 8006b6a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4aa4      	ldr	r2, [pc, #656]	; (8006e04 <UART_SetConfig+0x2f0>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d004      	beq.n	8006b80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006b8a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	6812      	ldr	r2, [r2, #0]
 8006b92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b94:	430b      	orrs	r3, r1
 8006b96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9e:	f023 010f 	bic.w	r1, r3, #15
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a95      	ldr	r2, [pc, #596]	; (8006e08 <UART_SetConfig+0x2f4>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d125      	bne.n	8006c04 <UART_SetConfig+0xf0>
 8006bb8:	2003      	movs	r0, #3
 8006bba:	f7ff fb2b 	bl	8006214 <LL_RCC_GetUSARTClockSource>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b03      	cmp	r3, #3
 8006bc2:	d81b      	bhi.n	8006bfc <UART_SetConfig+0xe8>
 8006bc4:	a201      	add	r2, pc, #4	; (adr r2, 8006bcc <UART_SetConfig+0xb8>)
 8006bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bca:	bf00      	nop
 8006bcc:	08006bdd 	.word	0x08006bdd
 8006bd0:	08006bed 	.word	0x08006bed
 8006bd4:	08006be5 	.word	0x08006be5
 8006bd8:	08006bf5 	.word	0x08006bf5
 8006bdc:	2301      	movs	r3, #1
 8006bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006be2:	e042      	b.n	8006c6a <UART_SetConfig+0x156>
 8006be4:	2302      	movs	r3, #2
 8006be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bea:	e03e      	b.n	8006c6a <UART_SetConfig+0x156>
 8006bec:	2304      	movs	r3, #4
 8006bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bf2:	e03a      	b.n	8006c6a <UART_SetConfig+0x156>
 8006bf4:	2308      	movs	r3, #8
 8006bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bfa:	e036      	b.n	8006c6a <UART_SetConfig+0x156>
 8006bfc:	2310      	movs	r3, #16
 8006bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c02:	e032      	b.n	8006c6a <UART_SetConfig+0x156>
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a7e      	ldr	r2, [pc, #504]	; (8006e04 <UART_SetConfig+0x2f0>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d12a      	bne.n	8006c64 <UART_SetConfig+0x150>
 8006c0e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006c12:	f7ff fb0f 	bl	8006234 <LL_RCC_GetLPUARTClockSource>
 8006c16:	4603      	mov	r3, r0
 8006c18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c1c:	d01a      	beq.n	8006c54 <UART_SetConfig+0x140>
 8006c1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c22:	d81b      	bhi.n	8006c5c <UART_SetConfig+0x148>
 8006c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c28:	d00c      	beq.n	8006c44 <UART_SetConfig+0x130>
 8006c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c2e:	d815      	bhi.n	8006c5c <UART_SetConfig+0x148>
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <UART_SetConfig+0x128>
 8006c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c38:	d008      	beq.n	8006c4c <UART_SetConfig+0x138>
 8006c3a:	e00f      	b.n	8006c5c <UART_SetConfig+0x148>
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c42:	e012      	b.n	8006c6a <UART_SetConfig+0x156>
 8006c44:	2302      	movs	r3, #2
 8006c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c4a:	e00e      	b.n	8006c6a <UART_SetConfig+0x156>
 8006c4c:	2304      	movs	r3, #4
 8006c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c52:	e00a      	b.n	8006c6a <UART_SetConfig+0x156>
 8006c54:	2308      	movs	r3, #8
 8006c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c5a:	e006      	b.n	8006c6a <UART_SetConfig+0x156>
 8006c5c:	2310      	movs	r3, #16
 8006c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c62:	e002      	b.n	8006c6a <UART_SetConfig+0x156>
 8006c64:	2310      	movs	r3, #16
 8006c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a65      	ldr	r2, [pc, #404]	; (8006e04 <UART_SetConfig+0x2f0>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	f040 8097 	bne.w	8006da4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006c7a:	2b08      	cmp	r3, #8
 8006c7c:	d823      	bhi.n	8006cc6 <UART_SetConfig+0x1b2>
 8006c7e:	a201      	add	r2, pc, #4	; (adr r2, 8006c84 <UART_SetConfig+0x170>)
 8006c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c84:	08006ca9 	.word	0x08006ca9
 8006c88:	08006cc7 	.word	0x08006cc7
 8006c8c:	08006cb1 	.word	0x08006cb1
 8006c90:	08006cc7 	.word	0x08006cc7
 8006c94:	08006cb7 	.word	0x08006cb7
 8006c98:	08006cc7 	.word	0x08006cc7
 8006c9c:	08006cc7 	.word	0x08006cc7
 8006ca0:	08006cc7 	.word	0x08006cc7
 8006ca4:	08006cbf 	.word	0x08006cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ca8:	f7fe fb88 	bl	80053bc <HAL_RCC_GetPCLK1Freq>
 8006cac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cae:	e010      	b.n	8006cd2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cb0:	4b56      	ldr	r3, [pc, #344]	; (8006e0c <UART_SetConfig+0x2f8>)
 8006cb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006cb4:	e00d      	b.n	8006cd2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cb6:	f7fe fb01 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 8006cba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cbc:	e009      	b.n	8006cd2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006cc4:	e005      	b.n	8006cd2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006cd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 812b 	beq.w	8006f30 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cde:	4a4c      	ldr	r2, [pc, #304]	; (8006e10 <UART_SetConfig+0x2fc>)
 8006ce0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	685a      	ldr	r2, [r3, #4]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	005b      	lsls	r3, r3, #1
 8006cf6:	4413      	add	r3, r2
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d305      	bcc.n	8006d0a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d903      	bls.n	8006d12 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006d10:	e10e      	b.n	8006f30 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	2200      	movs	r2, #0
 8006d16:	60bb      	str	r3, [r7, #8]
 8006d18:	60fa      	str	r2, [r7, #12]
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d1e:	4a3c      	ldr	r2, [pc, #240]	; (8006e10 <UART_SetConfig+0x2fc>)
 8006d20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	2200      	movs	r2, #0
 8006d28:	603b      	str	r3, [r7, #0]
 8006d2a:	607a      	str	r2, [r7, #4]
 8006d2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d34:	f7f9 fd72 	bl	800081c <__aeabi_uldivmod>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	4619      	mov	r1, r3
 8006d40:	f04f 0200 	mov.w	r2, #0
 8006d44:	f04f 0300 	mov.w	r3, #0
 8006d48:	020b      	lsls	r3, r1, #8
 8006d4a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d4e:	0202      	lsls	r2, r0, #8
 8006d50:	6979      	ldr	r1, [r7, #20]
 8006d52:	6849      	ldr	r1, [r1, #4]
 8006d54:	0849      	lsrs	r1, r1, #1
 8006d56:	2000      	movs	r0, #0
 8006d58:	460c      	mov	r4, r1
 8006d5a:	4605      	mov	r5, r0
 8006d5c:	eb12 0804 	adds.w	r8, r2, r4
 8006d60:	eb43 0905 	adc.w	r9, r3, r5
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	469a      	mov	sl, r3
 8006d6c:	4693      	mov	fp, r2
 8006d6e:	4652      	mov	r2, sl
 8006d70:	465b      	mov	r3, fp
 8006d72:	4640      	mov	r0, r8
 8006d74:	4649      	mov	r1, r9
 8006d76:	f7f9 fd51 	bl	800081c <__aeabi_uldivmod>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	4613      	mov	r3, r2
 8006d80:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d82:	6a3b      	ldr	r3, [r7, #32]
 8006d84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d88:	d308      	bcc.n	8006d9c <UART_SetConfig+0x288>
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d90:	d204      	bcs.n	8006d9c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6a3a      	ldr	r2, [r7, #32]
 8006d98:	60da      	str	r2, [r3, #12]
 8006d9a:	e0c9      	b.n	8006f30 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006da2:	e0c5      	b.n	8006f30 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	69db      	ldr	r3, [r3, #28]
 8006da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dac:	d16d      	bne.n	8006e8a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006dae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006db2:	3b01      	subs	r3, #1
 8006db4:	2b07      	cmp	r3, #7
 8006db6:	d82d      	bhi.n	8006e14 <UART_SetConfig+0x300>
 8006db8:	a201      	add	r2, pc, #4	; (adr r2, 8006dc0 <UART_SetConfig+0x2ac>)
 8006dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbe:	bf00      	nop
 8006dc0:	08006de1 	.word	0x08006de1
 8006dc4:	08006de9 	.word	0x08006de9
 8006dc8:	08006e15 	.word	0x08006e15
 8006dcc:	08006def 	.word	0x08006def
 8006dd0:	08006e15 	.word	0x08006e15
 8006dd4:	08006e15 	.word	0x08006e15
 8006dd8:	08006e15 	.word	0x08006e15
 8006ddc:	08006df7 	.word	0x08006df7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006de0:	f7fe fb02 	bl	80053e8 <HAL_RCC_GetPCLK2Freq>
 8006de4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006de6:	e01b      	b.n	8006e20 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006de8:	4b08      	ldr	r3, [pc, #32]	; (8006e0c <UART_SetConfig+0x2f8>)
 8006dea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006dec:	e018      	b.n	8006e20 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dee:	f7fe fa65 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 8006df2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006df4:	e014      	b.n	8006e20 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006dfc:	e010      	b.n	8006e20 <UART_SetConfig+0x30c>
 8006dfe:	bf00      	nop
 8006e00:	cfff69f3 	.word	0xcfff69f3
 8006e04:	40008000 	.word	0x40008000
 8006e08:	40013800 	.word	0x40013800
 8006e0c:	00f42400 	.word	0x00f42400
 8006e10:	0800f5d8 	.word	0x0800f5d8
      default:
        pclk = 0U;
 8006e14:	2300      	movs	r3, #0
 8006e16:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 8084 	beq.w	8006f30 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2c:	4a4b      	ldr	r2, [pc, #300]	; (8006f5c <UART_SetConfig+0x448>)
 8006e2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e32:	461a      	mov	r2, r3
 8006e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e36:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e3a:	005a      	lsls	r2, r3, #1
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	085b      	lsrs	r3, r3, #1
 8006e42:	441a      	add	r2, r3
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e4c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e4e:	6a3b      	ldr	r3, [r7, #32]
 8006e50:	2b0f      	cmp	r3, #15
 8006e52:	d916      	bls.n	8006e82 <UART_SetConfig+0x36e>
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e5a:	d212      	bcs.n	8006e82 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e5c:	6a3b      	ldr	r3, [r7, #32]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	f023 030f 	bic.w	r3, r3, #15
 8006e64:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	085b      	lsrs	r3, r3, #1
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	f003 0307 	and.w	r3, r3, #7
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	8bfb      	ldrh	r3, [r7, #30]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	8bfa      	ldrh	r2, [r7, #30]
 8006e7e:	60da      	str	r2, [r3, #12]
 8006e80:	e056      	b.n	8006f30 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e88:	e052      	b.n	8006f30 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	2b07      	cmp	r3, #7
 8006e92:	d822      	bhi.n	8006eda <UART_SetConfig+0x3c6>
 8006e94:	a201      	add	r2, pc, #4	; (adr r2, 8006e9c <UART_SetConfig+0x388>)
 8006e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9a:	bf00      	nop
 8006e9c:	08006ebd 	.word	0x08006ebd
 8006ea0:	08006ec5 	.word	0x08006ec5
 8006ea4:	08006edb 	.word	0x08006edb
 8006ea8:	08006ecb 	.word	0x08006ecb
 8006eac:	08006edb 	.word	0x08006edb
 8006eb0:	08006edb 	.word	0x08006edb
 8006eb4:	08006edb 	.word	0x08006edb
 8006eb8:	08006ed3 	.word	0x08006ed3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ebc:	f7fe fa94 	bl	80053e8 <HAL_RCC_GetPCLK2Freq>
 8006ec0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ec2:	e010      	b.n	8006ee6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ec4:	4b26      	ldr	r3, [pc, #152]	; (8006f60 <UART_SetConfig+0x44c>)
 8006ec6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ec8:	e00d      	b.n	8006ee6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eca:	f7fe f9f7 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 8006ece:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ed0:	e009      	b.n	8006ee6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ed8:	e005      	b.n	8006ee6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8006eda:	2300      	movs	r3, #0
 8006edc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006ee4:	bf00      	nop
    }

    if (pclk != 0U)
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d021      	beq.n	8006f30 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef0:	4a1a      	ldr	r2, [pc, #104]	; (8006f5c <UART_SetConfig+0x448>)
 8006ef2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	fbb3 f2f2 	udiv	r2, r3, r2
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	085b      	lsrs	r3, r3, #1
 8006f04:	441a      	add	r2, r3
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	2b0f      	cmp	r3, #15
 8006f14:	d909      	bls.n	8006f2a <UART_SetConfig+0x416>
 8006f16:	6a3b      	ldr	r3, [r7, #32]
 8006f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f1c:	d205      	bcs.n	8006f2a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	b29a      	uxth	r2, r3
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	60da      	str	r2, [r3, #12]
 8006f28:	e002      	b.n	8006f30 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	2200      	movs	r2, #0
 8006f44:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006f4c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3730      	adds	r7, #48	; 0x30
 8006f54:	46bd      	mov	sp, r7
 8006f56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f5a:	bf00      	nop
 8006f5c:	0800f5d8 	.word	0x0800f5d8
 8006f60:	00f42400 	.word	0x00f42400

08006f64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f70:	f003 0308 	and.w	r3, r3, #8
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00a      	beq.n	8006f8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	430a      	orrs	r2, r1
 8006f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00a      	beq.n	8006fb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	430a      	orrs	r2, r1
 8006fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb4:	f003 0302 	and.w	r3, r3, #2
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d00a      	beq.n	8006fd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd6:	f003 0304 	and.w	r3, r3, #4
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00a      	beq.n	8006ff4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff8:	f003 0310 	and.w	r3, r3, #16
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00a      	beq.n	8007016 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701a:	f003 0320 	and.w	r3, r3, #32
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00a      	beq.n	8007038 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	430a      	orrs	r2, r1
 8007036:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007040:	2b00      	cmp	r3, #0
 8007042:	d01a      	beq.n	800707a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800705e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007062:	d10a      	bne.n	800707a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	430a      	orrs	r2, r1
 8007078:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00a      	beq.n	800709c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	430a      	orrs	r2, r1
 800709a:	605a      	str	r2, [r3, #4]
  }
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b098      	sub	sp, #96	; 0x60
 80070ac:	af02      	add	r7, sp, #8
 80070ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070b8:	f7fc f910 	bl	80032dc <HAL_GetTick>
 80070bc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0308 	and.w	r3, r3, #8
 80070c8:	2b08      	cmp	r3, #8
 80070ca:	d12f      	bne.n	800712c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070d4:	2200      	movs	r2, #0
 80070d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f88e 	bl	80071fc <UART_WaitOnFlagUntilTimeout>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d022      	beq.n	800712c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ee:	e853 3f00 	ldrex	r3, [r3]
 80070f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070fa:	653b      	str	r3, [r7, #80]	; 0x50
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	461a      	mov	r2, r3
 8007102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007104:	647b      	str	r3, [r7, #68]	; 0x44
 8007106:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007108:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800710a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800710c:	e841 2300 	strex	r3, r2, [r1]
 8007110:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e6      	bne.n	80070e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2220      	movs	r2, #32
 800711c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e063      	b.n	80071f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0304 	and.w	r3, r3, #4
 8007136:	2b04      	cmp	r3, #4
 8007138:	d149      	bne.n	80071ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800713a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800713e:	9300      	str	r3, [sp, #0]
 8007140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007142:	2200      	movs	r2, #0
 8007144:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f857 	bl	80071fc <UART_WaitOnFlagUntilTimeout>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	d03c      	beq.n	80071ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	e853 3f00 	ldrex	r3, [r3]
 8007160:	623b      	str	r3, [r7, #32]
   return(result);
 8007162:	6a3b      	ldr	r3, [r7, #32]
 8007164:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007168:	64fb      	str	r3, [r7, #76]	; 0x4c
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	461a      	mov	r2, r3
 8007170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007172:	633b      	str	r3, [r7, #48]	; 0x30
 8007174:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007176:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800717a:	e841 2300 	strex	r3, r2, [r1]
 800717e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1e6      	bne.n	8007154 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3308      	adds	r3, #8
 800718c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	e853 3f00 	ldrex	r3, [r3]
 8007194:	60fb      	str	r3, [r7, #12]
   return(result);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f023 0301 	bic.w	r3, r3, #1
 800719c:	64bb      	str	r3, [r7, #72]	; 0x48
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	3308      	adds	r3, #8
 80071a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071a6:	61fa      	str	r2, [r7, #28]
 80071a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071aa:	69b9      	ldr	r1, [r7, #24]
 80071ac:	69fa      	ldr	r2, [r7, #28]
 80071ae:	e841 2300 	strex	r3, r2, [r1]
 80071b2:	617b      	str	r3, [r7, #20]
   return(result);
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1e5      	bne.n	8007186 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2220      	movs	r2, #32
 80071be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071ca:	2303      	movs	r3, #3
 80071cc:	e012      	b.n	80071f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2220      	movs	r2, #32
 80071d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2220      	movs	r2, #32
 80071da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3758      	adds	r7, #88	; 0x58
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	603b      	str	r3, [r7, #0]
 8007208:	4613      	mov	r3, r2
 800720a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800720c:	e04f      	b.n	80072ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007214:	d04b      	beq.n	80072ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007216:	f7fc f861 	bl	80032dc <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	429a      	cmp	r2, r3
 8007224:	d302      	bcc.n	800722c <UART_WaitOnFlagUntilTimeout+0x30>
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e04e      	b.n	80072ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0304 	and.w	r3, r3, #4
 800723a:	2b00      	cmp	r3, #0
 800723c:	d037      	beq.n	80072ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	2b80      	cmp	r3, #128	; 0x80
 8007242:	d034      	beq.n	80072ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	2b40      	cmp	r3, #64	; 0x40
 8007248:	d031      	beq.n	80072ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	69db      	ldr	r3, [r3, #28]
 8007250:	f003 0308 	and.w	r3, r3, #8
 8007254:	2b08      	cmp	r3, #8
 8007256:	d110      	bne.n	800727a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2208      	movs	r2, #8
 800725e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007260:	68f8      	ldr	r0, [r7, #12]
 8007262:	f000 f99c 	bl	800759e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2208      	movs	r2, #8
 800726a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e029      	b.n	80072ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	69db      	ldr	r3, [r3, #28]
 8007280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007288:	d111      	bne.n	80072ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007292:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f000 f982 	bl	800759e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2220      	movs	r2, #32
 800729e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e00f      	b.n	80072ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	69da      	ldr	r2, [r3, #28]
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	4013      	ands	r3, r2
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	bf0c      	ite	eq
 80072be:	2301      	moveq	r3, #1
 80072c0:	2300      	movne	r3, #0
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	461a      	mov	r2, r3
 80072c6:	79fb      	ldrb	r3, [r7, #7]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d0a0      	beq.n	800720e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072cc:	2300      	movs	r3, #0
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
	...

080072d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072d8:	b480      	push	{r7}
 80072da:	b0a3      	sub	sp, #140	; 0x8c
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	4613      	mov	r3, r2
 80072e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	88fa      	ldrh	r2, [r7, #6]
 80072f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	88fa      	ldrh	r2, [r7, #6]
 80072f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800730a:	d10e      	bne.n	800732a <UART_Start_Receive_IT+0x52>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	691b      	ldr	r3, [r3, #16]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d105      	bne.n	8007320 <UART_Start_Receive_IT+0x48>
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	f240 12ff 	movw	r2, #511	; 0x1ff
 800731a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800731e:	e02d      	b.n	800737c <UART_Start_Receive_IT+0xa4>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	22ff      	movs	r2, #255	; 0xff
 8007324:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007328:	e028      	b.n	800737c <UART_Start_Receive_IT+0xa4>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10d      	bne.n	800734e <UART_Start_Receive_IT+0x76>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d104      	bne.n	8007344 <UART_Start_Receive_IT+0x6c>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	22ff      	movs	r2, #255	; 0xff
 800733e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007342:	e01b      	b.n	800737c <UART_Start_Receive_IT+0xa4>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	227f      	movs	r2, #127	; 0x7f
 8007348:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800734c:	e016      	b.n	800737c <UART_Start_Receive_IT+0xa4>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007356:	d10d      	bne.n	8007374 <UART_Start_Receive_IT+0x9c>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d104      	bne.n	800736a <UART_Start_Receive_IT+0x92>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	227f      	movs	r2, #127	; 0x7f
 8007364:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007368:	e008      	b.n	800737c <UART_Start_Receive_IT+0xa4>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	223f      	movs	r2, #63	; 0x3f
 800736e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007372:	e003      	b.n	800737c <UART_Start_Receive_IT+0xa4>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2200      	movs	r2, #0
 8007378:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2222      	movs	r2, #34	; 0x22
 8007388:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3308      	adds	r3, #8
 8007392:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007396:	e853 3f00 	ldrex	r3, [r3]
 800739a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800739c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800739e:	f043 0301 	orr.w	r3, r3, #1
 80073a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	3308      	adds	r3, #8
 80073ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80073b0:	673a      	str	r2, [r7, #112]	; 0x70
 80073b2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80073b6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80073b8:	e841 2300 	strex	r3, r2, [r1]
 80073bc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80073be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1e3      	bne.n	800738c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073cc:	d14f      	bne.n	800746e <UART_Start_Receive_IT+0x196>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80073d4:	88fa      	ldrh	r2, [r7, #6]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d349      	bcc.n	800746e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073e2:	d107      	bne.n	80073f4 <UART_Start_Receive_IT+0x11c>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	691b      	ldr	r3, [r3, #16]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d103      	bne.n	80073f4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	4a47      	ldr	r2, [pc, #284]	; (800750c <UART_Start_Receive_IT+0x234>)
 80073f0:	675a      	str	r2, [r3, #116]	; 0x74
 80073f2:	e002      	b.n	80073fa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	4a46      	ldr	r2, [pc, #280]	; (8007510 <UART_Start_Receive_IT+0x238>)
 80073f8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d01a      	beq.n	8007438 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800740a:	e853 3f00 	ldrex	r3, [r3]
 800740e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007416:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	461a      	mov	r2, r3
 8007420:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007424:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007426:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007428:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800742a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800742c:	e841 2300 	strex	r3, r2, [r1]
 8007430:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1e4      	bne.n	8007402 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	3308      	adds	r3, #8
 800743e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007442:	e853 3f00 	ldrex	r3, [r3]
 8007446:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800744a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800744e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	3308      	adds	r3, #8
 8007456:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007458:	64ba      	str	r2, [r7, #72]	; 0x48
 800745a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800745e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007460:	e841 2300 	strex	r3, r2, [r1]
 8007464:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1e5      	bne.n	8007438 <UART_Start_Receive_IT+0x160>
 800746c:	e046      	b.n	80074fc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007476:	d107      	bne.n	8007488 <UART_Start_Receive_IT+0x1b0>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d103      	bne.n	8007488 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	4a24      	ldr	r2, [pc, #144]	; (8007514 <UART_Start_Receive_IT+0x23c>)
 8007484:	675a      	str	r2, [r3, #116]	; 0x74
 8007486:	e002      	b.n	800748e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	4a23      	ldr	r2, [pc, #140]	; (8007518 <UART_Start_Receive_IT+0x240>)
 800748c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	691b      	ldr	r3, [r3, #16]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d019      	beq.n	80074ca <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749e:	e853 3f00 	ldrex	r3, [r3]
 80074a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80074a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80074aa:	677b      	str	r3, [r7, #116]	; 0x74
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	461a      	mov	r2, r3
 80074b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074b4:	637b      	str	r3, [r7, #52]	; 0x34
 80074b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80074ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074bc:	e841 2300 	strex	r3, r2, [r1]
 80074c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80074c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d1e6      	bne.n	8007496 <UART_Start_Receive_IT+0x1be>
 80074c8:	e018      	b.n	80074fc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	e853 3f00 	ldrex	r3, [r3]
 80074d6:	613b      	str	r3, [r7, #16]
   return(result);
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	f043 0320 	orr.w	r3, r3, #32
 80074de:	67bb      	str	r3, [r7, #120]	; 0x78
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	461a      	mov	r2, r3
 80074e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074e8:	623b      	str	r3, [r7, #32]
 80074ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ec:	69f9      	ldr	r1, [r7, #28]
 80074ee:	6a3a      	ldr	r2, [r7, #32]
 80074f0:	e841 2300 	strex	r3, r2, [r1]
 80074f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1e6      	bne.n	80074ca <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80074fc:	2300      	movs	r3, #0
}
 80074fe:	4618      	mov	r0, r3
 8007500:	378c      	adds	r7, #140	; 0x8c
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	08007ef5 	.word	0x08007ef5
 8007510:	08007b95 	.word	0x08007b95
 8007514:	080079dd 	.word	0x080079dd
 8007518:	08007825 	.word	0x08007825

0800751c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800751c:	b480      	push	{r7}
 800751e:	b08f      	sub	sp, #60	; 0x3c
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752a:	6a3b      	ldr	r3, [r7, #32]
 800752c:	e853 3f00 	ldrex	r3, [r3]
 8007530:	61fb      	str	r3, [r7, #28]
   return(result);
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007538:	637b      	str	r3, [r7, #52]	; 0x34
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	461a      	mov	r2, r3
 8007540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007544:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007546:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800754a:	e841 2300 	strex	r3, r2, [r1]
 800754e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1e6      	bne.n	8007524 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	3308      	adds	r3, #8
 800755c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	e853 3f00 	ldrex	r3, [r3]
 8007564:	60bb      	str	r3, [r7, #8]
   return(result);
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800756c:	633b      	str	r3, [r7, #48]	; 0x30
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	3308      	adds	r3, #8
 8007574:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007576:	61ba      	str	r2, [r7, #24]
 8007578:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757a:	6979      	ldr	r1, [r7, #20]
 800757c:	69ba      	ldr	r2, [r7, #24]
 800757e:	e841 2300 	strex	r3, r2, [r1]
 8007582:	613b      	str	r3, [r7, #16]
   return(result);
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1e5      	bne.n	8007556 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2220      	movs	r2, #32
 800758e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8007592:	bf00      	nop
 8007594:	373c      	adds	r7, #60	; 0x3c
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr

0800759e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800759e:	b480      	push	{r7}
 80075a0:	b095      	sub	sp, #84	; 0x54
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ae:	e853 3f00 	ldrex	r3, [r3]
 80075b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	461a      	mov	r2, r3
 80075c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075c4:	643b      	str	r3, [r7, #64]	; 0x40
 80075c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075cc:	e841 2300 	strex	r3, r2, [r1]
 80075d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1e6      	bne.n	80075a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	3308      	adds	r3, #8
 80075de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e0:	6a3b      	ldr	r3, [r7, #32]
 80075e2:	e853 3f00 	ldrex	r3, [r3]
 80075e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075ee:	f023 0301 	bic.w	r3, r3, #1
 80075f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3308      	adds	r3, #8
 80075fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007600:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007604:	e841 2300 	strex	r3, r2, [r1]
 8007608:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1e3      	bne.n	80075d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007614:	2b01      	cmp	r3, #1
 8007616:	d118      	bne.n	800764a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	e853 3f00 	ldrex	r3, [r3]
 8007624:	60bb      	str	r3, [r7, #8]
   return(result);
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	f023 0310 	bic.w	r3, r3, #16
 800762c:	647b      	str	r3, [r7, #68]	; 0x44
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	461a      	mov	r2, r3
 8007634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007636:	61bb      	str	r3, [r7, #24]
 8007638:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763a:	6979      	ldr	r1, [r7, #20]
 800763c:	69ba      	ldr	r2, [r7, #24]
 800763e:	e841 2300 	strex	r3, r2, [r1]
 8007642:	613b      	str	r3, [r7, #16]
   return(result);
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1e6      	bne.n	8007618 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2220      	movs	r2, #32
 800764e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800765e:	bf00      	nop
 8007660:	3754      	adds	r7, #84	; 0x54
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b090      	sub	sp, #64	; 0x40
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007676:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f003 0320 	and.w	r3, r3, #32
 8007682:	2b00      	cmp	r3, #0
 8007684:	d137      	bne.n	80076f6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8007686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007688:	2200      	movs	r2, #0
 800768a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800768e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	3308      	adds	r3, #8
 8007694:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	623b      	str	r3, [r7, #32]
   return(result);
 800769e:	6a3b      	ldr	r3, [r7, #32]
 80076a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80076a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3308      	adds	r3, #8
 80076ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076ae:	633a      	str	r2, [r7, #48]	; 0x30
 80076b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076b6:	e841 2300 	strex	r3, r2, [r1]
 80076ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1e5      	bne.n	800768e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	e853 3f00 	ldrex	r3, [r3]
 80076ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076d6:	637b      	str	r3, [r7, #52]	; 0x34
 80076d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	461a      	mov	r2, r3
 80076de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076e0:	61fb      	str	r3, [r7, #28]
 80076e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e4:	69b9      	ldr	r1, [r7, #24]
 80076e6:	69fa      	ldr	r2, [r7, #28]
 80076e8:	e841 2300 	strex	r3, r2, [r1]
 80076ec:	617b      	str	r3, [r7, #20]
   return(result);
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d1e6      	bne.n	80076c2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80076f4:	e002      	b.n	80076fc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80076f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80076f8:	f7fa ff4a 	bl	8002590 <HAL_UART_TxCpltCallback>
}
 80076fc:	bf00      	nop
 80076fe:	3740      	adds	r7, #64	; 0x40
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007710:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f7ff f9de 	bl	8006ad4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007718:	bf00      	nop
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b086      	sub	sp, #24
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007734:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800773c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007748:	2b80      	cmp	r3, #128	; 0x80
 800774a:	d109      	bne.n	8007760 <UART_DMAError+0x40>
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	2b21      	cmp	r3, #33	; 0x21
 8007750:	d106      	bne.n	8007760 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	2200      	movs	r2, #0
 8007756:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800775a:	6978      	ldr	r0, [r7, #20]
 800775c:	f7ff fede 	bl	800751c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776a:	2b40      	cmp	r3, #64	; 0x40
 800776c:	d109      	bne.n	8007782 <UART_DMAError+0x62>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2b22      	cmp	r3, #34	; 0x22
 8007772:	d106      	bne.n	8007782 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	2200      	movs	r2, #0
 8007778:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800777c:	6978      	ldr	r0, [r7, #20]
 800777e:	f7ff ff0e 	bl	800759e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007788:	f043 0210 	orr.w	r2, r3, #16
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007792:	6978      	ldr	r0, [r7, #20]
 8007794:	f7ff f9a8 	bl	8006ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007798:	bf00      	nop
 800779a:	3718      	adds	r7, #24
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f7ff f992 	bl	8006ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077c4:	bf00      	nop
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b088      	sub	sp, #32
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	e853 3f00 	ldrex	r3, [r3]
 80077e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077e8:	61fb      	str	r3, [r7, #28]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	461a      	mov	r2, r3
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	61bb      	str	r3, [r7, #24]
 80077f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f6:	6979      	ldr	r1, [r7, #20]
 80077f8:	69ba      	ldr	r2, [r7, #24]
 80077fa:	e841 2300 	strex	r3, r2, [r1]
 80077fe:	613b      	str	r3, [r7, #16]
   return(result);
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d1e6      	bne.n	80077d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2220      	movs	r2, #32
 800780a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f7fa febb 	bl	8002590 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800781a:	bf00      	nop
 800781c:	3720      	adds	r7, #32
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
	...

08007824 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b09c      	sub	sp, #112	; 0x70
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007832:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800783c:	2b22      	cmp	r3, #34	; 0x22
 800783e:	f040 80be 	bne.w	80079be <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007848:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800784c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007850:	b2d9      	uxtb	r1, r3
 8007852:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007856:	b2da      	uxtb	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800785c:	400a      	ands	r2, r1
 800785e:	b2d2      	uxtb	r2, r2
 8007860:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007866:	1c5a      	adds	r2, r3, #1
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007872:	b29b      	uxth	r3, r3
 8007874:	3b01      	subs	r3, #1
 8007876:	b29a      	uxth	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007884:	b29b      	uxth	r3, r3
 8007886:	2b00      	cmp	r3, #0
 8007888:	f040 80a1 	bne.w	80079ce <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007894:	e853 3f00 	ldrex	r3, [r3]
 8007898:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800789a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800789c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	461a      	mov	r2, r3
 80078a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80078ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078b2:	e841 2300 	strex	r3, r2, [r1]
 80078b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1e6      	bne.n	800788c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	3308      	adds	r3, #8
 80078c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c8:	e853 3f00 	ldrex	r3, [r3]
 80078cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80078ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d0:	f023 0301 	bic.w	r3, r3, #1
 80078d4:	667b      	str	r3, [r7, #100]	; 0x64
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3308      	adds	r3, #8
 80078dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80078de:	647a      	str	r2, [r7, #68]	; 0x44
 80078e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80078e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078e6:	e841 2300 	strex	r3, r2, [r1]
 80078ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80078ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1e5      	bne.n	80078be <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2220      	movs	r2, #32
 80078f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a33      	ldr	r2, [pc, #204]	; (80079d8 <UART_RxISR_8BIT+0x1b4>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d01f      	beq.n	8007950 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800791a:	2b00      	cmp	r3, #0
 800791c:	d018      	beq.n	8007950 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007926:	e853 3f00 	ldrex	r3, [r3]
 800792a:	623b      	str	r3, [r7, #32]
   return(result);
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007932:	663b      	str	r3, [r7, #96]	; 0x60
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	461a      	mov	r2, r3
 800793a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800793c:	633b      	str	r3, [r7, #48]	; 0x30
 800793e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007940:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007944:	e841 2300 	strex	r3, r2, [r1]
 8007948:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800794a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1e6      	bne.n	800791e <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007954:	2b01      	cmp	r3, #1
 8007956:	d12e      	bne.n	80079b6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	e853 3f00 	ldrex	r3, [r3]
 800796a:	60fb      	str	r3, [r7, #12]
   return(result);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f023 0310 	bic.w	r3, r3, #16
 8007972:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	461a      	mov	r2, r3
 800797a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800797c:	61fb      	str	r3, [r7, #28]
 800797e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007980:	69b9      	ldr	r1, [r7, #24]
 8007982:	69fa      	ldr	r2, [r7, #28]
 8007984:	e841 2300 	strex	r3, r2, [r1]
 8007988:	617b      	str	r3, [r7, #20]
   return(result);
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1e6      	bne.n	800795e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	f003 0310 	and.w	r3, r3, #16
 800799a:	2b10      	cmp	r3, #16
 800799c:	d103      	bne.n	80079a6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2210      	movs	r2, #16
 80079a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079ac:	4619      	mov	r1, r3
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7ff f8a4 	bl	8006afc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079b4:	e00b      	b.n	80079ce <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7fa fdbc 	bl	8002534 <HAL_UART_RxCpltCallback>
}
 80079bc:	e007      	b.n	80079ce <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	699a      	ldr	r2, [r3, #24]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f042 0208 	orr.w	r2, r2, #8
 80079cc:	619a      	str	r2, [r3, #24]
}
 80079ce:	bf00      	nop
 80079d0:	3770      	adds	r7, #112	; 0x70
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	40008000 	.word	0x40008000

080079dc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b09c      	sub	sp, #112	; 0x70
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80079ea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079f4:	2b22      	cmp	r3, #34	; 0x22
 80079f6:	f040 80be 	bne.w	8007b76 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a00:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a08:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a0a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007a0e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007a12:	4013      	ands	r3, r2
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a18:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a1e:	1c9a      	adds	r2, r3, #2
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f040 80a1 	bne.w	8007b86 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a4c:	e853 3f00 	ldrex	r3, [r3]
 8007a50:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a58:	667b      	str	r3, [r7, #100]	; 0x64
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a62:	657b      	str	r3, [r7, #84]	; 0x54
 8007a64:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a66:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a6a:	e841 2300 	strex	r3, r2, [r1]
 8007a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1e6      	bne.n	8007a44 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	3308      	adds	r3, #8
 8007a7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a80:	e853 3f00 	ldrex	r3, [r3]
 8007a84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a88:	f023 0301 	bic.w	r3, r3, #1
 8007a8c:	663b      	str	r3, [r7, #96]	; 0x60
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3308      	adds	r3, #8
 8007a94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a96:	643a      	str	r2, [r7, #64]	; 0x40
 8007a98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a9e:	e841 2300 	strex	r3, r2, [r1]
 8007aa2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1e5      	bne.n	8007a76 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2220      	movs	r2, #32
 8007aae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a33      	ldr	r2, [pc, #204]	; (8007b90 <UART_RxISR_16BIT+0x1b4>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d01f      	beq.n	8007b08 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d018      	beq.n	8007b08 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007adc:	6a3b      	ldr	r3, [r7, #32]
 8007ade:	e853 3f00 	ldrex	r3, [r3]
 8007ae2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007aea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	461a      	mov	r2, r3
 8007af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007af6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007afc:	e841 2300 	strex	r3, r2, [r1]
 8007b00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e6      	bne.n	8007ad6 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d12e      	bne.n	8007b6e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	e853 3f00 	ldrex	r3, [r3]
 8007b22:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	f023 0310 	bic.w	r3, r3, #16
 8007b2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	461a      	mov	r2, r3
 8007b32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b34:	61bb      	str	r3, [r7, #24]
 8007b36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b38:	6979      	ldr	r1, [r7, #20]
 8007b3a:	69ba      	ldr	r2, [r7, #24]
 8007b3c:	e841 2300 	strex	r3, r2, [r1]
 8007b40:	613b      	str	r3, [r7, #16]
   return(result);
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1e6      	bne.n	8007b16 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	f003 0310 	and.w	r3, r3, #16
 8007b52:	2b10      	cmp	r3, #16
 8007b54:	d103      	bne.n	8007b5e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2210      	movs	r2, #16
 8007b5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b64:	4619      	mov	r1, r3
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7fe ffc8 	bl	8006afc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b6c:	e00b      	b.n	8007b86 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f7fa fce0 	bl	8002534 <HAL_UART_RxCpltCallback>
}
 8007b74:	e007      	b.n	8007b86 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	699a      	ldr	r2, [r3, #24]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f042 0208 	orr.w	r2, r2, #8
 8007b84:	619a      	str	r2, [r3, #24]
}
 8007b86:	bf00      	nop
 8007b88:	3770      	adds	r7, #112	; 0x70
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	40008000 	.word	0x40008000

08007b94 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b0ac      	sub	sp, #176	; 0xb0
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007ba2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	69db      	ldr	r3, [r3, #28]
 8007bac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bca:	2b22      	cmp	r3, #34	; 0x22
 8007bcc:	f040 8182 	bne.w	8007ed4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007bd6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007bda:	e125      	b.n	8007e28 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007be6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8007bea:	b2d9      	uxtb	r1, r3
 8007bec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007bf0:	b2da      	uxtb	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bf6:	400a      	ands	r2, r1
 8007bf8:	b2d2      	uxtb	r2, r2
 8007bfa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c00:	1c5a      	adds	r2, r3, #1
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	b29a      	uxth	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	69db      	ldr	r3, [r3, #28]
 8007c1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007c22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c26:	f003 0307 	and.w	r3, r3, #7
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d053      	beq.n	8007cd6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c32:	f003 0301 	and.w	r3, r3, #1
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d011      	beq.n	8007c5e <UART_RxISR_8BIT_FIFOEN+0xca>
 8007c3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00b      	beq.n	8007c5e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c54:	f043 0201 	orr.w	r2, r3, #1
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c62:	f003 0302 	and.w	r3, r3, #2
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d011      	beq.n	8007c8e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007c6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c6e:	f003 0301 	and.w	r3, r3, #1
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00b      	beq.n	8007c8e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c84:	f043 0204 	orr.w	r2, r3, #4
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c92:	f003 0304 	and.w	r3, r3, #4
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d011      	beq.n	8007cbe <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007c9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c9e:	f003 0301 	and.w	r3, r3, #1
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00b      	beq.n	8007cbe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2204      	movs	r2, #4
 8007cac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb4:	f043 0202 	orr.w	r2, r3, #2
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d006      	beq.n	8007cd6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f7fe ff0d 	bl	8006ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f040 80a2 	bne.w	8007e28 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cec:	e853 3f00 	ldrex	r3, [r3]
 8007cf0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8007cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	461a      	mov	r2, r3
 8007d02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d08:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007d0c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007d0e:	e841 2300 	strex	r3, r2, [r1]
 8007d12:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007d14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1e4      	bne.n	8007ce4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	3308      	adds	r3, #8
 8007d20:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d24:	e853 3f00 	ldrex	r3, [r3]
 8007d28:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007d2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d30:	f023 0301 	bic.w	r3, r3, #1
 8007d34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	3308      	adds	r3, #8
 8007d3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d42:	66ba      	str	r2, [r7, #104]	; 0x68
 8007d44:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d46:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007d48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d4a:	e841 2300 	strex	r3, r2, [r1]
 8007d4e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007d50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1e1      	bne.n	8007d1a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2220      	movs	r2, #32
 8007d5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a5f      	ldr	r2, [pc, #380]	; (8007eec <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d021      	beq.n	8007db8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d01a      	beq.n	8007db8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d8a:	e853 3f00 	ldrex	r3, [r3]
 8007d8e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007da4:	657b      	str	r3, [r7, #84]	; 0x54
 8007da6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007daa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007dac:	e841 2300 	strex	r3, r2, [r1]
 8007db0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007db2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1e4      	bne.n	8007d82 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d130      	bne.n	8007e22 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dce:	e853 3f00 	ldrex	r3, [r3]
 8007dd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd6:	f023 0310 	bic.w	r3, r3, #16
 8007dda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	461a      	mov	r2, r3
 8007de4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007de8:	643b      	str	r3, [r7, #64]	; 0x40
 8007dea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007df0:	e841 2300 	strex	r3, r2, [r1]
 8007df4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1e4      	bne.n	8007dc6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	69db      	ldr	r3, [r3, #28]
 8007e02:	f003 0310 	and.w	r3, r3, #16
 8007e06:	2b10      	cmp	r3, #16
 8007e08:	d103      	bne.n	8007e12 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2210      	movs	r2, #16
 8007e10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e18:	4619      	mov	r1, r3
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7fe fe6e 	bl	8006afc <HAL_UARTEx_RxEventCallback>
 8007e20:	e002      	b.n	8007e28 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f7fa fb86 	bl	8002534 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e28:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d006      	beq.n	8007e3e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007e30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e34:	f003 0320 	and.w	r3, r3, #32
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f47f aecf 	bne.w	8007bdc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e44:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007e48:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d049      	beq.n	8007ee4 <UART_RxISR_8BIT_FIFOEN+0x350>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007e56:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d242      	bcs.n	8007ee4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	3308      	adds	r3, #8
 8007e64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e66:	6a3b      	ldr	r3, [r7, #32]
 8007e68:	e853 3f00 	ldrex	r3, [r3]
 8007e6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	3308      	adds	r3, #8
 8007e7e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007e82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e8a:	e841 2300 	strex	r3, r2, [r1]
 8007e8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d1e3      	bne.n	8007e5e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a15      	ldr	r2, [pc, #84]	; (8007ef0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007e9a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	e853 3f00 	ldrex	r3, [r3]
 8007ea8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	f043 0320 	orr.w	r3, r3, #32
 8007eb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ebe:	61bb      	str	r3, [r7, #24]
 8007ec0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ec2:	6979      	ldr	r1, [r7, #20]
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	e841 2300 	strex	r3, r2, [r1]
 8007eca:	613b      	str	r3, [r7, #16]
   return(result);
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1e4      	bne.n	8007e9c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ed2:	e007      	b.n	8007ee4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	699a      	ldr	r2, [r3, #24]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f042 0208 	orr.w	r2, r2, #8
 8007ee2:	619a      	str	r2, [r3, #24]
}
 8007ee4:	bf00      	nop
 8007ee6:	37b0      	adds	r7, #176	; 0xb0
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	40008000 	.word	0x40008000
 8007ef0:	08007825 	.word	0x08007825

08007ef4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b0ae      	sub	sp, #184	; 0xb8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f02:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	69db      	ldr	r3, [r3, #28]
 8007f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f2a:	2b22      	cmp	r3, #34	; 0x22
 8007f2c:	f040 8186 	bne.w	800823c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007f36:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f3a:	e129      	b.n	8008190 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f42:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007f4e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8007f52:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007f56:	4013      	ands	r3, r2
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f5e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f64:	1c9a      	adds	r2, r3, #2
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	3b01      	subs	r3, #1
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	69db      	ldr	r3, [r3, #28]
 8007f82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007f86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f8a:	f003 0307 	and.w	r3, r3, #7
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d053      	beq.n	800803a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d011      	beq.n	8007fc2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00b      	beq.n	8007fc2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fb8:	f043 0201 	orr.w	r2, r3, #1
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007fc6:	f003 0302 	and.w	r3, r3, #2
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d011      	beq.n	8007ff2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007fce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007fd2:	f003 0301 	and.w	r3, r3, #1
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00b      	beq.n	8007ff2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2202      	movs	r2, #2
 8007fe0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fe8:	f043 0204 	orr.w	r2, r3, #4
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ff2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ff6:	f003 0304 	and.w	r3, r3, #4
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d011      	beq.n	8008022 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007ffe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008002:	f003 0301 	and.w	r3, r3, #1
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00b      	beq.n	8008022 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2204      	movs	r2, #4
 8008010:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008018:	f043 0202 	orr.w	r2, r3, #2
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008028:	2b00      	cmp	r3, #0
 800802a:	d006      	beq.n	800803a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f7fe fd5b 	bl	8006ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008040:	b29b      	uxth	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	f040 80a4 	bne.w	8008190 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800804e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008050:	e853 3f00 	ldrex	r3, [r3]
 8008054:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008056:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008058:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800805c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	461a      	mov	r2, r3
 8008066:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800806a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800806e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008070:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008072:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008076:	e841 2300 	strex	r3, r2, [r1]
 800807a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800807c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1e2      	bne.n	8008048 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	3308      	adds	r3, #8
 8008088:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800808c:	e853 3f00 	ldrex	r3, [r3]
 8008090:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008098:	f023 0301 	bic.w	r3, r3, #1
 800809c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	3308      	adds	r3, #8
 80080a6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80080aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80080ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80080b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80080b2:	e841 2300 	strex	r3, r2, [r1]
 80080b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80080b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1e1      	bne.n	8008082 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2220      	movs	r2, #32
 80080c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a5f      	ldr	r2, [pc, #380]	; (8008254 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d021      	beq.n	8008120 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d01a      	beq.n	8008120 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080f2:	e853 3f00 	ldrex	r3, [r3]
 80080f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80080f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80080fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	461a      	mov	r2, r3
 8008108:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800810c:	65bb      	str	r3, [r7, #88]	; 0x58
 800810e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008110:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008112:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008114:	e841 2300 	strex	r3, r2, [r1]
 8008118:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800811a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1e4      	bne.n	80080ea <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008124:	2b01      	cmp	r3, #1
 8008126:	d130      	bne.n	800818a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008136:	e853 3f00 	ldrex	r3, [r3]
 800813a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800813c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800813e:	f023 0310 	bic.w	r3, r3, #16
 8008142:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	461a      	mov	r2, r3
 800814c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008150:	647b      	str	r3, [r7, #68]	; 0x44
 8008152:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008154:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008156:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008158:	e841 2300 	strex	r3, r2, [r1]
 800815c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800815e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1e4      	bne.n	800812e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	69db      	ldr	r3, [r3, #28]
 800816a:	f003 0310 	and.w	r3, r3, #16
 800816e:	2b10      	cmp	r3, #16
 8008170:	d103      	bne.n	800817a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2210      	movs	r2, #16
 8008178:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008180:	4619      	mov	r1, r3
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f7fe fcba 	bl	8006afc <HAL_UARTEx_RxEventCallback>
 8008188:	e002      	b.n	8008190 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7fa f9d2 	bl	8002534 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008190:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8008194:	2b00      	cmp	r3, #0
 8008196:	d006      	beq.n	80081a6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8008198:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800819c:	f003 0320 	and.w	r3, r3, #32
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f47f aecb 	bne.w	8007f3c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081ac:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80081b0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d049      	beq.n	800824c <UART_RxISR_16BIT_FIFOEN+0x358>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80081be:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d242      	bcs.n	800824c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	3308      	adds	r3, #8
 80081cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d0:	e853 3f00 	ldrex	r3, [r3]
 80081d4:	623b      	str	r3, [r7, #32]
   return(result);
 80081d6:	6a3b      	ldr	r3, [r7, #32]
 80081d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	3308      	adds	r3, #8
 80081e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80081ea:	633a      	str	r2, [r7, #48]	; 0x30
 80081ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081f2:	e841 2300 	strex	r3, r2, [r1]
 80081f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1e3      	bne.n	80081c6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a15      	ldr	r2, [pc, #84]	; (8008258 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8008202:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	e853 3f00 	ldrex	r3, [r3]
 8008210:	60fb      	str	r3, [r7, #12]
   return(result);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f043 0320 	orr.w	r3, r3, #32
 8008218:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	461a      	mov	r2, r3
 8008222:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008226:	61fb      	str	r3, [r7, #28]
 8008228:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822a:	69b9      	ldr	r1, [r7, #24]
 800822c:	69fa      	ldr	r2, [r7, #28]
 800822e:	e841 2300 	strex	r3, r2, [r1]
 8008232:	617b      	str	r3, [r7, #20]
   return(result);
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1e4      	bne.n	8008204 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800823a:	e007      	b.n	800824c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	699a      	ldr	r2, [r3, #24]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 0208 	orr.w	r2, r2, #8
 800824a:	619a      	str	r2, [r3, #24]
}
 800824c:	bf00      	nop
 800824e:	37b8      	adds	r7, #184	; 0xb8
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	40008000 	.word	0x40008000
 8008258:	080079dd 	.word	0x080079dd

0800825c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008278:	bf00      	nop
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr

08008284 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800828c:	bf00      	nop
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008298:	b480      	push	{r7}
 800829a:	b085      	sub	sp, #20
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d101      	bne.n	80082ae <HAL_UARTEx_DisableFifoMode+0x16>
 80082aa:	2302      	movs	r3, #2
 80082ac:	e027      	b.n	80082fe <HAL_UARTEx_DisableFifoMode+0x66>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2224      	movs	r2, #36	; 0x24
 80082ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f022 0201 	bic.w	r2, r2, #1
 80082d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80082dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2220      	movs	r2, #32
 80082f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3714      	adds	r7, #20
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b084      	sub	sp, #16
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800831a:	2b01      	cmp	r3, #1
 800831c:	d101      	bne.n	8008322 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800831e:	2302      	movs	r3, #2
 8008320:	e02d      	b.n	800837e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2201      	movs	r2, #1
 8008326:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2224      	movs	r2, #36	; 0x24
 800832e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	f022 0201 	bic.w	r2, r2, #1
 8008348:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	683a      	ldr	r2, [r7, #0]
 800835a:	430a      	orrs	r2, r1
 800835c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 f850 	bl	8008404 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2220      	movs	r2, #32
 8008370:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b084      	sub	sp, #16
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
 800838e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008396:	2b01      	cmp	r3, #1
 8008398:	d101      	bne.n	800839e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800839a:	2302      	movs	r3, #2
 800839c:	e02d      	b.n	80083fa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2201      	movs	r2, #1
 80083a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2224      	movs	r2, #36	; 0x24
 80083aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f022 0201 	bic.w	r2, r2, #1
 80083c4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	683a      	ldr	r2, [r7, #0]
 80083d6:	430a      	orrs	r2, r1
 80083d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f812 	bl	8008404 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2220      	movs	r2, #32
 80083ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
	...

08008404 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008410:	2b00      	cmp	r3, #0
 8008412:	d108      	bne.n	8008426 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008424:	e031      	b.n	800848a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008426:	2308      	movs	r3, #8
 8008428:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800842a:	2308      	movs	r3, #8
 800842c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	0e5b      	lsrs	r3, r3, #25
 8008436:	b2db      	uxtb	r3, r3
 8008438:	f003 0307 	and.w	r3, r3, #7
 800843c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	0f5b      	lsrs	r3, r3, #29
 8008446:	b2db      	uxtb	r3, r3
 8008448:	f003 0307 	and.w	r3, r3, #7
 800844c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800844e:	7bbb      	ldrb	r3, [r7, #14]
 8008450:	7b3a      	ldrb	r2, [r7, #12]
 8008452:	4911      	ldr	r1, [pc, #68]	; (8008498 <UARTEx_SetNbDataToProcess+0x94>)
 8008454:	5c8a      	ldrb	r2, [r1, r2]
 8008456:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800845a:	7b3a      	ldrb	r2, [r7, #12]
 800845c:	490f      	ldr	r1, [pc, #60]	; (800849c <UARTEx_SetNbDataToProcess+0x98>)
 800845e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008460:	fb93 f3f2 	sdiv	r3, r3, r2
 8008464:	b29a      	uxth	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800846c:	7bfb      	ldrb	r3, [r7, #15]
 800846e:	7b7a      	ldrb	r2, [r7, #13]
 8008470:	4909      	ldr	r1, [pc, #36]	; (8008498 <UARTEx_SetNbDataToProcess+0x94>)
 8008472:	5c8a      	ldrb	r2, [r1, r2]
 8008474:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008478:	7b7a      	ldrb	r2, [r7, #13]
 800847a:	4908      	ldr	r1, [pc, #32]	; (800849c <UARTEx_SetNbDataToProcess+0x98>)
 800847c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800847e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008482:	b29a      	uxth	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800848a:	bf00      	nop
 800848c:	3714      	adds	r7, #20
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr
 8008496:	bf00      	nop
 8008498:	0800f5f0 	.word	0x0800f5f0
 800849c:	0800f5f8 	.word	0x0800f5f8

080084a0 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b088      	sub	sp, #32
 80084a4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80084a6:	2300      	movs	r3, #0
 80084a8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80084aa:	f107 0308 	add.w	r3, r7, #8
 80084ae:	2218      	movs	r2, #24
 80084b0:	2100      	movs	r1, #0
 80084b2:	4618      	mov	r0, r3
 80084b4:	f001 fa49 	bl	800994a <Osal_MemSet>
  rq.ogf = 0x3f;
 80084b8:	233f      	movs	r3, #63	; 0x3f
 80084ba:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80084bc:	2381      	movs	r3, #129	; 0x81
 80084be:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80084c0:	1dfb      	adds	r3, r7, #7
 80084c2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80084c4:	2301      	movs	r3, #1
 80084c6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80084c8:	f107 0308 	add.w	r3, r7, #8
 80084cc:	2100      	movs	r1, #0
 80084ce:	4618      	mov	r0, r3
 80084d0:	f001 fdf2 	bl	800a0b8 <hci_send_req>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	da01      	bge.n	80084de <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80084da:	23ff      	movs	r3, #255	; 0xff
 80084dc:	e000      	b.n	80084e0 <aci_gap_set_non_discoverable+0x40>
  return status;
 80084de:	79fb      	ldrb	r3, [r7, #7]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3720      	adds	r7, #32
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 80084e8:	b5b0      	push	{r4, r5, r7, lr}
 80084ea:	b0ce      	sub	sp, #312	; 0x138
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	4605      	mov	r5, r0
 80084f0:	460c      	mov	r4, r1
 80084f2:	4610      	mov	r0, r2
 80084f4:	4619      	mov	r1, r3
 80084f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80084fa:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80084fe:	462a      	mov	r2, r5
 8008500:	701a      	strb	r2, [r3, #0]
 8008502:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008506:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800850a:	4622      	mov	r2, r4
 800850c:	801a      	strh	r2, [r3, #0]
 800850e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008512:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8008516:	4602      	mov	r2, r0
 8008518:	801a      	strh	r2, [r3, #0]
 800851a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800851e:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008522:	460a      	mov	r2, r1
 8008524:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8008526:	f107 0310 	add.w	r3, r7, #16
 800852a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800852e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008532:	3308      	adds	r3, #8
 8008534:	f107 0210 	add.w	r2, r7, #16
 8008538:	4413      	add	r3, r2
 800853a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800853e:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008542:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008546:	4413      	add	r3, r2
 8008548:	3309      	adds	r3, #9
 800854a:	f107 0210 	add.w	r2, r7, #16
 800854e:	4413      	add	r3, r2
 8008550:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008554:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008558:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800855c:	2200      	movs	r2, #0
 800855e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008560:	2300      	movs	r3, #0
 8008562:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8008566:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800856a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800856e:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008572:	7812      	ldrb	r2, [r2, #0]
 8008574:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008576:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800857a:	3301      	adds	r3, #1
 800857c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8008580:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008584:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008588:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800858c:	8812      	ldrh	r2, [r2, #0]
 800858e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8008592:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008596:	3302      	adds	r3, #2
 8008598:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800859c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80085a0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80085a4:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80085a8:	8812      	ldrh	r2, [r2, #0]
 80085aa:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80085ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085b2:	3302      	adds	r3, #2
 80085b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80085b8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80085bc:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80085c0:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80085c4:	7812      	ldrb	r2, [r2, #0]
 80085c6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80085c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085cc:	3301      	adds	r3, #1
 80085ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80085d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80085d6:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80085da:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80085dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085e0:	3301      	adds	r3, #1
 80085e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80085e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80085ea:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80085ee:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80085f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085f4:	3301      	adds	r3, #1
 80085f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80085fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80085fe:	3308      	adds	r3, #8
 8008600:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008604:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8008608:	4618      	mov	r0, r3
 800860a:	f001 f98e 	bl	800992a <Osal_MemCpy>
    index_input += Local_Name_Length;
 800860e:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008612:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008616:	4413      	add	r3, r2
 8008618:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800861c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008620:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008624:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008626:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800862a:	3301      	adds	r3, #1
 800862c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8008630:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008634:	3301      	adds	r3, #1
 8008636:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800863a:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800863e:	4618      	mov	r0, r3
 8008640:	f001 f973 	bl	800992a <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8008644:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008648:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800864c:	4413      	add	r3, r2
 800864e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8008652:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008656:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800865a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800865c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008660:	3302      	adds	r3, #2
 8008662:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8008666:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800866a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800866e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008670:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008674:	3302      	adds	r3, #2
 8008676:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800867a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800867e:	2218      	movs	r2, #24
 8008680:	2100      	movs	r1, #0
 8008682:	4618      	mov	r0, r3
 8008684:	f001 f961 	bl	800994a <Osal_MemSet>
  rq.ogf = 0x3f;
 8008688:	233f      	movs	r3, #63	; 0x3f
 800868a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800868e:	2383      	movs	r3, #131	; 0x83
 8008690:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008694:	f107 0310 	add.w	r3, r7, #16
 8008698:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800869c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80086a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80086a4:	f107 030f 	add.w	r3, r7, #15
 80086a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80086ac:	2301      	movs	r3, #1
 80086ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80086b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80086b6:	2100      	movs	r1, #0
 80086b8:	4618      	mov	r0, r3
 80086ba:	f001 fcfd 	bl	800a0b8 <hci_send_req>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	da01      	bge.n	80086c8 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80086c4:	23ff      	movs	r3, #255	; 0xff
 80086c6:	e004      	b.n	80086d2 <aci_gap_set_discoverable+0x1ea>
  return status;
 80086c8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80086cc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80086d0:	781b      	ldrb	r3, [r3, #0]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80086d8:	46bd      	mov	sp, r7
 80086da:	bdb0      	pop	{r4, r5, r7, pc}

080086dc <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b0cc      	sub	sp, #304	; 0x130
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	4602      	mov	r2, r0
 80086e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086e8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80086ec:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80086ee:	f107 0310 	add.w	r3, r7, #16
 80086f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80086f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80086fa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80086fe:	2200      	movs	r2, #0
 8008700:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008702:	2300      	movs	r3, #0
 8008704:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8008708:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800870c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008710:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008714:	7812      	ldrb	r2, [r2, #0]
 8008716:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008718:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800871c:	3301      	adds	r3, #1
 800871e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008722:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008726:	2218      	movs	r2, #24
 8008728:	2100      	movs	r1, #0
 800872a:	4618      	mov	r0, r3
 800872c:	f001 f90d 	bl	800994a <Osal_MemSet>
  rq.ogf = 0x3f;
 8008730:	233f      	movs	r3, #63	; 0x3f
 8008732:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8008736:	2385      	movs	r3, #133	; 0x85
 8008738:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800873c:	f107 0310 	add.w	r3, r7, #16
 8008740:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008744:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008748:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800874c:	f107 030f 	add.w	r3, r7, #15
 8008750:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008754:	2301      	movs	r3, #1
 8008756:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800875a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800875e:	2100      	movs	r1, #0
 8008760:	4618      	mov	r0, r3
 8008762:	f001 fca9 	bl	800a0b8 <hci_send_req>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	da01      	bge.n	8008770 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800876c:	23ff      	movs	r3, #255	; 0xff
 800876e:	e004      	b.n	800877a <aci_gap_set_io_capability+0x9e>
  return status;
 8008770:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008774:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008778:	781b      	ldrb	r3, [r3, #0]
}
 800877a:	4618      	mov	r0, r3
 800877c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8008784:	b5b0      	push	{r4, r5, r7, lr}
 8008786:	b0cc      	sub	sp, #304	; 0x130
 8008788:	af00      	add	r7, sp, #0
 800878a:	4605      	mov	r5, r0
 800878c:	460c      	mov	r4, r1
 800878e:	4610      	mov	r0, r2
 8008790:	4619      	mov	r1, r3
 8008792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008796:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800879a:	462a      	mov	r2, r5
 800879c:	701a      	strb	r2, [r3, #0]
 800879e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087a2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80087a6:	4622      	mov	r2, r4
 80087a8:	701a      	strb	r2, [r3, #0]
 80087aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087ae:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80087b2:	4602      	mov	r2, r0
 80087b4:	701a      	strb	r2, [r3, #0]
 80087b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80087be:	460a      	mov	r2, r1
 80087c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80087c2:	f107 0310 	add.w	r3, r7, #16
 80087c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80087ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80087ce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80087d2:	2200      	movs	r2, #0
 80087d4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80087d6:	2300      	movs	r3, #0
 80087d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80087dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80087e4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80087e8:	7812      	ldrb	r2, [r2, #0]
 80087ea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80087ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80087f0:	3301      	adds	r3, #1
 80087f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 80087f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80087fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80087fe:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008802:	7812      	ldrb	r2, [r2, #0]
 8008804:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008806:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800880a:	3301      	adds	r3, #1
 800880c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8008810:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008814:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008818:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800881c:	7812      	ldrb	r2, [r2, #0]
 800881e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008820:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008824:	3301      	adds	r3, #1
 8008826:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800882a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800882e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008832:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008836:	7812      	ldrb	r2, [r2, #0]
 8008838:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800883a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800883e:	3301      	adds	r3, #1
 8008840:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8008844:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008848:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800884c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800884e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008852:	3301      	adds	r3, #1
 8008854:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8008858:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800885c:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8008860:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008862:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008866:	3301      	adds	r3, #1
 8008868:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800886c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008870:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008874:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008876:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800887a:	3301      	adds	r3, #1
 800887c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8008880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008884:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008888:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800888c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008890:	3304      	adds	r3, #4
 8008892:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8008896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800889a:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800889e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80088a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088a4:	3301      	adds	r3, #1
 80088a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80088aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80088ae:	2218      	movs	r2, #24
 80088b0:	2100      	movs	r1, #0
 80088b2:	4618      	mov	r0, r3
 80088b4:	f001 f849 	bl	800994a <Osal_MemSet>
  rq.ogf = 0x3f;
 80088b8:	233f      	movs	r3, #63	; 0x3f
 80088ba:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 80088be:	2386      	movs	r3, #134	; 0x86
 80088c0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80088c4:	f107 0310 	add.w	r3, r7, #16
 80088c8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80088cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80088d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80088d4:	f107 030f 	add.w	r3, r7, #15
 80088d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80088dc:	2301      	movs	r3, #1
 80088de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80088e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80088e6:	2100      	movs	r1, #0
 80088e8:	4618      	mov	r0, r3
 80088ea:	f001 fbe5 	bl	800a0b8 <hci_send_req>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	da01      	bge.n	80088f8 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80088f4:	23ff      	movs	r3, #255	; 0xff
 80088f6:	e004      	b.n	8008902 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80088f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80088fc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008900:	781b      	ldrb	r3, [r3, #0]
}
 8008902:	4618      	mov	r0, r3
 8008904:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008908:	46bd      	mov	sp, r7
 800890a:	bdb0      	pop	{r4, r5, r7, pc}

0800890c <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b0cc      	sub	sp, #304	; 0x130
 8008910:	af00      	add	r7, sp, #0
 8008912:	4602      	mov	r2, r0
 8008914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008918:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800891c:	6019      	str	r1, [r3, #0]
 800891e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008922:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008926:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8008928:	f107 0310 	add.w	r3, r7, #16
 800892c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008934:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008938:	2200      	movs	r2, #0
 800893a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800893c:	2300      	movs	r3, #0
 800893e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008946:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800894a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800894e:	8812      	ldrh	r2, [r2, #0]
 8008950:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008952:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008956:	3302      	adds	r3, #2
 8008958:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800895c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008960:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008964:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008968:	6812      	ldr	r2, [r2, #0]
 800896a:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800896e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008972:	3304      	adds	r3, #4
 8008974:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008978:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800897c:	2218      	movs	r2, #24
 800897e:	2100      	movs	r1, #0
 8008980:	4618      	mov	r0, r3
 8008982:	f000 ffe2 	bl	800994a <Osal_MemSet>
  rq.ogf = 0x3f;
 8008986:	233f      	movs	r3, #63	; 0x3f
 8008988:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800898c:	2388      	movs	r3, #136	; 0x88
 800898e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008992:	f107 0310 	add.w	r3, r7, #16
 8008996:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800899a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800899e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80089a2:	f107 030f 	add.w	r3, r7, #15
 80089a6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80089aa:	2301      	movs	r3, #1
 80089ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80089b0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80089b4:	2100      	movs	r1, #0
 80089b6:	4618      	mov	r0, r3
 80089b8:	f001 fb7e 	bl	800a0b8 <hci_send_req>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	da01      	bge.n	80089c6 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80089c2:	23ff      	movs	r3, #255	; 0xff
 80089c4:	e004      	b.n	80089d0 <aci_gap_pass_key_resp+0xc4>
  return status;
 80089c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089ca:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80089ce:	781b      	ldrb	r3, [r3, #0]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80089da:	b590      	push	{r4, r7, lr}
 80089dc:	b0cd      	sub	sp, #308	; 0x134
 80089de:	af00      	add	r7, sp, #0
 80089e0:	4604      	mov	r4, r0
 80089e2:	4608      	mov	r0, r1
 80089e4:	4611      	mov	r1, r2
 80089e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80089ea:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80089ee:	6013      	str	r3, [r2, #0]
 80089f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80089f4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80089f8:	4622      	mov	r2, r4
 80089fa:	701a      	strb	r2, [r3, #0]
 80089fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a00:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008a04:	4602      	mov	r2, r0
 8008a06:	701a      	strb	r2, [r3, #0]
 8008a08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008a0c:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008a10:	460a      	mov	r2, r1
 8008a12:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008a14:	f107 0310 	add.w	r3, r7, #16
 8008a18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008a1c:	f107 0308 	add.w	r3, r7, #8
 8008a20:	2207      	movs	r2, #7
 8008a22:	2100      	movs	r1, #0
 8008a24:	4618      	mov	r0, r3
 8008a26:	f000 ff90 	bl	800994a <Osal_MemSet>
  int index_input = 0;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8008a30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a34:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a38:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008a3c:	7812      	ldrb	r2, [r2, #0]
 8008a3e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008a40:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a44:	3301      	adds	r3, #1
 8008a46:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8008a4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a4e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a52:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008a56:	7812      	ldrb	r2, [r2, #0]
 8008a58:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008a5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a5e:	3301      	adds	r3, #1
 8008a60:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8008a64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a68:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008a6c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008a70:	7812      	ldrb	r2, [r2, #0]
 8008a72:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008a74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a78:	3301      	adds	r3, #1
 8008a7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008a7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008a82:	2218      	movs	r2, #24
 8008a84:	2100      	movs	r1, #0
 8008a86:	4618      	mov	r0, r3
 8008a88:	f000 ff5f 	bl	800994a <Osal_MemSet>
  rq.ogf = 0x3f;
 8008a8c:	233f      	movs	r3, #63	; 0x3f
 8008a8e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8008a92:	238a      	movs	r3, #138	; 0x8a
 8008a94:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008a98:	f107 0310 	add.w	r3, r7, #16
 8008a9c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008aa0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008aa4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008aa8:	f107 0308 	add.w	r3, r7, #8
 8008aac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008ab0:	2307      	movs	r3, #7
 8008ab2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ab6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008aba:	2100      	movs	r1, #0
 8008abc:	4618      	mov	r0, r3
 8008abe:	f001 fafb 	bl	800a0b8 <hci_send_req>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	da01      	bge.n	8008acc <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8008ac8:	23ff      	movs	r3, #255	; 0xff
 8008aca:	e02e      	b.n	8008b2a <aci_gap_init+0x150>
  if ( resp.Status )
 8008acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ad0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d005      	beq.n	8008ae6 <aci_gap_init+0x10c>
    return resp.Status;
 8008ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ade:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	e021      	b.n	8008b2a <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8008ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008aea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008aee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008af8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8008b00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b04:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008b08:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008b12:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8008b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b18:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008b1c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008b20:	b29a      	uxth	r2, r3
 8008b22:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008b26:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd90      	pop	{r4, r7, pc}

08008b34 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b0cc      	sub	sp, #304	; 0x130
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b44:	6019      	str	r1, [r3, #0]
 8008b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b4a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008b4e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8008b50:	f107 0310 	add.w	r3, r7, #16
 8008b54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008b58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b5c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008b60:	2200      	movs	r2, #0
 8008b62:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008b64:	2300      	movs	r3, #0
 8008b66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8008b6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b72:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008b76:	7812      	ldrb	r2, [r2, #0]
 8008b78:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008b7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b7e:	3301      	adds	r3, #1
 8008b80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8008b84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b88:	1c58      	adds	r0, r3, #1
 8008b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b8e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008b92:	781a      	ldrb	r2, [r3, #0]
 8008b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008b9c:	6819      	ldr	r1, [r3, #0]
 8008b9e:	f000 fec4 	bl	800992a <Osal_MemCpy>
  index_input += AdvDataLen;
 8008ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ba6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008bb0:	4413      	add	r3, r2
 8008bb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008bb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008bba:	2218      	movs	r2, #24
 8008bbc:	2100      	movs	r1, #0
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f000 fec3 	bl	800994a <Osal_MemSet>
  rq.ogf = 0x3f;
 8008bc4:	233f      	movs	r3, #63	; 0x3f
 8008bc6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8008bca:	238e      	movs	r3, #142	; 0x8e
 8008bcc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008bd0:	f107 0310 	add.w	r3, r7, #16
 8008bd4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008bd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008bdc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008be0:	f107 030f 	add.w	r3, r7, #15
 8008be4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008be8:	2301      	movs	r3, #1
 8008bea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008bee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008bf2:	2100      	movs	r1, #0
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f001 fa5f 	bl	800a0b8 <hci_send_req>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	da01      	bge.n	8008c04 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8008c00:	23ff      	movs	r3, #255	; 0xff
 8008c02:	e004      	b.n	8008c0e <aci_gap_update_adv_data+0xda>
  return status;
 8008c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c08:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008c0c:	781b      	ldrb	r3, [r3, #0]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b088      	sub	sp, #32
 8008c1c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c22:	f107 0308 	add.w	r3, r7, #8
 8008c26:	2218      	movs	r2, #24
 8008c28:	2100      	movs	r1, #0
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 fe8d 	bl	800994a <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c30:	233f      	movs	r3, #63	; 0x3f
 8008c32:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8008c34:	2392      	movs	r3, #146	; 0x92
 8008c36:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008c38:	1dfb      	adds	r3, r7, #7
 8008c3a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008c40:	f107 0308 	add.w	r3, r7, #8
 8008c44:	2100      	movs	r1, #0
 8008c46:	4618      	mov	r0, r3
 8008c48:	f001 fa36 	bl	800a0b8 <hci_send_req>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	da01      	bge.n	8008c56 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008c52:	23ff      	movs	r3, #255	; 0xff
 8008c54:	e000      	b.n	8008c58 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8008c56:	79fb      	ldrb	r3, [r7, #7]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3720      	adds	r7, #32
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b0cc      	sub	sp, #304	; 0x130
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	4602      	mov	r2, r0
 8008c68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c6c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008c70:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 8008c72:	f107 0310 	add.w	r3, r7, #16
 8008c76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008c7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c7e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008c82:	2200      	movs	r2, #0
 8008c84:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008c86:	2300      	movs	r3, #0
 8008c88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008c8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c90:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c94:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008c98:	8812      	ldrh	r2, [r2, #0]
 8008c9a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008c9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ca0:	3302      	adds	r3, #2
 8008ca2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008ca6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008caa:	2218      	movs	r2, #24
 8008cac:	2100      	movs	r1, #0
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f000 fe4b 	bl	800994a <Osal_MemSet>
  rq.ogf = 0x3f;
 8008cb4:	233f      	movs	r3, #63	; 0x3f
 8008cb6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 8008cba:	2395      	movs	r3, #149	; 0x95
 8008cbc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008cc0:	f107 0310 	add.w	r3, r7, #16
 8008cc4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008cc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ccc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008cd0:	f107 030f 	add.w	r3, r7, #15
 8008cd4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008cde:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f001 f9e7 	bl	800a0b8 <hci_send_req>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	da01      	bge.n	8008cf4 <aci_gap_allow_rebond+0x94>
    return BLE_STATUS_TIMEOUT;
 8008cf0:	23ff      	movs	r3, #255	; 0xff
 8008cf2:	e004      	b.n	8008cfe <aci_gap_allow_rebond+0x9e>
  return status;
 8008cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008cf8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008cfc:	781b      	ldrb	r3, [r3, #0]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b0cc      	sub	sp, #304	; 0x130
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	4602      	mov	r2, r0
 8008d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d14:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008d18:	801a      	strh	r2, [r3, #0]
 8008d1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d1e:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008d22:	460a      	mov	r2, r1
 8008d24:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8008d26:	f107 0310 	add.w	r3, r7, #16
 8008d2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008d2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d32:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008d36:	2200      	movs	r2, #0
 8008d38:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d44:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d48:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008d4c:	8812      	ldrh	r2, [r2, #0]
 8008d4e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008d50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d54:	3302      	adds	r3, #2
 8008d56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8008d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d5e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d62:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008d66:	7812      	ldrb	r2, [r2, #0]
 8008d68:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008d6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d6e:	3301      	adds	r3, #1
 8008d70:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008d74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d78:	2218      	movs	r2, #24
 8008d7a:	2100      	movs	r1, #0
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f000 fde4 	bl	800994a <Osal_MemSet>
  rq.ogf = 0x3f;
 8008d82:	233f      	movs	r3, #63	; 0x3f
 8008d84:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8008d88:	23a5      	movs	r3, #165	; 0xa5
 8008d8a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008d8e:	f107 0310 	add.w	r3, r7, #16
 8008d92:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008d96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d9a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008d9e:	f107 030f 	add.w	r3, r7, #15
 8008da2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008da6:	2301      	movs	r3, #1
 8008da8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008dac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008db0:	2100      	movs	r1, #0
 8008db2:	4618      	mov	r0, r3
 8008db4:	f001 f980 	bl	800a0b8 <hci_send_req>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	da01      	bge.n	8008dc2 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8008dbe:	23ff      	movs	r3, #255	; 0xff
 8008dc0:	e004      	b.n	8008dcc <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8008dc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dc6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008dca:	781b      	ldrb	r3, [r3, #0]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b088      	sub	sp, #32
 8008dda:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008de0:	f107 0308 	add.w	r3, r7, #8
 8008de4:	2218      	movs	r2, #24
 8008de6:	2100      	movs	r1, #0
 8008de8:	4618      	mov	r0, r3
 8008dea:	f000 fdae 	bl	800994a <Osal_MemSet>
  rq.ogf = 0x3f;
 8008dee:	233f      	movs	r3, #63	; 0x3f
 8008df0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8008df2:	f240 1301 	movw	r3, #257	; 0x101
 8008df6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008df8:	1dfb      	adds	r3, r7, #7
 8008dfa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008e00:	f107 0308 	add.w	r3, r7, #8
 8008e04:	2100      	movs	r1, #0
 8008e06:	4618      	mov	r0, r3
 8008e08:	f001 f956 	bl	800a0b8 <hci_send_req>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	da01      	bge.n	8008e16 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8008e12:	23ff      	movs	r3, #255	; 0xff
 8008e14:	e000      	b.n	8008e18 <aci_gatt_init+0x42>
  return status;
 8008e16:	79fb      	ldrb	r3, [r7, #7]
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3720      	adds	r7, #32
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8008e20:	b590      	push	{r4, r7, lr}
 8008e22:	b0cf      	sub	sp, #316	; 0x13c
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	4604      	mov	r4, r0
 8008e28:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8008e2c:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8008e30:	6001      	str	r1, [r0, #0]
 8008e32:	4610      	mov	r0, r2
 8008e34:	4619      	mov	r1, r3
 8008e36:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008e3a:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008e3e:	4622      	mov	r2, r4
 8008e40:	701a      	strb	r2, [r3, #0]
 8008e42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008e46:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	701a      	strb	r2, [r3, #0]
 8008e4e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008e52:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008e56:	460a      	mov	r2, r1
 8008e58:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8008e5a:	f107 0310 	add.w	r3, r7, #16
 8008e5e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8008e62:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008e66:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d00a      	beq.n	8008e86 <aci_gatt_add_service+0x66>
 8008e70:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008e74:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d101      	bne.n	8008e82 <aci_gatt_add_service+0x62>
 8008e7e:	2311      	movs	r3, #17
 8008e80:	e002      	b.n	8008e88 <aci_gatt_add_service+0x68>
 8008e82:	2301      	movs	r3, #1
 8008e84:	e000      	b.n	8008e88 <aci_gatt_add_service+0x68>
 8008e86:	2303      	movs	r3, #3
 8008e88:	f107 0210 	add.w	r2, r7, #16
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008e92:	f107 030c 	add.w	r3, r7, #12
 8008e96:	2203      	movs	r2, #3
 8008e98:	2100      	movs	r1, #0
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f000 fd55 	bl	800994a <Osal_MemSet>
  int index_input = 0;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8008ea6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008eaa:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008eae:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008eb2:	7812      	ldrb	r2, [r2, #0]
 8008eb4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008eb6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008eba:	3301      	adds	r3, #1
 8008ebc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8008ec0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008ec4:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d002      	beq.n	8008ed4 <aci_gatt_add_service+0xb4>
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d004      	beq.n	8008edc <aci_gatt_add_service+0xbc>
 8008ed2:	e007      	b.n	8008ee4 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008eda:	e005      	b.n	8008ee8 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8008edc:	2310      	movs	r3, #16
 8008ede:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8008ee2:	e001      	b.n	8008ee8 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8008ee4:	2397      	movs	r3, #151	; 0x97
 8008ee6:	e06c      	b.n	8008fc2 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8008ee8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008eec:	1c58      	adds	r0, r3, #1
 8008eee:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8008ef2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008ef6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8008efa:	6819      	ldr	r1, [r3, #0]
 8008efc:	f000 fd15 	bl	800992a <Osal_MemCpy>
    index_input += size;
 8008f00:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8008f04:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008f08:	4413      	add	r3, r2
 8008f0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8008f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f12:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008f16:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008f1a:	7812      	ldrb	r2, [r2, #0]
 8008f1c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008f1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f22:	3301      	adds	r3, #1
 8008f24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8008f28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008f2c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008f30:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8008f34:	7812      	ldrb	r2, [r2, #0]
 8008f36:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8008f38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008f42:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f46:	2218      	movs	r2, #24
 8008f48:	2100      	movs	r1, #0
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f000 fcfd 	bl	800994a <Osal_MemSet>
  rq.ogf = 0x3f;
 8008f50:	233f      	movs	r3, #63	; 0x3f
 8008f52:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8008f56:	f44f 7381 	mov.w	r3, #258	; 0x102
 8008f5a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008f5e:	f107 0310 	add.w	r3, r7, #16
 8008f62:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008f66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f6a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008f6e:	f107 030c 	add.w	r3, r7, #12
 8008f72:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008f76:	2303      	movs	r3, #3
 8008f78:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f7c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f80:	2100      	movs	r1, #0
 8008f82:	4618      	mov	r0, r3
 8008f84:	f001 f898 	bl	800a0b8 <hci_send_req>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	da01      	bge.n	8008f92 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8008f8e:	23ff      	movs	r3, #255	; 0xff
 8008f90:	e017      	b.n	8008fc2 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8008f92:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008f96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d005      	beq.n	8008fac <aci_gatt_add_service+0x18c>
    return resp.Status;
 8008fa0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008fa4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	e00a      	b.n	8008fc2 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8008fac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008fb0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008fb4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8008fbe:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd90      	pop	{r4, r7, pc}

08008fcc <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8008fcc:	b590      	push	{r4, r7, lr}
 8008fce:	b0d1      	sub	sp, #324	; 0x144
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	4604      	mov	r4, r0
 8008fd4:	4608      	mov	r0, r1
 8008fd6:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8008fda:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8008fde:	600a      	str	r2, [r1, #0]
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008fe6:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008fea:	4622      	mov	r2, r4
 8008fec:	801a      	strh	r2, [r3, #0]
 8008fee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008ff2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	701a      	strb	r2, [r3, #0]
 8008ffa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8008ffe:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8009002:	460a      	mov	r2, r1
 8009004:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009006:	f107 0318 	add.w	r3, r7, #24
 800900a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800900e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009012:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	2b01      	cmp	r3, #1
 800901a:	d00a      	beq.n	8009032 <aci_gatt_add_char+0x66>
 800901c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009020:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	2b02      	cmp	r3, #2
 8009028:	d101      	bne.n	800902e <aci_gatt_add_char+0x62>
 800902a:	2313      	movs	r3, #19
 800902c:	e002      	b.n	8009034 <aci_gatt_add_char+0x68>
 800902e:	2303      	movs	r3, #3
 8009030:	e000      	b.n	8009034 <aci_gatt_add_char+0x68>
 8009032:	2305      	movs	r3, #5
 8009034:	f107 0218 	add.w	r2, r7, #24
 8009038:	4413      	add	r3, r2
 800903a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800903e:	f107 0314 	add.w	r3, r7, #20
 8009042:	2203      	movs	r2, #3
 8009044:	2100      	movs	r1, #0
 8009046:	4618      	mov	r0, r3
 8009048:	f000 fc7f 	bl	800994a <Osal_MemSet>
  int index_input = 0;
 800904c:	2300      	movs	r3, #0
 800904e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8009052:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009056:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800905a:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800905e:	8812      	ldrh	r2, [r2, #0]
 8009060:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009062:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009066:	3302      	adds	r3, #2
 8009068:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800906c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009070:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009074:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8009078:	7812      	ldrb	r2, [r2, #0]
 800907a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800907c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009080:	3301      	adds	r3, #1
 8009082:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8009086:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800908a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d002      	beq.n	800909a <aci_gatt_add_char+0xce>
 8009094:	2b02      	cmp	r3, #2
 8009096:	d004      	beq.n	80090a2 <aci_gatt_add_char+0xd6>
 8009098:	e007      	b.n	80090aa <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800909a:	2302      	movs	r3, #2
 800909c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80090a0:	e005      	b.n	80090ae <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80090a2:	2310      	movs	r3, #16
 80090a4:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80090a8:	e001      	b.n	80090ae <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80090aa:	2397      	movs	r3, #151	; 0x97
 80090ac:	e091      	b.n	80091d2 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80090ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80090b2:	1cd8      	adds	r0, r3, #3
 80090b4:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80090b8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80090bc:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80090c0:	6819      	ldr	r1, [r3, #0]
 80090c2:	f000 fc32 	bl	800992a <Osal_MemCpy>
    index_input += size;
 80090c6:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80090ca:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80090ce:	4413      	add	r3, r2
 80090d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80090d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80090d8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80090dc:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 80090e0:	8812      	ldrh	r2, [r2, #0]
 80090e2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80090e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80090e8:	3302      	adds	r3, #2
 80090ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80090ee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80090f2:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80090f6:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 80090f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80090fc:	3301      	adds	r3, #1
 80090fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8009102:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009106:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800910a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800910c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009110:	3301      	adds	r3, #1
 8009112:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8009116:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800911a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800911e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8009120:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009124:	3301      	adds	r3, #1
 8009126:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800912a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800912e:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8009132:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8009134:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009138:	3301      	adds	r3, #1
 800913a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800913e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009142:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8009146:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8009148:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800914c:	3301      	adds	r3, #1
 800914e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009152:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009156:	2218      	movs	r2, #24
 8009158:	2100      	movs	r1, #0
 800915a:	4618      	mov	r0, r3
 800915c:	f000 fbf5 	bl	800994a <Osal_MemSet>
  rq.ogf = 0x3f;
 8009160:	233f      	movs	r3, #63	; 0x3f
 8009162:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8009166:	f44f 7382 	mov.w	r3, #260	; 0x104
 800916a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800916e:	f107 0318 	add.w	r3, r7, #24
 8009172:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009176:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800917a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800917e:	f107 0314 	add.w	r3, r7, #20
 8009182:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8009186:	2303      	movs	r3, #3
 8009188:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800918c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009190:	2100      	movs	r1, #0
 8009192:	4618      	mov	r0, r3
 8009194:	f000 ff90 	bl	800a0b8 <hci_send_req>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	da01      	bge.n	80091a2 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800919e:	23ff      	movs	r3, #255	; 0xff
 80091a0:	e017      	b.n	80091d2 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80091a2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80091a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d005      	beq.n	80091bc <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80091b0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80091b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	e00a      	b.n	80091d2 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80091bc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80091c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091c4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80091c8:	b29a      	uxth	r2, r3
 80091ca:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80091ce:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80091d0:	2300      	movs	r3, #0
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd90      	pop	{r4, r7, pc}

080091dc <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80091dc:	b5b0      	push	{r4, r5, r7, lr}
 80091de:	b0cc      	sub	sp, #304	; 0x130
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	4605      	mov	r5, r0
 80091e4:	460c      	mov	r4, r1
 80091e6:	4610      	mov	r0, r2
 80091e8:	4619      	mov	r1, r3
 80091ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091ee:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80091f2:	462a      	mov	r2, r5
 80091f4:	801a      	strh	r2, [r3, #0]
 80091f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80091fe:	4622      	mov	r2, r4
 8009200:	801a      	strh	r2, [r3, #0]
 8009202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009206:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800920a:	4602      	mov	r2, r0
 800920c:	701a      	strb	r2, [r3, #0]
 800920e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009212:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009216:	460a      	mov	r2, r1
 8009218:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800921a:	f107 0310 	add.w	r3, r7, #16
 800921e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009226:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800922a:	2200      	movs	r2, #0
 800922c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800922e:	2300      	movs	r3, #0
 8009230:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8009234:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009238:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800923c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009240:	8812      	ldrh	r2, [r2, #0]
 8009242:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009244:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009248:	3302      	adds	r3, #2
 800924a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800924e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009252:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009256:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800925a:	8812      	ldrh	r2, [r2, #0]
 800925c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800925e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009262:	3302      	adds	r3, #2
 8009264:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8009268:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800926c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009270:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8009274:	7812      	ldrb	r2, [r2, #0]
 8009276:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009278:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800927c:	3301      	adds	r3, #1
 800927e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8009282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009286:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800928a:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800928e:	7812      	ldrb	r2, [r2, #0]
 8009290:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009292:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009296:	3301      	adds	r3, #1
 8009298:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800929c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092a0:	1d98      	adds	r0, r3, #6
 80092a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092a6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	461a      	mov	r2, r3
 80092ae:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80092b2:	f000 fb3a 	bl	800992a <Osal_MemCpy>
  index_input += Char_Value_Length;
 80092b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ba:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80092c4:	4413      	add	r3, r2
 80092c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80092ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80092ce:	2218      	movs	r2, #24
 80092d0:	2100      	movs	r1, #0
 80092d2:	4618      	mov	r0, r3
 80092d4:	f000 fb39 	bl	800994a <Osal_MemSet>
  rq.ogf = 0x3f;
 80092d8:	233f      	movs	r3, #63	; 0x3f
 80092da:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 80092de:	f44f 7383 	mov.w	r3, #262	; 0x106
 80092e2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80092e6:	f107 0310 	add.w	r3, r7, #16
 80092ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80092ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80092f6:	f107 030f 	add.w	r3, r7, #15
 80092fa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80092fe:	2301      	movs	r3, #1
 8009300:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009304:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009308:	2100      	movs	r1, #0
 800930a:	4618      	mov	r0, r3
 800930c:	f000 fed4 	bl	800a0b8 <hci_send_req>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	da01      	bge.n	800931a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8009316:	23ff      	movs	r3, #255	; 0xff
 8009318:	e004      	b.n	8009324 <aci_gatt_update_char_value+0x148>
  return status;
 800931a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800931e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009322:	781b      	ldrb	r3, [r3, #0]
}
 8009324:	4618      	mov	r0, r3
 8009326:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800932a:	46bd      	mov	sp, r7
 800932c:	bdb0      	pop	{r4, r5, r7, pc}

0800932e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800932e:	b580      	push	{r7, lr}
 8009330:	b0cc      	sub	sp, #304	; 0x130
 8009332:	af00      	add	r7, sp, #0
 8009334:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009338:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800933c:	601a      	str	r2, [r3, #0]
 800933e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009342:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009346:	4602      	mov	r2, r0
 8009348:	701a      	strb	r2, [r3, #0]
 800934a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800934e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009352:	460a      	mov	r2, r1
 8009354:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8009356:	f107 0310 	add.w	r3, r7, #16
 800935a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800935e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009362:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009366:	2200      	movs	r2, #0
 8009368:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800936a:	2300      	movs	r3, #0
 800936c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8009370:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009374:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009378:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800937c:	7812      	ldrb	r2, [r2, #0]
 800937e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009380:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009384:	3301      	adds	r3, #1
 8009386:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800938a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800938e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009392:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009396:	7812      	ldrb	r2, [r2, #0]
 8009398:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800939a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800939e:	3301      	adds	r3, #1
 80093a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80093a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80093a8:	1c98      	adds	r0, r3, #2
 80093aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093ae:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80093b2:	781a      	ldrb	r2, [r3, #0]
 80093b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80093bc:	6819      	ldr	r1, [r3, #0]
 80093be:	f000 fab4 	bl	800992a <Osal_MemCpy>
  index_input += Length;
 80093c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093c6:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80093d0:	4413      	add	r3, r2
 80093d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80093d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80093da:	2218      	movs	r2, #24
 80093dc:	2100      	movs	r1, #0
 80093de:	4618      	mov	r0, r3
 80093e0:	f000 fab3 	bl	800994a <Osal_MemSet>
  rq.ogf = 0x3f;
 80093e4:	233f      	movs	r3, #63	; 0x3f
 80093e6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80093ea:	230c      	movs	r3, #12
 80093ec:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80093f0:	f107 0310 	add.w	r3, r7, #16
 80093f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80093f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009400:	f107 030f 	add.w	r3, r7, #15
 8009404:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009408:	2301      	movs	r3, #1
 800940a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800940e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009412:	2100      	movs	r1, #0
 8009414:	4618      	mov	r0, r3
 8009416:	f000 fe4f 	bl	800a0b8 <hci_send_req>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	da01      	bge.n	8009424 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8009420:	23ff      	movs	r3, #255	; 0xff
 8009422:	e004      	b.n	800942e <aci_hal_write_config_data+0x100>
  return status;
 8009424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009428:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800942c:	781b      	ldrb	r3, [r3, #0]
}
 800942e:	4618      	mov	r0, r3
 8009430:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b0cc      	sub	sp, #304	; 0x130
 800943c:	af00      	add	r7, sp, #0
 800943e:	4602      	mov	r2, r0
 8009440:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009444:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009448:	701a      	strb	r2, [r3, #0]
 800944a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800944e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009452:	460a      	mov	r2, r1
 8009454:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009456:	f107 0310 	add.w	r3, r7, #16
 800945a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800945e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009462:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009466:	2200      	movs	r2, #0
 8009468:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800946a:	2300      	movs	r3, #0
 800946c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8009470:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009474:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009478:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800947c:	7812      	ldrb	r2, [r2, #0]
 800947e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009480:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009484:	3301      	adds	r3, #1
 8009486:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800948a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800948e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009492:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009496:	7812      	ldrb	r2, [r2, #0]
 8009498:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800949a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800949e:	3301      	adds	r3, #1
 80094a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80094a4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094a8:	2218      	movs	r2, #24
 80094aa:	2100      	movs	r1, #0
 80094ac:	4618      	mov	r0, r3
 80094ae:	f000 fa4c 	bl	800994a <Osal_MemSet>
  rq.ogf = 0x3f;
 80094b2:	233f      	movs	r3, #63	; 0x3f
 80094b4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 80094b8:	230f      	movs	r3, #15
 80094ba:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80094be:	f107 0310 	add.w	r3, r7, #16
 80094c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80094c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80094ce:	f107 030f 	add.w	r3, r7, #15
 80094d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80094d6:	2301      	movs	r3, #1
 80094d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80094dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094e0:	2100      	movs	r1, #0
 80094e2:	4618      	mov	r0, r3
 80094e4:	f000 fde8 	bl	800a0b8 <hci_send_req>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	da01      	bge.n	80094f2 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80094ee:	23ff      	movs	r3, #255	; 0xff
 80094f0:	e004      	b.n	80094fc <aci_hal_set_tx_power_level+0xc4>
  return status;
 80094f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094f6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80094fa:	781b      	ldrb	r3, [r3, #0]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}

08009506 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8009506:	b580      	push	{r7, lr}
 8009508:	b0cc      	sub	sp, #304	; 0x130
 800950a:	af00      	add	r7, sp, #0
 800950c:	4602      	mov	r2, r0
 800950e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009512:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009516:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8009518:	f107 0310 	add.w	r3, r7, #16
 800951c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009520:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009524:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009528:	2200      	movs	r2, #0
 800952a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800952c:	2300      	movs	r3, #0
 800952e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8009532:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009536:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800953a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800953e:	8812      	ldrh	r2, [r2, #0]
 8009540:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009542:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009546:	3302      	adds	r3, #2
 8009548:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800954c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009550:	2218      	movs	r2, #24
 8009552:	2100      	movs	r1, #0
 8009554:	4618      	mov	r0, r3
 8009556:	f000 f9f8 	bl	800994a <Osal_MemSet>
  rq.ogf = 0x3f;
 800955a:	233f      	movs	r3, #63	; 0x3f
 800955c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8009560:	2318      	movs	r3, #24
 8009562:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009566:	f107 0310 	add.w	r3, r7, #16
 800956a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800956e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009572:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009576:	f107 030f 	add.w	r3, r7, #15
 800957a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800957e:	2301      	movs	r3, #1
 8009580:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009584:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009588:	2100      	movs	r1, #0
 800958a:	4618      	mov	r0, r3
 800958c:	f000 fd94 	bl	800a0b8 <hci_send_req>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	da01      	bge.n	800959a <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8009596:	23ff      	movs	r3, #255	; 0xff
 8009598:	e004      	b.n	80095a4 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800959a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800959e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80095a2:	781b      	ldrb	r3, [r3, #0]
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b088      	sub	sp, #32
 80095b2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80095b4:	2300      	movs	r3, #0
 80095b6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80095b8:	f107 0308 	add.w	r3, r7, #8
 80095bc:	2218      	movs	r2, #24
 80095be:	2100      	movs	r1, #0
 80095c0:	4618      	mov	r0, r3
 80095c2:	f000 f9c2 	bl	800994a <Osal_MemSet>
  rq.ogf = 0x03;
 80095c6:	2303      	movs	r3, #3
 80095c8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80095ca:	2303      	movs	r3, #3
 80095cc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80095ce:	1dfb      	adds	r3, r7, #7
 80095d0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80095d2:	2301      	movs	r3, #1
 80095d4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80095d6:	f107 0308 	add.w	r3, r7, #8
 80095da:	2100      	movs	r1, #0
 80095dc:	4618      	mov	r0, r3
 80095de:	f000 fd6b 	bl	800a0b8 <hci_send_req>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	da01      	bge.n	80095ec <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80095e8:	23ff      	movs	r3, #255	; 0xff
 80095ea:	e000      	b.n	80095ee <hci_reset+0x40>
  return status;
 80095ec:	79fb      	ldrb	r3, [r7, #7]
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3720      	adds	r7, #32
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}

080095f6 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 80095f6:	b580      	push	{r7, lr}
 80095f8:	b0ce      	sub	sp, #312	; 0x138
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009600:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009604:	6019      	str	r1, [r3, #0]
 8009606:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800960a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800960e:	601a      	str	r2, [r3, #0]
 8009610:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009614:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009618:	4602      	mov	r2, r0
 800961a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800961c:	f107 0318 	add.w	r3, r7, #24
 8009620:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009624:	f107 0310 	add.w	r3, r7, #16
 8009628:	2205      	movs	r2, #5
 800962a:	2100      	movs	r1, #0
 800962c:	4618      	mov	r0, r3
 800962e:	f000 f98c 	bl	800994a <Osal_MemSet>
  int index_input = 0;
 8009632:	2300      	movs	r3, #0
 8009634:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 8009638:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800963c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009640:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009644:	8812      	ldrh	r2, [r2, #0]
 8009646:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009648:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800964c:	3302      	adds	r3, #2
 800964e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009652:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009656:	2218      	movs	r2, #24
 8009658:	2100      	movs	r1, #0
 800965a:	4618      	mov	r0, r3
 800965c:	f000 f975 	bl	800994a <Osal_MemSet>
  rq.ogf = 0x08;
 8009660:	2308      	movs	r3, #8
 8009662:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8009666:	2330      	movs	r3, #48	; 0x30
 8009668:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800966c:	f107 0318 	add.w	r3, r7, #24
 8009670:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009674:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009678:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800967c:	f107 0310 	add.w	r3, r7, #16
 8009680:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8009684:	2305      	movs	r3, #5
 8009686:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800968a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800968e:	2100      	movs	r1, #0
 8009690:	4618      	mov	r0, r3
 8009692:	f000 fd11 	bl	800a0b8 <hci_send_req>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	da01      	bge.n	80096a0 <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 800969c:	23ff      	movs	r3, #255	; 0xff
 800969e:	e023      	b.n	80096e8 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 80096a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80096a4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d005      	beq.n	80096ba <hci_le_read_phy+0xc4>
    return resp.Status;
 80096ae:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80096b2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	e016      	b.n	80096e8 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 80096ba:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80096be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80096c2:	78da      	ldrb	r2, [r3, #3]
 80096c4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80096c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 80096d0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80096d4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80096d8:	791a      	ldrb	r2, [r3, #4]
 80096da:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80096de:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80096f2:	b590      	push	{r4, r7, lr}
 80096f4:	b0cd      	sub	sp, #308	; 0x134
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	4604      	mov	r4, r0
 80096fa:	4608      	mov	r0, r1
 80096fc:	4611      	mov	r1, r2
 80096fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009702:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009706:	4622      	mov	r2, r4
 8009708:	701a      	strb	r2, [r3, #0]
 800970a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800970e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009712:	4602      	mov	r2, r0
 8009714:	701a      	strb	r2, [r3, #0]
 8009716:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800971a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800971e:	460a      	mov	r2, r1
 8009720:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8009722:	f107 0310 	add.w	r3, r7, #16
 8009726:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800972a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800972e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009732:	2200      	movs	r2, #0
 8009734:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009736:	2300      	movs	r3, #0
 8009738:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800973c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009740:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009744:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009748:	7812      	ldrb	r2, [r2, #0]
 800974a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800974c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009750:	3301      	adds	r3, #1
 8009752:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8009756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800975a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800975e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009762:	7812      	ldrb	r2, [r2, #0]
 8009764:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009766:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800976a:	3301      	adds	r3, #1
 800976c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8009770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009774:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009778:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800977c:	7812      	ldrb	r2, [r2, #0]
 800977e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009780:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009784:	3301      	adds	r3, #1
 8009786:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800978a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800978e:	2218      	movs	r2, #24
 8009790:	2100      	movs	r1, #0
 8009792:	4618      	mov	r0, r3
 8009794:	f000 f8d9 	bl	800994a <Osal_MemSet>
  rq.ogf = 0x08;
 8009798:	2308      	movs	r3, #8
 800979a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800979e:	2331      	movs	r3, #49	; 0x31
 80097a0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80097a4:	f107 0310 	add.w	r3, r7, #16
 80097a8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80097ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80097b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80097b4:	f107 030f 	add.w	r3, r7, #15
 80097b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80097bc:	2301      	movs	r3, #1
 80097be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80097c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80097c6:	2100      	movs	r1, #0
 80097c8:	4618      	mov	r0, r3
 80097ca:	f000 fc75 	bl	800a0b8 <hci_send_req>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	da01      	bge.n	80097d8 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80097d4:	23ff      	movs	r3, #255	; 0xff
 80097d6:	e004      	b.n	80097e2 <hci_le_set_default_phy+0xf0>
  return status;
 80097d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097dc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80097e0:	781b      	ldrb	r3, [r3, #0]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd90      	pop	{r4, r7, pc}

080097ec <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 80097ec:	b5b0      	push	{r4, r5, r7, lr}
 80097ee:	b0cc      	sub	sp, #304	; 0x130
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	4605      	mov	r5, r0
 80097f4:	460c      	mov	r4, r1
 80097f6:	4610      	mov	r0, r2
 80097f8:	4619      	mov	r1, r3
 80097fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097fe:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009802:	462a      	mov	r2, r5
 8009804:	801a      	strh	r2, [r3, #0]
 8009806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800980a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800980e:	4622      	mov	r2, r4
 8009810:	801a      	strh	r2, [r3, #0]
 8009812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009816:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800981a:	4602      	mov	r2, r0
 800981c:	801a      	strh	r2, [r3, #0]
 800981e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009822:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009826:	460a      	mov	r2, r1
 8009828:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 800982a:	f107 0310 	add.w	r3, r7, #16
 800982e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009832:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009836:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800983a:	2200      	movs	r2, #0
 800983c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800983e:	2300      	movs	r3, #0
 8009840:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009844:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009848:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800984c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009850:	8812      	ldrh	r2, [r2, #0]
 8009852:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009854:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009858:	3302      	adds	r3, #2
 800985a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 800985e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009862:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009866:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800986a:	8812      	ldrh	r2, [r2, #0]
 800986c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800986e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009872:	3302      	adds	r3, #2
 8009874:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8009878:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800987c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009880:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8009884:	8812      	ldrh	r2, [r2, #0]
 8009886:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8009888:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800988c:	3302      	adds	r3, #2
 800988e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Latency = Latency;
 8009892:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009896:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800989a:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800989e:	8812      	ldrh	r2, [r2, #0]
 80098a0:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 80098a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098a6:	3302      	adds	r3, #2
 80098a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 80098ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098b0:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 80098b4:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 80098b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098ba:	3302      	adds	r3, #2
 80098bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80098c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80098c4:	2218      	movs	r2, #24
 80098c6:	2100      	movs	r1, #0
 80098c8:	4618      	mov	r0, r3
 80098ca:	f000 f83e 	bl	800994a <Osal_MemSet>
  rq.ogf = 0x3f;
 80098ce:	233f      	movs	r3, #63	; 0x3f
 80098d0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x181;
 80098d4:	f240 1381 	movw	r3, #385	; 0x181
 80098d8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 80098dc:	230f      	movs	r3, #15
 80098de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 80098e2:	f107 0310 	add.w	r3, r7, #16
 80098e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80098ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80098f2:	f107 030f 	add.w	r3, r7, #15
 80098f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80098fa:	2301      	movs	r3, #1
 80098fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009900:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009904:	2100      	movs	r1, #0
 8009906:	4618      	mov	r0, r3
 8009908:	f000 fbd6 	bl	800a0b8 <hci_send_req>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	da01      	bge.n	8009916 <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 8009912:	23ff      	movs	r3, #255	; 0xff
 8009914:	e004      	b.n	8009920 <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 8009916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800991a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800991e:	781b      	ldrb	r3, [r3, #0]
}
 8009920:	4618      	mov	r0, r3
 8009922:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009926:	46bd      	mov	sp, r7
 8009928:	bdb0      	pop	{r4, r5, r7, pc}

0800992a <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800992a:	b580      	push	{r7, lr}
 800992c:	b084      	sub	sp, #16
 800992e:	af00      	add	r7, sp, #0
 8009930:	60f8      	str	r0, [r7, #12]
 8009932:	60b9      	str	r1, [r7, #8]
 8009934:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	68b9      	ldr	r1, [r7, #8]
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f003 fd69 	bl	800d412 <memcpy>
 8009940:	4603      	mov	r3, r0
}
 8009942:	4618      	mov	r0, r3
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b084      	sub	sp, #16
 800994e:	af00      	add	r7, sp, #0
 8009950:	60f8      	str	r0, [r7, #12]
 8009952:	60b9      	str	r1, [r7, #8]
 8009954:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	68b9      	ldr	r1, [r7, #8]
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f003 fce4 	bl	800d328 <memset>
 8009960:	4603      	mov	r3, r0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
	...

0800996c <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b08a      	sub	sp, #40	; 0x28
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8009974:	2300      	movs	r3, #0
 8009976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	3301      	adds	r3, #1
 800997e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8009980:	6a3b      	ldr	r3, [r7, #32]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	2bff      	cmp	r3, #255	; 0xff
 8009986:	d14f      	bne.n	8009a28 <PeerToPeer_Event_Handler+0xbc>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8009988:	6a3b      	ldr	r3, [r7, #32]
 800998a:	3302      	adds	r3, #2
 800998c:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	881b      	ldrh	r3, [r3, #0]
 8009992:	b29b      	uxth	r3, r3
 8009994:	461a      	mov	r2, r3
 8009996:	f640 4301 	movw	r3, #3073	; 0xc01
 800999a:	429a      	cmp	r2, r3
 800999c:	d140      	bne.n	8009a20 <PeerToPeer_Event_Handler+0xb4>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	3302      	adds	r3, #2
 80099a2:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	885b      	ldrh	r3, [r3, #2]
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	461a      	mov	r2, r3
 80099ac:	4b22      	ldr	r3, [pc, #136]	; (8009a38 <PeerToPeer_Event_Handler+0xcc>)
 80099ae:	889b      	ldrh	r3, [r3, #4]
 80099b0:	3302      	adds	r3, #2
 80099b2:	429a      	cmp	r2, r3
 80099b4:	d118      	bne.n	80099e8 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 80099b6:	2301      	movs	r3, #1
 80099b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	7a1b      	ldrb	r3, [r3, #8]
 80099c0:	f003 0301 	and.w	r3, r3, #1
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d007      	beq.n	80099d8 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 80099c8:	2300      	movs	r3, #0
 80099ca:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 80099cc:	f107 0308 	add.w	r3, r7, #8
 80099d0:	4618      	mov	r0, r3
 80099d2:	f002 fccf 	bl	800c374 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 80099d6:	e025      	b.n	8009a24 <PeerToPeer_Event_Handler+0xb8>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 80099d8:	2301      	movs	r3, #1
 80099da:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 80099dc:	f107 0308 	add.w	r3, r7, #8
 80099e0:	4618      	mov	r0, r3
 80099e2:	f002 fcc7 	bl	800c374 <P2PS_STM_App_Notification>
        break;
 80099e6:	e01d      	b.n	8009a24 <PeerToPeer_Event_Handler+0xb8>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 80099e8:	69bb      	ldr	r3, [r7, #24]
 80099ea:	885b      	ldrh	r3, [r3, #2]
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	461a      	mov	r2, r3
 80099f0:	4b11      	ldr	r3, [pc, #68]	; (8009a38 <PeerToPeer_Event_Handler+0xcc>)
 80099f2:	885b      	ldrh	r3, [r3, #2]
 80099f4:	3301      	adds	r3, #1
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d114      	bne.n	8009a24 <PeerToPeer_Event_Handler+0xb8>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 80099fa:	4810      	ldr	r0, [pc, #64]	; (8009a3c <PeerToPeer_Event_Handler+0xd0>)
 80099fc:	f003 fbb4 	bl	800d168 <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8009a00:	2303      	movs	r3, #3
 8009a02:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8009a04:	69bb      	ldr	r3, [r7, #24]
 8009a06:	88db      	ldrh	r3, [r3, #6]
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	3308      	adds	r3, #8
 8009a12:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8009a14:	f107 0308 	add.w	r3, r7, #8
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f002 fcab 	bl	800c374 <P2PS_STM_App_Notification>
        break;
 8009a1e:	e001      	b.n	8009a24 <PeerToPeer_Event_Handler+0xb8>

        default:
          break;
 8009a20:	bf00      	nop
 8009a22:	e002      	b.n	8009a2a <PeerToPeer_Event_Handler+0xbe>
        break;
 8009a24:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8009a26:	e000      	b.n	8009a2a <PeerToPeer_Event_Handler+0xbe>

    default:
      break;
 8009a28:	bf00      	nop
  }

  return(return_value);
 8009a2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3728      	adds	r7, #40	; 0x28
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	200000a8 	.word	0x200000a8
 8009a3c:	0800e314 	.word	0x0800e314

08009a40 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b08a      	sub	sp, #40	; 0x28
 8009a44:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8009a46:	484a      	ldr	r0, [pc, #296]	; (8009b70 <P2PS_STM_Init+0x130>)
 8009a48:	f000 f96c 	bl	8009d24 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8009a4c:	238f      	movs	r3, #143	; 0x8f
 8009a4e:	703b      	strb	r3, [r7, #0]
 8009a50:	23e5      	movs	r3, #229	; 0xe5
 8009a52:	707b      	strb	r3, [r7, #1]
 8009a54:	23b3      	movs	r3, #179	; 0xb3
 8009a56:	70bb      	strb	r3, [r7, #2]
 8009a58:	23d5      	movs	r3, #213	; 0xd5
 8009a5a:	70fb      	strb	r3, [r7, #3]
 8009a5c:	232e      	movs	r3, #46	; 0x2e
 8009a5e:	713b      	strb	r3, [r7, #4]
 8009a60:	237f      	movs	r3, #127	; 0x7f
 8009a62:	717b      	strb	r3, [r7, #5]
 8009a64:	234a      	movs	r3, #74	; 0x4a
 8009a66:	71bb      	strb	r3, [r7, #6]
 8009a68:	2398      	movs	r3, #152	; 0x98
 8009a6a:	71fb      	strb	r3, [r7, #7]
 8009a6c:	232a      	movs	r3, #42	; 0x2a
 8009a6e:	723b      	strb	r3, [r7, #8]
 8009a70:	2348      	movs	r3, #72	; 0x48
 8009a72:	727b      	strb	r3, [r7, #9]
 8009a74:	237a      	movs	r3, #122	; 0x7a
 8009a76:	72bb      	strb	r3, [r7, #10]
 8009a78:	23cc      	movs	r3, #204	; 0xcc
 8009a7a:	72fb      	strb	r3, [r7, #11]
 8009a7c:	2340      	movs	r3, #64	; 0x40
 8009a7e:	733b      	strb	r3, [r7, #12]
 8009a80:	23fe      	movs	r3, #254	; 0xfe
 8009a82:	737b      	strb	r3, [r7, #13]
 8009a84:	2300      	movs	r3, #0
 8009a86:	73bb      	strb	r3, [r7, #14]
 8009a88:	2300      	movs	r3, #0
 8009a8a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8009a8c:	4639      	mov	r1, r7
 8009a8e:	4b39      	ldr	r3, [pc, #228]	; (8009b74 <P2PS_STM_Init+0x134>)
 8009a90:	9300      	str	r3, [sp, #0]
 8009a92:	2306      	movs	r3, #6
 8009a94:	2201      	movs	r2, #1
 8009a96:	2002      	movs	r0, #2
 8009a98:	f7ff f9c2 	bl	8008e20 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8009a9c:	2319      	movs	r3, #25
 8009a9e:	703b      	strb	r3, [r7, #0]
 8009aa0:	23ed      	movs	r3, #237	; 0xed
 8009aa2:	707b      	strb	r3, [r7, #1]
 8009aa4:	2382      	movs	r3, #130	; 0x82
 8009aa6:	70bb      	strb	r3, [r7, #2]
 8009aa8:	23ae      	movs	r3, #174	; 0xae
 8009aaa:	70fb      	strb	r3, [r7, #3]
 8009aac:	23ed      	movs	r3, #237	; 0xed
 8009aae:	713b      	strb	r3, [r7, #4]
 8009ab0:	2321      	movs	r3, #33	; 0x21
 8009ab2:	717b      	strb	r3, [r7, #5]
 8009ab4:	234c      	movs	r3, #76	; 0x4c
 8009ab6:	71bb      	strb	r3, [r7, #6]
 8009ab8:	239d      	movs	r3, #157	; 0x9d
 8009aba:	71fb      	strb	r3, [r7, #7]
 8009abc:	2341      	movs	r3, #65	; 0x41
 8009abe:	723b      	strb	r3, [r7, #8]
 8009ac0:	2345      	movs	r3, #69	; 0x45
 8009ac2:	727b      	strb	r3, [r7, #9]
 8009ac4:	2322      	movs	r3, #34	; 0x22
 8009ac6:	72bb      	strb	r3, [r7, #10]
 8009ac8:	238e      	movs	r3, #142	; 0x8e
 8009aca:	72fb      	strb	r3, [r7, #11]
 8009acc:	2341      	movs	r3, #65	; 0x41
 8009ace:	733b      	strb	r3, [r7, #12]
 8009ad0:	23fe      	movs	r3, #254	; 0xfe
 8009ad2:	737b      	strb	r3, [r7, #13]
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	73bb      	strb	r3, [r7, #14]
 8009ad8:	2300      	movs	r3, #0
 8009ada:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8009adc:	4b25      	ldr	r3, [pc, #148]	; (8009b74 <P2PS_STM_Init+0x134>)
 8009ade:	8818      	ldrh	r0, [r3, #0]
 8009ae0:	463a      	mov	r2, r7
 8009ae2:	4b25      	ldr	r3, [pc, #148]	; (8009b78 <P2PS_STM_Init+0x138>)
 8009ae4:	9305      	str	r3, [sp, #20]
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	9304      	str	r3, [sp, #16]
 8009aea:	230a      	movs	r3, #10
 8009aec:	9303      	str	r3, [sp, #12]
 8009aee:	2301      	movs	r3, #1
 8009af0:	9302      	str	r3, [sp, #8]
 8009af2:	2300      	movs	r3, #0
 8009af4:	9301      	str	r3, [sp, #4]
 8009af6:	2306      	movs	r3, #6
 8009af8:	9300      	str	r3, [sp, #0]
 8009afa:	2302      	movs	r3, #2
 8009afc:	2102      	movs	r1, #2
 8009afe:	f7ff fa65 	bl	8008fcc <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8009b02:	2319      	movs	r3, #25
 8009b04:	703b      	strb	r3, [r7, #0]
 8009b06:	23ed      	movs	r3, #237	; 0xed
 8009b08:	707b      	strb	r3, [r7, #1]
 8009b0a:	2382      	movs	r3, #130	; 0x82
 8009b0c:	70bb      	strb	r3, [r7, #2]
 8009b0e:	23ae      	movs	r3, #174	; 0xae
 8009b10:	70fb      	strb	r3, [r7, #3]
 8009b12:	23ed      	movs	r3, #237	; 0xed
 8009b14:	713b      	strb	r3, [r7, #4]
 8009b16:	2321      	movs	r3, #33	; 0x21
 8009b18:	717b      	strb	r3, [r7, #5]
 8009b1a:	234c      	movs	r3, #76	; 0x4c
 8009b1c:	71bb      	strb	r3, [r7, #6]
 8009b1e:	239d      	movs	r3, #157	; 0x9d
 8009b20:	71fb      	strb	r3, [r7, #7]
 8009b22:	2341      	movs	r3, #65	; 0x41
 8009b24:	723b      	strb	r3, [r7, #8]
 8009b26:	2345      	movs	r3, #69	; 0x45
 8009b28:	727b      	strb	r3, [r7, #9]
 8009b2a:	2322      	movs	r3, #34	; 0x22
 8009b2c:	72bb      	strb	r3, [r7, #10]
 8009b2e:	238e      	movs	r3, #142	; 0x8e
 8009b30:	72fb      	strb	r3, [r7, #11]
 8009b32:	2342      	movs	r3, #66	; 0x42
 8009b34:	733b      	strb	r3, [r7, #12]
 8009b36:	23fe      	movs	r3, #254	; 0xfe
 8009b38:	737b      	strb	r3, [r7, #13]
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	73bb      	strb	r3, [r7, #14]
 8009b3e:	2300      	movs	r3, #0
 8009b40:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8009b42:	4b0c      	ldr	r3, [pc, #48]	; (8009b74 <P2PS_STM_Init+0x134>)
 8009b44:	8818      	ldrh	r0, [r3, #0]
 8009b46:	463a      	mov	r2, r7
 8009b48:	4b0c      	ldr	r3, [pc, #48]	; (8009b7c <P2PS_STM_Init+0x13c>)
 8009b4a:	9305      	str	r3, [sp, #20]
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	9304      	str	r3, [sp, #16]
 8009b50:	230a      	movs	r3, #10
 8009b52:	9303      	str	r3, [sp, #12]
 8009b54:	2301      	movs	r3, #1
 8009b56:	9302      	str	r3, [sp, #8]
 8009b58:	2300      	movs	r3, #0
 8009b5a:	9301      	str	r3, [sp, #4]
 8009b5c:	2310      	movs	r3, #16
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	2302      	movs	r3, #2
 8009b62:	2102      	movs	r1, #2
 8009b64:	f7ff fa32 	bl	8008fcc <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8009b68:	bf00      	nop
}
 8009b6a:	3710      	adds	r7, #16
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}
 8009b70:	0800996d 	.word	0x0800996d
 8009b74:	200000a8 	.word	0x200000a8
 8009b78:	200000aa 	.word	0x200000aa
 8009b7c:	200000ac 	.word	0x200000ac

08009b80 <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b086      	sub	sp, #24
 8009b84:	af02      	add	r7, sp, #8
 8009b86:	4603      	mov	r3, r0
 8009b88:	6039      	str	r1, [r7, #0]
 8009b8a:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8009b8c:	2392      	movs	r3, #146	; 0x92
 8009b8e:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 8009b90:	88fb      	ldrh	r3, [r7, #6]
 8009b92:	f64f 6242 	movw	r2, #65090	; 0xfe42
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d10c      	bne.n	8009bb4 <P2PS_STM_App_Update_Char+0x34>
  {
    case P2P_NOTIFY_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 8009b9a:	4b09      	ldr	r3, [pc, #36]	; (8009bc0 <P2PS_STM_App_Update_Char+0x40>)
 8009b9c:	8818      	ldrh	r0, [r3, #0]
 8009b9e:	4b08      	ldr	r3, [pc, #32]	; (8009bc0 <P2PS_STM_App_Update_Char+0x40>)
 8009ba0:	8899      	ldrh	r1, [r3, #4]
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	9300      	str	r3, [sp, #0]
 8009ba6:	2302      	movs	r3, #2
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f7ff fb17 	bl	80091dc <aci_gatt_update_char_value>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	73fb      	strb	r3, [r7, #15]
                             aPeerToPeerContext.P2PNotifyServerToClientCharHdle,
                              0, /* charValOffset */
                             2, /* charValueLen */
                             (uint8_t *)  pPayload);
    
      break;
 8009bb2:	e000      	b.n	8009bb6 <P2PS_STM_App_Update_Char+0x36>

    default:
      break;
 8009bb4:	bf00      	nop
  }

  return result;
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3710      	adds	r7, #16
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	200000a8 	.word	0x200000a8

08009bc4 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	af00      	add	r7, sp, #0
  return;
 8009bc8:	bf00      	nop
}
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8009bd2:	b480      	push	{r7}
 8009bd4:	af00      	add	r7, sp, #0
  return;
 8009bd6:	bf00      	nop
}
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8009be0:	b480      	push	{r7}
 8009be2:	af00      	add	r7, sp, #0
  return;
 8009be4:	bf00      	nop
}
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr

08009bee <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8009bee:	b480      	push	{r7}
 8009bf0:	af00      	add	r7, sp, #0
  return;
 8009bf2:	bf00      	nop
}
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	af00      	add	r7, sp, #0
  return;
 8009c00:	bf00      	nop
}
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr

08009c0a <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8009c0a:	b480      	push	{r7}
 8009c0c:	af00      	add	r7, sp, #0
  return;
 8009c0e:	bf00      	nop
}
 8009c10:	46bd      	mov	sp, r7
 8009c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c16:	4770      	bx	lr

08009c18 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8009c18:	b480      	push	{r7}
 8009c1a:	af00      	add	r7, sp, #0
  return;
 8009c1c:	bf00      	nop
}
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr

08009c26 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8009c26:	b480      	push	{r7}
 8009c28:	af00      	add	r7, sp, #0
  return;
 8009c2a:	bf00      	nop
}
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8009c34:	b480      	push	{r7}
 8009c36:	af00      	add	r7, sp, #0
  return;
 8009c38:	bf00      	nop
}
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr

08009c42 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8009c42:	b480      	push	{r7}
 8009c44:	af00      	add	r7, sp, #0
  return;
 8009c46:	bf00      	nop
}
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8009c50:	b480      	push	{r7}
 8009c52:	af00      	add	r7, sp, #0
  return;
 8009c54:	bf00      	nop
}
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr

08009c5e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8009c5e:	b480      	push	{r7}
 8009c60:	af00      	add	r7, sp, #0
  return;
 8009c62:	bf00      	nop
}
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	af00      	add	r7, sp, #0
  return;
 8009c70:	bf00      	nop
}
 8009c72:	46bd      	mov	sp, r7
 8009c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c78:	4770      	bx	lr

08009c7a <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8009c7a:	b480      	push	{r7}
 8009c7c:	af00      	add	r7, sp, #0
  return;
 8009c7e:	bf00      	nop
}
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8009c88:	b480      	push	{r7}
 8009c8a:	af00      	add	r7, sp, #0
  return;
 8009c8c:	bf00      	nop
}
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8009c96:	b480      	push	{r7}
 8009c98:	af00      	add	r7, sp, #0
  return;
 8009c9a:	bf00      	nop
}
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	af00      	add	r7, sp, #0
  return;
 8009ca8:	bf00      	nop
}
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
	...

08009cb4 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8009cb8:	4b04      	ldr	r3, [pc, #16]	; (8009ccc <SVCCTL_Init+0x18>)
 8009cba:	2200      	movs	r2, #0
 8009cbc:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8009cbe:	4b04      	ldr	r3, [pc, #16]	; (8009cd0 <SVCCTL_Init+0x1c>)
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8009cc4:	f000 f806 	bl	8009cd4 <SVCCTL_SvcInit>

  return;
 8009cc8:	bf00      	nop
}
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	200000b0 	.word	0x200000b0
 8009cd0:	200000b8 	.word	0x200000b8

08009cd4 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	af00      	add	r7, sp, #0
  BAS_Init();
 8009cd8:	f7ff ff74 	bl	8009bc4 <BAS_Init>

  BLS_Init();
 8009cdc:	f7ff ff79 	bl	8009bd2 <BLS_Init>

  CRS_STM_Init();
 8009ce0:	f7ff ff7e 	bl	8009be0 <CRS_STM_Init>

  DIS_Init();
 8009ce4:	f7ff ff83 	bl	8009bee <DIS_Init>

  EDS_STM_Init();
 8009ce8:	f7ff ff88 	bl	8009bfc <EDS_STM_Init>

  HIDS_Init();
 8009cec:	f7ff ff8d 	bl	8009c0a <HIDS_Init>

  HRS_Init();
 8009cf0:	f7ff ff92 	bl	8009c18 <HRS_Init>

  HTS_Init();
 8009cf4:	f7ff ff97 	bl	8009c26 <HTS_Init>

  IAS_Init();
 8009cf8:	f7ff ff9c 	bl	8009c34 <IAS_Init>

  LLS_Init();
 8009cfc:	f7ff ffa1 	bl	8009c42 <LLS_Init>

  TPS_Init();
 8009d00:	f7ff ffa6 	bl	8009c50 <TPS_Init>

  MOTENV_STM_Init();
 8009d04:	f7ff ffab 	bl	8009c5e <MOTENV_STM_Init>

  P2PS_STM_Init();
 8009d08:	f7ff fe9a 	bl	8009a40 <P2PS_STM_Init>

  ZDD_STM_Init();
 8009d0c:	f7ff ffae 	bl	8009c6c <ZDD_STM_Init>

  OTAS_STM_Init();
 8009d10:	f7ff ffb3 	bl	8009c7a <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8009d14:	f7ff ffbf 	bl	8009c96 <BVOPUS_STM_Init>

  MESH_Init();
 8009d18:	f7ff ffb6 	bl	8009c88 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8009d1c:	f7ff ffc2 	bl	8009ca4 <SVCCTL_InitCustomSvc>
  
  return;
 8009d20:	bf00      	nop
}
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8009d2c:	4b09      	ldr	r3, [pc, #36]	; (8009d54 <SVCCTL_RegisterSvcHandler+0x30>)
 8009d2e:	791b      	ldrb	r3, [r3, #4]
 8009d30:	4619      	mov	r1, r3
 8009d32:	4a08      	ldr	r2, [pc, #32]	; (8009d54 <SVCCTL_RegisterSvcHandler+0x30>)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8009d3a:	4b06      	ldr	r3, [pc, #24]	; (8009d54 <SVCCTL_RegisterSvcHandler+0x30>)
 8009d3c:	791b      	ldrb	r3, [r3, #4]
 8009d3e:	3301      	adds	r3, #1
 8009d40:	b2da      	uxtb	r2, r3
 8009d42:	4b04      	ldr	r3, [pc, #16]	; (8009d54 <SVCCTL_RegisterSvcHandler+0x30>)
 8009d44:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8009d46:	bf00      	nop
}
 8009d48:	370c      	adds	r7, #12
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr
 8009d52:	bf00      	nop
 8009d54:	200000b0 	.word	0x200000b0

08009d58 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	3301      	adds	r3, #1
 8009d64:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8009d66:	2300      	movs	r3, #0
 8009d68:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	2bff      	cmp	r3, #255	; 0xff
 8009d70:	d125      	bne.n	8009dbe <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	3302      	adds	r3, #2
 8009d76:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	881b      	ldrh	r3, [r3, #0]
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009d82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d86:	d118      	bne.n	8009dba <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009d88:	2300      	movs	r3, #0
 8009d8a:	757b      	strb	r3, [r7, #21]
 8009d8c:	e00d      	b.n	8009daa <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8009d8e:	7d7b      	ldrb	r3, [r7, #21]
 8009d90:	4a1a      	ldr	r2, [pc, #104]	; (8009dfc <SVCCTL_UserEvtRx+0xa4>)
 8009d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	4798      	blx	r3
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8009d9e:	7dfb      	ldrb	r3, [r7, #23]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d108      	bne.n	8009db6 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009da4:	7d7b      	ldrb	r3, [r7, #21]
 8009da6:	3301      	adds	r3, #1
 8009da8:	757b      	strb	r3, [r7, #21]
 8009daa:	4b14      	ldr	r3, [pc, #80]	; (8009dfc <SVCCTL_UserEvtRx+0xa4>)
 8009dac:	791b      	ldrb	r3, [r3, #4]
 8009dae:	7d7a      	ldrb	r2, [r7, #21]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d3ec      	bcc.n	8009d8e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8009db4:	e002      	b.n	8009dbc <SVCCTL_UserEvtRx+0x64>
              break;
 8009db6:	bf00      	nop
          break;
 8009db8:	e000      	b.n	8009dbc <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8009dba:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8009dbc:	e000      	b.n	8009dc0 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8009dbe:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8009dc0:	7dfb      	ldrb	r3, [r7, #23]
 8009dc2:	2b02      	cmp	r3, #2
 8009dc4:	d00f      	beq.n	8009de6 <SVCCTL_UserEvtRx+0x8e>
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	dc10      	bgt.n	8009dec <SVCCTL_UserEvtRx+0x94>
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d002      	beq.n	8009dd4 <SVCCTL_UserEvtRx+0x7c>
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d006      	beq.n	8009de0 <SVCCTL_UserEvtRx+0x88>
 8009dd2:	e00b      	b.n	8009dec <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f001 fc8b 	bl	800b6f0 <SVCCTL_App_Notification>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	75bb      	strb	r3, [r7, #22]
      break;
 8009dde:	e008      	b.n	8009df2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009de0:	2301      	movs	r3, #1
 8009de2:	75bb      	strb	r3, [r7, #22]
      break;
 8009de4:	e005      	b.n	8009df2 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8009de6:	2300      	movs	r3, #0
 8009de8:	75bb      	strb	r3, [r7, #22]
      break;
 8009dea:	e002      	b.n	8009df2 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009dec:	2301      	movs	r3, #1
 8009dee:	75bb      	strb	r3, [r7, #22]
      break;
 8009df0:	bf00      	nop
  }

  return (return_status);
 8009df2:	7dbb      	ldrb	r3, [r7, #22]
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3718      	adds	r7, #24
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	200000b0 	.word	0x200000b0

08009e00 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b088      	sub	sp, #32
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009e08:	f107 030c 	add.w	r3, r7, #12
 8009e0c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	212e      	movs	r1, #46	; 0x2e
 8009e18:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8009e1c:	f000 fae8 	bl	800a3f0 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	330b      	adds	r3, #11
 8009e24:	78db      	ldrb	r3, [r3, #3]
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3720      	adds	r7, #32
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b088      	sub	sp, #32
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009e36:	f107 030c 	add.w	r3, r7, #12
 8009e3a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	210f      	movs	r1, #15
 8009e46:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8009e4a:	f000 fad1 	bl	800a3f0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009e4e:	69fb      	ldr	r3, [r7, #28]
 8009e50:	330b      	adds	r3, #11
 8009e52:	78db      	ldrb	r3, [r3, #3]
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3720      	adds	r7, #32
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b088      	sub	sp, #32
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009e64:	f107 030c 	add.w	r3, r7, #12
 8009e68:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	2110      	movs	r1, #16
 8009e70:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8009e74:	f000 fabc 	bl	800a3f0 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009e78:	69fb      	ldr	r3, [r7, #28]
 8009e7a:	330b      	adds	r3, #11
 8009e7c:	78db      	ldrb	r3, [r3, #3]
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3720      	adds	r7, #32
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
	...

08009e88 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b08b      	sub	sp, #44	; 0x2c
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009e90:	2300      	movs	r3, #0
 8009e92:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009e94:	2300      	movs	r3, #0
 8009e96:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8009eac:	2300      	movs	r3, #0
 8009eae:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009eb0:	4b4a      	ldr	r3, [pc, #296]	; (8009fdc <SHCI_GetWirelessFwInfo+0x154>)
 8009eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eb4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009eb8:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009ec2:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a44      	ldr	r2, [pc, #272]	; (8009fe0 <SHCI_GetWirelessFwInfo+0x158>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d10f      	bne.n	8009ef4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	695b      	ldr	r3, [r3, #20]
 8009ed8:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8009eda:	68bb      	ldr	r3, [r7, #8]
 8009edc:	699b      	ldr	r3, [r3, #24]
 8009ede:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	69db      	ldr	r3, [r3, #28]
 8009ee4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	68db      	ldr	r3, [r3, #12]
 8009eea:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	617b      	str	r3, [r7, #20]
 8009ef2:	e01a      	b.n	8009f2a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009efc:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009f00:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	695b      	ldr	r3, [r3, #20]
 8009f10:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	699b      	ldr	r3, [r3, #24]
 8009f18:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2c:	0e1b      	lsrs	r3, r3, #24
 8009f2e:	b2da      	uxtb	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f36:	0c1b      	lsrs	r3, r3, #16
 8009f38:	b2da      	uxtb	r2, r3
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f40:	0a1b      	lsrs	r3, r3, #8
 8009f42:	b2da      	uxtb	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4a:	091b      	lsrs	r3, r3, #4
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	f003 030f 	and.w	r3, r3, #15
 8009f52:	b2da      	uxtb	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	f003 030f 	and.w	r3, r3, #15
 8009f60:	b2da      	uxtb	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009f66:	6a3b      	ldr	r3, [r7, #32]
 8009f68:	0e1b      	lsrs	r3, r3, #24
 8009f6a:	b2da      	uxtb	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009f70:	6a3b      	ldr	r3, [r7, #32]
 8009f72:	0c1b      	lsrs	r3, r3, #16
 8009f74:	b2da      	uxtb	r2, r3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8009f7a:	6a3b      	ldr	r3, [r7, #32]
 8009f7c:	0a1b      	lsrs	r3, r3, #8
 8009f7e:	b2da      	uxtb	r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009f84:	6a3b      	ldr	r3, [r7, #32]
 8009f86:	b2da      	uxtb	r2, r3
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	b2da      	uxtb	r2, r3
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	0e1b      	lsrs	r3, r3, #24
 8009f98:	b2da      	uxtb	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009f9e:	69bb      	ldr	r3, [r7, #24]
 8009fa0:	0c1b      	lsrs	r3, r3, #16
 8009fa2:	b2da      	uxtb	r2, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	0a1b      	lsrs	r3, r3, #8
 8009fac:	b2da      	uxtb	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	0e1b      	lsrs	r3, r3, #24
 8009fb6:	b2da      	uxtb	r2, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	0c1b      	lsrs	r3, r3, #16
 8009fc0:	b2da      	uxtb	r2, r3
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	b2da      	uxtb	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	372c      	adds	r7, #44	; 0x2c
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	58004000 	.word	0x58004000
 8009fe0:	a94656b9 	.word	0xa94656b9

08009fe4 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	4a08      	ldr	r2, [pc, #32]	; (800a014 <hci_init+0x30>)
 8009ff4:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8009ff6:	4a08      	ldr	r2, [pc, #32]	; (800a018 <hci_init+0x34>)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8009ffc:	4806      	ldr	r0, [pc, #24]	; (800a018 <hci_init+0x34>)
 8009ffe:	f000 f979 	bl	800a2f4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4618      	mov	r0, r3
 800a008:	f000 f8da 	bl	800a1c0 <TlInit>

  return;
 800a00c:	bf00      	nop
}
 800a00e:	3708      	adds	r7, #8
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	2000054c 	.word	0x2000054c
 800a018:	20000524 	.word	0x20000524

0800a01c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a022:	4822      	ldr	r0, [pc, #136]	; (800a0ac <hci_user_evt_proc+0x90>)
 800a024:	f000 fde8 	bl	800abf8 <LST_is_empty>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d12b      	bne.n	800a086 <hci_user_evt_proc+0x6a>
 800a02e:	4b20      	ldr	r3, [pc, #128]	; (800a0b0 <hci_user_evt_proc+0x94>)
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d027      	beq.n	800a086 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a036:	f107 030c 	add.w	r3, r7, #12
 800a03a:	4619      	mov	r1, r3
 800a03c:	481b      	ldr	r0, [pc, #108]	; (800a0ac <hci_user_evt_proc+0x90>)
 800a03e:	f000 fe6a 	bl	800ad16 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800a042:	4b1c      	ldr	r3, [pc, #112]	; (800a0b4 <hci_user_evt_proc+0x98>)
 800a044:	69db      	ldr	r3, [r3, #28]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d00c      	beq.n	800a064 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800a04e:	2301      	movs	r3, #1
 800a050:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a052:	4b18      	ldr	r3, [pc, #96]	; (800a0b4 <hci_user_evt_proc+0x98>)
 800a054:	69db      	ldr	r3, [r3, #28]
 800a056:	1d3a      	adds	r2, r7, #4
 800a058:	4610      	mov	r0, r2
 800a05a:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800a05c:	793a      	ldrb	r2, [r7, #4]
 800a05e:	4b14      	ldr	r3, [pc, #80]	; (800a0b0 <hci_user_evt_proc+0x94>)
 800a060:	701a      	strb	r2, [r3, #0]
 800a062:	e002      	b.n	800a06a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a064:	4b12      	ldr	r3, [pc, #72]	; (800a0b0 <hci_user_evt_proc+0x94>)
 800a066:	2201      	movs	r2, #1
 800a068:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800a06a:	4b11      	ldr	r3, [pc, #68]	; (800a0b0 <hci_user_evt_proc+0x94>)
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d004      	beq.n	800a07c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	4618      	mov	r0, r3
 800a076:	f000 fc0d 	bl	800a894 <TL_MM_EvtDone>
 800a07a:	e004      	b.n	800a086 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	4619      	mov	r1, r3
 800a080:	480a      	ldr	r0, [pc, #40]	; (800a0ac <hci_user_evt_proc+0x90>)
 800a082:	f000 fddb 	bl	800ac3c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a086:	4809      	ldr	r0, [pc, #36]	; (800a0ac <hci_user_evt_proc+0x90>)
 800a088:	f000 fdb6 	bl	800abf8 <LST_is_empty>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d107      	bne.n	800a0a2 <hci_user_evt_proc+0x86>
 800a092:	4b07      	ldr	r3, [pc, #28]	; (800a0b0 <hci_user_evt_proc+0x94>)
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d003      	beq.n	800a0a2 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800a09a:	4804      	ldr	r0, [pc, #16]	; (800a0ac <hci_user_evt_proc+0x90>)
 800a09c:	f002 f910 	bl	800c2c0 <hci_notify_asynch_evt>
  }


  return;
 800a0a0:	bf00      	nop
 800a0a2:	bf00      	nop
}
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	200000c0 	.word	0x200000c0
 800a0b0:	200000cc 	.word	0x200000cc
 800a0b4:	20000524 	.word	0x20000524

0800a0b8 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b088      	sub	sp, #32
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	f000 f8d1 	bl	800a26c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	885b      	ldrh	r3, [r3, #2]
 800a0d2:	b21b      	sxth	r3, r3
 800a0d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0d8:	b21a      	sxth	r2, r3
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	881b      	ldrh	r3, [r3, #0]
 800a0de:	029b      	lsls	r3, r3, #10
 800a0e0:	b21b      	sxth	r3, r3
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	b21b      	sxth	r3, r3
 800a0e6:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800a0e8:	4b33      	ldr	r3, [pc, #204]	; (800a1b8 <hci_send_req+0x100>)
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	b2d9      	uxtb	r1, r3
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	689a      	ldr	r2, [r3, #8]
 800a0f8:	8bbb      	ldrh	r3, [r7, #28]
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f000 f890 	bl	800a220 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800a100:	e04e      	b.n	800a1a0 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800a102:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a106:	f002 f8f2 	bl	800c2ee <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a10a:	e043      	b.n	800a194 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800a10c:	f107 030c 	add.w	r3, r7, #12
 800a110:	4619      	mov	r1, r3
 800a112:	482a      	ldr	r0, [pc, #168]	; (800a1bc <hci_send_req+0x104>)
 800a114:	f000 fdff 	bl	800ad16 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	7a5b      	ldrb	r3, [r3, #9]
 800a11c:	2b0f      	cmp	r3, #15
 800a11e:	d114      	bne.n	800a14a <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	330b      	adds	r3, #11
 800a124:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	885b      	ldrh	r3, [r3, #2]
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	8bba      	ldrh	r2, [r7, #28]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d104      	bne.n	800a13c <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	693a      	ldr	r2, [r7, #16]
 800a138:	7812      	ldrb	r2, [r2, #0]
 800a13a:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	785b      	ldrb	r3, [r3, #1]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d027      	beq.n	800a194 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a144:	2301      	movs	r3, #1
 800a146:	77fb      	strb	r3, [r7, #31]
 800a148:	e024      	b.n	800a194 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	330b      	adds	r3, #11
 800a14e:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a156:	b29b      	uxth	r3, r3
 800a158:	8bba      	ldrh	r2, [r7, #28]
 800a15a:	429a      	cmp	r2, r3
 800a15c:	d114      	bne.n	800a188 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	7a9b      	ldrb	r3, [r3, #10]
 800a162:	3b03      	subs	r3, #3
 800a164:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	695a      	ldr	r2, [r3, #20]
 800a16a:	7dfb      	ldrb	r3, [r7, #23]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	bfa8      	it	ge
 800a170:	461a      	movge	r2, r3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6918      	ldr	r0, [r3, #16]
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	1cd9      	adds	r1, r3, #3
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	695b      	ldr	r3, [r3, #20]
 800a182:	461a      	mov	r2, r3
 800a184:	f003 f945 	bl	800d412 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d001      	beq.n	800a194 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a190:	2301      	movs	r3, #1
 800a192:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a194:	4809      	ldr	r0, [pc, #36]	; (800a1bc <hci_send_req+0x104>)
 800a196:	f000 fd2f 	bl	800abf8 <LST_is_empty>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d0b5      	beq.n	800a10c <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800a1a0:	7ffb      	ldrb	r3, [r7, #31]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d0ad      	beq.n	800a102 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800a1a6:	2001      	movs	r0, #1
 800a1a8:	f000 f860 	bl	800a26c <NotifyCmdStatus>

  return 0;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3720      	adds	r7, #32
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	20000550 	.word	0x20000550
 800a1bc:	20000544 	.word	0x20000544

0800a1c0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b086      	sub	sp, #24
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800a1c8:	480f      	ldr	r0, [pc, #60]	; (800a208 <TlInit+0x48>)
 800a1ca:	f000 fd05 	bl	800abd8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800a1ce:	4a0f      	ldr	r2, [pc, #60]	; (800a20c <TlInit+0x4c>)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800a1d4:	480e      	ldr	r0, [pc, #56]	; (800a210 <TlInit+0x50>)
 800a1d6:	f000 fcff 	bl	800abd8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a1da:	4b0e      	ldr	r3, [pc, #56]	; (800a214 <TlInit+0x54>)
 800a1dc:	2201      	movs	r2, #1
 800a1de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800a1e0:	4b0d      	ldr	r3, [pc, #52]	; (800a218 <TlInit+0x58>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d00a      	beq.n	800a1fe <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800a1ec:	4b0b      	ldr	r3, [pc, #44]	; (800a21c <TlInit+0x5c>)
 800a1ee:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800a1f0:	4b09      	ldr	r3, [pc, #36]	; (800a218 <TlInit+0x58>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f107 0208 	add.w	r2, r7, #8
 800a1f8:	4610      	mov	r0, r2
 800a1fa:	4798      	blx	r3
  }

  return;
 800a1fc:	bf00      	nop
 800a1fe:	bf00      	nop
}
 800a200:	3718      	adds	r7, #24
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	20000544 	.word	0x20000544
 800a20c:	200000c8 	.word	0x200000c8
 800a210:	200000c0 	.word	0x200000c0
 800a214:	200000cc 	.word	0x200000cc
 800a218:	20000524 	.word	0x20000524
 800a21c:	0800a2ad 	.word	0x0800a2ad

0800a220 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	4603      	mov	r3, r0
 800a228:	603a      	str	r2, [r7, #0]
 800a22a:	80fb      	strh	r3, [r7, #6]
 800a22c:	460b      	mov	r3, r1
 800a22e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800a230:	4b0c      	ldr	r3, [pc, #48]	; (800a264 <SendCmd+0x44>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	88fa      	ldrh	r2, [r7, #6]
 800a236:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800a23a:	4b0a      	ldr	r3, [pc, #40]	; (800a264 <SendCmd+0x44>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	797a      	ldrb	r2, [r7, #5]
 800a240:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800a242:	4b08      	ldr	r3, [pc, #32]	; (800a264 <SendCmd+0x44>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	330c      	adds	r3, #12
 800a248:	797a      	ldrb	r2, [r7, #5]
 800a24a:	6839      	ldr	r1, [r7, #0]
 800a24c:	4618      	mov	r0, r3
 800a24e:	f003 f8e0 	bl	800d412 <memcpy>

  hciContext.io.Send(0,0);
 800a252:	4b05      	ldr	r3, [pc, #20]	; (800a268 <SendCmd+0x48>)
 800a254:	691b      	ldr	r3, [r3, #16]
 800a256:	2100      	movs	r1, #0
 800a258:	2000      	movs	r0, #0
 800a25a:	4798      	blx	r3

  return;
 800a25c:	bf00      	nop
}
 800a25e:	3708      	adds	r7, #8
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	200000c8 	.word	0x200000c8
 800a268:	20000524 	.word	0x20000524

0800a26c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	4603      	mov	r3, r0
 800a274:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800a276:	79fb      	ldrb	r3, [r7, #7]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d108      	bne.n	800a28e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800a27c:	4b0a      	ldr	r3, [pc, #40]	; (800a2a8 <NotifyCmdStatus+0x3c>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00d      	beq.n	800a2a0 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800a284:	4b08      	ldr	r3, [pc, #32]	; (800a2a8 <NotifyCmdStatus+0x3c>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	2000      	movs	r0, #0
 800a28a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800a28c:	e008      	b.n	800a2a0 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800a28e:	4b06      	ldr	r3, [pc, #24]	; (800a2a8 <NotifyCmdStatus+0x3c>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d004      	beq.n	800a2a0 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800a296:	4b04      	ldr	r3, [pc, #16]	; (800a2a8 <NotifyCmdStatus+0x3c>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	2001      	movs	r0, #1
 800a29c:	4798      	blx	r3
  return;
 800a29e:	bf00      	nop
 800a2a0:	bf00      	nop
}
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	2000054c 	.word	0x2000054c

0800a2ac <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	7a5b      	ldrb	r3, [r3, #9]
 800a2b8:	2b0f      	cmp	r3, #15
 800a2ba:	d003      	beq.n	800a2c4 <TlEvtReceived+0x18>
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	7a5b      	ldrb	r3, [r3, #9]
 800a2c0:	2b0e      	cmp	r3, #14
 800a2c2:	d107      	bne.n	800a2d4 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800a2c4:	6879      	ldr	r1, [r7, #4]
 800a2c6:	4809      	ldr	r0, [pc, #36]	; (800a2ec <TlEvtReceived+0x40>)
 800a2c8:	f000 fcde 	bl	800ac88 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800a2cc:	2000      	movs	r0, #0
 800a2ce:	f002 f803 	bl	800c2d8 <hci_cmd_resp_release>
 800a2d2:	e006      	b.n	800a2e2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800a2d4:	6879      	ldr	r1, [r7, #4]
 800a2d6:	4806      	ldr	r0, [pc, #24]	; (800a2f0 <TlEvtReceived+0x44>)
 800a2d8:	f000 fcd6 	bl	800ac88 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a2dc:	4804      	ldr	r0, [pc, #16]	; (800a2f0 <TlEvtReceived+0x44>)
 800a2de:	f001 ffef 	bl	800c2c0 <hci_notify_asynch_evt>
  }

  return;
 800a2e2:	bf00      	nop
}
 800a2e4:	3708      	adds	r7, #8
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	20000544 	.word	0x20000544
 800a2f0:	200000c0 	.word	0x200000c0

0800a2f4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a05      	ldr	r2, [pc, #20]	; (800a314 <hci_register_io_bus+0x20>)
 800a300:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	4a04      	ldr	r2, [pc, #16]	; (800a318 <hci_register_io_bus+0x24>)
 800a306:	611a      	str	r2, [r3, #16]

  return;
 800a308:	bf00      	nop
}
 800a30a:	370c      	adds	r7, #12
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr
 800a314:	0800a60d 	.word	0x0800a60d
 800a318:	0800a675 	.word	0x0800a675

0800a31c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	4a08      	ldr	r2, [pc, #32]	; (800a34c <shci_init+0x30>)
 800a32c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800a32e:	4a08      	ldr	r2, [pc, #32]	; (800a350 <shci_init+0x34>)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800a334:	4806      	ldr	r0, [pc, #24]	; (800a350 <shci_init+0x34>)
 800a336:	f000 f915 	bl	800a564 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4618      	mov	r0, r3
 800a340:	f000 f898 	bl	800a474 <TlInit>

  return;
 800a344:	bf00      	nop
}
 800a346:	3708      	adds	r7, #8
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	20000574 	.word	0x20000574
 800a350:	20000554 	.word	0x20000554

0800a354 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a35a:	4822      	ldr	r0, [pc, #136]	; (800a3e4 <shci_user_evt_proc+0x90>)
 800a35c:	f000 fc4c 	bl	800abf8 <LST_is_empty>
 800a360:	4603      	mov	r3, r0
 800a362:	2b00      	cmp	r3, #0
 800a364:	d12b      	bne.n	800a3be <shci_user_evt_proc+0x6a>
 800a366:	4b20      	ldr	r3, [pc, #128]	; (800a3e8 <shci_user_evt_proc+0x94>)
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d027      	beq.n	800a3be <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a36e:	f107 030c 	add.w	r3, r7, #12
 800a372:	4619      	mov	r1, r3
 800a374:	481b      	ldr	r0, [pc, #108]	; (800a3e4 <shci_user_evt_proc+0x90>)
 800a376:	f000 fcce 	bl	800ad16 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800a37a:	4b1c      	ldr	r3, [pc, #112]	; (800a3ec <shci_user_evt_proc+0x98>)
 800a37c:	69db      	ldr	r3, [r3, #28]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d00c      	beq.n	800a39c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800a386:	2301      	movs	r3, #1
 800a388:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a38a:	4b18      	ldr	r3, [pc, #96]	; (800a3ec <shci_user_evt_proc+0x98>)
 800a38c:	69db      	ldr	r3, [r3, #28]
 800a38e:	1d3a      	adds	r2, r7, #4
 800a390:	4610      	mov	r0, r2
 800a392:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800a394:	793a      	ldrb	r2, [r7, #4]
 800a396:	4b14      	ldr	r3, [pc, #80]	; (800a3e8 <shci_user_evt_proc+0x94>)
 800a398:	701a      	strb	r2, [r3, #0]
 800a39a:	e002      	b.n	800a3a2 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a39c:	4b12      	ldr	r3, [pc, #72]	; (800a3e8 <shci_user_evt_proc+0x94>)
 800a39e:	2201      	movs	r2, #1
 800a3a0:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800a3a2:	4b11      	ldr	r3, [pc, #68]	; (800a3e8 <shci_user_evt_proc+0x94>)
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d004      	beq.n	800a3b4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f000 fa71 	bl	800a894 <TL_MM_EvtDone>
 800a3b2:	e004      	b.n	800a3be <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	480a      	ldr	r0, [pc, #40]	; (800a3e4 <shci_user_evt_proc+0x90>)
 800a3ba:	f000 fc3f 	bl	800ac3c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a3be:	4809      	ldr	r0, [pc, #36]	; (800a3e4 <shci_user_evt_proc+0x90>)
 800a3c0:	f000 fc1a 	bl	800abf8 <LST_is_empty>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d107      	bne.n	800a3da <shci_user_evt_proc+0x86>
 800a3ca:	4b07      	ldr	r3, [pc, #28]	; (800a3e8 <shci_user_evt_proc+0x94>)
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d003      	beq.n	800a3da <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800a3d2:	4804      	ldr	r0, [pc, #16]	; (800a3e4 <shci_user_evt_proc+0x90>)
 800a3d4:	f7f7 f8bf 	bl	8001556 <shci_notify_asynch_evt>
  }


  return;
 800a3d8:	bf00      	nop
 800a3da:	bf00      	nop
}
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	200000d0 	.word	0x200000d0
 800a3e8:	200000e0 	.word	0x200000e0
 800a3ec:	20000554 	.word	0x20000554

0800a3f0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	60ba      	str	r2, [r7, #8]
 800a3f8:	607b      	str	r3, [r7, #4]
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	81fb      	strh	r3, [r7, #14]
 800a3fe:	460b      	mov	r3, r1
 800a400:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800a402:	2000      	movs	r0, #0
 800a404:	f000 f868 	bl	800a4d8 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800a408:	4b17      	ldr	r3, [pc, #92]	; (800a468 <shci_send+0x78>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	89fa      	ldrh	r2, [r7, #14]
 800a40e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800a412:	4b15      	ldr	r3, [pc, #84]	; (800a468 <shci_send+0x78>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	7b7a      	ldrb	r2, [r7, #13]
 800a418:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800a41a:	4b13      	ldr	r3, [pc, #76]	; (800a468 <shci_send+0x78>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	330c      	adds	r3, #12
 800a420:	7b7a      	ldrb	r2, [r7, #13]
 800a422:	68b9      	ldr	r1, [r7, #8]
 800a424:	4618      	mov	r0, r3
 800a426:	f002 fff4 	bl	800d412 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800a42a:	4b10      	ldr	r3, [pc, #64]	; (800a46c <shci_send+0x7c>)
 800a42c:	2201      	movs	r2, #1
 800a42e:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800a430:	4b0f      	ldr	r3, [pc, #60]	; (800a470 <shci_send+0x80>)
 800a432:	691b      	ldr	r3, [r3, #16]
 800a434:	2100      	movs	r1, #0
 800a436:	2000      	movs	r0, #0
 800a438:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800a43a:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a43e:	f7f7 f8a1 	bl	8001584 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f103 0008 	add.w	r0, r3, #8
 800a448:	4b07      	ldr	r3, [pc, #28]	; (800a468 <shci_send+0x78>)
 800a44a:	6819      	ldr	r1, [r3, #0]
 800a44c:	4b06      	ldr	r3, [pc, #24]	; (800a468 <shci_send+0x78>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	789b      	ldrb	r3, [r3, #2]
 800a452:	3303      	adds	r3, #3
 800a454:	461a      	mov	r2, r3
 800a456:	f002 ffdc 	bl	800d412 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a45a:	2001      	movs	r0, #1
 800a45c:	f000 f83c 	bl	800a4d8 <Cmd_SetStatus>

  return;
 800a460:	bf00      	nop
}
 800a462:	3710      	adds	r7, #16
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	200000dc 	.word	0x200000dc
 800a46c:	20000578 	.word	0x20000578
 800a470:	20000554 	.word	0x20000554

0800a474 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b086      	sub	sp, #24
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a47c:	4a10      	ldr	r2, [pc, #64]	; (800a4c0 <TlInit+0x4c>)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a482:	4810      	ldr	r0, [pc, #64]	; (800a4c4 <TlInit+0x50>)
 800a484:	f000 fba8 	bl	800abd8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a488:	2001      	movs	r0, #1
 800a48a:	f000 f825 	bl	800a4d8 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a48e:	4b0e      	ldr	r3, [pc, #56]	; (800a4c8 <TlInit+0x54>)
 800a490:	2201      	movs	r2, #1
 800a492:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a494:	4b0d      	ldr	r3, [pc, #52]	; (800a4cc <TlInit+0x58>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d00c      	beq.n	800a4b6 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a4a0:	4b0b      	ldr	r3, [pc, #44]	; (800a4d0 <TlInit+0x5c>)
 800a4a2:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a4a4:	4b0b      	ldr	r3, [pc, #44]	; (800a4d4 <TlInit+0x60>)
 800a4a6:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a4a8:	4b08      	ldr	r3, [pc, #32]	; (800a4cc <TlInit+0x58>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f107 020c 	add.w	r2, r7, #12
 800a4b0:	4610      	mov	r0, r2
 800a4b2:	4798      	blx	r3
  }

  return;
 800a4b4:	bf00      	nop
 800a4b6:	bf00      	nop
}
 800a4b8:	3718      	adds	r7, #24
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	200000dc 	.word	0x200000dc
 800a4c4:	200000d0 	.word	0x200000d0
 800a4c8:	200000e0 	.word	0x200000e0
 800a4cc:	20000554 	.word	0x20000554
 800a4d0:	0800a529 	.word	0x0800a529
 800a4d4:	0800a541 	.word	0x0800a541

0800a4d8 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	4603      	mov	r3, r0
 800a4e0:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a4e2:	79fb      	ldrb	r3, [r7, #7]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d10b      	bne.n	800a500 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a4e8:	4b0d      	ldr	r3, [pc, #52]	; (800a520 <Cmd_SetStatus+0x48>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d003      	beq.n	800a4f8 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a4f0:	4b0b      	ldr	r3, [pc, #44]	; (800a520 <Cmd_SetStatus+0x48>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2000      	movs	r0, #0
 800a4f6:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a4f8:	4b0a      	ldr	r3, [pc, #40]	; (800a524 <Cmd_SetStatus+0x4c>)
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a4fe:	e00b      	b.n	800a518 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a500:	4b08      	ldr	r3, [pc, #32]	; (800a524 <Cmd_SetStatus+0x4c>)
 800a502:	2201      	movs	r2, #1
 800a504:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a506:	4b06      	ldr	r3, [pc, #24]	; (800a520 <Cmd_SetStatus+0x48>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d004      	beq.n	800a518 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a50e:	4b04      	ldr	r3, [pc, #16]	; (800a520 <Cmd_SetStatus+0x48>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	2001      	movs	r0, #1
 800a514:	4798      	blx	r3
  return;
 800a516:	bf00      	nop
 800a518:	bf00      	nop
}
 800a51a:	3708      	adds	r7, #8
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	20000574 	.word	0x20000574
 800a524:	200000d8 	.word	0x200000d8

0800a528 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a530:	2000      	movs	r0, #0
 800a532:	f7f7 f81c 	bl	800156e <shci_cmd_resp_release>

  return;
 800a536:	bf00      	nop
}
 800a538:	3708      	adds	r7, #8
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
	...

0800a540 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a548:	6879      	ldr	r1, [r7, #4]
 800a54a:	4805      	ldr	r0, [pc, #20]	; (800a560 <TlUserEvtReceived+0x20>)
 800a54c:	f000 fb9c 	bl	800ac88 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a550:	4803      	ldr	r0, [pc, #12]	; (800a560 <TlUserEvtReceived+0x20>)
 800a552:	f7f7 f800 	bl	8001556 <shci_notify_asynch_evt>

  return;
 800a556:	bf00      	nop
}
 800a558:	3708      	adds	r7, #8
 800a55a:	46bd      	mov	sp, r7
 800a55c:	bd80      	pop	{r7, pc}
 800a55e:	bf00      	nop
 800a560:	200000d0 	.word	0x200000d0

0800a564 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	4a05      	ldr	r2, [pc, #20]	; (800a584 <shci_register_io_bus+0x20>)
 800a570:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	4a04      	ldr	r2, [pc, #16]	; (800a588 <shci_register_io_bus+0x24>)
 800a576:	611a      	str	r2, [r3, #16]

  return;
 800a578:	bf00      	nop
}
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr
 800a584:	0800a721 	.word	0x0800a721
 800a588:	0800a775 	.word	0x0800a775

0800a58c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a590:	f002 f968 	bl	800c864 <HW_IPCC_Enable>

  return;
 800a594:	bf00      	nop
}
 800a596:	bd80      	pop	{r7, pc}

0800a598 <TL_Init>:


void TL_Init( void )
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a59c:	4b10      	ldr	r3, [pc, #64]	; (800a5e0 <TL_Init+0x48>)
 800a59e:	4a11      	ldr	r2, [pc, #68]	; (800a5e4 <TL_Init+0x4c>)
 800a5a0:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a5a2:	4b0f      	ldr	r3, [pc, #60]	; (800a5e0 <TL_Init+0x48>)
 800a5a4:	4a10      	ldr	r2, [pc, #64]	; (800a5e8 <TL_Init+0x50>)
 800a5a6:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a5a8:	4b0d      	ldr	r3, [pc, #52]	; (800a5e0 <TL_Init+0x48>)
 800a5aa:	4a10      	ldr	r2, [pc, #64]	; (800a5ec <TL_Init+0x54>)
 800a5ac:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a5ae:	4b0c      	ldr	r3, [pc, #48]	; (800a5e0 <TL_Init+0x48>)
 800a5b0:	4a0f      	ldr	r2, [pc, #60]	; (800a5f0 <TL_Init+0x58>)
 800a5b2:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800a5b4:	4b0a      	ldr	r3, [pc, #40]	; (800a5e0 <TL_Init+0x48>)
 800a5b6:	4a0f      	ldr	r2, [pc, #60]	; (800a5f4 <TL_Init+0x5c>)
 800a5b8:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a5ba:	4b09      	ldr	r3, [pc, #36]	; (800a5e0 <TL_Init+0x48>)
 800a5bc:	4a0e      	ldr	r2, [pc, #56]	; (800a5f8 <TL_Init+0x60>)
 800a5be:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a5c0:	4b07      	ldr	r3, [pc, #28]	; (800a5e0 <TL_Init+0x48>)
 800a5c2:	4a0e      	ldr	r2, [pc, #56]	; (800a5fc <TL_Init+0x64>)
 800a5c4:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a5c6:	4b06      	ldr	r3, [pc, #24]	; (800a5e0 <TL_Init+0x48>)
 800a5c8:	4a0d      	ldr	r2, [pc, #52]	; (800a600 <TL_Init+0x68>)
 800a5ca:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a5cc:	4b04      	ldr	r3, [pc, #16]	; (800a5e0 <TL_Init+0x48>)
 800a5ce:	4a0d      	ldr	r2, [pc, #52]	; (800a604 <TL_Init+0x6c>)
 800a5d0:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a5d2:	4b03      	ldr	r3, [pc, #12]	; (800a5e0 <TL_Init+0x48>)
 800a5d4:	4a0c      	ldr	r2, [pc, #48]	; (800a608 <TL_Init+0x70>)
 800a5d6:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a5d8:	f002 f958 	bl	800c88c <HW_IPCC_Init>

  return;
 800a5dc:	bf00      	nop
}
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	20030000 	.word	0x20030000
 800a5e4:	20030028 	.word	0x20030028
 800a5e8:	20030048 	.word	0x20030048
 800a5ec:	20030058 	.word	0x20030058
 800a5f0:	20030068 	.word	0x20030068
 800a5f4:	20030070 	.word	0x20030070
 800a5f8:	20030078 	.word	0x20030078
 800a5fc:	20030080 	.word	0x20030080
 800a600:	2003009c 	.word	0x2003009c
 800a604:	200300a0 	.word	0x200300a0
 800a608:	200300ac 	.word	0x200300ac

0800a60c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800a618:	4811      	ldr	r0, [pc, #68]	; (800a660 <TL_BLE_Init+0x54>)
 800a61a:	f000 fadd 	bl	800abd8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800a61e:	4b11      	ldr	r3, [pc, #68]	; (800a664 <TL_BLE_Init+0x58>)
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	689a      	ldr	r2, [r3, #8]
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	68da      	ldr	r2, [r3, #12]
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	4a0c      	ldr	r2, [pc, #48]	; (800a668 <TL_BLE_Init+0x5c>)
 800a638:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	4a08      	ldr	r2, [pc, #32]	; (800a660 <TL_BLE_Init+0x54>)
 800a63e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800a640:	f002 f93a 	bl	800c8b8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a08      	ldr	r2, [pc, #32]	; (800a66c <TL_BLE_Init+0x60>)
 800a64a:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	4a07      	ldr	r2, [pc, #28]	; (800a670 <TL_BLE_Init+0x64>)
 800a652:	6013      	str	r3, [r2, #0]

  return 0;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	200300c8 	.word	0x200300c8
 800a664:	20030000 	.word	0x20030000
 800a668:	20030a58 	.word	0x20030a58
 800a66c:	20000584 	.word	0x20000584
 800a670:	20000588 	.word	0x20000588

0800a674 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	460b      	mov	r3, r1
 800a67e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800a680:	4b09      	ldr	r3, [pc, #36]	; (800a6a8 <TL_BLE_SendCmd+0x34>)
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2201      	movs	r2, #1
 800a688:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800a68a:	4b07      	ldr	r3, [pc, #28]	; (800a6a8 <TL_BLE_SendCmd+0x34>)
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4619      	mov	r1, r3
 800a692:	2001      	movs	r0, #1
 800a694:	f000 f96c 	bl	800a970 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800a698:	f002 f918 	bl	800c8cc <HW_IPCC_BLE_SendCmd>

  return 0;
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3708      	adds	r7, #8
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	20030000 	.word	0x20030000

0800a6ac <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a6b2:	e01c      	b.n	800a6ee <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a6b4:	1d3b      	adds	r3, r7, #4
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	4812      	ldr	r0, [pc, #72]	; (800a704 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a6ba:	f000 fb2c 	bl	800ad16 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	7a5b      	ldrb	r3, [r3, #9]
 800a6c2:	2b0f      	cmp	r3, #15
 800a6c4:	d003      	beq.n	800a6ce <HW_IPCC_BLE_RxEvtNot+0x22>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	7a5b      	ldrb	r3, [r3, #9]
 800a6ca:	2b0e      	cmp	r3, #14
 800a6cc:	d105      	bne.n	800a6da <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	2002      	movs	r0, #2
 800a6d4:	f000 f94c 	bl	800a970 <OutputDbgTrace>
 800a6d8:	e004      	b.n	800a6e4 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4619      	mov	r1, r3
 800a6de:	2003      	movs	r0, #3
 800a6e0:	f000 f946 	bl	800a970 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a6e4:	4b08      	ldr	r3, [pc, #32]	; (800a708 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	687a      	ldr	r2, [r7, #4]
 800a6ea:	4610      	mov	r0, r2
 800a6ec:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a6ee:	4805      	ldr	r0, [pc, #20]	; (800a704 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a6f0:	f000 fa82 	bl	800abf8 <LST_is_empty>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d0dc      	beq.n	800a6b4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a6fa:	bf00      	nop
}
 800a6fc:	3708      	adds	r7, #8
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	200300c8 	.word	0x200300c8
 800a708:	20000584 	.word	0x20000584

0800a70c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a710:	4b02      	ldr	r3, [pc, #8]	; (800a71c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	4798      	blx	r3

  return;
 800a716:	bf00      	nop
}
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	20000588 	.word	0x20000588

0800a720 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800a72c:	480d      	ldr	r0, [pc, #52]	; (800a764 <TL_SYS_Init+0x44>)
 800a72e:	f000 fa53 	bl	800abd8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800a732:	4b0d      	ldr	r3, [pc, #52]	; (800a768 <TL_SYS_Init+0x48>)
 800a734:	68db      	ldr	r3, [r3, #12]
 800a736:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	689a      	ldr	r2, [r3, #8]
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	4a08      	ldr	r2, [pc, #32]	; (800a764 <TL_SYS_Init+0x44>)
 800a744:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800a746:	f002 f8e3 	bl	800c910 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a07      	ldr	r2, [pc, #28]	; (800a76c <TL_SYS_Init+0x4c>)
 800a750:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	4a06      	ldr	r2, [pc, #24]	; (800a770 <TL_SYS_Init+0x50>)
 800a758:	6013      	str	r3, [r2, #0]

  return 0;
 800a75a:	2300      	movs	r3, #0
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3710      	adds	r7, #16
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	200300d0 	.word	0x200300d0
 800a768:	20030000 	.word	0x20030000
 800a76c:	2000058c 	.word	0x2000058c
 800a770:	20000590 	.word	0x20000590

0800a774 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	460b      	mov	r3, r1
 800a77e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800a780:	4b09      	ldr	r3, [pc, #36]	; (800a7a8 <TL_SYS_SendCmd+0x34>)
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	2210      	movs	r2, #16
 800a788:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800a78a:	4b07      	ldr	r3, [pc, #28]	; (800a7a8 <TL_SYS_SendCmd+0x34>)
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4619      	mov	r1, r3
 800a792:	2004      	movs	r0, #4
 800a794:	f000 f8ec 	bl	800a970 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800a798:	f002 f8c4 	bl	800c924 <HW_IPCC_SYS_SendCmd>

  return 0;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3708      	adds	r7, #8
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	20030000 	.word	0x20030000

0800a7ac <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a7b0:	4b07      	ldr	r3, [pc, #28]	; (800a7d0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4619      	mov	r1, r3
 800a7b8:	2005      	movs	r0, #5
 800a7ba:	f000 f8d9 	bl	800a970 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a7be:	4b05      	ldr	r3, [pc, #20]	; (800a7d4 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a03      	ldr	r2, [pc, #12]	; (800a7d0 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a7c4:	68d2      	ldr	r2, [r2, #12]
 800a7c6:	6812      	ldr	r2, [r2, #0]
 800a7c8:	4610      	mov	r0, r2
 800a7ca:	4798      	blx	r3

  return;
 800a7cc:	bf00      	nop
}
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	20030000 	.word	0x20030000
 800a7d4:	2000058c 	.word	0x2000058c

0800a7d8 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a7de:	e00e      	b.n	800a7fe <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800a7e0:	1d3b      	adds	r3, r7, #4
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	480b      	ldr	r0, [pc, #44]	; (800a814 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a7e6:	f000 fa96 	bl	800ad16 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	2006      	movs	r0, #6
 800a7f0:	f000 f8be 	bl	800a970 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800a7f4:	4b08      	ldr	r3, [pc, #32]	; (800a818 <HW_IPCC_SYS_EvtNot+0x40>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	4610      	mov	r0, r2
 800a7fc:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a7fe:	4805      	ldr	r0, [pc, #20]	; (800a814 <HW_IPCC_SYS_EvtNot+0x3c>)
 800a800:	f000 f9fa 	bl	800abf8 <LST_is_empty>
 800a804:	4603      	mov	r3, r0
 800a806:	2b00      	cmp	r3, #0
 800a808:	d0ea      	beq.n	800a7e0 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800a80a:	bf00      	nop
}
 800a80c:	3708      	adds	r7, #8
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	200300d0 	.word	0x200300d0
 800a818:	20000590 	.word	0x20000590

0800a81c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800a824:	4817      	ldr	r0, [pc, #92]	; (800a884 <TL_MM_Init+0x68>)
 800a826:	f000 f9d7 	bl	800abd8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800a82a:	4817      	ldr	r0, [pc, #92]	; (800a888 <TL_MM_Init+0x6c>)
 800a82c:	f000 f9d4 	bl	800abd8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800a830:	4b16      	ldr	r3, [pc, #88]	; (800a88c <TL_MM_Init+0x70>)
 800a832:	691b      	ldr	r3, [r3, #16]
 800a834:	4a16      	ldr	r2, [pc, #88]	; (800a890 <TL_MM_Init+0x74>)
 800a836:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800a838:	4b15      	ldr	r3, [pc, #84]	; (800a890 <TL_MM_Init+0x74>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	6892      	ldr	r2, [r2, #8]
 800a840:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800a842:	4b13      	ldr	r3, [pc, #76]	; (800a890 <TL_MM_Init+0x74>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	68d2      	ldr	r2, [r2, #12]
 800a84a:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800a84c:	4b10      	ldr	r3, [pc, #64]	; (800a890 <TL_MM_Init+0x74>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a0c      	ldr	r2, [pc, #48]	; (800a884 <TL_MM_Init+0x68>)
 800a852:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800a854:	4b0e      	ldr	r3, [pc, #56]	; (800a890 <TL_MM_Init+0x74>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	687a      	ldr	r2, [r7, #4]
 800a85a:	6812      	ldr	r2, [r2, #0]
 800a85c:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800a85e:	4b0c      	ldr	r3, [pc, #48]	; (800a890 <TL_MM_Init+0x74>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	6852      	ldr	r2, [r2, #4]
 800a866:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800a868:	4b09      	ldr	r3, [pc, #36]	; (800a890 <TL_MM_Init+0x74>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	6912      	ldr	r2, [r2, #16]
 800a870:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800a872:	4b07      	ldr	r3, [pc, #28]	; (800a890 <TL_MM_Init+0x74>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	6952      	ldr	r2, [r2, #20]
 800a87a:	619a      	str	r2, [r3, #24]

  return;
 800a87c:	bf00      	nop
}
 800a87e:	3708      	adds	r7, #8
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}
 800a884:	200300b8 	.word	0x200300b8
 800a888:	2000057c 	.word	0x2000057c
 800a88c:	20030000 	.word	0x20030000
 800a890:	20000594 	.word	0x20000594

0800a894 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800a89c:	6879      	ldr	r1, [r7, #4]
 800a89e:	4807      	ldr	r0, [pc, #28]	; (800a8bc <TL_MM_EvtDone+0x28>)
 800a8a0:	f000 f9f2 	bl	800ac88 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800a8a4:	6879      	ldr	r1, [r7, #4]
 800a8a6:	2000      	movs	r0, #0
 800a8a8:	f000 f862 	bl	800a970 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800a8ac:	4804      	ldr	r0, [pc, #16]	; (800a8c0 <TL_MM_EvtDone+0x2c>)
 800a8ae:	f002 f85f 	bl	800c970 <HW_IPCC_MM_SendFreeBuf>

  return;
 800a8b2:	bf00      	nop
}
 800a8b4:	3708      	adds	r7, #8
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop
 800a8bc:	2000057c 	.word	0x2000057c
 800a8c0:	0800a8c5 	.word	0x0800a8c5

0800a8c4 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a8ca:	e00c      	b.n	800a8e6 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800a8cc:	1d3b      	adds	r3, r7, #4
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	480a      	ldr	r0, [pc, #40]	; (800a8fc <SendFreeBuf+0x38>)
 800a8d2:	f000 fa20 	bl	800ad16 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800a8d6:	4b0a      	ldr	r3, [pc, #40]	; (800a900 <SendFreeBuf+0x3c>)
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	691b      	ldr	r3, [r3, #16]
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	4611      	mov	r1, r2
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f000 f9d1 	bl	800ac88 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a8e6:	4805      	ldr	r0, [pc, #20]	; (800a8fc <SendFreeBuf+0x38>)
 800a8e8:	f000 f986 	bl	800abf8 <LST_is_empty>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d0ec      	beq.n	800a8cc <SendFreeBuf+0x8>
  }

  return;
 800a8f2:	bf00      	nop
}
 800a8f4:	3708      	adds	r7, #8
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	2000057c 	.word	0x2000057c
 800a900:	20030000 	.word	0x20030000

0800a904 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800a904:	b580      	push	{r7, lr}
 800a906:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800a908:	4805      	ldr	r0, [pc, #20]	; (800a920 <TL_TRACES_Init+0x1c>)
 800a90a:	f000 f965 	bl	800abd8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800a90e:	4b05      	ldr	r3, [pc, #20]	; (800a924 <TL_TRACES_Init+0x20>)
 800a910:	695b      	ldr	r3, [r3, #20]
 800a912:	4a03      	ldr	r2, [pc, #12]	; (800a920 <TL_TRACES_Init+0x1c>)
 800a914:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800a916:	f002 f861 	bl	800c9dc <HW_IPCC_TRACES_Init>

  return;
 800a91a:	bf00      	nop
}
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	200300c0 	.word	0x200300c0
 800a924:	20030000 	.word	0x20030000

0800a928 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a92e:	e008      	b.n	800a942 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800a930:	1d3b      	adds	r3, r7, #4
 800a932:	4619      	mov	r1, r3
 800a934:	4808      	ldr	r0, [pc, #32]	; (800a958 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a936:	f000 f9ee 	bl	800ad16 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4618      	mov	r0, r3
 800a93e:	f000 f80d 	bl	800a95c <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a942:	4805      	ldr	r0, [pc, #20]	; (800a958 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a944:	f000 f958 	bl	800abf8 <LST_is_empty>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d0f0      	beq.n	800a930 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800a94e:	bf00      	nop
}
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	200300c0 	.word	0x200300c0

0800a95c <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800a970:	b480      	push	{r7}
 800a972:	b085      	sub	sp, #20
 800a974:	af00      	add	r7, sp, #0
 800a976:	4603      	mov	r3, r0
 800a978:	6039      	str	r1, [r7, #0]
 800a97a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800a97c:	79fb      	ldrb	r3, [r7, #7]
 800a97e:	2b06      	cmp	r3, #6
 800a980:	d845      	bhi.n	800aa0e <OutputDbgTrace+0x9e>
 800a982:	a201      	add	r2, pc, #4	; (adr r2, 800a988 <OutputDbgTrace+0x18>)
 800a984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a988:	0800a9a5 	.word	0x0800a9a5
 800a98c:	0800a9c9 	.word	0x0800a9c9
 800a990:	0800a9cf 	.word	0x0800a9cf
 800a994:	0800a9e3 	.word	0x0800a9e3
 800a998:	0800a9ef 	.word	0x0800a9ef
 800a99c:	0800a9f5 	.word	0x0800a9f5
 800a9a0:	0800aa03 	.word	0x0800aa03
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	7a5b      	ldrb	r3, [r3, #9]
 800a9ac:	2bff      	cmp	r3, #255	; 0xff
 800a9ae:	d005      	beq.n	800a9bc <OutputDbgTrace+0x4c>
 800a9b0:	2bff      	cmp	r3, #255	; 0xff
 800a9b2:	dc05      	bgt.n	800a9c0 <OutputDbgTrace+0x50>
 800a9b4:	2b0e      	cmp	r3, #14
 800a9b6:	d005      	beq.n	800a9c4 <OutputDbgTrace+0x54>
 800a9b8:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800a9ba:	e001      	b.n	800a9c0 <OutputDbgTrace+0x50>
          break;
 800a9bc:	bf00      	nop
 800a9be:	e027      	b.n	800aa10 <OutputDbgTrace+0xa0>
          break;
 800a9c0:	bf00      	nop
 800a9c2:	e025      	b.n	800aa10 <OutputDbgTrace+0xa0>
          break;
 800a9c4:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800a9c6:	e023      	b.n	800aa10 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a9cc:	e020      	b.n	800aa10 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	7a5b      	ldrb	r3, [r3, #9]
 800a9d6:	2b0e      	cmp	r3, #14
 800a9d8:	d001      	beq.n	800a9de <OutputDbgTrace+0x6e>
 800a9da:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a9dc:	e000      	b.n	800a9e0 <OutputDbgTrace+0x70>
          break;
 800a9de:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a9e0:	e016      	b.n	800aa10 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	7a5b      	ldrb	r3, [r3, #9]
 800a9ea:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a9ec:	e010      	b.n	800aa10 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a9f2:	e00d      	b.n	800aa10 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	7a5b      	ldrb	r3, [r3, #9]
 800a9fc:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a9fe:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800aa00:	e006      	b.n	800aa10 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	7a5b      	ldrb	r3, [r3, #9]
 800aa0a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800aa0c:	e000      	b.n	800aa10 <OutputDbgTrace+0xa0>

    default:
      break;
 800aa0e:	bf00      	nop
  }

  return;
 800aa10:	bf00      	nop
}
 800aa12:	3714      	adds	r7, #20
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b086      	sub	sp, #24
 800aa20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa22:	f3ef 8310 	mrs	r3, PRIMASK
 800aa26:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa28:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800aa2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa2c:	b672      	cpsid	i
}
 800aa2e:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800aa30:	1cbb      	adds	r3, r7, #2
 800aa32:	4619      	mov	r1, r3
 800aa34:	4812      	ldr	r0, [pc, #72]	; (800aa80 <DbgTrace_TxCpltCallback+0x64>)
 800aa36:	f000 fbe6 	bl	800b206 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800aa3a:	1cbb      	adds	r3, r7, #2
 800aa3c:	4619      	mov	r1, r3
 800aa3e:	4810      	ldr	r0, [pc, #64]	; (800aa80 <DbgTrace_TxCpltCallback+0x64>)
 800aa40:	f000 fcd2 	bl	800b3e8 <CircularQueue_Sense>
 800aa44:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00c      	beq.n	800aa66 <DbgTrace_TxCpltCallback+0x4a>
 800aa4c:	697b      	ldr	r3, [r7, #20]
 800aa4e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	f383 8810 	msr	PRIMASK, r3
}
 800aa56:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800aa58:	887b      	ldrh	r3, [r7, #2]
 800aa5a:	4a0a      	ldr	r2, [pc, #40]	; (800aa84 <DbgTrace_TxCpltCallback+0x68>)
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	6938      	ldr	r0, [r7, #16]
 800aa60:	f7f6 f981 	bl	8000d66 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800aa64:	e008      	b.n	800aa78 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800aa66:	4b08      	ldr	r3, [pc, #32]	; (800aa88 <DbgTrace_TxCpltCallback+0x6c>)
 800aa68:	2201      	movs	r2, #1
 800aa6a:	701a      	strb	r2, [r3, #0]
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f383 8810 	msr	PRIMASK, r3
}
 800aa76:	bf00      	nop
}
 800aa78:	bf00      	nop
 800aa7a:	3718      	adds	r7, #24
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	20000598 	.word	0x20000598
 800aa84:	0800aa1d 	.word	0x0800aa1d
 800aa88:	20000029 	.word	0x20000029

0800aa8c <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800aa92:	f7f6 f962 	bl	8000d5a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800aa96:	2302      	movs	r3, #2
 800aa98:	9300      	str	r3, [sp, #0]
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800aaa0:	4903      	ldr	r1, [pc, #12]	; (800aab0 <DbgTraceInit+0x24>)
 800aaa2:	4804      	ldr	r0, [pc, #16]	; (800aab4 <DbgTraceInit+0x28>)
 800aaa4:	f000 f956 	bl	800ad54 <CircularQueue_Init>
#endif 
#endif
  return;
 800aaa8:	bf00      	nop
}
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	200005b8 	.word	0x200005b8
 800aab4:	20000598 	.word	0x20000598

0800aab8 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b084      	sub	sp, #16
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	68b9      	ldr	r1, [r7, #8]
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f000 f805 	bl	800aad8 <DbgTraceWrite>
 800aace:	4603      	mov	r3, r0
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3710      	adds	r7, #16
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b08a      	sub	sp, #40	; 0x28
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800aae4:	2300      	movs	r3, #0
 800aae6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aae8:	f3ef 8310 	mrs	r3, PRIMASK
 800aaec:	61bb      	str	r3, [r7, #24]
  return(result);
 800aaee:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800aaf0:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf8:	d102      	bne.n	800ab00 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800aafa:	2300      	movs	r3, #0
 800aafc:	627b      	str	r3, [r7, #36]	; 0x24
 800aafe:	e037      	b.n	800ab70 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	2b01      	cmp	r3, #1
 800ab04:	d006      	beq.n	800ab14 <DbgTraceWrite+0x3c>
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2b02      	cmp	r3, #2
 800ab0a:	d003      	beq.n	800ab14 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800ab0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab10:	627b      	str	r3, [r7, #36]	; 0x24
 800ab12:	e02d      	b.n	800ab70 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d02a      	beq.n	800ab70 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800ab1e:	b672      	cpsid	i
}
 800ab20:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	b29a      	uxth	r2, r3
 800ab26:	2301      	movs	r3, #1
 800ab28:	68b9      	ldr	r1, [r7, #8]
 800ab2a:	4814      	ldr	r0, [pc, #80]	; (800ab7c <DbgTraceWrite+0xa4>)
 800ab2c:	f000 f944 	bl	800adb8 <CircularQueue_Add>
 800ab30:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800ab32:	69fb      	ldr	r3, [r7, #28]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d015      	beq.n	800ab64 <DbgTraceWrite+0x8c>
 800ab38:	4b11      	ldr	r3, [pc, #68]	; (800ab80 <DbgTraceWrite+0xa8>)
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d010      	beq.n	800ab64 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800ab42:	4b0f      	ldr	r3, [pc, #60]	; (800ab80 <DbgTraceWrite+0xa8>)
 800ab44:	2200      	movs	r2, #0
 800ab46:	701a      	strb	r2, [r3, #0]
 800ab48:	6a3b      	ldr	r3, [r7, #32]
 800ab4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	f383 8810 	msr	PRIMASK, r3
}
 800ab52:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	4a0a      	ldr	r2, [pc, #40]	; (800ab84 <DbgTraceWrite+0xac>)
 800ab5a:	4619      	mov	r1, r3
 800ab5c:	69f8      	ldr	r0, [r7, #28]
 800ab5e:	f7f6 f902 	bl	8000d66 <DbgOutputTraces>
 800ab62:	e005      	b.n	800ab70 <DbgTraceWrite+0x98>
 800ab64:	6a3b      	ldr	r3, [r7, #32]
 800ab66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	f383 8810 	msr	PRIMASK, r3
}
 800ab6e:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800ab70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3728      	adds	r7, #40	; 0x28
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	20000598 	.word	0x20000598
 800ab80:	20000029 	.word	0x20000029
 800ab84:	0800aa1d 	.word	0x0800aa1d

0800ab88 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b085      	sub	sp, #20
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	4603      	mov	r3, r0
 800ab90:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800ab92:	4b0f      	ldr	r3, [pc, #60]	; (800abd0 <OTP_Read+0x48>)
 800ab94:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ab96:	e002      	b.n	800ab9e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	3b08      	subs	r3, #8
 800ab9c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	3307      	adds	r3, #7
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	79fa      	ldrb	r2, [r7, #7]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d003      	beq.n	800abb2 <OTP_Read+0x2a>
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	4a09      	ldr	r2, [pc, #36]	; (800abd4 <OTP_Read+0x4c>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d1f2      	bne.n	800ab98 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	3307      	adds	r3, #7
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	79fa      	ldrb	r2, [r7, #7]
 800abba:	429a      	cmp	r2, r3
 800abbc:	d001      	beq.n	800abc2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800abbe:	2300      	movs	r3, #0
 800abc0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800abc2:	68fb      	ldr	r3, [r7, #12]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3714      	adds	r7, #20
 800abc8:	46bd      	mov	sp, r7
 800abca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abce:	4770      	bx	lr
 800abd0:	1fff73f8 	.word	0x1fff73f8
 800abd4:	1fff7000 	.word	0x1fff7000

0800abd8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	605a      	str	r2, [r3, #4]
}
 800abec:	bf00      	nop
 800abee:	370c      	adds	r7, #12
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr

0800abf8 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b087      	sub	sp, #28
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac00:	f3ef 8310 	mrs	r3, PRIMASK
 800ac04:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac06:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ac08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac0a:	b672      	cpsid	i
}
 800ac0c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d102      	bne.n	800ac1e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	75fb      	strb	r3, [r7, #23]
 800ac1c:	e001      	b.n	800ac22 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	75fb      	strb	r3, [r7, #23]
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	f383 8810 	msr	PRIMASK, r3
}
 800ac2c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800ac2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	371c      	adds	r7, #28
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b087      	sub	sp, #28
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac46:	f3ef 8310 	mrs	r3, PRIMASK
 800ac4a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ac4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac50:	b672      	cpsid	i
}
 800ac52:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	683a      	ldr	r2, [r7, #0]
 800ac66:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	683a      	ldr	r2, [r7, #0]
 800ac6e:	605a      	str	r2, [r3, #4]
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	f383 8810 	msr	PRIMASK, r3
}
 800ac7a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ac7c:	bf00      	nop
 800ac7e:	371c      	adds	r7, #28
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b087      	sub	sp, #28
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac92:	f3ef 8310 	mrs	r3, PRIMASK
 800ac96:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac98:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ac9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac9c:	b672      	cpsid	i
}
 800ac9e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	685a      	ldr	r2, [r3, #4]
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	683a      	ldr	r2, [r7, #0]
 800acb2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	683a      	ldr	r2, [r7, #0]
 800acba:	601a      	str	r2, [r3, #0]
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800acc0:	693b      	ldr	r3, [r7, #16]
 800acc2:	f383 8810 	msr	PRIMASK, r3
}
 800acc6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800acc8:	bf00      	nop
 800acca:	371c      	adds	r7, #28
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b087      	sub	sp, #28
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800acdc:	f3ef 8310 	mrs	r3, PRIMASK
 800ace0:	60fb      	str	r3, [r7, #12]
  return(result);
 800ace2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ace4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ace6:	b672      	cpsid	i
}
 800ace8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	687a      	ldr	r2, [r7, #4]
 800acf0:	6812      	ldr	r2, [r2, #0]
 800acf2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	6852      	ldr	r2, [r2, #4]
 800acfc:	605a      	str	r2, [r3, #4]
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad02:	693b      	ldr	r3, [r7, #16]
 800ad04:	f383 8810 	msr	PRIMASK, r3
}
 800ad08:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ad0a:	bf00      	nop
 800ad0c:	371c      	adds	r7, #28
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr

0800ad16 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800ad16:	b580      	push	{r7, lr}
 800ad18:	b086      	sub	sp, #24
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	6078      	str	r0, [r7, #4]
 800ad1e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad20:	f3ef 8310 	mrs	r3, PRIMASK
 800ad24:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad26:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ad28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad2a:	b672      	cpsid	i
}
 800ad2c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7ff ffca 	bl	800acd4 <LST_remove_node>
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	f383 8810 	msr	PRIMASK, r3
}
 800ad4a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ad4c:	bf00      	nop
 800ad4e:	3718      	adds	r7, #24
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}

0800ad54 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b085      	sub	sp, #20
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	607a      	str	r2, [r7, #4]
 800ad60:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	68ba      	ldr	r2, [r7, #8]
 800ad66:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	2200      	movs	r2, #0
 800ad72:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	2200      	movs	r2, #0
 800ad78:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	887a      	ldrh	r2, [r7, #2]
 800ad8a:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	7e3a      	ldrb	r2, [r7, #24]
 800ad90:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800ad92:	7e3b      	ldrb	r3, [r7, #24]
 800ad94:	f003 0302 	and.w	r3, r3, #2
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d006      	beq.n	800adaa <CircularQueue_Init+0x56>
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	891b      	ldrh	r3, [r3, #8]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d002      	beq.n	800adaa <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800ada4:	f04f 33ff 	mov.w	r3, #4294967295
 800ada8:	e000      	b.n	800adac <CircularQueue_Init+0x58>
  }
  return 0;
 800adaa:	2300      	movs	r3, #0
}
 800adac:	4618      	mov	r0, r3
 800adae:	3714      	adds	r7, #20
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr

0800adb8 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b08e      	sub	sp, #56	; 0x38
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	603b      	str	r3, [r7, #0]
 800adc4:	4613      	mov	r3, r2
 800adc6:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800adc8:	2300      	movs	r3, #0
 800adca:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800adcc:	2300      	movs	r3, #0
 800adce:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800add0:	2300      	movs	r3, #0
 800add2:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800add4:	2300      	movs	r3, #0
 800add6:	62bb      	str	r3, [r7, #40]	; 0x28
 800add8:	2300      	movs	r3, #0
 800adda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800addc:	2300      	movs	r3, #0
 800adde:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800ade0:	2300      	movs	r3, #0
 800ade2:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	891b      	ldrh	r3, [r3, #8]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d101      	bne.n	800adf0 <CircularQueue_Add+0x38>
 800adec:	2302      	movs	r3, #2
 800adee:	e000      	b.n	800adf2 <CircularQueue_Add+0x3a>
 800adf0:	2300      	movs	r3, #0
 800adf2:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	695b      	ldr	r3, [r3, #20]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d02a      	beq.n	800ae52 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	891b      	ldrh	r3, [r3, #8]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d123      	bne.n	800ae4c <CircularQueue_Add+0x94>
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	691b      	ldr	r3, [r3, #16]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	b29a      	uxth	r2, r3
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	6819      	ldr	r1, [r3, #0]
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	691b      	ldr	r3, [r3, #16]
 800ae1a:	1c58      	adds	r0, r3, #1
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	4298      	cmp	r0, r3
 800ae22:	d306      	bcc.n	800ae32 <CircularQueue_Add+0x7a>
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6918      	ldr	r0, [r3, #16]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	1ac3      	subs	r3, r0, r3
 800ae2e:	3301      	adds	r3, #1
 800ae30:	e002      	b.n	800ae38 <CircularQueue_Add+0x80>
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	3301      	adds	r3, #1
 800ae38:	440b      	add	r3, r1
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	021b      	lsls	r3, r3, #8
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	4413      	add	r3, r2
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	3302      	adds	r3, #2
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	e001      	b.n	800ae50 <CircularQueue_Add+0x98>
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	891b      	ldrh	r3, [r3, #8]
 800ae50:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	891b      	ldrh	r3, [r3, #8]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d002      	beq.n	800ae60 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	891b      	ldrh	r3, [r3, #8]
 800ae5e:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	691a      	ldr	r2, [r3, #16]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	68db      	ldr	r3, [r3, #12]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d307      	bcc.n	800ae7c <CircularQueue_Add+0xc4>
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	685a      	ldr	r2, [r3, #4]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6919      	ldr	r1, [r3, #16]
 800ae74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae76:	440b      	add	r3, r1
 800ae78:	1ad3      	subs	r3, r2, r3
 800ae7a:	e000      	b.n	800ae7e <CircularQueue_Add+0xc6>
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800ae80:	88fa      	ldrh	r2, [r7, #6]
 800ae82:	7ffb      	ldrb	r3, [r7, #31]
 800ae84:	4413      	add	r3, r2
 800ae86:	461a      	mov	r2, r3
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	fb02 f303 	mul.w	r3, r2, r3
 800ae8e:	69ba      	ldr	r2, [r7, #24]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d80b      	bhi.n	800aeac <CircularQueue_Add+0xf4>
 800ae94:	88fa      	ldrh	r2, [r7, #6]
 800ae96:	7ffb      	ldrb	r3, [r7, #31]
 800ae98:	4413      	add	r3, r2
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	fbb3 f1f2 	udiv	r1, r3, r2
 800aea2:	fb01 f202 	mul.w	r2, r1, r2
 800aea6:	1a9b      	subs	r3, r3, r2
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	e000      	b.n	800aeae <CircularQueue_Add+0xf6>
 800aeac:	2300      	movs	r3, #0
 800aeae:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800aeb0:	7dfa      	ldrb	r2, [r7, #23]
 800aeb2:	7ffb      	ldrb	r3, [r7, #31]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	bf8c      	ite	hi
 800aeb8:	2301      	movhi	r3, #1
 800aeba:	2300      	movls	r3, #0
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800aec0:	7fbb      	ldrb	r3, [r7, #30]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d008      	beq.n	800aed8 <CircularQueue_Add+0x120>
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	7f1b      	ldrb	r3, [r3, #28]
 800aeca:	f003 0301 	and.w	r3, r3, #1
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d002      	beq.n	800aed8 <CircularQueue_Add+0x120>
 800aed2:	7dfb      	ldrb	r3, [r7, #23]
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	e000      	b.n	800aeda <CircularQueue_Add+0x122>
 800aed8:	8bbb      	ldrh	r3, [r7, #28]
 800aeda:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800aedc:	7fbb      	ldrb	r3, [r7, #30]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d008      	beq.n	800aef4 <CircularQueue_Add+0x13c>
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	7f1b      	ldrb	r3, [r3, #28]
 800aee6:	f003 0302 	and.w	r3, r3, #2
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d002      	beq.n	800aef4 <CircularQueue_Add+0x13c>
 800aeee:	7ffb      	ldrb	r3, [r7, #31]
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	e000      	b.n	800aef6 <CircularQueue_Add+0x13e>
 800aef4:	8bbb      	ldrh	r3, [r7, #28]
 800aef6:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800aef8:	88fb      	ldrh	r3, [r7, #6]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	f000 817e 	beq.w	800b1fc <CircularQueue_Add+0x444>
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	695a      	ldr	r2, [r3, #20]
 800af04:	88f9      	ldrh	r1, [r7, #6]
 800af06:	7ffb      	ldrb	r3, [r7, #31]
 800af08:	440b      	add	r3, r1
 800af0a:	4619      	mov	r1, r3
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	fb01 f303 	mul.w	r3, r1, r3
 800af12:	441a      	add	r2, r3
 800af14:	8bbb      	ldrh	r3, [r7, #28]
 800af16:	441a      	add	r2, r3
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	429a      	cmp	r2, r3
 800af1e:	f200 816d 	bhi.w	800b1fc <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800af22:	2300      	movs	r3, #0
 800af24:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af26:	e14a      	b.n	800b1be <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	691a      	ldr	r2, [r3, #16]
 800af2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800af2e:	441a      	add	r2, r3
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	429a      	cmp	r2, r3
 800af36:	d307      	bcc.n	800af48 <CircularQueue_Add+0x190>
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	691a      	ldr	r2, [r3, #16]
 800af3c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800af3e:	441a      	add	r2, r3
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	1ad3      	subs	r3, r2, r3
 800af46:	e003      	b.n	800af50 <CircularQueue_Add+0x198>
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	691a      	ldr	r2, [r3, #16]
 800af4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800af4e:	4413      	add	r3, r2
 800af50:	68fa      	ldr	r2, [r7, #12]
 800af52:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	691b      	ldr	r3, [r3, #16]
 800af58:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	891b      	ldrh	r3, [r3, #8]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d130      	bne.n	800afc4 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af68:	1c59      	adds	r1, r3, #1
 800af6a:	6339      	str	r1, [r7, #48]	; 0x30
 800af6c:	4413      	add	r3, r2
 800af6e:	88fa      	ldrh	r2, [r7, #6]
 800af70:	b2d2      	uxtb	r2, r2
 800af72:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d304      	bcc.n	800af88 <CircularQueue_Add+0x1d0>
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af84:	1ad3      	subs	r3, r2, r3
 800af86:	e000      	b.n	800af8a <CircularQueue_Add+0x1d2>
 800af88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8a:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800af8c:	88fb      	ldrh	r3, [r7, #6]
 800af8e:	0a1b      	lsrs	r3, r3, #8
 800af90:	b298      	uxth	r0, r3
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af98:	1c59      	adds	r1, r3, #1
 800af9a:	6339      	str	r1, [r7, #48]	; 0x30
 800af9c:	4413      	add	r3, r2
 800af9e:	b2c2      	uxtb	r2, r0
 800afa0:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d304      	bcc.n	800afb6 <CircularQueue_Add+0x1fe>
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	685b      	ldr	r3, [r3, #4]
 800afb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afb2:	1ad3      	subs	r3, r2, r3
 800afb4:	e000      	b.n	800afb8 <CircularQueue_Add+0x200>
 800afb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afb8:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	695b      	ldr	r3, [r3, #20]
 800afbe:	1c9a      	adds	r2, r3, #2
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800afc4:	88fa      	ldrh	r2, [r7, #6]
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6859      	ldr	r1, [r3, #4]
 800afca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afcc:	1acb      	subs	r3, r1, r3
 800afce:	4293      	cmp	r3, r2
 800afd0:	bf28      	it	cs
 800afd2:	4613      	movcs	r3, r2
 800afd4:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800afd6:	88fb      	ldrh	r3, [r7, #6]
 800afd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afda:	429a      	cmp	r2, r3
 800afdc:	d007      	beq.n	800afee <CircularQueue_Add+0x236>
 800afde:	88fb      	ldrh	r3, [r7, #6]
 800afe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d225      	bcs.n	800b032 <CircularQueue_Add+0x27a>
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	7f1b      	ldrb	r3, [r3, #28]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d121      	bne.n	800b032 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681a      	ldr	r2, [r3, #0]
 800aff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff4:	18d0      	adds	r0, r2, r3
 800aff6:	88fb      	ldrh	r3, [r7, #6]
 800aff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800affa:	fb02 f303 	mul.w	r3, r2, r3
 800affe:	68ba      	ldr	r2, [r7, #8]
 800b000:	4413      	add	r3, r2
 800b002:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b004:	4619      	mov	r1, r3
 800b006:	f002 fa04 	bl	800d412 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	695a      	ldr	r2, [r3, #20]
 800b00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b010:	441a      	add	r2, r3
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800b016:	2300      	movs	r3, #0
 800b018:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800b01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01c:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800b01e:	88fa      	ldrh	r2, [r7, #6]
 800b020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b022:	1ad3      	subs	r3, r2, r3
 800b024:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800b026:	7ffb      	ldrb	r3, [r7, #31]
 800b028:	b29a      	uxth	r2, r3
 800b02a:	88fb      	ldrh	r3, [r7, #6]
 800b02c:	4413      	add	r3, r2
 800b02e:	86fb      	strh	r3, [r7, #54]	; 0x36
 800b030:	e0a4      	b.n	800b17c <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800b032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b034:	2b00      	cmp	r3, #0
 800b036:	f000 80a1 	beq.w	800b17c <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	7f1b      	ldrb	r3, [r3, #28]
 800b03e:	f003 0301 	and.w	r3, r3, #1
 800b042:	2b00      	cmp	r3, #0
 800b044:	d03a      	beq.n	800b0bc <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	891b      	ldrh	r3, [r3, #8]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d10d      	bne.n	800b06a <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b054:	3b02      	subs	r3, #2
 800b056:	4413      	add	r3, r2
 800b058:	22ff      	movs	r2, #255	; 0xff
 800b05a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681a      	ldr	r2, [r3, #0]
 800b060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b062:	3b01      	subs	r3, #1
 800b064:	4413      	add	r3, r2
 800b066:	22ff      	movs	r2, #255	; 0xff
 800b068:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	695a      	ldr	r2, [r3, #20]
 800b06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b070:	441a      	add	r2, r3
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800b076:	2300      	movs	r3, #0
 800b078:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800b07a:	88fb      	ldrh	r3, [r7, #6]
 800b07c:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800b07e:	2300      	movs	r3, #0
 800b080:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	891b      	ldrh	r3, [r3, #8]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d16f      	bne.n	800b16a <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b090:	1c59      	adds	r1, r3, #1
 800b092:	6339      	str	r1, [r7, #48]	; 0x30
 800b094:	4413      	add	r3, r2
 800b096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b098:	b2d2      	uxtb	r2, r2
 800b09a:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b09c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b09e:	0a18      	lsrs	r0, r3, #8
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a6:	1c59      	adds	r1, r3, #1
 800b0a8:	6339      	str	r1, [r7, #48]	; 0x30
 800b0aa:	4413      	add	r3, r2
 800b0ac:	b2c2      	uxtb	r2, r0
 800b0ae:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	695b      	ldr	r3, [r3, #20]
 800b0b4:	1c9a      	adds	r2, r3, #2
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	615a      	str	r2, [r3, #20]
 800b0ba:	e056      	b.n	800b16a <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	7f1b      	ldrb	r3, [r3, #28]
 800b0c0:	f003 0302 	and.w	r3, r3, #2
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d050      	beq.n	800b16a <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	891b      	ldrh	r3, [r3, #8]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d14a      	bne.n	800b166 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d6:	3b02      	subs	r3, #2
 800b0d8:	4413      	add	r3, r2
 800b0da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0dc:	b2d2      	uxtb	r2, r2
 800b0de:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e2:	0a19      	lsrs	r1, r3, #8
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681a      	ldr	r2, [r3, #0]
 800b0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	4413      	add	r3, r2
 800b0ee:	b2ca      	uxtb	r2, r1
 800b0f0:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f8:	18d0      	adds	r0, r2, r3
 800b0fa:	88fb      	ldrh	r3, [r7, #6]
 800b0fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0fe:	fb02 f303 	mul.w	r3, r2, r3
 800b102:	68ba      	ldr	r2, [r7, #8]
 800b104:	4413      	add	r3, r2
 800b106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b108:	4619      	mov	r1, r3
 800b10a:	f002 f982 	bl	800d412 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	695a      	ldr	r2, [r3, #20]
 800b112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b114:	441a      	add	r2, r3
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800b11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11c:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800b11e:	88fa      	ldrh	r2, [r7, #6]
 800b120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b122:	1ad3      	subs	r3, r2, r3
 800b124:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	699b      	ldr	r3, [r3, #24]
 800b12a:	1c5a      	adds	r2, r3, #1
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800b130:	2300      	movs	r3, #0
 800b132:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681a      	ldr	r2, [r3, #0]
 800b138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13a:	1c59      	adds	r1, r3, #1
 800b13c:	6339      	str	r1, [r7, #48]	; 0x30
 800b13e:	4413      	add	r3, r2
 800b140:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b142:	b2d2      	uxtb	r2, r2
 800b144:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b148:	0a18      	lsrs	r0, r3, #8
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b150:	1c59      	adds	r1, r3, #1
 800b152:	6339      	str	r1, [r7, #48]	; 0x30
 800b154:	4413      	add	r3, r2
 800b156:	b2c2      	uxtb	r2, r0
 800b158:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	695b      	ldr	r3, [r3, #20]
 800b15e:	1c9a      	adds	r2, r3, #2
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	615a      	str	r2, [r3, #20]
 800b164:	e001      	b.n	800b16a <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800b166:	2300      	movs	r3, #0
 800b168:	e049      	b.n	800b1fe <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800b16a:	7ffb      	ldrb	r3, [r7, #31]
 800b16c:	b29a      	uxth	r2, r3
 800b16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b170:	b29b      	uxth	r3, r3
 800b172:	4413      	add	r3, r2
 800b174:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	2200      	movs	r2, #0
 800b17a:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800b17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d015      	beq.n	800b1ae <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681a      	ldr	r2, [r3, #0]
 800b186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b188:	18d0      	adds	r0, r2, r3
 800b18a:	88fb      	ldrh	r3, [r7, #6]
 800b18c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b18e:	fb03 f202 	mul.w	r2, r3, r2
 800b192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b194:	4413      	add	r3, r2
 800b196:	68ba      	ldr	r2, [r7, #8]
 800b198:	4413      	add	r3, r2
 800b19a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b19c:	4619      	mov	r1, r3
 800b19e:	f002 f938 	bl	800d412 <memcpy>
        q->byteCount += NbBytesToCopy;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	695a      	ldr	r2, [r3, #20]
 800b1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a8:	441a      	add	r2, r3
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	699b      	ldr	r3, [r3, #24]
 800b1b2:	1c5a      	adds	r2, r3, #1
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800b1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ba:	3301      	adds	r3, #1
 800b1bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	f4ff aeb0 	bcc.w	800af28 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6919      	ldr	r1, [r3, #16]
 800b1d0:	7ffb      	ldrb	r3, [r7, #31]
 800b1d2:	4419      	add	r1, r3
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	4299      	cmp	r1, r3
 800b1da:	d307      	bcc.n	800b1ec <CircularQueue_Add+0x434>
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6919      	ldr	r1, [r3, #16]
 800b1e0:	7ffb      	ldrb	r3, [r7, #31]
 800b1e2:	4419      	add	r1, r3
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	1acb      	subs	r3, r1, r3
 800b1ea:	e003      	b.n	800b1f4 <CircularQueue_Add+0x43c>
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	6919      	ldr	r1, [r3, #16]
 800b1f0:	7ffb      	ldrb	r3, [r7, #31]
 800b1f2:	440b      	add	r3, r1
 800b1f4:	4413      	add	r3, r2
 800b1f6:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800b1f8:	6a3b      	ldr	r3, [r7, #32]
 800b1fa:	e000      	b.n	800b1fe <CircularQueue_Add+0x446>
    return NULL;
 800b1fc:	2300      	movs	r3, #0
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3738      	adds	r7, #56	; 0x38
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800b206:	b480      	push	{r7}
 800b208:	b085      	sub	sp, #20
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
 800b20e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b210:	2300      	movs	r3, #0
 800b212:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800b214:	2300      	movs	r3, #0
 800b216:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	891b      	ldrh	r3, [r3, #8]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d101      	bne.n	800b224 <CircularQueue_Remove+0x1e>
 800b220:	2302      	movs	r3, #2
 800b222:	e000      	b.n	800b226 <CircularQueue_Remove+0x20>
 800b224:	2300      	movs	r3, #0
 800b226:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800b228:	2300      	movs	r3, #0
 800b22a:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	695b      	ldr	r3, [r3, #20]
 800b230:	2b00      	cmp	r3, #0
 800b232:	f000 80cc 	beq.w	800b3ce <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	891b      	ldrh	r3, [r3, #8]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d121      	bne.n	800b282 <CircularQueue_Remove+0x7c>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681a      	ldr	r2, [r3, #0]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	4413      	add	r3, r2
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	b29a      	uxth	r2, r3
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	6819      	ldr	r1, [r3, #0]
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	68db      	ldr	r3, [r3, #12]
 800b254:	1c58      	adds	r0, r3, #1
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	4298      	cmp	r0, r3
 800b25c:	d306      	bcc.n	800b26c <CircularQueue_Remove+0x66>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	68d8      	ldr	r0, [r3, #12]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	1ac3      	subs	r3, r0, r3
 800b268:	3301      	adds	r3, #1
 800b26a:	e002      	b.n	800b272 <CircularQueue_Remove+0x6c>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	3301      	adds	r3, #1
 800b272:	440b      	add	r3, r1
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	b29b      	uxth	r3, r3
 800b278:	021b      	lsls	r3, r3, #8
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	4413      	add	r3, r2
 800b27e:	b29b      	uxth	r3, r3
 800b280:	e001      	b.n	800b286 <CircularQueue_Remove+0x80>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	891b      	ldrh	r3, [r3, #8]
 800b286:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	7f1b      	ldrb	r3, [r3, #28]
 800b28c:	f003 0301 	and.w	r3, r3, #1
 800b290:	2b00      	cmp	r3, #0
 800b292:	d057      	beq.n	800b344 <CircularQueue_Remove+0x13e>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	7f1b      	ldrb	r3, [r3, #28]
 800b298:	f003 0302 	and.w	r3, r3, #2
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d151      	bne.n	800b344 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b2a0:	897b      	ldrh	r3, [r7, #10]
 800b2a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d103      	bne.n	800b2b2 <CircularQueue_Remove+0xac>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	891b      	ldrh	r3, [r3, #8]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d012      	beq.n	800b2d8 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	68da      	ldr	r2, [r3, #12]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d942      	bls.n	800b344 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	891b      	ldrh	r3, [r3, #8]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d03e      	beq.n	800b344 <CircularQueue_Remove+0x13e>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	685a      	ldr	r2, [r3, #4]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	68db      	ldr	r3, [r3, #12]
 800b2ce:	1ad3      	subs	r3, r2, r3
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	8912      	ldrh	r2, [r2, #8]
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d235      	bcs.n	800b344 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	695a      	ldr	r2, [r3, #20]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	68d9      	ldr	r1, [r3, #12]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	1acb      	subs	r3, r1, r3
 800b2e6:	441a      	add	r2, r3
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	891b      	ldrh	r3, [r3, #8]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d121      	bne.n	800b33e <CircularQueue_Remove+0x138>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	68db      	ldr	r3, [r3, #12]
 800b302:	4413      	add	r3, r2
 800b304:	781b      	ldrb	r3, [r3, #0]
 800b306:	b29a      	uxth	r2, r3
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6819      	ldr	r1, [r3, #0]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	68db      	ldr	r3, [r3, #12]
 800b310:	1c58      	adds	r0, r3, #1
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	4298      	cmp	r0, r3
 800b318:	d306      	bcc.n	800b328 <CircularQueue_Remove+0x122>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	68d8      	ldr	r0, [r3, #12]
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	1ac3      	subs	r3, r0, r3
 800b324:	3301      	adds	r3, #1
 800b326:	e002      	b.n	800b32e <CircularQueue_Remove+0x128>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	3301      	adds	r3, #1
 800b32e:	440b      	add	r3, r1
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	b29b      	uxth	r3, r3
 800b334:	021b      	lsls	r3, r3, #8
 800b336:	b29b      	uxth	r3, r3
 800b338:	4413      	add	r3, r2
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	e001      	b.n	800b342 <CircularQueue_Remove+0x13c>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	891b      	ldrh	r3, [r3, #8]
 800b342:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	68d9      	ldr	r1, [r3, #12]
 800b34c:	7a7b      	ldrb	r3, [r7, #9]
 800b34e:	4419      	add	r1, r3
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	685b      	ldr	r3, [r3, #4]
 800b354:	4299      	cmp	r1, r3
 800b356:	d307      	bcc.n	800b368 <CircularQueue_Remove+0x162>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	68d9      	ldr	r1, [r3, #12]
 800b35c:	7a7b      	ldrb	r3, [r7, #9]
 800b35e:	4419      	add	r1, r3
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	1acb      	subs	r3, r1, r3
 800b366:	e003      	b.n	800b370 <CircularQueue_Remove+0x16a>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	68d9      	ldr	r1, [r3, #12]
 800b36c:	7a7b      	ldrb	r3, [r7, #9]
 800b36e:	440b      	add	r3, r1
 800b370:	4413      	add	r3, r2
 800b372:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	695b      	ldr	r3, [r3, #20]
 800b378:	8979      	ldrh	r1, [r7, #10]
 800b37a:	7a7a      	ldrb	r2, [r7, #9]
 800b37c:	440a      	add	r2, r1
 800b37e:	1a9a      	subs	r2, r3, r2
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	695b      	ldr	r3, [r3, #20]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d01b      	beq.n	800b3c4 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	68da      	ldr	r2, [r3, #12]
 800b390:	897b      	ldrh	r3, [r7, #10]
 800b392:	441a      	add	r2, r3
 800b394:	7a7b      	ldrb	r3, [r7, #9]
 800b396:	441a      	add	r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d309      	bcc.n	800b3b4 <CircularQueue_Remove+0x1ae>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	68da      	ldr	r2, [r3, #12]
 800b3a4:	897b      	ldrh	r3, [r7, #10]
 800b3a6:	441a      	add	r2, r3
 800b3a8:	7a7b      	ldrb	r3, [r7, #9]
 800b3aa:	441a      	add	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	685b      	ldr	r3, [r3, #4]
 800b3b0:	1ad3      	subs	r3, r2, r3
 800b3b2:	e005      	b.n	800b3c0 <CircularQueue_Remove+0x1ba>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	68da      	ldr	r2, [r3, #12]
 800b3b8:	897b      	ldrh	r3, [r7, #10]
 800b3ba:	441a      	add	r2, r3
 800b3bc:	7a7b      	ldrb	r3, [r7, #9]
 800b3be:	4413      	add	r3, r2
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	699b      	ldr	r3, [r3, #24]
 800b3c8:	1e5a      	subs	r2, r3, #1
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d002      	beq.n	800b3da <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	897a      	ldrh	r2, [r7, #10]
 800b3d8:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800b3da:	68fb      	ldr	r3, [r7, #12]
}
 800b3dc:	4618      	mov	r0, r3
 800b3de:	3714      	adds	r7, #20
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b087      	sub	sp, #28
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	891b      	ldrh	r3, [r3, #8]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d101      	bne.n	800b406 <CircularQueue_Sense+0x1e>
 800b402:	2302      	movs	r3, #2
 800b404:	e000      	b.n	800b408 <CircularQueue_Sense+0x20>
 800b406:	2300      	movs	r3, #0
 800b408:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800b40a:	2300      	movs	r3, #0
 800b40c:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800b40e:	2300      	movs	r3, #0
 800b410:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	695b      	ldr	r3, [r3, #20]
 800b416:	2b00      	cmp	r3, #0
 800b418:	f000 8090 	beq.w	800b53c <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	891b      	ldrh	r3, [r3, #8]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d121      	bne.n	800b46e <CircularQueue_Sense+0x86>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681a      	ldr	r2, [r3, #0]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	4413      	add	r3, r2
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	b29a      	uxth	r2, r3
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6819      	ldr	r1, [r3, #0]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	1c58      	adds	r0, r3, #1
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	4298      	cmp	r0, r3
 800b448:	d306      	bcc.n	800b458 <CircularQueue_Sense+0x70>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	68d8      	ldr	r0, [r3, #12]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	685b      	ldr	r3, [r3, #4]
 800b452:	1ac3      	subs	r3, r0, r3
 800b454:	3301      	adds	r3, #1
 800b456:	e002      	b.n	800b45e <CircularQueue_Sense+0x76>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	68db      	ldr	r3, [r3, #12]
 800b45c:	3301      	adds	r3, #1
 800b45e:	440b      	add	r3, r1
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	b29b      	uxth	r3, r3
 800b464:	021b      	lsls	r3, r3, #8
 800b466:	b29b      	uxth	r3, r3
 800b468:	4413      	add	r3, r2
 800b46a:	b29b      	uxth	r3, r3
 800b46c:	e001      	b.n	800b472 <CircularQueue_Sense+0x8a>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	891b      	ldrh	r3, [r3, #8]
 800b472:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	7f1b      	ldrb	r3, [r3, #28]
 800b478:	f003 0301 	and.w	r3, r3, #1
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d048      	beq.n	800b512 <CircularQueue_Sense+0x12a>
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	7f1b      	ldrb	r3, [r3, #28]
 800b484:	f003 0302 	and.w	r3, r3, #2
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d142      	bne.n	800b512 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b48c:	8a7b      	ldrh	r3, [r7, #18]
 800b48e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b492:	4293      	cmp	r3, r2
 800b494:	d103      	bne.n	800b49e <CircularQueue_Sense+0xb6>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	891b      	ldrh	r3, [r3, #8]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d012      	beq.n	800b4c4 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	68da      	ldr	r2, [r3, #12]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d933      	bls.n	800b512 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	891b      	ldrh	r3, [r3, #8]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d02f      	beq.n	800b512 <CircularQueue_Sense+0x12a>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	685a      	ldr	r2, [r3, #4]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	68db      	ldr	r3, [r3, #12]
 800b4ba:	1ad3      	subs	r3, r2, r3
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	8912      	ldrh	r2, [r2, #8]
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d226      	bcs.n	800b512 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	891b      	ldrh	r3, [r3, #8]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d11d      	bne.n	800b50c <CircularQueue_Sense+0x124>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681a      	ldr	r2, [r3, #0]
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	4413      	add	r3, r2
 800b4d8:	781b      	ldrb	r3, [r3, #0]
 800b4da:	b29a      	uxth	r2, r3
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6819      	ldr	r1, [r3, #0]
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	1c58      	adds	r0, r3, #1
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	4298      	cmp	r0, r3
 800b4ea:	d305      	bcc.n	800b4f8 <CircularQueue_Sense+0x110>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	68f8      	ldr	r0, [r7, #12]
 800b4f2:	1ac3      	subs	r3, r0, r3
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	e001      	b.n	800b4fc <CircularQueue_Sense+0x114>
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	440b      	add	r3, r1
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	b29b      	uxth	r3, r3
 800b502:	021b      	lsls	r3, r3, #8
 800b504:	b29b      	uxth	r3, r3
 800b506:	4413      	add	r3, r2
 800b508:	b29b      	uxth	r3, r3
 800b50a:	e001      	b.n	800b510 <CircularQueue_Sense+0x128>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	891b      	ldrh	r3, [r3, #8]
 800b510:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681a      	ldr	r2, [r3, #0]
 800b516:	7af9      	ldrb	r1, [r7, #11]
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	4419      	add	r1, r3
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	4299      	cmp	r1, r3
 800b522:	d306      	bcc.n	800b532 <CircularQueue_Sense+0x14a>
 800b524:	7af9      	ldrb	r1, [r7, #11]
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	4419      	add	r1, r3
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	1acb      	subs	r3, r1, r3
 800b530:	e002      	b.n	800b538 <CircularQueue_Sense+0x150>
 800b532:	7af9      	ldrb	r1, [r7, #11]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	440b      	add	r3, r1
 800b538:	4413      	add	r3, r2
 800b53a:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d002      	beq.n	800b548 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	8a7a      	ldrh	r2, [r7, #18]
 800b546:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800b548:	697b      	ldr	r3, [r7, #20]
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	371c      	adds	r7, #28
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr
	...

0800b558 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800b558:	b480      	push	{r7}
 800b55a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800b55c:	4b03      	ldr	r3, [pc, #12]	; (800b56c <LL_FLASH_GetUDN+0x14>)
 800b55e:	681b      	ldr	r3, [r3, #0]
}
 800b560:	4618      	mov	r0, r3
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr
 800b56a:	bf00      	nop
 800b56c:	1fff7580 	.word	0x1fff7580

0800b570 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800b570:	b480      	push	{r7}
 800b572:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800b574:	4b03      	ldr	r3, [pc, #12]	; (800b584 <LL_FLASH_GetDeviceID+0x14>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	b2db      	uxtb	r3, r3
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr
 800b584:	1fff7584 	.word	0x1fff7584

0800b588 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800b588:	b480      	push	{r7}
 800b58a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800b58c:	4b03      	ldr	r3, [pc, #12]	; (800b59c <LL_FLASH_GetSTCompanyID+0x14>)
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	0a1b      	lsrs	r3, r3, #8
}
 800b592:	4618      	mov	r0, r3
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr
 800b59c:	1fff7584 	.word	0x1fff7584

0800b5a0 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800b5a0:	b5b0      	push	{r4, r5, r7, lr}
 800b5a2:	b090      	sub	sp, #64	; 0x40
 800b5a4:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b5a6:	2392      	movs	r3, #146	; 0x92
 800b5a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800b5ac:	4b3f      	ldr	r3, [pc, #252]	; (800b6ac <APP_BLE_Init+0x10c>)
 800b5ae:	1d3c      	adds	r4, r7, #4
 800b5b0:	461d      	mov	r5, r3
 800b5b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b5c2:	c403      	stmia	r4!, {r0, r1}
 800b5c4:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800b5c6:	f000 fb0b 	bl	800bbe0 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800b5ca:	2101      	movs	r1, #1
 800b5cc:	2002      	movs	r0, #2
 800b5ce:	f001 fa2d 	bl	800ca2c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800b5d2:	4a37      	ldr	r2, [pc, #220]	; (800b6b0 <APP_BLE_Init+0x110>)
 800b5d4:	2100      	movs	r1, #0
 800b5d6:	2004      	movs	r0, #4
 800b5d8:	f001 fb54 	bl	800cc84 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800b5dc:	1d3b      	adds	r3, r7, #4
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7fe fc0e 	bl	8009e00 <SHCI_C2_BLE_Init>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800b5ea:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d008      	beq.n	800b604 <APP_BLE_Init+0x64>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800b5f2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b5f6:	4619      	mov	r1, r3
 800b5f8:	482e      	ldr	r0, [pc, #184]	; (800b6b4 <APP_BLE_Init+0x114>)
 800b5fa:	f001 fd47 	bl	800d08c <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800b5fe:	f7f7 f9b5 	bl	800296c <Error_Handler>
 800b602:	e002      	b.n	800b60a <APP_BLE_Init+0x6a>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800b604:	482c      	ldr	r0, [pc, #176]	; (800b6b8 <APP_BLE_Init+0x118>)
 800b606:	f001 fd41 	bl	800d08c <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800b60a:	f000 faff 	bl	800bc0c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800b60e:	f7fe fb51 	bl	8009cb4 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b612:	4b2a      	ldr	r3, [pc, #168]	; (800b6bc <APP_BLE_Init+0x11c>)
 800b614:	2200      	movs	r2, #0
 800b616:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800b61a:	4b28      	ldr	r3, [pc, #160]	; (800b6bc <APP_BLE_Init+0x11c>)
 800b61c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b620:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800b622:	4a27      	ldr	r2, [pc, #156]	; (800b6c0 <APP_BLE_Init+0x120>)
 800b624:	2100      	movs	r1, #0
 800b626:	2001      	movs	r0, #1
 800b628:	f001 fb2c 	bl	800cc84 <UTIL_SEQ_RegTask>
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_UPDATE_REG_ID, UTIL_SEQ_RFU, Connection_Interval_Update_Req);
 800b62c:	4a25      	ldr	r2, [pc, #148]	; (800b6c4 <APP_BLE_Init+0x124>)
 800b62e:	2100      	movs	r1, #0
 800b630:	2002      	movs	r0, #2
 800b632:	f001 fb27 	bl	800cc84 <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800b636:	2006      	movs	r0, #6
 800b638:	f7fd ff65 	bl	8009506 <aci_hal_set_radio_activity_mask>
 800b63c:	4603      	mov	r3, r0
 800b63e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800b642:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b646:	2b00      	cmp	r3, #0
 800b648:	d006      	beq.n	800b658 <APP_BLE_Init+0xb8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800b64a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b64e:	4619      	mov	r1, r3
 800b650:	481d      	ldr	r0, [pc, #116]	; (800b6c8 <APP_BLE_Init+0x128>)
 800b652:	f001 fd1b 	bl	800d08c <iprintf>
 800b656:	e002      	b.n	800b65e <APP_BLE_Init+0xbe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800b658:	481c      	ldr	r0, [pc, #112]	; (800b6cc <APP_BLE_Init+0x12c>)
 800b65a:	f001 fd17 	bl	800d08c <iprintf>
  }
#endif /* RADIO_ACTIVITY_EVENT != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  index_con_int = 0;
 800b65e:	4b1c      	ldr	r3, [pc, #112]	; (800b6d0 <APP_BLE_Init+0x130>)
 800b660:	2200      	movs	r2, #0
 800b662:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 800b664:	4b1b      	ldr	r3, [pc, #108]	; (800b6d4 <APP_BLE_Init+0x134>)
 800b666:	2201      	movs	r2, #1
 800b668:	701a      	strb	r2, [r3, #0]
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800b66a:	f000 ff25 	bl	800c4b8 <P2PS_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800b66e:	4b1a      	ldr	r3, [pc, #104]	; (800b6d8 <APP_BLE_Init+0x138>)
 800b670:	2200      	movs	r2, #0
 800b672:	491a      	ldr	r1, [pc, #104]	; (800b6dc <APP_BLE_Init+0x13c>)
 800b674:	2000      	movs	r0, #0
 800b676:	f7f6 fd33 	bl	80020e0 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 800b67a:	4b19      	ldr	r3, [pc, #100]	; (800b6e0 <APP_BLE_Init+0x140>)
 800b67c:	2200      	movs	r2, #0
 800b67e:	4919      	ldr	r1, [pc, #100]	; (800b6e4 <APP_BLE_Init+0x144>)
 800b680:	2000      	movs	r0, #0
 800b682:	f7f6 fd2d 	bl	80020e0 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800b686:	4b0d      	ldr	r3, [pc, #52]	; (800b6bc <APP_BLE_Init+0x11c>)
 800b688:	2200      	movs	r2, #0
 800b68a:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800b68c:	4b0b      	ldr	r3, [pc, #44]	; (800b6bc <APP_BLE_Init+0x11c>)
 800b68e:	2200      	movs	r2, #0
 800b690:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800b692:	4b15      	ldr	r3, [pc, #84]	; (800b6e8 <APP_BLE_Init+0x148>)
 800b694:	2280      	movs	r2, #128	; 0x80
 800b696:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 800b698:	4b14      	ldr	r3, [pc, #80]	; (800b6ec <APP_BLE_Init+0x14c>)
 800b69a:	22a0      	movs	r2, #160	; 0xa0
 800b69c:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800b69e:	2001      	movs	r0, #1
 800b6a0:	f000 fc64 	bl	800bf6c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800b6a4:	bf00      	nop
}
 800b6a6:	3740      	adds	r7, #64	; 0x40
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bdb0      	pop	{r4, r5, r7, pc}
 800b6ac:	0800e418 	.word	0x0800e418
 800b6b0:	0800a01d 	.word	0x0800a01d
 800b6b4:	0800e33c 	.word	0x0800e33c
 800b6b8:	0800e374 	.word	0x0800e374
 800b6bc:	200015c0 	.word	0x200015c0
 800b6c0:	0800c14d 	.word	0x0800c14d
 800b6c4:	0800c295 	.word	0x0800c295
 800b6c8:	0800e39c 	.word	0x0800e39c
 800b6cc:	0800e3e0 	.word	0x0800e3e0
 800b6d0:	2000164c 	.word	0x2000164c
 800b6d4:	2000164d 	.word	0x2000164d
 800b6d8:	0800c1ad 	.word	0x0800c1ad
 800b6dc:	20001641 	.word	0x20001641
 800b6e0:	0800c1bd 	.word	0x0800c1bd
 800b6e4:	20001642 	.word	0x20001642
 800b6e8:	20001644 	.word	0x20001644
 800b6ec:	20001646 	.word	0x20001646

0800b6f0 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800b6f0:	b5b0      	push	{r4, r5, r7, lr}
 800b6f2:	b090      	sub	sp, #64	; 0x40
 800b6f4:	af04      	add	r7, sp, #16
 800b6f6:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800b6f8:	2392      	movs	r3, #146	; 0x92
 800b6fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	3301      	adds	r3, #1
 800b702:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (p_event_pckt->evt)
 800b704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	2bff      	cmp	r3, #255	; 0xff
 800b70a:	f000 8120 	beq.w	800b94e <SVCCTL_App_Notification+0x25e>
 800b70e:	2bff      	cmp	r3, #255	; 0xff
 800b710:	f300 8222 	bgt.w	800bb58 <SVCCTL_App_Notification+0x468>
 800b714:	2b05      	cmp	r3, #5
 800b716:	d002      	beq.n	800b71e <SVCCTL_App_Notification+0x2e>
 800b718:	2b3e      	cmp	r3, #62	; 0x3e
 800b71a:	d02e      	beq.n	800b77a <SVCCTL_App_Notification+0x8a>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800b71c:	e21c      	b.n	800bb58 <SVCCTL_App_Notification+0x468>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800b71e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b720:	3302      	adds	r3, #2
 800b722:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b72a:	b29a      	uxth	r2, r3
 800b72c:	4bb3      	ldr	r3, [pc, #716]	; (800b9fc <SVCCTL_App_Notification+0x30c>)
 800b72e:	8adb      	ldrh	r3, [r3, #22]
 800b730:	429a      	cmp	r2, r3
 800b732:	d114      	bne.n	800b75e <SVCCTL_App_Notification+0x6e>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800b734:	4bb1      	ldr	r3, [pc, #708]	; (800b9fc <SVCCTL_App_Notification+0x30c>)
 800b736:	2200      	movs	r2, #0
 800b738:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b73a:	4bb0      	ldr	r3, [pc, #704]	; (800b9fc <SVCCTL_App_Notification+0x30c>)
 800b73c:	2200      	movs	r2, #0
 800b73e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800b742:	48af      	ldr	r0, [pc, #700]	; (800ba00 <SVCCTL_App_Notification+0x310>)
 800b744:	f001 fd10 	bl	800d168 <puts>
                    p_disconnection_complete_event->Connection_Handle,
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b74e:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800b750:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800b756:	461a      	mov	r2, r3
 800b758:	48aa      	ldr	r0, [pc, #680]	; (800ba04 <SVCCTL_App_Notification+0x314>)
 800b75a:	f001 fc97 	bl	800d08c <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800b75e:	2001      	movs	r0, #1
 800b760:	f000 fc04 	bl	800bf6c <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800b764:	4ba8      	ldr	r3, [pc, #672]	; (800ba08 <SVCCTL_App_Notification+0x318>)
 800b766:	2201      	movs	r2, #1
 800b768:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800b76a:	4ba4      	ldr	r3, [pc, #656]	; (800b9fc <SVCCTL_App_Notification+0x30c>)
 800b76c:	8ada      	ldrh	r2, [r3, #22]
 800b76e:	4ba6      	ldr	r3, [pc, #664]	; (800ba08 <SVCCTL_App_Notification+0x318>)
 800b770:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 800b772:	48a5      	ldr	r0, [pc, #660]	; (800ba08 <SVCCTL_App_Notification+0x318>)
 800b774:	f000 fe8c 	bl	800c490 <P2PS_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800b778:	e1f1      	b.n	800bb5e <SVCCTL_App_Notification+0x46e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800b77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77c:	3302      	adds	r3, #2
 800b77e:	61fb      	str	r3, [r7, #28]
      switch (p_meta_evt->subevent)
 800b780:	69fb      	ldr	r3, [r7, #28]
 800b782:	781b      	ldrb	r3, [r3, #0]
 800b784:	2b0c      	cmp	r3, #12
 800b786:	d033      	beq.n	800b7f0 <SVCCTL_App_Notification+0x100>
 800b788:	2b0c      	cmp	r3, #12
 800b78a:	f300 80de 	bgt.w	800b94a <SVCCTL_App_Notification+0x25a>
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d06c      	beq.n	800b86c <SVCCTL_App_Notification+0x17c>
 800b792:	2b03      	cmp	r3, #3
 800b794:	f040 80d9 	bne.w	800b94a <SVCCTL_App_Notification+0x25a>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800b798:	69fb      	ldr	r3, [r7, #28]
 800b79a:	3301      	adds	r3, #1
 800b79c:	617b      	str	r3, [r7, #20]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800b79e:	489b      	ldr	r0, [pc, #620]	; (800ba0c <SVCCTL_App_Notification+0x31c>)
 800b7a0:	f001 fce2 	bl	800d168 <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800b7aa:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	f7f4 ffcb 	bl	8000748 <__aeabi_i2d>
 800b7b2:	f04f 0200 	mov.w	r2, #0
 800b7b6:	4b96      	ldr	r3, [pc, #600]	; (800ba10 <SVCCTL_App_Notification+0x320>)
 800b7b8:	f7f4 fd4a 	bl	8000250 <__aeabi_dmul>
 800b7bc:	4602      	mov	r2, r0
 800b7be:	460b      	mov	r3, r1
 800b7c0:	4610      	mov	r0, r2
 800b7c2:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800b7ca:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800b7cc:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800b7d8:	4613      	mov	r3, r2
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	4413      	add	r3, r2
 800b7de:	005b      	lsls	r3, r3, #1
 800b7e0:	9301      	str	r3, [sp, #4]
 800b7e2:	9400      	str	r4, [sp, #0]
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	488a      	ldr	r0, [pc, #552]	; (800ba14 <SVCCTL_App_Notification+0x324>)
 800b7ea:	f001 fc4f 	bl	800d08c <iprintf>
          break;
 800b7ee:	e0ad      	b.n	800b94c <SVCCTL_App_Notification+0x25c>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 800b7f0:	69fb      	ldr	r3, [r7, #28]
 800b7f2:	3301      	adds	r3, #1
 800b7f4:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG("==>> HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE - ");
 800b7f6:	4888      	ldr	r0, [pc, #544]	; (800ba18 <SVCCTL_App_Notification+0x328>)
 800b7f8:	f001 fc48 	bl	800d08c <iprintf>
          if (p_evt_le_phy_update_complete->Status == 0)
 800b7fc:	69bb      	ldr	r3, [r7, #24]
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d103      	bne.n	800b80c <SVCCTL_App_Notification+0x11c>
            APP_DBG_MSG("status ok \n");
 800b804:	4885      	ldr	r0, [pc, #532]	; (800ba1c <SVCCTL_App_Notification+0x32c>)
 800b806:	f001 fcaf 	bl	800d168 <puts>
 800b80a:	e002      	b.n	800b812 <SVCCTL_App_Notification+0x122>
            APP_DBG_MSG("status nok \n");
 800b80c:	4884      	ldr	r0, [pc, #528]	; (800ba20 <SVCCTL_App_Notification+0x330>)
 800b80e:	f001 fcab 	bl	800d168 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 800b812:	4b7a      	ldr	r3, [pc, #488]	; (800b9fc <SVCCTL_App_Notification+0x30c>)
 800b814:	8adb      	ldrh	r3, [r3, #22]
 800b816:	f107 020a 	add.w	r2, r7, #10
 800b81a:	f107 010b 	add.w	r1, r7, #11
 800b81e:	4618      	mov	r0, r3
 800b820:	f7fd fee9 	bl	80095f6 <hci_le_read_phy>
 800b824:	4603      	mov	r3, r0
 800b826:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800b82a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d003      	beq.n	800b83a <SVCCTL_App_Notification+0x14a>
            APP_DBG_MSG("==>> hci_le_read_phy : fail\n\r");
 800b832:	487c      	ldr	r0, [pc, #496]	; (800ba24 <SVCCTL_App_Notification+0x334>)
 800b834:	f001 fc2a 	bl	800d08c <iprintf>
          break;
 800b838:	e088      	b.n	800b94c <SVCCTL_App_Notification+0x25c>
            APP_DBG_MSG("==>> hci_le_read_phy - Success \n");
 800b83a:	487b      	ldr	r0, [pc, #492]	; (800ba28 <SVCCTL_App_Notification+0x338>)
 800b83c:	f001 fc94 	bl	800d168 <puts>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 800b840:	7afb      	ldrb	r3, [r7, #11]
 800b842:	2b02      	cmp	r3, #2
 800b844:	d10a      	bne.n	800b85c <SVCCTL_App_Notification+0x16c>
 800b846:	7abb      	ldrb	r3, [r7, #10]
 800b848:	2b02      	cmp	r3, #2
 800b84a:	d107      	bne.n	800b85c <SVCCTL_App_Notification+0x16c>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 800b84c:	7afb      	ldrb	r3, [r7, #11]
 800b84e:	4619      	mov	r1, r3
 800b850:	7abb      	ldrb	r3, [r7, #10]
 800b852:	461a      	mov	r2, r3
 800b854:	4875      	ldr	r0, [pc, #468]	; (800ba2c <SVCCTL_App_Notification+0x33c>)
 800b856:	f001 fc19 	bl	800d08c <iprintf>
          break;
 800b85a:	e077      	b.n	800b94c <SVCCTL_App_Notification+0x25c>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 800b85c:	7afb      	ldrb	r3, [r7, #11]
 800b85e:	4619      	mov	r1, r3
 800b860:	7abb      	ldrb	r3, [r7, #10]
 800b862:	461a      	mov	r2, r3
 800b864:	4871      	ldr	r0, [pc, #452]	; (800ba2c <SVCCTL_App_Notification+0x33c>)
 800b866:	f001 fc11 	bl	800d08c <iprintf>
          break;
 800b86a:	e06f      	b.n	800b94c <SVCCTL_App_Notification+0x25c>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800b86c:	69fb      	ldr	r3, [r7, #28]
 800b86e:	3301      	adds	r3, #1
 800b870:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800b872:	4b62      	ldr	r3, [pc, #392]	; (800b9fc <SVCCTL_App_Notification+0x30c>)
 800b874:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b878:	4618      	mov	r0, r3
 800b87a:	f7f6 fcab 	bl	80021d4 <HW_TS_Stop>
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b884:	b29b      	uxth	r3, r3
 800b886:	4619      	mov	r1, r3
 800b888:	4869      	ldr	r0, [pc, #420]	; (800ba30 <SVCCTL_App_Notification+0x340>)
 800b88a:	f001 fbff 	bl	800d08c <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800b892:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800b898:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800b89e:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800b8a4:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800b8aa:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800b8b0:	9302      	str	r3, [sp, #8]
 800b8b2:	9101      	str	r1, [sp, #4]
 800b8b4:	9200      	str	r2, [sp, #0]
 800b8b6:	462b      	mov	r3, r5
 800b8b8:	4622      	mov	r2, r4
 800b8ba:	4601      	mov	r1, r0
 800b8bc:	485d      	ldr	r0, [pc, #372]	; (800ba34 <SVCCTL_App_Notification+0x344>)
 800b8be:	f001 fbe5 	bl	800d08c <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800b8c8:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7f4 ff3c 	bl	8000748 <__aeabi_i2d>
 800b8d0:	f04f 0200 	mov.w	r2, #0
 800b8d4:	4b4e      	ldr	r3, [pc, #312]	; (800ba10 <SVCCTL_App_Notification+0x320>)
 800b8d6:	f7f4 fcbb 	bl	8000250 <__aeabi_dmul>
 800b8da:	4602      	mov	r2, r0
 800b8dc:	460b      	mov	r3, r1
 800b8de:	4610      	mov	r0, r2
 800b8e0:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800b8e8:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800b8ea:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800b8f2:	b29b      	uxth	r3, r3
 800b8f4:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800b8f6:	4613      	mov	r3, r2
 800b8f8:	009b      	lsls	r3, r3, #2
 800b8fa:	4413      	add	r3, r2
 800b8fc:	005b      	lsls	r3, r3, #1
 800b8fe:	9301      	str	r3, [sp, #4]
 800b900:	9400      	str	r4, [sp, #0]
 800b902:	4602      	mov	r2, r0
 800b904:	460b      	mov	r3, r1
 800b906:	4843      	ldr	r0, [pc, #268]	; (800ba14 <SVCCTL_App_Notification+0x324>)
 800b908:	f001 fbc0 	bl	800d08c <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800b90c:	4b3b      	ldr	r3, [pc, #236]	; (800b9fc <SVCCTL_App_Notification+0x30c>)
 800b90e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b912:	2b04      	cmp	r3, #4
 800b914:	d104      	bne.n	800b920 <SVCCTL_App_Notification+0x230>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800b916:	4b39      	ldr	r3, [pc, #228]	; (800b9fc <SVCCTL_App_Notification+0x30c>)
 800b918:	2206      	movs	r2, #6
 800b91a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800b91e:	e003      	b.n	800b928 <SVCCTL_App_Notification+0x238>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800b920:	4b36      	ldr	r3, [pc, #216]	; (800b9fc <SVCCTL_App_Notification+0x30c>)
 800b922:	2205      	movs	r2, #5
 800b924:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b92e:	b29a      	uxth	r2, r3
 800b930:	4b32      	ldr	r3, [pc, #200]	; (800b9fc <SVCCTL_App_Notification+0x30c>)
 800b932:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 800b934:	4b34      	ldr	r3, [pc, #208]	; (800ba08 <SVCCTL_App_Notification+0x318>)
 800b936:	2200      	movs	r2, #0
 800b938:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800b93a:	4b30      	ldr	r3, [pc, #192]	; (800b9fc <SVCCTL_App_Notification+0x30c>)
 800b93c:	8ada      	ldrh	r2, [r3, #22]
 800b93e:	4b32      	ldr	r3, [pc, #200]	; (800ba08 <SVCCTL_App_Notification+0x318>)
 800b940:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 800b942:	4831      	ldr	r0, [pc, #196]	; (800ba08 <SVCCTL_App_Notification+0x318>)
 800b944:	f000 fda4 	bl	800c490 <P2PS_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800b948:	e000      	b.n	800b94c <SVCCTL_App_Notification+0x25c>
          break;
 800b94a:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800b94c:	e107      	b.n	800bb5e <SVCCTL_App_Notification+0x46e>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800b94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b950:	3302      	adds	r3, #2
 800b952:	627b      	str	r3, [r7, #36]	; 0x24
      switch (p_blecore_evt->ecode)
 800b954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b956:	881b      	ldrh	r3, [r3, #0]
 800b958:	b29b      	uxth	r3, r3
 800b95a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b95e:	f000 80e7 	beq.w	800bb30 <SVCCTL_App_Notification+0x440>
 800b962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b966:	f300 80f9 	bgt.w	800bb5c <SVCCTL_App_Notification+0x46c>
 800b96a:	2b04      	cmp	r3, #4
 800b96c:	f000 80e8 	beq.w	800bb40 <SVCCTL_App_Notification+0x450>
 800b970:	2b04      	cmp	r3, #4
 800b972:	f2c0 80f3 	blt.w	800bb5c <SVCCTL_App_Notification+0x46c>
 800b976:	f240 420a 	movw	r2, #1034	; 0x40a
 800b97a:	4293      	cmp	r3, r2
 800b97c:	f300 80ee 	bgt.w	800bb5c <SVCCTL_App_Notification+0x46c>
 800b980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b984:	f2c0 80ea 	blt.w	800bb5c <SVCCTL_App_Notification+0x46c>
 800b988:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800b98c:	2b0a      	cmp	r3, #10
 800b98e:	f200 80e5 	bhi.w	800bb5c <SVCCTL_App_Notification+0x46c>
 800b992:	a201      	add	r2, pc, #4	; (adr r2, 800b998 <SVCCTL_App_Notification+0x2a8>)
 800b994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b998:	0800b9c5 	.word	0x0800b9c5
 800b99c:	0800bafb 	.word	0x0800bafb
 800b9a0:	0800b9cd 	.word	0x0800b9cd
 800b9a4:	0800ba51 	.word	0x0800ba51
 800b9a8:	0800ba59 	.word	0x0800ba59
 800b9ac:	0800ba61 	.word	0x0800ba61
 800b9b0:	0800bb5d 	.word	0x0800bb5d
 800b9b4:	0800bb39 	.word	0x0800bb39
 800b9b8:	0800ba95 	.word	0x0800ba95
 800b9bc:	0800baa5 	.word	0x0800baa5
 800b9c0:	0800ba9d 	.word	0x0800ba9d
          APP_DBG_MSG(">>== ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE \n");
 800b9c4:	481c      	ldr	r0, [pc, #112]	; (800ba38 <SVCCTL_App_Notification+0x348>)
 800b9c6:	f001 fbcf 	bl	800d168 <puts>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 800b9ca:	e0c4      	b.n	800bb56 <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800b9cc:	481b      	ldr	r0, [pc, #108]	; (800ba3c <SVCCTL_App_Notification+0x34c>)
 800b9ce:	f001 fbcb 	bl	800d168 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,123456);
 800b9d2:	4b0a      	ldr	r3, [pc, #40]	; (800b9fc <SVCCTL_App_Notification+0x30c>)
 800b9d4:	8adb      	ldrh	r3, [r3, #22]
 800b9d6:	491a      	ldr	r1, [pc, #104]	; (800ba40 <SVCCTL_App_Notification+0x350>)
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f7fc ff97 	bl	800890c <aci_gap_pass_key_resp>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800b9e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d02d      	beq.n	800ba48 <SVCCTL_App_Notification+0x358>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800b9ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	4814      	ldr	r0, [pc, #80]	; (800ba44 <SVCCTL_App_Notification+0x354>)
 800b9f4:	f001 fb4a 	bl	800d08c <iprintf>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 800b9f8:	e0ad      	b.n	800bb56 <SVCCTL_App_Notification+0x466>
 800b9fa:	bf00      	nop
 800b9fc:	200015c0 	.word	0x200015c0
 800ba00:	0800e454 	.word	0x0800e454
 800ba04:	0800e480 	.word	0x0800e480
 800ba08:	20001648 	.word	0x20001648
 800ba0c:	0800e4bc 	.word	0x0800e4bc
 800ba10:	3ff40000 	.word	0x3ff40000
 800ba14:	0800e4f0 	.word	0x0800e4f0
 800ba18:	0800e55c 	.word	0x0800e55c
 800ba1c:	0800e58c 	.word	0x0800e58c
 800ba20:	0800e598 	.word	0x0800e598
 800ba24:	0800e5a4 	.word	0x0800e5a4
 800ba28:	0800e5c4 	.word	0x0800e5c4
 800ba2c:	0800e5e4 	.word	0x0800e5e4
 800ba30:	0800e608 	.word	0x0800e608
 800ba34:	0800e650 	.word	0x0800e650
 800ba38:	0800e6a0 	.word	0x0800e6a0
 800ba3c:	0800e6d0 	.word	0x0800e6d0
 800ba40:	0001e240 	.word	0x0001e240
 800ba44:	0800e6f8 	.word	0x0800e6f8
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800ba48:	4847      	ldr	r0, [pc, #284]	; (800bb68 <SVCCTL_App_Notification+0x478>)
 800ba4a:	f001 fb8d 	bl	800d168 <puts>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 800ba4e:	e082      	b.n	800bb56 <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG(">>== ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE\n");
 800ba50:	4846      	ldr	r0, [pc, #280]	; (800bb6c <SVCCTL_App_Notification+0x47c>)
 800ba52:	f001 fb89 	bl	800d168 <puts>
          break; /* ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE */
 800ba56:	e07e      	b.n	800bb56 <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG("==>> ACI_GAP_PERIPHERAL_SECURITY_INITIATED_VSEVT_CODE \n");
 800ba58:	4845      	ldr	r0, [pc, #276]	; (800bb70 <SVCCTL_App_Notification+0x480>)
 800ba5a:	f001 fb85 	bl	800d168 <puts>
          break; /* ACI_GAP_PERIPHERAL_SECURITY_INITIATED_VSEVT_CODE */
 800ba5e:	e07a      	b.n	800bb56 <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG("==>> ACI_GAP_BOND_LOST_VSEVT_CODE \n");
 800ba60:	4844      	ldr	r0, [pc, #272]	; (800bb74 <SVCCTL_App_Notification+0x484>)
 800ba62:	f001 fb81 	bl	800d168 <puts>
          ret = aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800ba66:	4b44      	ldr	r3, [pc, #272]	; (800bb78 <SVCCTL_App_Notification+0x488>)
 800ba68:	8adb      	ldrh	r3, [r3, #22]
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7fd f8f8 	bl	8008c60 <aci_gap_allow_rebond>
 800ba70:	4603      	mov	r3, r0
 800ba72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800ba76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d006      	beq.n	800ba8c <SVCCTL_App_Notification+0x39c>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Fail, reason: 0x%x\n", ret);
 800ba7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba82:	4619      	mov	r1, r3
 800ba84:	483d      	ldr	r0, [pc, #244]	; (800bb7c <SVCCTL_App_Notification+0x48c>)
 800ba86:	f001 fb01 	bl	800d08c <iprintf>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 800ba8a:	e064      	b.n	800bb56 <SVCCTL_App_Notification+0x466>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Success \n");
 800ba8c:	483c      	ldr	r0, [pc, #240]	; (800bb80 <SVCCTL_App_Notification+0x490>)
 800ba8e:	f001 fb6b 	bl	800d168 <puts>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 800ba92:	e060      	b.n	800bb56 <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG(">>== ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE \n");
 800ba94:	483b      	ldr	r0, [pc, #236]	; (800bb84 <SVCCTL_App_Notification+0x494>)
 800ba96:	f001 fb67 	bl	800d168 <puts>
          break; /* ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE */
 800ba9a:	e05c      	b.n	800bb56 <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800ba9c:	483a      	ldr	r0, [pc, #232]	; (800bb88 <SVCCTL_App_Notification+0x498>)
 800ba9e:	f001 fb63 	bl	800d168 <puts>
          break; /* ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE */    
 800baa2:	e058      	b.n	800bb56 <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800baa4:	4839      	ldr	r0, [pc, #228]	; (800bb8c <SVCCTL_App_Notification+0x49c>)
 800baa6:	f001 fb5f 	bl	800d168 <puts>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800baaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baac:	3302      	adds	r3, #2
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800baae:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800bab2:	4619      	mov	r1, r3
 800bab4:	4836      	ldr	r0, [pc, #216]	; (800bb90 <SVCCTL_App_Notification+0x4a0>)
 800bab6:	f001 fae9 	bl	800d08c <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 800baba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babc:	3302      	adds	r3, #2
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800babe:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800bac2:	4619      	mov	r1, r3
 800bac4:	4833      	ldr	r0, [pc, #204]	; (800bb94 <SVCCTL_App_Notification+0x4a4>)
 800bac6:	f001 fae1 	bl	800d08c <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES); /* CONFIRM_YES = 1 */
 800baca:	4b2b      	ldr	r3, [pc, #172]	; (800bb78 <SVCCTL_App_Notification+0x488>)
 800bacc:	8adb      	ldrh	r3, [r3, #22]
 800bace:	2101      	movs	r1, #1
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7fd f919 	bl	8008d08 <aci_gap_numeric_comparison_value_confirm_yesno>
 800bad6:	4603      	mov	r3, r0
 800bad8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 800badc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d006      	beq.n	800baf2 <SVCCTL_App_Notification+0x402>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800bae4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bae8:	4619      	mov	r1, r3
 800baea:	482b      	ldr	r0, [pc, #172]	; (800bb98 <SVCCTL_App_Notification+0x4a8>)
 800baec:	f001 face 	bl	800d08c <iprintf>
          break;
 800baf0:	e031      	b.n	800bb56 <SVCCTL_App_Notification+0x466>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800baf2:	482a      	ldr	r0, [pc, #168]	; (800bb9c <SVCCTL_App_Notification+0x4ac>)
 800baf4:	f001 fb38 	bl	800d168 <puts>
          break;
 800baf8:	e02d      	b.n	800bb56 <SVCCTL_App_Notification+0x466>
          pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800bafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafc:	3302      	adds	r3, #2
 800bafe:	623b      	str	r3, [r7, #32]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800bb00:	4827      	ldr	r0, [pc, #156]	; (800bba0 <SVCCTL_App_Notification+0x4b0>)
 800bb02:	f001 fb31 	bl	800d168 <puts>
          if (pairing_complete->Status == 0)
 800bb06:	6a3b      	ldr	r3, [r7, #32]
 800bb08:	789b      	ldrb	r3, [r3, #2]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d103      	bne.n	800bb16 <SVCCTL_App_Notification+0x426>
            APP_DBG_MSG("     - Pairing Success\n");
 800bb0e:	4825      	ldr	r0, [pc, #148]	; (800bba4 <SVCCTL_App_Notification+0x4b4>)
 800bb10:	f001 fb2a 	bl	800d168 <puts>
 800bb14:	e008      	b.n	800bb28 <SVCCTL_App_Notification+0x438>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n",pairing_complete->Status, pairing_complete->Reason);
 800bb16:	6a3b      	ldr	r3, [r7, #32]
 800bb18:	789b      	ldrb	r3, [r3, #2]
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	6a3b      	ldr	r3, [r7, #32]
 800bb1e:	78db      	ldrb	r3, [r3, #3]
 800bb20:	461a      	mov	r2, r3
 800bb22:	4821      	ldr	r0, [pc, #132]	; (800bba8 <SVCCTL_App_Notification+0x4b8>)
 800bb24:	f001 fab2 	bl	800d08c <iprintf>
          APP_DBG_MSG("\n");
 800bb28:	200a      	movs	r0, #10
 800bb2a:	f001 fac1 	bl	800d0b0 <putchar>
          break;    
 800bb2e:	e012      	b.n	800bb56 <SVCCTL_App_Notification+0x466>
          mutex = 1;
 800bb30:	4b1e      	ldr	r3, [pc, #120]	; (800bbac <SVCCTL_App_Notification+0x4bc>)
 800bb32:	2201      	movs	r2, #1
 800bb34:	701a      	strb	r2, [r3, #0]
          break;
 800bb36:	e00e      	b.n	800bb56 <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800bb38:	481d      	ldr	r0, [pc, #116]	; (800bbb0 <SVCCTL_App_Notification+0x4c0>)
 800bb3a:	f001 faa7 	bl	800d08c <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800bb3e:	e00a      	b.n	800bb56 <SVCCTL_App_Notification+0x466>
          BSP_LED_On(LED_GREEN);
 800bb40:	2001      	movs	r0, #1
 800bb42:	f7f7 fa09 	bl	8002f58 <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 800bb46:	4b0c      	ldr	r3, [pc, #48]	; (800bb78 <SVCCTL_App_Notification+0x488>)
 800bb48:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 800bb4c:	210a      	movs	r1, #10
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7f6 fbc4 	bl	80022dc <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800bb54:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800bb56:	e001      	b.n	800bb5c <SVCCTL_App_Notification+0x46c>
      break;
 800bb58:	bf00      	nop
 800bb5a:	e000      	b.n	800bb5e <SVCCTL_App_Notification+0x46e>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800bb5c:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800bb5e:	2301      	movs	r3, #1
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3730      	adds	r7, #48	; 0x30
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bdb0      	pop	{r4, r5, r7, pc}
 800bb68:	0800e72c 	.word	0x0800e72c
 800bb6c:	0800e754 	.word	0x0800e754
 800bb70:	0800e780 	.word	0x0800e780
 800bb74:	0800e7b8 	.word	0x0800e7b8
 800bb78:	200015c0 	.word	0x200015c0
 800bb7c:	0800e7dc 	.word	0x0800e7dc
 800bb80:	0800e80c 	.word	0x0800e80c
 800bb84:	0800e834 	.word	0x0800e834
 800bb88:	0800e860 	.word	0x0800e860
 800bb8c:	0800e890 	.word	0x0800e890
 800bb90:	0800e8c4 	.word	0x0800e8c4
 800bb94:	0800e8e0 	.word	0x0800e8e0
 800bb98:	0800e8f8 	.word	0x0800e8f8
 800bb9c:	0800e948 	.word	0x0800e948
 800bba0:	0800e990 	.word	0x0800e990
 800bba4:	0800e9bc 	.word	0x0800e9bc
 800bba8:	0800e9d4 	.word	0x0800e9d4
 800bbac:	2000164d 	.word	0x2000164d
 800bbb0:	0800ea10 	.word	0x0800ea10

0800bbb4 <APP_BLE_Key_Button1_Action>:
  return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 800bbb8:	f000 fcaa 	bl	800c510 <P2PS_APP_SW1_Button_Action>
}
 800bbbc:	bf00      	nop
 800bbbe:	bd80      	pop	{r7, pc}

0800bbc0 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	af00      	add	r7, sp, #0
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )    
  UTIL_SEQ_SetTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, CFG_SCH_PRIO_0);
 800bbc4:	2100      	movs	r1, #0
 800bbc6:	2002      	movs	r0, #2
 800bbc8:	f001 f87e 	bl	800ccc8 <UTIL_SEQ_SetTask>
#endif
  
  return;
 800bbcc:	bf00      	nop
}
 800bbce:	bd80      	pop	{r7, pc}

0800bbd0 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	af00      	add	r7, sp, #0
}
 800bbd4:	bf00      	nop
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbdc:	4770      	bx	lr
	...

0800bbe0 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800bbe6:	4b06      	ldr	r3, [pc, #24]	; (800bc00 <Ble_Tl_Init+0x20>)
 800bbe8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800bbea:	4b06      	ldr	r3, [pc, #24]	; (800bc04 <Ble_Tl_Init+0x24>)
 800bbec:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800bbee:	463b      	mov	r3, r7
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	4805      	ldr	r0, [pc, #20]	; (800bc08 <Ble_Tl_Init+0x28>)
 800bbf4:	f7fe f9f6 	bl	8009fe4 <hci_init>

  return;
 800bbf8:	bf00      	nop
}
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	200300d8 	.word	0x200300d8
 800bc04:	0800c33d 	.word	0x0800c33d
 800bc08:	0800c305 	.word	0x0800c305

0800bc0c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800bc0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc0e:	b08d      	sub	sp, #52	; 0x34
 800bc10:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800bc12:	2300      	movs	r3, #0
 800bc14:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bc16:	2392      	movs	r3, #146	; 0x92
 800bc18:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800bc1a:	48a5      	ldr	r0, [pc, #660]	; (800beb0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800bc1c:	f001 faa4 	bl	800d168 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800bc20:	f7fd fcc5 	bl	80095ae <hci_reset>
 800bc24:	4603      	mov	r3, r0
 800bc26:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800bc28:	7dfb      	ldrb	r3, [r7, #23]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d005      	beq.n	800bc3a <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800bc2e:	7dfb      	ldrb	r3, [r7, #23]
 800bc30:	4619      	mov	r1, r3
 800bc32:	48a0      	ldr	r0, [pc, #640]	; (800beb4 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800bc34:	f001 fa2a 	bl	800d08c <iprintf>
 800bc38:	e002      	b.n	800bc40 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800bc3a:	489f      	ldr	r0, [pc, #636]	; (800beb8 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800bc3c:	f001 fa94 	bl	800d168 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800bc40:	f000 fa40 	bl	800c0c4 <BleGetBdAddress>
 800bc44:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800bc46:	693a      	ldr	r2, [r7, #16]
 800bc48:	2106      	movs	r1, #6
 800bc4a:	2000      	movs	r0, #0
 800bc4c:	f7fd fb6f 	bl	800932e <aci_hal_write_config_data>
 800bc50:	4603      	mov	r3, r0
 800bc52:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800bc54:	7dfb      	ldrb	r3, [r7, #23]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d005      	beq.n	800bc66 <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800bc5a:	7dfb      	ldrb	r3, [r7, #23]
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	4897      	ldr	r0, [pc, #604]	; (800bebc <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800bc60:	f001 fa14 	bl	800d08c <iprintf>
 800bc64:	e021      	b.n	800bcaa <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800bc66:	4896      	ldr	r0, [pc, #600]	; (800bec0 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800bc68:	f001 fa7e 	bl	800d168 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	3305      	adds	r3, #5
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	4618      	mov	r0, r3
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	3304      	adds	r3, #4
 800bc78:	781b      	ldrb	r3, [r3, #0]
 800bc7a:	461c      	mov	r4, r3
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	3303      	adds	r3, #3
 800bc80:	781b      	ldrb	r3, [r3, #0]
 800bc82:	461d      	mov	r5, r3
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	3302      	adds	r3, #2
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	3301      	adds	r3, #1
 800bc90:	781b      	ldrb	r3, [r3, #0]
 800bc92:	4619      	mov	r1, r3
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	9302      	str	r3, [sp, #8]
 800bc9a:	9101      	str	r1, [sp, #4]
 800bc9c:	9200      	str	r2, [sp, #0]
 800bc9e:	462b      	mov	r3, r5
 800bca0:	4622      	mov	r2, r4
 800bca2:	4601      	mov	r1, r0
 800bca4:	4887      	ldr	r0, [pc, #540]	; (800bec4 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800bca6:	f001 f9f1 	bl	800d08c <iprintf>
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	3305      	adds	r3, #5
 800bcae:	781a      	ldrb	r2, [r3, #0]
 800bcb0:	4b85      	ldr	r3, [pc, #532]	; (800bec8 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800bcb2:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	3304      	adds	r3, #4
 800bcb8:	781a      	ldrb	r2, [r3, #0]
 800bcba:	4b83      	ldr	r3, [pc, #524]	; (800bec8 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800bcbc:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	3303      	adds	r3, #3
 800bcc2:	781a      	ldrb	r2, [r3, #0]
 800bcc4:	4b80      	ldr	r3, [pc, #512]	; (800bec8 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800bcc6:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	3302      	adds	r3, #2
 800bccc:	781a      	ldrb	r2, [r3, #0]
 800bcce:	4b7e      	ldr	r3, [pc, #504]	; (800bec8 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800bcd0:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	781a      	ldrb	r2, [r3, #0]
 800bcd8:	4b7b      	ldr	r3, [pc, #492]	; (800bec8 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800bcda:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	781a      	ldrb	r2, [r3, #0]
 800bce0:	4b79      	ldr	r3, [pc, #484]	; (800bec8 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800bce2:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800bce4:	4a79      	ldr	r2, [pc, #484]	; (800becc <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800bce6:	2110      	movs	r1, #16
 800bce8:	2018      	movs	r0, #24
 800bcea:	f7fd fb20 	bl	800932e <aci_hal_write_config_data>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800bcf2:	7dfb      	ldrb	r3, [r7, #23]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d005      	beq.n	800bd04 <Ble_Hci_Gap_Gatt_Init+0xf8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800bcf8:	7dfb      	ldrb	r3, [r7, #23]
 800bcfa:	4619      	mov	r1, r3
 800bcfc:	4874      	ldr	r0, [pc, #464]	; (800bed0 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800bcfe:	f001 f9c5 	bl	800d08c <iprintf>
 800bd02:	e002      	b.n	800bd0a <Ble_Hci_Gap_Gatt_Init+0xfe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800bd04:	4873      	ldr	r0, [pc, #460]	; (800bed4 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800bd06:	f001 fa2f 	bl	800d168 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800bd0a:	4a73      	ldr	r2, [pc, #460]	; (800bed8 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800bd0c:	2110      	movs	r1, #16
 800bd0e:	2008      	movs	r0, #8
 800bd10:	f7fd fb0d 	bl	800932e <aci_hal_write_config_data>
 800bd14:	4603      	mov	r3, r0
 800bd16:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800bd18:	7dfb      	ldrb	r3, [r7, #23]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d005      	beq.n	800bd2a <Ble_Hci_Gap_Gatt_Init+0x11e>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800bd1e:	7dfb      	ldrb	r3, [r7, #23]
 800bd20:	4619      	mov	r1, r3
 800bd22:	486e      	ldr	r0, [pc, #440]	; (800bedc <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800bd24:	f001 f9b2 	bl	800d08c <iprintf>
 800bd28:	e002      	b.n	800bd30 <Ble_Hci_Gap_Gatt_Init+0x124>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800bd2a:	486d      	ldr	r0, [pc, #436]	; (800bee0 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800bd2c:	f001 fa1c 	bl	800d168 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800bd30:	2118      	movs	r1, #24
 800bd32:	2001      	movs	r0, #1
 800bd34:	f7fd fb80 	bl	8009438 <aci_hal_set_tx_power_level>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800bd3c:	7dfb      	ldrb	r3, [r7, #23]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d005      	beq.n	800bd4e <Ble_Hci_Gap_Gatt_Init+0x142>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800bd42:	7dfb      	ldrb	r3, [r7, #23]
 800bd44:	4619      	mov	r1, r3
 800bd46:	4867      	ldr	r0, [pc, #412]	; (800bee4 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800bd48:	f001 f9a0 	bl	800d08c <iprintf>
 800bd4c:	e002      	b.n	800bd54 <Ble_Hci_Gap_Gatt_Init+0x148>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800bd4e:	4866      	ldr	r0, [pc, #408]	; (800bee8 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800bd50:	f001 fa0a 	bl	800d168 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800bd54:	f7fd f83f 	bl	8008dd6 <aci_gatt_init>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800bd5c:	7dfb      	ldrb	r3, [r7, #23]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d005      	beq.n	800bd6e <Ble_Hci_Gap_Gatt_Init+0x162>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800bd62:	7dfb      	ldrb	r3, [r7, #23]
 800bd64:	4619      	mov	r1, r3
 800bd66:	4861      	ldr	r0, [pc, #388]	; (800beec <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800bd68:	f001 f990 	bl	800d08c <iprintf>
 800bd6c:	e002      	b.n	800bd74 <Ble_Hci_Gap_Gatt_Init+0x168>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800bd6e:	4860      	ldr	r0, [pc, #384]	; (800bef0 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800bd70:	f001 f9fa 	bl	800d168 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800bd74:	2300      	movs	r3, #0
 800bd76:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800bd78:	7bfb      	ldrb	r3, [r7, #15]
 800bd7a:	f043 0301 	orr.w	r3, r3, #1
 800bd7e:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800bd80:	7bfb      	ldrb	r3, [r7, #15]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d02b      	beq.n	800bdde <Ble_Hci_Gap_Gatt_Init+0x1d2>
  {
    const char *name = "P2PSRV1";
 800bd86:	4b5b      	ldr	r3, [pc, #364]	; (800bef4 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800bd88:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800bd8a:	1dba      	adds	r2, r7, #6
 800bd8c:	7bf8      	ldrb	r0, [r7, #15]
 800bd8e:	1cbb      	adds	r3, r7, #2
 800bd90:	9301      	str	r3, [sp, #4]
 800bd92:	1d3b      	adds	r3, r7, #4
 800bd94:	9300      	str	r3, [sp, #0]
 800bd96:	4613      	mov	r3, r2
 800bd98:	2207      	movs	r2, #7
 800bd9a:	2100      	movs	r1, #0
 800bd9c:	f7fc fe1d 	bl	80089da <aci_gap_init>
 800bda0:	4603      	mov	r3, r0
 800bda2:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800bda4:	7dfb      	ldrb	r3, [r7, #23]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d005      	beq.n	800bdb6 <Ble_Hci_Gap_Gatt_Init+0x1aa>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800bdaa:	7dfb      	ldrb	r3, [r7, #23]
 800bdac:	4619      	mov	r1, r3
 800bdae:	4852      	ldr	r0, [pc, #328]	; (800bef8 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800bdb0:	f001 f96c 	bl	800d08c <iprintf>
 800bdb4:	e002      	b.n	800bdbc <Ble_Hci_Gap_Gatt_Init+0x1b0>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800bdb6:	4851      	ldr	r0, [pc, #324]	; (800befc <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 800bdb8:	f001 f9d6 	bl	800d168 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800bdbc:	88fc      	ldrh	r4, [r7, #6]
 800bdbe:	88bd      	ldrh	r5, [r7, #4]
 800bdc0:	68b8      	ldr	r0, [r7, #8]
 800bdc2:	f7f4 f9e7 	bl	8000194 <strlen>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	b2da      	uxtb	r2, r3
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	9300      	str	r3, [sp, #0]
 800bdce:	4613      	mov	r3, r2
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	4629      	mov	r1, r5
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	f7fd fa01 	bl	80091dc <aci_gatt_update_char_value>
 800bdda:	4603      	mov	r3, r0
 800bddc:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800bdde:	88f8      	ldrh	r0, [r7, #6]
 800bde0:	8879      	ldrh	r1, [r7, #2]
 800bde2:	463b      	mov	r3, r7
 800bde4:	9300      	str	r3, [sp, #0]
 800bde6:	2302      	movs	r3, #2
 800bde8:	2200      	movs	r2, #0
 800bdea:	f7fd f9f7 	bl	80091dc <aci_gatt_update_char_value>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800bdf2:	2202      	movs	r2, #2
 800bdf4:	2102      	movs	r1, #2
 800bdf6:	2000      	movs	r0, #0
 800bdf8:	f7fd fc7b 	bl	80096f2 <hci_le_set_default_phy>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800be00:	7dfb      	ldrb	r3, [r7, #23]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d005      	beq.n	800be12 <Ble_Hci_Gap_Gatt_Init+0x206>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800be06:	7dfb      	ldrb	r3, [r7, #23]
 800be08:	4619      	mov	r1, r3
 800be0a:	483d      	ldr	r0, [pc, #244]	; (800bf00 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 800be0c:	f001 f93e 	bl	800d08c <iprintf>
 800be10:	e002      	b.n	800be18 <Ble_Hci_Gap_Gatt_Init+0x20c>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800be12:	483c      	ldr	r0, [pc, #240]	; (800bf04 <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 800be14:	f001 f9a8 	bl	800d168 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800be18:	4b3b      	ldr	r3, [pc, #236]	; (800bf08 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800be1a:	2201      	movs	r2, #1
 800be1c:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800be1e:	4b3a      	ldr	r3, [pc, #232]	; (800bf08 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	4618      	mov	r0, r3
 800be24:	f7fc fc5a 	bl	80086dc <aci_gap_set_io_capability>
 800be28:	4603      	mov	r3, r0
 800be2a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800be2c:	7dfb      	ldrb	r3, [r7, #23]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d005      	beq.n	800be3e <Ble_Hci_Gap_Gatt_Init+0x232>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800be32:	7dfb      	ldrb	r3, [r7, #23]
 800be34:	4619      	mov	r1, r3
 800be36:	4835      	ldr	r0, [pc, #212]	; (800bf0c <Ble_Hci_Gap_Gatt_Init+0x300>)
 800be38:	f001 f928 	bl	800d08c <iprintf>
 800be3c:	e002      	b.n	800be44 <Ble_Hci_Gap_Gatt_Init+0x238>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800be3e:	4834      	ldr	r0, [pc, #208]	; (800bf10 <Ble_Hci_Gap_Gatt_Init+0x304>)
 800be40:	f001 f992 	bl	800d168 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800be44:	4b30      	ldr	r3, [pc, #192]	; (800bf08 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800be46:	2201      	movs	r2, #1
 800be48:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800be4a:	4b2f      	ldr	r3, [pc, #188]	; (800bf08 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800be4c:	2208      	movs	r2, #8
 800be4e:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800be50:	4b2d      	ldr	r3, [pc, #180]	; (800bf08 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800be52:	2210      	movs	r2, #16
 800be54:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800be56:	4b2c      	ldr	r3, [pc, #176]	; (800bf08 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800be58:	2200      	movs	r2, #0
 800be5a:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800be5c:	4b2a      	ldr	r3, [pc, #168]	; (800bf08 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800be5e:	4a2d      	ldr	r2, [pc, #180]	; (800bf14 <Ble_Hci_Gap_Gatt_Init+0x308>)
 800be60:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800be62:	4b29      	ldr	r3, [pc, #164]	; (800bf08 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800be64:	2201      	movs	r2, #1
 800be66:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800be68:	4b27      	ldr	r3, [pc, #156]	; (800bf08 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800be6a:	789c      	ldrb	r4, [r3, #2]
 800be6c:	4b26      	ldr	r3, [pc, #152]	; (800bf08 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800be6e:	785d      	ldrb	r5, [r3, #1]
 800be70:	4b25      	ldr	r3, [pc, #148]	; (800bf08 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800be72:	791b      	ldrb	r3, [r3, #4]
 800be74:	4a24      	ldr	r2, [pc, #144]	; (800bf08 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800be76:	7952      	ldrb	r2, [r2, #5]
 800be78:	4923      	ldr	r1, [pc, #140]	; (800bf08 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800be7a:	78c9      	ldrb	r1, [r1, #3]
 800be7c:	4822      	ldr	r0, [pc, #136]	; (800bf08 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 800be7e:	6880      	ldr	r0, [r0, #8]
 800be80:	2600      	movs	r6, #0
 800be82:	9604      	str	r6, [sp, #16]
 800be84:	9003      	str	r0, [sp, #12]
 800be86:	9102      	str	r1, [sp, #8]
 800be88:	9201      	str	r2, [sp, #4]
 800be8a:	9300      	str	r3, [sp, #0]
 800be8c:	2300      	movs	r3, #0
 800be8e:	2201      	movs	r2, #1
 800be90:	4629      	mov	r1, r5
 800be92:	4620      	mov	r0, r4
 800be94:	f7fc fc76 	bl	8008784 <aci_gap_set_authentication_requirement>
 800be98:	4603      	mov	r3, r0
 800be9a:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800be9c:	7dfb      	ldrb	r3, [r7, #23]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d03c      	beq.n	800bf1c <Ble_Hci_Gap_Gatt_Init+0x310>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800bea2:	7dfb      	ldrb	r3, [r7, #23]
 800bea4:	4619      	mov	r1, r3
 800bea6:	481c      	ldr	r0, [pc, #112]	; (800bf18 <Ble_Hci_Gap_Gatt_Init+0x30c>)
 800bea8:	f001 f8f0 	bl	800d08c <iprintf>
 800beac:	e039      	b.n	800bf22 <Ble_Hci_Gap_Gatt_Init+0x316>
 800beae:	bf00      	nop
 800beb0:	0800ea38 	.word	0x0800ea38
 800beb4:	0800ea64 	.word	0x0800ea64
 800beb8:	0800ea94 	.word	0x0800ea94
 800bebc:	0800eab4 	.word	0x0800eab4
 800bec0:	0800eb10 	.word	0x0800eb10
 800bec4:	0800eb5c 	.word	0x0800eb5c
 800bec8:	20000034 	.word	0x20000034
 800becc:	0800f608 	.word	0x0800f608
 800bed0:	0800eb98 	.word	0x0800eb98
 800bed4:	0800ebf0 	.word	0x0800ebf0
 800bed8:	0800f618 	.word	0x0800f618
 800bedc:	0800ec38 	.word	0x0800ec38
 800bee0:	0800ec90 	.word	0x0800ec90
 800bee4:	0800ecd8 	.word	0x0800ecd8
 800bee8:	0800ed18 	.word	0x0800ed18
 800beec:	0800ed48 	.word	0x0800ed48
 800bef0:	0800ed7c 	.word	0x0800ed7c
 800bef4:	0800eda0 	.word	0x0800eda0
 800bef8:	0800eda8 	.word	0x0800eda8
 800befc:	0800edd8 	.word	0x0800edd8
 800bf00:	0800edf8 	.word	0x0800edf8
 800bf04:	0800ee34 	.word	0x0800ee34
 800bf08:	200015c0 	.word	0x200015c0
 800bf0c:	0800ee60 	.word	0x0800ee60
 800bf10:	0800eea0 	.word	0x0800eea0
 800bf14:	0001b207 	.word	0x0001b207
 800bf18:	0800eed0 	.word	0x0800eed0
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800bf1c:	480e      	ldr	r0, [pc, #56]	; (800bf58 <Ble_Hci_Gap_Gatt_Init+0x34c>)
 800bf1e:	f001 f923 	bl	800d168 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800bf22:	4b0e      	ldr	r3, [pc, #56]	; (800bf5c <Ble_Hci_Gap_Gatt_Init+0x350>)
 800bf24:	789b      	ldrb	r3, [r3, #2]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00f      	beq.n	800bf4a <Ble_Hci_Gap_Gatt_Init+0x33e>
  {
    ret = aci_gap_configure_whitelist();
 800bf2a:	f7fc fe75 	bl	8008c18 <aci_gap_configure_filter_accept_list>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800bf32:	7dfb      	ldrb	r3, [r7, #23]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d005      	beq.n	800bf44 <Ble_Hci_Gap_Gatt_Init+0x338>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800bf38:	7dfb      	ldrb	r3, [r7, #23]
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	4808      	ldr	r0, [pc, #32]	; (800bf60 <Ble_Hci_Gap_Gatt_Init+0x354>)
 800bf3e:	f001 f8a5 	bl	800d08c <iprintf>
 800bf42:	e002      	b.n	800bf4a <Ble_Hci_Gap_Gatt_Init+0x33e>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800bf44:	4807      	ldr	r0, [pc, #28]	; (800bf64 <Ble_Hci_Gap_Gatt_Init+0x358>)
 800bf46:	f001 f90f 	bl	800d168 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800bf4a:	4807      	ldr	r0, [pc, #28]	; (800bf68 <Ble_Hci_Gap_Gatt_Init+0x35c>)
 800bf4c:	f001 f89e 	bl	800d08c <iprintf>
}
 800bf50:	bf00      	nop
 800bf52:	371c      	adds	r7, #28
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf58:	0800ef1c 	.word	0x0800ef1c
 800bf5c:	200015c0 	.word	0x200015c0
 800bf60:	0800ef58 	.word	0x0800ef58
 800bf64:	0800ef98 	.word	0x0800ef98
 800bf68:	0800efc8 	.word	0x0800efc8

0800bf6c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b08c      	sub	sp, #48	; 0x30
 800bf70:	af08      	add	r7, sp, #32
 800bf72:	4603      	mov	r3, r0
 800bf74:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bf76:	2392      	movs	r3, #146	; 0x92
 800bf78:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 800bf7a:	79fb      	ldrb	r3, [r7, #7]
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d106      	bne.n	800bf8e <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800bf80:	4b41      	ldr	r3, [pc, #260]	; (800c088 <Adv_Request+0x11c>)
 800bf82:	881b      	ldrh	r3, [r3, #0]
 800bf84:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800bf86:	4b41      	ldr	r3, [pc, #260]	; (800c08c <Adv_Request+0x120>)
 800bf88:	881b      	ldrh	r3, [r3, #0]
 800bf8a:	81bb      	strh	r3, [r7, #12]
 800bf8c:	e005      	b.n	800bf9a <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800bf8e:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800bf92:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800bf94:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800bf98:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800bf9a:	4b3d      	ldr	r3, [pc, #244]	; (800c090 <Adv_Request+0x124>)
 800bf9c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7f6 f917 	bl	80021d4 <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 800bfa6:	79fb      	ldrb	r3, [r7, #7]
 800bfa8:	2b02      	cmp	r3, #2
 800bfaa:	d119      	bne.n	800bfe0 <Adv_Request+0x74>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800bfac:	4b38      	ldr	r3, [pc, #224]	; (800c090 <Adv_Request+0x124>)
 800bfae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	d004      	beq.n	800bfc0 <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 800bfb6:	4b36      	ldr	r3, [pc, #216]	; (800c090 <Adv_Request+0x124>)
 800bfb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bfbc:	2b02      	cmp	r3, #2
 800bfbe:	d10f      	bne.n	800bfe0 <Adv_Request+0x74>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 800bfc0:	f7fc fa6e 	bl	80084a0 <aci_gap_set_non_discoverable>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	72fb      	strb	r3, [r7, #11]
    if (ret != BLE_STATUS_SUCCESS)
 800bfc8:	7afb      	ldrb	r3, [r7, #11]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d005      	beq.n	800bfda <Adv_Request+0x6e>
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Stop Advertising Failed , result: %d \n", ret);
 800bfce:	7afb      	ldrb	r3, [r7, #11]
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	4830      	ldr	r0, [pc, #192]	; (800c094 <Adv_Request+0x128>)
 800bfd4:	f001 f85a 	bl	800d08c <iprintf>
 800bfd8:	e002      	b.n	800bfe0 <Adv_Request+0x74>
    }
    else
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
 800bfda:	482f      	ldr	r0, [pc, #188]	; (800c098 <Adv_Request+0x12c>)
 800bfdc:	f001 f8c4 	bl	800d168 <puts>
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800bfe0:	4a2b      	ldr	r2, [pc, #172]	; (800c090 <Adv_Request+0x124>)
 800bfe2:	79fb      	ldrb	r3, [r7, #7]
 800bfe4:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 800bfe8:	4b29      	ldr	r3, [pc, #164]	; (800c090 <Adv_Request+0x124>)
 800bfea:	7e1b      	ldrb	r3, [r3, #24]
 800bfec:	89ba      	ldrh	r2, [r7, #12]
 800bfee:	89f9      	ldrh	r1, [r7, #14]
 800bff0:	2000      	movs	r0, #0
 800bff2:	9006      	str	r0, [sp, #24]
 800bff4:	2000      	movs	r0, #0
 800bff6:	9005      	str	r0, [sp, #20]
 800bff8:	4828      	ldr	r0, [pc, #160]	; (800c09c <Adv_Request+0x130>)
 800bffa:	9004      	str	r0, [sp, #16]
 800bffc:	9303      	str	r3, [sp, #12]
 800bffe:	4b28      	ldr	r3, [pc, #160]	; (800c0a0 <Adv_Request+0x134>)
 800c000:	9302      	str	r3, [sp, #8]
 800c002:	2308      	movs	r3, #8
 800c004:	9301      	str	r3, [sp, #4]
 800c006:	2300      	movs	r3, #0
 800c008:	9300      	str	r3, [sp, #0]
 800c00a:	2300      	movs	r3, #0
 800c00c:	2000      	movs	r0, #0
 800c00e:	f7fc fa6b 	bl	80084e8 <aci_gap_set_discoverable>
 800c012:	4603      	mov	r3, r0
 800c014:	72fb      	strb	r3, [r7, #11]
                                 (uint8_t*) &a_LocalName,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800c016:	7afb      	ldrb	r3, [r7, #11]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d005      	beq.n	800c028 <Adv_Request+0xbc>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800c01c:	7afb      	ldrb	r3, [r7, #11]
 800c01e:	4619      	mov	r1, r3
 800c020:	4820      	ldr	r0, [pc, #128]	; (800c0a4 <Adv_Request+0x138>)
 800c022:	f001 f833 	bl	800d08c <iprintf>
 800c026:	e002      	b.n	800c02e <Adv_Request+0xc2>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800c028:	481f      	ldr	r0, [pc, #124]	; (800c0a8 <Adv_Request+0x13c>)
 800c02a:	f001 f89d 	bl	800d168 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 800c02e:	491f      	ldr	r1, [pc, #124]	; (800c0ac <Adv_Request+0x140>)
 800c030:	200e      	movs	r0, #14
 800c032:	f7fc fd7f 	bl	8008b34 <aci_gap_update_adv_data>
 800c036:	4603      	mov	r3, r0
 800c038:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 800c03a:	7afb      	ldrb	r3, [r7, #11]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d00e      	beq.n	800c05e <Adv_Request+0xf2>
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 800c040:	79fb      	ldrb	r3, [r7, #7]
 800c042:	2b01      	cmp	r3, #1
 800c044:	d105      	bne.n	800c052 <Adv_Request+0xe6>
    {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800c046:	7afb      	ldrb	r3, [r7, #11]
 800c048:	4619      	mov	r1, r3
 800c04a:	4819      	ldr	r0, [pc, #100]	; (800c0b0 <Adv_Request+0x144>)
 800c04c:	f001 f81e 	bl	800d08c <iprintf>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 800c050:	e017      	b.n	800c082 <Adv_Request+0x116>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
 800c052:	7afb      	ldrb	r3, [r7, #11]
 800c054:	4619      	mov	r1, r3
 800c056:	4817      	ldr	r0, [pc, #92]	; (800c0b4 <Adv_Request+0x148>)
 800c058:	f001 f818 	bl	800d08c <iprintf>
  return;
 800c05c:	e011      	b.n	800c082 <Adv_Request+0x116>
    if (NewStatus == APP_BLE_FAST_ADV)
 800c05e:	79fb      	ldrb	r3, [r7, #7]
 800c060:	2b01      	cmp	r3, #1
 800c062:	d10a      	bne.n	800c07a <Adv_Request+0x10e>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800c064:	4814      	ldr	r0, [pc, #80]	; (800c0b8 <Adv_Request+0x14c>)
 800c066:	f001 f811 	bl	800d08c <iprintf>
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800c06a:	4b09      	ldr	r3, [pc, #36]	; (800c090 <Adv_Request+0x124>)
 800c06c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c070:	4912      	ldr	r1, [pc, #72]	; (800c0bc <Adv_Request+0x150>)
 800c072:	4618      	mov	r0, r3
 800c074:	f7f6 f932 	bl	80022dc <HW_TS_Start>
  return;
 800c078:	e003      	b.n	800c082 <Adv_Request+0x116>
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
 800c07a:	4811      	ldr	r0, [pc, #68]	; (800c0c0 <Adv_Request+0x154>)
 800c07c:	f001 f806 	bl	800d08c <iprintf>
  return;
 800c080:	bf00      	nop
}
 800c082:	3710      	adds	r7, #16
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}
 800c088:	20001644 	.word	0x20001644
 800c08c:	20001646 	.word	0x20001646
 800c090:	200015c0 	.word	0x200015c0
 800c094:	0800eff4 	.word	0x0800eff4
 800c098:	0800f040 	.word	0x0800f040
 800c09c:	200015d9 	.word	0x200015d9
 800c0a0:	0800f628 	.word	0x0800f628
 800c0a4:	0800f088 	.word	0x0800f088
 800c0a8:	0800f0c0 	.word	0x0800f0c0
 800c0ac:	20000034 	.word	0x20000034
 800c0b0:	0800f0e8 	.word	0x0800f0e8
 800c0b4:	0800f11c 	.word	0x0800f11c
 800c0b8:	0800f154 	.word	0x0800f154
 800c0bc:	0001e046 	.word	0x0001e046
 800c0c0:	0800f17c 	.word	0x0800f17c

0800c0c4 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b086      	sub	sp, #24
 800c0c8:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800c0ca:	f7ff fa45 	bl	800b558 <LL_FLASH_GetUDN>
 800c0ce:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0d6:	d023      	beq.n	800c120 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800c0d8:	f7ff fa56 	bl	800b588 <LL_FLASH_GetSTCompanyID>
 800c0dc:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800c0de:	f7ff fa47 	bl	800b570 <LL_FLASH_GetDeviceID>
 800c0e2:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	b2da      	uxtb	r2, r3
 800c0e8:	4b16      	ldr	r3, [pc, #88]	; (800c144 <BleGetBdAddress+0x80>)
 800c0ea:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	0a1b      	lsrs	r3, r3, #8
 800c0f0:	b2da      	uxtb	r2, r3
 800c0f2:	4b14      	ldr	r3, [pc, #80]	; (800c144 <BleGetBdAddress+0x80>)
 800c0f4:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	b2da      	uxtb	r2, r3
 800c0fa:	4b12      	ldr	r3, [pc, #72]	; (800c144 <BleGetBdAddress+0x80>)
 800c0fc:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	b2da      	uxtb	r2, r3
 800c102:	4b10      	ldr	r3, [pc, #64]	; (800c144 <BleGetBdAddress+0x80>)
 800c104:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	0a1b      	lsrs	r3, r3, #8
 800c10a:	b2da      	uxtb	r2, r3
 800c10c:	4b0d      	ldr	r3, [pc, #52]	; (800c144 <BleGetBdAddress+0x80>)
 800c10e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	0c1b      	lsrs	r3, r3, #16
 800c114:	b2da      	uxtb	r2, r3
 800c116:	4b0b      	ldr	r3, [pc, #44]	; (800c144 <BleGetBdAddress+0x80>)
 800c118:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800c11a:	4b0a      	ldr	r3, [pc, #40]	; (800c144 <BleGetBdAddress+0x80>)
 800c11c:	617b      	str	r3, [r7, #20]
 800c11e:	e00b      	b.n	800c138 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800c120:	2000      	movs	r0, #0
 800c122:	f7fe fd31 	bl	800ab88 <OTP_Read>
 800c126:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d002      	beq.n	800c134 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	617b      	str	r3, [r7, #20]
 800c132:	e001      	b.n	800c138 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800c134:	4b04      	ldr	r3, [pc, #16]	; (800c148 <BleGetBdAddress+0x84>)
 800c136:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800c138:	697b      	ldr	r3, [r7, #20]
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3718      	adds	r7, #24
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	200015b8 	.word	0x200015b8
 800c148:	0800f600 	.word	0x0800f600

0800c14c <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */
  BSP_LED_Off(LED_GREEN);
 800c152:	2001      	movs	r0, #1
 800c154:	f7f6 ff1a 	bl	8002f8c <BSP_LED_Off>
  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800c158:	4b10      	ldr	r3, [pc, #64]	; (800c19c <Adv_Cancel+0x50>)
 800c15a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c15e:	2b05      	cmp	r3, #5
 800c160:	d017      	beq.n	800c192 <Adv_Cancel+0x46>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c162:	2392      	movs	r3, #146	; 0x92
 800c164:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800c166:	f7fc f99b 	bl	80084a0 <aci_gap_set_non_discoverable>
 800c16a:	4603      	mov	r3, r0
 800c16c:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c16e:	4b0b      	ldr	r3, [pc, #44]	; (800c19c <Adv_Cancel+0x50>)
 800c170:	2200      	movs	r2, #0
 800c172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800c176:	79fb      	ldrb	r3, [r7, #7]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d003      	beq.n	800c184 <Adv_Cancel+0x38>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800c17c:	4808      	ldr	r0, [pc, #32]	; (800c1a0 <Adv_Cancel+0x54>)
 800c17e:	f000 ff85 	bl	800d08c <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800c182:	e006      	b.n	800c192 <Adv_Cancel+0x46>
      APP_DBG_MSG("  \r\n\r");
 800c184:	4807      	ldr	r0, [pc, #28]	; (800c1a4 <Adv_Cancel+0x58>)
 800c186:	f000 ff81 	bl	800d08c <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800c18a:	4807      	ldr	r0, [pc, #28]	; (800c1a8 <Adv_Cancel+0x5c>)
 800c18c:	f000 ff7e 	bl	800d08c <iprintf>
  return;
 800c190:	bf00      	nop
 800c192:	bf00      	nop
}
 800c194:	3708      	adds	r7, #8
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}
 800c19a:	bf00      	nop
 800c19c:	200015c0 	.word	0x200015c0
 800c1a0:	0800f1ac 	.word	0x0800f1ac
 800c1a4:	0800f1d0 	.word	0x0800f1d0
 800c1a8:	0800f1d8 	.word	0x0800f1d8

0800c1ac <Adv_Cancel_Req>:

static void Adv_Cancel_Req(void)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_Req_1 */

  /* USER CODE END Adv_Cancel_Req_1 */

  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800c1b0:	2100      	movs	r1, #0
 800c1b2:	2001      	movs	r0, #1
 800c1b4:	f000 fd88 	bl	800ccc8 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN Adv_Cancel_Req_2 */

  /* USER CODE END Adv_Cancel_Req_2 */

  return;
 800c1b8:	bf00      	nop
}
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 800c1c0:	2001      	movs	r0, #1
 800c1c2:	f7f6 fee3 	bl	8002f8c <BSP_LED_Off>
  /* USER CODE END Switch_OFF_GPIO */
}
 800c1c6:	bf00      	nop
 800c1c8:	bd80      	pop	{r7, pc}
	...

0800c1cc <BLE_SVC_L2CAP_Conn_Update>:

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t ConnectionHandle)
{
 800c1cc:	b590      	push	{r4, r7, lr}
 800c1ce:	b089      	sub	sp, #36	; 0x24
 800c1d0:	af02      	add	r7, sp, #8
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */

  if (mutex == 1)
 800c1d6:	4b29      	ldr	r3, [pc, #164]	; (800c27c <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	2b01      	cmp	r3, #1
 800c1dc:	d149      	bne.n	800c272 <BLE_SVC_L2CAP_Conn_Update+0xa6>
  {
    mutex = 0;
 800c1de:	4b27      	ldr	r3, [pc, #156]	; (800c27c <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 800c1e4:	4b26      	ldr	r3, [pc, #152]	; (800c280 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	f003 0301 	and.w	r3, r3, #1
 800c1f0:	bfb8      	it	lt
 800c1f2:	425b      	neglt	r3, r3
 800c1f4:	b2da      	uxtb	r2, r3
 800c1f6:	4b22      	ldr	r3, [pc, #136]	; (800c280 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800c1f8:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 800c1fa:	4b21      	ldr	r3, [pc, #132]	; (800c280 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	4a21      	ldr	r2, [pc, #132]	; (800c284 <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	4413      	add	r3, r2
 800c204:	ed93 7a00 	vldr	s14, [r3]
 800c208:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 800c20c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c210:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c214:	ee17 3a90 	vmov	r3, s15
 800c218:	82fb      	strh	r3, [r7, #22]
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 800c21a:	4b19      	ldr	r3, [pc, #100]	; (800c280 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	4a19      	ldr	r2, [pc, #100]	; (800c284 <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 800c220:	009b      	lsls	r3, r3, #2
 800c222:	4413      	add	r3, r2
 800c224:	ed93 7a00 	vldr	s14, [r3]
 800c228:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 800c22c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c230:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c234:	ee17 3a90 	vmov	r3, s15
 800c238:	82bb      	strh	r3, [r7, #20]
    uint16_t peripheral_latency = L2CAP_PERIPHERAL_LATENCY;
 800c23a:	2300      	movs	r3, #0
 800c23c:	827b      	strh	r3, [r7, #18]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 800c23e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c242:	823b      	strh	r3, [r7, #16]
    tBleStatus ret;

    ret = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800c244:	4b10      	ldr	r3, [pc, #64]	; (800c288 <BLE_SVC_L2CAP_Conn_Update+0xbc>)
 800c246:	8ad8      	ldrh	r0, [r3, #22]
 800c248:	8a7c      	ldrh	r4, [r7, #18]
 800c24a:	8aba      	ldrh	r2, [r7, #20]
 800c24c:	8af9      	ldrh	r1, [r7, #22]
 800c24e:	8a3b      	ldrh	r3, [r7, #16]
 800c250:	9300      	str	r3, [sp, #0]
 800c252:	4623      	mov	r3, r4
 800c254:	f7fd faca 	bl	80097ec <aci_l2cap_connection_parameter_update_req>
 800c258:	4603      	mov	r3, r0
 800c25a:	73fb      	strb	r3, [r7, #15]
                                                    interval_min, interval_max,
                                                    peripheral_latency, timeout_multiplier);
    if (ret != BLE_STATUS_SUCCESS)
 800c25c:	7bfb      	ldrb	r3, [r7, #15]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d003      	beq.n	800c26a <BLE_SVC_L2CAP_Conn_Update+0x9e>
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 800c262:	480a      	ldr	r0, [pc, #40]	; (800c28c <BLE_SVC_L2CAP_Conn_Update+0xc0>)
 800c264:	f000 ff12 	bl	800d08c <iprintf>

  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */

  return;
 800c268:	e003      	b.n	800c272 <BLE_SVC_L2CAP_Conn_Update+0xa6>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 800c26a:	4809      	ldr	r0, [pc, #36]	; (800c290 <BLE_SVC_L2CAP_Conn_Update+0xc4>)
 800c26c:	f000 ff0e 	bl	800d08c <iprintf>
  return;
 800c270:	bf00      	nop
 800c272:	bf00      	nop
}
 800c274:	371c      	adds	r7, #28
 800c276:	46bd      	mov	sp, r7
 800c278:	bd90      	pop	{r4, r7, pc}
 800c27a:	bf00      	nop
 800c27c:	2000164d 	.word	0x2000164d
 800c280:	2000164c 	.word	0x2000164c
 800c284:	2000002c 	.word	0x2000002c
 800c288:	200015c0 	.word	0x200015c0
 800c28c:	0800f1f4 	.word	0x0800f1f4
 800c290:	0800f21c 	.word	0x0800f21c

0800c294 <Connection_Interval_Update_Req>:
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
static void Connection_Interval_Update_Req(void)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 800c298:	4b08      	ldr	r3, [pc, #32]	; (800c2bc <Connection_Interval_Update_Req+0x28>)
 800c29a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d00a      	beq.n	800c2b8 <Connection_Interval_Update_Req+0x24>
 800c2a2:	4b06      	ldr	r3, [pc, #24]	; (800c2bc <Connection_Interval_Update_Req+0x28>)
 800c2a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d005      	beq.n	800c2b8 <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800c2ac:	4b03      	ldr	r3, [pc, #12]	; (800c2bc <Connection_Interval_Update_Req+0x28>)
 800c2ae:	8adb      	ldrh	r3, [r3, #22]
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f7ff ff8b 	bl	800c1cc <BLE_SVC_L2CAP_Conn_Update>
  }

  return;
 800c2b6:	bf00      	nop
 800c2b8:	bf00      	nop
}
 800c2ba:	bd80      	pop	{r7, pc}
 800c2bc:	200015c0 	.word	0x200015c0

0800c2c0 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800c2c8:	2100      	movs	r1, #0
 800c2ca:	2004      	movs	r0, #4
 800c2cc:	f000 fcfc 	bl	800ccc8 <UTIL_SEQ_SetTask>

  return;
 800c2d0:	bf00      	nop
}
 800c2d2:	3708      	adds	r7, #8
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b082      	sub	sp, #8
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c2e0:	2001      	movs	r0, #1
 800c2e2:	f000 fd5d 	bl	800cda0 <UTIL_SEQ_SetEvt>

  return;
 800c2e6:	bf00      	nop
}
 800c2e8:	3708      	adds	r7, #8
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}

0800c2ee <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800c2ee:	b580      	push	{r7, lr}
 800c2f0:	b082      	sub	sp, #8
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c2f6:	2001      	movs	r0, #1
 800c2f8:	f000 fd72 	bl	800cde0 <UTIL_SEQ_WaitEvt>

  return;
 800c2fc:	bf00      	nop
}
 800c2fe:	3708      	adds	r7, #8
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}

0800c304 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b084      	sub	sp, #16
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	3308      	adds	r3, #8
 800c316:	4618      	mov	r0, r3
 800c318:	f7fd fd1e 	bl	8009d58 <SVCCTL_UserEvtRx>
 800c31c:	4603      	mov	r3, r0
 800c31e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800c320:	7afb      	ldrb	r3, [r7, #11]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d003      	beq.n	800c32e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2201      	movs	r2, #1
 800c32a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800c32c:	e003      	b.n	800c336 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	2200      	movs	r2, #0
 800c332:	701a      	strb	r2, [r3, #0]
  return;
 800c334:	bf00      	nop
}
 800c336:	3710      	adds	r7, #16
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	4603      	mov	r3, r0
 800c344:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800c346:	79fb      	ldrb	r3, [r7, #7]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d002      	beq.n	800c352 <BLE_StatusNot+0x16>
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d006      	beq.n	800c35e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800c350:	e00b      	b.n	800c36a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800c352:	233f      	movs	r3, #63	; 0x3f
 800c354:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800c356:	68f8      	ldr	r0, [r7, #12]
 800c358:	f000 fce2 	bl	800cd20 <UTIL_SEQ_PauseTask>
      break;
 800c35c:	e005      	b.n	800c36a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800c35e:	233f      	movs	r3, #63	; 0x3f
 800c360:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800c362:	68f8      	ldr	r0, [r7, #12]
 800c364:	f000 fcfc 	bl	800cd60 <UTIL_SEQ_ResumeTask>
      break;
 800c368:	bf00      	nop
  }

  return;
 800c36a:	bf00      	nop
}
 800c36c:	3710      	adds	r7, #16
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
	...

0800c374 <P2PS_STM_App_Notification>:
static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b082      	sub	sp, #8
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	2b03      	cmp	r3, #3
 800c382:	d01a      	beq.n	800c3ba <P2PS_STM_App_Notification+0x46>
 800c384:	2b03      	cmp	r3, #3
 800c386:	dc6b      	bgt.n	800c460 <P2PS_STM_App_Notification+0xec>
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d002      	beq.n	800c392 <P2PS_STM_App_Notification+0x1e>
 800c38c:	2b01      	cmp	r3, #1
 800c38e:	d00a      	beq.n	800c3a6 <P2PS_STM_App_Notification+0x32>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 800c390:	e066      	b.n	800c460 <P2PS_STM_App_Notification+0xec>
      P2P_Server_App_Context.Notification_Status = 1;
 800c392:	4b37      	ldr	r3, [pc, #220]	; (800c470 <P2PS_STM_App_Notification+0xfc>)
 800c394:	2201      	movs	r2, #1
 800c396:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 800c398:	4836      	ldr	r0, [pc, #216]	; (800c474 <P2PS_STM_App_Notification+0x100>)
 800c39a:	f000 fee5 	bl	800d168 <puts>
      APP_DBG_MSG(" \n\r");
 800c39e:	4836      	ldr	r0, [pc, #216]	; (800c478 <P2PS_STM_App_Notification+0x104>)
 800c3a0:	f000 fe74 	bl	800d08c <iprintf>
      break;
 800c3a4:	e05f      	b.n	800c466 <P2PS_STM_App_Notification+0xf2>
      P2P_Server_App_Context.Notification_Status = 0;
 800c3a6:	4b32      	ldr	r3, [pc, #200]	; (800c470 <P2PS_STM_App_Notification+0xfc>)
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 800c3ac:	4833      	ldr	r0, [pc, #204]	; (800c47c <P2PS_STM_App_Notification+0x108>)
 800c3ae:	f000 fedb 	bl	800d168 <puts>
      APP_DBG_MSG(" \n\r");
 800c3b2:	4831      	ldr	r0, [pc, #196]	; (800c478 <P2PS_STM_App_Notification+0x104>)
 800c3b4:	f000 fe6a 	bl	800d08c <iprintf>
      break;
 800c3b8:	e055      	b.n	800c466 <P2PS_STM_App_Notification+0xf2>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	685b      	ldr	r3, [r3, #4]
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d123      	bne.n	800c40c <P2PS_STM_App_Notification+0x98>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	685b      	ldr	r3, [r3, #4]
 800c3c8:	3301      	adds	r3, #1
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	2b01      	cmp	r3, #1
 800c3ce:	d10b      	bne.n	800c3e8 <P2PS_STM_App_Notification+0x74>
          BSP_LED_On(LED_BLUE);
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	f7f6 fdc1 	bl	8002f58 <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 ON\n"); 
 800c3d6:	482a      	ldr	r0, [pc, #168]	; (800c480 <P2PS_STM_App_Notification+0x10c>)
 800c3d8:	f000 fec6 	bl	800d168 <puts>
          APP_DBG_MSG(" \n\r");
 800c3dc:	4826      	ldr	r0, [pc, #152]	; (800c478 <P2PS_STM_App_Notification+0x104>)
 800c3de:	f000 fe55 	bl	800d08c <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 800c3e2:	4b23      	ldr	r3, [pc, #140]	; (800c470 <P2PS_STM_App_Notification+0xfc>)
 800c3e4:	2201      	movs	r2, #1
 800c3e6:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d10b      	bne.n	800c40c <P2PS_STM_App_Notification+0x98>
          BSP_LED_Off(LED_BLUE);
 800c3f4:	2000      	movs	r0, #0
 800c3f6:	f7f6 fdc9 	bl	8002f8c <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 OFF\n"); 
 800c3fa:	4822      	ldr	r0, [pc, #136]	; (800c484 <P2PS_STM_App_Notification+0x110>)
 800c3fc:	f000 feb4 	bl	800d168 <puts>
          APP_DBG_MSG(" \n\r");
 800c400:	481d      	ldr	r0, [pc, #116]	; (800c478 <P2PS_STM_App_Notification+0x104>)
 800c402:	f000 fe43 	bl	800d08c <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 800c406:	4b1a      	ldr	r3, [pc, #104]	; (800c470 <P2PS_STM_App_Notification+0xfc>)
 800c408:	2200      	movs	r2, #0
 800c40a:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	685b      	ldr	r3, [r3, #4]
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	2b01      	cmp	r3, #1
 800c414:	d126      	bne.n	800c464 <P2PS_STM_App_Notification+0xf0>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	3301      	adds	r3, #1
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	2b01      	cmp	r3, #1
 800c420:	d10b      	bne.n	800c43a <P2PS_STM_App_Notification+0xc6>
          BSP_LED_On(LED_BLUE);
 800c422:	2000      	movs	r0, #0
 800c424:	f7f6 fd98 	bl	8002f58 <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 ON\n"); 
 800c428:	4817      	ldr	r0, [pc, #92]	; (800c488 <P2PS_STM_App_Notification+0x114>)
 800c42a:	f000 fe9d 	bl	800d168 <puts>
          APP_DBG_MSG(" \n\r");
 800c42e:	4812      	ldr	r0, [pc, #72]	; (800c478 <P2PS_STM_App_Notification+0x104>)
 800c430:	f000 fe2c 	bl	800d08c <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 800c434:	4b0e      	ldr	r3, [pc, #56]	; (800c470 <P2PS_STM_App_Notification+0xfc>)
 800c436:	2201      	movs	r2, #1
 800c438:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	3301      	adds	r3, #1
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d10e      	bne.n	800c464 <P2PS_STM_App_Notification+0xf0>
          BSP_LED_Off(LED_BLUE);
 800c446:	2000      	movs	r0, #0
 800c448:	f7f6 fda0 	bl	8002f8c <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 OFF\n"); 
 800c44c:	480f      	ldr	r0, [pc, #60]	; (800c48c <P2PS_STM_App_Notification+0x118>)
 800c44e:	f000 fe8b 	bl	800d168 <puts>
          APP_DBG_MSG(" \n\r");
 800c452:	4809      	ldr	r0, [pc, #36]	; (800c478 <P2PS_STM_App_Notification+0x104>)
 800c454:	f000 fe1a 	bl	800d08c <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 800c458:	4b05      	ldr	r3, [pc, #20]	; (800c470 <P2PS_STM_App_Notification+0xfc>)
 800c45a:	2200      	movs	r2, #0
 800c45c:	709a      	strb	r2, [r3, #2]
      break;
 800c45e:	e001      	b.n	800c464 <P2PS_STM_App_Notification+0xf0>
      break;
 800c460:	bf00      	nop
 800c462:	e000      	b.n	800c466 <P2PS_STM_App_Notification+0xf2>
      break;
 800c464:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800c466:	bf00      	nop
}
 800c468:	3708      	adds	r7, #8
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	20001650 	.word	0x20001650
 800c474:	0800f24c 	.word	0x0800f24c
 800c478:	0800f280 	.word	0x0800f280
 800c47c:	0800f284 	.word	0x0800f284
 800c480:	0800f2b8 	.word	0x0800f2b8
 800c484:	0800f2e0 	.word	0x0800f2e0
 800c488:	0800f308 	.word	0x0800f308
 800c48c:	0800f330 	.word	0x0800f330

0800c490 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b082      	sub	sp, #8
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	781b      	ldrb	r3, [r3, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d005      	beq.n	800c4ac <P2PS_APP_Notification+0x1c>
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d000      	beq.n	800c4a6 <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800c4a4:	e003      	b.n	800c4ae <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();       
 800c4a6:	f000 f819 	bl	800c4dc <P2PS_APP_LED_BUTTON_context_Init>
    break;
 800c4aa:	e000      	b.n	800c4ae <P2PS_APP_Notification+0x1e>
    break;
 800c4ac:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800c4ae:	bf00      	nop
}
 800c4b0:	3708      	adds	r7, #8
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
	...

0800c4b8 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
 800c4bc:	4a05      	ldr	r2, [pc, #20]	; (800c4d4 <P2PS_APP_Init+0x1c>)
 800c4be:	2100      	movs	r1, #0
 800c4c0:	2008      	movs	r0, #8
 800c4c2:	f000 fbdf 	bl	800cc84 <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 800c4c6:	4b04      	ldr	r3, [pc, #16]	; (800c4d8 <P2PS_APP_Init+0x20>)
 800c4c8:	2200      	movs	r2, #0
 800c4ca:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 800c4cc:	f000 f806 	bl	800c4dc <P2PS_APP_LED_BUTTON_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 800c4d0:	bf00      	nop
}
 800c4d2:	bd80      	pop	{r7, pc}
 800c4d4:	0800c521 	.word	0x0800c521
 800c4d8:	20001650 	.word	0x20001650

0800c4dc <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	af00      	add	r7, sp, #0
  
  BSP_LED_Off(LED_BLUE);
 800c4e0:	2000      	movs	r0, #0
 800c4e2:	f7f6 fd53 	bl	8002f8c <BSP_LED_Off>
  APP_DBG_MSG("LED BLUE OFF\n");
 800c4e6:	4808      	ldr	r0, [pc, #32]	; (800c508 <P2PS_APP_LED_BUTTON_context_Init+0x2c>)
 800c4e8:	f000 fe3e 	bl	800d168 <puts>
  
  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 800c4ec:	4b07      	ldr	r3, [pc, #28]	; (800c50c <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 800c4f2:	4b06      	ldr	r3, [pc, #24]	; (800c50c <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 800c4f8:	4b04      	ldr	r3, [pc, #16]	; (800c50c <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	70da      	strb	r2, [r3, #3]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 800c4fe:	4b03      	ldr	r3, [pc, #12]	; (800c50c <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 800c500:	2200      	movs	r2, #0
 800c502:	711a      	strb	r2, [r3, #4]
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x06; /* device6 */
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x06; /* Device6 */
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif  
}
 800c504:	bf00      	nop
 800c506:	bd80      	pop	{r7, pc}
 800c508:	0800f358 	.word	0x0800f358
 800c50c:	20001650 	.word	0x20001650

0800c510 <P2PS_APP_SW1_Button_Action>:

void P2PS_APP_SW1_Button_Action(void)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 800c514:	2100      	movs	r1, #0
 800c516:	2008      	movs	r0, #8
 800c518:	f000 fbd6 	bl	800ccc8 <UTIL_SEQ_SetTask>

  return;
 800c51c:	bf00      	nop
}
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <P2PS_Send_Notification>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_Send_Notification(void)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	af00      	add	r7, sp, #0
 
  if(P2P_Server_App_Context.ButtonControl.ButtonStatus == 0x00){
 800c524:	4b0f      	ldr	r3, [pc, #60]	; (800c564 <P2PS_Send_Notification+0x44>)
 800c526:	791b      	ldrb	r3, [r3, #4]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d103      	bne.n	800c534 <P2PS_Send_Notification+0x14>
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x01;
 800c52c:	4b0d      	ldr	r3, [pc, #52]	; (800c564 <P2PS_Send_Notification+0x44>)
 800c52e:	2201      	movs	r2, #1
 800c530:	711a      	strb	r2, [r3, #4]
 800c532:	e002      	b.n	800c53a <P2PS_Send_Notification+0x1a>
  } else {
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 800c534:	4b0b      	ldr	r3, [pc, #44]	; (800c564 <P2PS_Send_Notification+0x44>)
 800c536:	2200      	movs	r2, #0
 800c538:	711a      	strb	r2, [r3, #4]
  }
  
   if(P2P_Server_App_Context.Notification_Status){ 
 800c53a:	4b0a      	ldr	r3, [pc, #40]	; (800c564 <P2PS_Send_Notification+0x44>)
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d00b      	beq.n	800c55a <P2PS_Send_Notification+0x3a>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
 800c542:	4809      	ldr	r0, [pc, #36]	; (800c568 <P2PS_Send_Notification+0x48>)
 800c544:	f000 fda2 	bl	800d08c <iprintf>
    APP_DBG_MSG(" \n\r");
 800c548:	4808      	ldr	r0, [pc, #32]	; (800c56c <P2PS_Send_Notification+0x4c>)
 800c54a:	f000 fd9f 	bl	800d08c <iprintf>
    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.ButtonControl);
 800c54e:	4908      	ldr	r1, [pc, #32]	; (800c570 <P2PS_Send_Notification+0x50>)
 800c550:	f64f 6042 	movw	r0, #65090	; 0xfe42
 800c554:	f7fd fb14 	bl	8009b80 <P2PS_STM_App_Update_Char>
   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
   }

  return;
 800c558:	e003      	b.n	800c562 <P2PS_Send_Notification+0x42>
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
 800c55a:	4806      	ldr	r0, [pc, #24]	; (800c574 <P2PS_Send_Notification+0x54>)
 800c55c:	f000 fd96 	bl	800d08c <iprintf>
  return;
 800c560:	bf00      	nop
}
 800c562:	bd80      	pop	{r7, pc}
 800c564:	20001650 	.word	0x20001650
 800c568:	0800f368 	.word	0x0800f368
 800c56c:	0800f280 	.word	0x0800f280
 800c570:	20001653 	.word	0x20001653
 800c574:	0800f3a8 	.word	0x0800f3a8

0800c578 <LL_PWR_EnableBootC2>:
{
 800c578:	b480      	push	{r7}
 800c57a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800c57c:	4b05      	ldr	r3, [pc, #20]	; (800c594 <LL_PWR_EnableBootC2+0x1c>)
 800c57e:	68db      	ldr	r3, [r3, #12]
 800c580:	4a04      	ldr	r2, [pc, #16]	; (800c594 <LL_PWR_EnableBootC2+0x1c>)
 800c582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c586:	60d3      	str	r3, [r2, #12]
}
 800c588:	bf00      	nop
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr
 800c592:	bf00      	nop
 800c594:	58000400 	.word	0x58000400

0800c598 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800c598:	b480      	push	{r7}
 800c59a:	b083      	sub	sp, #12
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800c5a0:	4b06      	ldr	r3, [pc, #24]	; (800c5bc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c5a2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800c5a6:	4905      	ldr	r1, [pc, #20]	; (800c5bc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800c5b0:	bf00      	nop
 800c5b2:	370c      	adds	r7, #12
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr
 800c5bc:	58000800 	.word	0x58000800

0800c5c0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b083      	sub	sp, #12
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800c5c8:	4b05      	ldr	r3, [pc, #20]	; (800c5e0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c5ca:	6a1a      	ldr	r2, [r3, #32]
 800c5cc:	4904      	ldr	r1, [pc, #16]	; (800c5e0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	620b      	str	r3, [r1, #32]
}
 800c5d4:	bf00      	nop
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr
 800c5e0:	58000800 	.word	0x58000800

0800c5e4 <LL_AHB3_GRP1_EnableClock>:
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b085      	sub	sp, #20
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800c5ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c5f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c5f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800c5fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c600:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	4013      	ands	r3, r2
 800c606:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c608:	68fb      	ldr	r3, [r7, #12]
}
 800c60a:	bf00      	nop
 800c60c:	3714      	adds	r7, #20
 800c60e:	46bd      	mov	sp, r7
 800c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c614:	4770      	bx	lr

0800c616 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800c616:	b480      	push	{r7}
 800c618:	b085      	sub	sp, #20
 800c61a:	af00      	add	r7, sp, #0
 800c61c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800c61e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c622:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800c626:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	4313      	orrs	r3, r2
 800c62e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800c632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c636:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	4013      	ands	r3, r2
 800c63e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c640:	68fb      	ldr	r3, [r7, #12]
}
 800c642:	bf00      	nop
 800c644:	3714      	adds	r7, #20
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr

0800c64e <LL_C1_IPCC_EnableIT_TXF>:
{
 800c64e:	b480      	push	{r7}
 800c650:	b083      	sub	sp, #12
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	601a      	str	r2, [r3, #0]
}
 800c662:	bf00      	nop
 800c664:	370c      	adds	r7, #12
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr

0800c66e <LL_C1_IPCC_EnableIT_RXO>:
{
 800c66e:	b480      	push	{r7}
 800c670:	b083      	sub	sp, #12
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f043 0201 	orr.w	r2, r3, #1
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	601a      	str	r2, [r3, #0]
}
 800c682:	bf00      	nop
 800c684:	370c      	adds	r7, #12
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr

0800c68e <LL_C1_IPCC_EnableTransmitChannel>:
{
 800c68e:	b480      	push	{r7}
 800c690:	b083      	sub	sp, #12
 800c692:	af00      	add	r7, sp, #0
 800c694:	6078      	str	r0, [r7, #4]
 800c696:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	685a      	ldr	r2, [r3, #4]
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	041b      	lsls	r3, r3, #16
 800c6a0:	43db      	mvns	r3, r3
 800c6a2:	401a      	ands	r2, r3
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	605a      	str	r2, [r3, #4]
}
 800c6a8:	bf00      	nop
 800c6aa:	370c      	adds	r7, #12
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b2:	4770      	bx	lr

0800c6b4 <LL_C1_IPCC_DisableTransmitChannel>:
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b083      	sub	sp, #12
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	685a      	ldr	r2, [r3, #4]
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	041b      	lsls	r3, r3, #16
 800c6c6:	431a      	orrs	r2, r3
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	605a      	str	r2, [r3, #4]
}
 800c6cc:	bf00      	nop
 800c6ce:	370c      	adds	r7, #12
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d6:	4770      	bx	lr

0800c6d8 <LL_C1_IPCC_EnableReceiveChannel>:
{
 800c6d8:	b480      	push	{r7}
 800c6da:	b083      	sub	sp, #12
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	685a      	ldr	r2, [r3, #4]
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	43db      	mvns	r3, r3
 800c6ea:	401a      	ands	r2, r3
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	605a      	str	r2, [r3, #4]
}
 800c6f0:	bf00      	nop
 800c6f2:	370c      	adds	r7, #12
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr

0800c6fc <LL_C1_IPCC_ClearFlag_CHx>:
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b083      	sub	sp, #12
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	683a      	ldr	r2, [r7, #0]
 800c70a:	609a      	str	r2, [r3, #8]
}
 800c70c:	bf00      	nop
 800c70e:	370c      	adds	r7, #12
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr

0800c718 <LL_C1_IPCC_SetFlag_CHx>:
{
 800c718:	b480      	push	{r7}
 800c71a:	b083      	sub	sp, #12
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
 800c720:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	041a      	lsls	r2, r3, #16
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	609a      	str	r2, [r3, #8]
}
 800c72a:	bf00      	nop
 800c72c:	370c      	adds	r7, #12
 800c72e:	46bd      	mov	sp, r7
 800c730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c734:	4770      	bx	lr

0800c736 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800c736:	b480      	push	{r7}
 800c738:	b083      	sub	sp, #12
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
 800c73e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	68da      	ldr	r2, [r3, #12]
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	4013      	ands	r3, r2
 800c748:	683a      	ldr	r2, [r7, #0]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d101      	bne.n	800c752 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800c74e:	2301      	movs	r3, #1
 800c750:	e000      	b.n	800c754 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800c752:	2300      	movs	r3, #0
}
 800c754:	4618      	mov	r0, r3
 800c756:	370c      	adds	r7, #12
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr

0800c760 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800c760:	b480      	push	{r7}
 800c762:	b083      	sub	sp, #12
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	69da      	ldr	r2, [r3, #28]
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	4013      	ands	r3, r2
 800c772:	683a      	ldr	r2, [r7, #0]
 800c774:	429a      	cmp	r2, r3
 800c776:	d101      	bne.n	800c77c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800c778:	2301      	movs	r3, #1
 800c77a:	e000      	b.n	800c77e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800c77c:	2300      	movs	r3, #0
}
 800c77e:	4618      	mov	r0, r3
 800c780:	370c      	adds	r7, #12
 800c782:	46bd      	mov	sp, r7
 800c784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c788:	4770      	bx	lr
	...

0800c78c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800c790:	2102      	movs	r1, #2
 800c792:	4818      	ldr	r0, [pc, #96]	; (800c7f4 <HW_IPCC_Rx_Handler+0x68>)
 800c794:	f7ff ffe4 	bl	800c760 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c798:	4603      	mov	r3, r0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d008      	beq.n	800c7b0 <HW_IPCC_Rx_Handler+0x24>
 800c79e:	4b15      	ldr	r3, [pc, #84]	; (800c7f4 <HW_IPCC_Rx_Handler+0x68>)
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	f003 0302 	and.w	r3, r3, #2
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d102      	bne.n	800c7b0 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800c7aa:	f000 f8d5 	bl	800c958 <HW_IPCC_SYS_EvtHandler>
 800c7ae:	e01e      	b.n	800c7ee <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800c7b0:	2101      	movs	r1, #1
 800c7b2:	4810      	ldr	r0, [pc, #64]	; (800c7f4 <HW_IPCC_Rx_Handler+0x68>)
 800c7b4:	f7ff ffd4 	bl	800c760 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d008      	beq.n	800c7d0 <HW_IPCC_Rx_Handler+0x44>
 800c7be:	4b0d      	ldr	r3, [pc, #52]	; (800c7f4 <HW_IPCC_Rx_Handler+0x68>)
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	f003 0301 	and.w	r3, r3, #1
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d102      	bne.n	800c7d0 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800c7ca:	f000 f889 	bl	800c8e0 <HW_IPCC_BLE_EvtHandler>
 800c7ce:	e00e      	b.n	800c7ee <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800c7d0:	2108      	movs	r1, #8
 800c7d2:	4808      	ldr	r0, [pc, #32]	; (800c7f4 <HW_IPCC_Rx_Handler+0x68>)
 800c7d4:	f7ff ffc4 	bl	800c760 <LL_C2_IPCC_IsActiveFlag_CHx>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d008      	beq.n	800c7f0 <HW_IPCC_Rx_Handler+0x64>
 800c7de:	4b05      	ldr	r3, [pc, #20]	; (800c7f4 <HW_IPCC_Rx_Handler+0x68>)
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	f003 0308 	and.w	r3, r3, #8
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d102      	bne.n	800c7f0 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800c7ea:	f000 f901 	bl	800c9f0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800c7ee:	bf00      	nop
 800c7f0:	bf00      	nop
}
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	58000c00 	.word	0x58000c00

0800c7f8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800c7fc:	2102      	movs	r1, #2
 800c7fe:	4818      	ldr	r0, [pc, #96]	; (800c860 <HW_IPCC_Tx_Handler+0x68>)
 800c800:	f7ff ff99 	bl	800c736 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c804:	4603      	mov	r3, r0
 800c806:	2b00      	cmp	r3, #0
 800c808:	d108      	bne.n	800c81c <HW_IPCC_Tx_Handler+0x24>
 800c80a:	4b15      	ldr	r3, [pc, #84]	; (800c860 <HW_IPCC_Tx_Handler+0x68>)
 800c80c:	685b      	ldr	r3, [r3, #4]
 800c80e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c812:	2b00      	cmp	r3, #0
 800c814:	d102      	bne.n	800c81c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800c816:	f000 f893 	bl	800c940 <HW_IPCC_SYS_CmdEvtHandler>
 800c81a:	e01e      	b.n	800c85a <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800c81c:	2108      	movs	r1, #8
 800c81e:	4810      	ldr	r0, [pc, #64]	; (800c860 <HW_IPCC_Tx_Handler+0x68>)
 800c820:	f7ff ff89 	bl	800c736 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c824:	4603      	mov	r3, r0
 800c826:	2b00      	cmp	r3, #0
 800c828:	d108      	bne.n	800c83c <HW_IPCC_Tx_Handler+0x44>
 800c82a:	4b0d      	ldr	r3, [pc, #52]	; (800c860 <HW_IPCC_Tx_Handler+0x68>)
 800c82c:	685b      	ldr	r3, [r3, #4]
 800c82e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c832:	2b00      	cmp	r3, #0
 800c834:	d102      	bne.n	800c83c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800c836:	f000 f8bd 	bl	800c9b4 <HW_IPCC_MM_FreeBufHandler>
 800c83a:	e00e      	b.n	800c85a <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800c83c:	2120      	movs	r1, #32
 800c83e:	4808      	ldr	r0, [pc, #32]	; (800c860 <HW_IPCC_Tx_Handler+0x68>)
 800c840:	f7ff ff79 	bl	800c736 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c844:	4603      	mov	r3, r0
 800c846:	2b00      	cmp	r3, #0
 800c848:	d108      	bne.n	800c85c <HW_IPCC_Tx_Handler+0x64>
 800c84a:	4b05      	ldr	r3, [pc, #20]	; (800c860 <HW_IPCC_Tx_Handler+0x68>)
 800c84c:	685b      	ldr	r3, [r3, #4]
 800c84e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c852:	2b00      	cmp	r3, #0
 800c854:	d102      	bne.n	800c85c <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800c856:	f000 f84f 	bl	800c8f8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800c85a:	bf00      	nop
 800c85c:	bf00      	nop
}
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	58000c00 	.word	0x58000c00

0800c864 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800c864:	b580      	push	{r7, lr}
 800c866:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800c868:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c86c:	f7ff fed3 	bl	800c616 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800c870:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c874:	f7ff fea4 	bl	800c5c0 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800c878:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c87c:	f7ff fe8c 	bl	800c598 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800c880:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800c882:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800c884:	f7ff fe78 	bl	800c578 <LL_PWR_EnableBootC2>

  return;
 800c888:	bf00      	nop
}
 800c88a:	bd80      	pop	{r7, pc}

0800c88c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800c890:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c894:	f7ff fea6 	bl	800c5e4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800c898:	4806      	ldr	r0, [pc, #24]	; (800c8b4 <HW_IPCC_Init+0x28>)
 800c89a:	f7ff fee8 	bl	800c66e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800c89e:	4805      	ldr	r0, [pc, #20]	; (800c8b4 <HW_IPCC_Init+0x28>)
 800c8a0:	f7ff fed5 	bl	800c64e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800c8a4:	202c      	movs	r0, #44	; 0x2c
 800c8a6:	f7f6 fe9e 	bl	80035e6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800c8aa:	202d      	movs	r0, #45	; 0x2d
 800c8ac:	f7f6 fe9b 	bl	80035e6 <HAL_NVIC_EnableIRQ>

  return;
 800c8b0:	bf00      	nop
}
 800c8b2:	bd80      	pop	{r7, pc}
 800c8b4:	58000c00 	.word	0x58000c00

0800c8b8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c8bc:	2101      	movs	r1, #1
 800c8be:	4802      	ldr	r0, [pc, #8]	; (800c8c8 <HW_IPCC_BLE_Init+0x10>)
 800c8c0:	f7ff ff0a 	bl	800c6d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c8c4:	bf00      	nop
}
 800c8c6:	bd80      	pop	{r7, pc}
 800c8c8:	58000c00 	.word	0x58000c00

0800c8cc <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800c8d0:	2101      	movs	r1, #1
 800c8d2:	4802      	ldr	r0, [pc, #8]	; (800c8dc <HW_IPCC_BLE_SendCmd+0x10>)
 800c8d4:	f7ff ff20 	bl	800c718 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c8d8:	bf00      	nop
}
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	58000c00 	.word	0x58000c00

0800c8e0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800c8e4:	f7fd fee2 	bl	800a6ac <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800c8e8:	2101      	movs	r1, #1
 800c8ea:	4802      	ldr	r0, [pc, #8]	; (800c8f4 <HW_IPCC_BLE_EvtHandler+0x14>)
 800c8ec:	f7ff ff06 	bl	800c6fc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c8f0:	bf00      	nop
}
 800c8f2:	bd80      	pop	{r7, pc}
 800c8f4:	58000c00 	.word	0x58000c00

0800c8f8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800c8fc:	2120      	movs	r1, #32
 800c8fe:	4803      	ldr	r0, [pc, #12]	; (800c90c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800c900:	f7ff fed8 	bl	800c6b4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800c904:	f7fd ff02 	bl	800a70c <HW_IPCC_BLE_AclDataAckNot>

  return;
 800c908:	bf00      	nop
}
 800c90a:	bd80      	pop	{r7, pc}
 800c90c:	58000c00 	.word	0x58000c00

0800c910 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800c910:	b580      	push	{r7, lr}
 800c912:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c914:	2102      	movs	r1, #2
 800c916:	4802      	ldr	r0, [pc, #8]	; (800c920 <HW_IPCC_SYS_Init+0x10>)
 800c918:	f7ff fede 	bl	800c6d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c91c:	bf00      	nop
}
 800c91e:	bd80      	pop	{r7, pc}
 800c920:	58000c00 	.word	0x58000c00

0800c924 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800c924:	b580      	push	{r7, lr}
 800c926:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c928:	2102      	movs	r1, #2
 800c92a:	4804      	ldr	r0, [pc, #16]	; (800c93c <HW_IPCC_SYS_SendCmd+0x18>)
 800c92c:	f7ff fef4 	bl	800c718 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c930:	2102      	movs	r1, #2
 800c932:	4802      	ldr	r0, [pc, #8]	; (800c93c <HW_IPCC_SYS_SendCmd+0x18>)
 800c934:	f7ff feab 	bl	800c68e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800c938:	bf00      	nop
}
 800c93a:	bd80      	pop	{r7, pc}
 800c93c:	58000c00 	.word	0x58000c00

0800c940 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800c940:	b580      	push	{r7, lr}
 800c942:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800c944:	2102      	movs	r1, #2
 800c946:	4803      	ldr	r0, [pc, #12]	; (800c954 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800c948:	f7ff feb4 	bl	800c6b4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800c94c:	f7fd ff2e 	bl	800a7ac <HW_IPCC_SYS_CmdEvtNot>

  return;
 800c950:	bf00      	nop
}
 800c952:	bd80      	pop	{r7, pc}
 800c954:	58000c00 	.word	0x58000c00

0800c958 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800c95c:	f7fd ff3c 	bl	800a7d8 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800c960:	2102      	movs	r1, #2
 800c962:	4802      	ldr	r0, [pc, #8]	; (800c96c <HW_IPCC_SYS_EvtHandler+0x14>)
 800c964:	f7ff feca 	bl	800c6fc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800c968:	bf00      	nop
}
 800c96a:	bd80      	pop	{r7, pc}
 800c96c:	58000c00 	.word	0x58000c00

0800c970 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800c978:	2108      	movs	r1, #8
 800c97a:	480c      	ldr	r0, [pc, #48]	; (800c9ac <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c97c:	f7ff fedb 	bl	800c736 <LL_C1_IPCC_IsActiveFlag_CHx>
 800c980:	4603      	mov	r3, r0
 800c982:	2b00      	cmp	r3, #0
 800c984:	d007      	beq.n	800c996 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800c986:	4a0a      	ldr	r2, [pc, #40]	; (800c9b0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c98c:	2108      	movs	r1, #8
 800c98e:	4807      	ldr	r0, [pc, #28]	; (800c9ac <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c990:	f7ff fe7d 	bl	800c68e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800c994:	e006      	b.n	800c9a4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c99a:	2108      	movs	r1, #8
 800c99c:	4803      	ldr	r0, [pc, #12]	; (800c9ac <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800c99e:	f7ff febb 	bl	800c718 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800c9a2:	bf00      	nop
}
 800c9a4:	3708      	adds	r7, #8
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}
 800c9aa:	bf00      	nop
 800c9ac:	58000c00 	.word	0x58000c00
 800c9b0:	20001658 	.word	0x20001658

0800c9b4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c9b8:	2108      	movs	r1, #8
 800c9ba:	4806      	ldr	r0, [pc, #24]	; (800c9d4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c9bc:	f7ff fe7a 	bl	800c6b4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800c9c0:	4b05      	ldr	r3, [pc, #20]	; (800c9d8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800c9c6:	2108      	movs	r1, #8
 800c9c8:	4802      	ldr	r0, [pc, #8]	; (800c9d4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800c9ca:	f7ff fea5 	bl	800c718 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800c9ce:	bf00      	nop
}
 800c9d0:	bd80      	pop	{r7, pc}
 800c9d2:	bf00      	nop
 800c9d4:	58000c00 	.word	0x58000c00
 800c9d8:	20001658 	.word	0x20001658

0800c9dc <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c9e0:	2108      	movs	r1, #8
 800c9e2:	4802      	ldr	r0, [pc, #8]	; (800c9ec <HW_IPCC_TRACES_Init+0x10>)
 800c9e4:	f7ff fe78 	bl	800c6d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800c9e8:	bf00      	nop
}
 800c9ea:	bd80      	pop	{r7, pc}
 800c9ec:	58000c00 	.word	0x58000c00

0800c9f0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800c9f4:	f7fd ff98 	bl	800a928 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800c9f8:	2108      	movs	r1, #8
 800c9fa:	4802      	ldr	r0, [pc, #8]	; (800ca04 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800c9fc:	f7ff fe7e 	bl	800c6fc <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800ca00:	bf00      	nop
}
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	58000c00 	.word	0x58000c00

0800ca08 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800ca08:	b480      	push	{r7}
 800ca0a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800ca0c:	4b05      	ldr	r3, [pc, #20]	; (800ca24 <UTIL_LPM_Init+0x1c>)
 800ca0e:	2200      	movs	r2, #0
 800ca10:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800ca12:	4b05      	ldr	r3, [pc, #20]	; (800ca28 <UTIL_LPM_Init+0x20>)
 800ca14:	2200      	movs	r2, #0
 800ca16:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800ca18:	bf00      	nop
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca20:	4770      	bx	lr
 800ca22:	bf00      	nop
 800ca24:	2000165c 	.word	0x2000165c
 800ca28:	20001660 	.word	0x20001660

0800ca2c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b087      	sub	sp, #28
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
 800ca34:	460b      	mov	r3, r1
 800ca36:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ca38:	f3ef 8310 	mrs	r3, PRIMASK
 800ca3c:	613b      	str	r3, [r7, #16]
  return(result);
 800ca3e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800ca40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ca42:	b672      	cpsid	i
}
 800ca44:	bf00      	nop
  
  switch(state)
 800ca46:	78fb      	ldrb	r3, [r7, #3]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d008      	beq.n	800ca5e <UTIL_LPM_SetOffMode+0x32>
 800ca4c:	2b01      	cmp	r3, #1
 800ca4e:	d10e      	bne.n	800ca6e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800ca50:	4b0d      	ldr	r3, [pc, #52]	; (800ca88 <UTIL_LPM_SetOffMode+0x5c>)
 800ca52:	681a      	ldr	r2, [r3, #0]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	4313      	orrs	r3, r2
 800ca58:	4a0b      	ldr	r2, [pc, #44]	; (800ca88 <UTIL_LPM_SetOffMode+0x5c>)
 800ca5a:	6013      	str	r3, [r2, #0]
      break;
 800ca5c:	e008      	b.n	800ca70 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	43da      	mvns	r2, r3
 800ca62:	4b09      	ldr	r3, [pc, #36]	; (800ca88 <UTIL_LPM_SetOffMode+0x5c>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4013      	ands	r3, r2
 800ca68:	4a07      	ldr	r2, [pc, #28]	; (800ca88 <UTIL_LPM_SetOffMode+0x5c>)
 800ca6a:	6013      	str	r3, [r2, #0]
      break;
 800ca6c:	e000      	b.n	800ca70 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800ca6e:	bf00      	nop
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f383 8810 	msr	PRIMASK, r3
}
 800ca7a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800ca7c:	bf00      	nop
 800ca7e:	371c      	adds	r7, #28
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr
 800ca88:	20001660 	.word	0x20001660

0800ca8c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b090      	sub	sp, #64	; 0x40
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800ca94:	4b73      	ldr	r3, [pc, #460]	; (800cc64 <UTIL_SEQ_Run+0x1d8>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800ca9a:	4b72      	ldr	r3, [pc, #456]	; (800cc64 <UTIL_SEQ_Run+0x1d8>)
 800ca9c:	681a      	ldr	r2, [r3, #0]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	4013      	ands	r3, r2
 800caa2:	4a70      	ldr	r2, [pc, #448]	; (800cc64 <UTIL_SEQ_Run+0x1d8>)
 800caa4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800caa6:	4b70      	ldr	r3, [pc, #448]	; (800cc68 <UTIL_SEQ_Run+0x1dc>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800caac:	4b6f      	ldr	r3, [pc, #444]	; (800cc6c <UTIL_SEQ_Run+0x1e0>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800cab2:	4b6f      	ldr	r3, [pc, #444]	; (800cc70 <UTIL_SEQ_Run+0x1e4>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800cab8:	4b6e      	ldr	r3, [pc, #440]	; (800cc74 <UTIL_SEQ_Run+0x1e8>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800cabe:	e08d      	b.n	800cbdc <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800cac0:	2300      	movs	r3, #0
 800cac2:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800cac4:	e002      	b.n	800cacc <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800cac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cac8:	3301      	adds	r3, #1
 800caca:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800cacc:	4a6a      	ldr	r2, [pc, #424]	; (800cc78 <UTIL_SEQ_Run+0x1ec>)
 800cace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cad0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800cad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad6:	401a      	ands	r2, r3
 800cad8:	4b62      	ldr	r3, [pc, #392]	; (800cc64 <UTIL_SEQ_Run+0x1d8>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4013      	ands	r3, r2
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d0f1      	beq.n	800cac6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800cae2:	4a65      	ldr	r2, [pc, #404]	; (800cc78 <UTIL_SEQ_Run+0x1ec>)
 800cae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cae6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800caea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caec:	401a      	ands	r2, r3
 800caee:	4b5d      	ldr	r3, [pc, #372]	; (800cc64 <UTIL_SEQ_Run+0x1d8>)
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4013      	ands	r3, r2
 800caf4:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800caf6:	4a60      	ldr	r2, [pc, #384]	; (800cc78 <UTIL_SEQ_Run+0x1ec>)
 800caf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cafa:	00db      	lsls	r3, r3, #3
 800cafc:	4413      	add	r3, r2
 800cafe:	685a      	ldr	r2, [r3, #4]
 800cb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb02:	4013      	ands	r3, r2
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d106      	bne.n	800cb16 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800cb08:	4a5b      	ldr	r2, [pc, #364]	; (800cc78 <UTIL_SEQ_Run+0x1ec>)
 800cb0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb0c:	00db      	lsls	r3, r3, #3
 800cb0e:	4413      	add	r3, r2
 800cb10:	f04f 32ff 	mov.w	r2, #4294967295
 800cb14:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800cb16:	4a58      	ldr	r2, [pc, #352]	; (800cc78 <UTIL_SEQ_Run+0x1ec>)
 800cb18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb1a:	00db      	lsls	r3, r3, #3
 800cb1c:	4413      	add	r3, r2
 800cb1e:	685a      	ldr	r2, [r3, #4]
 800cb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb22:	4013      	ands	r3, r2
 800cb24:	4618      	mov	r0, r3
 800cb26:	f000 f9b3 	bl	800ce90 <SEQ_BitPosition>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	4b53      	ldr	r3, [pc, #332]	; (800cc7c <UTIL_SEQ_Run+0x1f0>)
 800cb30:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800cb32:	4a51      	ldr	r2, [pc, #324]	; (800cc78 <UTIL_SEQ_Run+0x1ec>)
 800cb34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb36:	00db      	lsls	r3, r3, #3
 800cb38:	4413      	add	r3, r2
 800cb3a:	685a      	ldr	r2, [r3, #4]
 800cb3c:	4b4f      	ldr	r3, [pc, #316]	; (800cc7c <UTIL_SEQ_Run+0x1f0>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	2101      	movs	r1, #1
 800cb42:	fa01 f303 	lsl.w	r3, r1, r3
 800cb46:	43db      	mvns	r3, r3
 800cb48:	401a      	ands	r2, r3
 800cb4a:	494b      	ldr	r1, [pc, #300]	; (800cc78 <UTIL_SEQ_Run+0x1ec>)
 800cb4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb4e:	00db      	lsls	r3, r3, #3
 800cb50:	440b      	add	r3, r1
 800cb52:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb54:	f3ef 8310 	mrs	r3, PRIMASK
 800cb58:	61bb      	str	r3, [r7, #24]
  return(result);
 800cb5a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cb5c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800cb5e:	b672      	cpsid	i
}
 800cb60:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800cb62:	4b46      	ldr	r3, [pc, #280]	; (800cc7c <UTIL_SEQ_Run+0x1f0>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	2201      	movs	r2, #1
 800cb68:	fa02 f303 	lsl.w	r3, r2, r3
 800cb6c:	43da      	mvns	r2, r3
 800cb6e:	4b3e      	ldr	r3, [pc, #248]	; (800cc68 <UTIL_SEQ_Run+0x1dc>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	4013      	ands	r3, r2
 800cb74:	4a3c      	ldr	r2, [pc, #240]	; (800cc68 <UTIL_SEQ_Run+0x1dc>)
 800cb76:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800cb78:	2302      	movs	r3, #2
 800cb7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb7c:	e013      	b.n	800cba6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800cb7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb80:	3b01      	subs	r3, #1
 800cb82:	4a3d      	ldr	r2, [pc, #244]	; (800cc78 <UTIL_SEQ_Run+0x1ec>)
 800cb84:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800cb88:	4b3c      	ldr	r3, [pc, #240]	; (800cc7c <UTIL_SEQ_Run+0x1f0>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	fa02 f303 	lsl.w	r3, r2, r3
 800cb92:	43da      	mvns	r2, r3
 800cb94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb96:	3b01      	subs	r3, #1
 800cb98:	400a      	ands	r2, r1
 800cb9a:	4937      	ldr	r1, [pc, #220]	; (800cc78 <UTIL_SEQ_Run+0x1ec>)
 800cb9c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800cba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cba2:	3b01      	subs	r3, #1
 800cba4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d1e8      	bne.n	800cb7e <UTIL_SEQ_Run+0xf2>
 800cbac:	6a3b      	ldr	r3, [r7, #32]
 800cbae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	f383 8810 	msr	PRIMASK, r3
}
 800cbb6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800cbb8:	4b30      	ldr	r3, [pc, #192]	; (800cc7c <UTIL_SEQ_Run+0x1f0>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	4a30      	ldr	r2, [pc, #192]	; (800cc80 <UTIL_SEQ_Run+0x1f4>)
 800cbbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbc2:	4798      	blx	r3

    local_taskset = TaskSet;
 800cbc4:	4b28      	ldr	r3, [pc, #160]	; (800cc68 <UTIL_SEQ_Run+0x1dc>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800cbca:	4b28      	ldr	r3, [pc, #160]	; (800cc6c <UTIL_SEQ_Run+0x1e0>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800cbd0:	4b27      	ldr	r3, [pc, #156]	; (800cc70 <UTIL_SEQ_Run+0x1e4>)
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800cbd6:	4b27      	ldr	r3, [pc, #156]	; (800cc74 <UTIL_SEQ_Run+0x1e8>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800cbdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe0:	401a      	ands	r2, r3
 800cbe2:	4b20      	ldr	r3, [pc, #128]	; (800cc64 <UTIL_SEQ_Run+0x1d8>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	4013      	ands	r3, r2
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d005      	beq.n	800cbf8 <UTIL_SEQ_Run+0x16c>
 800cbec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf0:	4013      	ands	r3, r2
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	f43f af64 	beq.w	800cac0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800cbf8:	4b20      	ldr	r3, [pc, #128]	; (800cc7c <UTIL_SEQ_Run+0x1f0>)
 800cbfa:	f04f 32ff 	mov.w	r2, #4294967295
 800cbfe:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800cc00:	f000 f938 	bl	800ce74 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc04:	f3ef 8310 	mrs	r3, PRIMASK
 800cc08:	613b      	str	r3, [r7, #16]
  return(result);
 800cc0a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800cc0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800cc0e:	b672      	cpsid	i
}
 800cc10:	bf00      	nop
  local_taskset = TaskSet;
 800cc12:	4b15      	ldr	r3, [pc, #84]	; (800cc68 <UTIL_SEQ_Run+0x1dc>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800cc18:	4b14      	ldr	r3, [pc, #80]	; (800cc6c <UTIL_SEQ_Run+0x1e0>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800cc1e:	4b14      	ldr	r3, [pc, #80]	; (800cc70 <UTIL_SEQ_Run+0x1e4>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800cc24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc28:	401a      	ands	r2, r3
 800cc2a:	4b0e      	ldr	r3, [pc, #56]	; (800cc64 <UTIL_SEQ_Run+0x1d8>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	4013      	ands	r3, r2
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d107      	bne.n	800cc44 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800cc34:	4b0f      	ldr	r3, [pc, #60]	; (800cc74 <UTIL_SEQ_Run+0x1e8>)
 800cc36:	681a      	ldr	r2, [r3, #0]
 800cc38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc3a:	4013      	ands	r3, r2
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d101      	bne.n	800cc44 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800cc40:	f7f4 fc75 	bl	800152e <UTIL_SEQ_Idle>
 800cc44:	69fb      	ldr	r3, [r7, #28]
 800cc46:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	f383 8810 	msr	PRIMASK, r3
}
 800cc4e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800cc50:	f000 f917 	bl	800ce82 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800cc54:	4a03      	ldr	r2, [pc, #12]	; (800cc64 <UTIL_SEQ_Run+0x1d8>)
 800cc56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc58:	6013      	str	r3, [r2, #0]

  return;
 800cc5a:	bf00      	nop
}
 800cc5c:	3740      	adds	r7, #64	; 0x40
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
 800cc62:	bf00      	nop
 800cc64:	20000048 	.word	0x20000048
 800cc68:	20001664 	.word	0x20001664
 800cc6c:	20001668 	.word	0x20001668
 800cc70:	20000044 	.word	0x20000044
 800cc74:	2000166c 	.word	0x2000166c
 800cc78:	200016f4 	.word	0x200016f4
 800cc7c:	20001670 	.word	0x20001670
 800cc80:	20001674 	.word	0x20001674

0800cc84 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b088      	sub	sp, #32
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	60f8      	str	r0, [r7, #12]
 800cc8c:	60b9      	str	r1, [r7, #8]
 800cc8e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc90:	f3ef 8310 	mrs	r3, PRIMASK
 800cc94:	617b      	str	r3, [r7, #20]
  return(result);
 800cc96:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800cc98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800cc9a:	b672      	cpsid	i
}
 800cc9c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800cc9e:	68f8      	ldr	r0, [r7, #12]
 800cca0:	f000 f8f6 	bl	800ce90 <SEQ_BitPosition>
 800cca4:	4603      	mov	r3, r0
 800cca6:	4619      	mov	r1, r3
 800cca8:	4a06      	ldr	r2, [pc, #24]	; (800ccc4 <UTIL_SEQ_RegTask+0x40>)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ccb0:	69fb      	ldr	r3, [r7, #28]
 800ccb2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ccb4:	69bb      	ldr	r3, [r7, #24]
 800ccb6:	f383 8810 	msr	PRIMASK, r3
}
 800ccba:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800ccbc:	bf00      	nop
}
 800ccbe:	3720      	adds	r7, #32
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}
 800ccc4:	20001674 	.word	0x20001674

0800ccc8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b087      	sub	sp, #28
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccd2:	f3ef 8310 	mrs	r3, PRIMASK
 800ccd6:	60fb      	str	r3, [r7, #12]
  return(result);
 800ccd8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ccda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ccdc:	b672      	cpsid	i
}
 800ccde:	bf00      	nop

  TaskSet |= TaskId_bm;
 800cce0:	4b0d      	ldr	r3, [pc, #52]	; (800cd18 <UTIL_SEQ_SetTask+0x50>)
 800cce2:	681a      	ldr	r2, [r3, #0]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	4313      	orrs	r3, r2
 800cce8:	4a0b      	ldr	r2, [pc, #44]	; (800cd18 <UTIL_SEQ_SetTask+0x50>)
 800ccea:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800ccec:	4a0b      	ldr	r2, [pc, #44]	; (800cd1c <UTIL_SEQ_SetTask+0x54>)
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	431a      	orrs	r2, r3
 800ccf8:	4908      	ldr	r1, [pc, #32]	; (800cd1c <UTIL_SEQ_SetTask+0x54>)
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	f383 8810 	msr	PRIMASK, r3
}
 800cd0a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800cd0c:	bf00      	nop
}
 800cd0e:	371c      	adds	r7, #28
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr
 800cd18:	20001664 	.word	0x20001664
 800cd1c:	200016f4 	.word	0x200016f4

0800cd20 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800cd20:	b480      	push	{r7}
 800cd22:	b087      	sub	sp, #28
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd28:	f3ef 8310 	mrs	r3, PRIMASK
 800cd2c:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd2e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cd30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cd32:	b672      	cpsid	i
}
 800cd34:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	43da      	mvns	r2, r3
 800cd3a:	4b08      	ldr	r3, [pc, #32]	; (800cd5c <UTIL_SEQ_PauseTask+0x3c>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	4013      	ands	r3, r2
 800cd40:	4a06      	ldr	r2, [pc, #24]	; (800cd5c <UTIL_SEQ_PauseTask+0x3c>)
 800cd42:	6013      	str	r3, [r2, #0]
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd48:	693b      	ldr	r3, [r7, #16]
 800cd4a:	f383 8810 	msr	PRIMASK, r3
}
 800cd4e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800cd50:	bf00      	nop
}
 800cd52:	371c      	adds	r7, #28
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	4770      	bx	lr
 800cd5c:	20000044 	.word	0x20000044

0800cd60 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800cd60:	b480      	push	{r7}
 800cd62:	b087      	sub	sp, #28
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cd68:	f3ef 8310 	mrs	r3, PRIMASK
 800cd6c:	60fb      	str	r3, [r7, #12]
  return(result);
 800cd6e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cd70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cd72:	b672      	cpsid	i
}
 800cd74:	bf00      	nop

  TaskMask |= TaskId_bm;
 800cd76:	4b09      	ldr	r3, [pc, #36]	; (800cd9c <UTIL_SEQ_ResumeTask+0x3c>)
 800cd78:	681a      	ldr	r2, [r3, #0]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	4313      	orrs	r3, r2
 800cd7e:	4a07      	ldr	r2, [pc, #28]	; (800cd9c <UTIL_SEQ_ResumeTask+0x3c>)
 800cd80:	6013      	str	r3, [r2, #0]
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	f383 8810 	msr	PRIMASK, r3
}
 800cd8c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800cd8e:	bf00      	nop
}
 800cd90:	371c      	adds	r7, #28
 800cd92:	46bd      	mov	sp, r7
 800cd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd98:	4770      	bx	lr
 800cd9a:	bf00      	nop
 800cd9c:	20000044 	.word	0x20000044

0800cda0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800cda0:	b480      	push	{r7}
 800cda2:	b087      	sub	sp, #28
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cda8:	f3ef 8310 	mrs	r3, PRIMASK
 800cdac:	60fb      	str	r3, [r7, #12]
  return(result);
 800cdae:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800cdb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cdb2:	b672      	cpsid	i
}
 800cdb4:	bf00      	nop

  EvtSet |= EvtId_bm;
 800cdb6:	4b09      	ldr	r3, [pc, #36]	; (800cddc <UTIL_SEQ_SetEvt+0x3c>)
 800cdb8:	681a      	ldr	r2, [r3, #0]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	4a07      	ldr	r2, [pc, #28]	; (800cddc <UTIL_SEQ_SetEvt+0x3c>)
 800cdc0:	6013      	str	r3, [r2, #0]
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	f383 8810 	msr	PRIMASK, r3
}
 800cdcc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800cdce:	bf00      	nop
}
 800cdd0:	371c      	adds	r7, #28
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr
 800cdda:	bf00      	nop
 800cddc:	20001668 	.word	0x20001668

0800cde0 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b088      	sub	sp, #32
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800cde8:	4b1f      	ldr	r3, [pc, #124]	; (800ce68 <UTIL_SEQ_WaitEvt+0x88>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800cdee:	4b1e      	ldr	r3, [pc, #120]	; (800ce68 <UTIL_SEQ_WaitEvt+0x88>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdf6:	d102      	bne.n	800cdfe <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	61fb      	str	r3, [r7, #28]
 800cdfc:	e005      	b.n	800ce0a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800cdfe:	4b1a      	ldr	r3, [pc, #104]	; (800ce68 <UTIL_SEQ_WaitEvt+0x88>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	2201      	movs	r2, #1
 800ce04:	fa02 f303 	lsl.w	r3, r2, r3
 800ce08:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800ce0a:	4b18      	ldr	r3, [pc, #96]	; (800ce6c <UTIL_SEQ_WaitEvt+0x8c>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800ce10:	4a16      	ldr	r2, [pc, #88]	; (800ce6c <UTIL_SEQ_WaitEvt+0x8c>)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800ce16:	e003      	b.n	800ce20 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800ce18:	6879      	ldr	r1, [r7, #4]
 800ce1a:	69f8      	ldr	r0, [r7, #28]
 800ce1c:	f7f4 fb8e 	bl	800153c <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800ce20:	4b13      	ldr	r3, [pc, #76]	; (800ce70 <UTIL_SEQ_WaitEvt+0x90>)
 800ce22:	681a      	ldr	r2, [r3, #0]
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	4013      	ands	r3, r2
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d0f5      	beq.n	800ce18 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800ce2c:	4a0e      	ldr	r2, [pc, #56]	; (800ce68 <UTIL_SEQ_WaitEvt+0x88>)
 800ce2e:	69bb      	ldr	r3, [r7, #24]
 800ce30:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce32:	f3ef 8310 	mrs	r3, PRIMASK
 800ce36:	60bb      	str	r3, [r7, #8]
  return(result);
 800ce38:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ce3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ce3c:	b672      	cpsid	i
}
 800ce3e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	43da      	mvns	r2, r3
 800ce44:	4b0a      	ldr	r3, [pc, #40]	; (800ce70 <UTIL_SEQ_WaitEvt+0x90>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	4013      	ands	r3, r2
 800ce4a:	4a09      	ldr	r2, [pc, #36]	; (800ce70 <UTIL_SEQ_WaitEvt+0x90>)
 800ce4c:	6013      	str	r3, [r2, #0]
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f383 8810 	msr	PRIMASK, r3
}
 800ce58:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800ce5a:	4a04      	ldr	r2, [pc, #16]	; (800ce6c <UTIL_SEQ_WaitEvt+0x8c>)
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	6013      	str	r3, [r2, #0]
  return;
 800ce60:	bf00      	nop
}
 800ce62:	3720      	adds	r7, #32
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}
 800ce68:	20001670 	.word	0x20001670
 800ce6c:	2000166c 	.word	0x2000166c
 800ce70:	20001668 	.word	0x20001668

0800ce74 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800ce74:	b480      	push	{r7}
 800ce76:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800ce78:	bf00      	nop
}
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce80:	4770      	bx	lr

0800ce82 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800ce82:	b480      	push	{r7}
 800ce84:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800ce86:	bf00      	nop
}
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8e:	4770      	bx	lr

0800ce90 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b085      	sub	sp, #20
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	0c1b      	lsrs	r3, r3, #16
 800cea4:	041b      	lsls	r3, r3, #16
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d104      	bne.n	800ceb4 <SEQ_BitPosition+0x24>
 800ceaa:	2310      	movs	r3, #16
 800ceac:	73fb      	strb	r3, [r7, #15]
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	041b      	lsls	r3, r3, #16
 800ceb2:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d105      	bne.n	800ceca <SEQ_BitPosition+0x3a>
 800cebe:	7bfb      	ldrb	r3, [r7, #15]
 800cec0:	3308      	adds	r3, #8
 800cec2:	73fb      	strb	r3, [r7, #15]
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	021b      	lsls	r3, r3, #8
 800cec8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d105      	bne.n	800cee0 <SEQ_BitPosition+0x50>
 800ced4:	7bfb      	ldrb	r3, [r7, #15]
 800ced6:	3304      	adds	r3, #4
 800ced8:	73fb      	strb	r3, [r7, #15]
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	011b      	lsls	r3, r3, #4
 800cede:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800cee0:	68bb      	ldr	r3, [r7, #8]
 800cee2:	0f1b      	lsrs	r3, r3, #28
 800cee4:	4a07      	ldr	r2, [pc, #28]	; (800cf04 <SEQ_BitPosition+0x74>)
 800cee6:	5cd2      	ldrb	r2, [r2, r3]
 800cee8:	7bfb      	ldrb	r3, [r7, #15]
 800ceea:	4413      	add	r3, r2
 800ceec:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800ceee:	7bfb      	ldrb	r3, [r7, #15]
 800cef0:	f1c3 031f 	rsb	r3, r3, #31
 800cef4:	b2db      	uxtb	r3, r3
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3714      	adds	r7, #20
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	0800f630 	.word	0x0800f630

0800cf08 <std>:
 800cf08:	2300      	movs	r3, #0
 800cf0a:	b510      	push	{r4, lr}
 800cf0c:	4604      	mov	r4, r0
 800cf0e:	e9c0 3300 	strd	r3, r3, [r0]
 800cf12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cf16:	6083      	str	r3, [r0, #8]
 800cf18:	8181      	strh	r1, [r0, #12]
 800cf1a:	6643      	str	r3, [r0, #100]	; 0x64
 800cf1c:	81c2      	strh	r2, [r0, #14]
 800cf1e:	6183      	str	r3, [r0, #24]
 800cf20:	4619      	mov	r1, r3
 800cf22:	2208      	movs	r2, #8
 800cf24:	305c      	adds	r0, #92	; 0x5c
 800cf26:	f000 f9ff 	bl	800d328 <memset>
 800cf2a:	4b0d      	ldr	r3, [pc, #52]	; (800cf60 <std+0x58>)
 800cf2c:	6263      	str	r3, [r4, #36]	; 0x24
 800cf2e:	4b0d      	ldr	r3, [pc, #52]	; (800cf64 <std+0x5c>)
 800cf30:	62a3      	str	r3, [r4, #40]	; 0x28
 800cf32:	4b0d      	ldr	r3, [pc, #52]	; (800cf68 <std+0x60>)
 800cf34:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cf36:	4b0d      	ldr	r3, [pc, #52]	; (800cf6c <std+0x64>)
 800cf38:	6323      	str	r3, [r4, #48]	; 0x30
 800cf3a:	4b0d      	ldr	r3, [pc, #52]	; (800cf70 <std+0x68>)
 800cf3c:	6224      	str	r4, [r4, #32]
 800cf3e:	429c      	cmp	r4, r3
 800cf40:	d006      	beq.n	800cf50 <std+0x48>
 800cf42:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800cf46:	4294      	cmp	r4, r2
 800cf48:	d002      	beq.n	800cf50 <std+0x48>
 800cf4a:	33d0      	adds	r3, #208	; 0xd0
 800cf4c:	429c      	cmp	r4, r3
 800cf4e:	d105      	bne.n	800cf5c <std+0x54>
 800cf50:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cf54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf58:	f000 ba58 	b.w	800d40c <__retarget_lock_init_recursive>
 800cf5c:	bd10      	pop	{r4, pc}
 800cf5e:	bf00      	nop
 800cf60:	0800d179 	.word	0x0800d179
 800cf64:	0800d19b 	.word	0x0800d19b
 800cf68:	0800d1d3 	.word	0x0800d1d3
 800cf6c:	0800d1f7 	.word	0x0800d1f7
 800cf70:	20001704 	.word	0x20001704

0800cf74 <stdio_exit_handler>:
 800cf74:	4a02      	ldr	r2, [pc, #8]	; (800cf80 <stdio_exit_handler+0xc>)
 800cf76:	4903      	ldr	r1, [pc, #12]	; (800cf84 <stdio_exit_handler+0x10>)
 800cf78:	4803      	ldr	r0, [pc, #12]	; (800cf88 <stdio_exit_handler+0x14>)
 800cf7a:	f000 b869 	b.w	800d050 <_fwalk_sglue>
 800cf7e:	bf00      	nop
 800cf80:	2000004c 	.word	0x2000004c
 800cf84:	0800dcd5 	.word	0x0800dcd5
 800cf88:	20000058 	.word	0x20000058

0800cf8c <cleanup_stdio>:
 800cf8c:	6841      	ldr	r1, [r0, #4]
 800cf8e:	4b0c      	ldr	r3, [pc, #48]	; (800cfc0 <cleanup_stdio+0x34>)
 800cf90:	4299      	cmp	r1, r3
 800cf92:	b510      	push	{r4, lr}
 800cf94:	4604      	mov	r4, r0
 800cf96:	d001      	beq.n	800cf9c <cleanup_stdio+0x10>
 800cf98:	f000 fe9c 	bl	800dcd4 <_fflush_r>
 800cf9c:	68a1      	ldr	r1, [r4, #8]
 800cf9e:	4b09      	ldr	r3, [pc, #36]	; (800cfc4 <cleanup_stdio+0x38>)
 800cfa0:	4299      	cmp	r1, r3
 800cfa2:	d002      	beq.n	800cfaa <cleanup_stdio+0x1e>
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	f000 fe95 	bl	800dcd4 <_fflush_r>
 800cfaa:	68e1      	ldr	r1, [r4, #12]
 800cfac:	4b06      	ldr	r3, [pc, #24]	; (800cfc8 <cleanup_stdio+0x3c>)
 800cfae:	4299      	cmp	r1, r3
 800cfb0:	d004      	beq.n	800cfbc <cleanup_stdio+0x30>
 800cfb2:	4620      	mov	r0, r4
 800cfb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfb8:	f000 be8c 	b.w	800dcd4 <_fflush_r>
 800cfbc:	bd10      	pop	{r4, pc}
 800cfbe:	bf00      	nop
 800cfc0:	20001704 	.word	0x20001704
 800cfc4:	2000176c 	.word	0x2000176c
 800cfc8:	200017d4 	.word	0x200017d4

0800cfcc <global_stdio_init.part.0>:
 800cfcc:	b510      	push	{r4, lr}
 800cfce:	4b0b      	ldr	r3, [pc, #44]	; (800cffc <global_stdio_init.part.0+0x30>)
 800cfd0:	4c0b      	ldr	r4, [pc, #44]	; (800d000 <global_stdio_init.part.0+0x34>)
 800cfd2:	4a0c      	ldr	r2, [pc, #48]	; (800d004 <global_stdio_init.part.0+0x38>)
 800cfd4:	601a      	str	r2, [r3, #0]
 800cfd6:	4620      	mov	r0, r4
 800cfd8:	2200      	movs	r2, #0
 800cfda:	2104      	movs	r1, #4
 800cfdc:	f7ff ff94 	bl	800cf08 <std>
 800cfe0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	2109      	movs	r1, #9
 800cfe8:	f7ff ff8e 	bl	800cf08 <std>
 800cfec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800cff0:	2202      	movs	r2, #2
 800cff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cff6:	2112      	movs	r1, #18
 800cff8:	f7ff bf86 	b.w	800cf08 <std>
 800cffc:	2000183c 	.word	0x2000183c
 800d000:	20001704 	.word	0x20001704
 800d004:	0800cf75 	.word	0x0800cf75

0800d008 <__sfp_lock_acquire>:
 800d008:	4801      	ldr	r0, [pc, #4]	; (800d010 <__sfp_lock_acquire+0x8>)
 800d00a:	f000 ba00 	b.w	800d40e <__retarget_lock_acquire_recursive>
 800d00e:	bf00      	nop
 800d010:	20001845 	.word	0x20001845

0800d014 <__sfp_lock_release>:
 800d014:	4801      	ldr	r0, [pc, #4]	; (800d01c <__sfp_lock_release+0x8>)
 800d016:	f000 b9fb 	b.w	800d410 <__retarget_lock_release_recursive>
 800d01a:	bf00      	nop
 800d01c:	20001845 	.word	0x20001845

0800d020 <__sinit>:
 800d020:	b510      	push	{r4, lr}
 800d022:	4604      	mov	r4, r0
 800d024:	f7ff fff0 	bl	800d008 <__sfp_lock_acquire>
 800d028:	6a23      	ldr	r3, [r4, #32]
 800d02a:	b11b      	cbz	r3, 800d034 <__sinit+0x14>
 800d02c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d030:	f7ff bff0 	b.w	800d014 <__sfp_lock_release>
 800d034:	4b04      	ldr	r3, [pc, #16]	; (800d048 <__sinit+0x28>)
 800d036:	6223      	str	r3, [r4, #32]
 800d038:	4b04      	ldr	r3, [pc, #16]	; (800d04c <__sinit+0x2c>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d1f5      	bne.n	800d02c <__sinit+0xc>
 800d040:	f7ff ffc4 	bl	800cfcc <global_stdio_init.part.0>
 800d044:	e7f2      	b.n	800d02c <__sinit+0xc>
 800d046:	bf00      	nop
 800d048:	0800cf8d 	.word	0x0800cf8d
 800d04c:	2000183c 	.word	0x2000183c

0800d050 <_fwalk_sglue>:
 800d050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d054:	4607      	mov	r7, r0
 800d056:	4688      	mov	r8, r1
 800d058:	4614      	mov	r4, r2
 800d05a:	2600      	movs	r6, #0
 800d05c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d060:	f1b9 0901 	subs.w	r9, r9, #1
 800d064:	d505      	bpl.n	800d072 <_fwalk_sglue+0x22>
 800d066:	6824      	ldr	r4, [r4, #0]
 800d068:	2c00      	cmp	r4, #0
 800d06a:	d1f7      	bne.n	800d05c <_fwalk_sglue+0xc>
 800d06c:	4630      	mov	r0, r6
 800d06e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d072:	89ab      	ldrh	r3, [r5, #12]
 800d074:	2b01      	cmp	r3, #1
 800d076:	d907      	bls.n	800d088 <_fwalk_sglue+0x38>
 800d078:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d07c:	3301      	adds	r3, #1
 800d07e:	d003      	beq.n	800d088 <_fwalk_sglue+0x38>
 800d080:	4629      	mov	r1, r5
 800d082:	4638      	mov	r0, r7
 800d084:	47c0      	blx	r8
 800d086:	4306      	orrs	r6, r0
 800d088:	3568      	adds	r5, #104	; 0x68
 800d08a:	e7e9      	b.n	800d060 <_fwalk_sglue+0x10>

0800d08c <iprintf>:
 800d08c:	b40f      	push	{r0, r1, r2, r3}
 800d08e:	b507      	push	{r0, r1, r2, lr}
 800d090:	4906      	ldr	r1, [pc, #24]	; (800d0ac <iprintf+0x20>)
 800d092:	ab04      	add	r3, sp, #16
 800d094:	6808      	ldr	r0, [r1, #0]
 800d096:	f853 2b04 	ldr.w	r2, [r3], #4
 800d09a:	6881      	ldr	r1, [r0, #8]
 800d09c:	9301      	str	r3, [sp, #4]
 800d09e:	f000 fae9 	bl	800d674 <_vfiprintf_r>
 800d0a2:	b003      	add	sp, #12
 800d0a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0a8:	b004      	add	sp, #16
 800d0aa:	4770      	bx	lr
 800d0ac:	200000a4 	.word	0x200000a4

0800d0b0 <putchar>:
 800d0b0:	4b02      	ldr	r3, [pc, #8]	; (800d0bc <putchar+0xc>)
 800d0b2:	4601      	mov	r1, r0
 800d0b4:	6818      	ldr	r0, [r3, #0]
 800d0b6:	6882      	ldr	r2, [r0, #8]
 800d0b8:	f000 be96 	b.w	800dde8 <_putc_r>
 800d0bc:	200000a4 	.word	0x200000a4

0800d0c0 <_puts_r>:
 800d0c0:	6a03      	ldr	r3, [r0, #32]
 800d0c2:	b570      	push	{r4, r5, r6, lr}
 800d0c4:	6884      	ldr	r4, [r0, #8]
 800d0c6:	4605      	mov	r5, r0
 800d0c8:	460e      	mov	r6, r1
 800d0ca:	b90b      	cbnz	r3, 800d0d0 <_puts_r+0x10>
 800d0cc:	f7ff ffa8 	bl	800d020 <__sinit>
 800d0d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d0d2:	07db      	lsls	r3, r3, #31
 800d0d4:	d405      	bmi.n	800d0e2 <_puts_r+0x22>
 800d0d6:	89a3      	ldrh	r3, [r4, #12]
 800d0d8:	0598      	lsls	r0, r3, #22
 800d0da:	d402      	bmi.n	800d0e2 <_puts_r+0x22>
 800d0dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d0de:	f000 f996 	bl	800d40e <__retarget_lock_acquire_recursive>
 800d0e2:	89a3      	ldrh	r3, [r4, #12]
 800d0e4:	0719      	lsls	r1, r3, #28
 800d0e6:	d513      	bpl.n	800d110 <_puts_r+0x50>
 800d0e8:	6923      	ldr	r3, [r4, #16]
 800d0ea:	b18b      	cbz	r3, 800d110 <_puts_r+0x50>
 800d0ec:	3e01      	subs	r6, #1
 800d0ee:	68a3      	ldr	r3, [r4, #8]
 800d0f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d0f4:	3b01      	subs	r3, #1
 800d0f6:	60a3      	str	r3, [r4, #8]
 800d0f8:	b9e9      	cbnz	r1, 800d136 <_puts_r+0x76>
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	da2e      	bge.n	800d15c <_puts_r+0x9c>
 800d0fe:	4622      	mov	r2, r4
 800d100:	210a      	movs	r1, #10
 800d102:	4628      	mov	r0, r5
 800d104:	f000 f87b 	bl	800d1fe <__swbuf_r>
 800d108:	3001      	adds	r0, #1
 800d10a:	d007      	beq.n	800d11c <_puts_r+0x5c>
 800d10c:	250a      	movs	r5, #10
 800d10e:	e007      	b.n	800d120 <_puts_r+0x60>
 800d110:	4621      	mov	r1, r4
 800d112:	4628      	mov	r0, r5
 800d114:	f000 f8b0 	bl	800d278 <__swsetup_r>
 800d118:	2800      	cmp	r0, #0
 800d11a:	d0e7      	beq.n	800d0ec <_puts_r+0x2c>
 800d11c:	f04f 35ff 	mov.w	r5, #4294967295
 800d120:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d122:	07da      	lsls	r2, r3, #31
 800d124:	d405      	bmi.n	800d132 <_puts_r+0x72>
 800d126:	89a3      	ldrh	r3, [r4, #12]
 800d128:	059b      	lsls	r3, r3, #22
 800d12a:	d402      	bmi.n	800d132 <_puts_r+0x72>
 800d12c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d12e:	f000 f96f 	bl	800d410 <__retarget_lock_release_recursive>
 800d132:	4628      	mov	r0, r5
 800d134:	bd70      	pop	{r4, r5, r6, pc}
 800d136:	2b00      	cmp	r3, #0
 800d138:	da04      	bge.n	800d144 <_puts_r+0x84>
 800d13a:	69a2      	ldr	r2, [r4, #24]
 800d13c:	429a      	cmp	r2, r3
 800d13e:	dc06      	bgt.n	800d14e <_puts_r+0x8e>
 800d140:	290a      	cmp	r1, #10
 800d142:	d004      	beq.n	800d14e <_puts_r+0x8e>
 800d144:	6823      	ldr	r3, [r4, #0]
 800d146:	1c5a      	adds	r2, r3, #1
 800d148:	6022      	str	r2, [r4, #0]
 800d14a:	7019      	strb	r1, [r3, #0]
 800d14c:	e7cf      	b.n	800d0ee <_puts_r+0x2e>
 800d14e:	4622      	mov	r2, r4
 800d150:	4628      	mov	r0, r5
 800d152:	f000 f854 	bl	800d1fe <__swbuf_r>
 800d156:	3001      	adds	r0, #1
 800d158:	d1c9      	bne.n	800d0ee <_puts_r+0x2e>
 800d15a:	e7df      	b.n	800d11c <_puts_r+0x5c>
 800d15c:	6823      	ldr	r3, [r4, #0]
 800d15e:	250a      	movs	r5, #10
 800d160:	1c5a      	adds	r2, r3, #1
 800d162:	6022      	str	r2, [r4, #0]
 800d164:	701d      	strb	r5, [r3, #0]
 800d166:	e7db      	b.n	800d120 <_puts_r+0x60>

0800d168 <puts>:
 800d168:	4b02      	ldr	r3, [pc, #8]	; (800d174 <puts+0xc>)
 800d16a:	4601      	mov	r1, r0
 800d16c:	6818      	ldr	r0, [r3, #0]
 800d16e:	f7ff bfa7 	b.w	800d0c0 <_puts_r>
 800d172:	bf00      	nop
 800d174:	200000a4 	.word	0x200000a4

0800d178 <__sread>:
 800d178:	b510      	push	{r4, lr}
 800d17a:	460c      	mov	r4, r1
 800d17c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d180:	f000 f8fc 	bl	800d37c <_read_r>
 800d184:	2800      	cmp	r0, #0
 800d186:	bfab      	itete	ge
 800d188:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d18a:	89a3      	ldrhlt	r3, [r4, #12]
 800d18c:	181b      	addge	r3, r3, r0
 800d18e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d192:	bfac      	ite	ge
 800d194:	6563      	strge	r3, [r4, #84]	; 0x54
 800d196:	81a3      	strhlt	r3, [r4, #12]
 800d198:	bd10      	pop	{r4, pc}

0800d19a <__swrite>:
 800d19a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d19e:	461f      	mov	r7, r3
 800d1a0:	898b      	ldrh	r3, [r1, #12]
 800d1a2:	05db      	lsls	r3, r3, #23
 800d1a4:	4605      	mov	r5, r0
 800d1a6:	460c      	mov	r4, r1
 800d1a8:	4616      	mov	r6, r2
 800d1aa:	d505      	bpl.n	800d1b8 <__swrite+0x1e>
 800d1ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1b0:	2302      	movs	r3, #2
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	f000 f8d0 	bl	800d358 <_lseek_r>
 800d1b8:	89a3      	ldrh	r3, [r4, #12]
 800d1ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d1c2:	81a3      	strh	r3, [r4, #12]
 800d1c4:	4632      	mov	r2, r6
 800d1c6:	463b      	mov	r3, r7
 800d1c8:	4628      	mov	r0, r5
 800d1ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ce:	f000 b8e7 	b.w	800d3a0 <_write_r>

0800d1d2 <__sseek>:
 800d1d2:	b510      	push	{r4, lr}
 800d1d4:	460c      	mov	r4, r1
 800d1d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1da:	f000 f8bd 	bl	800d358 <_lseek_r>
 800d1de:	1c43      	adds	r3, r0, #1
 800d1e0:	89a3      	ldrh	r3, [r4, #12]
 800d1e2:	bf15      	itete	ne
 800d1e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d1e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d1ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d1ee:	81a3      	strheq	r3, [r4, #12]
 800d1f0:	bf18      	it	ne
 800d1f2:	81a3      	strhne	r3, [r4, #12]
 800d1f4:	bd10      	pop	{r4, pc}

0800d1f6 <__sclose>:
 800d1f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1fa:	f000 b89d 	b.w	800d338 <_close_r>

0800d1fe <__swbuf_r>:
 800d1fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d200:	460e      	mov	r6, r1
 800d202:	4614      	mov	r4, r2
 800d204:	4605      	mov	r5, r0
 800d206:	b118      	cbz	r0, 800d210 <__swbuf_r+0x12>
 800d208:	6a03      	ldr	r3, [r0, #32]
 800d20a:	b90b      	cbnz	r3, 800d210 <__swbuf_r+0x12>
 800d20c:	f7ff ff08 	bl	800d020 <__sinit>
 800d210:	69a3      	ldr	r3, [r4, #24]
 800d212:	60a3      	str	r3, [r4, #8]
 800d214:	89a3      	ldrh	r3, [r4, #12]
 800d216:	071a      	lsls	r2, r3, #28
 800d218:	d525      	bpl.n	800d266 <__swbuf_r+0x68>
 800d21a:	6923      	ldr	r3, [r4, #16]
 800d21c:	b31b      	cbz	r3, 800d266 <__swbuf_r+0x68>
 800d21e:	6823      	ldr	r3, [r4, #0]
 800d220:	6922      	ldr	r2, [r4, #16]
 800d222:	1a98      	subs	r0, r3, r2
 800d224:	6963      	ldr	r3, [r4, #20]
 800d226:	b2f6      	uxtb	r6, r6
 800d228:	4283      	cmp	r3, r0
 800d22a:	4637      	mov	r7, r6
 800d22c:	dc04      	bgt.n	800d238 <__swbuf_r+0x3a>
 800d22e:	4621      	mov	r1, r4
 800d230:	4628      	mov	r0, r5
 800d232:	f000 fd4f 	bl	800dcd4 <_fflush_r>
 800d236:	b9e0      	cbnz	r0, 800d272 <__swbuf_r+0x74>
 800d238:	68a3      	ldr	r3, [r4, #8]
 800d23a:	3b01      	subs	r3, #1
 800d23c:	60a3      	str	r3, [r4, #8]
 800d23e:	6823      	ldr	r3, [r4, #0]
 800d240:	1c5a      	adds	r2, r3, #1
 800d242:	6022      	str	r2, [r4, #0]
 800d244:	701e      	strb	r6, [r3, #0]
 800d246:	6962      	ldr	r2, [r4, #20]
 800d248:	1c43      	adds	r3, r0, #1
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d004      	beq.n	800d258 <__swbuf_r+0x5a>
 800d24e:	89a3      	ldrh	r3, [r4, #12]
 800d250:	07db      	lsls	r3, r3, #31
 800d252:	d506      	bpl.n	800d262 <__swbuf_r+0x64>
 800d254:	2e0a      	cmp	r6, #10
 800d256:	d104      	bne.n	800d262 <__swbuf_r+0x64>
 800d258:	4621      	mov	r1, r4
 800d25a:	4628      	mov	r0, r5
 800d25c:	f000 fd3a 	bl	800dcd4 <_fflush_r>
 800d260:	b938      	cbnz	r0, 800d272 <__swbuf_r+0x74>
 800d262:	4638      	mov	r0, r7
 800d264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d266:	4621      	mov	r1, r4
 800d268:	4628      	mov	r0, r5
 800d26a:	f000 f805 	bl	800d278 <__swsetup_r>
 800d26e:	2800      	cmp	r0, #0
 800d270:	d0d5      	beq.n	800d21e <__swbuf_r+0x20>
 800d272:	f04f 37ff 	mov.w	r7, #4294967295
 800d276:	e7f4      	b.n	800d262 <__swbuf_r+0x64>

0800d278 <__swsetup_r>:
 800d278:	b538      	push	{r3, r4, r5, lr}
 800d27a:	4b2a      	ldr	r3, [pc, #168]	; (800d324 <__swsetup_r+0xac>)
 800d27c:	4605      	mov	r5, r0
 800d27e:	6818      	ldr	r0, [r3, #0]
 800d280:	460c      	mov	r4, r1
 800d282:	b118      	cbz	r0, 800d28c <__swsetup_r+0x14>
 800d284:	6a03      	ldr	r3, [r0, #32]
 800d286:	b90b      	cbnz	r3, 800d28c <__swsetup_r+0x14>
 800d288:	f7ff feca 	bl	800d020 <__sinit>
 800d28c:	89a3      	ldrh	r3, [r4, #12]
 800d28e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d292:	0718      	lsls	r0, r3, #28
 800d294:	d422      	bmi.n	800d2dc <__swsetup_r+0x64>
 800d296:	06d9      	lsls	r1, r3, #27
 800d298:	d407      	bmi.n	800d2aa <__swsetup_r+0x32>
 800d29a:	2309      	movs	r3, #9
 800d29c:	602b      	str	r3, [r5, #0]
 800d29e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d2a2:	81a3      	strh	r3, [r4, #12]
 800d2a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2a8:	e034      	b.n	800d314 <__swsetup_r+0x9c>
 800d2aa:	0758      	lsls	r0, r3, #29
 800d2ac:	d512      	bpl.n	800d2d4 <__swsetup_r+0x5c>
 800d2ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d2b0:	b141      	cbz	r1, 800d2c4 <__swsetup_r+0x4c>
 800d2b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d2b6:	4299      	cmp	r1, r3
 800d2b8:	d002      	beq.n	800d2c0 <__swsetup_r+0x48>
 800d2ba:	4628      	mov	r0, r5
 800d2bc:	f000 f8b8 	bl	800d430 <_free_r>
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	6363      	str	r3, [r4, #52]	; 0x34
 800d2c4:	89a3      	ldrh	r3, [r4, #12]
 800d2c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d2ca:	81a3      	strh	r3, [r4, #12]
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	6063      	str	r3, [r4, #4]
 800d2d0:	6923      	ldr	r3, [r4, #16]
 800d2d2:	6023      	str	r3, [r4, #0]
 800d2d4:	89a3      	ldrh	r3, [r4, #12]
 800d2d6:	f043 0308 	orr.w	r3, r3, #8
 800d2da:	81a3      	strh	r3, [r4, #12]
 800d2dc:	6923      	ldr	r3, [r4, #16]
 800d2de:	b94b      	cbnz	r3, 800d2f4 <__swsetup_r+0x7c>
 800d2e0:	89a3      	ldrh	r3, [r4, #12]
 800d2e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d2e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2ea:	d003      	beq.n	800d2f4 <__swsetup_r+0x7c>
 800d2ec:	4621      	mov	r1, r4
 800d2ee:	4628      	mov	r0, r5
 800d2f0:	f000 fd3e 	bl	800dd70 <__smakebuf_r>
 800d2f4:	89a0      	ldrh	r0, [r4, #12]
 800d2f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2fa:	f010 0301 	ands.w	r3, r0, #1
 800d2fe:	d00a      	beq.n	800d316 <__swsetup_r+0x9e>
 800d300:	2300      	movs	r3, #0
 800d302:	60a3      	str	r3, [r4, #8]
 800d304:	6963      	ldr	r3, [r4, #20]
 800d306:	425b      	negs	r3, r3
 800d308:	61a3      	str	r3, [r4, #24]
 800d30a:	6923      	ldr	r3, [r4, #16]
 800d30c:	b943      	cbnz	r3, 800d320 <__swsetup_r+0xa8>
 800d30e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d312:	d1c4      	bne.n	800d29e <__swsetup_r+0x26>
 800d314:	bd38      	pop	{r3, r4, r5, pc}
 800d316:	0781      	lsls	r1, r0, #30
 800d318:	bf58      	it	pl
 800d31a:	6963      	ldrpl	r3, [r4, #20]
 800d31c:	60a3      	str	r3, [r4, #8]
 800d31e:	e7f4      	b.n	800d30a <__swsetup_r+0x92>
 800d320:	2000      	movs	r0, #0
 800d322:	e7f7      	b.n	800d314 <__swsetup_r+0x9c>
 800d324:	200000a4 	.word	0x200000a4

0800d328 <memset>:
 800d328:	4402      	add	r2, r0
 800d32a:	4603      	mov	r3, r0
 800d32c:	4293      	cmp	r3, r2
 800d32e:	d100      	bne.n	800d332 <memset+0xa>
 800d330:	4770      	bx	lr
 800d332:	f803 1b01 	strb.w	r1, [r3], #1
 800d336:	e7f9      	b.n	800d32c <memset+0x4>

0800d338 <_close_r>:
 800d338:	b538      	push	{r3, r4, r5, lr}
 800d33a:	4d06      	ldr	r5, [pc, #24]	; (800d354 <_close_r+0x1c>)
 800d33c:	2300      	movs	r3, #0
 800d33e:	4604      	mov	r4, r0
 800d340:	4608      	mov	r0, r1
 800d342:	602b      	str	r3, [r5, #0]
 800d344:	f000 fdb6 	bl	800deb4 <_close>
 800d348:	1c43      	adds	r3, r0, #1
 800d34a:	d102      	bne.n	800d352 <_close_r+0x1a>
 800d34c:	682b      	ldr	r3, [r5, #0]
 800d34e:	b103      	cbz	r3, 800d352 <_close_r+0x1a>
 800d350:	6023      	str	r3, [r4, #0]
 800d352:	bd38      	pop	{r3, r4, r5, pc}
 800d354:	20001840 	.word	0x20001840

0800d358 <_lseek_r>:
 800d358:	b538      	push	{r3, r4, r5, lr}
 800d35a:	4d07      	ldr	r5, [pc, #28]	; (800d378 <_lseek_r+0x20>)
 800d35c:	4604      	mov	r4, r0
 800d35e:	4608      	mov	r0, r1
 800d360:	4611      	mov	r1, r2
 800d362:	2200      	movs	r2, #0
 800d364:	602a      	str	r2, [r5, #0]
 800d366:	461a      	mov	r2, r3
 800d368:	f000 fdbc 	bl	800dee4 <_lseek>
 800d36c:	1c43      	adds	r3, r0, #1
 800d36e:	d102      	bne.n	800d376 <_lseek_r+0x1e>
 800d370:	682b      	ldr	r3, [r5, #0]
 800d372:	b103      	cbz	r3, 800d376 <_lseek_r+0x1e>
 800d374:	6023      	str	r3, [r4, #0]
 800d376:	bd38      	pop	{r3, r4, r5, pc}
 800d378:	20001840 	.word	0x20001840

0800d37c <_read_r>:
 800d37c:	b538      	push	{r3, r4, r5, lr}
 800d37e:	4d07      	ldr	r5, [pc, #28]	; (800d39c <_read_r+0x20>)
 800d380:	4604      	mov	r4, r0
 800d382:	4608      	mov	r0, r1
 800d384:	4611      	mov	r1, r2
 800d386:	2200      	movs	r2, #0
 800d388:	602a      	str	r2, [r5, #0]
 800d38a:	461a      	mov	r2, r3
 800d38c:	f000 fdb2 	bl	800def4 <_read>
 800d390:	1c43      	adds	r3, r0, #1
 800d392:	d102      	bne.n	800d39a <_read_r+0x1e>
 800d394:	682b      	ldr	r3, [r5, #0]
 800d396:	b103      	cbz	r3, 800d39a <_read_r+0x1e>
 800d398:	6023      	str	r3, [r4, #0]
 800d39a:	bd38      	pop	{r3, r4, r5, pc}
 800d39c:	20001840 	.word	0x20001840

0800d3a0 <_write_r>:
 800d3a0:	b538      	push	{r3, r4, r5, lr}
 800d3a2:	4d07      	ldr	r5, [pc, #28]	; (800d3c0 <_write_r+0x20>)
 800d3a4:	4604      	mov	r4, r0
 800d3a6:	4608      	mov	r0, r1
 800d3a8:	4611      	mov	r1, r2
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	602a      	str	r2, [r5, #0]
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	f7fd fb82 	bl	800aab8 <_write>
 800d3b4:	1c43      	adds	r3, r0, #1
 800d3b6:	d102      	bne.n	800d3be <_write_r+0x1e>
 800d3b8:	682b      	ldr	r3, [r5, #0]
 800d3ba:	b103      	cbz	r3, 800d3be <_write_r+0x1e>
 800d3bc:	6023      	str	r3, [r4, #0]
 800d3be:	bd38      	pop	{r3, r4, r5, pc}
 800d3c0:	20001840 	.word	0x20001840

0800d3c4 <__libc_init_array>:
 800d3c4:	b570      	push	{r4, r5, r6, lr}
 800d3c6:	4d0d      	ldr	r5, [pc, #52]	; (800d3fc <__libc_init_array+0x38>)
 800d3c8:	4c0d      	ldr	r4, [pc, #52]	; (800d400 <__libc_init_array+0x3c>)
 800d3ca:	1b64      	subs	r4, r4, r5
 800d3cc:	10a4      	asrs	r4, r4, #2
 800d3ce:	2600      	movs	r6, #0
 800d3d0:	42a6      	cmp	r6, r4
 800d3d2:	d109      	bne.n	800d3e8 <__libc_init_array+0x24>
 800d3d4:	4d0b      	ldr	r5, [pc, #44]	; (800d404 <__libc_init_array+0x40>)
 800d3d6:	4c0c      	ldr	r4, [pc, #48]	; (800d408 <__libc_init_array+0x44>)
 800d3d8:	f000 fda2 	bl	800df20 <_init>
 800d3dc:	1b64      	subs	r4, r4, r5
 800d3de:	10a4      	asrs	r4, r4, #2
 800d3e0:	2600      	movs	r6, #0
 800d3e2:	42a6      	cmp	r6, r4
 800d3e4:	d105      	bne.n	800d3f2 <__libc_init_array+0x2e>
 800d3e6:	bd70      	pop	{r4, r5, r6, pc}
 800d3e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3ec:	4798      	blx	r3
 800d3ee:	3601      	adds	r6, #1
 800d3f0:	e7ee      	b.n	800d3d0 <__libc_init_array+0xc>
 800d3f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3f6:	4798      	blx	r3
 800d3f8:	3601      	adds	r6, #1
 800d3fa:	e7f2      	b.n	800d3e2 <__libc_init_array+0x1e>
 800d3fc:	0800f67c 	.word	0x0800f67c
 800d400:	0800f67c 	.word	0x0800f67c
 800d404:	0800f67c 	.word	0x0800f67c
 800d408:	0800f680 	.word	0x0800f680

0800d40c <__retarget_lock_init_recursive>:
 800d40c:	4770      	bx	lr

0800d40e <__retarget_lock_acquire_recursive>:
 800d40e:	4770      	bx	lr

0800d410 <__retarget_lock_release_recursive>:
 800d410:	4770      	bx	lr

0800d412 <memcpy>:
 800d412:	440a      	add	r2, r1
 800d414:	4291      	cmp	r1, r2
 800d416:	f100 33ff 	add.w	r3, r0, #4294967295
 800d41a:	d100      	bne.n	800d41e <memcpy+0xc>
 800d41c:	4770      	bx	lr
 800d41e:	b510      	push	{r4, lr}
 800d420:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d424:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d428:	4291      	cmp	r1, r2
 800d42a:	d1f9      	bne.n	800d420 <memcpy+0xe>
 800d42c:	bd10      	pop	{r4, pc}
	...

0800d430 <_free_r>:
 800d430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d432:	2900      	cmp	r1, #0
 800d434:	d044      	beq.n	800d4c0 <_free_r+0x90>
 800d436:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d43a:	9001      	str	r0, [sp, #4]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	f1a1 0404 	sub.w	r4, r1, #4
 800d442:	bfb8      	it	lt
 800d444:	18e4      	addlt	r4, r4, r3
 800d446:	f000 f8df 	bl	800d608 <__malloc_lock>
 800d44a:	4a1e      	ldr	r2, [pc, #120]	; (800d4c4 <_free_r+0x94>)
 800d44c:	9801      	ldr	r0, [sp, #4]
 800d44e:	6813      	ldr	r3, [r2, #0]
 800d450:	b933      	cbnz	r3, 800d460 <_free_r+0x30>
 800d452:	6063      	str	r3, [r4, #4]
 800d454:	6014      	str	r4, [r2, #0]
 800d456:	b003      	add	sp, #12
 800d458:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d45c:	f000 b8da 	b.w	800d614 <__malloc_unlock>
 800d460:	42a3      	cmp	r3, r4
 800d462:	d908      	bls.n	800d476 <_free_r+0x46>
 800d464:	6825      	ldr	r5, [r4, #0]
 800d466:	1961      	adds	r1, r4, r5
 800d468:	428b      	cmp	r3, r1
 800d46a:	bf01      	itttt	eq
 800d46c:	6819      	ldreq	r1, [r3, #0]
 800d46e:	685b      	ldreq	r3, [r3, #4]
 800d470:	1949      	addeq	r1, r1, r5
 800d472:	6021      	streq	r1, [r4, #0]
 800d474:	e7ed      	b.n	800d452 <_free_r+0x22>
 800d476:	461a      	mov	r2, r3
 800d478:	685b      	ldr	r3, [r3, #4]
 800d47a:	b10b      	cbz	r3, 800d480 <_free_r+0x50>
 800d47c:	42a3      	cmp	r3, r4
 800d47e:	d9fa      	bls.n	800d476 <_free_r+0x46>
 800d480:	6811      	ldr	r1, [r2, #0]
 800d482:	1855      	adds	r5, r2, r1
 800d484:	42a5      	cmp	r5, r4
 800d486:	d10b      	bne.n	800d4a0 <_free_r+0x70>
 800d488:	6824      	ldr	r4, [r4, #0]
 800d48a:	4421      	add	r1, r4
 800d48c:	1854      	adds	r4, r2, r1
 800d48e:	42a3      	cmp	r3, r4
 800d490:	6011      	str	r1, [r2, #0]
 800d492:	d1e0      	bne.n	800d456 <_free_r+0x26>
 800d494:	681c      	ldr	r4, [r3, #0]
 800d496:	685b      	ldr	r3, [r3, #4]
 800d498:	6053      	str	r3, [r2, #4]
 800d49a:	440c      	add	r4, r1
 800d49c:	6014      	str	r4, [r2, #0]
 800d49e:	e7da      	b.n	800d456 <_free_r+0x26>
 800d4a0:	d902      	bls.n	800d4a8 <_free_r+0x78>
 800d4a2:	230c      	movs	r3, #12
 800d4a4:	6003      	str	r3, [r0, #0]
 800d4a6:	e7d6      	b.n	800d456 <_free_r+0x26>
 800d4a8:	6825      	ldr	r5, [r4, #0]
 800d4aa:	1961      	adds	r1, r4, r5
 800d4ac:	428b      	cmp	r3, r1
 800d4ae:	bf04      	itt	eq
 800d4b0:	6819      	ldreq	r1, [r3, #0]
 800d4b2:	685b      	ldreq	r3, [r3, #4]
 800d4b4:	6063      	str	r3, [r4, #4]
 800d4b6:	bf04      	itt	eq
 800d4b8:	1949      	addeq	r1, r1, r5
 800d4ba:	6021      	streq	r1, [r4, #0]
 800d4bc:	6054      	str	r4, [r2, #4]
 800d4be:	e7ca      	b.n	800d456 <_free_r+0x26>
 800d4c0:	b003      	add	sp, #12
 800d4c2:	bd30      	pop	{r4, r5, pc}
 800d4c4:	20001848 	.word	0x20001848

0800d4c8 <sbrk_aligned>:
 800d4c8:	b570      	push	{r4, r5, r6, lr}
 800d4ca:	4e0e      	ldr	r6, [pc, #56]	; (800d504 <sbrk_aligned+0x3c>)
 800d4cc:	460c      	mov	r4, r1
 800d4ce:	6831      	ldr	r1, [r6, #0]
 800d4d0:	4605      	mov	r5, r0
 800d4d2:	b911      	cbnz	r1, 800d4da <sbrk_aligned+0x12>
 800d4d4:	f000 fcde 	bl	800de94 <_sbrk_r>
 800d4d8:	6030      	str	r0, [r6, #0]
 800d4da:	4621      	mov	r1, r4
 800d4dc:	4628      	mov	r0, r5
 800d4de:	f000 fcd9 	bl	800de94 <_sbrk_r>
 800d4e2:	1c43      	adds	r3, r0, #1
 800d4e4:	d00a      	beq.n	800d4fc <sbrk_aligned+0x34>
 800d4e6:	1cc4      	adds	r4, r0, #3
 800d4e8:	f024 0403 	bic.w	r4, r4, #3
 800d4ec:	42a0      	cmp	r0, r4
 800d4ee:	d007      	beq.n	800d500 <sbrk_aligned+0x38>
 800d4f0:	1a21      	subs	r1, r4, r0
 800d4f2:	4628      	mov	r0, r5
 800d4f4:	f000 fcce 	bl	800de94 <_sbrk_r>
 800d4f8:	3001      	adds	r0, #1
 800d4fa:	d101      	bne.n	800d500 <sbrk_aligned+0x38>
 800d4fc:	f04f 34ff 	mov.w	r4, #4294967295
 800d500:	4620      	mov	r0, r4
 800d502:	bd70      	pop	{r4, r5, r6, pc}
 800d504:	2000184c 	.word	0x2000184c

0800d508 <_malloc_r>:
 800d508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d50c:	1ccd      	adds	r5, r1, #3
 800d50e:	f025 0503 	bic.w	r5, r5, #3
 800d512:	3508      	adds	r5, #8
 800d514:	2d0c      	cmp	r5, #12
 800d516:	bf38      	it	cc
 800d518:	250c      	movcc	r5, #12
 800d51a:	2d00      	cmp	r5, #0
 800d51c:	4607      	mov	r7, r0
 800d51e:	db01      	blt.n	800d524 <_malloc_r+0x1c>
 800d520:	42a9      	cmp	r1, r5
 800d522:	d905      	bls.n	800d530 <_malloc_r+0x28>
 800d524:	230c      	movs	r3, #12
 800d526:	603b      	str	r3, [r7, #0]
 800d528:	2600      	movs	r6, #0
 800d52a:	4630      	mov	r0, r6
 800d52c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d530:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d604 <_malloc_r+0xfc>
 800d534:	f000 f868 	bl	800d608 <__malloc_lock>
 800d538:	f8d8 3000 	ldr.w	r3, [r8]
 800d53c:	461c      	mov	r4, r3
 800d53e:	bb5c      	cbnz	r4, 800d598 <_malloc_r+0x90>
 800d540:	4629      	mov	r1, r5
 800d542:	4638      	mov	r0, r7
 800d544:	f7ff ffc0 	bl	800d4c8 <sbrk_aligned>
 800d548:	1c43      	adds	r3, r0, #1
 800d54a:	4604      	mov	r4, r0
 800d54c:	d155      	bne.n	800d5fa <_malloc_r+0xf2>
 800d54e:	f8d8 4000 	ldr.w	r4, [r8]
 800d552:	4626      	mov	r6, r4
 800d554:	2e00      	cmp	r6, #0
 800d556:	d145      	bne.n	800d5e4 <_malloc_r+0xdc>
 800d558:	2c00      	cmp	r4, #0
 800d55a:	d048      	beq.n	800d5ee <_malloc_r+0xe6>
 800d55c:	6823      	ldr	r3, [r4, #0]
 800d55e:	4631      	mov	r1, r6
 800d560:	4638      	mov	r0, r7
 800d562:	eb04 0903 	add.w	r9, r4, r3
 800d566:	f000 fc95 	bl	800de94 <_sbrk_r>
 800d56a:	4581      	cmp	r9, r0
 800d56c:	d13f      	bne.n	800d5ee <_malloc_r+0xe6>
 800d56e:	6821      	ldr	r1, [r4, #0]
 800d570:	1a6d      	subs	r5, r5, r1
 800d572:	4629      	mov	r1, r5
 800d574:	4638      	mov	r0, r7
 800d576:	f7ff ffa7 	bl	800d4c8 <sbrk_aligned>
 800d57a:	3001      	adds	r0, #1
 800d57c:	d037      	beq.n	800d5ee <_malloc_r+0xe6>
 800d57e:	6823      	ldr	r3, [r4, #0]
 800d580:	442b      	add	r3, r5
 800d582:	6023      	str	r3, [r4, #0]
 800d584:	f8d8 3000 	ldr.w	r3, [r8]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d038      	beq.n	800d5fe <_malloc_r+0xf6>
 800d58c:	685a      	ldr	r2, [r3, #4]
 800d58e:	42a2      	cmp	r2, r4
 800d590:	d12b      	bne.n	800d5ea <_malloc_r+0xe2>
 800d592:	2200      	movs	r2, #0
 800d594:	605a      	str	r2, [r3, #4]
 800d596:	e00f      	b.n	800d5b8 <_malloc_r+0xb0>
 800d598:	6822      	ldr	r2, [r4, #0]
 800d59a:	1b52      	subs	r2, r2, r5
 800d59c:	d41f      	bmi.n	800d5de <_malloc_r+0xd6>
 800d59e:	2a0b      	cmp	r2, #11
 800d5a0:	d917      	bls.n	800d5d2 <_malloc_r+0xca>
 800d5a2:	1961      	adds	r1, r4, r5
 800d5a4:	42a3      	cmp	r3, r4
 800d5a6:	6025      	str	r5, [r4, #0]
 800d5a8:	bf18      	it	ne
 800d5aa:	6059      	strne	r1, [r3, #4]
 800d5ac:	6863      	ldr	r3, [r4, #4]
 800d5ae:	bf08      	it	eq
 800d5b0:	f8c8 1000 	streq.w	r1, [r8]
 800d5b4:	5162      	str	r2, [r4, r5]
 800d5b6:	604b      	str	r3, [r1, #4]
 800d5b8:	4638      	mov	r0, r7
 800d5ba:	f104 060b 	add.w	r6, r4, #11
 800d5be:	f000 f829 	bl	800d614 <__malloc_unlock>
 800d5c2:	f026 0607 	bic.w	r6, r6, #7
 800d5c6:	1d23      	adds	r3, r4, #4
 800d5c8:	1af2      	subs	r2, r6, r3
 800d5ca:	d0ae      	beq.n	800d52a <_malloc_r+0x22>
 800d5cc:	1b9b      	subs	r3, r3, r6
 800d5ce:	50a3      	str	r3, [r4, r2]
 800d5d0:	e7ab      	b.n	800d52a <_malloc_r+0x22>
 800d5d2:	42a3      	cmp	r3, r4
 800d5d4:	6862      	ldr	r2, [r4, #4]
 800d5d6:	d1dd      	bne.n	800d594 <_malloc_r+0x8c>
 800d5d8:	f8c8 2000 	str.w	r2, [r8]
 800d5dc:	e7ec      	b.n	800d5b8 <_malloc_r+0xb0>
 800d5de:	4623      	mov	r3, r4
 800d5e0:	6864      	ldr	r4, [r4, #4]
 800d5e2:	e7ac      	b.n	800d53e <_malloc_r+0x36>
 800d5e4:	4634      	mov	r4, r6
 800d5e6:	6876      	ldr	r6, [r6, #4]
 800d5e8:	e7b4      	b.n	800d554 <_malloc_r+0x4c>
 800d5ea:	4613      	mov	r3, r2
 800d5ec:	e7cc      	b.n	800d588 <_malloc_r+0x80>
 800d5ee:	230c      	movs	r3, #12
 800d5f0:	603b      	str	r3, [r7, #0]
 800d5f2:	4638      	mov	r0, r7
 800d5f4:	f000 f80e 	bl	800d614 <__malloc_unlock>
 800d5f8:	e797      	b.n	800d52a <_malloc_r+0x22>
 800d5fa:	6025      	str	r5, [r4, #0]
 800d5fc:	e7dc      	b.n	800d5b8 <_malloc_r+0xb0>
 800d5fe:	605b      	str	r3, [r3, #4]
 800d600:	deff      	udf	#255	; 0xff
 800d602:	bf00      	nop
 800d604:	20001848 	.word	0x20001848

0800d608 <__malloc_lock>:
 800d608:	4801      	ldr	r0, [pc, #4]	; (800d610 <__malloc_lock+0x8>)
 800d60a:	f7ff bf00 	b.w	800d40e <__retarget_lock_acquire_recursive>
 800d60e:	bf00      	nop
 800d610:	20001844 	.word	0x20001844

0800d614 <__malloc_unlock>:
 800d614:	4801      	ldr	r0, [pc, #4]	; (800d61c <__malloc_unlock+0x8>)
 800d616:	f7ff befb 	b.w	800d410 <__retarget_lock_release_recursive>
 800d61a:	bf00      	nop
 800d61c:	20001844 	.word	0x20001844

0800d620 <__sfputc_r>:
 800d620:	6893      	ldr	r3, [r2, #8]
 800d622:	3b01      	subs	r3, #1
 800d624:	2b00      	cmp	r3, #0
 800d626:	b410      	push	{r4}
 800d628:	6093      	str	r3, [r2, #8]
 800d62a:	da08      	bge.n	800d63e <__sfputc_r+0x1e>
 800d62c:	6994      	ldr	r4, [r2, #24]
 800d62e:	42a3      	cmp	r3, r4
 800d630:	db01      	blt.n	800d636 <__sfputc_r+0x16>
 800d632:	290a      	cmp	r1, #10
 800d634:	d103      	bne.n	800d63e <__sfputc_r+0x1e>
 800d636:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d63a:	f7ff bde0 	b.w	800d1fe <__swbuf_r>
 800d63e:	6813      	ldr	r3, [r2, #0]
 800d640:	1c58      	adds	r0, r3, #1
 800d642:	6010      	str	r0, [r2, #0]
 800d644:	7019      	strb	r1, [r3, #0]
 800d646:	4608      	mov	r0, r1
 800d648:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d64c:	4770      	bx	lr

0800d64e <__sfputs_r>:
 800d64e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d650:	4606      	mov	r6, r0
 800d652:	460f      	mov	r7, r1
 800d654:	4614      	mov	r4, r2
 800d656:	18d5      	adds	r5, r2, r3
 800d658:	42ac      	cmp	r4, r5
 800d65a:	d101      	bne.n	800d660 <__sfputs_r+0x12>
 800d65c:	2000      	movs	r0, #0
 800d65e:	e007      	b.n	800d670 <__sfputs_r+0x22>
 800d660:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d664:	463a      	mov	r2, r7
 800d666:	4630      	mov	r0, r6
 800d668:	f7ff ffda 	bl	800d620 <__sfputc_r>
 800d66c:	1c43      	adds	r3, r0, #1
 800d66e:	d1f3      	bne.n	800d658 <__sfputs_r+0xa>
 800d670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d674 <_vfiprintf_r>:
 800d674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d678:	460d      	mov	r5, r1
 800d67a:	b09d      	sub	sp, #116	; 0x74
 800d67c:	4614      	mov	r4, r2
 800d67e:	4698      	mov	r8, r3
 800d680:	4606      	mov	r6, r0
 800d682:	b118      	cbz	r0, 800d68c <_vfiprintf_r+0x18>
 800d684:	6a03      	ldr	r3, [r0, #32]
 800d686:	b90b      	cbnz	r3, 800d68c <_vfiprintf_r+0x18>
 800d688:	f7ff fcca 	bl	800d020 <__sinit>
 800d68c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d68e:	07d9      	lsls	r1, r3, #31
 800d690:	d405      	bmi.n	800d69e <_vfiprintf_r+0x2a>
 800d692:	89ab      	ldrh	r3, [r5, #12]
 800d694:	059a      	lsls	r2, r3, #22
 800d696:	d402      	bmi.n	800d69e <_vfiprintf_r+0x2a>
 800d698:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d69a:	f7ff feb8 	bl	800d40e <__retarget_lock_acquire_recursive>
 800d69e:	89ab      	ldrh	r3, [r5, #12]
 800d6a0:	071b      	lsls	r3, r3, #28
 800d6a2:	d501      	bpl.n	800d6a8 <_vfiprintf_r+0x34>
 800d6a4:	692b      	ldr	r3, [r5, #16]
 800d6a6:	b99b      	cbnz	r3, 800d6d0 <_vfiprintf_r+0x5c>
 800d6a8:	4629      	mov	r1, r5
 800d6aa:	4630      	mov	r0, r6
 800d6ac:	f7ff fde4 	bl	800d278 <__swsetup_r>
 800d6b0:	b170      	cbz	r0, 800d6d0 <_vfiprintf_r+0x5c>
 800d6b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6b4:	07dc      	lsls	r4, r3, #31
 800d6b6:	d504      	bpl.n	800d6c2 <_vfiprintf_r+0x4e>
 800d6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6bc:	b01d      	add	sp, #116	; 0x74
 800d6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6c2:	89ab      	ldrh	r3, [r5, #12]
 800d6c4:	0598      	lsls	r0, r3, #22
 800d6c6:	d4f7      	bmi.n	800d6b8 <_vfiprintf_r+0x44>
 800d6c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6ca:	f7ff fea1 	bl	800d410 <__retarget_lock_release_recursive>
 800d6ce:	e7f3      	b.n	800d6b8 <_vfiprintf_r+0x44>
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	9309      	str	r3, [sp, #36]	; 0x24
 800d6d4:	2320      	movs	r3, #32
 800d6d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6da:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6de:	2330      	movs	r3, #48	; 0x30
 800d6e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d894 <_vfiprintf_r+0x220>
 800d6e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6e8:	f04f 0901 	mov.w	r9, #1
 800d6ec:	4623      	mov	r3, r4
 800d6ee:	469a      	mov	sl, r3
 800d6f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6f4:	b10a      	cbz	r2, 800d6fa <_vfiprintf_r+0x86>
 800d6f6:	2a25      	cmp	r2, #37	; 0x25
 800d6f8:	d1f9      	bne.n	800d6ee <_vfiprintf_r+0x7a>
 800d6fa:	ebba 0b04 	subs.w	fp, sl, r4
 800d6fe:	d00b      	beq.n	800d718 <_vfiprintf_r+0xa4>
 800d700:	465b      	mov	r3, fp
 800d702:	4622      	mov	r2, r4
 800d704:	4629      	mov	r1, r5
 800d706:	4630      	mov	r0, r6
 800d708:	f7ff ffa1 	bl	800d64e <__sfputs_r>
 800d70c:	3001      	adds	r0, #1
 800d70e:	f000 80a9 	beq.w	800d864 <_vfiprintf_r+0x1f0>
 800d712:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d714:	445a      	add	r2, fp
 800d716:	9209      	str	r2, [sp, #36]	; 0x24
 800d718:	f89a 3000 	ldrb.w	r3, [sl]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	f000 80a1 	beq.w	800d864 <_vfiprintf_r+0x1f0>
 800d722:	2300      	movs	r3, #0
 800d724:	f04f 32ff 	mov.w	r2, #4294967295
 800d728:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d72c:	f10a 0a01 	add.w	sl, sl, #1
 800d730:	9304      	str	r3, [sp, #16]
 800d732:	9307      	str	r3, [sp, #28]
 800d734:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d738:	931a      	str	r3, [sp, #104]	; 0x68
 800d73a:	4654      	mov	r4, sl
 800d73c:	2205      	movs	r2, #5
 800d73e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d742:	4854      	ldr	r0, [pc, #336]	; (800d894 <_vfiprintf_r+0x220>)
 800d744:	f7f2 fd34 	bl	80001b0 <memchr>
 800d748:	9a04      	ldr	r2, [sp, #16]
 800d74a:	b9d8      	cbnz	r0, 800d784 <_vfiprintf_r+0x110>
 800d74c:	06d1      	lsls	r1, r2, #27
 800d74e:	bf44      	itt	mi
 800d750:	2320      	movmi	r3, #32
 800d752:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d756:	0713      	lsls	r3, r2, #28
 800d758:	bf44      	itt	mi
 800d75a:	232b      	movmi	r3, #43	; 0x2b
 800d75c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d760:	f89a 3000 	ldrb.w	r3, [sl]
 800d764:	2b2a      	cmp	r3, #42	; 0x2a
 800d766:	d015      	beq.n	800d794 <_vfiprintf_r+0x120>
 800d768:	9a07      	ldr	r2, [sp, #28]
 800d76a:	4654      	mov	r4, sl
 800d76c:	2000      	movs	r0, #0
 800d76e:	f04f 0c0a 	mov.w	ip, #10
 800d772:	4621      	mov	r1, r4
 800d774:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d778:	3b30      	subs	r3, #48	; 0x30
 800d77a:	2b09      	cmp	r3, #9
 800d77c:	d94d      	bls.n	800d81a <_vfiprintf_r+0x1a6>
 800d77e:	b1b0      	cbz	r0, 800d7ae <_vfiprintf_r+0x13a>
 800d780:	9207      	str	r2, [sp, #28]
 800d782:	e014      	b.n	800d7ae <_vfiprintf_r+0x13a>
 800d784:	eba0 0308 	sub.w	r3, r0, r8
 800d788:	fa09 f303 	lsl.w	r3, r9, r3
 800d78c:	4313      	orrs	r3, r2
 800d78e:	9304      	str	r3, [sp, #16]
 800d790:	46a2      	mov	sl, r4
 800d792:	e7d2      	b.n	800d73a <_vfiprintf_r+0xc6>
 800d794:	9b03      	ldr	r3, [sp, #12]
 800d796:	1d19      	adds	r1, r3, #4
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	9103      	str	r1, [sp, #12]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	bfbb      	ittet	lt
 800d7a0:	425b      	neglt	r3, r3
 800d7a2:	f042 0202 	orrlt.w	r2, r2, #2
 800d7a6:	9307      	strge	r3, [sp, #28]
 800d7a8:	9307      	strlt	r3, [sp, #28]
 800d7aa:	bfb8      	it	lt
 800d7ac:	9204      	strlt	r2, [sp, #16]
 800d7ae:	7823      	ldrb	r3, [r4, #0]
 800d7b0:	2b2e      	cmp	r3, #46	; 0x2e
 800d7b2:	d10c      	bne.n	800d7ce <_vfiprintf_r+0x15a>
 800d7b4:	7863      	ldrb	r3, [r4, #1]
 800d7b6:	2b2a      	cmp	r3, #42	; 0x2a
 800d7b8:	d134      	bne.n	800d824 <_vfiprintf_r+0x1b0>
 800d7ba:	9b03      	ldr	r3, [sp, #12]
 800d7bc:	1d1a      	adds	r2, r3, #4
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	9203      	str	r2, [sp, #12]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	bfb8      	it	lt
 800d7c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800d7ca:	3402      	adds	r4, #2
 800d7cc:	9305      	str	r3, [sp, #20]
 800d7ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d8a4 <_vfiprintf_r+0x230>
 800d7d2:	7821      	ldrb	r1, [r4, #0]
 800d7d4:	2203      	movs	r2, #3
 800d7d6:	4650      	mov	r0, sl
 800d7d8:	f7f2 fcea 	bl	80001b0 <memchr>
 800d7dc:	b138      	cbz	r0, 800d7ee <_vfiprintf_r+0x17a>
 800d7de:	9b04      	ldr	r3, [sp, #16]
 800d7e0:	eba0 000a 	sub.w	r0, r0, sl
 800d7e4:	2240      	movs	r2, #64	; 0x40
 800d7e6:	4082      	lsls	r2, r0
 800d7e8:	4313      	orrs	r3, r2
 800d7ea:	3401      	adds	r4, #1
 800d7ec:	9304      	str	r3, [sp, #16]
 800d7ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7f2:	4829      	ldr	r0, [pc, #164]	; (800d898 <_vfiprintf_r+0x224>)
 800d7f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7f8:	2206      	movs	r2, #6
 800d7fa:	f7f2 fcd9 	bl	80001b0 <memchr>
 800d7fe:	2800      	cmp	r0, #0
 800d800:	d03f      	beq.n	800d882 <_vfiprintf_r+0x20e>
 800d802:	4b26      	ldr	r3, [pc, #152]	; (800d89c <_vfiprintf_r+0x228>)
 800d804:	bb1b      	cbnz	r3, 800d84e <_vfiprintf_r+0x1da>
 800d806:	9b03      	ldr	r3, [sp, #12]
 800d808:	3307      	adds	r3, #7
 800d80a:	f023 0307 	bic.w	r3, r3, #7
 800d80e:	3308      	adds	r3, #8
 800d810:	9303      	str	r3, [sp, #12]
 800d812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d814:	443b      	add	r3, r7
 800d816:	9309      	str	r3, [sp, #36]	; 0x24
 800d818:	e768      	b.n	800d6ec <_vfiprintf_r+0x78>
 800d81a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d81e:	460c      	mov	r4, r1
 800d820:	2001      	movs	r0, #1
 800d822:	e7a6      	b.n	800d772 <_vfiprintf_r+0xfe>
 800d824:	2300      	movs	r3, #0
 800d826:	3401      	adds	r4, #1
 800d828:	9305      	str	r3, [sp, #20]
 800d82a:	4619      	mov	r1, r3
 800d82c:	f04f 0c0a 	mov.w	ip, #10
 800d830:	4620      	mov	r0, r4
 800d832:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d836:	3a30      	subs	r2, #48	; 0x30
 800d838:	2a09      	cmp	r2, #9
 800d83a:	d903      	bls.n	800d844 <_vfiprintf_r+0x1d0>
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d0c6      	beq.n	800d7ce <_vfiprintf_r+0x15a>
 800d840:	9105      	str	r1, [sp, #20]
 800d842:	e7c4      	b.n	800d7ce <_vfiprintf_r+0x15a>
 800d844:	fb0c 2101 	mla	r1, ip, r1, r2
 800d848:	4604      	mov	r4, r0
 800d84a:	2301      	movs	r3, #1
 800d84c:	e7f0      	b.n	800d830 <_vfiprintf_r+0x1bc>
 800d84e:	ab03      	add	r3, sp, #12
 800d850:	9300      	str	r3, [sp, #0]
 800d852:	462a      	mov	r2, r5
 800d854:	4b12      	ldr	r3, [pc, #72]	; (800d8a0 <_vfiprintf_r+0x22c>)
 800d856:	a904      	add	r1, sp, #16
 800d858:	4630      	mov	r0, r6
 800d85a:	f3af 8000 	nop.w
 800d85e:	4607      	mov	r7, r0
 800d860:	1c78      	adds	r0, r7, #1
 800d862:	d1d6      	bne.n	800d812 <_vfiprintf_r+0x19e>
 800d864:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d866:	07d9      	lsls	r1, r3, #31
 800d868:	d405      	bmi.n	800d876 <_vfiprintf_r+0x202>
 800d86a:	89ab      	ldrh	r3, [r5, #12]
 800d86c:	059a      	lsls	r2, r3, #22
 800d86e:	d402      	bmi.n	800d876 <_vfiprintf_r+0x202>
 800d870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d872:	f7ff fdcd 	bl	800d410 <__retarget_lock_release_recursive>
 800d876:	89ab      	ldrh	r3, [r5, #12]
 800d878:	065b      	lsls	r3, r3, #25
 800d87a:	f53f af1d 	bmi.w	800d6b8 <_vfiprintf_r+0x44>
 800d87e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d880:	e71c      	b.n	800d6bc <_vfiprintf_r+0x48>
 800d882:	ab03      	add	r3, sp, #12
 800d884:	9300      	str	r3, [sp, #0]
 800d886:	462a      	mov	r2, r5
 800d888:	4b05      	ldr	r3, [pc, #20]	; (800d8a0 <_vfiprintf_r+0x22c>)
 800d88a:	a904      	add	r1, sp, #16
 800d88c:	4630      	mov	r0, r6
 800d88e:	f000 f879 	bl	800d984 <_printf_i>
 800d892:	e7e4      	b.n	800d85e <_vfiprintf_r+0x1ea>
 800d894:	0800f640 	.word	0x0800f640
 800d898:	0800f64a 	.word	0x0800f64a
 800d89c:	00000000 	.word	0x00000000
 800d8a0:	0800d64f 	.word	0x0800d64f
 800d8a4:	0800f646 	.word	0x0800f646

0800d8a8 <_printf_common>:
 800d8a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8ac:	4616      	mov	r6, r2
 800d8ae:	4699      	mov	r9, r3
 800d8b0:	688a      	ldr	r2, [r1, #8]
 800d8b2:	690b      	ldr	r3, [r1, #16]
 800d8b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	bfb8      	it	lt
 800d8bc:	4613      	movlt	r3, r2
 800d8be:	6033      	str	r3, [r6, #0]
 800d8c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d8c4:	4607      	mov	r7, r0
 800d8c6:	460c      	mov	r4, r1
 800d8c8:	b10a      	cbz	r2, 800d8ce <_printf_common+0x26>
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	6033      	str	r3, [r6, #0]
 800d8ce:	6823      	ldr	r3, [r4, #0]
 800d8d0:	0699      	lsls	r1, r3, #26
 800d8d2:	bf42      	ittt	mi
 800d8d4:	6833      	ldrmi	r3, [r6, #0]
 800d8d6:	3302      	addmi	r3, #2
 800d8d8:	6033      	strmi	r3, [r6, #0]
 800d8da:	6825      	ldr	r5, [r4, #0]
 800d8dc:	f015 0506 	ands.w	r5, r5, #6
 800d8e0:	d106      	bne.n	800d8f0 <_printf_common+0x48>
 800d8e2:	f104 0a19 	add.w	sl, r4, #25
 800d8e6:	68e3      	ldr	r3, [r4, #12]
 800d8e8:	6832      	ldr	r2, [r6, #0]
 800d8ea:	1a9b      	subs	r3, r3, r2
 800d8ec:	42ab      	cmp	r3, r5
 800d8ee:	dc26      	bgt.n	800d93e <_printf_common+0x96>
 800d8f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d8f4:	1e13      	subs	r3, r2, #0
 800d8f6:	6822      	ldr	r2, [r4, #0]
 800d8f8:	bf18      	it	ne
 800d8fa:	2301      	movne	r3, #1
 800d8fc:	0692      	lsls	r2, r2, #26
 800d8fe:	d42b      	bmi.n	800d958 <_printf_common+0xb0>
 800d900:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d904:	4649      	mov	r1, r9
 800d906:	4638      	mov	r0, r7
 800d908:	47c0      	blx	r8
 800d90a:	3001      	adds	r0, #1
 800d90c:	d01e      	beq.n	800d94c <_printf_common+0xa4>
 800d90e:	6823      	ldr	r3, [r4, #0]
 800d910:	6922      	ldr	r2, [r4, #16]
 800d912:	f003 0306 	and.w	r3, r3, #6
 800d916:	2b04      	cmp	r3, #4
 800d918:	bf02      	ittt	eq
 800d91a:	68e5      	ldreq	r5, [r4, #12]
 800d91c:	6833      	ldreq	r3, [r6, #0]
 800d91e:	1aed      	subeq	r5, r5, r3
 800d920:	68a3      	ldr	r3, [r4, #8]
 800d922:	bf0c      	ite	eq
 800d924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d928:	2500      	movne	r5, #0
 800d92a:	4293      	cmp	r3, r2
 800d92c:	bfc4      	itt	gt
 800d92e:	1a9b      	subgt	r3, r3, r2
 800d930:	18ed      	addgt	r5, r5, r3
 800d932:	2600      	movs	r6, #0
 800d934:	341a      	adds	r4, #26
 800d936:	42b5      	cmp	r5, r6
 800d938:	d11a      	bne.n	800d970 <_printf_common+0xc8>
 800d93a:	2000      	movs	r0, #0
 800d93c:	e008      	b.n	800d950 <_printf_common+0xa8>
 800d93e:	2301      	movs	r3, #1
 800d940:	4652      	mov	r2, sl
 800d942:	4649      	mov	r1, r9
 800d944:	4638      	mov	r0, r7
 800d946:	47c0      	blx	r8
 800d948:	3001      	adds	r0, #1
 800d94a:	d103      	bne.n	800d954 <_printf_common+0xac>
 800d94c:	f04f 30ff 	mov.w	r0, #4294967295
 800d950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d954:	3501      	adds	r5, #1
 800d956:	e7c6      	b.n	800d8e6 <_printf_common+0x3e>
 800d958:	18e1      	adds	r1, r4, r3
 800d95a:	1c5a      	adds	r2, r3, #1
 800d95c:	2030      	movs	r0, #48	; 0x30
 800d95e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d962:	4422      	add	r2, r4
 800d964:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d968:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d96c:	3302      	adds	r3, #2
 800d96e:	e7c7      	b.n	800d900 <_printf_common+0x58>
 800d970:	2301      	movs	r3, #1
 800d972:	4622      	mov	r2, r4
 800d974:	4649      	mov	r1, r9
 800d976:	4638      	mov	r0, r7
 800d978:	47c0      	blx	r8
 800d97a:	3001      	adds	r0, #1
 800d97c:	d0e6      	beq.n	800d94c <_printf_common+0xa4>
 800d97e:	3601      	adds	r6, #1
 800d980:	e7d9      	b.n	800d936 <_printf_common+0x8e>
	...

0800d984 <_printf_i>:
 800d984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d988:	7e0f      	ldrb	r7, [r1, #24]
 800d98a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d98c:	2f78      	cmp	r7, #120	; 0x78
 800d98e:	4691      	mov	r9, r2
 800d990:	4680      	mov	r8, r0
 800d992:	460c      	mov	r4, r1
 800d994:	469a      	mov	sl, r3
 800d996:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d99a:	d807      	bhi.n	800d9ac <_printf_i+0x28>
 800d99c:	2f62      	cmp	r7, #98	; 0x62
 800d99e:	d80a      	bhi.n	800d9b6 <_printf_i+0x32>
 800d9a0:	2f00      	cmp	r7, #0
 800d9a2:	f000 80d4 	beq.w	800db4e <_printf_i+0x1ca>
 800d9a6:	2f58      	cmp	r7, #88	; 0x58
 800d9a8:	f000 80c0 	beq.w	800db2c <_printf_i+0x1a8>
 800d9ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d9b4:	e03a      	b.n	800da2c <_printf_i+0xa8>
 800d9b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d9ba:	2b15      	cmp	r3, #21
 800d9bc:	d8f6      	bhi.n	800d9ac <_printf_i+0x28>
 800d9be:	a101      	add	r1, pc, #4	; (adr r1, 800d9c4 <_printf_i+0x40>)
 800d9c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d9c4:	0800da1d 	.word	0x0800da1d
 800d9c8:	0800da31 	.word	0x0800da31
 800d9cc:	0800d9ad 	.word	0x0800d9ad
 800d9d0:	0800d9ad 	.word	0x0800d9ad
 800d9d4:	0800d9ad 	.word	0x0800d9ad
 800d9d8:	0800d9ad 	.word	0x0800d9ad
 800d9dc:	0800da31 	.word	0x0800da31
 800d9e0:	0800d9ad 	.word	0x0800d9ad
 800d9e4:	0800d9ad 	.word	0x0800d9ad
 800d9e8:	0800d9ad 	.word	0x0800d9ad
 800d9ec:	0800d9ad 	.word	0x0800d9ad
 800d9f0:	0800db35 	.word	0x0800db35
 800d9f4:	0800da5d 	.word	0x0800da5d
 800d9f8:	0800daef 	.word	0x0800daef
 800d9fc:	0800d9ad 	.word	0x0800d9ad
 800da00:	0800d9ad 	.word	0x0800d9ad
 800da04:	0800db57 	.word	0x0800db57
 800da08:	0800d9ad 	.word	0x0800d9ad
 800da0c:	0800da5d 	.word	0x0800da5d
 800da10:	0800d9ad 	.word	0x0800d9ad
 800da14:	0800d9ad 	.word	0x0800d9ad
 800da18:	0800daf7 	.word	0x0800daf7
 800da1c:	682b      	ldr	r3, [r5, #0]
 800da1e:	1d1a      	adds	r2, r3, #4
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	602a      	str	r2, [r5, #0]
 800da24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da2c:	2301      	movs	r3, #1
 800da2e:	e09f      	b.n	800db70 <_printf_i+0x1ec>
 800da30:	6820      	ldr	r0, [r4, #0]
 800da32:	682b      	ldr	r3, [r5, #0]
 800da34:	0607      	lsls	r7, r0, #24
 800da36:	f103 0104 	add.w	r1, r3, #4
 800da3a:	6029      	str	r1, [r5, #0]
 800da3c:	d501      	bpl.n	800da42 <_printf_i+0xbe>
 800da3e:	681e      	ldr	r6, [r3, #0]
 800da40:	e003      	b.n	800da4a <_printf_i+0xc6>
 800da42:	0646      	lsls	r6, r0, #25
 800da44:	d5fb      	bpl.n	800da3e <_printf_i+0xba>
 800da46:	f9b3 6000 	ldrsh.w	r6, [r3]
 800da4a:	2e00      	cmp	r6, #0
 800da4c:	da03      	bge.n	800da56 <_printf_i+0xd2>
 800da4e:	232d      	movs	r3, #45	; 0x2d
 800da50:	4276      	negs	r6, r6
 800da52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da56:	485a      	ldr	r0, [pc, #360]	; (800dbc0 <_printf_i+0x23c>)
 800da58:	230a      	movs	r3, #10
 800da5a:	e012      	b.n	800da82 <_printf_i+0xfe>
 800da5c:	682b      	ldr	r3, [r5, #0]
 800da5e:	6820      	ldr	r0, [r4, #0]
 800da60:	1d19      	adds	r1, r3, #4
 800da62:	6029      	str	r1, [r5, #0]
 800da64:	0605      	lsls	r5, r0, #24
 800da66:	d501      	bpl.n	800da6c <_printf_i+0xe8>
 800da68:	681e      	ldr	r6, [r3, #0]
 800da6a:	e002      	b.n	800da72 <_printf_i+0xee>
 800da6c:	0641      	lsls	r1, r0, #25
 800da6e:	d5fb      	bpl.n	800da68 <_printf_i+0xe4>
 800da70:	881e      	ldrh	r6, [r3, #0]
 800da72:	4853      	ldr	r0, [pc, #332]	; (800dbc0 <_printf_i+0x23c>)
 800da74:	2f6f      	cmp	r7, #111	; 0x6f
 800da76:	bf0c      	ite	eq
 800da78:	2308      	moveq	r3, #8
 800da7a:	230a      	movne	r3, #10
 800da7c:	2100      	movs	r1, #0
 800da7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da82:	6865      	ldr	r5, [r4, #4]
 800da84:	60a5      	str	r5, [r4, #8]
 800da86:	2d00      	cmp	r5, #0
 800da88:	bfa2      	ittt	ge
 800da8a:	6821      	ldrge	r1, [r4, #0]
 800da8c:	f021 0104 	bicge.w	r1, r1, #4
 800da90:	6021      	strge	r1, [r4, #0]
 800da92:	b90e      	cbnz	r6, 800da98 <_printf_i+0x114>
 800da94:	2d00      	cmp	r5, #0
 800da96:	d04b      	beq.n	800db30 <_printf_i+0x1ac>
 800da98:	4615      	mov	r5, r2
 800da9a:	fbb6 f1f3 	udiv	r1, r6, r3
 800da9e:	fb03 6711 	mls	r7, r3, r1, r6
 800daa2:	5dc7      	ldrb	r7, [r0, r7]
 800daa4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800daa8:	4637      	mov	r7, r6
 800daaa:	42bb      	cmp	r3, r7
 800daac:	460e      	mov	r6, r1
 800daae:	d9f4      	bls.n	800da9a <_printf_i+0x116>
 800dab0:	2b08      	cmp	r3, #8
 800dab2:	d10b      	bne.n	800dacc <_printf_i+0x148>
 800dab4:	6823      	ldr	r3, [r4, #0]
 800dab6:	07de      	lsls	r6, r3, #31
 800dab8:	d508      	bpl.n	800dacc <_printf_i+0x148>
 800daba:	6923      	ldr	r3, [r4, #16]
 800dabc:	6861      	ldr	r1, [r4, #4]
 800dabe:	4299      	cmp	r1, r3
 800dac0:	bfde      	ittt	le
 800dac2:	2330      	movle	r3, #48	; 0x30
 800dac4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dac8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dacc:	1b52      	subs	r2, r2, r5
 800dace:	6122      	str	r2, [r4, #16]
 800dad0:	f8cd a000 	str.w	sl, [sp]
 800dad4:	464b      	mov	r3, r9
 800dad6:	aa03      	add	r2, sp, #12
 800dad8:	4621      	mov	r1, r4
 800dada:	4640      	mov	r0, r8
 800dadc:	f7ff fee4 	bl	800d8a8 <_printf_common>
 800dae0:	3001      	adds	r0, #1
 800dae2:	d14a      	bne.n	800db7a <_printf_i+0x1f6>
 800dae4:	f04f 30ff 	mov.w	r0, #4294967295
 800dae8:	b004      	add	sp, #16
 800daea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daee:	6823      	ldr	r3, [r4, #0]
 800daf0:	f043 0320 	orr.w	r3, r3, #32
 800daf4:	6023      	str	r3, [r4, #0]
 800daf6:	4833      	ldr	r0, [pc, #204]	; (800dbc4 <_printf_i+0x240>)
 800daf8:	2778      	movs	r7, #120	; 0x78
 800dafa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dafe:	6823      	ldr	r3, [r4, #0]
 800db00:	6829      	ldr	r1, [r5, #0]
 800db02:	061f      	lsls	r7, r3, #24
 800db04:	f851 6b04 	ldr.w	r6, [r1], #4
 800db08:	d402      	bmi.n	800db10 <_printf_i+0x18c>
 800db0a:	065f      	lsls	r7, r3, #25
 800db0c:	bf48      	it	mi
 800db0e:	b2b6      	uxthmi	r6, r6
 800db10:	07df      	lsls	r7, r3, #31
 800db12:	bf48      	it	mi
 800db14:	f043 0320 	orrmi.w	r3, r3, #32
 800db18:	6029      	str	r1, [r5, #0]
 800db1a:	bf48      	it	mi
 800db1c:	6023      	strmi	r3, [r4, #0]
 800db1e:	b91e      	cbnz	r6, 800db28 <_printf_i+0x1a4>
 800db20:	6823      	ldr	r3, [r4, #0]
 800db22:	f023 0320 	bic.w	r3, r3, #32
 800db26:	6023      	str	r3, [r4, #0]
 800db28:	2310      	movs	r3, #16
 800db2a:	e7a7      	b.n	800da7c <_printf_i+0xf8>
 800db2c:	4824      	ldr	r0, [pc, #144]	; (800dbc0 <_printf_i+0x23c>)
 800db2e:	e7e4      	b.n	800dafa <_printf_i+0x176>
 800db30:	4615      	mov	r5, r2
 800db32:	e7bd      	b.n	800dab0 <_printf_i+0x12c>
 800db34:	682b      	ldr	r3, [r5, #0]
 800db36:	6826      	ldr	r6, [r4, #0]
 800db38:	6961      	ldr	r1, [r4, #20]
 800db3a:	1d18      	adds	r0, r3, #4
 800db3c:	6028      	str	r0, [r5, #0]
 800db3e:	0635      	lsls	r5, r6, #24
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	d501      	bpl.n	800db48 <_printf_i+0x1c4>
 800db44:	6019      	str	r1, [r3, #0]
 800db46:	e002      	b.n	800db4e <_printf_i+0x1ca>
 800db48:	0670      	lsls	r0, r6, #25
 800db4a:	d5fb      	bpl.n	800db44 <_printf_i+0x1c0>
 800db4c:	8019      	strh	r1, [r3, #0]
 800db4e:	2300      	movs	r3, #0
 800db50:	6123      	str	r3, [r4, #16]
 800db52:	4615      	mov	r5, r2
 800db54:	e7bc      	b.n	800dad0 <_printf_i+0x14c>
 800db56:	682b      	ldr	r3, [r5, #0]
 800db58:	1d1a      	adds	r2, r3, #4
 800db5a:	602a      	str	r2, [r5, #0]
 800db5c:	681d      	ldr	r5, [r3, #0]
 800db5e:	6862      	ldr	r2, [r4, #4]
 800db60:	2100      	movs	r1, #0
 800db62:	4628      	mov	r0, r5
 800db64:	f7f2 fb24 	bl	80001b0 <memchr>
 800db68:	b108      	cbz	r0, 800db6e <_printf_i+0x1ea>
 800db6a:	1b40      	subs	r0, r0, r5
 800db6c:	6060      	str	r0, [r4, #4]
 800db6e:	6863      	ldr	r3, [r4, #4]
 800db70:	6123      	str	r3, [r4, #16]
 800db72:	2300      	movs	r3, #0
 800db74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db78:	e7aa      	b.n	800dad0 <_printf_i+0x14c>
 800db7a:	6923      	ldr	r3, [r4, #16]
 800db7c:	462a      	mov	r2, r5
 800db7e:	4649      	mov	r1, r9
 800db80:	4640      	mov	r0, r8
 800db82:	47d0      	blx	sl
 800db84:	3001      	adds	r0, #1
 800db86:	d0ad      	beq.n	800dae4 <_printf_i+0x160>
 800db88:	6823      	ldr	r3, [r4, #0]
 800db8a:	079b      	lsls	r3, r3, #30
 800db8c:	d413      	bmi.n	800dbb6 <_printf_i+0x232>
 800db8e:	68e0      	ldr	r0, [r4, #12]
 800db90:	9b03      	ldr	r3, [sp, #12]
 800db92:	4298      	cmp	r0, r3
 800db94:	bfb8      	it	lt
 800db96:	4618      	movlt	r0, r3
 800db98:	e7a6      	b.n	800dae8 <_printf_i+0x164>
 800db9a:	2301      	movs	r3, #1
 800db9c:	4632      	mov	r2, r6
 800db9e:	4649      	mov	r1, r9
 800dba0:	4640      	mov	r0, r8
 800dba2:	47d0      	blx	sl
 800dba4:	3001      	adds	r0, #1
 800dba6:	d09d      	beq.n	800dae4 <_printf_i+0x160>
 800dba8:	3501      	adds	r5, #1
 800dbaa:	68e3      	ldr	r3, [r4, #12]
 800dbac:	9903      	ldr	r1, [sp, #12]
 800dbae:	1a5b      	subs	r3, r3, r1
 800dbb0:	42ab      	cmp	r3, r5
 800dbb2:	dcf2      	bgt.n	800db9a <_printf_i+0x216>
 800dbb4:	e7eb      	b.n	800db8e <_printf_i+0x20a>
 800dbb6:	2500      	movs	r5, #0
 800dbb8:	f104 0619 	add.w	r6, r4, #25
 800dbbc:	e7f5      	b.n	800dbaa <_printf_i+0x226>
 800dbbe:	bf00      	nop
 800dbc0:	0800f651 	.word	0x0800f651
 800dbc4:	0800f662 	.word	0x0800f662

0800dbc8 <__sflush_r>:
 800dbc8:	898a      	ldrh	r2, [r1, #12]
 800dbca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbce:	4605      	mov	r5, r0
 800dbd0:	0710      	lsls	r0, r2, #28
 800dbd2:	460c      	mov	r4, r1
 800dbd4:	d458      	bmi.n	800dc88 <__sflush_r+0xc0>
 800dbd6:	684b      	ldr	r3, [r1, #4]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	dc05      	bgt.n	800dbe8 <__sflush_r+0x20>
 800dbdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	dc02      	bgt.n	800dbe8 <__sflush_r+0x20>
 800dbe2:	2000      	movs	r0, #0
 800dbe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dbe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbea:	2e00      	cmp	r6, #0
 800dbec:	d0f9      	beq.n	800dbe2 <__sflush_r+0x1a>
 800dbee:	2300      	movs	r3, #0
 800dbf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dbf4:	682f      	ldr	r7, [r5, #0]
 800dbf6:	6a21      	ldr	r1, [r4, #32]
 800dbf8:	602b      	str	r3, [r5, #0]
 800dbfa:	d032      	beq.n	800dc62 <__sflush_r+0x9a>
 800dbfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dbfe:	89a3      	ldrh	r3, [r4, #12]
 800dc00:	075a      	lsls	r2, r3, #29
 800dc02:	d505      	bpl.n	800dc10 <__sflush_r+0x48>
 800dc04:	6863      	ldr	r3, [r4, #4]
 800dc06:	1ac0      	subs	r0, r0, r3
 800dc08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc0a:	b10b      	cbz	r3, 800dc10 <__sflush_r+0x48>
 800dc0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc0e:	1ac0      	subs	r0, r0, r3
 800dc10:	2300      	movs	r3, #0
 800dc12:	4602      	mov	r2, r0
 800dc14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc16:	6a21      	ldr	r1, [r4, #32]
 800dc18:	4628      	mov	r0, r5
 800dc1a:	47b0      	blx	r6
 800dc1c:	1c43      	adds	r3, r0, #1
 800dc1e:	89a3      	ldrh	r3, [r4, #12]
 800dc20:	d106      	bne.n	800dc30 <__sflush_r+0x68>
 800dc22:	6829      	ldr	r1, [r5, #0]
 800dc24:	291d      	cmp	r1, #29
 800dc26:	d82b      	bhi.n	800dc80 <__sflush_r+0xb8>
 800dc28:	4a29      	ldr	r2, [pc, #164]	; (800dcd0 <__sflush_r+0x108>)
 800dc2a:	410a      	asrs	r2, r1
 800dc2c:	07d6      	lsls	r6, r2, #31
 800dc2e:	d427      	bmi.n	800dc80 <__sflush_r+0xb8>
 800dc30:	2200      	movs	r2, #0
 800dc32:	6062      	str	r2, [r4, #4]
 800dc34:	04d9      	lsls	r1, r3, #19
 800dc36:	6922      	ldr	r2, [r4, #16]
 800dc38:	6022      	str	r2, [r4, #0]
 800dc3a:	d504      	bpl.n	800dc46 <__sflush_r+0x7e>
 800dc3c:	1c42      	adds	r2, r0, #1
 800dc3e:	d101      	bne.n	800dc44 <__sflush_r+0x7c>
 800dc40:	682b      	ldr	r3, [r5, #0]
 800dc42:	b903      	cbnz	r3, 800dc46 <__sflush_r+0x7e>
 800dc44:	6560      	str	r0, [r4, #84]	; 0x54
 800dc46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc48:	602f      	str	r7, [r5, #0]
 800dc4a:	2900      	cmp	r1, #0
 800dc4c:	d0c9      	beq.n	800dbe2 <__sflush_r+0x1a>
 800dc4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc52:	4299      	cmp	r1, r3
 800dc54:	d002      	beq.n	800dc5c <__sflush_r+0x94>
 800dc56:	4628      	mov	r0, r5
 800dc58:	f7ff fbea 	bl	800d430 <_free_r>
 800dc5c:	2000      	movs	r0, #0
 800dc5e:	6360      	str	r0, [r4, #52]	; 0x34
 800dc60:	e7c0      	b.n	800dbe4 <__sflush_r+0x1c>
 800dc62:	2301      	movs	r3, #1
 800dc64:	4628      	mov	r0, r5
 800dc66:	47b0      	blx	r6
 800dc68:	1c41      	adds	r1, r0, #1
 800dc6a:	d1c8      	bne.n	800dbfe <__sflush_r+0x36>
 800dc6c:	682b      	ldr	r3, [r5, #0]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d0c5      	beq.n	800dbfe <__sflush_r+0x36>
 800dc72:	2b1d      	cmp	r3, #29
 800dc74:	d001      	beq.n	800dc7a <__sflush_r+0xb2>
 800dc76:	2b16      	cmp	r3, #22
 800dc78:	d101      	bne.n	800dc7e <__sflush_r+0xb6>
 800dc7a:	602f      	str	r7, [r5, #0]
 800dc7c:	e7b1      	b.n	800dbe2 <__sflush_r+0x1a>
 800dc7e:	89a3      	ldrh	r3, [r4, #12]
 800dc80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc84:	81a3      	strh	r3, [r4, #12]
 800dc86:	e7ad      	b.n	800dbe4 <__sflush_r+0x1c>
 800dc88:	690f      	ldr	r7, [r1, #16]
 800dc8a:	2f00      	cmp	r7, #0
 800dc8c:	d0a9      	beq.n	800dbe2 <__sflush_r+0x1a>
 800dc8e:	0793      	lsls	r3, r2, #30
 800dc90:	680e      	ldr	r6, [r1, #0]
 800dc92:	bf08      	it	eq
 800dc94:	694b      	ldreq	r3, [r1, #20]
 800dc96:	600f      	str	r7, [r1, #0]
 800dc98:	bf18      	it	ne
 800dc9a:	2300      	movne	r3, #0
 800dc9c:	eba6 0807 	sub.w	r8, r6, r7
 800dca0:	608b      	str	r3, [r1, #8]
 800dca2:	f1b8 0f00 	cmp.w	r8, #0
 800dca6:	dd9c      	ble.n	800dbe2 <__sflush_r+0x1a>
 800dca8:	6a21      	ldr	r1, [r4, #32]
 800dcaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dcac:	4643      	mov	r3, r8
 800dcae:	463a      	mov	r2, r7
 800dcb0:	4628      	mov	r0, r5
 800dcb2:	47b0      	blx	r6
 800dcb4:	2800      	cmp	r0, #0
 800dcb6:	dc06      	bgt.n	800dcc6 <__sflush_r+0xfe>
 800dcb8:	89a3      	ldrh	r3, [r4, #12]
 800dcba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcbe:	81a3      	strh	r3, [r4, #12]
 800dcc0:	f04f 30ff 	mov.w	r0, #4294967295
 800dcc4:	e78e      	b.n	800dbe4 <__sflush_r+0x1c>
 800dcc6:	4407      	add	r7, r0
 800dcc8:	eba8 0800 	sub.w	r8, r8, r0
 800dccc:	e7e9      	b.n	800dca2 <__sflush_r+0xda>
 800dcce:	bf00      	nop
 800dcd0:	dfbffffe 	.word	0xdfbffffe

0800dcd4 <_fflush_r>:
 800dcd4:	b538      	push	{r3, r4, r5, lr}
 800dcd6:	690b      	ldr	r3, [r1, #16]
 800dcd8:	4605      	mov	r5, r0
 800dcda:	460c      	mov	r4, r1
 800dcdc:	b913      	cbnz	r3, 800dce4 <_fflush_r+0x10>
 800dcde:	2500      	movs	r5, #0
 800dce0:	4628      	mov	r0, r5
 800dce2:	bd38      	pop	{r3, r4, r5, pc}
 800dce4:	b118      	cbz	r0, 800dcee <_fflush_r+0x1a>
 800dce6:	6a03      	ldr	r3, [r0, #32]
 800dce8:	b90b      	cbnz	r3, 800dcee <_fflush_r+0x1a>
 800dcea:	f7ff f999 	bl	800d020 <__sinit>
 800dcee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d0f3      	beq.n	800dcde <_fflush_r+0xa>
 800dcf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dcf8:	07d0      	lsls	r0, r2, #31
 800dcfa:	d404      	bmi.n	800dd06 <_fflush_r+0x32>
 800dcfc:	0599      	lsls	r1, r3, #22
 800dcfe:	d402      	bmi.n	800dd06 <_fflush_r+0x32>
 800dd00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd02:	f7ff fb84 	bl	800d40e <__retarget_lock_acquire_recursive>
 800dd06:	4628      	mov	r0, r5
 800dd08:	4621      	mov	r1, r4
 800dd0a:	f7ff ff5d 	bl	800dbc8 <__sflush_r>
 800dd0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd10:	07da      	lsls	r2, r3, #31
 800dd12:	4605      	mov	r5, r0
 800dd14:	d4e4      	bmi.n	800dce0 <_fflush_r+0xc>
 800dd16:	89a3      	ldrh	r3, [r4, #12]
 800dd18:	059b      	lsls	r3, r3, #22
 800dd1a:	d4e1      	bmi.n	800dce0 <_fflush_r+0xc>
 800dd1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd1e:	f7ff fb77 	bl	800d410 <__retarget_lock_release_recursive>
 800dd22:	e7dd      	b.n	800dce0 <_fflush_r+0xc>

0800dd24 <__swhatbuf_r>:
 800dd24:	b570      	push	{r4, r5, r6, lr}
 800dd26:	460c      	mov	r4, r1
 800dd28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dd2c:	2900      	cmp	r1, #0
 800dd2e:	b096      	sub	sp, #88	; 0x58
 800dd30:	4615      	mov	r5, r2
 800dd32:	461e      	mov	r6, r3
 800dd34:	da0d      	bge.n	800dd52 <__swhatbuf_r+0x2e>
 800dd36:	89a3      	ldrh	r3, [r4, #12]
 800dd38:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dd3c:	f04f 0100 	mov.w	r1, #0
 800dd40:	bf0c      	ite	eq
 800dd42:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dd46:	2340      	movne	r3, #64	; 0x40
 800dd48:	2000      	movs	r0, #0
 800dd4a:	6031      	str	r1, [r6, #0]
 800dd4c:	602b      	str	r3, [r5, #0]
 800dd4e:	b016      	add	sp, #88	; 0x58
 800dd50:	bd70      	pop	{r4, r5, r6, pc}
 800dd52:	466a      	mov	r2, sp
 800dd54:	f000 f87c 	bl	800de50 <_fstat_r>
 800dd58:	2800      	cmp	r0, #0
 800dd5a:	dbec      	blt.n	800dd36 <__swhatbuf_r+0x12>
 800dd5c:	9901      	ldr	r1, [sp, #4]
 800dd5e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dd62:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dd66:	4259      	negs	r1, r3
 800dd68:	4159      	adcs	r1, r3
 800dd6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dd6e:	e7eb      	b.n	800dd48 <__swhatbuf_r+0x24>

0800dd70 <__smakebuf_r>:
 800dd70:	898b      	ldrh	r3, [r1, #12]
 800dd72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dd74:	079d      	lsls	r5, r3, #30
 800dd76:	4606      	mov	r6, r0
 800dd78:	460c      	mov	r4, r1
 800dd7a:	d507      	bpl.n	800dd8c <__smakebuf_r+0x1c>
 800dd7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dd80:	6023      	str	r3, [r4, #0]
 800dd82:	6123      	str	r3, [r4, #16]
 800dd84:	2301      	movs	r3, #1
 800dd86:	6163      	str	r3, [r4, #20]
 800dd88:	b002      	add	sp, #8
 800dd8a:	bd70      	pop	{r4, r5, r6, pc}
 800dd8c:	ab01      	add	r3, sp, #4
 800dd8e:	466a      	mov	r2, sp
 800dd90:	f7ff ffc8 	bl	800dd24 <__swhatbuf_r>
 800dd94:	9900      	ldr	r1, [sp, #0]
 800dd96:	4605      	mov	r5, r0
 800dd98:	4630      	mov	r0, r6
 800dd9a:	f7ff fbb5 	bl	800d508 <_malloc_r>
 800dd9e:	b948      	cbnz	r0, 800ddb4 <__smakebuf_r+0x44>
 800dda0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dda4:	059a      	lsls	r2, r3, #22
 800dda6:	d4ef      	bmi.n	800dd88 <__smakebuf_r+0x18>
 800dda8:	f023 0303 	bic.w	r3, r3, #3
 800ddac:	f043 0302 	orr.w	r3, r3, #2
 800ddb0:	81a3      	strh	r3, [r4, #12]
 800ddb2:	e7e3      	b.n	800dd7c <__smakebuf_r+0xc>
 800ddb4:	89a3      	ldrh	r3, [r4, #12]
 800ddb6:	6020      	str	r0, [r4, #0]
 800ddb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddbc:	81a3      	strh	r3, [r4, #12]
 800ddbe:	9b00      	ldr	r3, [sp, #0]
 800ddc0:	6163      	str	r3, [r4, #20]
 800ddc2:	9b01      	ldr	r3, [sp, #4]
 800ddc4:	6120      	str	r0, [r4, #16]
 800ddc6:	b15b      	cbz	r3, 800dde0 <__smakebuf_r+0x70>
 800ddc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ddcc:	4630      	mov	r0, r6
 800ddce:	f000 f851 	bl	800de74 <_isatty_r>
 800ddd2:	b128      	cbz	r0, 800dde0 <__smakebuf_r+0x70>
 800ddd4:	89a3      	ldrh	r3, [r4, #12]
 800ddd6:	f023 0303 	bic.w	r3, r3, #3
 800ddda:	f043 0301 	orr.w	r3, r3, #1
 800ddde:	81a3      	strh	r3, [r4, #12]
 800dde0:	89a3      	ldrh	r3, [r4, #12]
 800dde2:	431d      	orrs	r5, r3
 800dde4:	81a5      	strh	r5, [r4, #12]
 800dde6:	e7cf      	b.n	800dd88 <__smakebuf_r+0x18>

0800dde8 <_putc_r>:
 800dde8:	b570      	push	{r4, r5, r6, lr}
 800ddea:	460d      	mov	r5, r1
 800ddec:	4614      	mov	r4, r2
 800ddee:	4606      	mov	r6, r0
 800ddf0:	b118      	cbz	r0, 800ddfa <_putc_r+0x12>
 800ddf2:	6a03      	ldr	r3, [r0, #32]
 800ddf4:	b90b      	cbnz	r3, 800ddfa <_putc_r+0x12>
 800ddf6:	f7ff f913 	bl	800d020 <__sinit>
 800ddfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ddfc:	07d8      	lsls	r0, r3, #31
 800ddfe:	d405      	bmi.n	800de0c <_putc_r+0x24>
 800de00:	89a3      	ldrh	r3, [r4, #12]
 800de02:	0599      	lsls	r1, r3, #22
 800de04:	d402      	bmi.n	800de0c <_putc_r+0x24>
 800de06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de08:	f7ff fb01 	bl	800d40e <__retarget_lock_acquire_recursive>
 800de0c:	68a3      	ldr	r3, [r4, #8]
 800de0e:	3b01      	subs	r3, #1
 800de10:	2b00      	cmp	r3, #0
 800de12:	60a3      	str	r3, [r4, #8]
 800de14:	da05      	bge.n	800de22 <_putc_r+0x3a>
 800de16:	69a2      	ldr	r2, [r4, #24]
 800de18:	4293      	cmp	r3, r2
 800de1a:	db12      	blt.n	800de42 <_putc_r+0x5a>
 800de1c:	b2eb      	uxtb	r3, r5
 800de1e:	2b0a      	cmp	r3, #10
 800de20:	d00f      	beq.n	800de42 <_putc_r+0x5a>
 800de22:	6823      	ldr	r3, [r4, #0]
 800de24:	1c5a      	adds	r2, r3, #1
 800de26:	6022      	str	r2, [r4, #0]
 800de28:	701d      	strb	r5, [r3, #0]
 800de2a:	b2ed      	uxtb	r5, r5
 800de2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800de2e:	07da      	lsls	r2, r3, #31
 800de30:	d405      	bmi.n	800de3e <_putc_r+0x56>
 800de32:	89a3      	ldrh	r3, [r4, #12]
 800de34:	059b      	lsls	r3, r3, #22
 800de36:	d402      	bmi.n	800de3e <_putc_r+0x56>
 800de38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800de3a:	f7ff fae9 	bl	800d410 <__retarget_lock_release_recursive>
 800de3e:	4628      	mov	r0, r5
 800de40:	bd70      	pop	{r4, r5, r6, pc}
 800de42:	4629      	mov	r1, r5
 800de44:	4622      	mov	r2, r4
 800de46:	4630      	mov	r0, r6
 800de48:	f7ff f9d9 	bl	800d1fe <__swbuf_r>
 800de4c:	4605      	mov	r5, r0
 800de4e:	e7ed      	b.n	800de2c <_putc_r+0x44>

0800de50 <_fstat_r>:
 800de50:	b538      	push	{r3, r4, r5, lr}
 800de52:	4d07      	ldr	r5, [pc, #28]	; (800de70 <_fstat_r+0x20>)
 800de54:	2300      	movs	r3, #0
 800de56:	4604      	mov	r4, r0
 800de58:	4608      	mov	r0, r1
 800de5a:	4611      	mov	r1, r2
 800de5c:	602b      	str	r3, [r5, #0]
 800de5e:	f000 f831 	bl	800dec4 <_fstat>
 800de62:	1c43      	adds	r3, r0, #1
 800de64:	d102      	bne.n	800de6c <_fstat_r+0x1c>
 800de66:	682b      	ldr	r3, [r5, #0]
 800de68:	b103      	cbz	r3, 800de6c <_fstat_r+0x1c>
 800de6a:	6023      	str	r3, [r4, #0]
 800de6c:	bd38      	pop	{r3, r4, r5, pc}
 800de6e:	bf00      	nop
 800de70:	20001840 	.word	0x20001840

0800de74 <_isatty_r>:
 800de74:	b538      	push	{r3, r4, r5, lr}
 800de76:	4d06      	ldr	r5, [pc, #24]	; (800de90 <_isatty_r+0x1c>)
 800de78:	2300      	movs	r3, #0
 800de7a:	4604      	mov	r4, r0
 800de7c:	4608      	mov	r0, r1
 800de7e:	602b      	str	r3, [r5, #0]
 800de80:	f000 f828 	bl	800ded4 <_isatty>
 800de84:	1c43      	adds	r3, r0, #1
 800de86:	d102      	bne.n	800de8e <_isatty_r+0x1a>
 800de88:	682b      	ldr	r3, [r5, #0]
 800de8a:	b103      	cbz	r3, 800de8e <_isatty_r+0x1a>
 800de8c:	6023      	str	r3, [r4, #0]
 800de8e:	bd38      	pop	{r3, r4, r5, pc}
 800de90:	20001840 	.word	0x20001840

0800de94 <_sbrk_r>:
 800de94:	b538      	push	{r3, r4, r5, lr}
 800de96:	4d06      	ldr	r5, [pc, #24]	; (800deb0 <_sbrk_r+0x1c>)
 800de98:	2300      	movs	r3, #0
 800de9a:	4604      	mov	r4, r0
 800de9c:	4608      	mov	r0, r1
 800de9e:	602b      	str	r3, [r5, #0]
 800dea0:	f000 f830 	bl	800df04 <_sbrk>
 800dea4:	1c43      	adds	r3, r0, #1
 800dea6:	d102      	bne.n	800deae <_sbrk_r+0x1a>
 800dea8:	682b      	ldr	r3, [r5, #0]
 800deaa:	b103      	cbz	r3, 800deae <_sbrk_r+0x1a>
 800deac:	6023      	str	r3, [r4, #0]
 800deae:	bd38      	pop	{r3, r4, r5, pc}
 800deb0:	20001840 	.word	0x20001840

0800deb4 <_close>:
 800deb4:	4b02      	ldr	r3, [pc, #8]	; (800dec0 <_close+0xc>)
 800deb6:	2258      	movs	r2, #88	; 0x58
 800deb8:	601a      	str	r2, [r3, #0]
 800deba:	f04f 30ff 	mov.w	r0, #4294967295
 800debe:	4770      	bx	lr
 800dec0:	20001840 	.word	0x20001840

0800dec4 <_fstat>:
 800dec4:	4b02      	ldr	r3, [pc, #8]	; (800ded0 <_fstat+0xc>)
 800dec6:	2258      	movs	r2, #88	; 0x58
 800dec8:	601a      	str	r2, [r3, #0]
 800deca:	f04f 30ff 	mov.w	r0, #4294967295
 800dece:	4770      	bx	lr
 800ded0:	20001840 	.word	0x20001840

0800ded4 <_isatty>:
 800ded4:	4b02      	ldr	r3, [pc, #8]	; (800dee0 <_isatty+0xc>)
 800ded6:	2258      	movs	r2, #88	; 0x58
 800ded8:	601a      	str	r2, [r3, #0]
 800deda:	2000      	movs	r0, #0
 800dedc:	4770      	bx	lr
 800dede:	bf00      	nop
 800dee0:	20001840 	.word	0x20001840

0800dee4 <_lseek>:
 800dee4:	4b02      	ldr	r3, [pc, #8]	; (800def0 <_lseek+0xc>)
 800dee6:	2258      	movs	r2, #88	; 0x58
 800dee8:	601a      	str	r2, [r3, #0]
 800deea:	f04f 30ff 	mov.w	r0, #4294967295
 800deee:	4770      	bx	lr
 800def0:	20001840 	.word	0x20001840

0800def4 <_read>:
 800def4:	4b02      	ldr	r3, [pc, #8]	; (800df00 <_read+0xc>)
 800def6:	2258      	movs	r2, #88	; 0x58
 800def8:	601a      	str	r2, [r3, #0]
 800defa:	f04f 30ff 	mov.w	r0, #4294967295
 800defe:	4770      	bx	lr
 800df00:	20001840 	.word	0x20001840

0800df04 <_sbrk>:
 800df04:	4a04      	ldr	r2, [pc, #16]	; (800df18 <_sbrk+0x14>)
 800df06:	6811      	ldr	r1, [r2, #0]
 800df08:	4603      	mov	r3, r0
 800df0a:	b909      	cbnz	r1, 800df10 <_sbrk+0xc>
 800df0c:	4903      	ldr	r1, [pc, #12]	; (800df1c <_sbrk+0x18>)
 800df0e:	6011      	str	r1, [r2, #0]
 800df10:	6810      	ldr	r0, [r2, #0]
 800df12:	4403      	add	r3, r0
 800df14:	6013      	str	r3, [r2, #0]
 800df16:	4770      	bx	lr
 800df18:	20001850 	.word	0x20001850
 800df1c:	20001858 	.word	0x20001858

0800df20 <_init>:
 800df20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df22:	bf00      	nop
 800df24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df26:	bc08      	pop	{r3}
 800df28:	469e      	mov	lr, r3
 800df2a:	4770      	bx	lr

0800df2c <_fini>:
 800df2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df2e:	bf00      	nop
 800df30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df32:	bc08      	pop	{r3}
 800df34:	469e      	mov	lr, r3
 800df36:	4770      	bx	lr
