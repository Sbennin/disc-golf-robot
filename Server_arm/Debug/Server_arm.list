
Server_Arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e434  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000017fc  0800e574  0800e574  0001e574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fd70  0800fd70  0001fd70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fd78  0800fd78  0001fd78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fd7c  0800fd7c  0001fd7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  20000008  0800fd80  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000094  0800fe0c  00020094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000cc  0800fe41  000200cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019b0  200000e0  0800fe52  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20001a90  0800fe52  00021a90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00030000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800fe52  000201e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .comment      00000043  00000000  00000000  00020a97  2**0
                  CONTENTS, READONLY
 16 .debug_info   00036621  00000000  00000000  00020ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000073b4  00000000  00000000  000570fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003180  00000000  00000000  0005e4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002610  00000000  00000000  00061630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002f244  00000000  00000000  00063c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00038cc4  00000000  00000000  00092e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00107bcb  00000000  00000000  000cbb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000d970  00000000  00000000  001d3714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000007e  00000000  00000000  001e1084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000e0 	.word	0x200000e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e55c 	.word	0x0800e55c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000e4 	.word	0x200000e4
 800017c:	0800e55c 	.word	0x0800e55c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2uiz>:
 80009cc:	004a      	lsls	r2, r1, #1
 80009ce:	d211      	bcs.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009d4:	d211      	bcs.n	80009fa <__aeabi_d2uiz+0x2e>
 80009d6:	d50d      	bpl.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e0:	d40e      	bmi.n	8000a00 <__aeabi_d2uiz+0x34>
 80009e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ee:	fa23 f002 	lsr.w	r0, r3, r2
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d102      	bne.n	8000a06 <__aeabi_d2uiz+0x3a>
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	4770      	bx	lr
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	4770      	bx	lr

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b970 	b.w	8000d04 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9e08      	ldr	r6, [sp, #32]
 8000a42:	460d      	mov	r5, r1
 8000a44:	4604      	mov	r4, r0
 8000a46:	460f      	mov	r7, r1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d14a      	bne.n	8000ae2 <__udivmoddi4+0xa6>
 8000a4c:	428a      	cmp	r2, r1
 8000a4e:	4694      	mov	ip, r2
 8000a50:	d965      	bls.n	8000b1e <__udivmoddi4+0xe2>
 8000a52:	fab2 f382 	clz	r3, r2
 8000a56:	b143      	cbz	r3, 8000a6a <__udivmoddi4+0x2e>
 8000a58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a5c:	f1c3 0220 	rsb	r2, r3, #32
 8000a60:	409f      	lsls	r7, r3
 8000a62:	fa20 f202 	lsr.w	r2, r0, r2
 8000a66:	4317      	orrs	r7, r2
 8000a68:	409c      	lsls	r4, r3
 8000a6a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a6e:	fa1f f58c 	uxth.w	r5, ip
 8000a72:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a76:	0c22      	lsrs	r2, r4, #16
 8000a78:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a7c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a80:	fb01 f005 	mul.w	r0, r1, r5
 8000a84:	4290      	cmp	r0, r2
 8000a86:	d90a      	bls.n	8000a9e <__udivmoddi4+0x62>
 8000a88:	eb1c 0202 	adds.w	r2, ip, r2
 8000a8c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a90:	f080 811c 	bcs.w	8000ccc <__udivmoddi4+0x290>
 8000a94:	4290      	cmp	r0, r2
 8000a96:	f240 8119 	bls.w	8000ccc <__udivmoddi4+0x290>
 8000a9a:	3902      	subs	r1, #2
 8000a9c:	4462      	add	r2, ip
 8000a9e:	1a12      	subs	r2, r2, r0
 8000aa0:	b2a4      	uxth	r4, r4
 8000aa2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aa6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aaa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aae:	fb00 f505 	mul.w	r5, r0, r5
 8000ab2:	42a5      	cmp	r5, r4
 8000ab4:	d90a      	bls.n	8000acc <__udivmoddi4+0x90>
 8000ab6:	eb1c 0404 	adds.w	r4, ip, r4
 8000aba:	f100 32ff 	add.w	r2, r0, #4294967295
 8000abe:	f080 8107 	bcs.w	8000cd0 <__udivmoddi4+0x294>
 8000ac2:	42a5      	cmp	r5, r4
 8000ac4:	f240 8104 	bls.w	8000cd0 <__udivmoddi4+0x294>
 8000ac8:	4464      	add	r4, ip
 8000aca:	3802      	subs	r0, #2
 8000acc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ad0:	1b64      	subs	r4, r4, r5
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	b11e      	cbz	r6, 8000ade <__udivmoddi4+0xa2>
 8000ad6:	40dc      	lsrs	r4, r3
 8000ad8:	2300      	movs	r3, #0
 8000ada:	e9c6 4300 	strd	r4, r3, [r6]
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	428b      	cmp	r3, r1
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0xbc>
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	f000 80ed 	beq.w	8000cc6 <__udivmoddi4+0x28a>
 8000aec:	2100      	movs	r1, #0
 8000aee:	e9c6 0500 	strd	r0, r5, [r6]
 8000af2:	4608      	mov	r0, r1
 8000af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af8:	fab3 f183 	clz	r1, r3
 8000afc:	2900      	cmp	r1, #0
 8000afe:	d149      	bne.n	8000b94 <__udivmoddi4+0x158>
 8000b00:	42ab      	cmp	r3, r5
 8000b02:	d302      	bcc.n	8000b0a <__udivmoddi4+0xce>
 8000b04:	4282      	cmp	r2, r0
 8000b06:	f200 80f8 	bhi.w	8000cfa <__udivmoddi4+0x2be>
 8000b0a:	1a84      	subs	r4, r0, r2
 8000b0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b10:	2001      	movs	r0, #1
 8000b12:	4617      	mov	r7, r2
 8000b14:	2e00      	cmp	r6, #0
 8000b16:	d0e2      	beq.n	8000ade <__udivmoddi4+0xa2>
 8000b18:	e9c6 4700 	strd	r4, r7, [r6]
 8000b1c:	e7df      	b.n	8000ade <__udivmoddi4+0xa2>
 8000b1e:	b902      	cbnz	r2, 8000b22 <__udivmoddi4+0xe6>
 8000b20:	deff      	udf	#255	; 0xff
 8000b22:	fab2 f382 	clz	r3, r2
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8090 	bne.w	8000c4c <__udivmoddi4+0x210>
 8000b2c:	1a8a      	subs	r2, r1, r2
 8000b2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b32:	fa1f fe8c 	uxth.w	lr, ip
 8000b36:	2101      	movs	r1, #1
 8000b38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b40:	0c22      	lsrs	r2, r4, #16
 8000b42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b46:	fb0e f005 	mul.w	r0, lr, r5
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x124>
 8000b4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b52:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x122>
 8000b58:	4290      	cmp	r0, r2
 8000b5a:	f200 80cb 	bhi.w	8000cf4 <__udivmoddi4+0x2b8>
 8000b5e:	4645      	mov	r5, r8
 8000b60:	1a12      	subs	r2, r2, r0
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b68:	fb07 2210 	mls	r2, r7, r0, r2
 8000b6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b70:	fb0e fe00 	mul.w	lr, lr, r0
 8000b74:	45a6      	cmp	lr, r4
 8000b76:	d908      	bls.n	8000b8a <__udivmoddi4+0x14e>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b80:	d202      	bcs.n	8000b88 <__udivmoddi4+0x14c>
 8000b82:	45a6      	cmp	lr, r4
 8000b84:	f200 80bb 	bhi.w	8000cfe <__udivmoddi4+0x2c2>
 8000b88:	4610      	mov	r0, r2
 8000b8a:	eba4 040e 	sub.w	r4, r4, lr
 8000b8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b92:	e79f      	b.n	8000ad4 <__udivmoddi4+0x98>
 8000b94:	f1c1 0720 	rsb	r7, r1, #32
 8000b98:	408b      	lsls	r3, r1
 8000b9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ba2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ba6:	fa20 f307 	lsr.w	r3, r0, r7
 8000baa:	40fd      	lsrs	r5, r7
 8000bac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb0:	4323      	orrs	r3, r4
 8000bb2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bb6:	fa1f fe8c 	uxth.w	lr, ip
 8000bba:	fb09 5518 	mls	r5, r9, r8, r5
 8000bbe:	0c1c      	lsrs	r4, r3, #16
 8000bc0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bc4:	fb08 f50e 	mul.w	r5, r8, lr
 8000bc8:	42a5      	cmp	r5, r4
 8000bca:	fa02 f201 	lsl.w	r2, r2, r1
 8000bce:	fa00 f001 	lsl.w	r0, r0, r1
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b0>
 8000bd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bdc:	f080 8088 	bcs.w	8000cf0 <__udivmoddi4+0x2b4>
 8000be0:	42a5      	cmp	r5, r4
 8000be2:	f240 8085 	bls.w	8000cf0 <__udivmoddi4+0x2b4>
 8000be6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bea:	4464      	add	r4, ip
 8000bec:	1b64      	subs	r4, r4, r5
 8000bee:	b29d      	uxth	r5, r3
 8000bf0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bf4:	fb09 4413 	mls	r4, r9, r3, r4
 8000bf8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bfc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c00:	45a6      	cmp	lr, r4
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1da>
 8000c04:	eb1c 0404 	adds.w	r4, ip, r4
 8000c08:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c0c:	d26c      	bcs.n	8000ce8 <__udivmoddi4+0x2ac>
 8000c0e:	45a6      	cmp	lr, r4
 8000c10:	d96a      	bls.n	8000ce8 <__udivmoddi4+0x2ac>
 8000c12:	3b02      	subs	r3, #2
 8000c14:	4464      	add	r4, ip
 8000c16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c1e:	eba4 040e 	sub.w	r4, r4, lr
 8000c22:	42ac      	cmp	r4, r5
 8000c24:	46c8      	mov	r8, r9
 8000c26:	46ae      	mov	lr, r5
 8000c28:	d356      	bcc.n	8000cd8 <__udivmoddi4+0x29c>
 8000c2a:	d053      	beq.n	8000cd4 <__udivmoddi4+0x298>
 8000c2c:	b156      	cbz	r6, 8000c44 <__udivmoddi4+0x208>
 8000c2e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c32:	eb64 040e 	sbc.w	r4, r4, lr
 8000c36:	fa04 f707 	lsl.w	r7, r4, r7
 8000c3a:	40ca      	lsrs	r2, r1
 8000c3c:	40cc      	lsrs	r4, r1
 8000c3e:	4317      	orrs	r7, r2
 8000c40:	e9c6 7400 	strd	r7, r4, [r6]
 8000c44:	4618      	mov	r0, r3
 8000c46:	2100      	movs	r1, #0
 8000c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4c:	f1c3 0120 	rsb	r1, r3, #32
 8000c50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c54:	fa20 f201 	lsr.w	r2, r0, r1
 8000c58:	fa25 f101 	lsr.w	r1, r5, r1
 8000c5c:	409d      	lsls	r5, r3
 8000c5e:	432a      	orrs	r2, r5
 8000c60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c70:	0c11      	lsrs	r1, r2, #16
 8000c72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c76:	fb00 f50e 	mul.w	r5, r0, lr
 8000c7a:	428d      	cmp	r5, r1
 8000c7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x258>
 8000c82:	eb1c 0101 	adds.w	r1, ip, r1
 8000c86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c8a:	d22f      	bcs.n	8000cec <__udivmoddi4+0x2b0>
 8000c8c:	428d      	cmp	r5, r1
 8000c8e:	d92d      	bls.n	8000cec <__udivmoddi4+0x2b0>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4461      	add	r1, ip
 8000c94:	1b49      	subs	r1, r1, r5
 8000c96:	b292      	uxth	r2, r2
 8000c98:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c9c:	fb07 1115 	mls	r1, r7, r5, r1
 8000ca0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ca4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ca8:	4291      	cmp	r1, r2
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x282>
 8000cac:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cb4:	d216      	bcs.n	8000ce4 <__udivmoddi4+0x2a8>
 8000cb6:	4291      	cmp	r1, r2
 8000cb8:	d914      	bls.n	8000ce4 <__udivmoddi4+0x2a8>
 8000cba:	3d02      	subs	r5, #2
 8000cbc:	4462      	add	r2, ip
 8000cbe:	1a52      	subs	r2, r2, r1
 8000cc0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cc4:	e738      	b.n	8000b38 <__udivmoddi4+0xfc>
 8000cc6:	4631      	mov	r1, r6
 8000cc8:	4630      	mov	r0, r6
 8000cca:	e708      	b.n	8000ade <__udivmoddi4+0xa2>
 8000ccc:	4639      	mov	r1, r7
 8000cce:	e6e6      	b.n	8000a9e <__udivmoddi4+0x62>
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	e6fb      	b.n	8000acc <__udivmoddi4+0x90>
 8000cd4:	4548      	cmp	r0, r9
 8000cd6:	d2a9      	bcs.n	8000c2c <__udivmoddi4+0x1f0>
 8000cd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cdc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	e7a3      	b.n	8000c2c <__udivmoddi4+0x1f0>
 8000ce4:	4645      	mov	r5, r8
 8000ce6:	e7ea      	b.n	8000cbe <__udivmoddi4+0x282>
 8000ce8:	462b      	mov	r3, r5
 8000cea:	e794      	b.n	8000c16 <__udivmoddi4+0x1da>
 8000cec:	4640      	mov	r0, r8
 8000cee:	e7d1      	b.n	8000c94 <__udivmoddi4+0x258>
 8000cf0:	46d0      	mov	r8, sl
 8000cf2:	e77b      	b.n	8000bec <__udivmoddi4+0x1b0>
 8000cf4:	3d02      	subs	r5, #2
 8000cf6:	4462      	add	r2, ip
 8000cf8:	e732      	b.n	8000b60 <__udivmoddi4+0x124>
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	e70a      	b.n	8000b14 <__udivmoddi4+0xd8>
 8000cfe:	4464      	add	r4, ip
 8000d00:	3802      	subs	r0, #2
 8000d02:	e742      	b.n	8000b8a <__udivmoddi4+0x14e>

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <LL_EXTI_EnableIT_32_63+0x24>)
 8000d12:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000d16:	4905      	ldr	r1, [pc, #20]	; (8000d2c <LL_EXTI_EnableIT_32_63+0x24>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	58000800 	.word	0x58000800

08000d30 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4013      	ands	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d54:	68fb      	ldr	r3, [r7, #12]
}
 8000d56:	bf00      	nop
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b085      	sub	sp, #20
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d6e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000d72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d82:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
}
 8000d8e:	bf00      	nop
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000d9e:	f002 fb23 	bl	80033e8 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000da2:	f002 fb27 	bl	80033f4 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000da6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000daa:	f7ff ffad 	bl	8000d08 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000dae:	f009 fe19 	bl	800a9e4 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000db2:	f000 f821 	bl	8000df8 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000db6:	f000 f8c1 	bl	8000f3c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000dba:	bf00      	nop
}
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000dc0:	b5b0      	push	{r4, r5, r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <APPD_EnableCPU2+0x34>)
 8000dc8:	1d3c      	adds	r4, r7, #4
 8000dca:	461d      	mov	r5, r3
 8000dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dd4:	c403      	stmia	r4!, {r0, r1}
 8000dd6:	8022      	strh	r2, [r4, #0]
 8000dd8:	3402      	adds	r4, #2
 8000dda:	0c13      	lsrs	r3, r2, #16
 8000ddc:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000dde:	f009 fd15 	bl	800a80c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	4618      	mov	r0, r3
 8000de6:	f008 ffa6 	bl	8009d36 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000dea:	bf00      	nop
}
 8000dec:	3720      	adds	r7, #32
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bdb0      	pop	{r4, r5, r7, pc}
 8000df2:	bf00      	nop
 8000df4:	0800e574 	.word	0x0800e574

08000df8 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000e18:	2300      	movs	r3, #0
 8000e1a:	77fb      	strb	r3, [r7, #31]
 8000e1c:	e036      	b.n	8000e8c <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000e1e:	7ffb      	ldrb	r3, [r7, #31]
 8000e20:	4a43      	ldr	r2, [pc, #268]	; (8000f30 <APPD_SetCPU2GpioConfig+0x138>)
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	4413      	add	r3, r2
 8000e26:	799b      	ldrb	r3, [r3, #6]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d02c      	beq.n	8000e86 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000e2c:	7ffb      	ldrb	r3, [r7, #31]
 8000e2e:	4a40      	ldr	r2, [pc, #256]	; (8000f30 <APPD_SetCPU2GpioConfig+0x138>)
 8000e30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000e34:	4a3f      	ldr	r2, [pc, #252]	; (8000f34 <APPD_SetCPU2GpioConfig+0x13c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d01b      	beq.n	8000e72 <APPD_SetCPU2GpioConfig+0x7a>
 8000e3a:	4a3e      	ldr	r2, [pc, #248]	; (8000f34 <APPD_SetCPU2GpioConfig+0x13c>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d821      	bhi.n	8000e84 <APPD_SetCPU2GpioConfig+0x8c>
 8000e40:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e44:	d003      	beq.n	8000e4e <APPD_SetCPU2GpioConfig+0x56>
 8000e46:	4a3c      	ldr	r2, [pc, #240]	; (8000f38 <APPD_SetCPU2GpioConfig+0x140>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d009      	beq.n	8000e60 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8000e4c:	e01a      	b.n	8000e84 <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000e4e:	7ffb      	ldrb	r3, [r7, #31]
 8000e50:	4a37      	ldr	r2, [pc, #220]	; (8000f30 <APPD_SetCPU2GpioConfig+0x138>)
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	4413      	add	r3, r2
 8000e56:	889a      	ldrh	r2, [r3, #4]
 8000e58:	8bbb      	ldrh	r3, [r7, #28]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	83bb      	strh	r3, [r7, #28]
          break;
 8000e5e:	e012      	b.n	8000e86 <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000e60:	7ffb      	ldrb	r3, [r7, #31]
 8000e62:	4a33      	ldr	r2, [pc, #204]	; (8000f30 <APPD_SetCPU2GpioConfig+0x138>)
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	4413      	add	r3, r2
 8000e68:	889a      	ldrh	r2, [r3, #4]
 8000e6a:	8b7b      	ldrh	r3, [r7, #26]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	837b      	strh	r3, [r7, #26]
          break;
 8000e70:	e009      	b.n	8000e86 <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000e72:	7ffb      	ldrb	r3, [r7, #31]
 8000e74:	4a2e      	ldr	r2, [pc, #184]	; (8000f30 <APPD_SetCPU2GpioConfig+0x138>)
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	4413      	add	r3, r2
 8000e7a:	889a      	ldrh	r2, [r3, #4]
 8000e7c:	8b3b      	ldrh	r3, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	833b      	strh	r3, [r7, #24]
          break;
 8000e82:	e000      	b.n	8000e86 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000e84:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000e86:	7ffb      	ldrb	r3, [r7, #31]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	77fb      	strb	r3, [r7, #31]
 8000e8c:	7ffb      	ldrb	r3, [r7, #31]
 8000e8e:	2b25      	cmp	r3, #37	; 0x25
 8000e90:	d9c5      	bls.n	8000e1e <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000e9e:	8bbb      	ldrh	r3, [r7, #28]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d014      	beq.n	8000ece <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000ea4:	8bbb      	ldrh	r3, [r7, #28]
 8000ea6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f7ff ff41 	bl	8000d30 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f7ff ff57 	bl	8000d62 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebc:	f002 ff6c 	bl	8003d98 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000ec0:	8bbb      	ldrh	r3, [r7, #28]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eca:	f003 f8d5 	bl	8004078 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000ece:	8b7b      	ldrh	r3, [r7, #26]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d012      	beq.n	8000efa <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000ed4:	8b7b      	ldrh	r3, [r7, #26]
 8000ed6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed8:	2002      	movs	r0, #2
 8000eda:	f7ff ff29 	bl	8000d30 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000ede:	2002      	movs	r0, #2
 8000ee0:	f7ff ff3f 	bl	8000d62 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4813      	ldr	r0, [pc, #76]	; (8000f38 <APPD_SetCPU2GpioConfig+0x140>)
 8000eea:	f002 ff55 	bl	8003d98 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000eee:	8b7b      	ldrh	r3, [r7, #26]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4810      	ldr	r0, [pc, #64]	; (8000f38 <APPD_SetCPU2GpioConfig+0x140>)
 8000ef6:	f003 f8bf 	bl	8004078 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000efa:	8b3b      	ldrh	r3, [r7, #24]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d013      	beq.n	8000f28 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000f00:	8b3b      	ldrh	r3, [r7, #24]
 8000f02:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f04:	2004      	movs	r0, #4
 8000f06:	f7ff ff13 	bl	8000d30 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000f0a:	2004      	movs	r0, #4
 8000f0c:	f7ff ff29 	bl	8000d62 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	4619      	mov	r1, r3
 8000f14:	4807      	ldr	r0, [pc, #28]	; (8000f34 <APPD_SetCPU2GpioConfig+0x13c>)
 8000f16:	f002 ff3f 	bl	8003d98 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000f1a:	8b3b      	ldrh	r3, [r7, #24]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <APPD_SetCPU2GpioConfig+0x13c>)
 8000f22:	f003 f8a9 	bl	8004078 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000f26:	bf00      	nop
 8000f28:	bf00      	nop
}
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	0800f9fc 	.word	0x0800f9fc
 8000f34:	48000800 	.word	0x48000800
 8000f38:	48000400 	.word	0x48000400

08000f3c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000f40:	bf00      	nop
}
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000f4e:	f001 fce3 	bl	8002918 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000f52:	bf00      	nop
}
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b084      	sub	sp, #16
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	60f8      	str	r0, [r7, #12]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000f64:	897a      	ldrh	r2, [r7, #10]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68f9      	ldr	r1, [r7, #12]
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f001 fa4a 	bl	8002404 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000f70:	bf00      	nop
}
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <LL_C2_PWR_SetPowerMode+0x28>)
 8000f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f86:	f023 0207 	bic.w	r2, r3, #7
 8000f8a:	4905      	ldr	r1, [pc, #20]	; (8000fa0 <LL_C2_PWR_SetPowerMode+0x28>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	58000400 	.word	0x58000400

08000fa4 <LL_EXTI_EnableIT_32_63>:
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000fae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000fb2:	4905      	ldr	r1, [pc, #20]	; (8000fc8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	58000800 	.word	0x58000800

08000fcc <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000fda:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000fe6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	cafecafe 	.word	0xcafecafe

08001008 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800101a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4313      	orrs	r3, r2
 8001022:	608b      	str	r3, [r1, #8]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <LL_DBGMCU_GetDeviceID+0x18>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e0042000 	.word	0xe0042000

0800104c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <LL_DBGMCU_GetRevisionID+0x18>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	0c1b      	lsrs	r3, r3, #16
 8001056:	b29b      	uxth	r3, r3
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e0042000 	.word	0xe0042000

08001068 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	22ff      	movs	r2, #255	; 0xff
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	22ca      	movs	r2, #202	; 0xca
 800108e:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2253      	movs	r2, #83	; 0x53
 8001094:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	f023 0207 	bic.w	r2, r3, #7
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	431a      	orrs	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	609a      	str	r2, [r3, #8]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <MX_APPE_Config+0x18>)
 80010ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010d2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80010d4:	f000 f826 	bl	8001124 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80010d8:	f000 f82b 	bl	8001132 <Config_HSE>

  return;
 80010dc:	bf00      	nop
}
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	58004000 	.word	0x58004000

080010e4 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80010e8:	f000 f837 	bl	800115a <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80010ec:	f000 f850 	bl	8001190 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80010f0:	4904      	ldr	r1, [pc, #16]	; (8001104 <MX_APPE_Init+0x20>)
 80010f2:	2000      	movs	r0, #0
 80010f4:	f000 ff94 	bl	8002020 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 80010f8:	f7ff fe4f 	bl	8000d9a <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80010fc:	f000 f856 	bl	80011ac <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8001100:	bf00      	nop
}
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200001dc 	.word	0x200001dc

08001108 <Init_Smps>:

void Init_Smps(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800110c:	bf00      	nop
}
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <Init_Exti>:

void Init_Exti(void)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800111a:	2050      	movs	r0, #80	; 0x50
 800111c:	f7ff ff42 	bl	8000fa4 <LL_EXTI_EnableIT_32_63>

  return;
 8001120:	bf00      	nop
}
 8001122:	bd80      	pop	{r7, pc}

08001124 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001128:	bf00      	nop
}
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001138:	2000      	movs	r0, #0
 800113a:	f009 fcd1 	bl	800aae0 <OTP_Read>
 800113e:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d005      	beq.n	8001152 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	799b      	ldrb	r3, [r3, #6]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff3e 	bl	8000fcc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001150:	bf00      	nop
 8001152:	bf00      	nop
}
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <System_Init>:

static void System_Init(void)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	af00      	add	r7, sp, #0
  Init_Smps();
 800115e:	f7ff ffd3 	bl	8001108 <Init_Smps>

  Init_Exti();
 8001162:	f7ff ffd8 	bl	8001116 <Init_Exti>

  Init_Rtc();
 8001166:	f000 f803 	bl	8001170 <Init_Rtc>

  return;
 800116a:	bf00      	nop
}
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001174:	4805      	ldr	r0, [pc, #20]	; (800118c <Init_Rtc+0x1c>)
 8001176:	f7ff ff84 	bl	8001082 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800117a:	2100      	movs	r1, #0
 800117c:	4803      	ldr	r0, [pc, #12]	; (800118c <Init_Rtc+0x1c>)
 800117e:	f7ff ff90 	bl	80010a2 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001182:	4802      	ldr	r0, [pc, #8]	; (800118c <Init_Rtc+0x1c>)
 8001184:	f7ff ff70 	bl	8001068 <LL_RTC_EnableWriteProtection>

  return;
 8001188:	bf00      	nop
}
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40002800 	.word	0x40002800

08001190 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001194:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001198:	f7ff ff36 	bl	8001008 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800119c:	f00b ff5c 	bl	800d058 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80011a0:	2004      	movs	r0, #4
 80011a2:	f7ff fee9 	bl	8000f78 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80011a6:	bf00      	nop
}
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 80011b2:	f009 f975 	bl	800a4a0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80011b6:	4a11      	ldr	r2, [pc, #68]	; (80011fc <appe_Tl_Init+0x50>)
 80011b8:	2100      	movs	r1, #0
 80011ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80011be:	f00c f889 	bl	800d2d4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <appe_Tl_Init+0x54>)
 80011c4:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <appe_Tl_Init+0x58>)
 80011c8:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80011ca:	463b      	mov	r3, r7
 80011cc:	4619      	mov	r1, r3
 80011ce:	480e      	ldr	r0, [pc, #56]	; (8001208 <appe_Tl_Init+0x5c>)
 80011d0:	f009 f828 	bl	800a224 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80011d4:	4b0d      	ldr	r3, [pc, #52]	; (800120c <appe_Tl_Init+0x60>)
 80011d6:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80011d8:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <appe_Tl_Init+0x64>)
 80011da:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80011dc:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <appe_Tl_Init+0x68>)
 80011de:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80011e0:	f240 533c 	movw	r3, #1340	; 0x53c
 80011e4:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80011e6:	f107 0308 	add.w	r3, r7, #8
 80011ea:	4618      	mov	r0, r3
 80011ec:	f009 fa9a 	bl	800a724 <TL_MM_Init>

  TL_Enable();
 80011f0:	f009 f950 	bl	800a494 <TL_Enable>

  return;
 80011f4:	bf00      	nop
}
 80011f6:	3720      	adds	r7, #32
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	0800a25d 	.word	0x0800a25d
 8001200:	20030734 	.word	0x20030734
 8001204:	08001219 	.word	0x08001219
 8001208:	08001231 	.word	0x08001231
 800120c:	2003094c 	.word	0x2003094c
 8001210:	20030840 	.word	0x20030840
 8001214:	200301f8 	.word	0x200301f8

08001218 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001222:	bf00      	nop
}
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
	...

08001230 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	330b      	adds	r3, #11
 800123e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	b29b      	uxth	r3, r3
 8001246:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800124a:	2b07      	cmp	r3, #7
 800124c:	f200 80d0 	bhi.w	80013f0 <APPE_SysUserEvtRx+0x1c0>
 8001250:	a201      	add	r2, pc, #4	; (adr r2, 8001258 <APPE_SysUserEvtRx+0x28>)
 8001252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001256:	bf00      	nop
 8001258:	08001279 	.word	0x08001279
 800125c:	0800130b 	.word	0x0800130b
 8001260:	0800132d 	.word	0x0800132d
 8001264:	080013f1 	.word	0x080013f1
 8001268:	08001371 	.word	0x08001371
 800126c:	08001395 	.word	0x08001395
 8001270:	080013b1 	.word	0x080013b1
 8001274:	080013d5 	.word	0x080013d5
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	4618      	mov	r0, r3
 800127e:	f008 fd87 	bl	8009d90 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8001282:	485e      	ldr	r0, [pc, #376]	; (80013fc <APPE_SysUserEvtRx+0x1cc>)
 8001284:	f009 fb4e 	bl	800a924 <DbgTraceGetFileName>
 8001288:	4601      	mov	r1, r0
 800128a:	f240 136b 	movw	r3, #363	; 0x16b
 800128e:	4a5c      	ldr	r2, [pc, #368]	; (8001400 <APPE_SysUserEvtRx+0x1d0>)
 8001290:	485c      	ldr	r0, [pc, #368]	; (8001404 <APPE_SysUserEvtRx+0x1d4>)
 8001292:	f00c fa23 	bl	800d6dc <iprintf>
 8001296:	7b3b      	ldrb	r3, [r7, #12]
 8001298:	4619      	mov	r1, r3
 800129a:	7b7b      	ldrb	r3, [r7, #13]
 800129c:	461a      	mov	r2, r3
 800129e:	7bbb      	ldrb	r3, [r7, #14]
 80012a0:	4859      	ldr	r0, [pc, #356]	; (8001408 <APPE_SysUserEvtRx+0x1d8>)
 80012a2:	f00c fa1b 	bl	800d6dc <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 80012a6:	4855      	ldr	r0, [pc, #340]	; (80013fc <APPE_SysUserEvtRx+0x1cc>)
 80012a8:	f009 fb3c 	bl	800a924 <DbgTraceGetFileName>
 80012ac:	4601      	mov	r1, r0
 80012ae:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80012b2:	4a53      	ldr	r2, [pc, #332]	; (8001400 <APPE_SysUserEvtRx+0x1d0>)
 80012b4:	4853      	ldr	r0, [pc, #332]	; (8001404 <APPE_SysUserEvtRx+0x1d4>)
 80012b6:	f00c fa11 	bl	800d6dc <iprintf>
 80012ba:	7c3b      	ldrb	r3, [r7, #16]
 80012bc:	4619      	mov	r1, r3
 80012be:	4853      	ldr	r0, [pc, #332]	; (800140c <APPE_SysUserEvtRx+0x1dc>)
 80012c0:	f00c fa0c 	bl	800d6dc <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80012c4:	484d      	ldr	r0, [pc, #308]	; (80013fc <APPE_SysUserEvtRx+0x1cc>)
 80012c6:	f009 fb2d 	bl	800a924 <DbgTraceGetFileName>
 80012ca:	4601      	mov	r1, r0
 80012cc:	f240 136d 	movw	r3, #365	; 0x16d
 80012d0:	4a4b      	ldr	r2, [pc, #300]	; (8001400 <APPE_SysUserEvtRx+0x1d0>)
 80012d2:	484c      	ldr	r0, [pc, #304]	; (8001404 <APPE_SysUserEvtRx+0x1d4>)
 80012d4:	f00c fa02 	bl	800d6dc <iprintf>
 80012d8:	7dbb      	ldrb	r3, [r7, #22]
 80012da:	4619      	mov	r1, r3
 80012dc:	7dfb      	ldrb	r3, [r7, #23]
 80012de:	461a      	mov	r2, r3
 80012e0:	7e3b      	ldrb	r3, [r7, #24]
 80012e2:	484b      	ldr	r0, [pc, #300]	; (8001410 <APPE_SysUserEvtRx+0x1e0>)
 80012e4:	f00c f9fa 	bl	800d6dc <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80012e8:	4844      	ldr	r0, [pc, #272]	; (80013fc <APPE_SysUserEvtRx+0x1cc>)
 80012ea:	f009 fb1b 	bl	800a924 <DbgTraceGetFileName>
 80012ee:	4601      	mov	r1, r0
 80012f0:	f240 136f 	movw	r3, #367	; 0x16f
 80012f4:	4a42      	ldr	r2, [pc, #264]	; (8001400 <APPE_SysUserEvtRx+0x1d0>)
 80012f6:	4843      	ldr	r0, [pc, #268]	; (8001404 <APPE_SysUserEvtRx+0x1d4>)
 80012f8:	f00c f9f0 	bl	800d6dc <iprintf>
 80012fc:	4845      	ldr	r0, [pc, #276]	; (8001414 <APPE_SysUserEvtRx+0x1e4>)
 80012fe:	f00c f9ed 	bl	800d6dc <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f8e0 	bl	80014c8 <APPE_SysEvtReadyProcessing>
    break;
 8001308:	e073      	b.n	80013f2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 800130a:	483c      	ldr	r0, [pc, #240]	; (80013fc <APPE_SysUserEvtRx+0x1cc>)
 800130c:	f009 fb0a 	bl	800a924 <DbgTraceGetFileName>
 8001310:	4601      	mov	r1, r0
 8001312:	f44f 73ba 	mov.w	r3, #372	; 0x174
 8001316:	4a3a      	ldr	r2, [pc, #232]	; (8001400 <APPE_SysUserEvtRx+0x1d0>)
 8001318:	483a      	ldr	r0, [pc, #232]	; (8001404 <APPE_SysUserEvtRx+0x1d4>)
 800131a:	f00c f9df 	bl	800d6dc <iprintf>
 800131e:	483e      	ldr	r0, [pc, #248]	; (8001418 <APPE_SysUserEvtRx+0x1e8>)
 8001320:	f00c f9dc 	bl	800d6dc <iprintf>
    APPE_SysEvtError(pPayload);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 f885 	bl	8001434 <APPE_SysEvtError>
    break;
 800132a:	e062      	b.n	80013f2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 800132c:	4833      	ldr	r0, [pc, #204]	; (80013fc <APPE_SysUserEvtRx+0x1cc>)
 800132e:	f009 faf9 	bl	800a924 <DbgTraceGetFileName>
 8001332:	4601      	mov	r1, r0
 8001334:	f240 1379 	movw	r3, #377	; 0x179
 8001338:	4a31      	ldr	r2, [pc, #196]	; (8001400 <APPE_SysUserEvtRx+0x1d0>)
 800133a:	4832      	ldr	r0, [pc, #200]	; (8001404 <APPE_SysUserEvtRx+0x1d4>)
 800133c:	f00c f9ce 	bl	800d6dc <iprintf>
 8001340:	4836      	ldr	r0, [pc, #216]	; (800141c <APPE_SysUserEvtRx+0x1ec>)
 8001342:	f00c fa39 	bl	800d7b8 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001346:	482d      	ldr	r0, [pc, #180]	; (80013fc <APPE_SysUserEvtRx+0x1cc>)
 8001348:	f009 faec 	bl	800a924 <DbgTraceGetFileName>
 800134c:	4601      	mov	r1, r0
 800134e:	f44f 73bd 	mov.w	r3, #378	; 0x17a
 8001352:	4a2b      	ldr	r2, [pc, #172]	; (8001400 <APPE_SysUserEvtRx+0x1d0>)
 8001354:	482b      	ldr	r0, [pc, #172]	; (8001404 <APPE_SysUserEvtRx+0x1d4>)
 8001356:	f00c f9c1 	bl	800d6dc <iprintf>
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3302      	adds	r3, #2
 800135e:	6819      	ldr	r1, [r3, #0]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	3302      	adds	r3, #2
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	461a      	mov	r2, r3
 8001368:	482d      	ldr	r0, [pc, #180]	; (8001420 <APPE_SysUserEvtRx+0x1f0>)
 800136a:	f00c f9b7 	bl	800d6dc <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 800136e:	e040      	b.n	80013f2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001370:	4822      	ldr	r0, [pc, #136]	; (80013fc <APPE_SysUserEvtRx+0x1cc>)
 8001372:	f009 fad7 	bl	800a924 <DbgTraceGetFileName>
 8001376:	4601      	mov	r1, r0
 8001378:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800137c:	4a20      	ldr	r2, [pc, #128]	; (8001400 <APPE_SysUserEvtRx+0x1d0>)
 800137e:	4821      	ldr	r0, [pc, #132]	; (8001404 <APPE_SysUserEvtRx+0x1d4>)
 8001380:	f00c f9ac 	bl	800d6dc <iprintf>
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	3302      	adds	r3, #2
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4619      	mov	r1, r3
 800138c:	4825      	ldr	r0, [pc, #148]	; (8001424 <APPE_SysUserEvtRx+0x1f4>)
 800138e:	f00c f9a5 	bl	800d6dc <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 8001392:	e02e      	b.n	80013f2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001394:	4819      	ldr	r0, [pc, #100]	; (80013fc <APPE_SysUserEvtRx+0x1cc>)
 8001396:	f009 fac5 	bl	800a924 <DbgTraceGetFileName>
 800139a:	4601      	mov	r1, r0
 800139c:	f240 1385 	movw	r3, #389	; 0x185
 80013a0:	4a17      	ldr	r2, [pc, #92]	; (8001400 <APPE_SysUserEvtRx+0x1d0>)
 80013a2:	4818      	ldr	r0, [pc, #96]	; (8001404 <APPE_SysUserEvtRx+0x1d4>)
 80013a4:	f00c f99a 	bl	800d6dc <iprintf>
 80013a8:	481f      	ldr	r0, [pc, #124]	; (8001428 <APPE_SysUserEvtRx+0x1f8>)
 80013aa:	f00c f997 	bl	800d6dc <iprintf>
    break;
 80013ae:	e020      	b.n	80013f2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 80013b0:	4812      	ldr	r0, [pc, #72]	; (80013fc <APPE_SysUserEvtRx+0x1cc>)
 80013b2:	f009 fab7 	bl	800a924 <DbgTraceGetFileName>
 80013b6:	4601      	mov	r1, r0
 80013b8:	f240 1389 	movw	r3, #393	; 0x189
 80013bc:	4a10      	ldr	r2, [pc, #64]	; (8001400 <APPE_SysUserEvtRx+0x1d0>)
 80013be:	4811      	ldr	r0, [pc, #68]	; (8001404 <APPE_SysUserEvtRx+0x1d4>)
 80013c0:	f00c f98c 	bl	800d6dc <iprintf>
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	3302      	adds	r3, #2
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4619      	mov	r1, r3
 80013cc:	4817      	ldr	r0, [pc, #92]	; (800142c <APPE_SysUserEvtRx+0x1fc>)
 80013ce:	f00c f985 	bl	800d6dc <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 80013d2:	e00e      	b.n	80013f2 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80013d4:	4809      	ldr	r0, [pc, #36]	; (80013fc <APPE_SysUserEvtRx+0x1cc>)
 80013d6:	f009 faa5 	bl	800a924 <DbgTraceGetFileName>
 80013da:	4601      	mov	r1, r0
 80013dc:	f44f 73c7 	mov.w	r3, #398	; 0x18e
 80013e0:	4a07      	ldr	r2, [pc, #28]	; (8001400 <APPE_SysUserEvtRx+0x1d0>)
 80013e2:	4808      	ldr	r0, [pc, #32]	; (8001404 <APPE_SysUserEvtRx+0x1d4>)
 80013e4:	f00c f97a 	bl	800d6dc <iprintf>
 80013e8:	4811      	ldr	r0, [pc, #68]	; (8001430 <APPE_SysUserEvtRx+0x200>)
 80013ea:	f00c f977 	bl	800d6dc <iprintf>
    break;
 80013ee:	e000      	b.n	80013f2 <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 80013f0:	bf00      	nop
  }

  return;
 80013f2:	bf00      	nop
}
 80013f4:	3720      	adds	r7, #32
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	0800e590 	.word	0x0800e590
 8001400:	0800fb2c 	.word	0x0800fb2c
 8001404:	0800e5a8 	.word	0x0800e5a8
 8001408:	0800e5bc 	.word	0x0800e5bc
 800140c:	0800e5e0 	.word	0x0800e5e0
 8001410:	0800e5fc 	.word	0x0800e5fc
 8001414:	0800e614 	.word	0x0800e614
 8001418:	0800e634 	.word	0x0800e634
 800141c:	0800e658 	.word	0x0800e658
 8001420:	0800e6a8 	.word	0x0800e6a8
 8001424:	0800e6d0 	.word	0x0800e6d0
 8001428:	0800e70c 	.word	0x0800e70c
 800142c:	0800e730 	.word	0x0800e730
 8001430:	0800e76c 	.word	0x0800e76c

08001434 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	330b      	adds	r3, #11
 8001442:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	3302      	adds	r3, #2
 8001448:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 800144a:	4819      	ldr	r0, [pc, #100]	; (80014b0 <APPE_SysEvtError+0x7c>)
 800144c:	f009 fa6a 	bl	800a924 <DbgTraceGetFileName>
 8001450:	4601      	mov	r1, r0
 8001452:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
 8001456:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <APPE_SysEvtError+0x80>)
 8001458:	4817      	ldr	r0, [pc, #92]	; (80014b8 <APPE_SysEvtError+0x84>)
 800145a:	f00c f93f 	bl	800d6dc <iprintf>
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	4619      	mov	r1, r3
 8001464:	4815      	ldr	r0, [pc, #84]	; (80014bc <APPE_SysEvtError+0x88>)
 8001466:	f00c f939 	bl	800d6dc <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10d      	bne.n	800148e <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8001472:	480f      	ldr	r0, [pc, #60]	; (80014b0 <APPE_SysEvtError+0x7c>)
 8001474:	f009 fa56 	bl	800a924 <DbgTraceGetFileName>
 8001478:	4601      	mov	r1, r0
 800147a:	f240 13ab 	movw	r3, #427	; 0x1ab
 800147e:	4a0d      	ldr	r2, [pc, #52]	; (80014b4 <APPE_SysEvtError+0x80>)
 8001480:	480d      	ldr	r0, [pc, #52]	; (80014b8 <APPE_SysEvtError+0x84>)
 8001482:	f00c f92b 	bl	800d6dc <iprintf>
 8001486:	480e      	ldr	r0, [pc, #56]	; (80014c0 <APPE_SysEvtError+0x8c>)
 8001488:	f00c f996 	bl	800d7b8 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 800148c:	e00d      	b.n	80014aa <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 800148e:	4808      	ldr	r0, [pc, #32]	; (80014b0 <APPE_SysEvtError+0x7c>)
 8001490:	f009 fa48 	bl	800a924 <DbgTraceGetFileName>
 8001494:	4601      	mov	r1, r0
 8001496:	f240 13af 	movw	r3, #431	; 0x1af
 800149a:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <APPE_SysEvtError+0x80>)
 800149c:	4806      	ldr	r0, [pc, #24]	; (80014b8 <APPE_SysEvtError+0x84>)
 800149e:	f00c f91d 	bl	800d6dc <iprintf>
 80014a2:	4808      	ldr	r0, [pc, #32]	; (80014c4 <APPE_SysEvtError+0x90>)
 80014a4:	f00c f988 	bl	800d7b8 <puts>
  return;
 80014a8:	bf00      	nop
}
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	0800e590 	.word	0x0800e590
 80014b4:	0800fb40 	.word	0x0800fb40
 80014b8:	0800e5a8 	.word	0x0800e5a8
 80014bc:	0800e790 	.word	0x0800e790
 80014c0:	0800e7c0 	.word	0x0800e7c0
 80014c4:	0800e7fc 	.word	0x0800e7fc

080014c8 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	; 0x28
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80014d0:	f107 0308 	add.w	r3, r7, #8
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80014de:	2300      	movs	r3, #0
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	330b      	adds	r3, #11
 80014ec:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3302      	adds	r3, #2
 80014f2:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d146      	bne.n	800158a <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 80014fc:	4836      	ldr	r0, [pc, #216]	; (80015d8 <APPE_SysEvtReadyProcessing+0x110>)
 80014fe:	f009 fa11 	bl	800a924 <DbgTraceGetFileName>
 8001502:	4601      	mov	r1, r0
 8001504:	f240 13c5 	movw	r3, #453	; 0x1c5
 8001508:	4a34      	ldr	r2, [pc, #208]	; (80015dc <APPE_SysEvtReadyProcessing+0x114>)
 800150a:	4835      	ldr	r0, [pc, #212]	; (80015e0 <APPE_SysEvtReadyProcessing+0x118>)
 800150c:	f00c f8e6 	bl	800d6dc <iprintf>
 8001510:	4834      	ldr	r0, [pc, #208]	; (80015e4 <APPE_SysEvtReadyProcessing+0x11c>)
 8001512:	f00c f951 	bl	800d7b8 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001516:	f7ff fc53 	bl	8000dc0 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800151a:	230f      	movs	r3, #15
 800151c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800151e:	237f      	movs	r3, #127	; 0x7f
 8001520:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001522:	f7ff fd93 	bl	800104c <LL_DBGMCU_GetRevisionID>
 8001526:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001528:	482b      	ldr	r0, [pc, #172]	; (80015d8 <APPE_SysEvtReadyProcessing+0x110>)
 800152a:	f009 f9fb 	bl	800a924 <DbgTraceGetFileName>
 800152e:	4601      	mov	r1, r0
 8001530:	f240 13dd 	movw	r3, #477	; 0x1dd
 8001534:	4a29      	ldr	r2, [pc, #164]	; (80015dc <APPE_SysEvtReadyProcessing+0x114>)
 8001536:	482a      	ldr	r0, [pc, #168]	; (80015e0 <APPE_SysEvtReadyProcessing+0x118>)
 8001538:	f00c f8d0 	bl	800d6dc <iprintf>
 800153c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800153e:	482a      	ldr	r0, [pc, #168]	; (80015e8 <APPE_SysEvtReadyProcessing+0x120>)
 8001540:	f00c f8cc 	bl	800d6dc <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001546:	b29b      	uxth	r3, r3
 8001548:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800154a:	f7ff fd71 	bl	8001030 <LL_DBGMCU_GetDeviceID>
 800154e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001550:	4821      	ldr	r0, [pc, #132]	; (80015d8 <APPE_SysEvtReadyProcessing+0x110>)
 8001552:	f009 f9e7 	bl	800a924 <DbgTraceGetFileName>
 8001556:	4601      	mov	r1, r0
 8001558:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 800155c:	4a1f      	ldr	r2, [pc, #124]	; (80015dc <APPE_SysEvtReadyProcessing+0x114>)
 800155e:	4820      	ldr	r0, [pc, #128]	; (80015e0 <APPE_SysEvtReadyProcessing+0x118>)
 8001560:	f00c f8bc 	bl	800d6dc <iprintf>
 8001564:	6a39      	ldr	r1, [r7, #32]
 8001566:	4821      	ldr	r0, [pc, #132]	; (80015ec <APPE_SysEvtReadyProcessing+0x124>)
 8001568:	f00c f8b8 	bl	800d6dc <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 800156c:	6a3b      	ldr	r3, [r7, #32]
 800156e:	b29b      	uxth	r3, r3
 8001570:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001572:	f107 0308 	add.w	r3, r7, #8
 8001576:	4618      	mov	r0, r3
 8001578:	f008 fbf4 	bl	8009d64 <SHCI_C2_Config>

    APP_BLE_Init();
 800157c:	f009 ffbc 	bl	800b4f8 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001580:	2100      	movs	r1, #0
 8001582:	2001      	movs	r0, #1
 8001584:	f00b fd7a 	bl	800d07c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001588:	e022      	b.n	80015d0 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b01      	cmp	r3, #1
 8001590:	d110      	bne.n	80015b4 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001592:	4811      	ldr	r0, [pc, #68]	; (80015d8 <APPE_SysEvtReadyProcessing+0x110>)
 8001594:	f009 f9c6 	bl	800a924 <DbgTraceGetFileName>
 8001598:	4601      	mov	r1, r0
 800159a:	f240 13ef 	movw	r3, #495	; 0x1ef
 800159e:	4a0f      	ldr	r2, [pc, #60]	; (80015dc <APPE_SysEvtReadyProcessing+0x114>)
 80015a0:	480f      	ldr	r0, [pc, #60]	; (80015e0 <APPE_SysEvtReadyProcessing+0x118>)
 80015a2:	f00c f89b 	bl	800d6dc <iprintf>
 80015a6:	4812      	ldr	r0, [pc, #72]	; (80015f0 <APPE_SysEvtReadyProcessing+0x128>)
 80015a8:	f00c f898 	bl	800d6dc <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
  return;
 80015b2:	e00d      	b.n	80015d0 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 80015b4:	4808      	ldr	r0, [pc, #32]	; (80015d8 <APPE_SysEvtReadyProcessing+0x110>)
 80015b6:	f009 f9b5 	bl	800a924 <DbgTraceGetFileName>
 80015ba:	4601      	mov	r1, r0
 80015bc:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 80015c0:	4a06      	ldr	r2, [pc, #24]	; (80015dc <APPE_SysEvtReadyProcessing+0x114>)
 80015c2:	4807      	ldr	r0, [pc, #28]	; (80015e0 <APPE_SysEvtReadyProcessing+0x118>)
 80015c4:	f00c f88a 	bl	800d6dc <iprintf>
 80015c8:	480a      	ldr	r0, [pc, #40]	; (80015f4 <APPE_SysEvtReadyProcessing+0x12c>)
 80015ca:	f00c f887 	bl	800d6dc <iprintf>
  return;
 80015ce:	bf00      	nop
}
 80015d0:	3728      	adds	r7, #40	; 0x28
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	0800e590 	.word	0x0800e590
 80015dc:	0800fb54 	.word	0x0800fb54
 80015e0:	0800e5a8 	.word	0x0800e5a8
 80015e4:	0800e834 	.word	0x0800e834
 80015e8:	0800e850 	.word	0x0800e850
 80015ec:	0800e874 	.word	0x0800e874
 80015f0:	0800e894 	.word	0x0800e894
 80015f4:	0800e8c8 	.word	0x0800e8c8

080015f8 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f00b fd6c 	bl	800d0dc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}

08001608 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800160c:	bf00      	nop
}
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f00b fd5a 	bl	800d0dc <UTIL_SEQ_Run>
  return;
 8001628:	bf00      	nop
}
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001638:	2100      	movs	r1, #0
 800163a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800163e:	f00b fe6b 	bl	800d318 <UTIL_SEQ_SetTask>
  return;
 8001642:	bf00      	nop
}
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001652:	2002      	movs	r0, #2
 8001654:	f00b fecc 	bl	800d3f0 <UTIL_SEQ_SetEvt>
  return;
 8001658:	bf00      	nop
}
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001668:	2002      	movs	r0, #2
 800166a:	f00b fee1 	bl	800d430 <UTIL_SEQ_WaitEvt>
  return;
 800166e:	bf00      	nop
}
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	2b10      	cmp	r3, #16
 8001684:	d006      	beq.n	8001694 <HAL_GPIO_EXTI_Callback+0x1e>
 8001686:	2b10      	cmp	r3, #16
 8001688:	dc0d      	bgt.n	80016a6 <HAL_GPIO_EXTI_Callback+0x30>
 800168a:	2b01      	cmp	r3, #1
 800168c:	d005      	beq.n	800169a <HAL_GPIO_EXTI_Callback+0x24>
 800168e:	2b02      	cmp	r3, #2
 8001690:	d006      	beq.n	80016a0 <HAL_GPIO_EXTI_Callback+0x2a>
        break;
    case B3_Pin:
        APP_BLE_Key_Button3_Action();
        break;
    default:
      break;
 8001692:	e008      	b.n	80016a6 <HAL_GPIO_EXTI_Callback+0x30>
        APP_BLE_Key_Button1_Action();
 8001694:	f00a fe38 	bl	800c308 <APP_BLE_Key_Button1_Action>
        break;
 8001698:	e006      	b.n	80016a8 <HAL_GPIO_EXTI_Callback+0x32>
        APP_BLE_Key_Button2_Action();
 800169a:	f00a fe3b 	bl	800c314 <APP_BLE_Key_Button2_Action>
        break;
 800169e:	e003      	b.n	80016a8 <HAL_GPIO_EXTI_Callback+0x32>
        APP_BLE_Key_Button3_Action();
 80016a0:	f00a fe3e 	bl	800c320 <APP_BLE_Key_Button3_Action>
        break;
 80016a4:	e000      	b.n	80016a8 <HAL_GPIO_EXTI_Callback+0x32>
      break;
 80016a6:	bf00      	nop
  }
  return;
 80016a8:	bf00      	nop
}
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <Stop_Motor>:
	HAL_GPIO_WritePin(SYS_ENABLE_GPIO_Port, SYS_ENABLE_Pin, GPIO_PIN_SET);
	HAL_Delay(500);
}

void Stop_Motor()
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
	Update_PWM(0);
 80016b4:	2000      	movs	r0, #0
 80016b6:	f000 f825 	bl	8001704 <Update_PWM>
	Motor_Stopped_Complete();
 80016ba:	f000 f84f 	bl	800175c <Motor_Stopped_Complete>
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <Set_Speed>:
	}
	return speed;
}

void Set_Speed(uint16_t goal) //TODO detect failure
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
		failures++;

	} while(stable < stable_threshold && failures < failure_threshold);
	Motor_Done_Complete();
#else
	int duty = 100*(goal/1200);
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	4a0b      	ldr	r2, [pc, #44]	; (8001700 <Set_Speed+0x3c>)
 80016d2:	fba2 2303 	umull	r2, r3, r2, r3
 80016d6:	09db      	lsrs	r3, r3, #7
 80016d8:	b29b      	uxth	r3, r3
 80016da:	461a      	mov	r2, r3
 80016dc:	2364      	movs	r3, #100	; 0x64
 80016de:	fb02 f303 	mul.w	r3, r2, r3
 80016e2:	60fb      	str	r3, [r7, #12]
	if (duty > 100)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2b64      	cmp	r3, #100	; 0x64
 80016e8:	dd01      	ble.n	80016ee <Set_Speed+0x2a>
	{
		duty = 100;
 80016ea:	2364      	movs	r3, #100	; 0x64
 80016ec:	60fb      	str	r3, [r7, #12]
	}
	Update_PWM(duty);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 f807 	bl	8001704 <Update_PWM>
#endif
}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	1b4e81b5 	.word	0x1b4e81b5

08001704 <Update_PWM>:

void Update_PWM(uint32_t duty)
{
 8001704:	b5b0      	push	{r4, r5, r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	//APP_DBG_MSG("\r\n\r** in Update_PWM, duty: %lu\n", duty);
	uint32_t CCR = (TIM16->ARR)*(duty/100.0); //TODO checnge ARR to higher resolution
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <Update_PWM+0x50>)
 800170e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe fecf 	bl	80004b4 <__aeabi_ui2d>
 8001716:	4604      	mov	r4, r0
 8001718:	460d      	mov	r5, r1
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7fe feca 	bl	80004b4 <__aeabi_ui2d>
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <Update_PWM+0x54>)
 8001726:	f7ff f869 	bl	80007fc <__aeabi_ddiv>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4620      	mov	r0, r4
 8001730:	4629      	mov	r1, r5
 8001732:	f7fe ff39 	bl	80005a8 <__aeabi_dmul>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4610      	mov	r0, r2
 800173c:	4619      	mov	r1, r3
 800173e:	f7ff f945 	bl	80009cc <__aeabi_d2uiz>
 8001742:	4603      	mov	r3, r0
 8001744:	60fb      	str	r3, [r7, #12]
	//APP_DBG_MSG("\r\n\r** in Update_PWM, CCR: %lu\n", CCR);
	//APP_DBG_MSG("\r\n\r** CCR: %lu \n", CCR);
	Set_CCR(CCR);
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f001 f9fa 	bl	8002b40 <Set_CCR>
}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bdb0      	pop	{r4, r5, r7, pc}
 8001754:	40014400 	.word	0x40014400
 8001758:	40590000 	.word	0x40590000

0800175c <Motor_Stopped_Complete>:

void Motor_Stopped_Complete()
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	APP_BLE_Key_Motor_Stopped_Action();
 8001760:	f00a fde4 	bl	800c32c <APP_BLE_Key_Motor_Stopped_Action>
}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}

08001768 <Red_On>:
{
	APP_BLE_Key_Motor_Done_Action();
}

void Red_On()
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_Led_GPIO_Port, Red_Led_Pin, GPIO_PIN_SET);
 800176c:	2201      	movs	r2, #1
 800176e:	2102      	movs	r1, #2
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <Red_On+0x14>)
 8001772:	f002 fc81 	bl	8004078 <HAL_GPIO_WritePin>
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	48000400 	.word	0x48000400

08001780 <Red_Off>:

void Red_Off()
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Red_Led_GPIO_Port, Red_Led_Pin, GPIO_PIN_RESET);
 8001784:	2200      	movs	r2, #0
 8001786:	2102      	movs	r1, #2
 8001788:	4802      	ldr	r0, [pc, #8]	; (8001794 <Red_Off+0x14>)
 800178a:	f002 fc75 	bl	8004078 <HAL_GPIO_WritePin>
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	48000400 	.word	0x48000400

08001798 <Green_On>:

void Green_On()
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Green_Led_GPIO_Port, Green_Led_Pin, GPIO_PIN_SET);
 800179c:	2201      	movs	r2, #1
 800179e:	2101      	movs	r1, #1
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <Green_On+0x14>)
 80017a2:	f002 fc69 	bl	8004078 <HAL_GPIO_WritePin>
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	48000400 	.word	0x48000400

080017b0 <Green_Off>:

void Green_Off()
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Green_Led_GPIO_Port, Green_Led_Pin, GPIO_PIN_RESET);
 80017b4:	2200      	movs	r2, #0
 80017b6:	2101      	movs	r1, #1
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <Green_Off+0x14>)
 80017ba:	f002 fc5d 	bl	8004078 <HAL_GPIO_WritePin>
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	48000400 	.word	0x48000400

080017c8 <Blue_On>:

void Blue_On()
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Blue_Led_GPIO_Port, Blue_Led_Pin, GPIO_PIN_SET);
 80017cc:	2201      	movs	r2, #1
 80017ce:	2120      	movs	r1, #32
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <Blue_On+0x14>)
 80017d2:	f002 fc51 	bl	8004078 <HAL_GPIO_WritePin>
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	48000400 	.word	0x48000400

080017e0 <Blue_Off>:

void Blue_Off()
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Blue_Led_GPIO_Port, Blue_Led_Pin, GPIO_PIN_RESET);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2120      	movs	r1, #32
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <Blue_Off+0x14>)
 80017ea:	f002 fc45 	bl	8004078 <HAL_GPIO_WritePin>
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	48000400 	.word	0x48000400

080017f8 <LL_EXTI_EnableIT_0_31>:
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <LL_EXTI_EnableIT_0_31+0x24>)
 8001802:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001806:	4905      	ldr	r1, [pc, #20]	; (800181c <LL_EXTI_EnableIT_0_31+0x24>)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4313      	orrs	r3, r2
 800180c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	58000800 	.word	0x58000800

08001820 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4904      	ldr	r1, [pc, #16]	; (8001840 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4313      	orrs	r3, r2
 8001832:	600b      	str	r3, [r1, #0]

}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	58000800 	.word	0x58000800

08001844 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800184a:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <ReadRtcSsrValue+0x3c>)
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	b29b      	uxth	r3, r3
 8001850:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001852:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <ReadRtcSsrValue+0x3c>)
 8001854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001856:	b29b      	uxth	r3, r3
 8001858:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800185a:	e005      	b.n	8001868 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <ReadRtcSsrValue+0x3c>)
 8001862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001864:	b29b      	uxth	r3, r3
 8001866:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	429a      	cmp	r2, r3
 800186e:	d1f5      	bne.n	800185c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001870:	683b      	ldr	r3, [r7, #0]
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40002800 	.word	0x40002800

08001884 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	460a      	mov	r2, r1
 800188e:	71fb      	strb	r3, [r7, #7]
 8001890:	4613      	mov	r3, r2
 8001892:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001894:	79ba      	ldrb	r2, [r7, #6]
 8001896:	491d      	ldr	r1, [pc, #116]	; (800190c <LinkTimerAfter+0x88>)
 8001898:	4613      	mov	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4413      	add	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	440b      	add	r3, r1
 80018a2:	3315      	adds	r3, #21
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d009      	beq.n	80018c2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80018ae:	7bfa      	ldrb	r2, [r7, #15]
 80018b0:	4916      	ldr	r1, [pc, #88]	; (800190c <LinkTimerAfter+0x88>)
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	440b      	add	r3, r1
 80018bc:	3314      	adds	r3, #20
 80018be:	79fa      	ldrb	r2, [r7, #7]
 80018c0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80018c2:	79fa      	ldrb	r2, [r7, #7]
 80018c4:	4911      	ldr	r1, [pc, #68]	; (800190c <LinkTimerAfter+0x88>)
 80018c6:	4613      	mov	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	4413      	add	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	440b      	add	r3, r1
 80018d0:	3315      	adds	r3, #21
 80018d2:	7bfa      	ldrb	r2, [r7, #15]
 80018d4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80018d6:	79fa      	ldrb	r2, [r7, #7]
 80018d8:	490c      	ldr	r1, [pc, #48]	; (800190c <LinkTimerAfter+0x88>)
 80018da:	4613      	mov	r3, r2
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4413      	add	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	440b      	add	r3, r1
 80018e4:	3314      	adds	r3, #20
 80018e6:	79ba      	ldrb	r2, [r7, #6]
 80018e8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80018ea:	79ba      	ldrb	r2, [r7, #6]
 80018ec:	4907      	ldr	r1, [pc, #28]	; (800190c <LinkTimerAfter+0x88>)
 80018ee:	4613      	mov	r3, r2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	4413      	add	r3, r2
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	440b      	add	r3, r1
 80018f8:	3315      	adds	r3, #21
 80018fa:	79fa      	ldrb	r2, [r7, #7]
 80018fc:	701a      	strb	r2, [r3, #0]

  return;
 80018fe:	bf00      	nop
}
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	200000fc 	.word	0x200000fc

08001910 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	460a      	mov	r2, r1
 800191a:	71fb      	strb	r3, [r7, #7]
 800191c:	4613      	mov	r3, r2
 800191e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001920:	4b29      	ldr	r3, [pc, #164]	; (80019c8 <LinkTimerBefore+0xb8>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	b2db      	uxtb	r3, r3
 8001926:	79ba      	ldrb	r2, [r7, #6]
 8001928:	429a      	cmp	r2, r3
 800192a:	d032      	beq.n	8001992 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800192c:	79ba      	ldrb	r2, [r7, #6]
 800192e:	4927      	ldr	r1, [pc, #156]	; (80019cc <LinkTimerBefore+0xbc>)
 8001930:	4613      	mov	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4413      	add	r3, r2
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	440b      	add	r3, r1
 800193a:	3314      	adds	r3, #20
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001940:	7bfa      	ldrb	r2, [r7, #15]
 8001942:	4922      	ldr	r1, [pc, #136]	; (80019cc <LinkTimerBefore+0xbc>)
 8001944:	4613      	mov	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4413      	add	r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	440b      	add	r3, r1
 800194e:	3315      	adds	r3, #21
 8001950:	79fa      	ldrb	r2, [r7, #7]
 8001952:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001954:	79fa      	ldrb	r2, [r7, #7]
 8001956:	491d      	ldr	r1, [pc, #116]	; (80019cc <LinkTimerBefore+0xbc>)
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	440b      	add	r3, r1
 8001962:	3315      	adds	r3, #21
 8001964:	79ba      	ldrb	r2, [r7, #6]
 8001966:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001968:	79fa      	ldrb	r2, [r7, #7]
 800196a:	4918      	ldr	r1, [pc, #96]	; (80019cc <LinkTimerBefore+0xbc>)
 800196c:	4613      	mov	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	440b      	add	r3, r1
 8001976:	3314      	adds	r3, #20
 8001978:	7bfa      	ldrb	r2, [r7, #15]
 800197a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800197c:	79ba      	ldrb	r2, [r7, #6]
 800197e:	4913      	ldr	r1, [pc, #76]	; (80019cc <LinkTimerBefore+0xbc>)
 8001980:	4613      	mov	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	4413      	add	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	440b      	add	r3, r1
 800198a:	3314      	adds	r3, #20
 800198c:	79fa      	ldrb	r2, [r7, #7]
 800198e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001990:	e014      	b.n	80019bc <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001992:	79fa      	ldrb	r2, [r7, #7]
 8001994:	490d      	ldr	r1, [pc, #52]	; (80019cc <LinkTimerBefore+0xbc>)
 8001996:	4613      	mov	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4413      	add	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	440b      	add	r3, r1
 80019a0:	3315      	adds	r3, #21
 80019a2:	79ba      	ldrb	r2, [r7, #6]
 80019a4:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80019a6:	79ba      	ldrb	r2, [r7, #6]
 80019a8:	4908      	ldr	r1, [pc, #32]	; (80019cc <LinkTimerBefore+0xbc>)
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	440b      	add	r3, r1
 80019b4:	3314      	adds	r3, #20
 80019b6:	79fa      	ldrb	r2, [r7, #7]
 80019b8:	701a      	strb	r2, [r3, #0]
  return;
 80019ba:	bf00      	nop
}
 80019bc:	3714      	adds	r7, #20
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	2000018c 	.word	0x2000018c
 80019cc:	200000fc 	.word	0x200000fc

080019d0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80019da:	4b4e      	ldr	r3, [pc, #312]	; (8001b14 <linkTimer+0x144>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b06      	cmp	r3, #6
 80019e2:	d118      	bne.n	8001a16 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80019e4:	4b4b      	ldr	r3, [pc, #300]	; (8001b14 <linkTimer+0x144>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4b4b      	ldr	r3, [pc, #300]	; (8001b18 <linkTimer+0x148>)
 80019ec:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80019ee:	4a49      	ldr	r2, [pc, #292]	; (8001b14 <linkTimer+0x144>)
 80019f0:	79fb      	ldrb	r3, [r7, #7]
 80019f2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80019f4:	79fa      	ldrb	r2, [r7, #7]
 80019f6:	4949      	ldr	r1, [pc, #292]	; (8001b1c <linkTimer+0x14c>)
 80019f8:	4613      	mov	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	440b      	add	r3, r1
 8001a02:	3315      	adds	r3, #21
 8001a04:	2206      	movs	r2, #6
 8001a06:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001a08:	4b45      	ldr	r3, [pc, #276]	; (8001b20 <linkTimer+0x150>)
 8001a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0e:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	81fb      	strh	r3, [r7, #14]
 8001a14:	e078      	b.n	8001b08 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001a16:	f000 f909 	bl	8001c2c <ReturnTimeElapsed>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001a1e:	79fa      	ldrb	r2, [r7, #7]
 8001a20:	493e      	ldr	r1, [pc, #248]	; (8001b1c <linkTimer+0x14c>)
 8001a22:	4613      	mov	r3, r2
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	4413      	add	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	440b      	add	r3, r1
 8001a2c:	3308      	adds	r3, #8
 8001a2e:	6819      	ldr	r1, [r3, #0]
 8001a30:	89fb      	ldrh	r3, [r7, #14]
 8001a32:	79fa      	ldrb	r2, [r7, #7]
 8001a34:	4419      	add	r1, r3
 8001a36:	4839      	ldr	r0, [pc, #228]	; (8001b1c <linkTimer+0x14c>)
 8001a38:	4613      	mov	r3, r2
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	4413      	add	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	4403      	add	r3, r0
 8001a42:	3308      	adds	r3, #8
 8001a44:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001a46:	79fa      	ldrb	r2, [r7, #7]
 8001a48:	4934      	ldr	r1, [pc, #208]	; (8001b1c <linkTimer+0x14c>)
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	440b      	add	r3, r1
 8001a54:	3308      	adds	r3, #8
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001a5a:	4b2e      	ldr	r3, [pc, #184]	; (8001b14 <linkTimer+0x144>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	4619      	mov	r1, r3
 8001a62:	4a2e      	ldr	r2, [pc, #184]	; (8001b1c <linkTimer+0x14c>)
 8001a64:	460b      	mov	r3, r1
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	440b      	add	r3, r1
 8001a6a:	00db      	lsls	r3, r3, #3
 8001a6c:	4413      	add	r3, r2
 8001a6e:	3308      	adds	r3, #8
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d337      	bcc.n	8001ae8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001a78:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <linkTimer+0x144>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001a7e:	7b7a      	ldrb	r2, [r7, #13]
 8001a80:	4926      	ldr	r1, [pc, #152]	; (8001b1c <linkTimer+0x14c>)
 8001a82:	4613      	mov	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	4413      	add	r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	440b      	add	r3, r1
 8001a8c:	3315      	adds	r3, #21
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001a92:	e013      	b.n	8001abc <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001a94:	7b7a      	ldrb	r2, [r7, #13]
 8001a96:	4921      	ldr	r1, [pc, #132]	; (8001b1c <linkTimer+0x14c>)
 8001a98:	4613      	mov	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4413      	add	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	440b      	add	r3, r1
 8001aa2:	3315      	adds	r3, #21
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001aa8:	7b7a      	ldrb	r2, [r7, #13]
 8001aaa:	491c      	ldr	r1, [pc, #112]	; (8001b1c <linkTimer+0x14c>)
 8001aac:	4613      	mov	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	4413      	add	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	3315      	adds	r3, #21
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001abc:	7b3b      	ldrb	r3, [r7, #12]
 8001abe:	2b06      	cmp	r3, #6
 8001ac0:	d00b      	beq.n	8001ada <linkTimer+0x10a>
 8001ac2:	7b3a      	ldrb	r2, [r7, #12]
 8001ac4:	4915      	ldr	r1, [pc, #84]	; (8001b1c <linkTimer+0x14c>)
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4413      	add	r3, r2
 8001acc:	00db      	lsls	r3, r3, #3
 8001ace:	440b      	add	r3, r1
 8001ad0:	3308      	adds	r3, #8
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d2dc      	bcs.n	8001a94 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001ada:	7b7a      	ldrb	r2, [r7, #13]
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fecf 	bl	8001884 <LinkTimerAfter>
 8001ae6:	e00f      	b.n	8001b08 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <linkTimer+0x144>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	4611      	mov	r1, r2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff ff0c 	bl	8001910 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <linkTimer+0x144>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <linkTimer+0x148>)
 8001b00:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001b02:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <linkTimer+0x144>)
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001b08:	89fb      	ldrh	r3, [r7, #14]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	2000018c 	.word	0x2000018c
 8001b18:	2000018d 	.word	0x2000018d
 8001b1c:	200000fc 	.word	0x200000fc
 8001b20:	20000190 	.word	0x20000190

08001b24 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	460a      	mov	r2, r1
 8001b2e:	71fb      	strb	r3, [r7, #7]
 8001b30:	4613      	mov	r3, r2
 8001b32:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001b34:	4b39      	ldr	r3, [pc, #228]	; (8001c1c <UnlinkTimer+0xf8>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	79fa      	ldrb	r2, [r7, #7]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d111      	bne.n	8001b64 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001b40:	4b36      	ldr	r3, [pc, #216]	; (8001c1c <UnlinkTimer+0xf8>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	4b36      	ldr	r3, [pc, #216]	; (8001c20 <UnlinkTimer+0xfc>)
 8001b48:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001b4a:	79fa      	ldrb	r2, [r7, #7]
 8001b4c:	4935      	ldr	r1, [pc, #212]	; (8001c24 <UnlinkTimer+0x100>)
 8001b4e:	4613      	mov	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4413      	add	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	440b      	add	r3, r1
 8001b58:	3315      	adds	r3, #21
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b2f      	ldr	r3, [pc, #188]	; (8001c1c <UnlinkTimer+0xf8>)
 8001b60:	701a      	strb	r2, [r3, #0]
 8001b62:	e03e      	b.n	8001be2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001b64:	79fa      	ldrb	r2, [r7, #7]
 8001b66:	492f      	ldr	r1, [pc, #188]	; (8001c24 <UnlinkTimer+0x100>)
 8001b68:	4613      	mov	r3, r2
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4413      	add	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	440b      	add	r3, r1
 8001b72:	3314      	adds	r3, #20
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001b78:	79fa      	ldrb	r2, [r7, #7]
 8001b7a:	492a      	ldr	r1, [pc, #168]	; (8001c24 <UnlinkTimer+0x100>)
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	440b      	add	r3, r1
 8001b86:	3315      	adds	r3, #21
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001b8c:	79f9      	ldrb	r1, [r7, #7]
 8001b8e:	7bfa      	ldrb	r2, [r7, #15]
 8001b90:	4824      	ldr	r0, [pc, #144]	; (8001c24 <UnlinkTimer+0x100>)
 8001b92:	460b      	mov	r3, r1
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	440b      	add	r3, r1
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	4403      	add	r3, r0
 8001b9c:	3315      	adds	r3, #21
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	b2d8      	uxtb	r0, r3
 8001ba2:	4920      	ldr	r1, [pc, #128]	; (8001c24 <UnlinkTimer+0x100>)
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	440b      	add	r3, r1
 8001bae:	3315      	adds	r3, #21
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001bb4:	7bbb      	ldrb	r3, [r7, #14]
 8001bb6:	2b06      	cmp	r3, #6
 8001bb8:	d013      	beq.n	8001be2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001bba:	79f9      	ldrb	r1, [r7, #7]
 8001bbc:	7bba      	ldrb	r2, [r7, #14]
 8001bbe:	4819      	ldr	r0, [pc, #100]	; (8001c24 <UnlinkTimer+0x100>)
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	440b      	add	r3, r1
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4403      	add	r3, r0
 8001bca:	3314      	adds	r3, #20
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	b2d8      	uxtb	r0, r3
 8001bd0:	4914      	ldr	r1, [pc, #80]	; (8001c24 <UnlinkTimer+0x100>)
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	440b      	add	r3, r1
 8001bdc:	3314      	adds	r3, #20
 8001bde:	4602      	mov	r2, r0
 8001be0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001be2:	79fa      	ldrb	r2, [r7, #7]
 8001be4:	490f      	ldr	r1, [pc, #60]	; (8001c24 <UnlinkTimer+0x100>)
 8001be6:	4613      	mov	r3, r2
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	4413      	add	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	440b      	add	r3, r1
 8001bf0:	330c      	adds	r3, #12
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <UnlinkTimer+0xf8>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b06      	cmp	r3, #6
 8001bfe:	d107      	bne.n	8001c10 <UnlinkTimer+0xec>
 8001c00:	79bb      	ldrb	r3, [r7, #6]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d104      	bne.n	8001c10 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <UnlinkTimer+0x104>)
 8001c08:	f04f 32ff 	mov.w	r2, #4294967295
 8001c0c:	601a      	str	r2, [r3, #0]
  }

  return;
 8001c0e:	bf00      	nop
 8001c10:	bf00      	nop
}
 8001c12:	3714      	adds	r7, #20
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	2000018c 	.word	0x2000018c
 8001c20:	2000018d 	.word	0x2000018d
 8001c24:	200000fc 	.word	0x200000fc
 8001c28:	20000190 	.word	0x20000190

08001c2c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001c32:	4b1a      	ldr	r3, [pc, #104]	; (8001c9c <ReturnTimeElapsed+0x70>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3a:	d026      	beq.n	8001c8a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001c3c:	f7ff fe02 	bl	8001844 <ReadRtcSsrValue>
 8001c40:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001c42:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <ReturnTimeElapsed+0x70>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d805      	bhi.n	8001c58 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001c4c:	4b13      	ldr	r3, [pc, #76]	; (8001c9c <ReturnTimeElapsed+0x70>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	e00a      	b.n	8001c6e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <ReturnTimeElapsed+0x74>)
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001c64:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <ReturnTimeElapsed+0x70>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ca4 <ReturnTimeElapsed+0x78>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001c7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <ReturnTimeElapsed+0x7c>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	40d3      	lsrs	r3, r2
 8001c86:	607b      	str	r3, [r7, #4]
 8001c88:	e001      	b.n	8001c8e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	b29b      	uxth	r3, r3
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000190 	.word	0x20000190
 8001ca0:	20000198 	.word	0x20000198
 8001ca4:	20000196 	.word	0x20000196
 8001ca8:	20000195 	.word	0x20000195

08001cac <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d108      	bne.n	8001cce <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001cbc:	f7ff fdc2 	bl	8001844 <ReadRtcSsrValue>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	4a21      	ldr	r2, [pc, #132]	; (8001d48 <RestartWakeupCounter+0x9c>)
 8001cc4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001cc6:	2003      	movs	r0, #3
 8001cc8:	f001 fd17 	bl	80036fa <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001ccc:	e039      	b.n	8001d42 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d803      	bhi.n	8001cdc <RestartWakeupCounter+0x30>
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <RestartWakeupCounter+0xa0>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d002      	beq.n	8001ce2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8001cdc:	88fb      	ldrh	r3, [r7, #6]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001ce2:	bf00      	nop
 8001ce4:	4b1a      	ldr	r3, [pc, #104]	; (8001d50 <RestartWakeupCounter+0xa4>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f8      	beq.n	8001ce4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001cf2:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <RestartWakeupCounter+0xa4>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <RestartWakeupCounter+0xa4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001d02:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001d04:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <RestartWakeupCounter+0xa8>)
 8001d06:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001d0a:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001d0c:	2003      	movs	r0, #3
 8001d0e:	f001 fd02 	bl	8003716 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <RestartWakeupCounter+0xac>)
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	0c1b      	lsrs	r3, r3, #16
 8001d18:	041b      	lsls	r3, r3, #16
 8001d1a:	88fa      	ldrh	r2, [r7, #6]
 8001d1c:	490e      	ldr	r1, [pc, #56]	; (8001d58 <RestartWakeupCounter+0xac>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001d22:	f7ff fd8f 	bl	8001844 <ReadRtcSsrValue>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4a07      	ldr	r2, [pc, #28]	; (8001d48 <RestartWakeupCounter+0x9c>)
 8001d2a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001d2c:	4b08      	ldr	r3, [pc, #32]	; (8001d50 <RestartWakeupCounter+0xa4>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <RestartWakeupCounter+0xa4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d3a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001d3c:	f3af 8000 	nop.w
  return ;
 8001d40:	bf00      	nop
}
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	20000190 	.word	0x20000190
 8001d4c:	20000195 	.word	0x20000195
 8001d50:	200001dc 	.word	0x200001dc
 8001d54:	58000800 	.word	0x58000800
 8001d58:	40002800 	.word	0x40002800

08001d5c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001d62:	4b45      	ldr	r3, [pc, #276]	; (8001e78 <RescheduleTimerList+0x11c>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d6e:	d107      	bne.n	8001d80 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001d70:	bf00      	nop
 8001d72:	4b42      	ldr	r3, [pc, #264]	; (8001e7c <RescheduleTimerList+0x120>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1f8      	bne.n	8001d72 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001d80:	4b3e      	ldr	r3, [pc, #248]	; (8001e7c <RescheduleTimerList+0x120>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <RescheduleTimerList+0x120>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d8e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001d90:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <RescheduleTimerList+0x124>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001d96:	7bfa      	ldrb	r2, [r7, #15]
 8001d98:	493a      	ldr	r1, [pc, #232]	; (8001e84 <RescheduleTimerList+0x128>)
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	440b      	add	r3, r1
 8001da4:	3308      	adds	r3, #8
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8001daa:	f7ff ff3f 	bl	8001c2c <ReturnTimeElapsed>
 8001dae:	4603      	mov	r3, r0
 8001db0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	68ba      	ldr	r2, [r7, #8]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d205      	bcs.n	8001dc6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001dbe:	4b32      	ldr	r3, [pc, #200]	; (8001e88 <RescheduleTimerList+0x12c>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	701a      	strb	r2, [r3, #0]
 8001dc4:	e04d      	b.n	8001e62 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	4a30      	ldr	r2, [pc, #192]	; (8001e8c <RescheduleTimerList+0x130>)
 8001dca:	8812      	ldrh	r2, [r2, #0]
 8001dcc:	b292      	uxth	r2, r2
 8001dce:	4413      	add	r3, r2
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d906      	bls.n	8001de6 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8001dd8:	4b2c      	ldr	r3, [pc, #176]	; (8001e8c <RescheduleTimerList+0x130>)
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8001dde:	4b2a      	ldr	r3, [pc, #168]	; (8001e88 <RescheduleTimerList+0x12c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]
 8001de4:	e03d      	b.n	8001e62 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	88fb      	ldrh	r3, [r7, #6]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001df0:	4b25      	ldr	r3, [pc, #148]	; (8001e88 <RescheduleTimerList+0x12c>)
 8001df2:	2201      	movs	r2, #1
 8001df4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001df6:	e034      	b.n	8001e62 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8001df8:	7bfa      	ldrb	r2, [r7, #15]
 8001dfa:	4922      	ldr	r1, [pc, #136]	; (8001e84 <RescheduleTimerList+0x128>)
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	4413      	add	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	440b      	add	r3, r1
 8001e06:	3308      	adds	r3, #8
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	88fb      	ldrh	r3, [r7, #6]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d20a      	bcs.n	8001e26 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8001e10:	7bfa      	ldrb	r2, [r7, #15]
 8001e12:	491c      	ldr	r1, [pc, #112]	; (8001e84 <RescheduleTimerList+0x128>)
 8001e14:	4613      	mov	r3, r2
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	4413      	add	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	440b      	add	r3, r1
 8001e1e:	3308      	adds	r3, #8
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	e013      	b.n	8001e4e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8001e26:	7bfa      	ldrb	r2, [r7, #15]
 8001e28:	4916      	ldr	r1, [pc, #88]	; (8001e84 <RescheduleTimerList+0x128>)
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4413      	add	r3, r2
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	440b      	add	r3, r1
 8001e34:	3308      	adds	r3, #8
 8001e36:	6819      	ldr	r1, [r3, #0]
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	7bfa      	ldrb	r2, [r7, #15]
 8001e3c:	1ac9      	subs	r1, r1, r3
 8001e3e:	4811      	ldr	r0, [pc, #68]	; (8001e84 <RescheduleTimerList+0x128>)
 8001e40:	4613      	mov	r3, r2
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4413      	add	r3, r2
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	4403      	add	r3, r0
 8001e4a:	3308      	adds	r3, #8
 8001e4c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001e4e:	7bfa      	ldrb	r2, [r7, #15]
 8001e50:	490c      	ldr	r1, [pc, #48]	; (8001e84 <RescheduleTimerList+0x128>)
 8001e52:	4613      	mov	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	4413      	add	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	440b      	add	r3, r1
 8001e5c:	3315      	adds	r3, #21
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	2b06      	cmp	r3, #6
 8001e66:	d1c7      	bne.n	8001df8 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8001e68:	89bb      	ldrh	r3, [r7, #12]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff ff1e 	bl	8001cac <RestartWakeupCounter>

  return ;
 8001e70:	bf00      	nop
}
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40002800 	.word	0x40002800
 8001e7c:	200001dc 	.word	0x200001dc
 8001e80:	2000018c 	.word	0x2000018c
 8001e84:	200000fc 	.word	0x200000fc
 8001e88:	20000194 	.word	0x20000194
 8001e8c:	2000019a 	.word	0x2000019a

08001e90 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	; 0x28
 8001e94:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e96:	f3ef 8310 	mrs	r3, PRIMASK
 8001e9a:	617b      	str	r3, [r7, #20]
  return(result);
 8001e9c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001e9e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea0:	b672      	cpsid	i
}
 8001ea2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001ea4:	4b59      	ldr	r3, [pc, #356]	; (800200c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	22ca      	movs	r2, #202	; 0xca
 8001eaa:	625a      	str	r2, [r3, #36]	; 0x24
 8001eac:	4b57      	ldr	r3, [pc, #348]	; (800200c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2253      	movs	r2, #83	; 0x53
 8001eb2:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8001eb4:	4b55      	ldr	r3, [pc, #340]	; (800200c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	4b54      	ldr	r3, [pc, #336]	; (800200c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ec2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8001ec4:	4b52      	ldr	r3, [pc, #328]	; (8002010 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8001ecc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001ed0:	4950      	ldr	r1, [pc, #320]	; (8002014 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4413      	add	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	440b      	add	r3, r1
 8001edc:	330c      	adds	r3, #12
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d16e      	bne.n	8001fc4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8001ee6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001eea:	494a      	ldr	r1, [pc, #296]	; (8002014 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	440b      	add	r3, r1
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8001efa:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001efe:	4945      	ldr	r1, [pc, #276]	; (8002014 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f00:	4613      	mov	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4413      	add	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	440b      	add	r3, r1
 8001f0a:	3310      	adds	r3, #16
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001f10:	4b41      	ldr	r3, [pc, #260]	; (8002018 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d04c      	beq.n	8001fb4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8001f1a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001f1e:	493d      	ldr	r1, [pc, #244]	; (8002014 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f20:	4613      	mov	r3, r2
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4413      	add	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	440b      	add	r3, r1
 8001f2a:	330d      	adds	r3, #13
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d124      	bne.n	8001f7e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001f34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f38:	2101      	movs	r1, #1
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fdf2 	bl	8001b24 <UnlinkTimer>
 8001f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f42:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	f383 8810 	msr	PRIMASK, r3
}
 8001f4a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001f4c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001f50:	4930      	ldr	r1, [pc, #192]	; (8002014 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001f52:	4613      	mov	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	4413      	add	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	440b      	add	r3, r1
 8001f5c:	3304      	adds	r3, #4
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f64:	4611      	mov	r1, r2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 f9b8 	bl	80022dc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f6c:	4b27      	ldr	r3, [pc, #156]	; (800200c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	22ca      	movs	r2, #202	; 0xca
 8001f72:	625a      	str	r2, [r3, #36]	; 0x24
 8001f74:	4b25      	ldr	r3, [pc, #148]	; (800200c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2253      	movs	r2, #83	; 0x53
 8001f7a:	625a      	str	r2, [r3, #36]	; 0x24
 8001f7c:	e012      	b.n	8001fa4 <HW_TS_RTC_Wakeup_Handler+0x114>
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	f383 8810 	msr	PRIMASK, r3
}
 8001f88:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001f8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 f920 	bl	80021d4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001f94:	4b1d      	ldr	r3, [pc, #116]	; (800200c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	22ca      	movs	r2, #202	; 0xca
 8001f9a:	625a      	str	r2, [r3, #36]	; 0x24
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	; (800200c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2253      	movs	r2, #83	; 0x53
 8001fa2:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001fa4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fa8:	69fa      	ldr	r2, [r7, #28]
 8001faa:	4619      	mov	r1, r3
 8001fac:	69b8      	ldr	r0, [r7, #24]
 8001fae:	f000 fa1b 	bl	80023e8 <HW_TS_RTC_Int_AppNot>
 8001fb2:	e022      	b.n	8001ffa <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8001fb4:	f7ff fed2 	bl	8001d5c <RescheduleTimerList>
 8001fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	f383 8810 	msr	PRIMASK, r3
}
 8001fc2:	e01a      	b.n	8001ffa <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001fc4:	bf00      	nop
 8001fc6:	4b11      	ldr	r3, [pc, #68]	; (800200c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0f8      	beq.n	8001fc6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	; (800200c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001fe4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	; (800201c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001fe8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f383 8810 	msr	PRIMASK, r3
}
 8001ff8:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001ffa:	4b04      	ldr	r3, [pc, #16]	; (800200c <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	22ff      	movs	r2, #255	; 0xff
 8002000:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8002002:	bf00      	nop
}
 8002004:	3728      	adds	r7, #40	; 0x28
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200001dc 	.word	0x200001dc
 8002010:	2000018c 	.word	0x2000018c
 8002014:	200000fc 	.word	0x200000fc
 8002018:	20000194 	.word	0x20000194
 800201c:	58000800 	.word	0x58000800

08002020 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	6039      	str	r1, [r7, #0]
 800202a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800202c:	4b5e      	ldr	r3, [pc, #376]	; (80021a8 <HW_TS_Init+0x188>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	22ca      	movs	r2, #202	; 0xca
 8002032:	625a      	str	r2, [r3, #36]	; 0x24
 8002034:	4b5c      	ldr	r3, [pc, #368]	; (80021a8 <HW_TS_Init+0x188>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2253      	movs	r2, #83	; 0x53
 800203a:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800203c:	4b5b      	ldr	r3, [pc, #364]	; (80021ac <HW_TS_Init+0x18c>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	4a5a      	ldr	r2, [pc, #360]	; (80021ac <HW_TS_Init+0x18c>)
 8002042:	f043 0320 	orr.w	r3, r3, #32
 8002046:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002048:	4b58      	ldr	r3, [pc, #352]	; (80021ac <HW_TS_Init+0x18c>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	b2db      	uxtb	r3, r3
 8002054:	f1c3 0304 	rsb	r3, r3, #4
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4b55      	ldr	r3, [pc, #340]	; (80021b0 <HW_TS_Init+0x190>)
 800205c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800205e:	4b53      	ldr	r3, [pc, #332]	; (80021ac <HW_TS_Init+0x18c>)
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002066:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800206a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	fa92 f2a2 	rbit	r2, r2
 8002072:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002074:	68fa      	ldr	r2, [r7, #12]
 8002076:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	2a00      	cmp	r2, #0
 800207c:	d101      	bne.n	8002082 <HW_TS_Init+0x62>
  {
    return 32U;
 800207e:	2220      	movs	r2, #32
 8002080:	e003      	b.n	800208a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	fab2 f282 	clz	r2, r2
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	40d3      	lsrs	r3, r2
 800208c:	b2db      	uxtb	r3, r3
 800208e:	3301      	adds	r3, #1
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4b48      	ldr	r3, [pc, #288]	; (80021b4 <HW_TS_Init+0x194>)
 8002094:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002096:	4b45      	ldr	r3, [pc, #276]	; (80021ac <HW_TS_Init+0x18c>)
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	b29b      	uxth	r3, r3
 800209c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	3301      	adds	r3, #1
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	4b44      	ldr	r3, [pc, #272]	; (80021b8 <HW_TS_Init+0x198>)
 80020a8:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80020aa:	4b43      	ldr	r3, [pc, #268]	; (80021b8 <HW_TS_Init+0x198>)
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	3b01      	subs	r3, #1
 80020b0:	4a40      	ldr	r2, [pc, #256]	; (80021b4 <HW_TS_Init+0x194>)
 80020b2:	7812      	ldrb	r2, [r2, #0]
 80020b4:	fb02 f303 	mul.w	r3, r2, r3
 80020b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80020bc:	4a3c      	ldr	r2, [pc, #240]	; (80021b0 <HW_TS_Init+0x190>)
 80020be:	7812      	ldrb	r2, [r2, #0]
 80020c0:	40d3      	lsrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d904      	bls.n	80020d8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80020ce:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <HW_TS_Init+0x19c>)
 80020d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020d4:	801a      	strh	r2, [r3, #0]
 80020d6:	e003      	b.n	80020e0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	b29a      	uxth	r2, r3
 80020dc:	4b37      	ldr	r3, [pc, #220]	; (80021bc <HW_TS_Init+0x19c>)
 80020de:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80020e0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80020e4:	f7ff fb9c 	bl	8001820 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80020e8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80020ec:	f7ff fb84 	bl	80017f8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80020f0:	79fb      	ldrb	r3, [r7, #7]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d13d      	bne.n	8002172 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80020f6:	4b32      	ldr	r3, [pc, #200]	; (80021c0 <HW_TS_Init+0x1a0>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80020fc:	4b31      	ldr	r3, [pc, #196]	; (80021c4 <HW_TS_Init+0x1a4>)
 80020fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002102:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002104:	2300      	movs	r3, #0
 8002106:	77fb      	strb	r3, [r7, #31]
 8002108:	e00c      	b.n	8002124 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800210a:	7ffa      	ldrb	r2, [r7, #31]
 800210c:	492e      	ldr	r1, [pc, #184]	; (80021c8 <HW_TS_Init+0x1a8>)
 800210e:	4613      	mov	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	4413      	add	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	440b      	add	r3, r1
 8002118:	330c      	adds	r3, #12
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800211e:	7ffb      	ldrb	r3, [r7, #31]
 8002120:	3301      	adds	r3, #1
 8002122:	77fb      	strb	r3, [r7, #31]
 8002124:	7ffb      	ldrb	r3, [r7, #31]
 8002126:	2b05      	cmp	r3, #5
 8002128:	d9ef      	bls.n	800210a <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800212a:	4b28      	ldr	r3, [pc, #160]	; (80021cc <HW_TS_Init+0x1ac>)
 800212c:	2206      	movs	r2, #6
 800212e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002130:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <HW_TS_Init+0x188>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <HW_TS_Init+0x188>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800213e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002140:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <HW_TS_Init+0x188>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <HW_TS_Init+0x188>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002150:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002152:	4b1f      	ldr	r3, [pc, #124]	; (80021d0 <HW_TS_Init+0x1b0>)
 8002154:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002158:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800215a:	2003      	movs	r0, #3
 800215c:	f001 fadb 	bl	8003716 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002160:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <HW_TS_Init+0x188>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <HW_TS_Init+0x188>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	e009      	b.n	8002186 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002172:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <HW_TS_Init+0x188>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002180:	2003      	movs	r0, #3
 8002182:	f001 faba 	bl	80036fa <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002186:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <HW_TS_Init+0x188>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	22ff      	movs	r2, #255	; 0xff
 800218c:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800218e:	2200      	movs	r2, #0
 8002190:	2103      	movs	r1, #3
 8002192:	2003      	movs	r0, #3
 8002194:	f001 fa6f 	bl	8003676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002198:	2003      	movs	r0, #3
 800219a:	f001 fa86 	bl	80036aa <HAL_NVIC_EnableIRQ>

  return;
 800219e:	bf00      	nop
}
 80021a0:	3720      	adds	r7, #32
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	200001dc 	.word	0x200001dc
 80021ac:	40002800 	.word	0x40002800
 80021b0:	20000195 	.word	0x20000195
 80021b4:	20000196 	.word	0x20000196
 80021b8:	20000198 	.word	0x20000198
 80021bc:	2000019a 	.word	0x2000019a
 80021c0:	20000194 	.word	0x20000194
 80021c4:	20000190 	.word	0x20000190
 80021c8:	200000fc 	.word	0x200000fc
 80021cc:	2000018c 	.word	0x2000018c
 80021d0:	58000800 	.word	0x58000800

080021d4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021de:	f3ef 8310 	mrs	r3, PRIMASK
 80021e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80021e4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80021e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80021e8:	b672      	cpsid	i
}
 80021ea:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80021ec:	2003      	movs	r0, #3
 80021ee:	f001 fa6a 	bl	80036c6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80021f2:	4b34      	ldr	r3, [pc, #208]	; (80022c4 <HW_TS_Stop+0xf0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	22ca      	movs	r2, #202	; 0xca
 80021f8:	625a      	str	r2, [r3, #36]	; 0x24
 80021fa:	4b32      	ldr	r3, [pc, #200]	; (80022c4 <HW_TS_Stop+0xf0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2253      	movs	r2, #83	; 0x53
 8002200:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002202:	79fa      	ldrb	r2, [r7, #7]
 8002204:	4930      	ldr	r1, [pc, #192]	; (80022c8 <HW_TS_Stop+0xf4>)
 8002206:	4613      	mov	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4413      	add	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	440b      	add	r3, r1
 8002210:	330c      	adds	r3, #12
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d142      	bne.n	80022a0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	2100      	movs	r1, #0
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fc80 	bl	8001b24 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002224:	4b29      	ldr	r3, [pc, #164]	; (80022cc <HW_TS_Stop+0xf8>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800222a:	7cfb      	ldrb	r3, [r7, #19]
 800222c:	2b06      	cmp	r3, #6
 800222e:	d12f      	bne.n	8002290 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002230:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <HW_TS_Stop+0xfc>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800223c:	d107      	bne.n	800224e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800223e:	bf00      	nop
 8002240:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <HW_TS_Stop+0xf0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1f8      	bne.n	8002240 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800224e:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <HW_TS_Stop+0xf0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	4b1b      	ldr	r3, [pc, #108]	; (80022c4 <HW_TS_Stop+0xf0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800225c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800225e:	bf00      	nop
 8002260:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <HW_TS_Stop+0xf0>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f8      	beq.n	8002260 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800226e:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <HW_TS_Stop+0xf0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	b2da      	uxtb	r2, r3
 8002276:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <HW_TS_Stop+0xf0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800227e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002280:	4b14      	ldr	r3, [pc, #80]	; (80022d4 <HW_TS_Stop+0x100>)
 8002282:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002286:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002288:	2003      	movs	r0, #3
 800228a:	f001 fa44 	bl	8003716 <HAL_NVIC_ClearPendingIRQ>
 800228e:	e007      	b.n	80022a0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <HW_TS_Stop+0x104>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	7cfa      	ldrb	r2, [r7, #19]
 8002298:	429a      	cmp	r2, r3
 800229a:	d001      	beq.n	80022a0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800229c:	f7ff fd5e 	bl	8001d5c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80022a0:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <HW_TS_Stop+0xf0>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	22ff      	movs	r2, #255	; 0xff
 80022a6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80022a8:	2003      	movs	r0, #3
 80022aa:	f001 f9fe 	bl	80036aa <HAL_NVIC_EnableIRQ>
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	f383 8810 	msr	PRIMASK, r3
}
 80022b8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80022ba:	bf00      	nop
}
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	200001dc 	.word	0x200001dc
 80022c8:	200000fc 	.word	0x200000fc
 80022cc:	2000018c 	.word	0x2000018c
 80022d0:	40002800 	.word	0x40002800
 80022d4:	58000800 	.word	0x58000800
 80022d8:	2000018d 	.word	0x2000018d

080022dc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	6039      	str	r1, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80022e8:	79fa      	ldrb	r2, [r7, #7]
 80022ea:	493b      	ldr	r1, [pc, #236]	; (80023d8 <HW_TS_Start+0xfc>)
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	440b      	add	r3, r1
 80022f6:	330c      	adds	r3, #12
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d103      	bne.n	8002308 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002300:	79fb      	ldrb	r3, [r7, #7]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff ff66 	bl	80021d4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002308:	f3ef 8310 	mrs	r3, PRIMASK
 800230c:	60fb      	str	r3, [r7, #12]
  return(result);
 800230e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002310:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002312:	b672      	cpsid	i
}
 8002314:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002316:	2003      	movs	r0, #3
 8002318:	f001 f9d5 	bl	80036c6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800231c:	4b2f      	ldr	r3, [pc, #188]	; (80023dc <HW_TS_Start+0x100>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	22ca      	movs	r2, #202	; 0xca
 8002322:	625a      	str	r2, [r3, #36]	; 0x24
 8002324:	4b2d      	ldr	r3, [pc, #180]	; (80023dc <HW_TS_Start+0x100>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2253      	movs	r2, #83	; 0x53
 800232a:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800232c:	79fa      	ldrb	r2, [r7, #7]
 800232e:	492a      	ldr	r1, [pc, #168]	; (80023d8 <HW_TS_Start+0xfc>)
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	440b      	add	r3, r1
 800233a:	330c      	adds	r3, #12
 800233c:	2202      	movs	r2, #2
 800233e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002340:	79fa      	ldrb	r2, [r7, #7]
 8002342:	4925      	ldr	r1, [pc, #148]	; (80023d8 <HW_TS_Start+0xfc>)
 8002344:	4613      	mov	r3, r2
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4413      	add	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	440b      	add	r3, r1
 800234e:	3308      	adds	r3, #8
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002354:	79fa      	ldrb	r2, [r7, #7]
 8002356:	4920      	ldr	r1, [pc, #128]	; (80023d8 <HW_TS_Start+0xfc>)
 8002358:	4613      	mov	r3, r2
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4413      	add	r3, r2
 800235e:	00db      	lsls	r3, r3, #3
 8002360:	440b      	add	r3, r1
 8002362:	3304      	adds	r3, #4
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002368:	79fb      	ldrb	r3, [r7, #7]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fb30 	bl	80019d0 <linkTimer>
 8002370:	4603      	mov	r3, r0
 8002372:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002374:	4b1a      	ldr	r3, [pc, #104]	; (80023e0 <HW_TS_Start+0x104>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800237a:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <HW_TS_Start+0x108>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	b2db      	uxtb	r3, r3
 8002380:	7c7a      	ldrb	r2, [r7, #17]
 8002382:	429a      	cmp	r2, r3
 8002384:	d002      	beq.n	800238c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002386:	f7ff fce9 	bl	8001d5c <RescheduleTimerList>
 800238a:	e013      	b.n	80023b4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800238c:	79fa      	ldrb	r2, [r7, #7]
 800238e:	4912      	ldr	r1, [pc, #72]	; (80023d8 <HW_TS_Start+0xfc>)
 8002390:	4613      	mov	r3, r2
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	4413      	add	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	440b      	add	r3, r1
 800239a:	3308      	adds	r3, #8
 800239c:	6819      	ldr	r1, [r3, #0]
 800239e:	8a7b      	ldrh	r3, [r7, #18]
 80023a0:	79fa      	ldrb	r2, [r7, #7]
 80023a2:	1ac9      	subs	r1, r1, r3
 80023a4:	480c      	ldr	r0, [pc, #48]	; (80023d8 <HW_TS_Start+0xfc>)
 80023a6:	4613      	mov	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	4413      	add	r3, r2
 80023ac:	00db      	lsls	r3, r3, #3
 80023ae:	4403      	add	r3, r0
 80023b0:	3308      	adds	r3, #8
 80023b2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HW_TS_Start+0x100>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	22ff      	movs	r2, #255	; 0xff
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80023bc:	2003      	movs	r0, #3
 80023be:	f001 f974 	bl	80036aa <HAL_NVIC_EnableIRQ>
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	f383 8810 	msr	PRIMASK, r3
}
 80023cc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80023ce:	bf00      	nop
}
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	200000fc 	.word	0x200000fc
 80023dc:	200001dc 	.word	0x200001dc
 80023e0:	2000018c 	.word	0x2000018c
 80023e4:	2000018d 	.word	0x2000018d

080023e8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	460b      	mov	r3, r1
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4798      	blx	r3

  return;
 80023fa:	bf00      	nop
}
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607b      	str	r3, [r7, #4]
 800240e:	4603      	mov	r3, r0
 8002410:	73fb      	strb	r3, [r7, #15]
 8002412:	4613      	mov	r3, r2
 8002414:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800241a:	2300      	movs	r3, #0
 800241c:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10e      	bne.n	8002442 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8002424:	4a17      	ldr	r2, [pc, #92]	; (8002484 <HW_UART_Transmit_DMA+0x80>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 800242a:	4b17      	ldr	r3, [pc, #92]	; (8002488 <HW_UART_Transmit_DMA+0x84>)
 800242c:	4a17      	ldr	r2, [pc, #92]	; (800248c <HW_UART_Transmit_DMA+0x88>)
 800242e:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002430:	89bb      	ldrh	r3, [r7, #12]
 8002432:	461a      	mov	r2, r3
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	4814      	ldr	r0, [pc, #80]	; (8002488 <HW_UART_Transmit_DMA+0x84>)
 8002438:	f004 ffd2 	bl	80073e0 <HAL_UART_Transmit_DMA>
 800243c:	4603      	mov	r3, r0
 800243e:	75fb      	strb	r3, [r7, #23]
            break;
 8002440:	e000      	b.n	8002444 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8002442:	bf00      	nop
    }

    switch (hal_status)
 8002444:	7dfb      	ldrb	r3, [r7, #23]
 8002446:	2b03      	cmp	r3, #3
 8002448:	d816      	bhi.n	8002478 <HW_UART_Transmit_DMA+0x74>
 800244a:	a201      	add	r2, pc, #4	; (adr r2, 8002450 <HW_UART_Transmit_DMA+0x4c>)
 800244c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002450:	08002461 	.word	0x08002461
 8002454:	08002467 	.word	0x08002467
 8002458:	0800246d 	.word	0x0800246d
 800245c:	08002473 	.word	0x08002473
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002460:	2300      	movs	r3, #0
 8002462:	75bb      	strb	r3, [r7, #22]
            break;
 8002464:	e009      	b.n	800247a <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002466:	2301      	movs	r3, #1
 8002468:	75bb      	strb	r3, [r7, #22]
            break;
 800246a:	e006      	b.n	800247a <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 800246c:	2302      	movs	r3, #2
 800246e:	75bb      	strb	r3, [r7, #22]
            break;
 8002470:	e003      	b.n	800247a <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002472:	2303      	movs	r3, #3
 8002474:	75bb      	strb	r3, [r7, #22]
            break;
 8002476:	e000      	b.n	800247a <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002478:	bf00      	nop
    }

    return hw_status;
 800247a:	7dbb      	ldrb	r3, [r7, #22]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	2000019c 	.word	0x2000019c
 8002488:	20000298 	.word	0x20000298
 800248c:	40013800 	.word	0x40013800

08002490 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <HAL_UART_TxCpltCallback+0x34>)
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d107      	bne.n	80024b4 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80024a4:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <HAL_UART_TxCpltCallback+0x38>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_UART_TxCpltCallback+0x38>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4798      	blx	r3
            }
            break;
 80024b2:	e001      	b.n	80024b8 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 80024b4:	bf00      	nop
 80024b6:	e000      	b.n	80024ba <HAL_UART_TxCpltCallback+0x2a>
            break;
 80024b8:	bf00      	nop
    }

    return;
 80024ba:	bf00      	nop
}
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40013800 	.word	0x40013800
 80024c8:	2000019c 	.word	0x2000019c

080024cc <LL_RCC_LSE_SetDriveCapability>:
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80024d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024dc:	f023 0218 	bic.w	r2, r3, #24
 80024e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_AHB1_GRP1_EnableClock>:
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002504:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002506:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4313      	orrs	r3, r2
 800250e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002514:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4013      	ands	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800251c:	68fb      	ldr	r3, [r7, #12]
}
 800251e:	bf00      	nop
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <LL_AHB2_GRP1_EnableClock>:
{
 800252a:	b480      	push	{r7}
 800252c:	b085      	sub	sp, #20
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002536:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002538:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4313      	orrs	r3, r2
 8002540:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4013      	ands	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800254e:	68fb      	ldr	r3, [r7, #12]
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002560:	f000 febc 	bl	80032dc <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002564:	f7fe fdb0 	bl	80010c8 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002568:	f000 f824 	bl	80025b4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800256c:	f000 f898 	bl	80026a0 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002570:	f000 f8b6 	bl	80026e0 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002574:	f000 fa58 	bl	8002a28 <MX_GPIO_Init>
  MX_DMA_Init();
 8002578:	f000 fa44 	bl	8002a04 <MX_DMA_Init>
  MX_RTC_Init();
 800257c:	f000 f8cc 	bl	8002718 <MX_RTC_Init>
  MX_USB_PCD_Init();
 8002580:	f000 fa18 	bl	80029b4 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8002584:	f000 f8fc 	bl	8002780 <MX_TIM2_Init>
  MX_TIM16_Init();
 8002588:	f000 f94e 	bl	8002828 <MX_TIM16_Init>
  MX_RF_Init();
 800258c:	f000 f8bc 	bl	8002708 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8002590:	2100      	movs	r1, #0
 8002592:	4806      	ldr	r0, [pc, #24]	; (80025ac <main+0x50>)
 8002594:	f003 ff98 	bl	80064c8 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //really just channel 1 and 2 because that is what the encoder uses
 8002598:	213c      	movs	r1, #60	; 0x3c
 800259a:	4805      	ldr	r0, [pc, #20]	; (80025b0 <main+0x54>)
 800259c:	f004 f914 	bl	80067c8 <HAL_TIM_Encoder_Start>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80025a0:	f7fe fda0 	bl	80010e4 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80025a4:	f7ff f828 	bl	80015f8 <MX_APPE_Process>
 80025a8:	e7fc      	b.n	80025a4 <main+0x48>
 80025aa:	bf00      	nop
 80025ac:	2000024c 	.word	0x2000024c
 80025b0:	20000200 	.word	0x20000200

080025b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b09a      	sub	sp, #104	; 0x68
 80025b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ba:	f107 0320 	add.w	r3, r7, #32
 80025be:	2248      	movs	r2, #72	; 0x48
 80025c0:	2100      	movs	r1, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f00b f9d8 	bl	800d978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025c8:	1d3b      	adds	r3, r7, #4
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	605a      	str	r2, [r3, #4]
 80025d0:	609a      	str	r2, [r3, #8]
 80025d2:	60da      	str	r2, [r3, #12]
 80025d4:	611a      	str	r2, [r3, #16]
 80025d6:	615a      	str	r2, [r3, #20]
 80025d8:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80025da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025e8:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80025ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f023 0303 	bic.w	r3, r3, #3
 80025f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80025fe:	f001 ff0d 	bl	800441c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002602:	2000      	movs	r0, #0
 8002604:	f7ff ff62 	bl	80024cc <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002608:	4b24      	ldr	r3, [pc, #144]	; (800269c <SystemClock_Config+0xe8>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002610:	4a22      	ldr	r2, [pc, #136]	; (800269c <SystemClock_Config+0xe8>)
 8002612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002616:	6013      	str	r3, [r2, #0]
 8002618:	4b20      	ldr	r3, [pc, #128]	; (800269c <SystemClock_Config+0xe8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002620:	603b      	str	r3, [r7, #0]
 8002622:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002624:	2327      	movs	r3, #39	; 0x27
 8002626:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002628:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800262e:	2301      	movs	r3, #1
 8002630:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002632:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002636:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002638:	2301      	movs	r3, #1
 800263a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800263c:	2340      	movs	r3, #64	; 0x40
 800263e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002640:	2300      	movs	r3, #0
 8002642:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002644:	2360      	movs	r3, #96	; 0x60
 8002646:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002648:	2300      	movs	r3, #0
 800264a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800264c:	f107 0320 	add.w	r3, r7, #32
 8002650:	4618      	mov	r0, r3
 8002652:	f002 fa77 	bl	8004b44 <HAL_RCC_OscConfig>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800265c:	f000 fa80 	bl	8002b60 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002660:	236f      	movs	r3, #111	; 0x6f
 8002662:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002664:	2302      	movs	r3, #2
 8002666:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002668:	2300      	movs	r3, #0
 800266a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800266c:	2300      	movs	r3, #0
 800266e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002674:	2300      	movs	r3, #0
 8002676:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002678:	2300      	movs	r3, #0
 800267a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800267c:	1d3b      	adds	r3, r7, #4
 800267e:	2101      	movs	r1, #1
 8002680:	4618      	mov	r0, r3
 8002682:	f002 fdd3 	bl	800522c <HAL_RCC_ClockConfig>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800268c:	f000 fa68 	bl	8002b60 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002690:	f003 fb8e 	bl	8005db0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002694:	bf00      	nop
 8002696:	3768      	adds	r7, #104	; 0x68
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	58000400 	.word	0x58000400

080026a0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b094      	sub	sp, #80	; 0x50
 80026a4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026a6:	463b      	mov	r3, r7
 80026a8:	2250      	movs	r2, #80	; 0x50
 80026aa:	2100      	movs	r1, #0
 80026ac:	4618      	mov	r0, r3
 80026ae:	f00b f963 	bl	800d978 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80026b2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80026b6:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80026b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80026bc:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80026be:	2302      	movs	r3, #2
 80026c0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80026c2:	2310      	movs	r3, #16
 80026c4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026c6:	463b      	mov	r3, r7
 80026c8:	4618      	mov	r0, r3
 80026ca:	f003 f9fb 	bl	8005ac4 <HAL_RCCEx_PeriphCLKConfig>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80026d4:	f000 fa44 	bl	8002b60 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80026d8:	bf00      	nop
 80026da:	3750      	adds	r7, #80	; 0x50
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <MX_IPCC_Init+0x20>)
 80026e6:	4a07      	ldr	r2, [pc, #28]	; (8002704 <MX_IPCC_Init+0x24>)
 80026e8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80026ea:	4805      	ldr	r0, [pc, #20]	; (8002700 <MX_IPCC_Init+0x20>)
 80026ec:	f001 fd18 	bl	8004120 <HAL_IPCC_Init>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80026f6:	f000 fa33 	bl	8002b60 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	200001a0 	.word	0x200001a0
 8002704:	58000c00 	.word	0x58000c00

08002708 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800270c:	bf00      	nop
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800271c:	4b16      	ldr	r3, [pc, #88]	; (8002778 <MX_RTC_Init+0x60>)
 800271e:	4a17      	ldr	r2, [pc, #92]	; (800277c <MX_RTC_Init+0x64>)
 8002720:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002722:	4b15      	ldr	r3, [pc, #84]	; (8002778 <MX_RTC_Init+0x60>)
 8002724:	2200      	movs	r2, #0
 8002726:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002728:	4b13      	ldr	r3, [pc, #76]	; (8002778 <MX_RTC_Init+0x60>)
 800272a:	220f      	movs	r2, #15
 800272c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <MX_RTC_Init+0x60>)
 8002730:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002734:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002736:	4b10      	ldr	r3, [pc, #64]	; (8002778 <MX_RTC_Init+0x60>)
 8002738:	2200      	movs	r2, #0
 800273a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800273c:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <MX_RTC_Init+0x60>)
 800273e:	2200      	movs	r2, #0
 8002740:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002742:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <MX_RTC_Init+0x60>)
 8002744:	2200      	movs	r2, #0
 8002746:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <MX_RTC_Init+0x60>)
 800274a:	2200      	movs	r2, #0
 800274c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800274e:	480a      	ldr	r0, [pc, #40]	; (8002778 <MX_RTC_Init+0x60>)
 8002750:	f003 fc46 	bl	8005fe0 <HAL_RTC_Init>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800275a:	f000 fa01 	bl	8002b60 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800275e:	2200      	movs	r2, #0
 8002760:	2100      	movs	r1, #0
 8002762:	4805      	ldr	r0, [pc, #20]	; (8002778 <MX_RTC_Init+0x60>)
 8002764:	f003 fd3c 	bl	80061e0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800276e:	f000 f9f7 	bl	8002b60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	200001dc 	.word	0x200001dc
 800277c:	40002800 	.word	0x40002800

08002780 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08c      	sub	sp, #48	; 0x30
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002786:	f107 030c 	add.w	r3, r7, #12
 800278a:	2224      	movs	r2, #36	; 0x24
 800278c:	2100      	movs	r1, #0
 800278e:	4618      	mov	r0, r3
 8002790:	f00b f8f2 	bl	800d978 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002794:	463b      	mov	r3, r7
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]
 800279a:	605a      	str	r2, [r3, #4]
 800279c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800279e:	4b21      	ldr	r3, [pc, #132]	; (8002824 <MX_TIM2_Init+0xa4>)
 80027a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80027a6:	4b1f      	ldr	r3, [pc, #124]	; (8002824 <MX_TIM2_Init+0xa4>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ac:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <MX_TIM2_Init+0xa4>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80027b2:	4b1c      	ldr	r3, [pc, #112]	; (8002824 <MX_TIM2_Init+0xa4>)
 80027b4:	f04f 32ff 	mov.w	r2, #4294967295
 80027b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ba:	4b1a      	ldr	r3, [pc, #104]	; (8002824 <MX_TIM2_Init+0xa4>)
 80027bc:	2200      	movs	r2, #0
 80027be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027c0:	4b18      	ldr	r3, [pc, #96]	; (8002824 <MX_TIM2_Init+0xa4>)
 80027c2:	2280      	movs	r2, #128	; 0x80
 80027c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80027c6:	2303      	movs	r3, #3
 80027c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80027ce:	2301      	movs	r3, #1
 80027d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80027da:	2300      	movs	r3, #0
 80027dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80027de:	2301      	movs	r3, #1
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80027e2:	2300      	movs	r3, #0
 80027e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80027ea:	f107 030c 	add.w	r3, r7, #12
 80027ee:	4619      	mov	r1, r3
 80027f0:	480c      	ldr	r0, [pc, #48]	; (8002824 <MX_TIM2_Init+0xa4>)
 80027f2:	f003 ff43 	bl	800667c <HAL_TIM_Encoder_Init>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80027fc:	f000 f9b0 	bl	8002b60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002800:	2300      	movs	r3, #0
 8002802:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002804:	2300      	movs	r3, #0
 8002806:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002808:	463b      	mov	r3, r7
 800280a:	4619      	mov	r1, r3
 800280c:	4805      	ldr	r0, [pc, #20]	; (8002824 <MX_TIM2_Init+0xa4>)
 800280e:	f004 fc91 	bl	8007134 <HAL_TIMEx_MasterConfigSynchronization>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002818:	f000 f9a2 	bl	8002b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800281c:	bf00      	nop
 800281e:	3730      	adds	r7, #48	; 0x30
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000200 	.word	0x20000200

08002828 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b094      	sub	sp, #80	; 0x50
 800282c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800282e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002832:	2200      	movs	r2, #0
 8002834:	601a      	str	r2, [r3, #0]
 8002836:	605a      	str	r2, [r3, #4]
 8002838:	609a      	str	r2, [r3, #8]
 800283a:	60da      	str	r2, [r3, #12]
 800283c:	611a      	str	r2, [r3, #16]
 800283e:	615a      	str	r2, [r3, #20]
 8002840:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002842:	463b      	mov	r3, r7
 8002844:	2234      	movs	r2, #52	; 0x34
 8002846:	2100      	movs	r1, #0
 8002848:	4618      	mov	r0, r3
 800284a:	f00b f895 	bl	800d978 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800284e:	4b30      	ldr	r3, [pc, #192]	; (8002910 <MX_TIM16_Init+0xe8>)
 8002850:	4a30      	ldr	r2, [pc, #192]	; (8002914 <MX_TIM16_Init+0xec>)
 8002852:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002854:	4b2e      	ldr	r3, [pc, #184]	; (8002910 <MX_TIM16_Init+0xe8>)
 8002856:	2200      	movs	r2, #0
 8002858:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800285a:	4b2d      	ldr	r3, [pc, #180]	; (8002910 <MX_TIM16_Init+0xe8>)
 800285c:	2200      	movs	r2, #0
 800285e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 8002860:	4b2b      	ldr	r3, [pc, #172]	; (8002910 <MX_TIM16_Init+0xe8>)
 8002862:	22ff      	movs	r2, #255	; 0xff
 8002864:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002866:	4b2a      	ldr	r3, [pc, #168]	; (8002910 <MX_TIM16_Init+0xe8>)
 8002868:	2200      	movs	r2, #0
 800286a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800286c:	4b28      	ldr	r3, [pc, #160]	; (8002910 <MX_TIM16_Init+0xe8>)
 800286e:	2200      	movs	r2, #0
 8002870:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002872:	4b27      	ldr	r3, [pc, #156]	; (8002910 <MX_TIM16_Init+0xe8>)
 8002874:	2280      	movs	r2, #128	; 0x80
 8002876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002878:	4825      	ldr	r0, [pc, #148]	; (8002910 <MX_TIM16_Init+0xe8>)
 800287a:	f003 fd6d 	bl	8006358 <HAL_TIM_Base_Init>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8002884:	f000 f96c 	bl	8002b60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002888:	4821      	ldr	r0, [pc, #132]	; (8002910 <MX_TIM16_Init+0xe8>)
 800288a:	f003 fdbc 	bl	8006406 <HAL_TIM_PWM_Init>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8002894:	f000 f964 	bl	8002b60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002898:	2360      	movs	r3, #96	; 0x60
 800289a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028a0:	2300      	movs	r3, #0
 80028a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028a4:	2300      	movs	r3, #0
 80028a6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028a8:	2300      	movs	r3, #0
 80028aa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028ac:	2300      	movs	r3, #0
 80028ae:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028b0:	2300      	movs	r3, #0
 80028b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028b4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028b8:	2200      	movs	r2, #0
 80028ba:	4619      	mov	r1, r3
 80028bc:	4814      	ldr	r0, [pc, #80]	; (8002910 <MX_TIM16_Init+0xe8>)
 80028be:	f004 f811 	bl	80068e4 <HAL_TIM_PWM_ConfigChannel>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 80028c8:	f000 f94a 	bl	8002b60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028d0:	2300      	movs	r3, #0
 80028d2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028dc:	2300      	movs	r3, #0
 80028de:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80028ea:	2300      	movs	r3, #0
 80028ec:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80028ee:	463b      	mov	r3, r7
 80028f0:	4619      	mov	r1, r3
 80028f2:	4807      	ldr	r0, [pc, #28]	; (8002910 <MX_TIM16_Init+0xe8>)
 80028f4:	f004 fc7e 	bl	80071f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 80028fe:	f000 f92f 	bl	8002b60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002902:	4803      	ldr	r0, [pc, #12]	; (8002910 <MX_TIM16_Init+0xe8>)
 8002904:	f000 fa4e 	bl	8002da4 <HAL_TIM_MspPostInit>

}
 8002908:	bf00      	nop
 800290a:	3750      	adds	r7, #80	; 0x50
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	2000024c 	.word	0x2000024c
 8002914:	40014400 	.word	0x40014400

08002918 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800291c:	4b23      	ldr	r3, [pc, #140]	; (80029ac <MX_USART1_UART_Init+0x94>)
 800291e:	4a24      	ldr	r2, [pc, #144]	; (80029b0 <MX_USART1_UART_Init+0x98>)
 8002920:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002922:	4b22      	ldr	r3, [pc, #136]	; (80029ac <MX_USART1_UART_Init+0x94>)
 8002924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002928:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800292a:	4b20      	ldr	r3, [pc, #128]	; (80029ac <MX_USART1_UART_Init+0x94>)
 800292c:	2200      	movs	r2, #0
 800292e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002930:	4b1e      	ldr	r3, [pc, #120]	; (80029ac <MX_USART1_UART_Init+0x94>)
 8002932:	2200      	movs	r2, #0
 8002934:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002936:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <MX_USART1_UART_Init+0x94>)
 8002938:	2200      	movs	r2, #0
 800293a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800293c:	4b1b      	ldr	r3, [pc, #108]	; (80029ac <MX_USART1_UART_Init+0x94>)
 800293e:	220c      	movs	r2, #12
 8002940:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002942:	4b1a      	ldr	r3, [pc, #104]	; (80029ac <MX_USART1_UART_Init+0x94>)
 8002944:	2200      	movs	r2, #0
 8002946:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002948:	4b18      	ldr	r3, [pc, #96]	; (80029ac <MX_USART1_UART_Init+0x94>)
 800294a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800294e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002950:	4b16      	ldr	r3, [pc, #88]	; (80029ac <MX_USART1_UART_Init+0x94>)
 8002952:	2200      	movs	r2, #0
 8002954:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002956:	4b15      	ldr	r3, [pc, #84]	; (80029ac <MX_USART1_UART_Init+0x94>)
 8002958:	2200      	movs	r2, #0
 800295a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800295c:	4b13      	ldr	r3, [pc, #76]	; (80029ac <MX_USART1_UART_Init+0x94>)
 800295e:	2200      	movs	r2, #0
 8002960:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002962:	4812      	ldr	r0, [pc, #72]	; (80029ac <MX_USART1_UART_Init+0x94>)
 8002964:	f004 fcec 	bl	8007340 <HAL_UART_Init>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800296e:	f000 f8f7 	bl	8002b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002972:	2100      	movs	r1, #0
 8002974:	480d      	ldr	r0, [pc, #52]	; (80029ac <MX_USART1_UART_Init+0x94>)
 8002976:	f005 feb2 	bl	80086de <HAL_UARTEx_SetTxFifoThreshold>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002980:	f000 f8ee 	bl	8002b60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002984:	2100      	movs	r1, #0
 8002986:	4809      	ldr	r0, [pc, #36]	; (80029ac <MX_USART1_UART_Init+0x94>)
 8002988:	f005 fee7 	bl	800875a <HAL_UARTEx_SetRxFifoThreshold>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002992:	f000 f8e5 	bl	8002b60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002996:	4805      	ldr	r0, [pc, #20]	; (80029ac <MX_USART1_UART_Init+0x94>)
 8002998:	f005 fe68 	bl	800866c <HAL_UARTEx_DisableFifoMode>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80029a2:	f000 f8dd 	bl	8002b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000298 	.word	0x20000298
 80029b0:	40013800 	.word	0x40013800

080029b4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80029b8:	4b10      	ldr	r3, [pc, #64]	; (80029fc <MX_USB_PCD_Init+0x48>)
 80029ba:	4a11      	ldr	r2, [pc, #68]	; (8002a00 <MX_USB_PCD_Init+0x4c>)
 80029bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80029be:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <MX_USB_PCD_Init+0x48>)
 80029c0:	2208      	movs	r2, #8
 80029c2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80029c4:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <MX_USB_PCD_Init+0x48>)
 80029c6:	2202      	movs	r2, #2
 80029c8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80029ca:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <MX_USB_PCD_Init+0x48>)
 80029cc:	2202      	movs	r2, #2
 80029ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80029d0:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <MX_USB_PCD_Init+0x48>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80029d6:	4b09      	ldr	r3, [pc, #36]	; (80029fc <MX_USB_PCD_Init+0x48>)
 80029d8:	2200      	movs	r2, #0
 80029da:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80029dc:	4b07      	ldr	r3, [pc, #28]	; (80029fc <MX_USB_PCD_Init+0x48>)
 80029de:	2200      	movs	r2, #0
 80029e0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80029e2:	4b06      	ldr	r3, [pc, #24]	; (80029fc <MX_USB_PCD_Init+0x48>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80029e8:	4804      	ldr	r0, [pc, #16]	; (80029fc <MX_USB_PCD_Init+0x48>)
 80029ea:	f001 fc1f 	bl	800422c <HAL_PCD_Init>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80029f4:	f000 f8b4 	bl	8002b60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80029f8:	bf00      	nop
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	2000038c 	.word	0x2000038c
 8002a00:	40006800 	.word	0x40006800

08002a04 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002a08:	2004      	movs	r0, #4
 8002a0a:	f7ff fd75 	bl	80024f8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a0e:	2001      	movs	r0, #1
 8002a10:	f7ff fd72 	bl	80024f8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 15, 0);
 8002a14:	2200      	movs	r2, #0
 8002a16:	210f      	movs	r1, #15
 8002a18:	200b      	movs	r0, #11
 8002a1a:	f000 fe2c 	bl	8003676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002a1e:	200b      	movs	r0, #11
 8002a20:	f000 fe43 	bl	80036aa <HAL_NVIC_EnableIRQ>

}
 8002a24:	bf00      	nop
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a2e:	1d3b      	adds	r3, r7, #4
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a3c:	2004      	movs	r0, #4
 8002a3e:	f7ff fd74 	bl	800252a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a42:	2001      	movs	r0, #1
 8002a44:	f7ff fd71 	bl	800252a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a48:	2002      	movs	r0, #2
 8002a4a:	f7ff fd6e 	bl	800252a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a4e:	2008      	movs	r0, #8
 8002a50:	f7ff fd6b 	bl	800252a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SYS_ENABLE_Pin|DIR_A_Pin, GPIO_PIN_RESET);
 8002a54:	2200      	movs	r2, #0
 8002a56:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8002a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a5e:	f001 fb0b 	bl	8004078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Green_Led_Pin|Red_Led_Pin|Blue_Led_Pin, GPIO_PIN_RESET);
 8002a62:	2200      	movs	r2, #0
 8002a64:	2123      	movs	r1, #35	; 0x23
 8002a66:	4833      	ldr	r0, [pc, #204]	; (8002b34 <MX_GPIO_Init+0x10c>)
 8002a68:	f001 fb06 	bl	8004078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_B_GPIO_Port, DIR_B_Pin, GPIO_PIN_RESET);
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a72:	4831      	ldr	r0, [pc, #196]	; (8002b38 <MX_GPIO_Init+0x110>)
 8002a74:	f001 fb00 	bl	8004078 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SYS_ENABLE_Pin DIR_A_Pin */
  GPIO_InitStruct.Pin = SYS_ENABLE_Pin|DIR_A_Pin;
 8002a78:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8002a7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a8a:	1d3b      	adds	r3, r7, #4
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a92:	f001 f981 	bl	8003d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a96:	2310      	movs	r3, #16
 8002a98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002aa4:	1d3b      	adds	r3, r7, #4
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4823      	ldr	r0, [pc, #140]	; (8002b38 <MX_GPIO_Init+0x110>)
 8002aaa:	f001 f975 	bl	8003d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_Led_Pin Red_Led_Pin Blue_Led_Pin */
  GPIO_InitStruct.Pin = Green_Led_Pin|Red_Led_Pin|Blue_Led_Pin;
 8002aae:	2323      	movs	r3, #35	; 0x23
 8002ab0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aba:	2302      	movs	r3, #2
 8002abc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002abe:	1d3b      	adds	r3, r7, #4
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	481c      	ldr	r0, [pc, #112]	; (8002b34 <MX_GPIO_Init+0x10c>)
 8002ac4:	f001 f968 	bl	8003d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_B_Pin */
  GPIO_InitStruct.Pin = DIR_B_Pin;
 8002ac8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002acc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DIR_B_GPIO_Port, &GPIO_InitStruct);
 8002ada:	1d3b      	adds	r3, r7, #4
 8002adc:	4619      	mov	r1, r3
 8002ade:	4816      	ldr	r0, [pc, #88]	; (8002b38 <MX_GPIO_Init+0x110>)
 8002ae0:	f001 f95a 	bl	8003d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ae8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002aec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aee:	2301      	movs	r3, #1
 8002af0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002af2:	1d3b      	adds	r3, r7, #4
 8002af4:	4619      	mov	r1, r3
 8002af6:	4811      	ldr	r0, [pc, #68]	; (8002b3c <MX_GPIO_Init+0x114>)
 8002af8:	f001 f94e 	bl	8003d98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002afc:	2200      	movs	r2, #0
 8002afe:	2100      	movs	r1, #0
 8002b00:	2006      	movs	r0, #6
 8002b02:	f000 fdb8 	bl	8003676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002b06:	2006      	movs	r0, #6
 8002b08:	f000 fdcf 	bl	80036aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2100      	movs	r1, #0
 8002b10:	2007      	movs	r0, #7
 8002b12:	f000 fdb0 	bl	8003676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002b16:	2007      	movs	r0, #7
 8002b18:	f000 fdc7 	bl	80036aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2100      	movs	r1, #0
 8002b20:	200a      	movs	r0, #10
 8002b22:	f000 fda8 	bl	8003676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002b26:	200a      	movs	r0, #10
 8002b28:	f000 fdbf 	bl	80036aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b2c:	bf00      	nop
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	48000400 	.word	0x48000400
 8002b38:	48000800 	.word	0x48000800
 8002b3c:	48000c00 	.word	0x48000c00

08002b40 <Set_CCR>:
{
	HAL_UART_Transmit(&huart1,(uint8_t*)message, sizeof(char)*50,10);
}

void Set_CCR(uint32_t CCR)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
	//used for setting motor speed pwm
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, CCR);
 8002b48:	4b04      	ldr	r3, [pc, #16]	; (8002b5c <Set_CCR+0x1c>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	2000024c 	.word	0x2000024c

08002b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002b64:	b672      	cpsid	i
}
 8002b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b68:	e7fe      	b.n	8002b68 <Error_Handler+0x8>

08002b6a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002b82:	bf00      	nop
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_AHB2_GRP1_EnableClock>:
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ba4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4013      	ands	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
}
 8002bb2:	bf00      	nop
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <LL_AHB3_GRP1_EnableClock>:
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b085      	sub	sp, #20
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bda:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4013      	ands	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002be2:	68fb      	ldr	r3, [r7, #12]
}
 8002be4:	bf00      	nop
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <LL_APB1_GRP1_EnableClock>:
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bfc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002bfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4013      	ands	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c14:	68fb      	ldr	r3, [r7, #12]
}
 8002c16:	bf00      	nop
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <LL_APB2_GRP1_EnableClock>:
{
 8002c22:	b480      	push	{r7}
 8002c24:	b085      	sub	sp, #20
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4013      	ands	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c46:	68fb      	ldr	r3, [r7, #12]
}
 8002c48:	bf00      	nop
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002c58:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002c5c:	f7ff ffaf 	bl	8002bbe <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002c60:	2200      	movs	r2, #0
 8002c62:	2100      	movs	r1, #0
 8002c64:	202e      	movs	r0, #46	; 0x2e
 8002c66:	f000 fd06 	bl	8003676 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002c6a:	202e      	movs	r0, #46	; 0x2e
 8002c6c:	f000 fd1d 	bl	80036aa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c70:	bf00      	nop
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a0d      	ldr	r2, [pc, #52]	; (8002cb8 <HAL_IPCC_MspInit+0x44>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d113      	bne.n	8002cae <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002c86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002c8a:	f7ff ff98 	bl	8002bbe <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2100      	movs	r1, #0
 8002c92:	202c      	movs	r0, #44	; 0x2c
 8002c94:	f000 fcef 	bl	8003676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002c98:	202c      	movs	r0, #44	; 0x2c
 8002c9a:	f000 fd06 	bl	80036aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	202d      	movs	r0, #45	; 0x2d
 8002ca4:	f000 fce7 	bl	8003676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002ca8:	202d      	movs	r0, #45	; 0x2d
 8002caa:	f000 fcfe 	bl	80036aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	58000c00 	.word	0x58000c00

08002cbc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b096      	sub	sp, #88	; 0x58
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cc4:	f107 0308 	add.w	r3, r7, #8
 8002cc8:	2250      	movs	r2, #80	; 0x50
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f00a fe53 	bl	800d978 <memset>
  if(hrtc->Instance==RTC)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a12      	ldr	r2, [pc, #72]	; (8002d20 <HAL_RTC_MspInit+0x64>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d11d      	bne.n	8002d18 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002cdc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ce0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002ce2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ce6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ce8:	f107 0308 	add.w	r3, r7, #8
 8002cec:	4618      	mov	r0, r3
 8002cee:	f002 fee9 	bl	8005ac4 <HAL_RCCEx_PeriphCLKConfig>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002cf8:	f7ff ff32 	bl	8002b60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002cfc:	f7ff ff35 	bl	8002b6a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002d00:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002d04:	f7ff ff74 	bl	8002bf0 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	2003      	movs	r0, #3
 8002d0e:	f000 fcb2 	bl	8003676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002d12:	2003      	movs	r0, #3
 8002d14:	f000 fcc9 	bl	80036aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002d18:	bf00      	nop
 8002d1a:	3758      	adds	r7, #88	; 0x58
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40002800 	.word	0x40002800

08002d24 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d2c:	f107 030c 	add.w	r3, r7, #12
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	605a      	str	r2, [r3, #4]
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	60da      	str	r2, [r3, #12]
 8002d3a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d44:	d116      	bne.n	8002d74 <HAL_TIM_Encoder_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d46:	2001      	movs	r0, #1
 8002d48:	f7ff ff52 	bl	8002bf0 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	f7ff ff1d 	bl	8002b8c <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8002d52:	2303      	movs	r3, #3
 8002d54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d56:	2302      	movs	r3, #2
 8002d58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d62:	2301      	movs	r3, #1
 8002d64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d66:	f107 030c 	add.w	r3, r7, #12
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d70:	f001 f812 	bl	8003d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002d74:	bf00      	nop
 8002d76:	3720      	adds	r7, #32
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a05      	ldr	r2, [pc, #20]	; (8002da0 <HAL_TIM_Base_MspInit+0x24>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d103      	bne.n	8002d96 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002d8e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002d92:	f7ff ff46 	bl	8002c22 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	40014400 	.word	0x40014400

08002da4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b088      	sub	sp, #32
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dac:	f107 030c 	add.w	r3, r7, #12
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM16)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a0d      	ldr	r2, [pc, #52]	; (8002df8 <HAL_TIM_MspPostInit+0x54>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d113      	bne.n	8002dee <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	f7ff fee0 	bl	8002b8c <LL_AHB2_GRP1_EnableClock>
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 8002dcc:	2340      	movs	r3, #64	; 0x40
 8002dce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8002ddc:	230e      	movs	r3, #14
 8002dde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8002de0:	f107 030c 	add.w	r3, r7, #12
 8002de4:	4619      	mov	r1, r3
 8002de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dea:	f000 ffd5 	bl	8003d98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8002dee:	bf00      	nop
 8002df0:	3720      	adds	r7, #32
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40014400 	.word	0x40014400

08002dfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b09c      	sub	sp, #112	; 0x70
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	60da      	str	r2, [r3, #12]
 8002e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e14:	f107 030c 	add.w	r3, r7, #12
 8002e18:	2250      	movs	r2, #80	; 0x50
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f00a fdab 	bl	800d978 <memset>
  if(huart->Instance==USART1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a2e      	ldr	r2, [pc, #184]	; (8002ee0 <HAL_UART_MspInit+0xe4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d155      	bne.n	8002ed8 <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002e30:	2300      	movs	r3, #0
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e34:	f107 030c 	add.w	r3, r7, #12
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f002 fe43 	bl	8005ac4 <HAL_RCCEx_PeriphCLKConfig>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002e44:	f7ff fe8c 	bl	8002b60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e48:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002e4c:	f7ff fee9 	bl	8002c22 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e50:	2002      	movs	r0, #2
 8002e52:	f7ff fe9b 	bl	8002b8c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002e56:	23c0      	movs	r3, #192	; 0xc0
 8002e58:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e62:	2300      	movs	r3, #0
 8002e64:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e66:	2307      	movs	r3, #7
 8002e68:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e6a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e6e:	4619      	mov	r1, r3
 8002e70:	481c      	ldr	r0, [pc, #112]	; (8002ee4 <HAL_UART_MspInit+0xe8>)
 8002e72:	f000 ff91 	bl	8003d98 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002e76:	4b1c      	ldr	r3, [pc, #112]	; (8002ee8 <HAL_UART_MspInit+0xec>)
 8002e78:	4a1c      	ldr	r2, [pc, #112]	; (8002eec <HAL_UART_MspInit+0xf0>)
 8002e7a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002e7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <HAL_UART_MspInit+0xec>)
 8002e7e:	220f      	movs	r2, #15
 8002e80:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e82:	4b19      	ldr	r3, [pc, #100]	; (8002ee8 <HAL_UART_MspInit+0xec>)
 8002e84:	2210      	movs	r2, #16
 8002e86:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e88:	4b17      	ldr	r3, [pc, #92]	; (8002ee8 <HAL_UART_MspInit+0xec>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e8e:	4b16      	ldr	r3, [pc, #88]	; (8002ee8 <HAL_UART_MspInit+0xec>)
 8002e90:	2280      	movs	r2, #128	; 0x80
 8002e92:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e94:	4b14      	ldr	r3, [pc, #80]	; (8002ee8 <HAL_UART_MspInit+0xec>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <HAL_UART_MspInit+0xec>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002ea0:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <HAL_UART_MspInit+0xec>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ea6:	4b10      	ldr	r3, [pc, #64]	; (8002ee8 <HAL_UART_MspInit+0xec>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002eac:	480e      	ldr	r0, [pc, #56]	; (8002ee8 <HAL_UART_MspInit+0xec>)
 8002eae:	f000 fc41 	bl	8003734 <HAL_DMA_Init>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002eb8:	f7ff fe52 	bl	8002b60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	; (8002ee8 <HAL_UART_MspInit+0xec>)
 8002ec0:	67da      	str	r2, [r3, #124]	; 0x7c
 8002ec2:	4a09      	ldr	r2, [pc, #36]	; (8002ee8 <HAL_UART_MspInit+0xec>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2100      	movs	r1, #0
 8002ecc:	2024      	movs	r0, #36	; 0x24
 8002ece:	f000 fbd2 	bl	8003676 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002ed2:	2024      	movs	r0, #36	; 0x24
 8002ed4:	f000 fbe9 	bl	80036aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002ed8:	bf00      	nop
 8002eda:	3770      	adds	r7, #112	; 0x70
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40013800 	.word	0x40013800
 8002ee4:	48000400 	.word	0x48000400
 8002ee8:	2000032c 	.word	0x2000032c
 8002eec:	40020008 	.word	0x40020008

08002ef0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b09c      	sub	sp, #112	; 0x70
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	60da      	str	r2, [r3, #12]
 8002f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f08:	f107 030c 	add.w	r3, r7, #12
 8002f0c:	2250      	movs	r2, #80	; 0x50
 8002f0e:	2100      	movs	r1, #0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f00a fd31 	bl	800d978 <memset>
  if(hpcd->Instance==USB)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a1f      	ldr	r2, [pc, #124]	; (8002f98 <HAL_PCD_MspInit+0xa8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d136      	bne.n	8002f8e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002f20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f24:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8002f26:	2318      	movs	r3, #24
 8002f28:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002f2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f2e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002f30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f34:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002f36:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002f3a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8002f3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f40:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002f42:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002f46:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f48:	f107 030c 	add.w	r3, r7, #12
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f002 fdb9 	bl	8005ac4 <HAL_RCCEx_PeriphCLKConfig>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8002f58:	f7ff fe02 	bl	8002b60 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	f7ff fe15 	bl	8002b8c <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002f62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002f66:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f70:	2300      	movs	r3, #0
 8002f72:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002f74:	230a      	movs	r3, #10
 8002f76:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f78:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f82:	f000 ff09 	bl	8003d98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002f86:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002f8a:	f7ff fe31 	bl	8002bf0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8002f8e:	bf00      	nop
 8002f90:	3770      	adds	r7, #112	; 0x70
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40006800 	.word	0x40006800

08002f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fa0:	e7fe      	b.n	8002fa0 <NMI_Handler+0x4>

08002fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fa6:	e7fe      	b.n	8002fa6 <HardFault_Handler+0x4>

08002fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fac:	e7fe      	b.n	8002fac <MemManage_Handler+0x4>

08002fae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fb2:	e7fe      	b.n	8002fb2 <BusFault_Handler+0x4>

08002fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fb8:	e7fe      	b.n	8002fb8 <UsageFault_Handler+0x4>

08002fba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fbe:	bf00      	nop
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fcc:	bf00      	nop
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fe8:	f000 f9d2 	bl	8003390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fec:	bf00      	nop
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002ff4:	f7fe ff4c 	bl	8001e90 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002ff8:	bf00      	nop
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8003000:	2001      	movs	r0, #1
 8003002:	f001 f851 	bl	80040a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003006:	bf00      	nop
 8003008:	bd80      	pop	{r7, pc}

0800300a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 800300e:	2002      	movs	r0, #2
 8003010:	f001 f84a 	bl	80040a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003014:	bf00      	nop
 8003016:	bd80      	pop	{r7, pc}

08003018 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800301c:	2010      	movs	r0, #16
 800301e:	f001 f843 	bl	80040a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800302c:	4802      	ldr	r0, [pc, #8]	; (8003038 <DMA1_Channel1_IRQHandler+0x10>)
 800302e:	f000 fd62 	bl	8003af6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	2000032c 	.word	0x2000032c

0800303c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003040:	4802      	ldr	r0, [pc, #8]	; (800304c <USART1_IRQHandler+0x10>)
 8003042:	f004 fa4d 	bl	80074e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	20000298 	.word	0x20000298

08003050 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003054:	f009 fec2 	bl	800cddc <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003058:	bf00      	nop
 800305a:	bd80      	pop	{r7, pc}

0800305c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003060:	f009 fef2 	bl	800ce48 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003064:	bf00      	nop
 8003066:	bd80      	pop	{r7, pc}

08003068 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800306c:	f001 f834 	bl	80040d8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003070:	bf00      	nop
 8003072:	bd80      	pop	{r7, pc}

08003074 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	e00a      	b.n	800309c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003086:	f3af 8000 	nop.w
 800308a:	4601      	mov	r1, r0
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	1c5a      	adds	r2, r3, #1
 8003090:	60ba      	str	r2, [r7, #8]
 8003092:	b2ca      	uxtb	r2, r1
 8003094:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	3301      	adds	r3, #1
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	dbf0      	blt.n	8003086 <_read+0x12>
  }

  return len;
 80030a4:	687b      	ldr	r3, [r7, #4]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <_close>:
  }
  return len;
}

int _close(int file)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b083      	sub	sp, #12
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030d6:	605a      	str	r2, [r3, #4]
  return 0;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <_isatty>:

int _isatty(int file)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030ee:	2301      	movs	r3, #1
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b086      	sub	sp, #24
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003120:	4a14      	ldr	r2, [pc, #80]	; (8003174 <_sbrk+0x5c>)
 8003122:	4b15      	ldr	r3, [pc, #84]	; (8003178 <_sbrk+0x60>)
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800312c:	4b13      	ldr	r3, [pc, #76]	; (800317c <_sbrk+0x64>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d102      	bne.n	800313a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003134:	4b11      	ldr	r3, [pc, #68]	; (800317c <_sbrk+0x64>)
 8003136:	4a12      	ldr	r2, [pc, #72]	; (8003180 <_sbrk+0x68>)
 8003138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800313a:	4b10      	ldr	r3, [pc, #64]	; (800317c <_sbrk+0x64>)
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4413      	add	r3, r2
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	429a      	cmp	r2, r3
 8003146:	d207      	bcs.n	8003158 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003148:	f00a fc7c 	bl	800da44 <__errno>
 800314c:	4603      	mov	r3, r0
 800314e:	220c      	movs	r2, #12
 8003150:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003152:	f04f 33ff 	mov.w	r3, #4294967295
 8003156:	e009      	b.n	800316c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003158:	4b08      	ldr	r3, [pc, #32]	; (800317c <_sbrk+0x64>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800315e:	4b07      	ldr	r3, [pc, #28]	; (800317c <_sbrk+0x64>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4413      	add	r3, r2
 8003166:	4a05      	ldr	r2, [pc, #20]	; (800317c <_sbrk+0x64>)
 8003168:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800316a:	68fb      	ldr	r3, [r7, #12]
}
 800316c:	4618      	mov	r0, r3
 800316e:	3718      	adds	r7, #24
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	20030000 	.word	0x20030000
 8003178:	00001000 	.word	0x00001000
 800317c:	20000668 	.word	0x20000668
 8003180:	20001a90 	.word	0x20001a90

08003184 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003188:	4b24      	ldr	r3, [pc, #144]	; (800321c <SystemInit+0x98>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318e:	4a23      	ldr	r2, [pc, #140]	; (800321c <SystemInit+0x98>)
 8003190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003194:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003198:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031a2:	f043 0301 	orr.w	r3, r3, #1
 80031a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80031a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ac:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80031b0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80031b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031bc:	4b18      	ldr	r3, [pc, #96]	; (8003220 <SystemInit+0x9c>)
 80031be:	4013      	ands	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80031c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031ce:	f023 0305 	bic.w	r3, r3, #5
 80031d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80031d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031e2:	f023 0301 	bic.w	r3, r3, #1
 80031e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80031ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ee:	4a0d      	ldr	r2, [pc, #52]	; (8003224 <SystemInit+0xa0>)
 80031f0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80031f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031f6:	4a0b      	ldr	r2, [pc, #44]	; (8003224 <SystemInit+0xa0>)
 80031f8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80031fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003204:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003208:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800320a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800320e:	2200      	movs	r2, #0
 8003210:	619a      	str	r2, [r3, #24]
}
 8003212:	bf00      	nop
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	e000ed00 	.word	0xe000ed00
 8003220:	faf6fefb 	.word	0xfaf6fefb
 8003224:	22041000 	.word	0x22041000

08003228 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8003228:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800322a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800322c:	3304      	adds	r3, #4

0800322e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800322e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003230:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8003232:	d3f9      	bcc.n	8003228 <CopyDataInit>
  bx lr
 8003234:	4770      	bx	lr

08003236 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8003236:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003238:	3004      	adds	r0, #4

0800323a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800323a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800323c:	d3fb      	bcc.n	8003236 <FillZerobss>
  bx lr
 800323e:	4770      	bx	lr

08003240 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003240:	480c      	ldr	r0, [pc, #48]	; (8003274 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003242:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003244:	f7ff ff9e 	bl	8003184 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003248:	480b      	ldr	r0, [pc, #44]	; (8003278 <LoopForever+0x6>)
 800324a:	490c      	ldr	r1, [pc, #48]	; (800327c <LoopForever+0xa>)
 800324c:	4a0c      	ldr	r2, [pc, #48]	; (8003280 <LoopForever+0xe>)
 800324e:	2300      	movs	r3, #0
 8003250:	f7ff ffed 	bl	800322e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003254:	480b      	ldr	r0, [pc, #44]	; (8003284 <LoopForever+0x12>)
 8003256:	490c      	ldr	r1, [pc, #48]	; (8003288 <LoopForever+0x16>)
 8003258:	4a0c      	ldr	r2, [pc, #48]	; (800328c <LoopForever+0x1a>)
 800325a:	2300      	movs	r3, #0
 800325c:	f7ff ffe7 	bl	800322e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003260:	480b      	ldr	r0, [pc, #44]	; (8003290 <LoopForever+0x1e>)
 8003262:	490c      	ldr	r1, [pc, #48]	; (8003294 <LoopForever+0x22>)
 8003264:	2300      	movs	r3, #0
 8003266:	f7ff ffe8 	bl	800323a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800326a:	f00a fbf1 	bl	800da50 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800326e:	f7ff f975 	bl	800255c <main>

08003272 <LoopForever>:

LoopForever:
  b LoopForever
 8003272:	e7fe      	b.n	8003272 <LoopForever>
  ldr   r0, =_estack
 8003274:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003278:	20000008 	.word	0x20000008
 800327c:	20000094 	.word	0x20000094
 8003280:	0800fd80 	.word	0x0800fd80
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003284:	200301e4 	.word	0x200301e4
 8003288:	20030a67 	.word	0x20030a67
 800328c:	0800fe52 	.word	0x0800fe52
  INIT_BSS _sbss, _ebss
 8003290:	200000e0 	.word	0x200000e0
 8003294:	20001a90 	.word	0x20001a90

08003298 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003298:	e7fe      	b.n	8003298 <ADC1_IRQHandler>
	...

0800329c <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80032a0:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	4a04      	ldr	r2, [pc, #16]	; (80032b8 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	6053      	str	r3, [r2, #4]
}
 80032ac:	bf00      	nop
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	e0042000 	.word	0xe0042000

080032bc <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80032c0:	4b05      	ldr	r3, [pc, #20]	; (80032d8 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	4a04      	ldr	r2, [pc, #16]	; (80032d8 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80032c6:	f043 0302 	orr.w	r3, r3, #2
 80032ca:	6053      	str	r3, [r2, #4]
}
 80032cc:	bf00      	nop
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	e0042000 	.word	0xe0042000

080032dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032e6:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <HAL_Init+0x3c>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a0b      	ldr	r2, [pc, #44]	; (8003318 <HAL_Init+0x3c>)
 80032ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032f2:	2003      	movs	r0, #3
 80032f4:	f000 f9b4 	bl	8003660 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032f8:	2000      	movs	r0, #0
 80032fa:	f000 f80f 	bl	800331c <HAL_InitTick>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	71fb      	strb	r3, [r7, #7]
 8003308:	e001      	b.n	800330e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800330a:	f7ff fca3 	bl	8002c54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800330e:	79fb      	ldrb	r3, [r7, #7]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	58004000 	.word	0x58004000

0800331c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003324:	2300      	movs	r3, #0
 8003326:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003328:	4b17      	ldr	r3, [pc, #92]	; (8003388 <HAL_InitTick+0x6c>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d024      	beq.n	800337a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003330:	f002 f928 	bl	8005584 <HAL_RCC_GetHCLKFreq>
 8003334:	4602      	mov	r2, r0
 8003336:	4b14      	ldr	r3, [pc, #80]	; (8003388 <HAL_InitTick+0x6c>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	4619      	mov	r1, r3
 800333c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003340:	fbb3 f3f1 	udiv	r3, r3, r1
 8003344:	fbb2 f3f3 	udiv	r3, r2, r3
 8003348:	4618      	mov	r0, r3
 800334a:	f000 f9ca 	bl	80036e2 <HAL_SYSTICK_Config>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10f      	bne.n	8003374 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b0f      	cmp	r3, #15
 8003358:	d809      	bhi.n	800336e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800335a:	2200      	movs	r2, #0
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	f04f 30ff 	mov.w	r0, #4294967295
 8003362:	f000 f988 	bl	8003676 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003366:	4a09      	ldr	r2, [pc, #36]	; (800338c <HAL_InitTick+0x70>)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	e007      	b.n	800337e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	73fb      	strb	r3, [r7, #15]
 8003372:	e004      	b.n	800337e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
 8003378:	e001      	b.n	800337e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800337e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	20000010 	.word	0x20000010
 800338c:	2000000c 	.word	0x2000000c

08003390 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <HAL_IncTick+0x20>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_IncTick+0x24>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4413      	add	r3, r2
 80033a0:	4a04      	ldr	r2, [pc, #16]	; (80033b4 <HAL_IncTick+0x24>)
 80033a2:	6013      	str	r3, [r2, #0]
}
 80033a4:	bf00      	nop
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	20000010 	.word	0x20000010
 80033b4:	2000066c 	.word	0x2000066c

080033b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return uwTick;
 80033bc:	4b03      	ldr	r3, [pc, #12]	; (80033cc <HAL_GetTick+0x14>)
 80033be:	681b      	ldr	r3, [r3, #0]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	2000066c 	.word	0x2000066c

080033d0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80033d4:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <HAL_GetTickPrio+0x14>)
 80033d6:	681b      	ldr	r3, [r3, #0]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	2000000c 	.word	0x2000000c

080033e8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80033ec:	f7ff ff56 	bl	800329c <LL_DBGMCU_EnableDBGSleepMode>
}
 80033f0:	bf00      	nop
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80033f8:	f7ff ff60 	bl	80032bc <LL_DBGMCU_EnableDBGStopMode>
}
 80033fc:	bf00      	nop
 80033fe:	bd80      	pop	{r7, pc}

08003400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f003 0307 	and.w	r3, r3, #7
 800340e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003410:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <__NVIC_SetPriorityGrouping+0x44>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800341c:	4013      	ands	r3, r2
 800341e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003428:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800342c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003432:	4a04      	ldr	r2, [pc, #16]	; (8003444 <__NVIC_SetPriorityGrouping+0x44>)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	60d3      	str	r3, [r2, #12]
}
 8003438:	bf00      	nop
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	e000ed00 	.word	0xe000ed00

08003448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800344c:	4b04      	ldr	r3, [pc, #16]	; (8003460 <__NVIC_GetPriorityGrouping+0x18>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	0a1b      	lsrs	r3, r3, #8
 8003452:	f003 0307 	and.w	r3, r3, #7
}
 8003456:	4618      	mov	r0, r3
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	e000ed00 	.word	0xe000ed00

08003464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800346e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003472:	2b00      	cmp	r3, #0
 8003474:	db0b      	blt.n	800348e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003476:	79fb      	ldrb	r3, [r7, #7]
 8003478:	f003 021f 	and.w	r2, r3, #31
 800347c:	4907      	ldr	r1, [pc, #28]	; (800349c <__NVIC_EnableIRQ+0x38>)
 800347e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003482:	095b      	lsrs	r3, r3, #5
 8003484:	2001      	movs	r0, #1
 8003486:	fa00 f202 	lsl.w	r2, r0, r2
 800348a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	e000e100 	.word	0xe000e100

080034a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	db12      	blt.n	80034d8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034b2:	79fb      	ldrb	r3, [r7, #7]
 80034b4:	f003 021f 	and.w	r2, r3, #31
 80034b8:	490a      	ldr	r1, [pc, #40]	; (80034e4 <__NVIC_DisableIRQ+0x44>)
 80034ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034be:	095b      	lsrs	r3, r3, #5
 80034c0:	2001      	movs	r0, #1
 80034c2:	fa00 f202 	lsl.w	r2, r0, r2
 80034c6:	3320      	adds	r3, #32
 80034c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80034cc:	f3bf 8f4f 	dsb	sy
}
 80034d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80034d2:	f3bf 8f6f 	isb	sy
}
 80034d6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	e000e100 	.word	0xe000e100

080034e8 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	4603      	mov	r3, r0
 80034f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	db0c      	blt.n	8003514 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	f003 021f 	and.w	r2, r3, #31
 8003500:	4907      	ldr	r1, [pc, #28]	; (8003520 <__NVIC_SetPendingIRQ+0x38>)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	095b      	lsrs	r3, r3, #5
 8003508:	2001      	movs	r0, #1
 800350a:	fa00 f202 	lsl.w	r2, r0, r2
 800350e:	3340      	adds	r3, #64	; 0x40
 8003510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	e000e100 	.word	0xe000e100

08003524 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	4603      	mov	r3, r0
 800352c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800352e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003532:	2b00      	cmp	r3, #0
 8003534:	db0c      	blt.n	8003550 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003536:	79fb      	ldrb	r3, [r7, #7]
 8003538:	f003 021f 	and.w	r2, r3, #31
 800353c:	4907      	ldr	r1, [pc, #28]	; (800355c <__NVIC_ClearPendingIRQ+0x38>)
 800353e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	2001      	movs	r0, #1
 8003546:	fa00 f202 	lsl.w	r2, r0, r2
 800354a:	3360      	adds	r3, #96	; 0x60
 800354c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	e000e100 	.word	0xe000e100

08003560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	6039      	str	r1, [r7, #0]
 800356a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800356c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003570:	2b00      	cmp	r3, #0
 8003572:	db0a      	blt.n	800358a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	b2da      	uxtb	r2, r3
 8003578:	490c      	ldr	r1, [pc, #48]	; (80035ac <__NVIC_SetPriority+0x4c>)
 800357a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357e:	0112      	lsls	r2, r2, #4
 8003580:	b2d2      	uxtb	r2, r2
 8003582:	440b      	add	r3, r1
 8003584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003588:	e00a      	b.n	80035a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	b2da      	uxtb	r2, r3
 800358e:	4908      	ldr	r1, [pc, #32]	; (80035b0 <__NVIC_SetPriority+0x50>)
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	f003 030f 	and.w	r3, r3, #15
 8003596:	3b04      	subs	r3, #4
 8003598:	0112      	lsls	r2, r2, #4
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	440b      	add	r3, r1
 800359e:	761a      	strb	r2, [r3, #24]
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	e000e100 	.word	0xe000e100
 80035b0:	e000ed00 	.word	0xe000ed00

080035b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b089      	sub	sp, #36	; 0x24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f1c3 0307 	rsb	r3, r3, #7
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	bf28      	it	cs
 80035d2:	2304      	movcs	r3, #4
 80035d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	3304      	adds	r3, #4
 80035da:	2b06      	cmp	r3, #6
 80035dc:	d902      	bls.n	80035e4 <NVIC_EncodePriority+0x30>
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	3b03      	subs	r3, #3
 80035e2:	e000      	b.n	80035e6 <NVIC_EncodePriority+0x32>
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e8:	f04f 32ff 	mov.w	r2, #4294967295
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43da      	mvns	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	401a      	ands	r2, r3
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	fa01 f303 	lsl.w	r3, r1, r3
 8003606:	43d9      	mvns	r1, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800360c:	4313      	orrs	r3, r2
         );
}
 800360e:	4618      	mov	r0, r3
 8003610:	3724      	adds	r7, #36	; 0x24
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
	...

0800361c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3b01      	subs	r3, #1
 8003628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800362c:	d301      	bcc.n	8003632 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800362e:	2301      	movs	r3, #1
 8003630:	e00f      	b.n	8003652 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003632:	4a0a      	ldr	r2, [pc, #40]	; (800365c <SysTick_Config+0x40>)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3b01      	subs	r3, #1
 8003638:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800363a:	210f      	movs	r1, #15
 800363c:	f04f 30ff 	mov.w	r0, #4294967295
 8003640:	f7ff ff8e 	bl	8003560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003644:	4b05      	ldr	r3, [pc, #20]	; (800365c <SysTick_Config+0x40>)
 8003646:	2200      	movs	r2, #0
 8003648:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800364a:	4b04      	ldr	r3, [pc, #16]	; (800365c <SysTick_Config+0x40>)
 800364c:	2207      	movs	r2, #7
 800364e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	e000e010 	.word	0xe000e010

08003660 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff fec9 	bl	8003400 <__NVIC_SetPriorityGrouping>
}
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}

08003676 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003676:	b580      	push	{r7, lr}
 8003678:	b086      	sub	sp, #24
 800367a:	af00      	add	r7, sp, #0
 800367c:	4603      	mov	r3, r0
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	607a      	str	r2, [r7, #4]
 8003682:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003684:	f7ff fee0 	bl	8003448 <__NVIC_GetPriorityGrouping>
 8003688:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	68b9      	ldr	r1, [r7, #8]
 800368e:	6978      	ldr	r0, [r7, #20]
 8003690:	f7ff ff90 	bl	80035b4 <NVIC_EncodePriority>
 8003694:	4602      	mov	r2, r0
 8003696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800369a:	4611      	mov	r1, r2
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff ff5f 	bl	8003560 <__NVIC_SetPriority>
}
 80036a2:	bf00      	nop
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	4603      	mov	r3, r0
 80036b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff fed3 	bl	8003464 <__NVIC_EnableIRQ>
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	4603      	mov	r3, r0
 80036ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80036d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff fee3 	bl	80034a0 <__NVIC_DisableIRQ>
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}

080036e2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036e2:	b580      	push	{r7, lr}
 80036e4:	b082      	sub	sp, #8
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff ff96 	bl	800361c <SysTick_Config>
 80036f0:	4603      	mov	r3, r0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	4603      	mov	r3, r0
 8003702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff feed 	bl	80034e8 <__NVIC_SetPendingIRQ>
}
 800370e:	bf00      	nop
 8003710:	3708      	adds	r7, #8
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	4603      	mov	r3, r0
 800371e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff fefd 	bl	8003524 <__NVIC_ClearPendingIRQ>
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e08e      	b.n	8003864 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	4b47      	ldr	r3, [pc, #284]	; (800386c <HAL_DMA_Init+0x138>)
 800374e:	429a      	cmp	r2, r3
 8003750:	d80f      	bhi.n	8003772 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	4b45      	ldr	r3, [pc, #276]	; (8003870 <HAL_DMA_Init+0x13c>)
 800375a:	4413      	add	r3, r2
 800375c:	4a45      	ldr	r2, [pc, #276]	; (8003874 <HAL_DMA_Init+0x140>)
 800375e:	fba2 2303 	umull	r2, r3, r2, r3
 8003762:	091b      	lsrs	r3, r3, #4
 8003764:	009a      	lsls	r2, r3, #2
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a42      	ldr	r2, [pc, #264]	; (8003878 <HAL_DMA_Init+0x144>)
 800376e:	641a      	str	r2, [r3, #64]	; 0x40
 8003770:	e00e      	b.n	8003790 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	461a      	mov	r2, r3
 8003778:	4b40      	ldr	r3, [pc, #256]	; (800387c <HAL_DMA_Init+0x148>)
 800377a:	4413      	add	r3, r2
 800377c:	4a3d      	ldr	r2, [pc, #244]	; (8003874 <HAL_DMA_Init+0x140>)
 800377e:	fba2 2303 	umull	r2, r3, r2, r3
 8003782:	091b      	lsrs	r3, r3, #4
 8003784:	009a      	lsls	r2, r3, #2
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a3c      	ldr	r2, [pc, #240]	; (8003880 <HAL_DMA_Init+0x14c>)
 800378e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2202      	movs	r2, #2
 8003794:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80037a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80037b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fa74 	bl	8003cd0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037f0:	d102      	bne.n	80037f8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003800:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003804:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800380e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d010      	beq.n	800383a <HAL_DMA_Init+0x106>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b04      	cmp	r3, #4
 800381e:	d80c      	bhi.n	800383a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 fa93 	bl	8003d4c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003836:	605a      	str	r2, [r3, #4]
 8003838:	e008      	b.n	800384c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40020407 	.word	0x40020407
 8003870:	bffdfff8 	.word	0xbffdfff8
 8003874:	cccccccd 	.word	0xcccccccd
 8003878:	40020000 	.word	0x40020000
 800387c:	bffdfbf8 	.word	0xbffdfbf8
 8003880:	40020400 	.word	0x40020400

08003884 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
 8003890:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800389c:	2b01      	cmp	r3, #1
 800389e:	d101      	bne.n	80038a4 <HAL_DMA_Start_IT+0x20>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e066      	b.n	8003972 <HAL_DMA_Start_IT+0xee>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d155      	bne.n	8003964 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0201 	bic.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	68b9      	ldr	r1, [r7, #8]
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f9b9 	bl	8003c54 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d008      	beq.n	80038fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f042 020e 	orr.w	r2, r2, #14
 80038f8:	601a      	str	r2, [r3, #0]
 80038fa:	e00f      	b.n	800391c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0204 	bic.w	r2, r2, #4
 800390a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 020a 	orr.w	r2, r2, #10
 800391a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d007      	beq.n	800393a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003934:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003938:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003950:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f042 0201 	orr.w	r2, r2, #1
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	e005      	b.n	8003970 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800396c:	2302      	movs	r3, #2
 800396e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003970:	7dfb      	ldrb	r3, [r7, #23]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e04f      	b.n	8003a2c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d008      	beq.n	80039aa <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2204      	movs	r2, #4
 800399c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e040      	b.n	8003a2c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 020e 	bic.w	r2, r2, #14
 80039b8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 0201 	bic.w	r2, r2, #1
 80039d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	f003 021c 	and.w	r2, r3, #28
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	2101      	movs	r1, #1
 80039e8:	fa01 f202 	lsl.w	r2, r1, r2
 80039ec:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039f6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00c      	beq.n	8003a1a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a0e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a18:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d005      	beq.n	8003a5c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2204      	movs	r2, #4
 8003a54:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	73fb      	strb	r3, [r7, #15]
 8003a5a:	e047      	b.n	8003aec <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 020e 	bic.w	r2, r2, #14
 8003a6a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0201 	bic.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a90:	f003 021c 	and.w	r2, r3, #28
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	2101      	movs	r1, #1
 8003a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8003a9e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003aa8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00c      	beq.n	8003acc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003abc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ac0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003aca:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	4798      	blx	r3
    }
  }
  return status;
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b084      	sub	sp, #16
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b12:	f003 031c 	and.w	r3, r3, #28
 8003b16:	2204      	movs	r2, #4
 8003b18:	409a      	lsls	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d026      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x7a>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d021      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d107      	bne.n	8003b4a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0204 	bic.w	r2, r2, #4
 8003b48:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	f003 021c 	and.w	r2, r3, #28
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	2104      	movs	r1, #4
 8003b58:	fa01 f202 	lsl.w	r2, r1, r2
 8003b5c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d071      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003b6e:	e06c      	b.n	8003c4a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b74:	f003 031c 	and.w	r3, r3, #28
 8003b78:	2202      	movs	r2, #2
 8003b7a:	409a      	lsls	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d02e      	beq.n	8003be2 <HAL_DMA_IRQHandler+0xec>
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d029      	beq.n	8003be2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0320 	and.w	r3, r3, #32
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10b      	bne.n	8003bb4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f022 020a 	bic.w	r2, r2, #10
 8003baa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb8:	f003 021c 	and.w	r2, r3, #28
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	2102      	movs	r1, #2
 8003bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8003bc6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d038      	beq.n	8003c4a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003be0:	e033      	b.n	8003c4a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be6:	f003 031c 	and.w	r3, r3, #28
 8003bea:	2208      	movs	r2, #8
 8003bec:	409a      	lsls	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d02a      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x156>
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d025      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f022 020e 	bic.w	r2, r2, #14
 8003c0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c14:	f003 021c 	and.w	r2, r3, #28
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c22:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d004      	beq.n	8003c4c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003c4a:	bf00      	nop
 8003c4c:	bf00      	nop
}
 8003c4e:	3710      	adds	r7, #16
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c6a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d004      	beq.n	8003c7e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c7c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c82:	f003 021c 	and.w	r2, r3, #28
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003c90:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	2b10      	cmp	r3, #16
 8003ca0:	d108      	bne.n	8003cb4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68ba      	ldr	r2, [r7, #8]
 8003cb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003cb2:	e007      	b.n	8003cc4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	60da      	str	r2, [r3, #12]
}
 8003cc4:	bf00      	nop
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4b17      	ldr	r3, [pc, #92]	; (8003d3c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d80a      	bhi.n	8003cfa <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce8:	089b      	lsrs	r3, r3, #2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003cf0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6493      	str	r3, [r2, #72]	; 0x48
 8003cf8:	e007      	b.n	8003d0a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfe:	089b      	lsrs	r3, r3, #2
 8003d00:	009a      	lsls	r2, r3, #2
 8003d02:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003d04:	4413      	add	r3, r2
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	3b08      	subs	r3, #8
 8003d12:	4a0c      	ldr	r2, [pc, #48]	; (8003d44 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003d14:	fba2 2303 	umull	r2, r3, r2, r3
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a0a      	ldr	r2, [pc, #40]	; (8003d48 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003d20:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f003 031f 	and.w	r3, r3, #31
 8003d28:	2201      	movs	r2, #1
 8003d2a:	409a      	lsls	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003d30:	bf00      	nop
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	40020407 	.word	0x40020407
 8003d40:	4002081c 	.word	0x4002081c
 8003d44:	cccccccd 	.word	0xcccccccd
 8003d48:	40020880 	.word	0x40020880

08003d4c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b085      	sub	sp, #20
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d5c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003d62:	4413      	add	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	461a      	mov	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a09      	ldr	r2, [pc, #36]	; (8003d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003d70:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	3b01      	subs	r3, #1
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	409a      	lsls	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003d82:	bf00      	nop
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	1000823f 	.word	0x1000823f
 8003d94:	40020940 	.word	0x40020940

08003d98 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003da6:	e14c      	b.n	8004042 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	2101      	movs	r1, #1
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	fa01 f303 	lsl.w	r3, r1, r3
 8003db4:	4013      	ands	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 813e 	beq.w	800403c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 0303 	and.w	r3, r3, #3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d005      	beq.n	8003dd8 <HAL_GPIO_Init+0x40>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d130      	bne.n	8003e3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	2203      	movs	r2, #3
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	43db      	mvns	r3, r3
 8003dea:	693a      	ldr	r2, [r7, #16]
 8003dec:	4013      	ands	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	693a      	ldr	r2, [r7, #16]
 8003e06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e0e:	2201      	movs	r2, #1
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	fa02 f303 	lsl.w	r3, r2, r3
 8003e16:	43db      	mvns	r3, r3
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	091b      	lsrs	r3, r3, #4
 8003e24:	f003 0201 	and.w	r2, r3, #1
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	2b03      	cmp	r3, #3
 8003e44:	d017      	beq.n	8003e76 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	2203      	movs	r2, #3
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	43db      	mvns	r3, r3
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f003 0303 	and.w	r3, r3, #3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d123      	bne.n	8003eca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	08da      	lsrs	r2, r3, #3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3208      	adds	r2, #8
 8003e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	f003 0307 	and.w	r3, r3, #7
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	220f      	movs	r2, #15
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43db      	mvns	r3, r3
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	691a      	ldr	r2, [r3, #16]
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	08da      	lsrs	r2, r3, #3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3208      	adds	r2, #8
 8003ec4:	6939      	ldr	r1, [r7, #16]
 8003ec6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	2203      	movs	r2, #3
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43db      	mvns	r3, r3
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f003 0203 	and.w	r2, r3, #3
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 8098 	beq.w	800403c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003f0c:	4a54      	ldr	r2, [pc, #336]	; (8004060 <HAL_GPIO_Init+0x2c8>)
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	089b      	lsrs	r3, r3, #2
 8003f12:	3302      	adds	r3, #2
 8003f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f003 0303 	and.w	r3, r3, #3
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	220f      	movs	r2, #15
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003f36:	d019      	beq.n	8003f6c <HAL_GPIO_Init+0x1d4>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a4a      	ldr	r2, [pc, #296]	; (8004064 <HAL_GPIO_Init+0x2cc>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d013      	beq.n	8003f68 <HAL_GPIO_Init+0x1d0>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a49      	ldr	r2, [pc, #292]	; (8004068 <HAL_GPIO_Init+0x2d0>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d00d      	beq.n	8003f64 <HAL_GPIO_Init+0x1cc>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a48      	ldr	r2, [pc, #288]	; (800406c <HAL_GPIO_Init+0x2d4>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d007      	beq.n	8003f60 <HAL_GPIO_Init+0x1c8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a47      	ldr	r2, [pc, #284]	; (8004070 <HAL_GPIO_Init+0x2d8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d101      	bne.n	8003f5c <HAL_GPIO_Init+0x1c4>
 8003f58:	2304      	movs	r3, #4
 8003f5a:	e008      	b.n	8003f6e <HAL_GPIO_Init+0x1d6>
 8003f5c:	2307      	movs	r3, #7
 8003f5e:	e006      	b.n	8003f6e <HAL_GPIO_Init+0x1d6>
 8003f60:	2303      	movs	r3, #3
 8003f62:	e004      	b.n	8003f6e <HAL_GPIO_Init+0x1d6>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e002      	b.n	8003f6e <HAL_GPIO_Init+0x1d6>
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <HAL_GPIO_Init+0x1d6>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	f002 0203 	and.w	r2, r2, #3
 8003f74:	0092      	lsls	r2, r2, #2
 8003f76:	4093      	lsls	r3, r2
 8003f78:	693a      	ldr	r2, [r7, #16]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f7e:	4938      	ldr	r1, [pc, #224]	; (8004060 <HAL_GPIO_Init+0x2c8>)
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	089b      	lsrs	r3, r3, #2
 8003f84:	3302      	adds	r3, #2
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003f8c:	4b39      	ldr	r3, [pc, #228]	; (8004074 <HAL_GPIO_Init+0x2dc>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	43db      	mvns	r3, r3
 8003f96:	693a      	ldr	r2, [r7, #16]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003fb0:	4a30      	ldr	r2, [pc, #192]	; (8004074 <HAL_GPIO_Init+0x2dc>)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003fb6:	4b2f      	ldr	r3, [pc, #188]	; (8004074 <HAL_GPIO_Init+0x2dc>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003fda:	4a26      	ldr	r2, [pc, #152]	; (8004074 <HAL_GPIO_Init+0x2dc>)
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003fe0:	4b24      	ldr	r3, [pc, #144]	; (8004074 <HAL_GPIO_Init+0x2dc>)
 8003fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	43db      	mvns	r3, r3
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	4013      	ands	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004006:	4a1b      	ldr	r2, [pc, #108]	; (8004074 <HAL_GPIO_Init+0x2dc>)
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 800400e:	4b19      	ldr	r3, [pc, #100]	; (8004074 <HAL_GPIO_Init+0x2dc>)
 8004010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	43db      	mvns	r3, r3
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	4013      	ands	r3, r2
 800401e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004034:	4a0f      	ldr	r2, [pc, #60]	; (8004074 <HAL_GPIO_Init+0x2dc>)
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	3301      	adds	r3, #1
 8004040:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	fa22 f303 	lsr.w	r3, r2, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	f47f aeab 	bne.w	8003da8 <HAL_GPIO_Init+0x10>
  }
}
 8004052:	bf00      	nop
 8004054:	bf00      	nop
 8004056:	371c      	adds	r7, #28
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	40010000 	.word	0x40010000
 8004064:	48000400 	.word	0x48000400
 8004068:	48000800 	.word	0x48000800
 800406c:	48000c00 	.word	0x48000c00
 8004070:	48001000 	.word	0x48001000
 8004074:	58000800 	.word	0x58000800

08004078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	460b      	mov	r3, r1
 8004082:	807b      	strh	r3, [r7, #2]
 8004084:	4613      	mov	r3, r2
 8004086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004088:	787b      	ldrb	r3, [r7, #1]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800408e:	887a      	ldrh	r2, [r7, #2]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004094:	e002      	b.n	800409c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004096:	887a      	ldrh	r2, [r7, #2]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	4603      	mov	r3, r0
 80040b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80040b2:	4b08      	ldr	r3, [pc, #32]	; (80040d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	88fb      	ldrh	r3, [r7, #6]
 80040b8:	4013      	ands	r3, r2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d006      	beq.n	80040cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040be:	4a05      	ldr	r2, [pc, #20]	; (80040d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80040c0:	88fb      	ldrh	r3, [r7, #6]
 80040c2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040c4:	88fb      	ldrh	r3, [r7, #6]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fd fad5 	bl	8001676 <HAL_GPIO_EXTI_Callback>
  }
}
 80040cc:	bf00      	nop
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	58000800 	.word	0x58000800

080040d8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80040de:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <HAL_HSEM_IRQHandler+0x30>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80040e4:	4b08      	ldr	r3, [pc, #32]	; (8004108 <HAL_HSEM_IRQHandler+0x30>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	43db      	mvns	r3, r3
 80040ec:	4906      	ldr	r1, [pc, #24]	; (8004108 <HAL_HSEM_IRQHandler+0x30>)
 80040ee:	4013      	ands	r3, r2
 80040f0:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80040f2:	4a05      	ldr	r2, [pc, #20]	; (8004108 <HAL_HSEM_IRQHandler+0x30>)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f807 	bl	800410c <HAL_HSEM_FreeCallback>
}
 80040fe:	bf00      	nop
 8004100:	3708      	adds	r7, #8
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	58001500 	.word	0x58001500

0800410c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d01e      	beq.n	8004170 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8004132:	4b13      	ldr	r3, [pc, #76]	; (8004180 <HAL_IPCC_Init+0x60>)
 8004134:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d102      	bne.n	8004148 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fe fd96 	bl	8002c74 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004148:	68b8      	ldr	r0, [r7, #8]
 800414a:	f000 f85b 	bl	8004204 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f82c 	bl	80041b8 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800416e:	e001      	b.n	8004174 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004174:	7bfb      	ldrb	r3, [r7, #15]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	58000c00 	.word	0x58000c00

08004184 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	4613      	mov	r3, r2
 8004190:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8004192:	bf00      	nop
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800419e:	b480      	push	{r7}
 80041a0:	b085      	sub	sp, #20
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	4613      	mov	r3, r2
 80041aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80041ac:	bf00      	nop
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80041c0:	2300      	movs	r3, #0
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	e00f      	b.n	80041e6 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	4a0b      	ldr	r2, [pc, #44]	; (80041fc <IPCC_SetDefaultCallbacks+0x44>)
 80041d0:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	3306      	adds	r3, #6
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	4a08      	ldr	r2, [pc, #32]	; (8004200 <IPCC_SetDefaultCallbacks+0x48>)
 80041de:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	3301      	adds	r3, #1
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b05      	cmp	r3, #5
 80041ea:	d9ec      	bls.n	80041c6 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80041ec:	bf00      	nop
 80041ee:	bf00      	nop
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	08004185 	.word	0x08004185
 8004200:	0800419f 	.word	0x0800419f

08004204 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8004218:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	223f      	movs	r2, #63	; 0x3f
 800421e:	609a      	str	r2, [r3, #8]
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e0c0      	b.n	80043c0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d106      	bne.n	8004258 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f7fe fe4c 	bl	8002ef0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2203      	movs	r2, #3
 800425c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4618      	mov	r0, r3
 8004266:	f004 fb05 	bl	8008874 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800426a:	2300      	movs	r3, #0
 800426c:	73fb      	strb	r3, [r7, #15]
 800426e:	e03e      	b.n	80042ee <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004270:	7bfa      	ldrb	r2, [r7, #15]
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	4613      	mov	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	440b      	add	r3, r1
 800427e:	3311      	adds	r3, #17
 8004280:	2201      	movs	r2, #1
 8004282:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004284:	7bfa      	ldrb	r2, [r7, #15]
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	440b      	add	r3, r1
 8004292:	3310      	adds	r3, #16
 8004294:	7bfa      	ldrb	r2, [r7, #15]
 8004296:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004298:	7bfa      	ldrb	r2, [r7, #15]
 800429a:	6879      	ldr	r1, [r7, #4]
 800429c:	4613      	mov	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	440b      	add	r3, r1
 80042a6:	3313      	adds	r3, #19
 80042a8:	2200      	movs	r2, #0
 80042aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80042ac:	7bfa      	ldrb	r2, [r7, #15]
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	4613      	mov	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	440b      	add	r3, r1
 80042ba:	3320      	adds	r3, #32
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80042c0:	7bfa      	ldrb	r2, [r7, #15]
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	4613      	mov	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	440b      	add	r3, r1
 80042ce:	3324      	adds	r3, #36	; 0x24
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	4613      	mov	r3, r2
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4413      	add	r3, r2
 80042e0:	00db      	lsls	r3, r3, #3
 80042e2:	440b      	add	r3, r1
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
 80042ea:	3301      	adds	r3, #1
 80042ec:	73fb      	strb	r3, [r7, #15]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	791b      	ldrb	r3, [r3, #4]
 80042f2:	7bfa      	ldrb	r2, [r7, #15]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d3bb      	bcc.n	8004270 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042f8:	2300      	movs	r3, #0
 80042fa:	73fb      	strb	r3, [r7, #15]
 80042fc:	e044      	b.n	8004388 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80042fe:	7bfa      	ldrb	r2, [r7, #15]
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	00db      	lsls	r3, r3, #3
 800430a:	440b      	add	r3, r1
 800430c:	f203 1351 	addw	r3, r3, #337	; 0x151
 8004310:	2200      	movs	r2, #0
 8004312:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004314:	7bfa      	ldrb	r2, [r7, #15]
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	4613      	mov	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	440b      	add	r3, r1
 8004322:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004326:	7bfa      	ldrb	r2, [r7, #15]
 8004328:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800432a:	7bfa      	ldrb	r2, [r7, #15]
 800432c:	6879      	ldr	r1, [r7, #4]
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	440b      	add	r3, r1
 8004338:	f203 1353 	addw	r3, r3, #339	; 0x153
 800433c:	2200      	movs	r2, #0
 800433e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004340:	7bfa      	ldrb	r2, [r7, #15]
 8004342:	6879      	ldr	r1, [r7, #4]
 8004344:	4613      	mov	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	440b      	add	r3, r1
 800434e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004356:	7bfa      	ldrb	r2, [r7, #15]
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	4613      	mov	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	440b      	add	r3, r1
 8004364:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800436c:	7bfa      	ldrb	r2, [r7, #15]
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	4613      	mov	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	440b      	add	r3, r1
 800437a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004382:	7bfb      	ldrb	r3, [r7, #15]
 8004384:	3301      	adds	r3, #1
 8004386:	73fb      	strb	r3, [r7, #15]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	791b      	ldrb	r3, [r3, #4]
 800438c:	7bfa      	ldrb	r2, [r7, #15]
 800438e:	429a      	cmp	r2, r3
 8004390:	d3b5      	bcc.n	80042fe <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	3304      	adds	r3, #4
 800439a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800439e:	f004 fa84 	bl	80088aa <USB_DevInit>

  hpcd->USB_Address = 0U;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	7a9b      	ldrb	r3, [r3, #10]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d102      	bne.n	80043be <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 f805 	bl	80043c8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	f043 0301 	orr.w	r3, r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004400:	b29b      	uxth	r3, r3
 8004402:	f043 0302 	orr.w	r3, r3, #2
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004420:	4b05      	ldr	r3, [pc, #20]	; (8004438 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a04      	ldr	r2, [pc, #16]	; (8004438 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800442a:	6013      	str	r3, [r2, #0]
}
 800442c:	bf00      	nop
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	58000400 	.word	0x58000400

0800443c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004440:	4b04      	ldr	r3, [pc, #16]	; (8004454 <HAL_PWREx_GetVoltageRange+0x18>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004448:	4618      	mov	r0, r3
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	58000400 	.word	0x58000400

08004458 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800445c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004466:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800446a:	d101      	bne.n	8004470 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800446c:	2301      	movs	r3, #1
 800446e:	e000      	b.n	8004472 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <LL_RCC_HSE_Enable>:
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800448a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800448e:	6013      	str	r3, [r2, #0]
}
 8004490:	bf00      	nop
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <LL_RCC_HSE_Disable>:
{
 800449a:	b480      	push	{r7}
 800449c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800449e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ac:	6013      	str	r3, [r2, #0]
}
 80044ae:	bf00      	nop
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <LL_RCC_HSE_IsReady>:
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80044bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044ca:	d101      	bne.n	80044d0 <LL_RCC_HSE_IsReady+0x18>
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <LL_RCC_HSE_IsReady+0x1a>
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <LL_RCC_HSI_Enable>:
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80044e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ee:	6013      	str	r3, [r2, #0]
}
 80044f0:	bf00      	nop
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <LL_RCC_HSI_Disable>:
{
 80044fa:	b480      	push	{r7}
 80044fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80044fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800450c:	6013      	str	r3, [r2, #0]
}
 800450e:	bf00      	nop
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <LL_RCC_HSI_IsReady>:
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800451c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800452a:	d101      	bne.n	8004530 <LL_RCC_HSI_IsReady+0x18>
 800452c:	2301      	movs	r3, #1
 800452e:	e000      	b.n	8004532 <LL_RCC_HSI_IsReady+0x1a>
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <LL_RCC_HSI_SetCalibTrimming>:
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	061b      	lsls	r3, r3, #24
 8004552:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004556:	4313      	orrs	r3, r2
 8004558:	604b      	str	r3, [r1, #4]
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <LL_RCC_HSI48_Enable>:
{
 8004566:	b480      	push	{r7}
 8004568:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800456a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800456e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004572:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004576:	f043 0301 	orr.w	r3, r3, #1
 800457a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800457e:	bf00      	nop
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <LL_RCC_HSI48_Disable>:
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800458c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004590:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004594:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80045a0:	bf00      	nop
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <LL_RCC_HSI48_IsReady>:
{
 80045aa:	b480      	push	{r7}
 80045ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80045ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d101      	bne.n	80045c2 <LL_RCC_HSI48_IsReady+0x18>
 80045be:	2301      	movs	r3, #1
 80045c0:	e000      	b.n	80045c4 <LL_RCC_HSI48_IsReady+0x1a>
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <LL_RCC_LSE_Enable>:
{
 80045ce:	b480      	push	{r7}
 80045d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80045d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045de:	f043 0301 	orr.w	r3, r3, #1
 80045e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80045e6:	bf00      	nop
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <LL_RCC_LSE_Disable>:
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80045f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004600:	f023 0301 	bic.w	r3, r3, #1
 8004604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004608:	bf00      	nop
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <LL_RCC_LSE_EnableBypass>:
{
 8004612:	b480      	push	{r7}
 8004614:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800461a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004622:	f043 0304 	orr.w	r3, r3, #4
 8004626:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800462a:	bf00      	nop
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <LL_RCC_LSE_DisableBypass>:
{
 8004634:	b480      	push	{r7}
 8004636:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800463c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004640:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004644:	f023 0304 	bic.w	r3, r3, #4
 8004648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800464c:	bf00      	nop
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <LL_RCC_LSE_IsReady>:
{
 8004656:	b480      	push	{r7}
 8004658:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800465a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800465e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b02      	cmp	r3, #2
 8004668:	d101      	bne.n	800466e <LL_RCC_LSE_IsReady+0x18>
 800466a:	2301      	movs	r3, #1
 800466c:	e000      	b.n	8004670 <LL_RCC_LSE_IsReady+0x1a>
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <LL_RCC_LSI1_Enable>:
{
 800467a:	b480      	push	{r7}
 800467c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800467e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004686:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800468a:	f043 0301 	orr.w	r3, r3, #1
 800468e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004692:	bf00      	nop
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <LL_RCC_LSI1_Disable>:
{
 800469c:	b480      	push	{r7}
 800469e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80046a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80046b4:	bf00      	nop
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <LL_RCC_LSI1_IsReady>:
{
 80046be:	b480      	push	{r7}
 80046c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80046c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d101      	bne.n	80046d6 <LL_RCC_LSI1_IsReady+0x18>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <LL_RCC_LSI1_IsReady+0x1a>
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <LL_RCC_LSI2_Enable>:
{
 80046e2:	b480      	push	{r7}
 80046e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80046e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046f2:	f043 0304 	orr.w	r3, r3, #4
 80046f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80046fa:	bf00      	nop
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <LL_RCC_LSI2_Disable>:
{
 8004704:	b480      	push	{r7}
 8004706:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004708:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800470c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004710:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004714:	f023 0304 	bic.w	r3, r3, #4
 8004718:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800471c:	bf00      	nop
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <LL_RCC_LSI2_IsReady>:
{
 8004726:	b480      	push	{r7}
 8004728:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800472a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800472e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b08      	cmp	r3, #8
 8004738:	d101      	bne.n	800473e <LL_RCC_LSI2_IsReady+0x18>
 800473a:	2301      	movs	r3, #1
 800473c:	e000      	b.n	8004740 <LL_RCC_LSI2_IsReady+0x1a>
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <LL_RCC_LSI2_SetTrimming>:
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800475a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	021b      	lsls	r3, r3, #8
 8004762:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004766:	4313      	orrs	r3, r2
 8004768:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <LL_RCC_MSI_Enable>:
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800477c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004786:	f043 0301 	orr.w	r3, r3, #1
 800478a:	6013      	str	r3, [r2, #0]
}
 800478c:	bf00      	nop
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <LL_RCC_MSI_Disable>:
{
 8004796:	b480      	push	{r7}
 8004798:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800479a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047a4:	f023 0301 	bic.w	r3, r3, #1
 80047a8:	6013      	str	r3, [r2, #0]
}
 80047aa:	bf00      	nop
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <LL_RCC_MSI_IsReady>:
{
 80047b4:	b480      	push	{r7}
 80047b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80047b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d101      	bne.n	80047ca <LL_RCC_MSI_IsReady+0x16>
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <LL_RCC_MSI_IsReady+0x18>
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <LL_RCC_MSI_SetRange>:
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80047de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	600b      	str	r3, [r1, #0]
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <LL_RCC_MSI_GetRange>:
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800480e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2bb0      	cmp	r3, #176	; 0xb0
 8004814:	d901      	bls.n	800481a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004816:	23b0      	movs	r3, #176	; 0xb0
 8004818:	607b      	str	r3, [r7, #4]
  return msiRange;
 800481a:	687b      	ldr	r3, [r7, #4]
}
 800481c:	4618      	mov	r0, r3
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	021b      	lsls	r3, r3, #8
 800483e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004842:	4313      	orrs	r3, r2
 8004844:	604b      	str	r3, [r1, #4]
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <LL_RCC_SetSysClkSource>:
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800485a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f023 0203 	bic.w	r2, r3, #3
 8004864:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4313      	orrs	r3, r2
 800486c:	608b      	str	r3, [r1, #8]
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <LL_RCC_GetSysClkSource>:
{
 800487a:	b480      	push	{r7}
 800487c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800487e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 030c 	and.w	r3, r3, #12
}
 8004888:	4618      	mov	r0, r3
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <LL_RCC_SetAHBPrescaler>:
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800489a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	608b      	str	r3, [r1, #8]
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <LL_C2_RCC_SetAHBPrescaler>:
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80048c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80048ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80048da:	bf00      	nop
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <LL_RCC_SetAHB4Prescaler>:
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80048ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80048f6:	f023 020f 	bic.w	r2, r3, #15
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	091b      	lsrs	r3, r3, #4
 80048fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004902:	4313      	orrs	r3, r2
 8004904:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <LL_RCC_SetAPB1Prescaler>:
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800491c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004926:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4313      	orrs	r3, r2
 800492e:	608b      	str	r3, [r1, #8]
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <LL_RCC_SetAPB2Prescaler>:
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004944:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800494e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4313      	orrs	r3, r2
 8004956:	608b      	str	r3, [r1, #8]
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <LL_RCC_GetAHBPrescaler>:
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004972:	4618      	mov	r0, r3
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <LL_RCC_GetAHB4Prescaler>:
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004984:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800498e:	4618      	mov	r0, r3
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <LL_RCC_GetAPB1Prescaler>:
{
 8004998:	b480      	push	{r7}
 800499a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800499c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <LL_RCC_GetAPB2Prescaler>:
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80049b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80049be:	4618      	mov	r0, r3
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80049cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049da:	6013      	str	r3, [r2, #0]
}
 80049dc:	bf00      	nop
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80049e6:	b480      	push	{r7}
 80049e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80049ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049f8:	6013      	str	r3, [r2, #0]
}
 80049fa:	bf00      	nop
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004a04:	b480      	push	{r7}
 8004a06:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a16:	d101      	bne.n	8004a1c <LL_RCC_PLL_IsReady+0x18>
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e000      	b.n	8004a1e <LL_RCC_PLL_IsReady+0x1a>
 8004a1c:	2300      	movs	r3, #0
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004a2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	0a1b      	lsrs	r3, r3, #8
 8004a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004a42:	b480      	push	{r7}
 8004a44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004a72:	b480      	push	{r7}
 8004a74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004a76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f003 0303 	and.w	r3, r3, #3
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004a8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a9c:	d101      	bne.n	8004aa2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ac2:	d101      	bne.n	8004ac8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e000      	b.n	8004aca <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004adc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae8:	d101      	bne.n	8004aee <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004aee:	2300      	movs	r3, #0
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004afa:	b480      	push	{r7}
 8004afc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b0c:	d101      	bne.n	8004b12 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e000      	b.n	8004b14 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b30:	d101      	bne.n	8004b36 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
	...

08004b44 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b44:	b590      	push	{r4, r7, lr}
 8004b46:	b08d      	sub	sp, #52	; 0x34
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e363      	b.n	800521e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 808d 	beq.w	8004c7e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b64:	f7ff fe89 	bl	800487a <LL_RCC_GetSysClkSource>
 8004b68:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b6a:	f7ff ff82 	bl	8004a72 <LL_RCC_PLL_GetMainSource>
 8004b6e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <HAL_RCC_OscConfig+0x3e>
 8004b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b78:	2b0c      	cmp	r3, #12
 8004b7a:	d147      	bne.n	8004c0c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d144      	bne.n	8004c0c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e347      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004b92:	f7ff fe34 	bl	80047fe <LL_RCC_MSI_GetRange>
 8004b96:	4603      	mov	r3, r0
 8004b98:	429c      	cmp	r4, r3
 8004b9a:	d914      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fd2f 	bl	8005604 <RCC_SetFlashLatencyFromMSIRange>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e336      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff fe0e 	bl	80047d6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff fe32 	bl	8004828 <LL_RCC_MSI_SetCalibTrimming>
 8004bc4:	e013      	b.n	8004bee <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7ff fe03 	bl	80047d6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff fe27 	bl	8004828 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	4618      	mov	r0, r3
 8004be0:	f000 fd10 	bl	8005604 <RCC_SetFlashLatencyFromMSIRange>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e317      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004bee:	f000 fcc9 	bl	8005584 <HAL_RCC_GetHCLKFreq>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	4aa4      	ldr	r2, [pc, #656]	; (8004e88 <HAL_RCC_OscConfig+0x344>)
 8004bf6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004bf8:	4ba4      	ldr	r3, [pc, #656]	; (8004e8c <HAL_RCC_OscConfig+0x348>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7fe fb8d 	bl	800331c <HAL_InitTick>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d039      	beq.n	8004c7c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e308      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d01e      	beq.n	8004c52 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c14:	f7ff fdb0 	bl	8004778 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c18:	f7fe fbce 	bl	80033b8 <HAL_GetTick>
 8004c1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c20:	f7fe fbca 	bl	80033b8 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e2f5      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004c32:	f7ff fdbf 	bl	80047b4 <LL_RCC_MSI_IsReady>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0f1      	beq.n	8004c20 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff fdc8 	bl	80047d6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff fdec 	bl	8004828 <LL_RCC_MSI_SetCalibTrimming>
 8004c50:	e015      	b.n	8004c7e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c52:	f7ff fda0 	bl	8004796 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c56:	f7fe fbaf 	bl	80033b8 <HAL_GetTick>
 8004c5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004c5c:	e008      	b.n	8004c70 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c5e:	f7fe fbab 	bl	80033b8 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e2d6      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004c70:	f7ff fda0 	bl	80047b4 <LL_RCC_MSI_IsReady>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f1      	bne.n	8004c5e <HAL_RCC_OscConfig+0x11a>
 8004c7a:	e000      	b.n	8004c7e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004c7c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d047      	beq.n	8004d1a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c8a:	f7ff fdf6 	bl	800487a <LL_RCC_GetSysClkSource>
 8004c8e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c90:	f7ff feef 	bl	8004a72 <LL_RCC_PLL_GetMainSource>
 8004c94:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	d005      	beq.n	8004ca8 <HAL_RCC_OscConfig+0x164>
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	2b0c      	cmp	r3, #12
 8004ca0:	d108      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	2b03      	cmp	r3, #3
 8004ca6:	d105      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d134      	bne.n	8004d1a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e2b4      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cbc:	d102      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x180>
 8004cbe:	f7ff fbdd 	bl	800447c <LL_RCC_HSE_Enable>
 8004cc2:	e001      	b.n	8004cc8 <HAL_RCC_OscConfig+0x184>
 8004cc4:	f7ff fbe9 	bl	800449a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d012      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd0:	f7fe fb72 	bl	80033b8 <HAL_GetTick>
 8004cd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cd8:	f7fe fb6e 	bl	80033b8 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b64      	cmp	r3, #100	; 0x64
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e299      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004cea:	f7ff fbe5 	bl	80044b8 <LL_RCC_HSE_IsReady>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f1      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x194>
 8004cf4:	e011      	b.n	8004d1a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf6:	f7fe fb5f 	bl	80033b8 <HAL_GetTick>
 8004cfa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004cfc:	e008      	b.n	8004d10 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cfe:	f7fe fb5b 	bl	80033b8 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b64      	cmp	r3, #100	; 0x64
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e286      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004d10:	f7ff fbd2 	bl	80044b8 <LL_RCC_HSE_IsReady>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1f1      	bne.n	8004cfe <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d04c      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d26:	f7ff fda8 	bl	800487a <LL_RCC_GetSysClkSource>
 8004d2a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d2c:	f7ff fea1 	bl	8004a72 <LL_RCC_PLL_GetMainSource>
 8004d30:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d005      	beq.n	8004d44 <HAL_RCC_OscConfig+0x200>
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	2b0c      	cmp	r3, #12
 8004d3c:	d10e      	bne.n	8004d5c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d10b      	bne.n	8004d5c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e266      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7ff fbf1 	bl	800453c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004d5a:	e031      	b.n	8004dc0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d019      	beq.n	8004d98 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d64:	f7ff fbba 	bl	80044dc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7fe fb26 	bl	80033b8 <HAL_GetTick>
 8004d6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d70:	f7fe fb22 	bl	80033b8 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e24d      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004d82:	f7ff fbc9 	bl	8004518 <LL_RCC_HSI_IsReady>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0f1      	beq.n	8004d70 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff fbd3 	bl	800453c <LL_RCC_HSI_SetCalibTrimming>
 8004d96:	e013      	b.n	8004dc0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d98:	f7ff fbaf 	bl	80044fa <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d9c:	f7fe fb0c 	bl	80033b8 <HAL_GetTick>
 8004da0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004da2:	e008      	b.n	8004db6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004da4:	f7fe fb08 	bl	80033b8 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e233      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004db6:	f7ff fbaf 	bl	8004518 <LL_RCC_HSI_IsReady>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1f1      	bne.n	8004da4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0308 	and.w	r3, r3, #8
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d106      	bne.n	8004dda <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f000 80a3 	beq.w	8004f20 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d076      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0310 	and.w	r3, r3, #16
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d046      	beq.n	8004e7c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004dee:	f7ff fc66 	bl	80046be <LL_RCC_LSI1_IsReady>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d113      	bne.n	8004e20 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004df8:	f7ff fc3f 	bl	800467a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004dfc:	f7fe fadc 	bl	80033b8 <HAL_GetTick>
 8004e00:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004e04:	f7fe fad8 	bl	80033b8 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e203      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004e16:	f7ff fc52 	bl	80046be <LL_RCC_LSI1_IsReady>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0f1      	beq.n	8004e04 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004e20:	f7ff fc5f 	bl	80046e2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e24:	f7fe fac8 	bl	80033b8 <HAL_GetTick>
 8004e28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004e2c:	f7fe fac4 	bl	80033b8 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e1ef      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8004e3e:	f7ff fc72 	bl	8004726 <LL_RCC_LSI2_IsReady>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0f1      	beq.n	8004e2c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7ff fc7c 	bl	800474a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004e52:	f7ff fc23 	bl	800469c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e56:	f7fe faaf 	bl	80033b8 <HAL_GetTick>
 8004e5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004e5c:	e008      	b.n	8004e70 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004e5e:	f7fe faab 	bl	80033b8 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e1d6      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004e70:	f7ff fc25 	bl	80046be <LL_RCC_LSI1_IsReady>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1f1      	bne.n	8004e5e <HAL_RCC_OscConfig+0x31a>
 8004e7a:	e051      	b.n	8004f20 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8004e7c:	f7ff fbfd 	bl	800467a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e80:	f7fe fa9a 	bl	80033b8 <HAL_GetTick>
 8004e84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004e86:	e00c      	b.n	8004ea2 <HAL_RCC_OscConfig+0x35e>
 8004e88:	20000008 	.word	0x20000008
 8004e8c:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004e90:	f7fe fa92 	bl	80033b8 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e1bd      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004ea2:	f7ff fc0c 	bl	80046be <LL_RCC_LSI1_IsReady>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0f1      	beq.n	8004e90 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004eac:	f7ff fc2a 	bl	8004704 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004eb2:	f7fe fa81 	bl	80033b8 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e1ac      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004ec4:	f7ff fc2f 	bl	8004726 <LL_RCC_LSI2_IsReady>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1f1      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x36e>
 8004ece:	e027      	b.n	8004f20 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004ed0:	f7ff fc18 	bl	8004704 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed4:	f7fe fa70 	bl	80033b8 <HAL_GetTick>
 8004ed8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004eda:	e008      	b.n	8004eee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004edc:	f7fe fa6c 	bl	80033b8 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d901      	bls.n	8004eee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004eea:	2303      	movs	r3, #3
 8004eec:	e197      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004eee:	f7ff fc1a 	bl	8004726 <LL_RCC_LSI2_IsReady>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1f1      	bne.n	8004edc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004ef8:	f7ff fbd0 	bl	800469c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004efc:	f7fe fa5c 	bl	80033b8 <HAL_GetTick>
 8004f00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004f04:	f7fe fa58 	bl	80033b8 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e183      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004f16:	f7ff fbd2 	bl	80046be <LL_RCC_LSI1_IsReady>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d1f1      	bne.n	8004f04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d05b      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f2c:	4ba7      	ldr	r3, [pc, #668]	; (80051cc <HAL_RCC_OscConfig+0x688>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d114      	bne.n	8004f62 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004f38:	f7ff fa70 	bl	800441c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f3c:	f7fe fa3c 	bl	80033b8 <HAL_GetTick>
 8004f40:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f44:	f7fe fa38 	bl	80033b8 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e163      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f56:	4b9d      	ldr	r3, [pc, #628]	; (80051cc <HAL_RCC_OscConfig+0x688>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0f0      	beq.n	8004f44 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d102      	bne.n	8004f70 <HAL_RCC_OscConfig+0x42c>
 8004f6a:	f7ff fb30 	bl	80045ce <LL_RCC_LSE_Enable>
 8004f6e:	e00c      	b.n	8004f8a <HAL_RCC_OscConfig+0x446>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	2b05      	cmp	r3, #5
 8004f76:	d104      	bne.n	8004f82 <HAL_RCC_OscConfig+0x43e>
 8004f78:	f7ff fb4b 	bl	8004612 <LL_RCC_LSE_EnableBypass>
 8004f7c:	f7ff fb27 	bl	80045ce <LL_RCC_LSE_Enable>
 8004f80:	e003      	b.n	8004f8a <HAL_RCC_OscConfig+0x446>
 8004f82:	f7ff fb35 	bl	80045f0 <LL_RCC_LSE_Disable>
 8004f86:	f7ff fb55 	bl	8004634 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d014      	beq.n	8004fbc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f92:	f7fe fa11 	bl	80033b8 <HAL_GetTick>
 8004f96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004f98:	e00a      	b.n	8004fb0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f9a:	f7fe fa0d 	bl	80033b8 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e136      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004fb0:	f7ff fb51 	bl	8004656 <LL_RCC_LSE_IsReady>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d0ef      	beq.n	8004f9a <HAL_RCC_OscConfig+0x456>
 8004fba:	e013      	b.n	8004fe4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fbc:	f7fe f9fc 	bl	80033b8 <HAL_GetTick>
 8004fc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004fc2:	e00a      	b.n	8004fda <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc4:	f7fe f9f8 	bl	80033b8 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e121      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004fda:	f7ff fb3c 	bl	8004656 <LL_RCC_LSE_IsReady>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1ef      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d02c      	beq.n	800504a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d014      	beq.n	8005022 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ff8:	f7ff fab5 	bl	8004566 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ffc:	f7fe f9dc 	bl	80033b8 <HAL_GetTick>
 8005000:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005004:	f7fe f9d8 	bl	80033b8 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e103      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005016:	f7ff fac8 	bl	80045aa <LL_RCC_HSI48_IsReady>
 800501a:	4603      	mov	r3, r0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0f1      	beq.n	8005004 <HAL_RCC_OscConfig+0x4c0>
 8005020:	e013      	b.n	800504a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005022:	f7ff fab1 	bl	8004588 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005026:	f7fe f9c7 	bl	80033b8 <HAL_GetTick>
 800502a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800502c:	e008      	b.n	8005040 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800502e:	f7fe f9c3 	bl	80033b8 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e0ee      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005040:	f7ff fab3 	bl	80045aa <LL_RCC_HSI48_IsReady>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f1      	bne.n	800502e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	2b00      	cmp	r3, #0
 8005050:	f000 80e4 	beq.w	800521c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005054:	f7ff fc11 	bl	800487a <LL_RCC_GetSysClkSource>
 8005058:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800505a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005066:	2b02      	cmp	r3, #2
 8005068:	f040 80b4 	bne.w	80051d4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f003 0203 	and.w	r2, r3, #3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005076:	429a      	cmp	r2, r3
 8005078:	d123      	bne.n	80050c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005084:	429a      	cmp	r2, r3
 8005086:	d11c      	bne.n	80050c2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	0a1b      	lsrs	r3, r3, #8
 800508c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005094:	429a      	cmp	r2, r3
 8005096:	d114      	bne.n	80050c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d10d      	bne.n	80050c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d106      	bne.n	80050c2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80050be:	429a      	cmp	r2, r3
 80050c0:	d05d      	beq.n	800517e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	2b0c      	cmp	r3, #12
 80050c6:	d058      	beq.n	800517a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80050c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e0a1      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80050da:	f7ff fc84 	bl	80049e6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80050de:	f7fe f96b 	bl	80033b8 <HAL_GetTick>
 80050e2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050e4:	e008      	b.n	80050f8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e6:	f7fe f967 	bl	80033b8 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d901      	bls.n	80050f8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e092      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1ef      	bne.n	80050e6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	4b30      	ldr	r3, [pc, #192]	; (80051d0 <HAL_RCC_OscConfig+0x68c>)
 800510e:	4013      	ands	r3, r2
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005118:	4311      	orrs	r1, r2
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800511e:	0212      	lsls	r2, r2, #8
 8005120:	4311      	orrs	r1, r2
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005126:	4311      	orrs	r1, r2
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800512c:	4311      	orrs	r1, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005132:	430a      	orrs	r2, r1
 8005134:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005138:	4313      	orrs	r3, r2
 800513a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800513c:	f7ff fc44 	bl	80049c8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800514a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800514e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005150:	f7fe f932 	bl	80033b8 <HAL_GetTick>
 8005154:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005156:	e008      	b.n	800516a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005158:	f7fe f92e 	bl	80033b8 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d901      	bls.n	800516a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e059      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800516a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0ef      	beq.n	8005158 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005178:	e050      	b.n	800521c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e04f      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800517e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005188:	2b00      	cmp	r3, #0
 800518a:	d147      	bne.n	800521c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800518c:	f7ff fc1c 	bl	80049c8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800519a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800519e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051a0:	f7fe f90a 	bl	80033b8 <HAL_GetTick>
 80051a4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a8:	f7fe f906 	bl	80033b8 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e031      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0ef      	beq.n	80051a8 <HAL_RCC_OscConfig+0x664>
 80051c8:	e028      	b.n	800521c <HAL_RCC_OscConfig+0x6d8>
 80051ca:	bf00      	nop
 80051cc:	58000400 	.word	0x58000400
 80051d0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	2b0c      	cmp	r3, #12
 80051d8:	d01e      	beq.n	8005218 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051da:	f7ff fc04 	bl	80049e6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051de:	f7fe f8eb 	bl	80033b8 <HAL_GetTick>
 80051e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051e4:	e008      	b.n	80051f8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e6:	f7fe f8e7 	bl	80033b8 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e012      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1ef      	bne.n	80051e6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800520a:	68da      	ldr	r2, [r3, #12]
 800520c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005210:	4b05      	ldr	r3, [pc, #20]	; (8005228 <HAL_RCC_OscConfig+0x6e4>)
 8005212:	4013      	ands	r3, r2
 8005214:	60cb      	str	r3, [r1, #12]
 8005216:	e001      	b.n	800521c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e000      	b.n	800521e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3734      	adds	r7, #52	; 0x34
 8005222:	46bd      	mov	sp, r7
 8005224:	bd90      	pop	{r4, r7, pc}
 8005226:	bf00      	nop
 8005228:	eefefffc 	.word	0xeefefffc

0800522c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e12d      	b.n	800549c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005240:	4b98      	ldr	r3, [pc, #608]	; (80054a4 <HAL_RCC_ClockConfig+0x278>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d91b      	bls.n	8005286 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800524e:	4b95      	ldr	r3, [pc, #596]	; (80054a4 <HAL_RCC_ClockConfig+0x278>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f023 0207 	bic.w	r2, r3, #7
 8005256:	4993      	ldr	r1, [pc, #588]	; (80054a4 <HAL_RCC_ClockConfig+0x278>)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	4313      	orrs	r3, r2
 800525c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800525e:	f7fe f8ab 	bl	80033b8 <HAL_GetTick>
 8005262:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005264:	e008      	b.n	8005278 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005266:	f7fe f8a7 	bl	80033b8 <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d901      	bls.n	8005278 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e111      	b.n	800549c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005278:	4b8a      	ldr	r3, [pc, #552]	; (80054a4 <HAL_RCC_ClockConfig+0x278>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	429a      	cmp	r2, r3
 8005284:	d1ef      	bne.n	8005266 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d016      	beq.n	80052c0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff fafb 	bl	8004892 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800529c:	f7fe f88c 	bl	80033b8 <HAL_GetTick>
 80052a0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80052a4:	f7fe f888 	bl	80033b8 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e0f2      	b.n	800549c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80052b6:	f7ff fbe8 	bl	8004a8a <LL_RCC_IsActiveFlag_HPRE>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d0f1      	beq.n	80052a4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0320 	and.w	r3, r3, #32
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d016      	beq.n	80052fa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7ff faf2 	bl	80048ba <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80052d6:	f7fe f86f 	bl	80033b8 <HAL_GetTick>
 80052da:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80052dc:	e008      	b.n	80052f0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80052de:	f7fe f86b 	bl	80033b8 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d901      	bls.n	80052f0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e0d5      	b.n	800549c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80052f0:	f7ff fbdd 	bl	8004aae <LL_RCC_IsActiveFlag_C2HPRE>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0f1      	beq.n	80052de <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005302:	2b00      	cmp	r3, #0
 8005304:	d016      	beq.n	8005334 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	4618      	mov	r0, r3
 800530c:	f7ff faeb 	bl	80048e6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005310:	f7fe f852 	bl	80033b8 <HAL_GetTick>
 8005314:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005316:	e008      	b.n	800532a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005318:	f7fe f84e 	bl	80033b8 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d901      	bls.n	800532a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e0b8      	b.n	800549c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800532a:	f7ff fbd3 	bl	8004ad4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0f1      	beq.n	8005318 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0304 	and.w	r3, r3, #4
 800533c:	2b00      	cmp	r3, #0
 800533e:	d016      	beq.n	800536e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff fae5 	bl	8004914 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800534a:	f7fe f835 	bl	80033b8 <HAL_GetTick>
 800534e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005350:	e008      	b.n	8005364 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005352:	f7fe f831 	bl	80033b8 <HAL_GetTick>
 8005356:	4602      	mov	r2, r0
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	1ad3      	subs	r3, r2, r3
 800535c:	2b02      	cmp	r3, #2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e09b      	b.n	800549c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005364:	f7ff fbc9 	bl	8004afa <LL_RCC_IsActiveFlag_PPRE1>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0f1      	beq.n	8005352 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0308 	and.w	r3, r3, #8
 8005376:	2b00      	cmp	r3, #0
 8005378:	d017      	beq.n	80053aa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	4618      	mov	r0, r3
 8005382:	f7ff fadb 	bl	800493c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005386:	f7fe f817 	bl	80033b8 <HAL_GetTick>
 800538a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800538c:	e008      	b.n	80053a0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800538e:	f7fe f813 	bl	80033b8 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d901      	bls.n	80053a0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e07d      	b.n	800549c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80053a0:	f7ff fbbd 	bl	8004b1e <LL_RCC_IsActiveFlag_PPRE2>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0f1      	beq.n	800538e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d043      	beq.n	800543e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d106      	bne.n	80053cc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80053be:	f7ff f87b 	bl	80044b8 <LL_RCC_HSE_IsReady>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d11e      	bne.n	8005406 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e067      	b.n	800549c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2b03      	cmp	r3, #3
 80053d2:	d106      	bne.n	80053e2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80053d4:	f7ff fb16 	bl	8004a04 <LL_RCC_PLL_IsReady>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d113      	bne.n	8005406 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e05c      	b.n	800549c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d106      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80053ea:	f7ff f9e3 	bl	80047b4 <LL_RCC_MSI_IsReady>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d108      	bne.n	8005406 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e051      	b.n	800549c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80053f8:	f7ff f88e 	bl	8004518 <LL_RCC_HSI_IsReady>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e04a      	b.n	800549c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	4618      	mov	r0, r3
 800540c:	f7ff fa21 	bl	8004852 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005410:	f7fd ffd2 	bl	80033b8 <HAL_GetTick>
 8005414:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005416:	e00a      	b.n	800542e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005418:	f7fd ffce 	bl	80033b8 <HAL_GetTick>
 800541c:	4602      	mov	r2, r0
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	f241 3288 	movw	r2, #5000	; 0x1388
 8005426:	4293      	cmp	r3, r2
 8005428:	d901      	bls.n	800542e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e036      	b.n	800549c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800542e:	f7ff fa24 	bl	800487a <LL_RCC_GetSysClkSource>
 8005432:	4602      	mov	r2, r0
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	429a      	cmp	r2, r3
 800543c:	d1ec      	bne.n	8005418 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800543e:	4b19      	ldr	r3, [pc, #100]	; (80054a4 <HAL_RCC_ClockConfig+0x278>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	683a      	ldr	r2, [r7, #0]
 8005448:	429a      	cmp	r2, r3
 800544a:	d21b      	bcs.n	8005484 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800544c:	4b15      	ldr	r3, [pc, #84]	; (80054a4 <HAL_RCC_ClockConfig+0x278>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f023 0207 	bic.w	r2, r3, #7
 8005454:	4913      	ldr	r1, [pc, #76]	; (80054a4 <HAL_RCC_ClockConfig+0x278>)
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	4313      	orrs	r3, r2
 800545a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800545c:	f7fd ffac 	bl	80033b8 <HAL_GetTick>
 8005460:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005462:	e008      	b.n	8005476 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005464:	f7fd ffa8 	bl	80033b8 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d901      	bls.n	8005476 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e012      	b.n	800549c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005476:	4b0b      	ldr	r3, [pc, #44]	; (80054a4 <HAL_RCC_ClockConfig+0x278>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	429a      	cmp	r2, r3
 8005482:	d1ef      	bne.n	8005464 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005484:	f000 f87e 	bl	8005584 <HAL_RCC_GetHCLKFreq>
 8005488:	4603      	mov	r3, r0
 800548a:	4a07      	ldr	r2, [pc, #28]	; (80054a8 <HAL_RCC_ClockConfig+0x27c>)
 800548c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800548e:	f7fd ff9f 	bl	80033d0 <HAL_GetTickPrio>
 8005492:	4603      	mov	r3, r0
 8005494:	4618      	mov	r0, r3
 8005496:	f7fd ff41 	bl	800331c <HAL_InitTick>
 800549a:	4603      	mov	r3, r0
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	58004000 	.word	0x58004000
 80054a8:	20000008 	.word	0x20000008

080054ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054ac:	b590      	push	{r4, r7, lr}
 80054ae:	b085      	sub	sp, #20
 80054b0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054b2:	f7ff f9e2 	bl	800487a <LL_RCC_GetSysClkSource>
 80054b6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10a      	bne.n	80054d4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80054be:	f7ff f99e 	bl	80047fe <LL_RCC_MSI_GetRange>
 80054c2:	4603      	mov	r3, r0
 80054c4:	091b      	lsrs	r3, r3, #4
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	4a2b      	ldr	r2, [pc, #172]	; (8005578 <HAL_RCC_GetSysClockFreq+0xcc>)
 80054cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	e04b      	b.n	800556c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	d102      	bne.n	80054e0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054da:	4b28      	ldr	r3, [pc, #160]	; (800557c <HAL_RCC_GetSysClockFreq+0xd0>)
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	e045      	b.n	800556c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b08      	cmp	r3, #8
 80054e4:	d10a      	bne.n	80054fc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80054e6:	f7fe ffb7 	bl	8004458 <LL_RCC_HSE_IsEnabledDiv2>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d102      	bne.n	80054f6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80054f0:	4b22      	ldr	r3, [pc, #136]	; (800557c <HAL_RCC_GetSysClockFreq+0xd0>)
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	e03a      	b.n	800556c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80054f6:	4b22      	ldr	r3, [pc, #136]	; (8005580 <HAL_RCC_GetSysClockFreq+0xd4>)
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	e037      	b.n	800556c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80054fc:	f7ff fab9 	bl	8004a72 <LL_RCC_PLL_GetMainSource>
 8005500:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	2b02      	cmp	r3, #2
 8005506:	d003      	beq.n	8005510 <HAL_RCC_GetSysClockFreq+0x64>
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	2b03      	cmp	r3, #3
 800550c:	d003      	beq.n	8005516 <HAL_RCC_GetSysClockFreq+0x6a>
 800550e:	e00d      	b.n	800552c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005510:	4b1a      	ldr	r3, [pc, #104]	; (800557c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005512:	60bb      	str	r3, [r7, #8]
        break;
 8005514:	e015      	b.n	8005542 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005516:	f7fe ff9f 	bl	8004458 <LL_RCC_HSE_IsEnabledDiv2>
 800551a:	4603      	mov	r3, r0
 800551c:	2b01      	cmp	r3, #1
 800551e:	d102      	bne.n	8005526 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005520:	4b16      	ldr	r3, [pc, #88]	; (800557c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005522:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005524:	e00d      	b.n	8005542 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005526:	4b16      	ldr	r3, [pc, #88]	; (8005580 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005528:	60bb      	str	r3, [r7, #8]
        break;
 800552a:	e00a      	b.n	8005542 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800552c:	f7ff f967 	bl	80047fe <LL_RCC_MSI_GetRange>
 8005530:	4603      	mov	r3, r0
 8005532:	091b      	lsrs	r3, r3, #4
 8005534:	f003 030f 	and.w	r3, r3, #15
 8005538:	4a0f      	ldr	r2, [pc, #60]	; (8005578 <HAL_RCC_GetSysClockFreq+0xcc>)
 800553a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800553e:	60bb      	str	r3, [r7, #8]
        break;
 8005540:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8005542:	f7ff fa71 	bl	8004a28 <LL_RCC_PLL_GetN>
 8005546:	4602      	mov	r2, r0
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	fb03 f402 	mul.w	r4, r3, r2
 800554e:	f7ff fa84 	bl	8004a5a <LL_RCC_PLL_GetDivider>
 8005552:	4603      	mov	r3, r0
 8005554:	091b      	lsrs	r3, r3, #4
 8005556:	3301      	adds	r3, #1
 8005558:	fbb4 f4f3 	udiv	r4, r4, r3
 800555c:	f7ff fa71 	bl	8004a42 <LL_RCC_PLL_GetR>
 8005560:	4603      	mov	r3, r0
 8005562:	0f5b      	lsrs	r3, r3, #29
 8005564:	3301      	adds	r3, #1
 8005566:	fbb4 f3f3 	udiv	r3, r4, r3
 800556a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800556c:	68fb      	ldr	r3, [r7, #12]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	bd90      	pop	{r4, r7, pc}
 8005576:	bf00      	nop
 8005578:	0800fbd0 	.word	0x0800fbd0
 800557c:	00f42400 	.word	0x00f42400
 8005580:	01e84800 	.word	0x01e84800

08005584 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005584:	b598      	push	{r3, r4, r7, lr}
 8005586:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005588:	f7ff ff90 	bl	80054ac <HAL_RCC_GetSysClockFreq>
 800558c:	4604      	mov	r4, r0
 800558e:	f7ff f9e9 	bl	8004964 <LL_RCC_GetAHBPrescaler>
 8005592:	4603      	mov	r3, r0
 8005594:	091b      	lsrs	r3, r3, #4
 8005596:	f003 030f 	and.w	r3, r3, #15
 800559a:	4a03      	ldr	r2, [pc, #12]	; (80055a8 <HAL_RCC_GetHCLKFreq+0x24>)
 800559c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055a0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	bd98      	pop	{r3, r4, r7, pc}
 80055a8:	0800fb70 	.word	0x0800fb70

080055ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055ac:	b598      	push	{r3, r4, r7, lr}
 80055ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80055b0:	f7ff ffe8 	bl	8005584 <HAL_RCC_GetHCLKFreq>
 80055b4:	4604      	mov	r4, r0
 80055b6:	f7ff f9ef 	bl	8004998 <LL_RCC_GetAPB1Prescaler>
 80055ba:	4603      	mov	r3, r0
 80055bc:	0a1b      	lsrs	r3, r3, #8
 80055be:	f003 0307 	and.w	r3, r3, #7
 80055c2:	4a04      	ldr	r2, [pc, #16]	; (80055d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055c8:	f003 031f 	and.w	r3, r3, #31
 80055cc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	bd98      	pop	{r3, r4, r7, pc}
 80055d4:	0800fbb0 	.word	0x0800fbb0

080055d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055d8:	b598      	push	{r3, r4, r7, lr}
 80055da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80055dc:	f7ff ffd2 	bl	8005584 <HAL_RCC_GetHCLKFreq>
 80055e0:	4604      	mov	r4, r0
 80055e2:	f7ff f9e5 	bl	80049b0 <LL_RCC_GetAPB2Prescaler>
 80055e6:	4603      	mov	r3, r0
 80055e8:	0adb      	lsrs	r3, r3, #11
 80055ea:	f003 0307 	and.w	r3, r3, #7
 80055ee:	4a04      	ldr	r2, [pc, #16]	; (8005600 <HAL_RCC_GetPCLK2Freq+0x28>)
 80055f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055f4:	f003 031f 	and.w	r3, r3, #31
 80055f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	bd98      	pop	{r3, r4, r7, pc}
 8005600:	0800fbb0 	.word	0x0800fbb0

08005604 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005604:	b590      	push	{r4, r7, lr}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2bb0      	cmp	r3, #176	; 0xb0
 8005610:	d903      	bls.n	800561a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005612:	4b15      	ldr	r3, [pc, #84]	; (8005668 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	e007      	b.n	800562a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	091b      	lsrs	r3, r3, #4
 800561e:	f003 030f 	and.w	r3, r3, #15
 8005622:	4a11      	ldr	r2, [pc, #68]	; (8005668 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005628:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800562a:	f7ff f9a7 	bl	800497c <LL_RCC_GetAHB4Prescaler>
 800562e:	4603      	mov	r3, r0
 8005630:	091b      	lsrs	r3, r3, #4
 8005632:	f003 030f 	and.w	r3, r3, #15
 8005636:	4a0d      	ldr	r2, [pc, #52]	; (800566c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005642:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	4a0a      	ldr	r2, [pc, #40]	; (8005670 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005648:	fba2 2303 	umull	r2, r3, r2, r3
 800564c:	0c9c      	lsrs	r4, r3, #18
 800564e:	f7fe fef5 	bl	800443c <HAL_PWREx_GetVoltageRange>
 8005652:	4603      	mov	r3, r0
 8005654:	4619      	mov	r1, r3
 8005656:	4620      	mov	r0, r4
 8005658:	f000 f80c 	bl	8005674 <RCC_SetFlashLatency>
 800565c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800565e:	4618      	mov	r0, r3
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	bd90      	pop	{r4, r7, pc}
 8005666:	bf00      	nop
 8005668:	0800fbd0 	.word	0x0800fbd0
 800566c:	0800fb70 	.word	0x0800fb70
 8005670:	431bde83 	.word	0x431bde83

08005674 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005674:	b590      	push	{r4, r7, lr}
 8005676:	b093      	sub	sp, #76	; 0x4c
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800567e:	4b37      	ldr	r3, [pc, #220]	; (800575c <RCC_SetFlashLatency+0xe8>)
 8005680:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005684:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005686:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800568a:	4a35      	ldr	r2, [pc, #212]	; (8005760 <RCC_SetFlashLatency+0xec>)
 800568c:	f107 031c 	add.w	r3, r7, #28
 8005690:	ca07      	ldmia	r2, {r0, r1, r2}
 8005692:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005696:	4b33      	ldr	r3, [pc, #204]	; (8005764 <RCC_SetFlashLatency+0xf0>)
 8005698:	f107 040c 	add.w	r4, r7, #12
 800569c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800569e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80056a2:	2300      	movs	r3, #0
 80056a4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ac:	d11a      	bne.n	80056e4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80056ae:	2300      	movs	r3, #0
 80056b0:	643b      	str	r3, [r7, #64]	; 0x40
 80056b2:	e013      	b.n	80056dc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80056b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	3348      	adds	r3, #72	; 0x48
 80056ba:	443b      	add	r3, r7
 80056bc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d807      	bhi.n	80056d6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80056c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	3348      	adds	r3, #72	; 0x48
 80056cc:	443b      	add	r3, r7
 80056ce:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80056d2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80056d4:	e020      	b.n	8005718 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80056d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056d8:	3301      	adds	r3, #1
 80056da:	643b      	str	r3, [r7, #64]	; 0x40
 80056dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056de:	2b03      	cmp	r3, #3
 80056e0:	d9e8      	bls.n	80056b4 <RCC_SetFlashLatency+0x40>
 80056e2:	e019      	b.n	8005718 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80056e4:	2300      	movs	r3, #0
 80056e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056e8:	e013      	b.n	8005712 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80056ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	3348      	adds	r3, #72	; 0x48
 80056f0:	443b      	add	r3, r7
 80056f2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d807      	bhi.n	800570c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80056fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	3348      	adds	r3, #72	; 0x48
 8005702:	443b      	add	r3, r7
 8005704:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005708:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800570a:	e005      	b.n	8005718 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800570c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800570e:	3301      	adds	r3, #1
 8005710:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005714:	2b02      	cmp	r3, #2
 8005716:	d9e8      	bls.n	80056ea <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005718:	4b13      	ldr	r3, [pc, #76]	; (8005768 <RCC_SetFlashLatency+0xf4>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f023 0207 	bic.w	r2, r3, #7
 8005720:	4911      	ldr	r1, [pc, #68]	; (8005768 <RCC_SetFlashLatency+0xf4>)
 8005722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005724:	4313      	orrs	r3, r2
 8005726:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005728:	f7fd fe46 	bl	80033b8 <HAL_GetTick>
 800572c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800572e:	e008      	b.n	8005742 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005730:	f7fd fe42 	bl	80033b8 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d901      	bls.n	8005742 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e007      	b.n	8005752 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005742:	4b09      	ldr	r3, [pc, #36]	; (8005768 <RCC_SetFlashLatency+0xf4>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0307 	and.w	r3, r3, #7
 800574a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800574c:	429a      	cmp	r2, r3
 800574e:	d1ef      	bne.n	8005730 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	374c      	adds	r7, #76	; 0x4c
 8005756:	46bd      	mov	sp, r7
 8005758:	bd90      	pop	{r4, r7, pc}
 800575a:	bf00      	nop
 800575c:	0800e8fc 	.word	0x0800e8fc
 8005760:	0800e90c 	.word	0x0800e90c
 8005764:	0800e918 	.word	0x0800e918
 8005768:	58004000 	.word	0x58004000

0800576c <LL_RCC_LSE_IsEnabled>:
{
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <LL_RCC_LSE_IsEnabled+0x18>
 8005780:	2301      	movs	r3, #1
 8005782:	e000      	b.n	8005786 <LL_RCC_LSE_IsEnabled+0x1a>
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <LL_RCC_LSE_IsReady>:
{
 8005790:	b480      	push	{r7}
 8005792:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579c:	f003 0302 	and.w	r3, r3, #2
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d101      	bne.n	80057a8 <LL_RCC_LSE_IsReady+0x18>
 80057a4:	2301      	movs	r3, #1
 80057a6:	e000      	b.n	80057aa <LL_RCC_LSE_IsReady+0x1a>
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <LL_RCC_MSI_EnablePLLMode>:
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80057b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057c2:	f043 0304 	orr.w	r3, r3, #4
 80057c6:	6013      	str	r3, [r2, #0]
}
 80057c8:	bf00      	nop
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <LL_RCC_SetRFWKPClockSource>:
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80057da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80057f2:	bf00      	nop
 80057f4:	370c      	adds	r7, #12
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr

080057fe <LL_RCC_SetSMPSClockSource>:
{
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	f023 0203 	bic.w	r2, r3, #3
 8005810:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4313      	orrs	r3, r2
 8005818:	624b      	str	r3, [r1, #36]	; 0x24
}
 800581a:	bf00      	nop
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <LL_RCC_SetSMPSPrescaler>:
{
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800582e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005838:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4313      	orrs	r3, r2
 8005840:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005842:	bf00      	nop
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <LL_RCC_SetUSARTClockSource>:
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800585a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585e:	f023 0203 	bic.w	r2, r3, #3
 8005862:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4313      	orrs	r3, r2
 800586a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <LL_RCC_SetLPUARTClockSource>:
{
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005882:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800588e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4313      	orrs	r3, r2
 8005896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800589a:	bf00      	nop
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <LL_RCC_SetI2CClockSource>:
{
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80058ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	091b      	lsrs	r3, r3, #4
 80058ba:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80058be:	43db      	mvns	r3, r3
 80058c0:	401a      	ands	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	011b      	lsls	r3, r3, #4
 80058c6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80058ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058ce:	4313      	orrs	r3, r2
 80058d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <LL_RCC_SetLPTIMClockSource>:
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80058e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	0c1b      	lsrs	r3, r3, #16
 80058f4:	041b      	lsls	r3, r3, #16
 80058f6:	43db      	mvns	r3, r3
 80058f8:	401a      	ands	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	041b      	lsls	r3, r3, #16
 80058fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005902:	4313      	orrs	r3, r2
 8005904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <LL_RCC_SetSAIClockSource>:
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800591c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005924:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005928:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4313      	orrs	r3, r2
 8005930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <LL_RCC_SetRNGClockSource>:
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800594c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005950:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005954:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4313      	orrs	r3, r2
 800595c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <LL_RCC_SetCLK48ClockSource>:
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005980:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4313      	orrs	r3, r2
 8005988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <LL_RCC_SetUSBClockSource>:
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7ff ffe3 	bl	800596c <LL_RCC_SetCLK48ClockSource>
}
 80059a6:	bf00      	nop
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <LL_RCC_SetADCClockSource>:
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80059b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80059c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <LL_RCC_SetRTCClockSource>:
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80059e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80059fa:	bf00      	nop
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <LL_RCC_GetRTCClockSource>:
{
 8005a06:	b480      	push	{r7}
 8005a08:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <LL_RCC_ForceBackupDomainReset>:
{
 8005a20:	b480      	push	{r7}
 8005a22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005a38:	bf00      	nop
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005a42:	b480      	push	{r7}
 8005a44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005a5a:	bf00      	nop
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <LL_RCC_PLLSAI1_Enable>:
{
 8005a64:	b480      	push	{r7}
 8005a66:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a76:	6013      	str	r3, [r2, #0]
}
 8005a78:	bf00      	nop
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <LL_RCC_PLLSAI1_Disable>:
{
 8005a82:	b480      	push	{r7}
 8005a84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a94:	6013      	str	r3, [r2, #0]
}
 8005a96:	bf00      	nop
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <LL_RCC_PLLSAI1_IsReady>:
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005aa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005aae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ab2:	d101      	bne.n	8005ab8 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e000      	b.n	8005aba <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b088      	sub	sp, #32
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005acc:	2300      	movs	r3, #0
 8005ace:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d034      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ae8:	d021      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005aea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005aee:	d81b      	bhi.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005af0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005af4:	d01d      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005af6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005afa:	d815      	bhi.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00b      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005b00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b04:	d110      	bne.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b14:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b16:	e00d      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f000 f94d 	bl	8005dbc <RCCEx_PLLSAI1_ConfigNP>
 8005b22:	4603      	mov	r3, r0
 8005b24:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005b26:	e005      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	77fb      	strb	r3, [r7, #31]
        break;
 8005b2c:	e002      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005b2e:	bf00      	nop
 8005b30:	e000      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005b32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b34:	7ffb      	ldrb	r3, [r7, #31]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d105      	bne.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7ff fee8 	bl	8005914 <LL_RCC_SetSAIClockSource>
 8005b44:	e001      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b46:	7ffb      	ldrb	r3, [r7, #31]
 8005b48:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d046      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005b56:	f7ff ff56 	bl	8005a06 <LL_RCC_GetRTCClockSource>
 8005b5a:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d03c      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005b66:	f7fe fc59 	bl	800441c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d105      	bne.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7ff ff30 	bl	80059da <LL_RCC_SetRTCClockSource>
 8005b7a:	e02e      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b84:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005b86:	f7ff ff4b 	bl	8005a20 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005b8a:	f7ff ff5a 	bl	8005a42 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005b9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005ba6:	f7ff fde1 	bl	800576c <LL_RCC_LSE_IsEnabled>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d114      	bne.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005bb0:	f7fd fc02 	bl	80033b8 <HAL_GetTick>
 8005bb4:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005bb6:	e00b      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bb8:	f7fd fbfe 	bl	80033b8 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d902      	bls.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	77fb      	strb	r3, [r7, #31]
              break;
 8005bce:	e004      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005bd0:	f7ff fdde 	bl	8005790 <LL_RCC_LSE_IsReady>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d1ee      	bne.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005bda:	7ffb      	ldrb	r3, [r7, #31]
 8005bdc:	77bb      	strb	r3, [r7, #30]
 8005bde:	e001      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005be0:	7ffb      	ldrb	r3, [r7, #31]
 8005be2:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d004      	beq.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7ff fe2a 	bl	800584e <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0302 	and.w	r3, r3, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d004      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7ff fe35 	bl	800587a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0310 	and.w	r3, r3, #16
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d004      	beq.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7ff fe5d 	bl	80058e0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0320 	and.w	r3, r3, #32
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d004      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7ff fe52 	bl	80058e0 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0304 	and.w	r3, r3, #4
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d004      	beq.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f7ff fe2a 	bl	80058a6 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0308 	and.w	r3, r3, #8
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d004      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7ff fe1f 	bl	80058a6 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d022      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7ff fe8d 	bl	8005998 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c86:	d107      	bne.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c96:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ca0:	d10b      	bne.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 f8e3 	bl	8005e72 <RCCEx_PLLSAI1_ConfigNQ>
 8005cac:	4603      	mov	r3, r0
 8005cae:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005cb0:	7ffb      	ldrb	r3, [r7, #31]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005cb6:	7ffb      	ldrb	r3, [r7, #31]
 8005cb8:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d02b      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cce:	d008      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cd8:	d003      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d105      	bne.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7ff fe2a 	bl	8005940 <LL_RCC_SetRNGClockSource>
 8005cec:	e00a      	b.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	2000      	movs	r0, #0
 8005cfa:	f7ff fe21 	bl	8005940 <LL_RCC_SetRNGClockSource>
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f7ff fe34 	bl	800596c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d08:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8005d0c:	d107      	bne.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d1c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d022      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7ff fe3d 	bl	80059ae <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d3c:	d107      	bne.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d4c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d56:	d10b      	bne.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3304      	adds	r3, #4
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 f8e3 	bl	8005f28 <RCCEx_PLLSAI1_ConfigNR>
 8005d62:	4603      	mov	r3, r0
 8005d64:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005d66:	7ffb      	ldrb	r3, [r7, #31]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d001      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005d6c:	7ffb      	ldrb	r3, [r7, #31]
 8005d6e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d004      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff fd26 	bl	80057d2 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d009      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff fd45 	bl	8005826 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7ff fd2c 	bl	80057fe <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005da6:	7fbb      	ldrb	r3, [r7, #30]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3720      	adds	r7, #32
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8005db4:	f7ff fcfe 	bl	80057b4 <LL_RCC_MSI_EnablePLLMode>
}
 8005db8:	bf00      	nop
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005dc8:	f7ff fe5b 	bl	8005a82 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005dcc:	f7fd faf4 	bl	80033b8 <HAL_GetTick>
 8005dd0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005dd2:	e009      	b.n	8005de8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005dd4:	f7fd faf0 	bl	80033b8 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d902      	bls.n	8005de8 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	73fb      	strb	r3, [r7, #15]
      break;
 8005de6:	e004      	b.n	8005df2 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005de8:	f7ff fe5a 	bl	8005aa0 <LL_RCC_PLLSAI1_IsReady>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1f0      	bne.n	8005dd4 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d137      	bne.n	8005e68 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	021b      	lsls	r3, r3, #8
 8005e08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e22:	4313      	orrs	r3, r2
 8005e24:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005e26:	f7ff fe1d 	bl	8005a64 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e2a:	f7fd fac5 	bl	80033b8 <HAL_GetTick>
 8005e2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e30:	e009      	b.n	8005e46 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e32:	f7fd fac1 	bl	80033b8 <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d902      	bls.n	8005e46 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	73fb      	strb	r3, [r7, #15]
        break;
 8005e44:	e004      	b.n	8005e50 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005e46:	f7ff fe2b 	bl	8005aa0 <LL_RCC_PLLSAI1_IsReady>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d1f0      	bne.n	8005e32 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d108      	bne.n	8005e68 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005e56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e5a:	691a      	ldr	r2, [r3, #16]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e64:	4313      	orrs	r3, r2
 8005e66:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b084      	sub	sp, #16
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005e7e:	f7ff fe00 	bl	8005a82 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005e82:	f7fd fa99 	bl	80033b8 <HAL_GetTick>
 8005e86:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e88:	e009      	b.n	8005e9e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e8a:	f7fd fa95 	bl	80033b8 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d902      	bls.n	8005e9e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e9c:	e004      	b.n	8005ea8 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005e9e:	f7ff fdff 	bl	8005aa0 <LL_RCC_PLLSAI1_IsReady>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1f0      	bne.n	8005e8a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d137      	bne.n	8005f1e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	021b      	lsls	r3, r3, #8
 8005ebe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005edc:	f7ff fdc2 	bl	8005a64 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ee0:	f7fd fa6a 	bl	80033b8 <HAL_GetTick>
 8005ee4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005ee6:	e009      	b.n	8005efc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ee8:	f7fd fa66 	bl	80033b8 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d902      	bls.n	8005efc <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	73fb      	strb	r3, [r7, #15]
        break;
 8005efa:	e004      	b.n	8005f06 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005efc:	f7ff fdd0 	bl	8005aa0 <LL_RCC_PLLSAI1_IsReady>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d1f0      	bne.n	8005ee8 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d108      	bne.n	8005f1e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f10:	691a      	ldr	r2, [r3, #16]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f30:	2300      	movs	r3, #0
 8005f32:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005f34:	f7ff fda5 	bl	8005a82 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f38:	f7fd fa3e 	bl	80033b8 <HAL_GetTick>
 8005f3c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f3e:	e009      	b.n	8005f54 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f40:	f7fd fa3a 	bl	80033b8 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d902      	bls.n	8005f54 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	73fb      	strb	r3, [r7, #15]
      break;
 8005f52:	e004      	b.n	8005f5e <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005f54:	f7ff fda4 	bl	8005aa0 <LL_RCC_PLLSAI1_IsReady>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1f0      	bne.n	8005f40 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8005f5e:	7bfb      	ldrb	r3, [r7, #15]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d137      	bne.n	8005fd4 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	021b      	lsls	r3, r3, #8
 8005f74:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8005f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005f92:	f7ff fd67 	bl	8005a64 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f96:	f7fd fa0f 	bl	80033b8 <HAL_GetTick>
 8005f9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005f9c:	e009      	b.n	8005fb2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f9e:	f7fd fa0b 	bl	80033b8 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d902      	bls.n	8005fb2 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005fac:	2303      	movs	r3, #3
 8005fae:	73fb      	strb	r3, [r7, #15]
        break;
 8005fb0:	e004      	b.n	8005fbc <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005fb2:	f7ff fd75 	bl	8005aa0 <LL_RCC_PLLSAI1_IsReady>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d1f0      	bne.n	8005f9e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d108      	bne.n	8005fd4 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fc6:	691a      	ldr	r2, [r3, #16]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
	...

08005fe0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d101      	bne.n	8005ff2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e09f      	b.n	8006132 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d106      	bne.n	800600c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f7fc fe58 	bl	8002cbc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006014:	4b49      	ldr	r3, [pc, #292]	; (800613c <HAL_RTC_Init+0x15c>)
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	f003 0310 	and.w	r3, r3, #16
 800601c:	2b10      	cmp	r3, #16
 800601e:	d07e      	beq.n	800611e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	22ca      	movs	r2, #202	; 0xca
 8006026:	625a      	str	r2, [r3, #36]	; 0x24
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2253      	movs	r2, #83	; 0x53
 800602e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 f8ab 	bl	800618c <RTC_EnterInitMode>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00a      	beq.n	8006052 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	22ff      	movs	r2, #255	; 0xff
 8006042:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2204      	movs	r2, #4
 8006048:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	73fb      	strb	r3, [r7, #15]
 8006050:	e067      	b.n	8006122 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	6812      	ldr	r2, [r2, #0]
 800605c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006064:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6899      	ldr	r1, [r3, #8]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685a      	ldr	r2, [r3, #4]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	431a      	orrs	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	68d2      	ldr	r2, [r2, #12]
 800608c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6919      	ldr	r1, [r3, #16]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	041a      	lsls	r2, r3, #16
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	430a      	orrs	r2, r1
 80060a0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68da      	ldr	r2, [r3, #12]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060b0:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f022 0203 	bic.w	r2, r2, #3
 80060c0:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	69da      	ldr	r2, [r3, #28]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	431a      	orrs	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f003 0320 	and.w	r3, r3, #32
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d113      	bne.n	8006110 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f829 	bl	8006140 <HAL_RTC_WaitForSynchro>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d00d      	beq.n	8006110 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	22ff      	movs	r2, #255	; 0xff
 80060fa:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2204      	movs	r2, #4
 8006100:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e010      	b.n	8006132 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	22ff      	movs	r2, #255	; 0xff
 8006116:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	73fb      	strb	r3, [r7, #15]
 800611c:	e001      	b.n	8006122 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800611e:	2300      	movs	r3, #0
 8006120:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006122:	7bfb      	ldrb	r3, [r7, #15]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d103      	bne.n	8006130 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8006130:	7bfb      	ldrb	r3, [r7, #15]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop
 800613c:	40002800 	.word	0x40002800

08006140 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006156:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006158:	f7fd f92e 	bl	80033b8 <HAL_GetTick>
 800615c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800615e:	e009      	b.n	8006174 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006160:	f7fd f92a 	bl	80033b8 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800616e:	d901      	bls.n	8006174 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e007      	b.n	8006184 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f003 0320 	and.w	r3, r3, #32
 800617e:	2b00      	cmp	r3, #0
 8006180:	d0ee      	beq.n	8006160 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d119      	bne.n	80061d6 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f04f 32ff 	mov.w	r2, #4294967295
 80061aa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80061ac:	f7fd f904 	bl	80033b8 <HAL_GetTick>
 80061b0:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80061b2:	e009      	b.n	80061c8 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80061b4:	f7fd f900 	bl	80033b8 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061c2:	d901      	bls.n	80061c8 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e007      	b.n	80061d8 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d0ee      	beq.n	80061b4 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}

080061e0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d101      	bne.n	80061fa <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80061f6:	2302      	movs	r3, #2
 80061f8:	e0a8      	b.n	800634c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2202      	movs	r2, #2
 8006206:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	22ca      	movs	r2, #202	; 0xca
 8006210:	625a      	str	r2, [r3, #36]	; 0x24
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2253      	movs	r2, #83	; 0x53
 8006218:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006224:	2b00      	cmp	r3, #0
 8006226:	d020      	beq.n	800626a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006228:	f7fd f8c6 	bl	80033b8 <HAL_GetTick>
 800622c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800622e:	e015      	b.n	800625c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006230:	f7fd f8c2 	bl	80033b8 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800623e:	d90d      	bls.n	800625c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	22ff      	movs	r2, #255	; 0xff
 8006246:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2203      	movs	r2, #3
 800624c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e077      	b.n	800634c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	f003 0304 	and.w	r3, r3, #4
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1e2      	bne.n	8006230 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006278:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	b2da      	uxtb	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800628a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800628c:	f7fd f894 	bl	80033b8 <HAL_GetTick>
 8006290:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006292:	e015      	b.n	80062c0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006294:	f7fd f890 	bl	80033b8 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062a2:	d90d      	bls.n	80062c0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	22ff      	movs	r2, #255	; 0xff
 80062aa:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2203      	movs	r2, #3
 80062b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e045      	b.n	800634c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	f003 0304 	and.w	r3, r3, #4
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0e2      	beq.n	8006294 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689a      	ldr	r2, [r3, #8]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 0207 	bic.w	r2, r2, #7
 80062e4:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6899      	ldr	r1, [r3, #8]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80062f6:	4b17      	ldr	r3, [pc, #92]	; (8006354 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80062f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062fc:	4a15      	ldr	r2, [pc, #84]	; (8006354 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80062fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006302:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006306:	4b13      	ldr	r3, [pc, #76]	; (8006354 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a12      	ldr	r2, [pc, #72]	; (8006354 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800630c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006310:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	689a      	ldr	r2, [r3, #8]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006320:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689a      	ldr	r2, [r3, #8]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006330:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	22ff      	movs	r2, #255	; 0xff
 8006338:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3718      	adds	r7, #24
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	58000800 	.word	0x58000800

08006358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d101      	bne.n	800636a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e049      	b.n	80063fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d106      	bne.n	8006384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7fc fcfc 	bl	8002d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2202      	movs	r2, #2
 8006388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	3304      	adds	r3, #4
 8006394:	4619      	mov	r1, r3
 8006396:	4610      	mov	r0, r2
 8006398:	f000 fbb8 	bl	8006b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3708      	adds	r7, #8
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b082      	sub	sp, #8
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d101      	bne.n	8006418 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e049      	b.n	80064ac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b00      	cmp	r3, #0
 8006422:	d106      	bne.n	8006432 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 f841 	bl	80064b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2202      	movs	r2, #2
 8006436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	3304      	adds	r3, #4
 8006442:	4619      	mov	r1, r3
 8006444:	4610      	mov	r0, r2
 8006446:	f000 fb61 	bl	8006b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3708      	adds	r7, #8
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b083      	sub	sp, #12
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d109      	bne.n	80064ec <HAL_TIM_PWM_Start+0x24>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	bf14      	ite	ne
 80064e4:	2301      	movne	r3, #1
 80064e6:	2300      	moveq	r3, #0
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	e03c      	b.n	8006566 <HAL_TIM_PWM_Start+0x9e>
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2b04      	cmp	r3, #4
 80064f0:	d109      	bne.n	8006506 <HAL_TIM_PWM_Start+0x3e>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	bf14      	ite	ne
 80064fe:	2301      	movne	r3, #1
 8006500:	2300      	moveq	r3, #0
 8006502:	b2db      	uxtb	r3, r3
 8006504:	e02f      	b.n	8006566 <HAL_TIM_PWM_Start+0x9e>
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b08      	cmp	r3, #8
 800650a:	d109      	bne.n	8006520 <HAL_TIM_PWM_Start+0x58>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b01      	cmp	r3, #1
 8006516:	bf14      	ite	ne
 8006518:	2301      	movne	r3, #1
 800651a:	2300      	moveq	r3, #0
 800651c:	b2db      	uxtb	r3, r3
 800651e:	e022      	b.n	8006566 <HAL_TIM_PWM_Start+0x9e>
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2b0c      	cmp	r3, #12
 8006524:	d109      	bne.n	800653a <HAL_TIM_PWM_Start+0x72>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b01      	cmp	r3, #1
 8006530:	bf14      	ite	ne
 8006532:	2301      	movne	r3, #1
 8006534:	2300      	moveq	r3, #0
 8006536:	b2db      	uxtb	r3, r3
 8006538:	e015      	b.n	8006566 <HAL_TIM_PWM_Start+0x9e>
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	2b10      	cmp	r3, #16
 800653e:	d109      	bne.n	8006554 <HAL_TIM_PWM_Start+0x8c>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b01      	cmp	r3, #1
 800654a:	bf14      	ite	ne
 800654c:	2301      	movne	r3, #1
 800654e:	2300      	moveq	r3, #0
 8006550:	b2db      	uxtb	r3, r3
 8006552:	e008      	b.n	8006566 <HAL_TIM_PWM_Start+0x9e>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b01      	cmp	r3, #1
 800655e:	bf14      	ite	ne
 8006560:	2301      	movne	r3, #1
 8006562:	2300      	moveq	r3, #0
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e079      	b.n	8006662 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d104      	bne.n	800657e <HAL_TIM_PWM_Start+0xb6>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800657c:	e023      	b.n	80065c6 <HAL_TIM_PWM_Start+0xfe>
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b04      	cmp	r3, #4
 8006582:	d104      	bne.n	800658e <HAL_TIM_PWM_Start+0xc6>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800658c:	e01b      	b.n	80065c6 <HAL_TIM_PWM_Start+0xfe>
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b08      	cmp	r3, #8
 8006592:	d104      	bne.n	800659e <HAL_TIM_PWM_Start+0xd6>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800659c:	e013      	b.n	80065c6 <HAL_TIM_PWM_Start+0xfe>
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b0c      	cmp	r3, #12
 80065a2:	d104      	bne.n	80065ae <HAL_TIM_PWM_Start+0xe6>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2202      	movs	r2, #2
 80065a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065ac:	e00b      	b.n	80065c6 <HAL_TIM_PWM_Start+0xfe>
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b10      	cmp	r3, #16
 80065b2:	d104      	bne.n	80065be <HAL_TIM_PWM_Start+0xf6>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065bc:	e003      	b.n	80065c6 <HAL_TIM_PWM_Start+0xfe>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2202      	movs	r2, #2
 80065c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2201      	movs	r2, #1
 80065cc:	6839      	ldr	r1, [r7, #0]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f000 fd8a 	bl	80070e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a24      	ldr	r2, [pc, #144]	; (800666c <HAL_TIM_PWM_Start+0x1a4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d009      	beq.n	80065f2 <HAL_TIM_PWM_Start+0x12a>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a23      	ldr	r2, [pc, #140]	; (8006670 <HAL_TIM_PWM_Start+0x1a8>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d004      	beq.n	80065f2 <HAL_TIM_PWM_Start+0x12a>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a21      	ldr	r2, [pc, #132]	; (8006674 <HAL_TIM_PWM_Start+0x1ac>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d101      	bne.n	80065f6 <HAL_TIM_PWM_Start+0x12e>
 80065f2:	2301      	movs	r3, #1
 80065f4:	e000      	b.n	80065f8 <HAL_TIM_PWM_Start+0x130>
 80065f6:	2300      	movs	r3, #0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d007      	beq.n	800660c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800660a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a16      	ldr	r2, [pc, #88]	; (800666c <HAL_TIM_PWM_Start+0x1a4>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d004      	beq.n	8006620 <HAL_TIM_PWM_Start+0x158>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800661e:	d115      	bne.n	800664c <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	689a      	ldr	r2, [r3, #8]
 8006626:	4b14      	ldr	r3, [pc, #80]	; (8006678 <HAL_TIM_PWM_Start+0x1b0>)
 8006628:	4013      	ands	r3, r2
 800662a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2b06      	cmp	r3, #6
 8006630:	d015      	beq.n	800665e <HAL_TIM_PWM_Start+0x196>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006638:	d011      	beq.n	800665e <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f042 0201 	orr.w	r2, r2, #1
 8006648:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800664a:	e008      	b.n	800665e <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f042 0201 	orr.w	r2, r2, #1
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	e000      	b.n	8006660 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800665e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	40012c00 	.word	0x40012c00
 8006670:	40014400 	.word	0x40014400
 8006674:	40014800 	.word	0x40014800
 8006678:	00010007 	.word	0x00010007

0800667c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d101      	bne.n	8006690 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e097      	b.n	80067c0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b00      	cmp	r3, #0
 800669a:	d106      	bne.n	80066aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f7fc fb3d 	bl	8002d24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2202      	movs	r2, #2
 80066ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	6812      	ldr	r2, [r2, #0]
 80066bc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80066c0:	f023 0307 	bic.w	r3, r3, #7
 80066c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	3304      	adds	r3, #4
 80066ce:	4619      	mov	r1, r3
 80066d0:	4610      	mov	r0, r2
 80066d2:	f000 fa1b 	bl	8006b0c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	699b      	ldr	r3, [r3, #24]
 80066e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066fe:	f023 0303 	bic.w	r3, r3, #3
 8006702:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	021b      	lsls	r3, r3, #8
 800670e:	4313      	orrs	r3, r2
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	4313      	orrs	r3, r2
 8006714:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800671c:	f023 030c 	bic.w	r3, r3, #12
 8006720:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006728:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800672c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	68da      	ldr	r2, [r3, #12]
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	021b      	lsls	r3, r3, #8
 8006738:	4313      	orrs	r3, r2
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	011a      	lsls	r2, r3, #4
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	031b      	lsls	r3, r3, #12
 800674c:	4313      	orrs	r3, r2
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	4313      	orrs	r3, r2
 8006752:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800675a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006762:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	695b      	ldr	r3, [r3, #20]
 800676c:	011b      	lsls	r3, r3, #4
 800676e:	4313      	orrs	r3, r2
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2201      	movs	r2, #1
 800679a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3718      	adds	r7, #24
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067d8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067e0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067e8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067f0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d110      	bne.n	800681a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067f8:	7bfb      	ldrb	r3, [r7, #15]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d102      	bne.n	8006804 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80067fe:	7b7b      	ldrb	r3, [r7, #13]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d001      	beq.n	8006808 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e069      	b.n	80068dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2202      	movs	r2, #2
 8006814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006818:	e031      	b.n	800687e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b04      	cmp	r3, #4
 800681e:	d110      	bne.n	8006842 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006820:	7bbb      	ldrb	r3, [r7, #14]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d102      	bne.n	800682c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006826:	7b3b      	ldrb	r3, [r7, #12]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d001      	beq.n	8006830 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e055      	b.n	80068dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2202      	movs	r2, #2
 8006834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006840:	e01d      	b.n	800687e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006842:	7bfb      	ldrb	r3, [r7, #15]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d108      	bne.n	800685a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006848:	7bbb      	ldrb	r3, [r7, #14]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d105      	bne.n	800685a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800684e:	7b7b      	ldrb	r3, [r7, #13]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d102      	bne.n	800685a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006854:	7b3b      	ldrb	r3, [r7, #12]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d001      	beq.n	800685e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e03e      	b.n	80068dc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2202      	movs	r2, #2
 8006862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2202      	movs	r2, #2
 800686a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2202      	movs	r2, #2
 8006872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2202      	movs	r2, #2
 800687a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d003      	beq.n	800688c <HAL_TIM_Encoder_Start+0xc4>
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	2b04      	cmp	r3, #4
 8006888:	d008      	beq.n	800689c <HAL_TIM_Encoder_Start+0xd4>
 800688a:	e00f      	b.n	80068ac <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2201      	movs	r2, #1
 8006892:	2100      	movs	r1, #0
 8006894:	4618      	mov	r0, r3
 8006896:	f000 fc27 	bl	80070e8 <TIM_CCxChannelCmd>
      break;
 800689a:	e016      	b.n	80068ca <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2201      	movs	r2, #1
 80068a2:	2104      	movs	r1, #4
 80068a4:	4618      	mov	r0, r3
 80068a6:	f000 fc1f 	bl	80070e8 <TIM_CCxChannelCmd>
      break;
 80068aa:	e00e      	b.n	80068ca <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2201      	movs	r2, #1
 80068b2:	2100      	movs	r1, #0
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 fc17 	bl	80070e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2201      	movs	r2, #1
 80068c0:	2104      	movs	r1, #4
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 fc10 	bl	80070e8 <TIM_CCxChannelCmd>
      break;
 80068c8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f042 0201 	orr.w	r2, r2, #1
 80068d8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b086      	sub	sp, #24
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068f0:	2300      	movs	r3, #0
 80068f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d101      	bne.n	8006902 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068fe:	2302      	movs	r3, #2
 8006900:	e0ff      	b.n	8006b02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2201      	movs	r2, #1
 8006906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2b14      	cmp	r3, #20
 800690e:	f200 80f0 	bhi.w	8006af2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006912:	a201      	add	r2, pc, #4	; (adr r2, 8006918 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006918:	0800696d 	.word	0x0800696d
 800691c:	08006af3 	.word	0x08006af3
 8006920:	08006af3 	.word	0x08006af3
 8006924:	08006af3 	.word	0x08006af3
 8006928:	080069ad 	.word	0x080069ad
 800692c:	08006af3 	.word	0x08006af3
 8006930:	08006af3 	.word	0x08006af3
 8006934:	08006af3 	.word	0x08006af3
 8006938:	080069ef 	.word	0x080069ef
 800693c:	08006af3 	.word	0x08006af3
 8006940:	08006af3 	.word	0x08006af3
 8006944:	08006af3 	.word	0x08006af3
 8006948:	08006a2f 	.word	0x08006a2f
 800694c:	08006af3 	.word	0x08006af3
 8006950:	08006af3 	.word	0x08006af3
 8006954:	08006af3 	.word	0x08006af3
 8006958:	08006a71 	.word	0x08006a71
 800695c:	08006af3 	.word	0x08006af3
 8006960:	08006af3 	.word	0x08006af3
 8006964:	08006af3 	.word	0x08006af3
 8006968:	08006ab1 	.word	0x08006ab1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68b9      	ldr	r1, [r7, #8]
 8006972:	4618      	mov	r0, r3
 8006974:	f000 f93a 	bl	8006bec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	699a      	ldr	r2, [r3, #24]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f042 0208 	orr.w	r2, r2, #8
 8006986:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	699a      	ldr	r2, [r3, #24]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f022 0204 	bic.w	r2, r2, #4
 8006996:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6999      	ldr	r1, [r3, #24]
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	691a      	ldr	r2, [r3, #16]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	619a      	str	r2, [r3, #24]
      break;
 80069aa:	e0a5      	b.n	8006af8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68b9      	ldr	r1, [r7, #8]
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 f996 	bl	8006ce4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	699a      	ldr	r2, [r3, #24]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	699a      	ldr	r2, [r3, #24]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6999      	ldr	r1, [r3, #24]
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	021a      	lsls	r2, r3, #8
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	430a      	orrs	r2, r1
 80069ea:	619a      	str	r2, [r3, #24]
      break;
 80069ec:	e084      	b.n	8006af8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68b9      	ldr	r1, [r7, #8]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 f9ef 	bl	8006dd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	69da      	ldr	r2, [r3, #28]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f042 0208 	orr.w	r2, r2, #8
 8006a08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	69da      	ldr	r2, [r3, #28]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 0204 	bic.w	r2, r2, #4
 8006a18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	69d9      	ldr	r1, [r3, #28]
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	691a      	ldr	r2, [r3, #16]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	61da      	str	r2, [r3, #28]
      break;
 8006a2c:	e064      	b.n	8006af8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68b9      	ldr	r1, [r7, #8]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 fa47 	bl	8006ec8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	69da      	ldr	r2, [r3, #28]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	69da      	ldr	r2, [r3, #28]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	69d9      	ldr	r1, [r3, #28]
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	021a      	lsls	r2, r3, #8
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	61da      	str	r2, [r3, #28]
      break;
 8006a6e:	e043      	b.n	8006af8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68b9      	ldr	r1, [r7, #8]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 fa84 	bl	8006f84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0208 	orr.w	r2, r2, #8
 8006a8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f022 0204 	bic.w	r2, r2, #4
 8006a9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	691a      	ldr	r2, [r3, #16]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	430a      	orrs	r2, r1
 8006aac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006aae:	e023      	b.n	8006af8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68b9      	ldr	r1, [r7, #8]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 fabc 	bl	8007034 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006aca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ada:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	021a      	lsls	r2, r3, #8
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006af0:	e002      	b.n	8006af8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	75fb      	strb	r3, [r7, #23]
      break;
 8006af6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b00:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3718      	adds	r7, #24
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop

08006b0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a30      	ldr	r2, [pc, #192]	; (8006be0 <TIM_Base_SetConfig+0xd4>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d003      	beq.n	8006b2c <TIM_Base_SetConfig+0x20>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2a:	d108      	bne.n	8006b3e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a27      	ldr	r2, [pc, #156]	; (8006be0 <TIM_Base_SetConfig+0xd4>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d00b      	beq.n	8006b5e <TIM_Base_SetConfig+0x52>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b4c:	d007      	beq.n	8006b5e <TIM_Base_SetConfig+0x52>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a24      	ldr	r2, [pc, #144]	; (8006be4 <TIM_Base_SetConfig+0xd8>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d003      	beq.n	8006b5e <TIM_Base_SetConfig+0x52>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a23      	ldr	r2, [pc, #140]	; (8006be8 <TIM_Base_SetConfig+0xdc>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d108      	bne.n	8006b70 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	689a      	ldr	r2, [r3, #8]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	4a12      	ldr	r2, [pc, #72]	; (8006be0 <TIM_Base_SetConfig+0xd4>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d007      	beq.n	8006bac <TIM_Base_SetConfig+0xa0>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a11      	ldr	r2, [pc, #68]	; (8006be4 <TIM_Base_SetConfig+0xd8>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d003      	beq.n	8006bac <TIM_Base_SetConfig+0xa0>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	4a10      	ldr	r2, [pc, #64]	; (8006be8 <TIM_Base_SetConfig+0xdc>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d103      	bne.n	8006bb4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	691a      	ldr	r2, [r3, #16]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d105      	bne.n	8006bd2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	f023 0201 	bic.w	r2, r3, #1
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	611a      	str	r2, [r3, #16]
  }
}
 8006bd2:	bf00      	nop
 8006bd4:	3714      	adds	r7, #20
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	40012c00 	.word	0x40012c00
 8006be4:	40014400 	.word	0x40014400
 8006be8:	40014800 	.word	0x40014800

08006bec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a1b      	ldr	r3, [r3, #32]
 8006c00:	f023 0201 	bic.w	r2, r3, #1
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f023 0303 	bic.w	r3, r3, #3
 8006c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	f023 0302 	bic.w	r3, r3, #2
 8006c38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a24      	ldr	r2, [pc, #144]	; (8006cd8 <TIM_OC1_SetConfig+0xec>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d007      	beq.n	8006c5c <TIM_OC1_SetConfig+0x70>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a23      	ldr	r2, [pc, #140]	; (8006cdc <TIM_OC1_SetConfig+0xf0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d003      	beq.n	8006c5c <TIM_OC1_SetConfig+0x70>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a22      	ldr	r2, [pc, #136]	; (8006ce0 <TIM_OC1_SetConfig+0xf4>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d10c      	bne.n	8006c76 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f023 0308 	bic.w	r3, r3, #8
 8006c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f023 0304 	bic.w	r3, r3, #4
 8006c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a17      	ldr	r2, [pc, #92]	; (8006cd8 <TIM_OC1_SetConfig+0xec>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d007      	beq.n	8006c8e <TIM_OC1_SetConfig+0xa2>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a17      	ldr	r2, [pc, #92]	; (8006ce0 <TIM_OC1_SetConfig+0xf4>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d003      	beq.n	8006c8e <TIM_OC1_SetConfig+0xa2>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a14      	ldr	r2, [pc, #80]	; (8006cdc <TIM_OC1_SetConfig+0xf0>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d111      	bne.n	8006cb2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	693a      	ldr	r2, [r7, #16]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	699b      	ldr	r3, [r3, #24]
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	685a      	ldr	r2, [r3, #4]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	697a      	ldr	r2, [r7, #20]
 8006cca:	621a      	str	r2, [r3, #32]
}
 8006ccc:	bf00      	nop
 8006cce:	371c      	adds	r7, #28
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	40012c00 	.word	0x40012c00
 8006cdc:	40014800 	.word	0x40014800
 8006ce0:	40014400 	.word	0x40014400

08006ce4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6a1b      	ldr	r3, [r3, #32]
 8006cf8:	f023 0210 	bic.w	r2, r3, #16
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	021b      	lsls	r3, r3, #8
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f023 0320 	bic.w	r3, r3, #32
 8006d32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	011b      	lsls	r3, r3, #4
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a22      	ldr	r2, [pc, #136]	; (8006dcc <TIM_OC2_SetConfig+0xe8>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d10d      	bne.n	8006d64 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	011b      	lsls	r3, r3, #4
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a19      	ldr	r2, [pc, #100]	; (8006dcc <TIM_OC2_SetConfig+0xe8>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d007      	beq.n	8006d7c <TIM_OC2_SetConfig+0x98>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a18      	ldr	r2, [pc, #96]	; (8006dd0 <TIM_OC2_SetConfig+0xec>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d003      	beq.n	8006d7c <TIM_OC2_SetConfig+0x98>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a17      	ldr	r2, [pc, #92]	; (8006dd4 <TIM_OC2_SetConfig+0xf0>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d113      	bne.n	8006da4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	695b      	ldr	r3, [r3, #20]
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	699b      	ldr	r3, [r3, #24]
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	621a      	str	r2, [r3, #32]
}
 8006dbe:	bf00      	nop
 8006dc0:	371c      	adds	r7, #28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	40012c00 	.word	0x40012c00
 8006dd0:	40014400 	.word	0x40014400
 8006dd4:	40014800 	.word	0x40014800

08006dd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a1b      	ldr	r3, [r3, #32]
 8006dec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f023 0303 	bic.w	r3, r3, #3
 8006e12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	021b      	lsls	r3, r3, #8
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a21      	ldr	r2, [pc, #132]	; (8006ebc <TIM_OC3_SetConfig+0xe4>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d10d      	bne.n	8006e56 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	021b      	lsls	r3, r3, #8
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a18      	ldr	r2, [pc, #96]	; (8006ebc <TIM_OC3_SetConfig+0xe4>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d007      	beq.n	8006e6e <TIM_OC3_SetConfig+0x96>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a17      	ldr	r2, [pc, #92]	; (8006ec0 <TIM_OC3_SetConfig+0xe8>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d003      	beq.n	8006e6e <TIM_OC3_SetConfig+0x96>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a16      	ldr	r2, [pc, #88]	; (8006ec4 <TIM_OC3_SetConfig+0xec>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d113      	bne.n	8006e96 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	011b      	lsls	r3, r3, #4
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	011b      	lsls	r3, r3, #4
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	621a      	str	r2, [r3, #32]
}
 8006eb0:	bf00      	nop
 8006eb2:	371c      	adds	r7, #28
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	40012c00 	.word	0x40012c00
 8006ec0:	40014400 	.word	0x40014400
 8006ec4:	40014800 	.word	0x40014800

08006ec8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b087      	sub	sp, #28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a1b      	ldr	r3, [r3, #32]
 8006edc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	021b      	lsls	r3, r3, #8
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	031b      	lsls	r3, r3, #12
 8006f1e:	693a      	ldr	r2, [r7, #16]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a14      	ldr	r2, [pc, #80]	; (8006f78 <TIM_OC4_SetConfig+0xb0>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d007      	beq.n	8006f3c <TIM_OC4_SetConfig+0x74>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a13      	ldr	r2, [pc, #76]	; (8006f7c <TIM_OC4_SetConfig+0xb4>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d003      	beq.n	8006f3c <TIM_OC4_SetConfig+0x74>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a12      	ldr	r2, [pc, #72]	; (8006f80 <TIM_OC4_SetConfig+0xb8>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d109      	bne.n	8006f50 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	019b      	lsls	r3, r3, #6
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	621a      	str	r2, [r3, #32]
}
 8006f6a:	bf00      	nop
 8006f6c:	371c      	adds	r7, #28
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	40012c00 	.word	0x40012c00
 8006f7c:	40014400 	.word	0x40014400
 8006f80:	40014800 	.word	0x40014800

08006f84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a1b      	ldr	r3, [r3, #32]
 8006f98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006fc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	041b      	lsls	r3, r3, #16
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a13      	ldr	r2, [pc, #76]	; (8007028 <TIM_OC5_SetConfig+0xa4>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d007      	beq.n	8006fee <TIM_OC5_SetConfig+0x6a>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a12      	ldr	r2, [pc, #72]	; (800702c <TIM_OC5_SetConfig+0xa8>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d003      	beq.n	8006fee <TIM_OC5_SetConfig+0x6a>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a11      	ldr	r2, [pc, #68]	; (8007030 <TIM_OC5_SetConfig+0xac>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d109      	bne.n	8007002 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ff4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	021b      	lsls	r3, r3, #8
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	621a      	str	r2, [r3, #32]
}
 800701c:	bf00      	nop
 800701e:	371c      	adds	r7, #28
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	40012c00 	.word	0x40012c00
 800702c:	40014400 	.word	0x40014400
 8007030:	40014800 	.word	0x40014800

08007034 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007034:	b480      	push	{r7}
 8007036:	b087      	sub	sp, #28
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800705a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007062:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	021b      	lsls	r3, r3, #8
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	4313      	orrs	r3, r2
 8007072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800707a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	051b      	lsls	r3, r3, #20
 8007082:	693a      	ldr	r2, [r7, #16]
 8007084:	4313      	orrs	r3, r2
 8007086:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a14      	ldr	r2, [pc, #80]	; (80070dc <TIM_OC6_SetConfig+0xa8>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d007      	beq.n	80070a0 <TIM_OC6_SetConfig+0x6c>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a13      	ldr	r2, [pc, #76]	; (80070e0 <TIM_OC6_SetConfig+0xac>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d003      	beq.n	80070a0 <TIM_OC6_SetConfig+0x6c>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a12      	ldr	r2, [pc, #72]	; (80070e4 <TIM_OC6_SetConfig+0xb0>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d109      	bne.n	80070b4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	029b      	lsls	r3, r3, #10
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	621a      	str	r2, [r3, #32]
}
 80070ce:	bf00      	nop
 80070d0:	371c      	adds	r7, #28
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	40012c00 	.word	0x40012c00
 80070e0:	40014400 	.word	0x40014400
 80070e4:	40014800 	.word	0x40014800

080070e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b087      	sub	sp, #28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	f003 031f 	and.w	r3, r3, #31
 80070fa:	2201      	movs	r2, #1
 80070fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007100:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6a1a      	ldr	r2, [r3, #32]
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	43db      	mvns	r3, r3
 800710a:	401a      	ands	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6a1a      	ldr	r2, [r3, #32]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	f003 031f 	and.w	r3, r3, #31
 800711a:	6879      	ldr	r1, [r7, #4]
 800711c:	fa01 f303 	lsl.w	r3, r1, r3
 8007120:	431a      	orrs	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	621a      	str	r2, [r3, #32]
}
 8007126:	bf00      	nop
 8007128:	371c      	adds	r7, #28
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
	...

08007134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007134:	b480      	push	{r7}
 8007136:	b085      	sub	sp, #20
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007144:	2b01      	cmp	r3, #1
 8007146:	d101      	bne.n	800714c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007148:	2302      	movs	r3, #2
 800714a:	e04a      	b.n	80071e2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2202      	movs	r2, #2
 8007158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a1f      	ldr	r2, [pc, #124]	; (80071f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d108      	bne.n	8007188 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800717c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	4313      	orrs	r3, r2
 8007186:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800718e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	4313      	orrs	r3, r2
 8007198:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a12      	ldr	r2, [pc, #72]	; (80071f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d004      	beq.n	80071b6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071b4:	d10c      	bne.n	80071d0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	40012c00 	.word	0x40012c00

080071f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80071fe:	2300      	movs	r3, #0
 8007200:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007208:	2b01      	cmp	r3, #1
 800720a:	d101      	bne.n	8007210 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800720c:	2302      	movs	r3, #2
 800720e:	e06e      	b.n	80072ee <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	4313      	orrs	r3, r2
 8007224:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	4313      	orrs	r3, r2
 8007232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	4313      	orrs	r3, r2
 8007240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4313      	orrs	r3, r2
 800724e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	4313      	orrs	r3, r2
 800725c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	4313      	orrs	r3, r2
 800726a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007276:	4313      	orrs	r3, r2
 8007278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	041b      	lsls	r3, r3, #16
 8007286:	4313      	orrs	r3, r2
 8007288:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	69db      	ldr	r3, [r3, #28]
 8007294:	4313      	orrs	r3, r2
 8007296:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a17      	ldr	r2, [pc, #92]	; (80072fc <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d11c      	bne.n	80072dc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ac:	051b      	lsls	r3, r3, #20
 80072ae:	4313      	orrs	r3, r2
 80072b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	6a1b      	ldr	r3, [r3, #32]
 80072bc:	4313      	orrs	r3, r2
 80072be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ca:	4313      	orrs	r3, r2
 80072cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d8:	4313      	orrs	r3, r2
 80072da:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	40012c00 	.word	0x40012c00

08007300 <LL_RCC_GetUSARTClockSource>:
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800730c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4013      	ands	r3, r2
}
 8007314:	4618      	mov	r0, r3
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <LL_RCC_GetLPUARTClockSource>:
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800732c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4013      	ands	r3, r2
}
 8007334:	4618      	mov	r0, r3
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b082      	sub	sp, #8
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d101      	bne.n	8007352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e042      	b.n	80073d8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007358:	2b00      	cmp	r3, #0
 800735a:	d106      	bne.n	800736a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7fb fd49 	bl	8002dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2224      	movs	r2, #36	; 0x24
 800736e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f022 0201 	bic.w	r2, r2, #1
 8007380:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007386:	2b00      	cmp	r3, #0
 8007388:	d002      	beq.n	8007390 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fe14 	bl	8007fb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fbe9 	bl	8007b68 <UART_SetConfig>
 8007396:	4603      	mov	r3, r0
 8007398:	2b01      	cmp	r3, #1
 800739a:	d101      	bne.n	80073a0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e01b      	b.n	80073d8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	689a      	ldr	r2, [r3, #8]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f042 0201 	orr.w	r2, r2, #1
 80073ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fe93 	bl	80080fc <UART_CheckIdleState>
 80073d6:	4603      	mov	r3, r0
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08a      	sub	sp, #40	; 0x28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	4613      	mov	r3, r2
 80073ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073f4:	2b20      	cmp	r3, #32
 80073f6:	d167      	bne.n	80074c8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d002      	beq.n	8007404 <HAL_UART_Transmit_DMA+0x24>
 80073fe:	88fb      	ldrh	r3, [r7, #6]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d101      	bne.n	8007408 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e060      	b.n	80074ca <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	88fa      	ldrh	r2, [r7, #6]
 8007412:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	88fa      	ldrh	r2, [r7, #6]
 800741a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2221      	movs	r2, #33	; 0x21
 800742a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007432:	2b00      	cmp	r3, #0
 8007434:	d028      	beq.n	8007488 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800743a:	4a26      	ldr	r2, [pc, #152]	; (80074d4 <HAL_UART_Transmit_DMA+0xf4>)
 800743c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007442:	4a25      	ldr	r2, [pc, #148]	; (80074d8 <HAL_UART_Transmit_DMA+0xf8>)
 8007444:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800744a:	4a24      	ldr	r2, [pc, #144]	; (80074dc <HAL_UART_Transmit_DMA+0xfc>)
 800744c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007452:	2200      	movs	r2, #0
 8007454:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800745e:	4619      	mov	r1, r3
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	3328      	adds	r3, #40	; 0x28
 8007466:	461a      	mov	r2, r3
 8007468:	88fb      	ldrh	r3, [r7, #6]
 800746a:	f7fc fa0b 	bl	8003884 <HAL_DMA_Start_IT>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d009      	beq.n	8007488 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2210      	movs	r2, #16
 8007478:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2220      	movs	r2, #32
 8007480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e020      	b.n	80074ca <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2240      	movs	r2, #64	; 0x40
 800748e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	3308      	adds	r3, #8
 8007496:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	e853 3f00 	ldrex	r3, [r3]
 800749e:	613b      	str	r3, [r7, #16]
   return(result);
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074a6:	627b      	str	r3, [r7, #36]	; 0x24
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	3308      	adds	r3, #8
 80074ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074b0:	623a      	str	r2, [r7, #32]
 80074b2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b4:	69f9      	ldr	r1, [r7, #28]
 80074b6:	6a3a      	ldr	r2, [r7, #32]
 80074b8:	e841 2300 	strex	r3, r2, [r1]
 80074bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e5      	bne.n	8007490 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	e000      	b.n	80074ca <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80074c8:	2302      	movs	r3, #2
  }
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3728      	adds	r7, #40	; 0x28
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	08008479 	.word	0x08008479
 80074d8:	08008513 	.word	0x08008513
 80074dc:	0800852f 	.word	0x0800852f

080074e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b0ba      	sub	sp, #232	; 0xe8
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007506:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800750a:	f640 030f 	movw	r3, #2063	; 0x80f
 800750e:	4013      	ands	r3, r2
 8007510:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007514:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007518:	2b00      	cmp	r3, #0
 800751a:	d11b      	bne.n	8007554 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800751c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007520:	f003 0320 	and.w	r3, r3, #32
 8007524:	2b00      	cmp	r3, #0
 8007526:	d015      	beq.n	8007554 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800752c:	f003 0320 	and.w	r3, r3, #32
 8007530:	2b00      	cmp	r3, #0
 8007532:	d105      	bne.n	8007540 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800753c:	2b00      	cmp	r3, #0
 800753e:	d009      	beq.n	8007554 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 82e3 	beq.w	8007b10 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	4798      	blx	r3
      }
      return;
 8007552:	e2dd      	b.n	8007b10 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007554:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007558:	2b00      	cmp	r3, #0
 800755a:	f000 8123 	beq.w	80077a4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800755e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007562:	4b8d      	ldr	r3, [pc, #564]	; (8007798 <HAL_UART_IRQHandler+0x2b8>)
 8007564:	4013      	ands	r3, r2
 8007566:	2b00      	cmp	r3, #0
 8007568:	d106      	bne.n	8007578 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800756a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800756e:	4b8b      	ldr	r3, [pc, #556]	; (800779c <HAL_UART_IRQHandler+0x2bc>)
 8007570:	4013      	ands	r3, r2
 8007572:	2b00      	cmp	r3, #0
 8007574:	f000 8116 	beq.w	80077a4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	2b00      	cmp	r3, #0
 8007582:	d011      	beq.n	80075a8 <HAL_UART_IRQHandler+0xc8>
 8007584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00b      	beq.n	80075a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2201      	movs	r2, #1
 8007596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800759e:	f043 0201 	orr.w	r2, r3, #1
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ac:	f003 0302 	and.w	r3, r3, #2
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d011      	beq.n	80075d8 <HAL_UART_IRQHandler+0xf8>
 80075b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075b8:	f003 0301 	and.w	r3, r3, #1
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00b      	beq.n	80075d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2202      	movs	r2, #2
 80075c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ce:	f043 0204 	orr.w	r2, r3, #4
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075dc:	f003 0304 	and.w	r3, r3, #4
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d011      	beq.n	8007608 <HAL_UART_IRQHandler+0x128>
 80075e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075e8:	f003 0301 	and.w	r3, r3, #1
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00b      	beq.n	8007608 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2204      	movs	r2, #4
 80075f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075fe:	f043 0202 	orr.w	r2, r3, #2
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800760c:	f003 0308 	and.w	r3, r3, #8
 8007610:	2b00      	cmp	r3, #0
 8007612:	d017      	beq.n	8007644 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007618:	f003 0320 	and.w	r3, r3, #32
 800761c:	2b00      	cmp	r3, #0
 800761e:	d105      	bne.n	800762c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007620:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007624:	4b5c      	ldr	r3, [pc, #368]	; (8007798 <HAL_UART_IRQHandler+0x2b8>)
 8007626:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00b      	beq.n	8007644 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2208      	movs	r2, #8
 8007632:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800763a:	f043 0208 	orr.w	r2, r3, #8
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800764c:	2b00      	cmp	r3, #0
 800764e:	d012      	beq.n	8007676 <HAL_UART_IRQHandler+0x196>
 8007650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007654:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00c      	beq.n	8007676 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007664:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800766c:	f043 0220 	orr.w	r2, r3, #32
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 8249 	beq.w	8007b14 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007686:	f003 0320 	and.w	r3, r3, #32
 800768a:	2b00      	cmp	r3, #0
 800768c:	d013      	beq.n	80076b6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800768e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007692:	f003 0320 	and.w	r3, r3, #32
 8007696:	2b00      	cmp	r3, #0
 8007698:	d105      	bne.n	80076a6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800769a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800769e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d007      	beq.n	80076b6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ca:	2b40      	cmp	r3, #64	; 0x40
 80076cc:	d005      	beq.n	80076da <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80076ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d054      	beq.n	8007784 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fe66 	bl	80083ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ea:	2b40      	cmp	r3, #64	; 0x40
 80076ec:	d146      	bne.n	800777c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3308      	adds	r3, #8
 80076f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076fc:	e853 3f00 	ldrex	r3, [r3]
 8007700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007704:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800770c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3308      	adds	r3, #8
 8007716:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800771a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800771e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007722:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007726:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800772a:	e841 2300 	strex	r3, r2, [r1]
 800772e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007732:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1d9      	bne.n	80076ee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007740:	2b00      	cmp	r3, #0
 8007742:	d017      	beq.n	8007774 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800774a:	4a15      	ldr	r2, [pc, #84]	; (80077a0 <HAL_UART_IRQHandler+0x2c0>)
 800774c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007754:	4618      	mov	r0, r3
 8007756:	f7fc f96f 	bl	8003a38 <HAL_DMA_Abort_IT>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d019      	beq.n	8007794 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800776e:	4610      	mov	r0, r2
 8007770:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007772:	e00f      	b.n	8007794 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f9e1 	bl	8007b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800777a:	e00b      	b.n	8007794 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 f9dd 	bl	8007b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007782:	e007      	b.n	8007794 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 f9d9 	bl	8007b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007792:	e1bf      	b.n	8007b14 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007794:	bf00      	nop
    return;
 8007796:	e1bd      	b.n	8007b14 <HAL_UART_IRQHandler+0x634>
 8007798:	10000001 	.word	0x10000001
 800779c:	04000120 	.word	0x04000120
 80077a0:	080085af 	.word	0x080085af

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	f040 8153 	bne.w	8007a54 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80077ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077b2:	f003 0310 	and.w	r3, r3, #16
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f000 814c 	beq.w	8007a54 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80077bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077c0:	f003 0310 	and.w	r3, r3, #16
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 8145 	beq.w	8007a54 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2210      	movs	r2, #16
 80077d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077dc:	2b40      	cmp	r3, #64	; 0x40
 80077de:	f040 80bb 	bne.w	8007958 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80077f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 818f 	beq.w	8007b18 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007800:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007804:	429a      	cmp	r2, r3
 8007806:	f080 8187 	bcs.w	8007b18 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007810:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0320 	and.w	r3, r3, #32
 8007822:	2b00      	cmp	r3, #0
 8007824:	f040 8087 	bne.w	8007936 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007830:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007834:	e853 3f00 	ldrex	r3, [r3]
 8007838:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800783c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007844:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	461a      	mov	r2, r3
 800784e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007852:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007856:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800785e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007862:	e841 2300 	strex	r3, r2, [r1]
 8007866:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800786a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1da      	bne.n	8007828 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3308      	adds	r3, #8
 8007878:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800787c:	e853 3f00 	ldrex	r3, [r3]
 8007880:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007882:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007884:	f023 0301 	bic.w	r3, r3, #1
 8007888:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3308      	adds	r3, #8
 8007892:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007896:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800789a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800789e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80078a2:	e841 2300 	strex	r3, r2, [r1]
 80078a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80078a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d1e1      	bne.n	8007872 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3308      	adds	r3, #8
 80078b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078b8:	e853 3f00 	ldrex	r3, [r3]
 80078bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80078be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	3308      	adds	r3, #8
 80078ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80078d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078da:	e841 2300 	strex	r3, r2, [r1]
 80078de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1e3      	bne.n	80078ae <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2220      	movs	r2, #32
 80078ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078fc:	e853 3f00 	ldrex	r3, [r3]
 8007900:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007904:	f023 0310 	bic.w	r3, r3, #16
 8007908:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	461a      	mov	r2, r3
 8007912:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007916:	65bb      	str	r3, [r7, #88]	; 0x58
 8007918:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800791c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800791e:	e841 2300 	strex	r3, r2, [r1]
 8007922:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1e4      	bne.n	80078f4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007930:	4618      	mov	r0, r3
 8007932:	f7fc f822 	bl	800397a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2202      	movs	r2, #2
 800793a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007948:	b29b      	uxth	r3, r3
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	b29b      	uxth	r3, r3
 800794e:	4619      	mov	r1, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 f8fd 	bl	8007b50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007956:	e0df      	b.n	8007b18 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007964:	b29b      	uxth	r3, r3
 8007966:	1ad3      	subs	r3, r2, r3
 8007968:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007972:	b29b      	uxth	r3, r3
 8007974:	2b00      	cmp	r3, #0
 8007976:	f000 80d1 	beq.w	8007b1c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800797a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800797e:	2b00      	cmp	r3, #0
 8007980:	f000 80cc 	beq.w	8007b1c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798c:	e853 3f00 	ldrex	r3, [r3]
 8007990:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007994:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007998:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	461a      	mov	r2, r3
 80079a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80079a6:	647b      	str	r3, [r7, #68]	; 0x44
 80079a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079ae:	e841 2300 	strex	r3, r2, [r1]
 80079b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1e4      	bne.n	8007984 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	3308      	adds	r3, #8
 80079c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c4:	e853 3f00 	ldrex	r3, [r3]
 80079c8:	623b      	str	r3, [r7, #32]
   return(result);
 80079ca:	6a3b      	ldr	r3, [r7, #32]
 80079cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079d0:	f023 0301 	bic.w	r3, r3, #1
 80079d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3308      	adds	r3, #8
 80079de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80079e2:	633a      	str	r2, [r7, #48]	; 0x30
 80079e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079ea:	e841 2300 	strex	r3, r2, [r1]
 80079ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1e1      	bne.n	80079ba <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2220      	movs	r2, #32
 80079fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2200      	movs	r2, #0
 8007a02:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	e853 3f00 	ldrex	r3, [r3]
 8007a16:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f023 0310 	bic.w	r3, r3, #16
 8007a1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	461a      	mov	r2, r3
 8007a28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007a2c:	61fb      	str	r3, [r7, #28]
 8007a2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a30:	69b9      	ldr	r1, [r7, #24]
 8007a32:	69fa      	ldr	r2, [r7, #28]
 8007a34:	e841 2300 	strex	r3, r2, [r1]
 8007a38:	617b      	str	r3, [r7, #20]
   return(result);
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d1e4      	bne.n	8007a0a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2202      	movs	r2, #2
 8007a44:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007a46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a4a:	4619      	mov	r1, r3
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f87f 	bl	8007b50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a52:	e063      	b.n	8007b1c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00e      	beq.n	8007a7e <HAL_UART_IRQHandler+0x59e>
 8007a60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d008      	beq.n	8007a7e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007a74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fdda 	bl	8008630 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a7c:	e051      	b.n	8007b22 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d014      	beq.n	8007ab4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d105      	bne.n	8007aa2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d008      	beq.n	8007ab4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d03a      	beq.n	8007b20 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	4798      	blx	r3
    }
    return;
 8007ab2:	e035      	b.n	8007b20 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d009      	beq.n	8007ad4 <HAL_UART_IRQHandler+0x5f4>
 8007ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d003      	beq.n	8007ad4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fd84 	bl	80085da <UART_EndTransmit_IT>
    return;
 8007ad2:	e026      	b.n	8007b22 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d009      	beq.n	8007af4 <HAL_UART_IRQHandler+0x614>
 8007ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ae4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fdb3 	bl	8008658 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007af2:	e016      	b.n	8007b22 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007af8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d010      	beq.n	8007b22 <HAL_UART_IRQHandler+0x642>
 8007b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	da0c      	bge.n	8007b22 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fd9b 	bl	8008644 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b0e:	e008      	b.n	8007b22 <HAL_UART_IRQHandler+0x642>
      return;
 8007b10:	bf00      	nop
 8007b12:	e006      	b.n	8007b22 <HAL_UART_IRQHandler+0x642>
    return;
 8007b14:	bf00      	nop
 8007b16:	e004      	b.n	8007b22 <HAL_UART_IRQHandler+0x642>
      return;
 8007b18:	bf00      	nop
 8007b1a:	e002      	b.n	8007b22 <HAL_UART_IRQHandler+0x642>
      return;
 8007b1c:	bf00      	nop
 8007b1e:	e000      	b.n	8007b22 <HAL_UART_IRQHandler+0x642>
    return;
 8007b20:	bf00      	nop
  }
}
 8007b22:	37e8      	adds	r7, #232	; 0xe8
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b6c:	b08c      	sub	sp, #48	; 0x30
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	689a      	ldr	r2, [r3, #8]
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	431a      	orrs	r2, r3
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	431a      	orrs	r2, r3
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	69db      	ldr	r3, [r3, #28]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	4baf      	ldr	r3, [pc, #700]	; (8007e54 <UART_SetConfig+0x2ec>)
 8007b98:	4013      	ands	r3, r2
 8007b9a:	697a      	ldr	r2, [r7, #20]
 8007b9c:	6812      	ldr	r2, [r2, #0]
 8007b9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ba0:	430b      	orrs	r3, r1
 8007ba2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	68da      	ldr	r2, [r3, #12]
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4aa4      	ldr	r2, [pc, #656]	; (8007e58 <UART_SetConfig+0x2f0>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d004      	beq.n	8007bd4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007bde:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007be2:	697a      	ldr	r2, [r7, #20]
 8007be4:	6812      	ldr	r2, [r2, #0]
 8007be6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007be8:	430b      	orrs	r3, r1
 8007bea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf2:	f023 010f 	bic.w	r1, r3, #15
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	430a      	orrs	r2, r1
 8007c00:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a95      	ldr	r2, [pc, #596]	; (8007e5c <UART_SetConfig+0x2f4>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d125      	bne.n	8007c58 <UART_SetConfig+0xf0>
 8007c0c:	2003      	movs	r0, #3
 8007c0e:	f7ff fb77 	bl	8007300 <LL_RCC_GetUSARTClockSource>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b03      	cmp	r3, #3
 8007c16:	d81b      	bhi.n	8007c50 <UART_SetConfig+0xe8>
 8007c18:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <UART_SetConfig+0xb8>)
 8007c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1e:	bf00      	nop
 8007c20:	08007c31 	.word	0x08007c31
 8007c24:	08007c41 	.word	0x08007c41
 8007c28:	08007c39 	.word	0x08007c39
 8007c2c:	08007c49 	.word	0x08007c49
 8007c30:	2301      	movs	r3, #1
 8007c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c36:	e042      	b.n	8007cbe <UART_SetConfig+0x156>
 8007c38:	2302      	movs	r3, #2
 8007c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c3e:	e03e      	b.n	8007cbe <UART_SetConfig+0x156>
 8007c40:	2304      	movs	r3, #4
 8007c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c46:	e03a      	b.n	8007cbe <UART_SetConfig+0x156>
 8007c48:	2308      	movs	r3, #8
 8007c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c4e:	e036      	b.n	8007cbe <UART_SetConfig+0x156>
 8007c50:	2310      	movs	r3, #16
 8007c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c56:	e032      	b.n	8007cbe <UART_SetConfig+0x156>
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a7e      	ldr	r2, [pc, #504]	; (8007e58 <UART_SetConfig+0x2f0>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d12a      	bne.n	8007cb8 <UART_SetConfig+0x150>
 8007c62:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007c66:	f7ff fb5b 	bl	8007320 <LL_RCC_GetLPUARTClockSource>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c70:	d01a      	beq.n	8007ca8 <UART_SetConfig+0x140>
 8007c72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c76:	d81b      	bhi.n	8007cb0 <UART_SetConfig+0x148>
 8007c78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c7c:	d00c      	beq.n	8007c98 <UART_SetConfig+0x130>
 8007c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c82:	d815      	bhi.n	8007cb0 <UART_SetConfig+0x148>
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d003      	beq.n	8007c90 <UART_SetConfig+0x128>
 8007c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c8c:	d008      	beq.n	8007ca0 <UART_SetConfig+0x138>
 8007c8e:	e00f      	b.n	8007cb0 <UART_SetConfig+0x148>
 8007c90:	2300      	movs	r3, #0
 8007c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c96:	e012      	b.n	8007cbe <UART_SetConfig+0x156>
 8007c98:	2302      	movs	r3, #2
 8007c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c9e:	e00e      	b.n	8007cbe <UART_SetConfig+0x156>
 8007ca0:	2304      	movs	r3, #4
 8007ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ca6:	e00a      	b.n	8007cbe <UART_SetConfig+0x156>
 8007ca8:	2308      	movs	r3, #8
 8007caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cae:	e006      	b.n	8007cbe <UART_SetConfig+0x156>
 8007cb0:	2310      	movs	r3, #16
 8007cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cb6:	e002      	b.n	8007cbe <UART_SetConfig+0x156>
 8007cb8:	2310      	movs	r3, #16
 8007cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a65      	ldr	r2, [pc, #404]	; (8007e58 <UART_SetConfig+0x2f0>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	f040 8097 	bne.w	8007df8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007cca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007cce:	2b08      	cmp	r3, #8
 8007cd0:	d823      	bhi.n	8007d1a <UART_SetConfig+0x1b2>
 8007cd2:	a201      	add	r2, pc, #4	; (adr r2, 8007cd8 <UART_SetConfig+0x170>)
 8007cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd8:	08007cfd 	.word	0x08007cfd
 8007cdc:	08007d1b 	.word	0x08007d1b
 8007ce0:	08007d05 	.word	0x08007d05
 8007ce4:	08007d1b 	.word	0x08007d1b
 8007ce8:	08007d0b 	.word	0x08007d0b
 8007cec:	08007d1b 	.word	0x08007d1b
 8007cf0:	08007d1b 	.word	0x08007d1b
 8007cf4:	08007d1b 	.word	0x08007d1b
 8007cf8:	08007d13 	.word	0x08007d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cfc:	f7fd fc56 	bl	80055ac <HAL_RCC_GetPCLK1Freq>
 8007d00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d02:	e010      	b.n	8007d26 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d04:	4b56      	ldr	r3, [pc, #344]	; (8007e60 <UART_SetConfig+0x2f8>)
 8007d06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d08:	e00d      	b.n	8007d26 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d0a:	f7fd fbcf 	bl	80054ac <HAL_RCC_GetSysClockFreq>
 8007d0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d10:	e009      	b.n	8007d26 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d18:	e005      	b.n	8007d26 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007d24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f000 812b 	beq.w	8007f84 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d32:	4a4c      	ldr	r2, [pc, #304]	; (8007e64 <UART_SetConfig+0x2fc>)
 8007d34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d38:	461a      	mov	r2, r3
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d40:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	685a      	ldr	r2, [r3, #4]
 8007d46:	4613      	mov	r3, r2
 8007d48:	005b      	lsls	r3, r3, #1
 8007d4a:	4413      	add	r3, r2
 8007d4c:	69ba      	ldr	r2, [r7, #24]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d305      	bcc.n	8007d5e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d58:	69ba      	ldr	r2, [r7, #24]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d903      	bls.n	8007d66 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007d64:	e10e      	b.n	8007f84 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d68:	2200      	movs	r2, #0
 8007d6a:	60bb      	str	r3, [r7, #8]
 8007d6c:	60fa      	str	r2, [r7, #12]
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d72:	4a3c      	ldr	r2, [pc, #240]	; (8007e64 <UART_SetConfig+0x2fc>)
 8007d74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	603b      	str	r3, [r7, #0]
 8007d7e:	607a      	str	r2, [r7, #4]
 8007d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d88:	f7f8 fe40 	bl	8000a0c <__aeabi_uldivmod>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	4610      	mov	r0, r2
 8007d92:	4619      	mov	r1, r3
 8007d94:	f04f 0200 	mov.w	r2, #0
 8007d98:	f04f 0300 	mov.w	r3, #0
 8007d9c:	020b      	lsls	r3, r1, #8
 8007d9e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007da2:	0202      	lsls	r2, r0, #8
 8007da4:	6979      	ldr	r1, [r7, #20]
 8007da6:	6849      	ldr	r1, [r1, #4]
 8007da8:	0849      	lsrs	r1, r1, #1
 8007daa:	2000      	movs	r0, #0
 8007dac:	460c      	mov	r4, r1
 8007dae:	4605      	mov	r5, r0
 8007db0:	eb12 0804 	adds.w	r8, r2, r4
 8007db4:	eb43 0905 	adc.w	r9, r3, r5
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	469a      	mov	sl, r3
 8007dc0:	4693      	mov	fp, r2
 8007dc2:	4652      	mov	r2, sl
 8007dc4:	465b      	mov	r3, fp
 8007dc6:	4640      	mov	r0, r8
 8007dc8:	4649      	mov	r1, r9
 8007dca:	f7f8 fe1f 	bl	8000a0c <__aeabi_uldivmod>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ddc:	d308      	bcc.n	8007df0 <UART_SetConfig+0x288>
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007de4:	d204      	bcs.n	8007df0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	6a3a      	ldr	r2, [r7, #32]
 8007dec:	60da      	str	r2, [r3, #12]
 8007dee:	e0c9      	b.n	8007f84 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8007df0:	2301      	movs	r3, #1
 8007df2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007df6:	e0c5      	b.n	8007f84 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	69db      	ldr	r3, [r3, #28]
 8007dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e00:	d16d      	bne.n	8007ede <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8007e02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e06:	3b01      	subs	r3, #1
 8007e08:	2b07      	cmp	r3, #7
 8007e0a:	d82d      	bhi.n	8007e68 <UART_SetConfig+0x300>
 8007e0c:	a201      	add	r2, pc, #4	; (adr r2, 8007e14 <UART_SetConfig+0x2ac>)
 8007e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e12:	bf00      	nop
 8007e14:	08007e35 	.word	0x08007e35
 8007e18:	08007e3d 	.word	0x08007e3d
 8007e1c:	08007e69 	.word	0x08007e69
 8007e20:	08007e43 	.word	0x08007e43
 8007e24:	08007e69 	.word	0x08007e69
 8007e28:	08007e69 	.word	0x08007e69
 8007e2c:	08007e69 	.word	0x08007e69
 8007e30:	08007e4b 	.word	0x08007e4b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e34:	f7fd fbd0 	bl	80055d8 <HAL_RCC_GetPCLK2Freq>
 8007e38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e3a:	e01b      	b.n	8007e74 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e3c:	4b08      	ldr	r3, [pc, #32]	; (8007e60 <UART_SetConfig+0x2f8>)
 8007e3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e40:	e018      	b.n	8007e74 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e42:	f7fd fb33 	bl	80054ac <HAL_RCC_GetSysClockFreq>
 8007e46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e48:	e014      	b.n	8007e74 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e50:	e010      	b.n	8007e74 <UART_SetConfig+0x30c>
 8007e52:	bf00      	nop
 8007e54:	cfff69f3 	.word	0xcfff69f3
 8007e58:	40008000 	.word	0x40008000
 8007e5c:	40013800 	.word	0x40013800
 8007e60:	00f42400 	.word	0x00f42400
 8007e64:	0800fc10 	.word	0x0800fc10
      default:
        pclk = 0U;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f000 8084 	beq.w	8007f84 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e80:	4a4b      	ldr	r2, [pc, #300]	; (8007fb0 <UART_SetConfig+0x448>)
 8007e82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e86:	461a      	mov	r2, r3
 8007e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e8e:	005a      	lsls	r2, r3, #1
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	085b      	lsrs	r3, r3, #1
 8007e96:	441a      	add	r2, r3
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ea2:	6a3b      	ldr	r3, [r7, #32]
 8007ea4:	2b0f      	cmp	r3, #15
 8007ea6:	d916      	bls.n	8007ed6 <UART_SetConfig+0x36e>
 8007ea8:	6a3b      	ldr	r3, [r7, #32]
 8007eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eae:	d212      	bcs.n	8007ed6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007eb0:	6a3b      	ldr	r3, [r7, #32]
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	f023 030f 	bic.w	r3, r3, #15
 8007eb8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007eba:	6a3b      	ldr	r3, [r7, #32]
 8007ebc:	085b      	lsrs	r3, r3, #1
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	f003 0307 	and.w	r3, r3, #7
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	8bfb      	ldrh	r3, [r7, #30]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	8bfa      	ldrh	r2, [r7, #30]
 8007ed2:	60da      	str	r2, [r3, #12]
 8007ed4:	e056      	b.n	8007f84 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007edc:	e052      	b.n	8007f84 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ede:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	2b07      	cmp	r3, #7
 8007ee6:	d822      	bhi.n	8007f2e <UART_SetConfig+0x3c6>
 8007ee8:	a201      	add	r2, pc, #4	; (adr r2, 8007ef0 <UART_SetConfig+0x388>)
 8007eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eee:	bf00      	nop
 8007ef0:	08007f11 	.word	0x08007f11
 8007ef4:	08007f19 	.word	0x08007f19
 8007ef8:	08007f2f 	.word	0x08007f2f
 8007efc:	08007f1f 	.word	0x08007f1f
 8007f00:	08007f2f 	.word	0x08007f2f
 8007f04:	08007f2f 	.word	0x08007f2f
 8007f08:	08007f2f 	.word	0x08007f2f
 8007f0c:	08007f27 	.word	0x08007f27
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f10:	f7fd fb62 	bl	80055d8 <HAL_RCC_GetPCLK2Freq>
 8007f14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f16:	e010      	b.n	8007f3a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f18:	4b26      	ldr	r3, [pc, #152]	; (8007fb4 <UART_SetConfig+0x44c>)
 8007f1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f1c:	e00d      	b.n	8007f3a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f1e:	f7fd fac5 	bl	80054ac <HAL_RCC_GetSysClockFreq>
 8007f22:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f24:	e009      	b.n	8007f3a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f2c:	e005      	b.n	8007f3a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007f38:	bf00      	nop
    }

    if (pclk != 0U)
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d021      	beq.n	8007f84 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	4a1a      	ldr	r2, [pc, #104]	; (8007fb0 <UART_SetConfig+0x448>)
 8007f46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	085b      	lsrs	r3, r3, #1
 8007f58:	441a      	add	r2, r3
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f62:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f64:	6a3b      	ldr	r3, [r7, #32]
 8007f66:	2b0f      	cmp	r3, #15
 8007f68:	d909      	bls.n	8007f7e <UART_SetConfig+0x416>
 8007f6a:	6a3b      	ldr	r3, [r7, #32]
 8007f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f70:	d205      	bcs.n	8007f7e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f72:	6a3b      	ldr	r3, [r7, #32]
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	60da      	str	r2, [r3, #12]
 8007f7c:	e002      	b.n	8007f84 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	2200      	movs	r2, #0
 8007f98:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007fa0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3730      	adds	r7, #48	; 0x30
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fae:	bf00      	nop
 8007fb0:	0800fc10 	.word	0x0800fc10
 8007fb4:	00f42400 	.word	0x00f42400

08007fb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc4:	f003 0308 	and.w	r3, r3, #8
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00a      	beq.n	8007fe2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	430a      	orrs	r2, r1
 8007fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00a      	beq.n	8008004 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	430a      	orrs	r2, r1
 8008002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008008:	f003 0302 	and.w	r3, r3, #2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00a      	beq.n	8008026 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	430a      	orrs	r2, r1
 8008024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802a:	f003 0304 	and.w	r3, r3, #4
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00a      	beq.n	8008048 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	430a      	orrs	r2, r1
 8008046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804c:	f003 0310 	and.w	r3, r3, #16
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00a      	beq.n	800806a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	430a      	orrs	r2, r1
 8008068:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800806e:	f003 0320 	and.w	r3, r3, #32
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00a      	beq.n	800808c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	430a      	orrs	r2, r1
 800808a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008094:	2b00      	cmp	r3, #0
 8008096:	d01a      	beq.n	80080ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080b6:	d10a      	bne.n	80080ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	430a      	orrs	r2, r1
 80080cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00a      	beq.n	80080f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	430a      	orrs	r2, r1
 80080ee:	605a      	str	r2, [r3, #4]
  }
}
 80080f0:	bf00      	nop
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b098      	sub	sp, #96	; 0x60
 8008100:	af02      	add	r7, sp, #8
 8008102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800810c:	f7fb f954 	bl	80033b8 <HAL_GetTick>
 8008110:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f003 0308 	and.w	r3, r3, #8
 800811c:	2b08      	cmp	r3, #8
 800811e:	d12f      	bne.n	8008180 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008120:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008128:	2200      	movs	r2, #0
 800812a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f88e 	bl	8008250 <UART_WaitOnFlagUntilTimeout>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	d022      	beq.n	8008180 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008142:	e853 3f00 	ldrex	r3, [r3]
 8008146:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800814a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800814e:	653b      	str	r3, [r7, #80]	; 0x50
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	461a      	mov	r2, r3
 8008156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008158:	647b      	str	r3, [r7, #68]	; 0x44
 800815a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800815c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800815e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008160:	e841 2300 	strex	r3, r2, [r1]
 8008164:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008168:	2b00      	cmp	r3, #0
 800816a:	d1e6      	bne.n	800813a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2220      	movs	r2, #32
 8008170:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800817c:	2303      	movs	r3, #3
 800817e:	e063      	b.n	8008248 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 0304 	and.w	r3, r3, #4
 800818a:	2b04      	cmp	r3, #4
 800818c:	d149      	bne.n	8008222 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800818e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008196:	2200      	movs	r2, #0
 8008198:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f857 	bl	8008250 <UART_WaitOnFlagUntilTimeout>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d03c      	beq.n	8008222 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	e853 3f00 	ldrex	r3, [r3]
 80081b4:	623b      	str	r3, [r7, #32]
   return(result);
 80081b6:	6a3b      	ldr	r3, [r7, #32]
 80081b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	461a      	mov	r2, r3
 80081c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081c6:	633b      	str	r3, [r7, #48]	; 0x30
 80081c8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ce:	e841 2300 	strex	r3, r2, [r1]
 80081d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1e6      	bne.n	80081a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	3308      	adds	r3, #8
 80081e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	e853 3f00 	ldrex	r3, [r3]
 80081e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f023 0301 	bic.w	r3, r3, #1
 80081f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	3308      	adds	r3, #8
 80081f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081fa:	61fa      	str	r2, [r7, #28]
 80081fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fe:	69b9      	ldr	r1, [r7, #24]
 8008200:	69fa      	ldr	r2, [r7, #28]
 8008202:	e841 2300 	strex	r3, r2, [r1]
 8008206:	617b      	str	r3, [r7, #20]
   return(result);
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1e5      	bne.n	80081da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2220      	movs	r2, #32
 8008212:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e012      	b.n	8008248 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2220      	movs	r2, #32
 8008226:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2220      	movs	r2, #32
 800822e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2200      	movs	r2, #0
 8008236:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2200      	movs	r2, #0
 800823c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008246:	2300      	movs	r3, #0
}
 8008248:	4618      	mov	r0, r3
 800824a:	3758      	adds	r7, #88	; 0x58
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	603b      	str	r3, [r7, #0]
 800825c:	4613      	mov	r3, r2
 800825e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008260:	e04f      	b.n	8008302 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008268:	d04b      	beq.n	8008302 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800826a:	f7fb f8a5 	bl	80033b8 <HAL_GetTick>
 800826e:	4602      	mov	r2, r0
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	69ba      	ldr	r2, [r7, #24]
 8008276:	429a      	cmp	r2, r3
 8008278:	d302      	bcc.n	8008280 <UART_WaitOnFlagUntilTimeout+0x30>
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e04e      	b.n	8008322 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 0304 	and.w	r3, r3, #4
 800828e:	2b00      	cmp	r3, #0
 8008290:	d037      	beq.n	8008302 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	2b80      	cmp	r3, #128	; 0x80
 8008296:	d034      	beq.n	8008302 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	2b40      	cmp	r3, #64	; 0x40
 800829c:	d031      	beq.n	8008302 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	69db      	ldr	r3, [r3, #28]
 80082a4:	f003 0308 	and.w	r3, r3, #8
 80082a8:	2b08      	cmp	r3, #8
 80082aa:	d110      	bne.n	80082ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2208      	movs	r2, #8
 80082b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f000 f879 	bl	80083ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2208      	movs	r2, #8
 80082be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80082ca:	2301      	movs	r3, #1
 80082cc:	e029      	b.n	8008322 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	69db      	ldr	r3, [r3, #28]
 80082d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082dc:	d111      	bne.n	8008302 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f000 f85f 	bl	80083ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2220      	movs	r2, #32
 80082f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80082fe:	2303      	movs	r3, #3
 8008300:	e00f      	b.n	8008322 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	69da      	ldr	r2, [r3, #28]
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	4013      	ands	r3, r2
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	429a      	cmp	r2, r3
 8008310:	bf0c      	ite	eq
 8008312:	2301      	moveq	r3, #1
 8008314:	2300      	movne	r3, #0
 8008316:	b2db      	uxtb	r3, r3
 8008318:	461a      	mov	r2, r3
 800831a:	79fb      	ldrb	r3, [r7, #7]
 800831c:	429a      	cmp	r2, r3
 800831e:	d0a0      	beq.n	8008262 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800832a:	b480      	push	{r7}
 800832c:	b08f      	sub	sp, #60	; 0x3c
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008338:	6a3b      	ldr	r3, [r7, #32]
 800833a:	e853 3f00 	ldrex	r3, [r3]
 800833e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008346:	637b      	str	r3, [r7, #52]	; 0x34
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	461a      	mov	r2, r3
 800834e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008350:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008352:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008354:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008358:	e841 2300 	strex	r3, r2, [r1]
 800835c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800835e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1e6      	bne.n	8008332 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3308      	adds	r3, #8
 800836a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	e853 3f00 	ldrex	r3, [r3]
 8008372:	60bb      	str	r3, [r7, #8]
   return(result);
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800837a:	633b      	str	r3, [r7, #48]	; 0x30
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	3308      	adds	r3, #8
 8008382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008384:	61ba      	str	r2, [r7, #24]
 8008386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008388:	6979      	ldr	r1, [r7, #20]
 800838a:	69ba      	ldr	r2, [r7, #24]
 800838c:	e841 2300 	strex	r3, r2, [r1]
 8008390:	613b      	str	r3, [r7, #16]
   return(result);
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1e5      	bne.n	8008364 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2220      	movs	r2, #32
 800839c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80083a0:	bf00      	nop
 80083a2:	373c      	adds	r7, #60	; 0x3c
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b095      	sub	sp, #84	; 0x54
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083bc:	e853 3f00 	ldrex	r3, [r3]
 80083c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80083c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	461a      	mov	r2, r3
 80083d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083d2:	643b      	str	r3, [r7, #64]	; 0x40
 80083d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80083d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80083da:	e841 2300 	strex	r3, r2, [r1]
 80083de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1e6      	bne.n	80083b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	3308      	adds	r3, #8
 80083ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ee:	6a3b      	ldr	r3, [r7, #32]
 80083f0:	e853 3f00 	ldrex	r3, [r3]
 80083f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083fc:	f023 0301 	bic.w	r3, r3, #1
 8008400:	64bb      	str	r3, [r7, #72]	; 0x48
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	3308      	adds	r3, #8
 8008408:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800840a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800840c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008412:	e841 2300 	strex	r3, r2, [r1]
 8008416:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1e3      	bne.n	80083e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008422:	2b01      	cmp	r3, #1
 8008424:	d118      	bne.n	8008458 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	e853 3f00 	ldrex	r3, [r3]
 8008432:	60bb      	str	r3, [r7, #8]
   return(result);
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	f023 0310 	bic.w	r3, r3, #16
 800843a:	647b      	str	r3, [r7, #68]	; 0x44
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	461a      	mov	r2, r3
 8008442:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008444:	61bb      	str	r3, [r7, #24]
 8008446:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008448:	6979      	ldr	r1, [r7, #20]
 800844a:	69ba      	ldr	r2, [r7, #24]
 800844c:	e841 2300 	strex	r3, r2, [r1]
 8008450:	613b      	str	r3, [r7, #16]
   return(result);
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1e6      	bne.n	8008426 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2220      	movs	r2, #32
 800845c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800846c:	bf00      	nop
 800846e:	3754      	adds	r7, #84	; 0x54
 8008470:	46bd      	mov	sp, r7
 8008472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008476:	4770      	bx	lr

08008478 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b090      	sub	sp, #64	; 0x40
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008484:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 0320 	and.w	r3, r3, #32
 8008490:	2b00      	cmp	r3, #0
 8008492:	d137      	bne.n	8008504 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008496:	2200      	movs	r2, #0
 8008498:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800849c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	3308      	adds	r3, #8
 80084a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a6:	e853 3f00 	ldrex	r3, [r3]
 80084aa:	623b      	str	r3, [r7, #32]
   return(result);
 80084ac:	6a3b      	ldr	r3, [r7, #32]
 80084ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80084b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3308      	adds	r3, #8
 80084ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084bc:	633a      	str	r2, [r7, #48]	; 0x30
 80084be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084c4:	e841 2300 	strex	r3, r2, [r1]
 80084c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1e5      	bne.n	800849c <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80084d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	e853 3f00 	ldrex	r3, [r3]
 80084dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084e4:	637b      	str	r3, [r7, #52]	; 0x34
 80084e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	461a      	mov	r2, r3
 80084ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ee:	61fb      	str	r3, [r7, #28]
 80084f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f2:	69b9      	ldr	r1, [r7, #24]
 80084f4:	69fa      	ldr	r2, [r7, #28]
 80084f6:	e841 2300 	strex	r3, r2, [r1]
 80084fa:	617b      	str	r3, [r7, #20]
   return(result);
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1e6      	bne.n	80084d0 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008502:	e002      	b.n	800850a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008504:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008506:	f7f9 ffc3 	bl	8002490 <HAL_UART_TxCpltCallback>
}
 800850a:	bf00      	nop
 800850c:	3740      	adds	r7, #64	; 0x40
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b084      	sub	sp, #16
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f7ff fb01 	bl	8007b28 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008526:	bf00      	nop
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b086      	sub	sp, #24
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800853a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008542:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800854a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008556:	2b80      	cmp	r3, #128	; 0x80
 8008558:	d109      	bne.n	800856e <UART_DMAError+0x40>
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	2b21      	cmp	r3, #33	; 0x21
 800855e:	d106      	bne.n	800856e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	2200      	movs	r2, #0
 8008564:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008568:	6978      	ldr	r0, [r7, #20]
 800856a:	f7ff fede 	bl	800832a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008578:	2b40      	cmp	r3, #64	; 0x40
 800857a:	d109      	bne.n	8008590 <UART_DMAError+0x62>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2b22      	cmp	r3, #34	; 0x22
 8008580:	d106      	bne.n	8008590 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	2200      	movs	r2, #0
 8008586:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800858a:	6978      	ldr	r0, [r7, #20]
 800858c:	f7ff ff0e 	bl	80083ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008596:	f043 0210 	orr.w	r2, r3, #16
 800859a:	697b      	ldr	r3, [r7, #20]
 800859c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085a0:	6978      	ldr	r0, [r7, #20]
 80085a2:	f7ff facb 	bl	8007b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085a6:	bf00      	nop
 80085a8:	3718      	adds	r7, #24
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b084      	sub	sp, #16
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2200      	movs	r2, #0
 80085c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f7ff fab5 	bl	8007b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80085d2:	bf00      	nop
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}

080085da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b088      	sub	sp, #32
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	e853 3f00 	ldrex	r3, [r3]
 80085ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085f6:	61fb      	str	r3, [r7, #28]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	461a      	mov	r2, r3
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	61bb      	str	r3, [r7, #24]
 8008602:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008604:	6979      	ldr	r1, [r7, #20]
 8008606:	69ba      	ldr	r2, [r7, #24]
 8008608:	e841 2300 	strex	r3, r2, [r1]
 800860c:	613b      	str	r3, [r7, #16]
   return(result);
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1e6      	bne.n	80085e2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2220      	movs	r2, #32
 8008618:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7f9 ff34 	bl	8002490 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008628:	bf00      	nop
 800862a:	3720      	adds	r7, #32
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008630:	b480      	push	{r7}
 8008632:	b083      	sub	sp, #12
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008638:	bf00      	nop
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800864c:	bf00      	nop
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008660:	bf00      	nop
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr

0800866c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800867a:	2b01      	cmp	r3, #1
 800867c:	d101      	bne.n	8008682 <HAL_UARTEx_DisableFifoMode+0x16>
 800867e:	2302      	movs	r3, #2
 8008680:	e027      	b.n	80086d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2224      	movs	r2, #36	; 0x24
 800868e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f022 0201 	bic.w	r2, r2, #1
 80086a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80086b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2220      	movs	r2, #32
 80086c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr

080086de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b084      	sub	sp, #16
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d101      	bne.n	80086f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80086f2:	2302      	movs	r3, #2
 80086f4:	e02d      	b.n	8008752 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2224      	movs	r2, #36	; 0x24
 8008702:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f022 0201 	bic.w	r2, r2, #1
 800871c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	683a      	ldr	r2, [r7, #0]
 800872e:	430a      	orrs	r2, r1
 8008730:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 f850 	bl	80087d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2220      	movs	r2, #32
 8008744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3710      	adds	r7, #16
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b084      	sub	sp, #16
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800876a:	2b01      	cmp	r3, #1
 800876c:	d101      	bne.n	8008772 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800876e:	2302      	movs	r3, #2
 8008770:	e02d      	b.n	80087ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2224      	movs	r2, #36	; 0x24
 800877e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f022 0201 	bic.w	r2, r2, #1
 8008798:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	683a      	ldr	r2, [r7, #0]
 80087aa:	430a      	orrs	r2, r1
 80087ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f812 	bl	80087d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2220      	movs	r2, #32
 80087c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
	...

080087d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80087d8:	b480      	push	{r7}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d108      	bne.n	80087fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80087f8:	e031      	b.n	800885e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80087fa:	2308      	movs	r3, #8
 80087fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80087fe:	2308      	movs	r3, #8
 8008800:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	0e5b      	lsrs	r3, r3, #25
 800880a:	b2db      	uxtb	r3, r3
 800880c:	f003 0307 	and.w	r3, r3, #7
 8008810:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	0f5b      	lsrs	r3, r3, #29
 800881a:	b2db      	uxtb	r3, r3
 800881c:	f003 0307 	and.w	r3, r3, #7
 8008820:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008822:	7bbb      	ldrb	r3, [r7, #14]
 8008824:	7b3a      	ldrb	r2, [r7, #12]
 8008826:	4911      	ldr	r1, [pc, #68]	; (800886c <UARTEx_SetNbDataToProcess+0x94>)
 8008828:	5c8a      	ldrb	r2, [r1, r2]
 800882a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800882e:	7b3a      	ldrb	r2, [r7, #12]
 8008830:	490f      	ldr	r1, [pc, #60]	; (8008870 <UARTEx_SetNbDataToProcess+0x98>)
 8008832:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008834:	fb93 f3f2 	sdiv	r3, r3, r2
 8008838:	b29a      	uxth	r2, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008840:	7bfb      	ldrb	r3, [r7, #15]
 8008842:	7b7a      	ldrb	r2, [r7, #13]
 8008844:	4909      	ldr	r1, [pc, #36]	; (800886c <UARTEx_SetNbDataToProcess+0x94>)
 8008846:	5c8a      	ldrb	r2, [r1, r2]
 8008848:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800884c:	7b7a      	ldrb	r2, [r7, #13]
 800884e:	4908      	ldr	r1, [pc, #32]	; (8008870 <UARTEx_SetNbDataToProcess+0x98>)
 8008850:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008852:	fb93 f3f2 	sdiv	r3, r3, r2
 8008856:	b29a      	uxth	r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800885e:	bf00      	nop
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	0800fc28 	.word	0x0800fc28
 8008870:	0800fc30 	.word	0x0800fc30

08008874 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800887c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008880:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008888:	b29a      	uxth	r2, r3
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	b29b      	uxth	r3, r3
 800888e:	43db      	mvns	r3, r3
 8008890:	b29b      	uxth	r3, r3
 8008892:	4013      	ands	r3, r2
 8008894:	b29a      	uxth	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3714      	adds	r7, #20
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr

080088aa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80088aa:	b480      	push	{r7}
 80088ac:	b085      	sub	sp, #20
 80088ae:	af00      	add	r7, sp, #0
 80088b0:	60f8      	str	r0, [r7, #12]
 80088b2:	1d3b      	adds	r3, r7, #4
 80088b4:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr

080088e6 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b088      	sub	sp, #32
 80088ea:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80088ec:	2300      	movs	r3, #0
 80088ee:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80088f0:	f107 0308 	add.w	r3, r7, #8
 80088f4:	2218      	movs	r2, #24
 80088f6:	2100      	movs	r1, #0
 80088f8:	4618      	mov	r0, r3
 80088fa:	f001 f8d8 	bl	8009aae <Osal_MemSet>
  rq.ogf = 0x3f;
 80088fe:	233f      	movs	r3, #63	; 0x3f
 8008900:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8008902:	2381      	movs	r3, #129	; 0x81
 8008904:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008906:	1dfb      	adds	r3, r7, #7
 8008908:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800890a:	2301      	movs	r3, #1
 800890c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800890e:	f107 0308 	add.w	r3, r7, #8
 8008912:	2100      	movs	r1, #0
 8008914:	4618      	mov	r0, r3
 8008916:	f001 fb53 	bl	8009fc0 <hci_send_req>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	da01      	bge.n	8008924 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008920:	23ff      	movs	r3, #255	; 0xff
 8008922:	e000      	b.n	8008926 <aci_gap_set_non_discoverable+0x40>
  return status;
 8008924:	79fb      	ldrb	r3, [r7, #7]
}
 8008926:	4618      	mov	r0, r3
 8008928:	3720      	adds	r7, #32
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800892e:	b5b0      	push	{r4, r5, r7, lr}
 8008930:	b0ce      	sub	sp, #312	; 0x138
 8008932:	af00      	add	r7, sp, #0
 8008934:	4605      	mov	r5, r0
 8008936:	460c      	mov	r4, r1
 8008938:	4610      	mov	r0, r2
 800893a:	4619      	mov	r1, r3
 800893c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008940:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008944:	462a      	mov	r2, r5
 8008946:	701a      	strb	r2, [r3, #0]
 8008948:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800894c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008950:	4622      	mov	r2, r4
 8008952:	801a      	strh	r2, [r3, #0]
 8008954:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008958:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800895c:	4602      	mov	r2, r0
 800895e:	801a      	strh	r2, [r3, #0]
 8008960:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008964:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008968:	460a      	mov	r2, r1
 800896a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800896c:	f107 0310 	add.w	r3, r7, #16
 8008970:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8008974:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008978:	3308      	adds	r3, #8
 800897a:	f107 0210 	add.w	r2, r7, #16
 800897e:	4413      	add	r3, r2
 8008980:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008984:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008988:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800898c:	4413      	add	r3, r2
 800898e:	3309      	adds	r3, #9
 8008990:	f107 0210 	add.w	r2, r7, #16
 8008994:	4413      	add	r3, r2
 8008996:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800899a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800899e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80089a2:	2200      	movs	r2, #0
 80089a4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80089a6:	2300      	movs	r3, #0
 80089a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 80089ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80089b0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80089b4:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80089b8:	7812      	ldrb	r2, [r2, #0]
 80089ba:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80089bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089c0:	3301      	adds	r3, #1
 80089c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80089c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80089ca:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80089ce:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 80089d2:	8812      	ldrh	r2, [r2, #0]
 80089d4:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80089d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089dc:	3302      	adds	r3, #2
 80089de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80089e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80089e6:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80089ea:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 80089ee:	8812      	ldrh	r2, [r2, #0]
 80089f0:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80089f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80089f8:	3302      	adds	r3, #2
 80089fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80089fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008a02:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008a06:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008a0a:	7812      	ldrb	r2, [r2, #0]
 8008a0c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008a0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a12:	3301      	adds	r3, #1
 8008a14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8008a18:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008a1c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008a20:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008a22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a26:	3301      	adds	r3, #1
 8008a28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8008a2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008a30:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008a34:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8008a36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8008a40:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008a44:	3308      	adds	r3, #8
 8008a46:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008a4a:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f001 f81d 	bl	8009a8e <Osal_MemCpy>
    index_input += Local_Name_Length;
 8008a54:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008a58:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8008a62:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008a66:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008a6a:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008a6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008a70:	3301      	adds	r3, #1
 8008a72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8008a76:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008a80:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8008a84:	4618      	mov	r0, r3
 8008a86:	f001 f802 	bl	8009a8e <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8008a8a:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008a8e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008a92:	4413      	add	r3, r2
 8008a94:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8008a98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008a9c:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8008aa0:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008aa2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008aa6:	3302      	adds	r3, #2
 8008aa8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8008aac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ab0:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008ab4:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008ab6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008aba:	3302      	adds	r3, #2
 8008abc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008ac0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ac4:	2218      	movs	r2, #24
 8008ac6:	2100      	movs	r1, #0
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 fff0 	bl	8009aae <Osal_MemSet>
  rq.ogf = 0x3f;
 8008ace:	233f      	movs	r3, #63	; 0x3f
 8008ad0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8008ad4:	2383      	movs	r3, #131	; 0x83
 8008ad6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008ada:	f107 0310 	add.w	r3, r7, #16
 8008ade:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008ae2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ae6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008aea:	f107 030f 	add.w	r3, r7, #15
 8008aee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008af2:	2301      	movs	r3, #1
 8008af4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008af8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008afc:	2100      	movs	r1, #0
 8008afe:	4618      	mov	r0, r3
 8008b00:	f001 fa5e 	bl	8009fc0 <hci_send_req>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	da01      	bge.n	8008b0e <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8008b0a:	23ff      	movs	r3, #255	; 0xff
 8008b0c:	e004      	b.n	8008b18 <aci_gap_set_discoverable+0x1ea>
  return status;
 8008b0e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008b12:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008b16:	781b      	ldrb	r3, [r3, #0]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bdb0      	pop	{r4, r5, r7, pc}

08008b22 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b0cc      	sub	sp, #304	; 0x130
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	4602      	mov	r2, r0
 8008b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b2e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008b32:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8008b34:	f107 0310 	add.w	r3, r7, #16
 8008b38:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008b3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008b40:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008b44:	2200      	movs	r2, #0
 8008b46:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8008b4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008b52:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008b56:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008b5a:	7812      	ldrb	r2, [r2, #0]
 8008b5c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008b5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b62:	3301      	adds	r3, #1
 8008b64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008b68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008b6c:	2218      	movs	r2, #24
 8008b6e:	2100      	movs	r1, #0
 8008b70:	4618      	mov	r0, r3
 8008b72:	f000 ff9c 	bl	8009aae <Osal_MemSet>
  rq.ogf = 0x3f;
 8008b76:	233f      	movs	r3, #63	; 0x3f
 8008b78:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8008b7c:	2385      	movs	r3, #133	; 0x85
 8008b7e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008b82:	f107 0310 	add.w	r3, r7, #16
 8008b86:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008b8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008b8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008b92:	f107 030f 	add.w	r3, r7, #15
 8008b96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008ba0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f001 fa0a 	bl	8009fc0 <hci_send_req>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	da01      	bge.n	8008bb6 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8008bb2:	23ff      	movs	r3, #255	; 0xff
 8008bb4:	e004      	b.n	8008bc0 <aci_gap_set_io_capability+0x9e>
  return status;
 8008bb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008bbe:	781b      	ldrb	r3, [r3, #0]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8008bca:	b5b0      	push	{r4, r5, r7, lr}
 8008bcc:	b0cc      	sub	sp, #304	; 0x130
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	4605      	mov	r5, r0
 8008bd2:	460c      	mov	r4, r1
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bdc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008be0:	462a      	mov	r2, r5
 8008be2:	701a      	strb	r2, [r3, #0]
 8008be4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008be8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008bec:	4622      	mov	r2, r4
 8008bee:	701a      	strb	r2, [r3, #0]
 8008bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008bf4:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	701a      	strb	r2, [r3, #0]
 8008bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008c04:	460a      	mov	r2, r1
 8008c06:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8008c08:	f107 0310 	add.w	r3, r7, #16
 8008c0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c14:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008c18:	2200      	movs	r2, #0
 8008c1a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8008c22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c26:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c2a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008c2e:	7812      	ldrb	r2, [r2, #0]
 8008c30:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008c32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c36:	3301      	adds	r3, #1
 8008c38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8008c3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c40:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c44:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008c48:	7812      	ldrb	r2, [r2, #0]
 8008c4a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008c4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c50:	3301      	adds	r3, #1
 8008c52:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8008c56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c5a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c5e:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008c62:	7812      	ldrb	r2, [r2, #0]
 8008c64:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008c66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8008c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c74:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008c78:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8008c7c:	7812      	ldrb	r2, [r2, #0]
 8008c7e:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8008c80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c84:	3301      	adds	r3, #1
 8008c86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8008c8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008c8e:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8008c92:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8008c94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008c98:	3301      	adds	r3, #1
 8008c9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8008c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ca2:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8008ca6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008ca8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cac:	3301      	adds	r3, #1
 8008cae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8008cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cb6:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008cba:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008cbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8008cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008cca:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8008cce:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8008cd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cd6:	3304      	adds	r3, #4
 8008cd8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8008cdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ce0:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8008ce4:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8008ce6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008cea:	3301      	adds	r3, #1
 8008cec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008cf0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008cf4:	2218      	movs	r2, #24
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f000 fed8 	bl	8009aae <Osal_MemSet>
  rq.ogf = 0x3f;
 8008cfe:	233f      	movs	r3, #63	; 0x3f
 8008d00:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8008d04:	2386      	movs	r3, #134	; 0x86
 8008d06:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008d0a:	f107 0310 	add.w	r3, r7, #16
 8008d0e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008d12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008d1a:	f107 030f 	add.w	r3, r7, #15
 8008d1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008d22:	2301      	movs	r3, #1
 8008d24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008d28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008d2c:	2100      	movs	r1, #0
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f001 f946 	bl	8009fc0 <hci_send_req>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	da01      	bge.n	8008d3e <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8008d3a:	23ff      	movs	r3, #255	; 0xff
 8008d3c:	e004      	b.n	8008d48 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8008d3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d42:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008d46:	781b      	ldrb	r3, [r3, #0]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bdb0      	pop	{r4, r5, r7, pc}

08008d52 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b0cc      	sub	sp, #304	; 0x130
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	4602      	mov	r2, r0
 8008d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008d62:	6019      	str	r1, [r3, #0]
 8008d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d68:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008d6c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8008d6e:	f107 0310 	add.w	r3, r7, #16
 8008d72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008d76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008d7a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008d7e:	2200      	movs	r2, #0
 8008d80:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008d82:	2300      	movs	r3, #0
 8008d84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008d88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008d8c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008d90:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008d94:	8812      	ldrh	r2, [r2, #0]
 8008d96:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008d98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d9c:	3302      	adds	r3, #2
 8008d9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 8008da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008da6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008daa:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008dae:	6812      	ldr	r2, [r2, #0]
 8008db0:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8008db4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008db8:	3304      	adds	r3, #4
 8008dba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008dbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008dc2:	2218      	movs	r2, #24
 8008dc4:	2100      	movs	r1, #0
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 fe71 	bl	8009aae <Osal_MemSet>
  rq.ogf = 0x3f;
 8008dcc:	233f      	movs	r3, #63	; 0x3f
 8008dce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 8008dd2:	2388      	movs	r3, #136	; 0x88
 8008dd4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008dd8:	f107 0310 	add.w	r3, r7, #16
 8008ddc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008de0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008de4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008de8:	f107 030f 	add.w	r3, r7, #15
 8008dec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008df0:	2301      	movs	r3, #1
 8008df2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008df6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008dfa:	2100      	movs	r1, #0
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f001 f8df 	bl	8009fc0 <hci_send_req>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	da01      	bge.n	8008e0c <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8008e08:	23ff      	movs	r3, #255	; 0xff
 8008e0a:	e004      	b.n	8008e16 <aci_gap_pass_key_resp+0xc4>
  return status;
 8008e0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e10:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008e14:	781b      	ldrb	r3, [r3, #0]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8008e20:	b590      	push	{r4, r7, lr}
 8008e22:	b0cd      	sub	sp, #308	; 0x134
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	4604      	mov	r4, r0
 8008e28:	4608      	mov	r0, r1
 8008e2a:	4611      	mov	r1, r2
 8008e2c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e30:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8008e34:	6013      	str	r3, [r2, #0]
 8008e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e3a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008e3e:	4622      	mov	r2, r4
 8008e40:	701a      	strb	r2, [r3, #0]
 8008e42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e46:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	701a      	strb	r2, [r3, #0]
 8008e4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008e52:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008e56:	460a      	mov	r2, r1
 8008e58:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8008e5a:	f107 0310 	add.w	r3, r7, #16
 8008e5e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8008e62:	f107 0308 	add.w	r3, r7, #8
 8008e66:	2207      	movs	r2, #7
 8008e68:	2100      	movs	r1, #0
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f000 fe1f 	bl	8009aae <Osal_MemSet>
  int index_input = 0;
 8008e70:	2300      	movs	r3, #0
 8008e72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8008e76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e7a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e7e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008e82:	7812      	ldrb	r2, [r2, #0]
 8008e84:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008e86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 8008e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008e98:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008e9c:	7812      	ldrb	r2, [r2, #0]
 8008e9e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008ea0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8008eaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008eae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008eb2:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008eb6:	7812      	ldrb	r2, [r2, #0]
 8008eb8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008eba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008ec4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ec8:	2218      	movs	r2, #24
 8008eca:	2100      	movs	r1, #0
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f000 fdee 	bl	8009aae <Osal_MemSet>
  rq.ogf = 0x3f;
 8008ed2:	233f      	movs	r3, #63	; 0x3f
 8008ed4:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8008ed8:	238a      	movs	r3, #138	; 0x8a
 8008eda:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008ede:	f107 0310 	add.w	r3, r7, #16
 8008ee2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008ee6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008eea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8008eee:	f107 0308 	add.w	r3, r7, #8
 8008ef2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8008ef6:	2307      	movs	r3, #7
 8008ef8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008efc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f00:	2100      	movs	r1, #0
 8008f02:	4618      	mov	r0, r3
 8008f04:	f001 f85c 	bl	8009fc0 <hci_send_req>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	da01      	bge.n	8008f12 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8008f0e:	23ff      	movs	r3, #255	; 0xff
 8008f10:	e02e      	b.n	8008f70 <aci_gap_init+0x150>
  if ( resp.Status )
 8008f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f16:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d005      	beq.n	8008f2c <aci_gap_init+0x10c>
    return resp.Status;
 8008f20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f24:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	e021      	b.n	8008f70 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8008f2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f30:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008f34:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008f38:	b29a      	uxth	r2, r3
 8008f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8008f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f4a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008f4e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008f58:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8008f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f5e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8008f62:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008f6c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd90      	pop	{r4, r7, pc}

08008f7a <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b0cc      	sub	sp, #304	; 0x130
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	4602      	mov	r2, r0
 8008f82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008f8a:	6019      	str	r1, [r3, #0]
 8008f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f90:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008f94:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8008f96:	f107 0310 	add.w	r3, r7, #16
 8008f9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008f9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fa2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008faa:	2300      	movs	r3, #0
 8008fac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8008fb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fb4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008fb8:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008fbc:	7812      	ldrb	r2, [r2, #0]
 8008fbe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008fc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8008fca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fce:	1c58      	adds	r0, r3, #1
 8008fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fd4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008fd8:	781a      	ldrb	r2, [r3, #0]
 8008fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8008fe2:	6819      	ldr	r1, [r3, #0]
 8008fe4:	f000 fd53 	bl	8009a8e <Osal_MemCpy>
  index_input += AdvDataLen;
 8008fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fec:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008ff6:	4413      	add	r3, r2
 8008ff8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008ffc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009000:	2218      	movs	r2, #24
 8009002:	2100      	movs	r1, #0
 8009004:	4618      	mov	r0, r3
 8009006:	f000 fd52 	bl	8009aae <Osal_MemSet>
  rq.ogf = 0x3f;
 800900a:	233f      	movs	r3, #63	; 0x3f
 800900c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8009010:	238e      	movs	r3, #142	; 0x8e
 8009012:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009016:	f107 0310 	add.w	r3, r7, #16
 800901a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800901e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009022:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009026:	f107 030f 	add.w	r3, r7, #15
 800902a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800902e:	2301      	movs	r3, #1
 8009030:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009034:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009038:	2100      	movs	r1, #0
 800903a:	4618      	mov	r0, r3
 800903c:	f000 ffc0 	bl	8009fc0 <hci_send_req>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	da01      	bge.n	800904a <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8009046:	23ff      	movs	r3, #255	; 0xff
 8009048:	e004      	b.n	8009054 <aci_gap_update_adv_data+0xda>
  return status;
 800904a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800904e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009052:	781b      	ldrb	r3, [r3, #0]
}
 8009054:	4618      	mov	r0, r3
 8009056:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b088      	sub	sp, #32
 8009062:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009064:	2300      	movs	r3, #0
 8009066:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009068:	f107 0308 	add.w	r3, r7, #8
 800906c:	2218      	movs	r2, #24
 800906e:	2100      	movs	r1, #0
 8009070:	4618      	mov	r0, r3
 8009072:	f000 fd1c 	bl	8009aae <Osal_MemSet>
  rq.ogf = 0x3f;
 8009076:	233f      	movs	r3, #63	; 0x3f
 8009078:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800907a:	2392      	movs	r3, #146	; 0x92
 800907c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800907e:	1dfb      	adds	r3, r7, #7
 8009080:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009082:	2301      	movs	r3, #1
 8009084:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009086:	f107 0308 	add.w	r3, r7, #8
 800908a:	2100      	movs	r1, #0
 800908c:	4618      	mov	r0, r3
 800908e:	f000 ff97 	bl	8009fc0 <hci_send_req>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	da01      	bge.n	800909c <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009098:	23ff      	movs	r3, #255	; 0xff
 800909a:	e000      	b.n	800909e <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800909c:	79fb      	ldrb	r3, [r7, #7]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3720      	adds	r7, #32
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b0cc      	sub	sp, #304	; 0x130
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	4602      	mov	r2, r0
 80090ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090b2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80090b6:	801a      	strh	r2, [r3, #0]
 80090b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090bc:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80090c0:	460a      	mov	r2, r1
 80090c2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 80090c4:	f107 0310 	add.w	r3, r7, #16
 80090c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80090cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090d0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80090d4:	2200      	movs	r2, #0
 80090d6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80090d8:	2300      	movs	r3, #0
 80090da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80090de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80090e6:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80090ea:	8812      	ldrh	r2, [r2, #0]
 80090ec:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80090ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090f2:	3302      	adds	r3, #2
 80090f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80090f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80090fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009100:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009104:	7812      	ldrb	r2, [r2, #0]
 8009106:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009108:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800910c:	3301      	adds	r3, #1
 800910e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009112:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009116:	2218      	movs	r2, #24
 8009118:	2100      	movs	r1, #0
 800911a:	4618      	mov	r0, r3
 800911c:	f000 fcc7 	bl	8009aae <Osal_MemSet>
  rq.ogf = 0x3f;
 8009120:	233f      	movs	r3, #63	; 0x3f
 8009122:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8009126:	23a5      	movs	r3, #165	; 0xa5
 8009128:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800912c:	f107 0310 	add.w	r3, r7, #16
 8009130:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009134:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009138:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800913c:	f107 030f 	add.w	r3, r7, #15
 8009140:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009144:	2301      	movs	r3, #1
 8009146:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800914a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800914e:	2100      	movs	r1, #0
 8009150:	4618      	mov	r0, r3
 8009152:	f000 ff35 	bl	8009fc0 <hci_send_req>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	da01      	bge.n	8009160 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800915c:	23ff      	movs	r3, #255	; 0xff
 800915e:	e004      	b.n	800916a <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8009160:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009164:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009168:	781b      	ldrb	r3, [r3, #0]
}
 800916a:	4618      	mov	r0, r3
 800916c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b088      	sub	sp, #32
 8009178:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800917a:	2300      	movs	r3, #0
 800917c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800917e:	f107 0308 	add.w	r3, r7, #8
 8009182:	2218      	movs	r2, #24
 8009184:	2100      	movs	r1, #0
 8009186:	4618      	mov	r0, r3
 8009188:	f000 fc91 	bl	8009aae <Osal_MemSet>
  rq.ogf = 0x3f;
 800918c:	233f      	movs	r3, #63	; 0x3f
 800918e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8009190:	f240 1301 	movw	r3, #257	; 0x101
 8009194:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009196:	1dfb      	adds	r3, r7, #7
 8009198:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800919a:	2301      	movs	r3, #1
 800919c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800919e:	f107 0308 	add.w	r3, r7, #8
 80091a2:	2100      	movs	r1, #0
 80091a4:	4618      	mov	r0, r3
 80091a6:	f000 ff0b 	bl	8009fc0 <hci_send_req>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	da01      	bge.n	80091b4 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80091b0:	23ff      	movs	r3, #255	; 0xff
 80091b2:	e000      	b.n	80091b6 <aci_gatt_init+0x42>
  return status;
 80091b4:	79fb      	ldrb	r3, [r7, #7]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3720      	adds	r7, #32
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80091be:	b590      	push	{r4, r7, lr}
 80091c0:	b0cf      	sub	sp, #316	; 0x13c
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	4604      	mov	r4, r0
 80091c6:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80091ca:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 80091ce:	6001      	str	r1, [r0, #0]
 80091d0:	4610      	mov	r0, r2
 80091d2:	4619      	mov	r1, r3
 80091d4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80091d8:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80091dc:	4622      	mov	r2, r4
 80091de:	701a      	strb	r2, [r3, #0]
 80091e0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80091e4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80091e8:	4602      	mov	r2, r0
 80091ea:	701a      	strb	r2, [r3, #0]
 80091ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80091f0:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80091f4:	460a      	mov	r2, r1
 80091f6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80091f8:	f107 0310 	add.w	r3, r7, #16
 80091fc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8009200:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009204:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	2b01      	cmp	r3, #1
 800920c:	d00a      	beq.n	8009224 <aci_gatt_add_service+0x66>
 800920e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009212:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	2b02      	cmp	r3, #2
 800921a:	d101      	bne.n	8009220 <aci_gatt_add_service+0x62>
 800921c:	2311      	movs	r3, #17
 800921e:	e002      	b.n	8009226 <aci_gatt_add_service+0x68>
 8009220:	2301      	movs	r3, #1
 8009222:	e000      	b.n	8009226 <aci_gatt_add_service+0x68>
 8009224:	2303      	movs	r3, #3
 8009226:	f107 0210 	add.w	r2, r7, #16
 800922a:	4413      	add	r3, r2
 800922c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009230:	f107 030c 	add.w	r3, r7, #12
 8009234:	2203      	movs	r2, #3
 8009236:	2100      	movs	r1, #0
 8009238:	4618      	mov	r0, r3
 800923a:	f000 fc38 	bl	8009aae <Osal_MemSet>
  int index_input = 0;
 800923e:	2300      	movs	r3, #0
 8009240:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8009244:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009248:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800924c:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8009250:	7812      	ldrb	r2, [r2, #0]
 8009252:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009254:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009258:	3301      	adds	r3, #1
 800925a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800925e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009262:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009266:	781b      	ldrb	r3, [r3, #0]
 8009268:	2b01      	cmp	r3, #1
 800926a:	d002      	beq.n	8009272 <aci_gatt_add_service+0xb4>
 800926c:	2b02      	cmp	r3, #2
 800926e:	d004      	beq.n	800927a <aci_gatt_add_service+0xbc>
 8009270:	e007      	b.n	8009282 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8009272:	2302      	movs	r3, #2
 8009274:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009278:	e005      	b.n	8009286 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800927a:	2310      	movs	r3, #16
 800927c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009280:	e001      	b.n	8009286 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8009282:	2397      	movs	r3, #151	; 0x97
 8009284:	e06c      	b.n	8009360 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8009286:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800928a:	1c58      	adds	r0, r3, #1
 800928c:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8009290:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009294:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009298:	6819      	ldr	r1, [r3, #0]
 800929a:	f000 fbf8 	bl	8009a8e <Osal_MemCpy>
    index_input += size;
 800929e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80092a2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80092a6:	4413      	add	r3, r2
 80092a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 80092ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092b0:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80092b4:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80092b8:	7812      	ldrb	r2, [r2, #0]
 80092ba:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80092bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092c0:	3301      	adds	r3, #1
 80092c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80092c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80092ca:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80092ce:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80092d2:	7812      	ldrb	r2, [r2, #0]
 80092d4:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80092d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80092da:	3301      	adds	r3, #1
 80092dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80092e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80092e4:	2218      	movs	r2, #24
 80092e6:	2100      	movs	r1, #0
 80092e8:	4618      	mov	r0, r3
 80092ea:	f000 fbe0 	bl	8009aae <Osal_MemSet>
  rq.ogf = 0x3f;
 80092ee:	233f      	movs	r3, #63	; 0x3f
 80092f0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 80092f4:	f44f 7381 	mov.w	r3, #258	; 0x102
 80092f8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80092fc:	f107 0310 	add.w	r3, r7, #16
 8009300:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009304:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009308:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800930c:	f107 030c 	add.w	r3, r7, #12
 8009310:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8009314:	2303      	movs	r3, #3
 8009316:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800931a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800931e:	2100      	movs	r1, #0
 8009320:	4618      	mov	r0, r3
 8009322:	f000 fe4d 	bl	8009fc0 <hci_send_req>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	da01      	bge.n	8009330 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800932c:	23ff      	movs	r3, #255	; 0xff
 800932e:	e017      	b.n	8009360 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8009330:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009334:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d005      	beq.n	800934a <aci_gatt_add_service+0x18c>
    return resp.Status;
 800933e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009342:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009346:	781b      	ldrb	r3, [r3, #0]
 8009348:	e00a      	b.n	8009360 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800934a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800934e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009352:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009356:	b29a      	uxth	r2, r3
 8009358:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800935c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8009366:	46bd      	mov	sp, r7
 8009368:	bd90      	pop	{r4, r7, pc}

0800936a <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800936a:	b590      	push	{r4, r7, lr}
 800936c:	b0d1      	sub	sp, #324	; 0x144
 800936e:	af00      	add	r7, sp, #0
 8009370:	4604      	mov	r4, r0
 8009372:	4608      	mov	r0, r1
 8009374:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8009378:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800937c:	600a      	str	r2, [r1, #0]
 800937e:	4619      	mov	r1, r3
 8009380:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009384:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009388:	4622      	mov	r2, r4
 800938a:	801a      	strh	r2, [r3, #0]
 800938c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009390:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009394:	4602      	mov	r2, r0
 8009396:	701a      	strb	r2, [r3, #0]
 8009398:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800939c:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 80093a0:	460a      	mov	r2, r1
 80093a2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80093a4:	f107 0318 	add.w	r3, r7, #24
 80093a8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80093ac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80093b0:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d00a      	beq.n	80093d0 <aci_gatt_add_char+0x66>
 80093ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80093be:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	2b02      	cmp	r3, #2
 80093c6:	d101      	bne.n	80093cc <aci_gatt_add_char+0x62>
 80093c8:	2313      	movs	r3, #19
 80093ca:	e002      	b.n	80093d2 <aci_gatt_add_char+0x68>
 80093cc:	2303      	movs	r3, #3
 80093ce:	e000      	b.n	80093d2 <aci_gatt_add_char+0x68>
 80093d0:	2305      	movs	r3, #5
 80093d2:	f107 0218 	add.w	r2, r7, #24
 80093d6:	4413      	add	r3, r2
 80093d8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80093dc:	f107 0314 	add.w	r3, r7, #20
 80093e0:	2203      	movs	r2, #3
 80093e2:	2100      	movs	r1, #0
 80093e4:	4618      	mov	r0, r3
 80093e6:	f000 fb62 	bl	8009aae <Osal_MemSet>
  int index_input = 0;
 80093ea:	2300      	movs	r3, #0
 80093ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 80093f0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80093f4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80093f8:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 80093fc:	8812      	ldrh	r2, [r2, #0]
 80093fe:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009400:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009404:	3302      	adds	r3, #2
 8009406:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800940a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800940e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009412:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8009416:	7812      	ldrb	r2, [r2, #0]
 8009418:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800941a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800941e:	3301      	adds	r3, #1
 8009420:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8009424:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009428:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	2b01      	cmp	r3, #1
 8009430:	d002      	beq.n	8009438 <aci_gatt_add_char+0xce>
 8009432:	2b02      	cmp	r3, #2
 8009434:	d004      	beq.n	8009440 <aci_gatt_add_char+0xd6>
 8009436:	e007      	b.n	8009448 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8009438:	2302      	movs	r3, #2
 800943a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800943e:	e005      	b.n	800944c <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8009440:	2310      	movs	r3, #16
 8009442:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8009446:	e001      	b.n	800944c <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8009448:	2397      	movs	r3, #151	; 0x97
 800944a:	e091      	b.n	8009570 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800944c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009450:	1cd8      	adds	r0, r3, #3
 8009452:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8009456:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800945a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800945e:	6819      	ldr	r1, [r3, #0]
 8009460:	f000 fb15 	bl	8009a8e <Osal_MemCpy>
    index_input += size;
 8009464:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8009468:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800946c:	4413      	add	r3, r2
 800946e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8009472:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009476:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800947a:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800947e:	8812      	ldrh	r2, [r2, #0]
 8009480:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8009482:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009486:	3302      	adds	r3, #2
 8009488:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800948c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009490:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009494:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8009496:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800949a:	3301      	adds	r3, #1
 800949c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 80094a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80094a4:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80094a8:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 80094aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80094ae:	3301      	adds	r3, #1
 80094b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 80094b4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80094b8:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80094bc:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80094be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80094c2:	3301      	adds	r3, #1
 80094c4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80094c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80094cc:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80094d0:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80094d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80094d6:	3301      	adds	r3, #1
 80094d8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80094dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80094e0:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80094e4:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80094e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80094ea:	3301      	adds	r3, #1
 80094ec:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80094f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80094f4:	2218      	movs	r2, #24
 80094f6:	2100      	movs	r1, #0
 80094f8:	4618      	mov	r0, r3
 80094fa:	f000 fad8 	bl	8009aae <Osal_MemSet>
  rq.ogf = 0x3f;
 80094fe:	233f      	movs	r3, #63	; 0x3f
 8009500:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8009504:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009508:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800950c:	f107 0318 	add.w	r3, r7, #24
 8009510:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8009514:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009518:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800951c:	f107 0314 	add.w	r3, r7, #20
 8009520:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8009524:	2303      	movs	r3, #3
 8009526:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800952a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800952e:	2100      	movs	r1, #0
 8009530:	4618      	mov	r0, r3
 8009532:	f000 fd45 	bl	8009fc0 <hci_send_req>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	da01      	bge.n	8009540 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800953c:	23ff      	movs	r3, #255	; 0xff
 800953e:	e017      	b.n	8009570 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8009540:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009544:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d005      	beq.n	800955a <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800954e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009552:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	e00a      	b.n	8009570 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800955a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800955e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009562:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8009566:	b29a      	uxth	r2, r3
 8009568:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800956c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8009576:	46bd      	mov	sp, r7
 8009578:	bd90      	pop	{r4, r7, pc}

0800957a <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800957a:	b5b0      	push	{r4, r5, r7, lr}
 800957c:	b0cc      	sub	sp, #304	; 0x130
 800957e:	af00      	add	r7, sp, #0
 8009580:	4605      	mov	r5, r0
 8009582:	460c      	mov	r4, r1
 8009584:	4610      	mov	r0, r2
 8009586:	4619      	mov	r1, r3
 8009588:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800958c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009590:	462a      	mov	r2, r5
 8009592:	801a      	strh	r2, [r3, #0]
 8009594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009598:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800959c:	4622      	mov	r2, r4
 800959e:	801a      	strh	r2, [r3, #0]
 80095a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095a4:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 80095a8:	4602      	mov	r2, r0
 80095aa:	701a      	strb	r2, [r3, #0]
 80095ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095b0:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80095b4:	460a      	mov	r2, r1
 80095b6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80095b8:	f107 0310 	add.w	r3, r7, #16
 80095bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80095c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80095c4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80095c8:	2200      	movs	r2, #0
 80095ca:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80095cc:	2300      	movs	r3, #0
 80095ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 80095d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095d6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80095da:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80095de:	8812      	ldrh	r2, [r2, #0]
 80095e0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80095e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095e6:	3302      	adds	r3, #2
 80095e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80095ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80095f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80095f4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80095f8:	8812      	ldrh	r2, [r2, #0]
 80095fa:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80095fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009600:	3302      	adds	r3, #2
 8009602:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8009606:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800960a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800960e:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8009612:	7812      	ldrb	r2, [r2, #0]
 8009614:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009616:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800961a:	3301      	adds	r3, #1
 800961c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8009620:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009624:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009628:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800962c:	7812      	ldrb	r2, [r2, #0]
 800962e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009630:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009634:	3301      	adds	r3, #1
 8009636:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800963a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800963e:	1d98      	adds	r0, r3, #6
 8009640:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009644:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	461a      	mov	r2, r3
 800964c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8009650:	f000 fa1d 	bl	8009a8e <Osal_MemCpy>
  index_input += Char_Value_Length;
 8009654:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009658:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009662:	4413      	add	r3, r2
 8009664:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009668:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800966c:	2218      	movs	r2, #24
 800966e:	2100      	movs	r1, #0
 8009670:	4618      	mov	r0, r3
 8009672:	f000 fa1c 	bl	8009aae <Osal_MemSet>
  rq.ogf = 0x3f;
 8009676:	233f      	movs	r3, #63	; 0x3f
 8009678:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800967c:	f44f 7383 	mov.w	r3, #262	; 0x106
 8009680:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009684:	f107 0310 	add.w	r3, r7, #16
 8009688:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800968c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009690:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009694:	f107 030f 	add.w	r3, r7, #15
 8009698:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800969c:	2301      	movs	r3, #1
 800969e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80096a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096a6:	2100      	movs	r1, #0
 80096a8:	4618      	mov	r0, r3
 80096aa:	f000 fc89 	bl	8009fc0 <hci_send_req>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	da01      	bge.n	80096b8 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80096b4:	23ff      	movs	r3, #255	; 0xff
 80096b6:	e004      	b.n	80096c2 <aci_gatt_update_char_value+0x148>
  return status;
 80096b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096bc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80096c0:	781b      	ldrb	r3, [r3, #0]
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bdb0      	pop	{r4, r5, r7, pc}

080096cc <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b0cc      	sub	sp, #304	; 0x130
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80096da:	601a      	str	r2, [r3, #0]
 80096dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096e0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80096e4:	4602      	mov	r2, r0
 80096e6:	701a      	strb	r2, [r3, #0]
 80096e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80096ec:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80096f0:	460a      	mov	r2, r1
 80096f2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80096f4:	f107 0310 	add.w	r3, r7, #16
 80096f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80096fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009700:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009704:	2200      	movs	r2, #0
 8009706:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009708:	2300      	movs	r3, #0
 800970a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800970e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009712:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009716:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800971a:	7812      	ldrb	r2, [r2, #0]
 800971c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800971e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009722:	3301      	adds	r3, #1
 8009724:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8009728:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800972c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009730:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009734:	7812      	ldrb	r2, [r2, #0]
 8009736:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009738:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800973c:	3301      	adds	r3, #1
 800973e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8009742:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009746:	1c98      	adds	r0, r3, #2
 8009748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800974c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009750:	781a      	ldrb	r2, [r3, #0]
 8009752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009756:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800975a:	6819      	ldr	r1, [r3, #0]
 800975c:	f000 f997 	bl	8009a8e <Osal_MemCpy>
  index_input += Length;
 8009760:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009764:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800976e:	4413      	add	r3, r2
 8009770:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009774:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009778:	2218      	movs	r2, #24
 800977a:	2100      	movs	r1, #0
 800977c:	4618      	mov	r0, r3
 800977e:	f000 f996 	bl	8009aae <Osal_MemSet>
  rq.ogf = 0x3f;
 8009782:	233f      	movs	r3, #63	; 0x3f
 8009784:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8009788:	230c      	movs	r3, #12
 800978a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800978e:	f107 0310 	add.w	r3, r7, #16
 8009792:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009796:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800979a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800979e:	f107 030f 	add.w	r3, r7, #15
 80097a2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80097a6:	2301      	movs	r3, #1
 80097a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80097ac:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80097b0:	2100      	movs	r1, #0
 80097b2:	4618      	mov	r0, r3
 80097b4:	f000 fc04 	bl	8009fc0 <hci_send_req>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	da01      	bge.n	80097c2 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80097be:	23ff      	movs	r3, #255	; 0xff
 80097c0:	e004      	b.n	80097cc <aci_hal_write_config_data+0x100>
  return status;
 80097c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097c6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80097ca:	781b      	ldrb	r3, [r3, #0]
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b0cc      	sub	sp, #304	; 0x130
 80097da:	af00      	add	r7, sp, #0
 80097dc:	4602      	mov	r2, r0
 80097de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097e2:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80097e6:	701a      	strb	r2, [r3, #0]
 80097e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80097ec:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80097f0:	460a      	mov	r2, r1
 80097f2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80097f4:	f107 0310 	add.w	r3, r7, #16
 80097f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80097fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009800:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009804:	2200      	movs	r2, #0
 8009806:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009808:	2300      	movs	r3, #0
 800980a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800980e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009812:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009816:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800981a:	7812      	ldrb	r2, [r2, #0]
 800981c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800981e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009822:	3301      	adds	r3, #1
 8009824:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8009828:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800982c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009830:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009834:	7812      	ldrb	r2, [r2, #0]
 8009836:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009838:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800983c:	3301      	adds	r3, #1
 800983e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009842:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009846:	2218      	movs	r2, #24
 8009848:	2100      	movs	r1, #0
 800984a:	4618      	mov	r0, r3
 800984c:	f000 f92f 	bl	8009aae <Osal_MemSet>
  rq.ogf = 0x3f;
 8009850:	233f      	movs	r3, #63	; 0x3f
 8009852:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8009856:	230f      	movs	r3, #15
 8009858:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800985c:	f107 0310 	add.w	r3, r7, #16
 8009860:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009864:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009868:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800986c:	f107 030f 	add.w	r3, r7, #15
 8009870:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009874:	2301      	movs	r3, #1
 8009876:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800987a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800987e:	2100      	movs	r1, #0
 8009880:	4618      	mov	r0, r3
 8009882:	f000 fb9d 	bl	8009fc0 <hci_send_req>
 8009886:	4603      	mov	r3, r0
 8009888:	2b00      	cmp	r3, #0
 800988a:	da01      	bge.n	8009890 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800988c:	23ff      	movs	r3, #255	; 0xff
 800988e:	e004      	b.n	800989a <aci_hal_set_tx_power_level+0xc4>
  return status;
 8009890:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009894:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009898:	781b      	ldrb	r3, [r3, #0]
}
 800989a:	4618      	mov	r0, r3
 800989c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b0cc      	sub	sp, #304	; 0x130
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	4602      	mov	r2, r0
 80098ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098b0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80098b4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80098b6:	f107 0310 	add.w	r3, r7, #16
 80098ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80098be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80098c2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80098c6:	2200      	movs	r2, #0
 80098c8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80098ca:	2300      	movs	r3, #0
 80098cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80098d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80098d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80098d8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80098dc:	8812      	ldrh	r2, [r2, #0]
 80098de:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80098e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80098e4:	3302      	adds	r3, #2
 80098e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80098ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80098ee:	2218      	movs	r2, #24
 80098f0:	2100      	movs	r1, #0
 80098f2:	4618      	mov	r0, r3
 80098f4:	f000 f8db 	bl	8009aae <Osal_MemSet>
  rq.ogf = 0x3f;
 80098f8:	233f      	movs	r3, #63	; 0x3f
 80098fa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 80098fe:	2318      	movs	r3, #24
 8009900:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009904:	f107 0310 	add.w	r3, r7, #16
 8009908:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800990c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009910:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009914:	f107 030f 	add.w	r3, r7, #15
 8009918:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800991c:	2301      	movs	r3, #1
 800991e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009922:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009926:	2100      	movs	r1, #0
 8009928:	4618      	mov	r0, r3
 800992a:	f000 fb49 	bl	8009fc0 <hci_send_req>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	da01      	bge.n	8009938 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8009934:	23ff      	movs	r3, #255	; 0xff
 8009936:	e004      	b.n	8009942 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8009938:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800993c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009940:	781b      	ldrb	r3, [r3, #0]
}
 8009942:	4618      	mov	r0, r3
 8009944:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b088      	sub	sp, #32
 8009950:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009952:	2300      	movs	r3, #0
 8009954:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009956:	f107 0308 	add.w	r3, r7, #8
 800995a:	2218      	movs	r2, #24
 800995c:	2100      	movs	r1, #0
 800995e:	4618      	mov	r0, r3
 8009960:	f000 f8a5 	bl	8009aae <Osal_MemSet>
  rq.ogf = 0x03;
 8009964:	2303      	movs	r3, #3
 8009966:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8009968:	2303      	movs	r3, #3
 800996a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800996c:	1dfb      	adds	r3, r7, #7
 800996e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009970:	2301      	movs	r3, #1
 8009972:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009974:	f107 0308 	add.w	r3, r7, #8
 8009978:	2100      	movs	r1, #0
 800997a:	4618      	mov	r0, r3
 800997c:	f000 fb20 	bl	8009fc0 <hci_send_req>
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	da01      	bge.n	800998a <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009986:	23ff      	movs	r3, #255	; 0xff
 8009988:	e000      	b.n	800998c <hci_reset+0x40>
  return status;
 800998a:	79fb      	ldrb	r3, [r7, #7]
}
 800998c:	4618      	mov	r0, r3
 800998e:	3720      	adds	r7, #32
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8009994:	b590      	push	{r4, r7, lr}
 8009996:	b0cd      	sub	sp, #308	; 0x134
 8009998:	af00      	add	r7, sp, #0
 800999a:	4604      	mov	r4, r0
 800999c:	4608      	mov	r0, r1
 800999e:	4611      	mov	r1, r2
 80099a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099a4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80099a8:	4622      	mov	r2, r4
 80099aa:	701a      	strb	r2, [r3, #0]
 80099ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099b0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80099b4:	4602      	mov	r2, r0
 80099b6:	701a      	strb	r2, [r3, #0]
 80099b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099bc:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80099c0:	460a      	mov	r2, r1
 80099c2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80099c4:	f107 0310 	add.w	r3, r7, #16
 80099c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80099cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099d0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80099d4:	2200      	movs	r2, #0
 80099d6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80099d8:	2300      	movs	r3, #0
 80099da:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80099de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80099e6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80099ea:	7812      	ldrb	r2, [r2, #0]
 80099ec:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80099ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80099f2:	3301      	adds	r3, #1
 80099f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 80099f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099fc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a00:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009a04:	7812      	ldrb	r2, [r2, #0]
 8009a06:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009a08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8009a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a16:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009a1a:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009a1e:	7812      	ldrb	r2, [r2, #0]
 8009a20:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009a22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a26:	3301      	adds	r3, #1
 8009a28:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009a2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009a30:	2218      	movs	r2, #24
 8009a32:	2100      	movs	r1, #0
 8009a34:	4618      	mov	r0, r3
 8009a36:	f000 f83a 	bl	8009aae <Osal_MemSet>
  rq.ogf = 0x08;
 8009a3a:	2308      	movs	r3, #8
 8009a3c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8009a40:	2331      	movs	r3, #49	; 0x31
 8009a42:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009a46:	f107 0310 	add.w	r3, r7, #16
 8009a4a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009a4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a52:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009a56:	f107 030f 	add.w	r3, r7, #15
 8009a5a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009a64:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009a68:	2100      	movs	r1, #0
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 faa8 	bl	8009fc0 <hci_send_req>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	da01      	bge.n	8009a7a <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8009a76:	23ff      	movs	r3, #255	; 0xff
 8009a78:	e004      	b.n	8009a84 <hci_le_set_default_phy+0xf0>
  return status;
 8009a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a7e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009a82:	781b      	ldrb	r3, [r3, #0]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd90      	pop	{r4, r7, pc}

08009a8e <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b084      	sub	sp, #16
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	60f8      	str	r0, [r7, #12]
 8009a96:	60b9      	str	r1, [r7, #8]
 8009a98:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	68b9      	ldr	r1, [r7, #8]
 8009a9e:	68f8      	ldr	r0, [r7, #12]
 8009aa0:	f003 fffd 	bl	800da9e <memcpy>
 8009aa4:	4603      	mov	r3, r0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b084      	sub	sp, #16
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	60f8      	str	r0, [r7, #12]
 8009ab6:	60b9      	str	r1, [r7, #8]
 8009ab8:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	68b9      	ldr	r1, [r7, #8]
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f003 ff5a 	bl	800d978 <memset>
 8009ac4:	4603      	mov	r3, r0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8009ace:	b480      	push	{r7}
 8009ad0:	af00      	add	r7, sp, #0
  return;
 8009ad2:	bf00      	nop
}
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8009adc:	b480      	push	{r7}
 8009ade:	af00      	add	r7, sp, #0
  return;
 8009ae0:	bf00      	nop
}
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr

08009aea <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8009aea:	b480      	push	{r7}
 8009aec:	af00      	add	r7, sp, #0
  return;
 8009aee:	bf00      	nop
}
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8009af8:	b480      	push	{r7}
 8009afa:	af00      	add	r7, sp, #0
  return;
 8009afc:	bf00      	nop
}
 8009afe:	46bd      	mov	sp, r7
 8009b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b04:	4770      	bx	lr

08009b06 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8009b06:	b480      	push	{r7}
 8009b08:	af00      	add	r7, sp, #0
  return;
 8009b0a:	bf00      	nop
}
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8009b14:	b480      	push	{r7}
 8009b16:	af00      	add	r7, sp, #0
  return;
 8009b18:	bf00      	nop
}
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr

08009b22 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8009b22:	b480      	push	{r7}
 8009b24:	af00      	add	r7, sp, #0
  return;
 8009b26:	bf00      	nop
}
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8009b30:	b480      	push	{r7}
 8009b32:	af00      	add	r7, sp, #0
  return;
 8009b34:	bf00      	nop
}
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr

08009b3e <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8009b3e:	b480      	push	{r7}
 8009b40:	af00      	add	r7, sp, #0
  return;
 8009b42:	bf00      	nop
}
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	af00      	add	r7, sp, #0
  return;
 8009b50:	bf00      	nop
}
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8009b5a:	b480      	push	{r7}
 8009b5c:	af00      	add	r7, sp, #0
  return;
 8009b5e:	bf00      	nop
}
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8009b68:	b480      	push	{r7}
 8009b6a:	af00      	add	r7, sp, #0
  return;
 8009b6c:	bf00      	nop
}
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr

08009b76 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8009b76:	b480      	push	{r7}
 8009b78:	af00      	add	r7, sp, #0
  return;
 8009b7a:	bf00      	nop
}
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8009b84:	b480      	push	{r7}
 8009b86:	af00      	add	r7, sp, #0
  return;
 8009b88:	bf00      	nop
}
 8009b8a:	46bd      	mov	sp, r7
 8009b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b90:	4770      	bx	lr

08009b92 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8009b92:	b480      	push	{r7}
 8009b94:	af00      	add	r7, sp, #0
  return;
 8009b96:	bf00      	nop
}
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	af00      	add	r7, sp, #0
  return;
 8009ba4:	bf00      	nop
}
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr

08009bae <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8009bae:	b480      	push	{r7}
 8009bb0:	af00      	add	r7, sp, #0
  return;
 8009bb2:	bf00      	nop
}
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8009bc0:	4b04      	ldr	r3, [pc, #16]	; (8009bd4 <SVCCTL_Init+0x18>)
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8009bc6:	4b04      	ldr	r3, [pc, #16]	; (8009bd8 <SVCCTL_Init+0x1c>)
 8009bc8:	2200      	movs	r2, #0
 8009bca:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8009bcc:	f000 f806 	bl	8009bdc <SVCCTL_SvcInit>

  return;
 8009bd0:	bf00      	nop
}
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	20000094 	.word	0x20000094
 8009bd8:	200000b4 	.word	0x200000b4

08009bdc <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	af00      	add	r7, sp, #0
  BAS_Init();
 8009be0:	f7ff ff75 	bl	8009ace <BAS_Init>

  BLS_Init();
 8009be4:	f7ff ff7a 	bl	8009adc <BLS_Init>

  CRS_STM_Init();
 8009be8:	f7ff ff7f 	bl	8009aea <CRS_STM_Init>

  DIS_Init();
 8009bec:	f7ff ff84 	bl	8009af8 <DIS_Init>

  EDS_STM_Init();
 8009bf0:	f7ff ff89 	bl	8009b06 <EDS_STM_Init>

  HIDS_Init();
 8009bf4:	f7ff ff8e 	bl	8009b14 <HIDS_Init>

  HRS_Init();
 8009bf8:	f7ff ff93 	bl	8009b22 <HRS_Init>

  HTS_Init();
 8009bfc:	f7ff ff98 	bl	8009b30 <HTS_Init>

  IAS_Init();
 8009c00:	f7ff ff9d 	bl	8009b3e <IAS_Init>

  LLS_Init();
 8009c04:	f7ff ffa2 	bl	8009b4c <LLS_Init>

  TPS_Init();
 8009c08:	f7ff ffa7 	bl	8009b5a <TPS_Init>

  MOTENV_STM_Init();
 8009c0c:	f7ff ffac 	bl	8009b68 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8009c10:	f7ff ffb1 	bl	8009b76 <P2PS_STM_Init>

  ZDD_STM_Init();
 8009c14:	f7ff ffb6 	bl	8009b84 <ZDD_STM_Init>

  OTAS_STM_Init();
 8009c18:	f7ff ffbb 	bl	8009b92 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8009c1c:	f7ff ffc7 	bl	8009bae <BVOPUS_STM_Init>

  MESH_Init();
 8009c20:	f7ff ffbe 	bl	8009ba0 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8009c24:	f002 fe26 	bl	800c874 <SVCCTL_InitCustomSvc>
  
  return;
 8009c28:	bf00      	nop
}
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8009c34:	4b09      	ldr	r3, [pc, #36]	; (8009c5c <SVCCTL_RegisterSvcHandler+0x30>)
 8009c36:	7f1b      	ldrb	r3, [r3, #28]
 8009c38:	4619      	mov	r1, r3
 8009c3a:	4a08      	ldr	r2, [pc, #32]	; (8009c5c <SVCCTL_RegisterSvcHandler+0x30>)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8009c42:	4b06      	ldr	r3, [pc, #24]	; (8009c5c <SVCCTL_RegisterSvcHandler+0x30>)
 8009c44:	7f1b      	ldrb	r3, [r3, #28]
 8009c46:	3301      	adds	r3, #1
 8009c48:	b2da      	uxtb	r2, r3
 8009c4a:	4b04      	ldr	r3, [pc, #16]	; (8009c5c <SVCCTL_RegisterSvcHandler+0x30>)
 8009c4c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8009c4e:	bf00      	nop
}
 8009c50:	370c      	adds	r7, #12
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop
 8009c5c:	20000094 	.word	0x20000094

08009c60 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b086      	sub	sp, #24
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	3301      	adds	r3, #1
 8009c6c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	2bff      	cmp	r3, #255	; 0xff
 8009c78:	d125      	bne.n	8009cc6 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	3302      	adds	r3, #2
 8009c7e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	881b      	ldrh	r3, [r3, #0]
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009c8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c8e:	d118      	bne.n	8009cc2 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009c90:	2300      	movs	r3, #0
 8009c92:	757b      	strb	r3, [r7, #21]
 8009c94:	e00d      	b.n	8009cb2 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8009c96:	7d7b      	ldrb	r3, [r7, #21]
 8009c98:	4a1a      	ldr	r2, [pc, #104]	; (8009d04 <SVCCTL_UserEvtRx+0xa4>)
 8009c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	4798      	blx	r3
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8009ca6:	7dfb      	ldrb	r3, [r7, #23]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d108      	bne.n	8009cbe <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009cac:	7d7b      	ldrb	r3, [r7, #21]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	757b      	strb	r3, [r7, #21]
 8009cb2:	4b14      	ldr	r3, [pc, #80]	; (8009d04 <SVCCTL_UserEvtRx+0xa4>)
 8009cb4:	7f1b      	ldrb	r3, [r3, #28]
 8009cb6:	7d7a      	ldrb	r2, [r7, #21]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d3ec      	bcc.n	8009c96 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8009cbc:	e002      	b.n	8009cc4 <SVCCTL_UserEvtRx+0x64>
              break;
 8009cbe:	bf00      	nop
          break;
 8009cc0:	e000      	b.n	8009cc4 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8009cc2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8009cc4:	e000      	b.n	8009cc8 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8009cc6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8009cc8:	7dfb      	ldrb	r3, [r7, #23]
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	d00f      	beq.n	8009cee <SVCCTL_UserEvtRx+0x8e>
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	dc10      	bgt.n	8009cf4 <SVCCTL_UserEvtRx+0x94>
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d002      	beq.n	8009cdc <SVCCTL_UserEvtRx+0x7c>
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d006      	beq.n	8009ce8 <SVCCTL_UserEvtRx+0x88>
 8009cda:	e00b      	b.n	8009cf4 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f001 fcb3 	bl	800b648 <SVCCTL_App_Notification>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	75bb      	strb	r3, [r7, #22]
      break;
 8009ce6:	e008      	b.n	8009cfa <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	75bb      	strb	r3, [r7, #22]
      break;
 8009cec:	e005      	b.n	8009cfa <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	75bb      	strb	r3, [r7, #22]
      break;
 8009cf2:	e002      	b.n	8009cfa <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	75bb      	strb	r3, [r7, #22]
      break;
 8009cf8:	bf00      	nop
  }

  return (return_status);
 8009cfa:	7dbb      	ldrb	r3, [r7, #22]
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3718      	adds	r7, #24
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	20000094 	.word	0x20000094

08009d08 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b088      	sub	sp, #32
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009d10:	f107 030c 	add.w	r3, r7, #12
 8009d14:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	212e      	movs	r1, #46	; 0x2e
 8009d20:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8009d24:	f000 fae8 	bl	800a2f8 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	330b      	adds	r3, #11
 8009d2c:	78db      	ldrb	r3, [r3, #3]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3720      	adds	r7, #32
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b088      	sub	sp, #32
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009d3e:	f107 030c 	add.w	r3, r7, #12
 8009d42:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8009d4a:	69fb      	ldr	r3, [r7, #28]
 8009d4c:	210f      	movs	r1, #15
 8009d4e:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8009d52:	f000 fad1 	bl	800a2f8 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	330b      	adds	r3, #11
 8009d5a:	78db      	ldrb	r3, [r3, #3]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3720      	adds	r7, #32
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}

08009d64 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b088      	sub	sp, #32
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8009d6c:	f107 030c 	add.w	r3, r7, #12
 8009d70:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8009d72:	69fb      	ldr	r3, [r7, #28]
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	2110      	movs	r1, #16
 8009d78:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8009d7c:	f000 fabc 	bl	800a2f8 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	330b      	adds	r3, #11
 8009d84:	78db      	ldrb	r3, [r3, #3]
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3720      	adds	r7, #32
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
	...

08009d90 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8009d90:	b480      	push	{r7}
 8009d92:	b08b      	sub	sp, #44	; 0x2c
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8009da0:	2300      	movs	r3, #0
 8009da2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8009da4:	2300      	movs	r3, #0
 8009da6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8009da8:	2300      	movs	r3, #0
 8009daa:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8009dac:	2300      	movs	r3, #0
 8009dae:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8009db0:	2300      	movs	r3, #0
 8009db2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8009db4:	2300      	movs	r3, #0
 8009db6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8009db8:	4b4a      	ldr	r3, [pc, #296]	; (8009ee4 <SHCI_GetWirelessFwInfo+0x154>)
 8009dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dbc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009dc0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009dca:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a44      	ldr	r2, [pc, #272]	; (8009ee8 <SHCI_GetWirelessFwInfo+0x158>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d10f      	bne.n	8009dfc <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	695b      	ldr	r3, [r3, #20]
 8009de0:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	699b      	ldr	r3, [r3, #24]
 8009de6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	69db      	ldr	r3, [r3, #28]
 8009dec:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	691b      	ldr	r3, [r3, #16]
 8009df8:	617b      	str	r3, [r7, #20]
 8009dfa:	e01a      	b.n	8009e32 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8009e04:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8009e08:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	695b      	ldr	r3, [r3, #20]
 8009e18:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	699b      	ldr	r3, [r3, #24]
 8009e20:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e34:	0e1b      	lsrs	r3, r3, #24
 8009e36:	b2da      	uxtb	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3e:	0c1b      	lsrs	r3, r3, #16
 8009e40:	b2da      	uxtb	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e48:	0a1b      	lsrs	r3, r3, #8
 8009e4a:	b2da      	uxtb	r2, r3
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8009e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e52:	091b      	lsrs	r3, r3, #4
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	f003 030f 	and.w	r3, r3, #15
 8009e5a:	b2da      	uxtb	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8009e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	f003 030f 	and.w	r3, r3, #15
 8009e68:	b2da      	uxtb	r2, r3
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009e6e:	6a3b      	ldr	r3, [r7, #32]
 8009e70:	0e1b      	lsrs	r3, r3, #24
 8009e72:	b2da      	uxtb	r2, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009e78:	6a3b      	ldr	r3, [r7, #32]
 8009e7a:	0c1b      	lsrs	r3, r3, #16
 8009e7c:	b2da      	uxtb	r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8009e82:	6a3b      	ldr	r3, [r7, #32]
 8009e84:	0a1b      	lsrs	r3, r3, #8
 8009e86:	b2da      	uxtb	r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009e8c:	6a3b      	ldr	r3, [r7, #32]
 8009e8e:	b2da      	uxtb	r2, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	b2da      	uxtb	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	0e1b      	lsrs	r3, r3, #24
 8009ea0:	b2da      	uxtb	r2, r3
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	0c1b      	lsrs	r3, r3, #16
 8009eaa:	b2da      	uxtb	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	0a1b      	lsrs	r3, r3, #8
 8009eb4:	b2da      	uxtb	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8009eba:	697b      	ldr	r3, [r7, #20]
 8009ebc:	0e1b      	lsrs	r3, r3, #24
 8009ebe:	b2da      	uxtb	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	0c1b      	lsrs	r3, r3, #16
 8009ec8:	b2da      	uxtb	r2, r3
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	b2da      	uxtb	r2, r3
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	372c      	adds	r7, #44	; 0x2c
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr
 8009ee4:	58004000 	.word	0x58004000
 8009ee8:	a94656b9 	.word	0xa94656b9

08009eec <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	4a08      	ldr	r2, [pc, #32]	; (8009f1c <hci_init+0x30>)
 8009efc:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8009efe:	4a08      	ldr	r2, [pc, #32]	; (8009f20 <hci_init+0x34>)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8009f04:	4806      	ldr	r0, [pc, #24]	; (8009f20 <hci_init+0x34>)
 8009f06:	f000 f979 	bl	800a1fc <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f000 f8da 	bl	800a0c8 <TlInit>

  return;
 8009f14:	bf00      	nop
}
 8009f16:	3708      	adds	r7, #8
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	20000698 	.word	0x20000698
 8009f20:	20000670 	.word	0x20000670

08009f24 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009f2a:	4822      	ldr	r0, [pc, #136]	; (8009fb4 <hci_user_evt_proc+0x90>)
 8009f2c:	f000 fe10 	bl	800ab50 <LST_is_empty>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d12b      	bne.n	8009f8e <hci_user_evt_proc+0x6a>
 8009f36:	4b20      	ldr	r3, [pc, #128]	; (8009fb8 <hci_user_evt_proc+0x94>)
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d027      	beq.n	8009f8e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8009f3e:	f107 030c 	add.w	r3, r7, #12
 8009f42:	4619      	mov	r1, r3
 8009f44:	481b      	ldr	r0, [pc, #108]	; (8009fb4 <hci_user_evt_proc+0x90>)
 8009f46:	f000 fe92 	bl	800ac6e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009f4a:	4b1c      	ldr	r3, [pc, #112]	; (8009fbc <hci_user_evt_proc+0x98>)
 8009f4c:	69db      	ldr	r3, [r3, #28]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00c      	beq.n	8009f6c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8009f56:	2301      	movs	r3, #1
 8009f58:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8009f5a:	4b18      	ldr	r3, [pc, #96]	; (8009fbc <hci_user_evt_proc+0x98>)
 8009f5c:	69db      	ldr	r3, [r3, #28]
 8009f5e:	1d3a      	adds	r2, r7, #4
 8009f60:	4610      	mov	r0, r2
 8009f62:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8009f64:	793a      	ldrb	r2, [r7, #4]
 8009f66:	4b14      	ldr	r3, [pc, #80]	; (8009fb8 <hci_user_evt_proc+0x94>)
 8009f68:	701a      	strb	r2, [r3, #0]
 8009f6a:	e002      	b.n	8009f72 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8009f6c:	4b12      	ldr	r3, [pc, #72]	; (8009fb8 <hci_user_evt_proc+0x94>)
 8009f6e:	2201      	movs	r2, #1
 8009f70:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8009f72:	4b11      	ldr	r3, [pc, #68]	; (8009fb8 <hci_user_evt_proc+0x94>)
 8009f74:	781b      	ldrb	r3, [r3, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d004      	beq.n	8009f84 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f000 fc0d 	bl	800a79c <TL_MM_EvtDone>
 8009f82:	e004      	b.n	8009f8e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	4619      	mov	r1, r3
 8009f88:	480a      	ldr	r0, [pc, #40]	; (8009fb4 <hci_user_evt_proc+0x90>)
 8009f8a:	f000 fe03 	bl	800ab94 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8009f8e:	4809      	ldr	r0, [pc, #36]	; (8009fb4 <hci_user_evt_proc+0x90>)
 8009f90:	f000 fdde 	bl	800ab50 <LST_is_empty>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d107      	bne.n	8009faa <hci_user_evt_proc+0x86>
 8009f9a:	4b07      	ldr	r3, [pc, #28]	; (8009fb8 <hci_user_evt_proc+0x94>)
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d003      	beq.n	8009faa <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8009fa2:	4804      	ldr	r0, [pc, #16]	; (8009fb4 <hci_user_evt_proc+0x90>)
 8009fa4:	f002 f9c8 	bl	800c338 <hci_notify_asynch_evt>
  }


  return;
 8009fa8:	bf00      	nop
 8009faa:	bf00      	nop
}
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}
 8009fb2:	bf00      	nop
 8009fb4:	200000bc 	.word	0x200000bc
 8009fb8:	200000c8 	.word	0x200000c8
 8009fbc:	20000670 	.word	0x20000670

08009fc0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b088      	sub	sp, #32
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	460b      	mov	r3, r1
 8009fca:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8009fcc:	2000      	movs	r0, #0
 8009fce:	f000 f8d1 	bl	800a174 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	885b      	ldrh	r3, [r3, #2]
 8009fda:	b21b      	sxth	r3, r3
 8009fdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fe0:	b21a      	sxth	r2, r3
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	881b      	ldrh	r3, [r3, #0]
 8009fe6:	029b      	lsls	r3, r3, #10
 8009fe8:	b21b      	sxth	r3, r3
 8009fea:	4313      	orrs	r3, r2
 8009fec:	b21b      	sxth	r3, r3
 8009fee:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8009ff0:	4b33      	ldr	r3, [pc, #204]	; (800a0c0 <hci_send_req+0x100>)
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	b2d9      	uxtb	r1, r3
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	689a      	ldr	r2, [r3, #8]
 800a000:	8bbb      	ldrh	r3, [r7, #28]
 800a002:	4618      	mov	r0, r3
 800a004:	f000 f890 	bl	800a128 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800a008:	e04e      	b.n	800a0a8 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800a00a:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a00e:	f002 f9aa 	bl	800c366 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a012:	e043      	b.n	800a09c <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800a014:	f107 030c 	add.w	r3, r7, #12
 800a018:	4619      	mov	r1, r3
 800a01a:	482a      	ldr	r0, [pc, #168]	; (800a0c4 <hci_send_req+0x104>)
 800a01c:	f000 fe27 	bl	800ac6e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	7a5b      	ldrb	r3, [r3, #9]
 800a024:	2b0f      	cmp	r3, #15
 800a026:	d114      	bne.n	800a052 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	330b      	adds	r3, #11
 800a02c:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	885b      	ldrh	r3, [r3, #2]
 800a032:	b29b      	uxth	r3, r3
 800a034:	8bba      	ldrh	r2, [r7, #28]
 800a036:	429a      	cmp	r2, r3
 800a038:	d104      	bne.n	800a044 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	691b      	ldr	r3, [r3, #16]
 800a03e:	693a      	ldr	r2, [r7, #16]
 800a040:	7812      	ldrb	r2, [r2, #0]
 800a042:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	785b      	ldrb	r3, [r3, #1]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d027      	beq.n	800a09c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a04c:	2301      	movs	r3, #1
 800a04e:	77fb      	strb	r3, [r7, #31]
 800a050:	e024      	b.n	800a09c <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	330b      	adds	r3, #11
 800a056:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a05e:	b29b      	uxth	r3, r3
 800a060:	8bba      	ldrh	r2, [r7, #28]
 800a062:	429a      	cmp	r2, r3
 800a064:	d114      	bne.n	800a090 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	7a9b      	ldrb	r3, [r3, #10]
 800a06a:	3b03      	subs	r3, #3
 800a06c:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	695a      	ldr	r2, [r3, #20]
 800a072:	7dfb      	ldrb	r3, [r7, #23]
 800a074:	429a      	cmp	r2, r3
 800a076:	bfa8      	it	ge
 800a078:	461a      	movge	r2, r3
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6918      	ldr	r0, [r3, #16]
 800a082:	69bb      	ldr	r3, [r7, #24]
 800a084:	1cd9      	adds	r1, r3, #3
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	695b      	ldr	r3, [r3, #20]
 800a08a:	461a      	mov	r2, r3
 800a08c:	f003 fd07 	bl	800da9e <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800a090:	69bb      	ldr	r3, [r7, #24]
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d001      	beq.n	800a09c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a098:	2301      	movs	r3, #1
 800a09a:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a09c:	4809      	ldr	r0, [pc, #36]	; (800a0c4 <hci_send_req+0x104>)
 800a09e:	f000 fd57 	bl	800ab50 <LST_is_empty>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d0b5      	beq.n	800a014 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800a0a8:	7ffb      	ldrb	r3, [r7, #31]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d0ad      	beq.n	800a00a <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800a0ae:	2001      	movs	r0, #1
 800a0b0:	f000 f860 	bl	800a174 <NotifyCmdStatus>

  return 0;
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3720      	adds	r7, #32
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	2000069c 	.word	0x2000069c
 800a0c4:	20000690 	.word	0x20000690

0800a0c8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b086      	sub	sp, #24
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800a0d0:	480f      	ldr	r0, [pc, #60]	; (800a110 <TlInit+0x48>)
 800a0d2:	f000 fd2d 	bl	800ab30 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800a0d6:	4a0f      	ldr	r2, [pc, #60]	; (800a114 <TlInit+0x4c>)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800a0dc:	480e      	ldr	r0, [pc, #56]	; (800a118 <TlInit+0x50>)
 800a0de:	f000 fd27 	bl	800ab30 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a0e2:	4b0e      	ldr	r3, [pc, #56]	; (800a11c <TlInit+0x54>)
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800a0e8:	4b0d      	ldr	r3, [pc, #52]	; (800a120 <TlInit+0x58>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d00a      	beq.n	800a106 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800a0f4:	4b0b      	ldr	r3, [pc, #44]	; (800a124 <TlInit+0x5c>)
 800a0f6:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800a0f8:	4b09      	ldr	r3, [pc, #36]	; (800a120 <TlInit+0x58>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f107 0208 	add.w	r2, r7, #8
 800a100:	4610      	mov	r0, r2
 800a102:	4798      	blx	r3
  }

  return;
 800a104:	bf00      	nop
 800a106:	bf00      	nop
}
 800a108:	3718      	adds	r7, #24
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	20000690 	.word	0x20000690
 800a114:	200000c4 	.word	0x200000c4
 800a118:	200000bc 	.word	0x200000bc
 800a11c:	200000c8 	.word	0x200000c8
 800a120:	20000670 	.word	0x20000670
 800a124:	0800a1b5 	.word	0x0800a1b5

0800a128 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	4603      	mov	r3, r0
 800a130:	603a      	str	r2, [r7, #0]
 800a132:	80fb      	strh	r3, [r7, #6]
 800a134:	460b      	mov	r3, r1
 800a136:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800a138:	4b0c      	ldr	r3, [pc, #48]	; (800a16c <SendCmd+0x44>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	88fa      	ldrh	r2, [r7, #6]
 800a13e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800a142:	4b0a      	ldr	r3, [pc, #40]	; (800a16c <SendCmd+0x44>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	797a      	ldrb	r2, [r7, #5]
 800a148:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800a14a:	4b08      	ldr	r3, [pc, #32]	; (800a16c <SendCmd+0x44>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	330c      	adds	r3, #12
 800a150:	797a      	ldrb	r2, [r7, #5]
 800a152:	6839      	ldr	r1, [r7, #0]
 800a154:	4618      	mov	r0, r3
 800a156:	f003 fca2 	bl	800da9e <memcpy>

  hciContext.io.Send(0,0);
 800a15a:	4b05      	ldr	r3, [pc, #20]	; (800a170 <SendCmd+0x48>)
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	2100      	movs	r1, #0
 800a160:	2000      	movs	r0, #0
 800a162:	4798      	blx	r3

  return;
 800a164:	bf00      	nop
}
 800a166:	3708      	adds	r7, #8
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}
 800a16c:	200000c4 	.word	0x200000c4
 800a170:	20000670 	.word	0x20000670

0800a174 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b082      	sub	sp, #8
 800a178:	af00      	add	r7, sp, #0
 800a17a:	4603      	mov	r3, r0
 800a17c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800a17e:	79fb      	ldrb	r3, [r7, #7]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d108      	bne.n	800a196 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800a184:	4b0a      	ldr	r3, [pc, #40]	; (800a1b0 <NotifyCmdStatus+0x3c>)
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d00d      	beq.n	800a1a8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800a18c:	4b08      	ldr	r3, [pc, #32]	; (800a1b0 <NotifyCmdStatus+0x3c>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2000      	movs	r0, #0
 800a192:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800a194:	e008      	b.n	800a1a8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800a196:	4b06      	ldr	r3, [pc, #24]	; (800a1b0 <NotifyCmdStatus+0x3c>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d004      	beq.n	800a1a8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800a19e:	4b04      	ldr	r3, [pc, #16]	; (800a1b0 <NotifyCmdStatus+0x3c>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	2001      	movs	r0, #1
 800a1a4:	4798      	blx	r3
  return;
 800a1a6:	bf00      	nop
 800a1a8:	bf00      	nop
}
 800a1aa:	3708      	adds	r7, #8
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	20000698 	.word	0x20000698

0800a1b4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b082      	sub	sp, #8
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	7a5b      	ldrb	r3, [r3, #9]
 800a1c0:	2b0f      	cmp	r3, #15
 800a1c2:	d003      	beq.n	800a1cc <TlEvtReceived+0x18>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	7a5b      	ldrb	r3, [r3, #9]
 800a1c8:	2b0e      	cmp	r3, #14
 800a1ca:	d107      	bne.n	800a1dc <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800a1cc:	6879      	ldr	r1, [r7, #4]
 800a1ce:	4809      	ldr	r0, [pc, #36]	; (800a1f4 <TlEvtReceived+0x40>)
 800a1d0:	f000 fd06 	bl	800abe0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800a1d4:	2000      	movs	r0, #0
 800a1d6:	f002 f8bb 	bl	800c350 <hci_cmd_resp_release>
 800a1da:	e006      	b.n	800a1ea <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800a1dc:	6879      	ldr	r1, [r7, #4]
 800a1de:	4806      	ldr	r0, [pc, #24]	; (800a1f8 <TlEvtReceived+0x44>)
 800a1e0:	f000 fcfe 	bl	800abe0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a1e4:	4804      	ldr	r0, [pc, #16]	; (800a1f8 <TlEvtReceived+0x44>)
 800a1e6:	f002 f8a7 	bl	800c338 <hci_notify_asynch_evt>
  }

  return;
 800a1ea:	bf00      	nop
}
 800a1ec:	3708      	adds	r7, #8
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	20000690 	.word	0x20000690
 800a1f8:	200000bc 	.word	0x200000bc

0800a1fc <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b083      	sub	sp, #12
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4a05      	ldr	r2, [pc, #20]	; (800a21c <hci_register_io_bus+0x20>)
 800a208:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	4a04      	ldr	r2, [pc, #16]	; (800a220 <hci_register_io_bus+0x24>)
 800a20e:	611a      	str	r2, [r3, #16]

  return;
 800a210:	bf00      	nop
}
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr
 800a21c:	0800a515 	.word	0x0800a515
 800a220:	0800a57d 	.word	0x0800a57d

0800a224 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	4a08      	ldr	r2, [pc, #32]	; (800a254 <shci_init+0x30>)
 800a234:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800a236:	4a08      	ldr	r2, [pc, #32]	; (800a258 <shci_init+0x34>)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800a23c:	4806      	ldr	r0, [pc, #24]	; (800a258 <shci_init+0x34>)
 800a23e:	f000 f915 	bl	800a46c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4618      	mov	r0, r3
 800a248:	f000 f898 	bl	800a37c <TlInit>

  return;
 800a24c:	bf00      	nop
}
 800a24e:	3708      	adds	r7, #8
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	200006c0 	.word	0x200006c0
 800a258:	200006a0 	.word	0x200006a0

0800a25c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a262:	4822      	ldr	r0, [pc, #136]	; (800a2ec <shci_user_evt_proc+0x90>)
 800a264:	f000 fc74 	bl	800ab50 <LST_is_empty>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d12b      	bne.n	800a2c6 <shci_user_evt_proc+0x6a>
 800a26e:	4b20      	ldr	r3, [pc, #128]	; (800a2f0 <shci_user_evt_proc+0x94>)
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d027      	beq.n	800a2c6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a276:	f107 030c 	add.w	r3, r7, #12
 800a27a:	4619      	mov	r1, r3
 800a27c:	481b      	ldr	r0, [pc, #108]	; (800a2ec <shci_user_evt_proc+0x90>)
 800a27e:	f000 fcf6 	bl	800ac6e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800a282:	4b1c      	ldr	r3, [pc, #112]	; (800a2f4 <shci_user_evt_proc+0x98>)
 800a284:	69db      	ldr	r3, [r3, #28]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00c      	beq.n	800a2a4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800a28e:	2301      	movs	r3, #1
 800a290:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a292:	4b18      	ldr	r3, [pc, #96]	; (800a2f4 <shci_user_evt_proc+0x98>)
 800a294:	69db      	ldr	r3, [r3, #28]
 800a296:	1d3a      	adds	r2, r7, #4
 800a298:	4610      	mov	r0, r2
 800a29a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800a29c:	793a      	ldrb	r2, [r7, #4]
 800a29e:	4b14      	ldr	r3, [pc, #80]	; (800a2f0 <shci_user_evt_proc+0x94>)
 800a2a0:	701a      	strb	r2, [r3, #0]
 800a2a2:	e002      	b.n	800a2aa <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a2a4:	4b12      	ldr	r3, [pc, #72]	; (800a2f0 <shci_user_evt_proc+0x94>)
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800a2aa:	4b11      	ldr	r3, [pc, #68]	; (800a2f0 <shci_user_evt_proc+0x94>)
 800a2ac:	781b      	ldrb	r3, [r3, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d004      	beq.n	800a2bc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f000 fa71 	bl	800a79c <TL_MM_EvtDone>
 800a2ba:	e004      	b.n	800a2c6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	4619      	mov	r1, r3
 800a2c0:	480a      	ldr	r0, [pc, #40]	; (800a2ec <shci_user_evt_proc+0x90>)
 800a2c2:	f000 fc67 	bl	800ab94 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a2c6:	4809      	ldr	r0, [pc, #36]	; (800a2ec <shci_user_evt_proc+0x90>)
 800a2c8:	f000 fc42 	bl	800ab50 <LST_is_empty>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d107      	bne.n	800a2e2 <shci_user_evt_proc+0x86>
 800a2d2:	4b07      	ldr	r3, [pc, #28]	; (800a2f0 <shci_user_evt_proc+0x94>)
 800a2d4:	781b      	ldrb	r3, [r3, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d003      	beq.n	800a2e2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800a2da:	4804      	ldr	r0, [pc, #16]	; (800a2ec <shci_user_evt_proc+0x90>)
 800a2dc:	f7f7 f9a8 	bl	8001630 <shci_notify_asynch_evt>
  }


  return;
 800a2e0:	bf00      	nop
 800a2e2:	bf00      	nop
}
 800a2e4:	3710      	adds	r7, #16
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	200000cc 	.word	0x200000cc
 800a2f0:	200000dc 	.word	0x200000dc
 800a2f4:	200006a0 	.word	0x200006a0

0800a2f8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60ba      	str	r2, [r7, #8]
 800a300:	607b      	str	r3, [r7, #4]
 800a302:	4603      	mov	r3, r0
 800a304:	81fb      	strh	r3, [r7, #14]
 800a306:	460b      	mov	r3, r1
 800a308:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800a30a:	2000      	movs	r0, #0
 800a30c:	f000 f868 	bl	800a3e0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800a310:	4b17      	ldr	r3, [pc, #92]	; (800a370 <shci_send+0x78>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	89fa      	ldrh	r2, [r7, #14]
 800a316:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800a31a:	4b15      	ldr	r3, [pc, #84]	; (800a370 <shci_send+0x78>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	7b7a      	ldrb	r2, [r7, #13]
 800a320:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800a322:	4b13      	ldr	r3, [pc, #76]	; (800a370 <shci_send+0x78>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	330c      	adds	r3, #12
 800a328:	7b7a      	ldrb	r2, [r7, #13]
 800a32a:	68b9      	ldr	r1, [r7, #8]
 800a32c:	4618      	mov	r0, r3
 800a32e:	f003 fbb6 	bl	800da9e <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800a332:	4b10      	ldr	r3, [pc, #64]	; (800a374 <shci_send+0x7c>)
 800a334:	2201      	movs	r2, #1
 800a336:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800a338:	4b0f      	ldr	r3, [pc, #60]	; (800a378 <shci_send+0x80>)
 800a33a:	691b      	ldr	r3, [r3, #16]
 800a33c:	2100      	movs	r1, #0
 800a33e:	2000      	movs	r0, #0
 800a340:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800a342:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a346:	f7f7 f98b 	bl	8001660 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f103 0008 	add.w	r0, r3, #8
 800a350:	4b07      	ldr	r3, [pc, #28]	; (800a370 <shci_send+0x78>)
 800a352:	6819      	ldr	r1, [r3, #0]
 800a354:	4b06      	ldr	r3, [pc, #24]	; (800a370 <shci_send+0x78>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	789b      	ldrb	r3, [r3, #2]
 800a35a:	3303      	adds	r3, #3
 800a35c:	461a      	mov	r2, r3
 800a35e:	f003 fb9e 	bl	800da9e <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a362:	2001      	movs	r0, #1
 800a364:	f000 f83c 	bl	800a3e0 <Cmd_SetStatus>

  return;
 800a368:	bf00      	nop
}
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	200000d8 	.word	0x200000d8
 800a374:	200006c4 	.word	0x200006c4
 800a378:	200006a0 	.word	0x200006a0

0800a37c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b086      	sub	sp, #24
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a384:	4a10      	ldr	r2, [pc, #64]	; (800a3c8 <TlInit+0x4c>)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a38a:	4810      	ldr	r0, [pc, #64]	; (800a3cc <TlInit+0x50>)
 800a38c:	f000 fbd0 	bl	800ab30 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a390:	2001      	movs	r0, #1
 800a392:	f000 f825 	bl	800a3e0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a396:	4b0e      	ldr	r3, [pc, #56]	; (800a3d0 <TlInit+0x54>)
 800a398:	2201      	movs	r2, #1
 800a39a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a39c:	4b0d      	ldr	r3, [pc, #52]	; (800a3d4 <TlInit+0x58>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d00c      	beq.n	800a3be <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a3a8:	4b0b      	ldr	r3, [pc, #44]	; (800a3d8 <TlInit+0x5c>)
 800a3aa:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a3ac:	4b0b      	ldr	r3, [pc, #44]	; (800a3dc <TlInit+0x60>)
 800a3ae:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a3b0:	4b08      	ldr	r3, [pc, #32]	; (800a3d4 <TlInit+0x58>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f107 020c 	add.w	r2, r7, #12
 800a3b8:	4610      	mov	r0, r2
 800a3ba:	4798      	blx	r3
  }

  return;
 800a3bc:	bf00      	nop
 800a3be:	bf00      	nop
}
 800a3c0:	3718      	adds	r7, #24
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	200000d8 	.word	0x200000d8
 800a3cc:	200000cc 	.word	0x200000cc
 800a3d0:	200000dc 	.word	0x200000dc
 800a3d4:	200006a0 	.word	0x200006a0
 800a3d8:	0800a431 	.word	0x0800a431
 800a3dc:	0800a449 	.word	0x0800a449

0800a3e0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a3ea:	79fb      	ldrb	r3, [r7, #7]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d10b      	bne.n	800a408 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a3f0:	4b0d      	ldr	r3, [pc, #52]	; (800a428 <Cmd_SetStatus+0x48>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d003      	beq.n	800a400 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a3f8:	4b0b      	ldr	r3, [pc, #44]	; (800a428 <Cmd_SetStatus+0x48>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a400:	4b0a      	ldr	r3, [pc, #40]	; (800a42c <Cmd_SetStatus+0x4c>)
 800a402:	2200      	movs	r2, #0
 800a404:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a406:	e00b      	b.n	800a420 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a408:	4b08      	ldr	r3, [pc, #32]	; (800a42c <Cmd_SetStatus+0x4c>)
 800a40a:	2201      	movs	r2, #1
 800a40c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a40e:	4b06      	ldr	r3, [pc, #24]	; (800a428 <Cmd_SetStatus+0x48>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d004      	beq.n	800a420 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a416:	4b04      	ldr	r3, [pc, #16]	; (800a428 <Cmd_SetStatus+0x48>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2001      	movs	r0, #1
 800a41c:	4798      	blx	r3
  return;
 800a41e:	bf00      	nop
 800a420:	bf00      	nop
}
 800a422:	3708      	adds	r7, #8
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	200006c0 	.word	0x200006c0
 800a42c:	200000d4 	.word	0x200000d4

0800a430 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a438:	2000      	movs	r0, #0
 800a43a:	f7f7 f906 	bl	800164a <shci_cmd_resp_release>

  return;
 800a43e:	bf00      	nop
}
 800a440:	3708      	adds	r7, #8
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
	...

0800a448 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b082      	sub	sp, #8
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a450:	6879      	ldr	r1, [r7, #4]
 800a452:	4805      	ldr	r0, [pc, #20]	; (800a468 <TlUserEvtReceived+0x20>)
 800a454:	f000 fbc4 	bl	800abe0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a458:	4803      	ldr	r0, [pc, #12]	; (800a468 <TlUserEvtReceived+0x20>)
 800a45a:	f7f7 f8e9 	bl	8001630 <shci_notify_asynch_evt>

  return;
 800a45e:	bf00      	nop
}
 800a460:	3708      	adds	r7, #8
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	200000cc 	.word	0x200000cc

0800a46c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4a05      	ldr	r2, [pc, #20]	; (800a48c <shci_register_io_bus+0x20>)
 800a478:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	4a04      	ldr	r2, [pc, #16]	; (800a490 <shci_register_io_bus+0x24>)
 800a47e:	611a      	str	r2, [r3, #16]

  return;
 800a480:	bf00      	nop
}
 800a482:	370c      	adds	r7, #12
 800a484:	46bd      	mov	sp, r7
 800a486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48a:	4770      	bx	lr
 800a48c:	0800a629 	.word	0x0800a629
 800a490:	0800a67d 	.word	0x0800a67d

0800a494 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800a494:	b580      	push	{r7, lr}
 800a496:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a498:	f002 fd0c 	bl	800ceb4 <HW_IPCC_Enable>

  return;
 800a49c:	bf00      	nop
}
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <TL_Init>:


void TL_Init( void )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a4a4:	4b10      	ldr	r3, [pc, #64]	; (800a4e8 <TL_Init+0x48>)
 800a4a6:	4a11      	ldr	r2, [pc, #68]	; (800a4ec <TL_Init+0x4c>)
 800a4a8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a4aa:	4b0f      	ldr	r3, [pc, #60]	; (800a4e8 <TL_Init+0x48>)
 800a4ac:	4a10      	ldr	r2, [pc, #64]	; (800a4f0 <TL_Init+0x50>)
 800a4ae:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a4b0:	4b0d      	ldr	r3, [pc, #52]	; (800a4e8 <TL_Init+0x48>)
 800a4b2:	4a10      	ldr	r2, [pc, #64]	; (800a4f4 <TL_Init+0x54>)
 800a4b4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a4b6:	4b0c      	ldr	r3, [pc, #48]	; (800a4e8 <TL_Init+0x48>)
 800a4b8:	4a0f      	ldr	r2, [pc, #60]	; (800a4f8 <TL_Init+0x58>)
 800a4ba:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800a4bc:	4b0a      	ldr	r3, [pc, #40]	; (800a4e8 <TL_Init+0x48>)
 800a4be:	4a0f      	ldr	r2, [pc, #60]	; (800a4fc <TL_Init+0x5c>)
 800a4c0:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a4c2:	4b09      	ldr	r3, [pc, #36]	; (800a4e8 <TL_Init+0x48>)
 800a4c4:	4a0e      	ldr	r2, [pc, #56]	; (800a500 <TL_Init+0x60>)
 800a4c6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a4c8:	4b07      	ldr	r3, [pc, #28]	; (800a4e8 <TL_Init+0x48>)
 800a4ca:	4a0e      	ldr	r2, [pc, #56]	; (800a504 <TL_Init+0x64>)
 800a4cc:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a4ce:	4b06      	ldr	r3, [pc, #24]	; (800a4e8 <TL_Init+0x48>)
 800a4d0:	4a0d      	ldr	r2, [pc, #52]	; (800a508 <TL_Init+0x68>)
 800a4d2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a4d4:	4b04      	ldr	r3, [pc, #16]	; (800a4e8 <TL_Init+0x48>)
 800a4d6:	4a0d      	ldr	r2, [pc, #52]	; (800a50c <TL_Init+0x6c>)
 800a4d8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a4da:	4b03      	ldr	r3, [pc, #12]	; (800a4e8 <TL_Init+0x48>)
 800a4dc:	4a0c      	ldr	r2, [pc, #48]	; (800a510 <TL_Init+0x70>)
 800a4de:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a4e0:	f002 fcfc 	bl	800cedc <HW_IPCC_Init>

  return;
 800a4e4:	bf00      	nop
}
 800a4e6:	bd80      	pop	{r7, pc}
 800a4e8:	20030000 	.word	0x20030000
 800a4ec:	20030028 	.word	0x20030028
 800a4f0:	20030048 	.word	0x20030048
 800a4f4:	20030058 	.word	0x20030058
 800a4f8:	20030068 	.word	0x20030068
 800a4fc:	20030070 	.word	0x20030070
 800a500:	20030078 	.word	0x20030078
 800a504:	20030080 	.word	0x20030080
 800a508:	2003009c 	.word	0x2003009c
 800a50c:	200300a0 	.word	0x200300a0
 800a510:	200300ac 	.word	0x200300ac

0800a514 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b084      	sub	sp, #16
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800a520:	4811      	ldr	r0, [pc, #68]	; (800a568 <TL_BLE_Init+0x54>)
 800a522:	f000 fb05 	bl	800ab30 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800a526:	4b11      	ldr	r3, [pc, #68]	; (800a56c <TL_BLE_Init+0x58>)
 800a528:	685b      	ldr	r3, [r3, #4]
 800a52a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	689a      	ldr	r2, [r3, #8]
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	68da      	ldr	r2, [r3, #12]
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	4a0c      	ldr	r2, [pc, #48]	; (800a570 <TL_BLE_Init+0x5c>)
 800a540:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800a542:	68bb      	ldr	r3, [r7, #8]
 800a544:	4a08      	ldr	r2, [pc, #32]	; (800a568 <TL_BLE_Init+0x54>)
 800a546:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800a548:	f002 fcde 	bl	800cf08 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a08      	ldr	r2, [pc, #32]	; (800a574 <TL_BLE_Init+0x60>)
 800a552:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	4a07      	ldr	r2, [pc, #28]	; (800a578 <TL_BLE_Init+0x64>)
 800a55a:	6013      	str	r3, [r2, #0]

  return 0;
 800a55c:	2300      	movs	r3, #0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	200300c8 	.word	0x200300c8
 800a56c:	20030000 	.word	0x20030000
 800a570:	20030a58 	.word	0x20030a58
 800a574:	200006d0 	.word	0x200006d0
 800a578:	200006d4 	.word	0x200006d4

0800a57c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	460b      	mov	r3, r1
 800a586:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800a588:	4b09      	ldr	r3, [pc, #36]	; (800a5b0 <TL_BLE_SendCmd+0x34>)
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	2201      	movs	r2, #1
 800a590:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800a592:	4b07      	ldr	r3, [pc, #28]	; (800a5b0 <TL_BLE_SendCmd+0x34>)
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4619      	mov	r1, r3
 800a59a:	2001      	movs	r0, #1
 800a59c:	f000 f96c 	bl	800a878 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800a5a0:	f002 fcbc 	bl	800cf1c <HW_IPCC_BLE_SendCmd>

  return 0;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3708      	adds	r7, #8
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	20030000 	.word	0x20030000

0800a5b4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a5ba:	e01c      	b.n	800a5f6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a5bc:	1d3b      	adds	r3, r7, #4
 800a5be:	4619      	mov	r1, r3
 800a5c0:	4812      	ldr	r0, [pc, #72]	; (800a60c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a5c2:	f000 fb54 	bl	800ac6e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	7a5b      	ldrb	r3, [r3, #9]
 800a5ca:	2b0f      	cmp	r3, #15
 800a5cc:	d003      	beq.n	800a5d6 <HW_IPCC_BLE_RxEvtNot+0x22>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	7a5b      	ldrb	r3, [r3, #9]
 800a5d2:	2b0e      	cmp	r3, #14
 800a5d4:	d105      	bne.n	800a5e2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	4619      	mov	r1, r3
 800a5da:	2002      	movs	r0, #2
 800a5dc:	f000 f94c 	bl	800a878 <OutputDbgTrace>
 800a5e0:	e004      	b.n	800a5ec <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	2003      	movs	r0, #3
 800a5e8:	f000 f946 	bl	800a878 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a5ec:	4b08      	ldr	r3, [pc, #32]	; (800a610 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	4610      	mov	r0, r2
 800a5f4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a5f6:	4805      	ldr	r0, [pc, #20]	; (800a60c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a5f8:	f000 faaa 	bl	800ab50 <LST_is_empty>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d0dc      	beq.n	800a5bc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a602:	bf00      	nop
}
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	200300c8 	.word	0x200300c8
 800a610:	200006d0 	.word	0x200006d0

0800a614 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a618:	4b02      	ldr	r3, [pc, #8]	; (800a624 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4798      	blx	r3

  return;
 800a61e:	bf00      	nop
}
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	200006d4 	.word	0x200006d4

0800a628 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800a634:	480d      	ldr	r0, [pc, #52]	; (800a66c <TL_SYS_Init+0x44>)
 800a636:	f000 fa7b 	bl	800ab30 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800a63a:	4b0d      	ldr	r3, [pc, #52]	; (800a670 <TL_SYS_Init+0x48>)
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	689a      	ldr	r2, [r3, #8]
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	4a08      	ldr	r2, [pc, #32]	; (800a66c <TL_SYS_Init+0x44>)
 800a64c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800a64e:	f002 fc87 	bl	800cf60 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a07      	ldr	r2, [pc, #28]	; (800a674 <TL_SYS_Init+0x4c>)
 800a658:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	4a06      	ldr	r2, [pc, #24]	; (800a678 <TL_SYS_Init+0x50>)
 800a660:	6013      	str	r3, [r2, #0]

  return 0;
 800a662:	2300      	movs	r3, #0
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}
 800a66c:	200300d0 	.word	0x200300d0
 800a670:	20030000 	.word	0x20030000
 800a674:	200006d8 	.word	0x200006d8
 800a678:	200006dc 	.word	0x200006dc

0800a67c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	460b      	mov	r3, r1
 800a686:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800a688:	4b09      	ldr	r3, [pc, #36]	; (800a6b0 <TL_SYS_SendCmd+0x34>)
 800a68a:	68db      	ldr	r3, [r3, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	2210      	movs	r2, #16
 800a690:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800a692:	4b07      	ldr	r3, [pc, #28]	; (800a6b0 <TL_SYS_SendCmd+0x34>)
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4619      	mov	r1, r3
 800a69a:	2004      	movs	r0, #4
 800a69c:	f000 f8ec 	bl	800a878 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800a6a0:	f002 fc68 	bl	800cf74 <HW_IPCC_SYS_SendCmd>

  return 0;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3708      	adds	r7, #8
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}
 800a6ae:	bf00      	nop
 800a6b0:	20030000 	.word	0x20030000

0800a6b4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a6b8:	4b07      	ldr	r3, [pc, #28]	; (800a6d8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4619      	mov	r1, r3
 800a6c0:	2005      	movs	r0, #5
 800a6c2:	f000 f8d9 	bl	800a878 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800a6c6:	4b05      	ldr	r3, [pc, #20]	; (800a6dc <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a03      	ldr	r2, [pc, #12]	; (800a6d8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800a6cc:	68d2      	ldr	r2, [r2, #12]
 800a6ce:	6812      	ldr	r2, [r2, #0]
 800a6d0:	4610      	mov	r0, r2
 800a6d2:	4798      	blx	r3

  return;
 800a6d4:	bf00      	nop
}
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	20030000 	.word	0x20030000
 800a6dc:	200006d8 	.word	0x200006d8

0800a6e0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a6e6:	e00e      	b.n	800a706 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800a6e8:	1d3b      	adds	r3, r7, #4
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	480b      	ldr	r0, [pc, #44]	; (800a71c <HW_IPCC_SYS_EvtNot+0x3c>)
 800a6ee:	f000 fabe 	bl	800ac6e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	2006      	movs	r0, #6
 800a6f8:	f000 f8be 	bl	800a878 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800a6fc:	4b08      	ldr	r3, [pc, #32]	; (800a720 <HW_IPCC_SYS_EvtNot+0x40>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	4610      	mov	r0, r2
 800a704:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800a706:	4805      	ldr	r0, [pc, #20]	; (800a71c <HW_IPCC_SYS_EvtNot+0x3c>)
 800a708:	f000 fa22 	bl	800ab50 <LST_is_empty>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d0ea      	beq.n	800a6e8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800a712:	bf00      	nop
}
 800a714:	3708      	adds	r7, #8
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	200300d0 	.word	0x200300d0
 800a720:	200006dc 	.word	0x200006dc

0800a724 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800a72c:	4817      	ldr	r0, [pc, #92]	; (800a78c <TL_MM_Init+0x68>)
 800a72e:	f000 f9ff 	bl	800ab30 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800a732:	4817      	ldr	r0, [pc, #92]	; (800a790 <TL_MM_Init+0x6c>)
 800a734:	f000 f9fc 	bl	800ab30 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800a738:	4b16      	ldr	r3, [pc, #88]	; (800a794 <TL_MM_Init+0x70>)
 800a73a:	691b      	ldr	r3, [r3, #16]
 800a73c:	4a16      	ldr	r2, [pc, #88]	; (800a798 <TL_MM_Init+0x74>)
 800a73e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800a740:	4b15      	ldr	r3, [pc, #84]	; (800a798 <TL_MM_Init+0x74>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	6892      	ldr	r2, [r2, #8]
 800a748:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800a74a:	4b13      	ldr	r3, [pc, #76]	; (800a798 <TL_MM_Init+0x74>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	68d2      	ldr	r2, [r2, #12]
 800a752:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800a754:	4b10      	ldr	r3, [pc, #64]	; (800a798 <TL_MM_Init+0x74>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a0c      	ldr	r2, [pc, #48]	; (800a78c <TL_MM_Init+0x68>)
 800a75a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800a75c:	4b0e      	ldr	r3, [pc, #56]	; (800a798 <TL_MM_Init+0x74>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	6812      	ldr	r2, [r2, #0]
 800a764:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800a766:	4b0c      	ldr	r3, [pc, #48]	; (800a798 <TL_MM_Init+0x74>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	6852      	ldr	r2, [r2, #4]
 800a76e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800a770:	4b09      	ldr	r3, [pc, #36]	; (800a798 <TL_MM_Init+0x74>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	6912      	ldr	r2, [r2, #16]
 800a778:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800a77a:	4b07      	ldr	r3, [pc, #28]	; (800a798 <TL_MM_Init+0x74>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	687a      	ldr	r2, [r7, #4]
 800a780:	6952      	ldr	r2, [r2, #20]
 800a782:	619a      	str	r2, [r3, #24]

  return;
 800a784:	bf00      	nop
}
 800a786:	3708      	adds	r7, #8
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	200300b8 	.word	0x200300b8
 800a790:	200006c8 	.word	0x200006c8
 800a794:	20030000 	.word	0x20030000
 800a798:	200006e0 	.word	0x200006e0

0800a79c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800a7a4:	6879      	ldr	r1, [r7, #4]
 800a7a6:	4807      	ldr	r0, [pc, #28]	; (800a7c4 <TL_MM_EvtDone+0x28>)
 800a7a8:	f000 fa1a 	bl	800abe0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800a7ac:	6879      	ldr	r1, [r7, #4]
 800a7ae:	2000      	movs	r0, #0
 800a7b0:	f000 f862 	bl	800a878 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800a7b4:	4804      	ldr	r0, [pc, #16]	; (800a7c8 <TL_MM_EvtDone+0x2c>)
 800a7b6:	f002 fc03 	bl	800cfc0 <HW_IPCC_MM_SendFreeBuf>

  return;
 800a7ba:	bf00      	nop
}
 800a7bc:	3708      	adds	r7, #8
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	200006c8 	.word	0x200006c8
 800a7c8:	0800a7cd 	.word	0x0800a7cd

0800a7cc <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a7d2:	e00c      	b.n	800a7ee <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800a7d4:	1d3b      	adds	r3, r7, #4
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	480a      	ldr	r0, [pc, #40]	; (800a804 <SendFreeBuf+0x38>)
 800a7da:	f000 fa48 	bl	800ac6e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800a7de:	4b0a      	ldr	r3, [pc, #40]	; (800a808 <SendFreeBuf+0x3c>)
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	691b      	ldr	r3, [r3, #16]
 800a7e4:	687a      	ldr	r2, [r7, #4]
 800a7e6:	4611      	mov	r1, r2
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f000 f9f9 	bl	800abe0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800a7ee:	4805      	ldr	r0, [pc, #20]	; (800a804 <SendFreeBuf+0x38>)
 800a7f0:	f000 f9ae 	bl	800ab50 <LST_is_empty>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d0ec      	beq.n	800a7d4 <SendFreeBuf+0x8>
  }

  return;
 800a7fa:	bf00      	nop
}
 800a7fc:	3708      	adds	r7, #8
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
 800a802:	bf00      	nop
 800a804:	200006c8 	.word	0x200006c8
 800a808:	20030000 	.word	0x20030000

0800a80c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800a810:	4805      	ldr	r0, [pc, #20]	; (800a828 <TL_TRACES_Init+0x1c>)
 800a812:	f000 f98d 	bl	800ab30 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800a816:	4b05      	ldr	r3, [pc, #20]	; (800a82c <TL_TRACES_Init+0x20>)
 800a818:	695b      	ldr	r3, [r3, #20]
 800a81a:	4a03      	ldr	r2, [pc, #12]	; (800a828 <TL_TRACES_Init+0x1c>)
 800a81c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800a81e:	f002 fc05 	bl	800d02c <HW_IPCC_TRACES_Init>

  return;
 800a822:	bf00      	nop
}
 800a824:	bd80      	pop	{r7, pc}
 800a826:	bf00      	nop
 800a828:	200300c0 	.word	0x200300c0
 800a82c:	20030000 	.word	0x20030000

0800a830 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a836:	e008      	b.n	800a84a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800a838:	1d3b      	adds	r3, r7, #4
 800a83a:	4619      	mov	r1, r3
 800a83c:	4808      	ldr	r0, [pc, #32]	; (800a860 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a83e:	f000 fa16 	bl	800ac6e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4618      	mov	r0, r3
 800a846:	f000 f80d 	bl	800a864 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800a84a:	4805      	ldr	r0, [pc, #20]	; (800a860 <HW_IPCC_TRACES_EvtNot+0x30>)
 800a84c:	f000 f980 	bl	800ab50 <LST_is_empty>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	d0f0      	beq.n	800a838 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800a856:	bf00      	nop
}
 800a858:	3708      	adds	r7, #8
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop
 800a860:	200300c0 	.word	0x200300c0

0800a864 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800a86c:	bf00      	nop
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800a878:	b480      	push	{r7}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	4603      	mov	r3, r0
 800a880:	6039      	str	r1, [r7, #0]
 800a882:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800a884:	79fb      	ldrb	r3, [r7, #7]
 800a886:	2b06      	cmp	r3, #6
 800a888:	d845      	bhi.n	800a916 <OutputDbgTrace+0x9e>
 800a88a:	a201      	add	r2, pc, #4	; (adr r2, 800a890 <OutputDbgTrace+0x18>)
 800a88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a890:	0800a8ad 	.word	0x0800a8ad
 800a894:	0800a8d1 	.word	0x0800a8d1
 800a898:	0800a8d7 	.word	0x0800a8d7
 800a89c:	0800a8eb 	.word	0x0800a8eb
 800a8a0:	0800a8f7 	.word	0x0800a8f7
 800a8a4:	0800a8fd 	.word	0x0800a8fd
 800a8a8:	0800a90b 	.word	0x0800a90b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	7a5b      	ldrb	r3, [r3, #9]
 800a8b4:	2bff      	cmp	r3, #255	; 0xff
 800a8b6:	d005      	beq.n	800a8c4 <OutputDbgTrace+0x4c>
 800a8b8:	2bff      	cmp	r3, #255	; 0xff
 800a8ba:	dc05      	bgt.n	800a8c8 <OutputDbgTrace+0x50>
 800a8bc:	2b0e      	cmp	r3, #14
 800a8be:	d005      	beq.n	800a8cc <OutputDbgTrace+0x54>
 800a8c0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800a8c2:	e001      	b.n	800a8c8 <OutputDbgTrace+0x50>
          break;
 800a8c4:	bf00      	nop
 800a8c6:	e027      	b.n	800a918 <OutputDbgTrace+0xa0>
          break;
 800a8c8:	bf00      	nop
 800a8ca:	e025      	b.n	800a918 <OutputDbgTrace+0xa0>
          break;
 800a8cc:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800a8ce:	e023      	b.n	800a918 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a8d4:	e020      	b.n	800a918 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	7a5b      	ldrb	r3, [r3, #9]
 800a8de:	2b0e      	cmp	r3, #14
 800a8e0:	d001      	beq.n	800a8e6 <OutputDbgTrace+0x6e>
 800a8e2:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a8e4:	e000      	b.n	800a8e8 <OutputDbgTrace+0x70>
          break;
 800a8e6:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a8e8:	e016      	b.n	800a918 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	7a5b      	ldrb	r3, [r3, #9]
 800a8f2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a8f4:	e010      	b.n	800a918 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a8fa:	e00d      	b.n	800a918 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	7a5b      	ldrb	r3, [r3, #9]
 800a904:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a906:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a908:	e006      	b.n	800a918 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	7a5b      	ldrb	r3, [r3, #9]
 800a912:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a914:	e000      	b.n	800a918 <OutputDbgTrace+0xa0>

    default:
      break;
 800a916:	bf00      	nop
  }

  return;
 800a918:	bf00      	nop
}
 800a91a:	3714      	adds	r7, #20
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800a930:	215c      	movs	r1, #92	; 0x5c
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f003 f828 	bl	800d988 <strrchr>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d007      	beq.n	800a94e <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800a93e:	215c      	movs	r1, #92	; 0x5c
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f003 f821 	bl	800d988 <strrchr>
 800a946:	4603      	mov	r3, r0
 800a948:	3301      	adds	r3, #1
 800a94a:	60fb      	str	r3, [r7, #12]
 800a94c:	e00d      	b.n	800a96a <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800a94e:	212f      	movs	r1, #47	; 0x2f
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f003 f819 	bl	800d988 <strrchr>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d006      	beq.n	800a96a <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800a95c:	212f      	movs	r1, #47	; 0x2f
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f003 f812 	bl	800d988 <strrchr>
 800a964:	4603      	mov	r3, r0
 800a966:	3301      	adds	r3, #1
 800a968:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a96a:	68fb      	ldr	r3, [r7, #12]
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3710      	adds	r7, #16
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b086      	sub	sp, #24
 800a978:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a97a:	f3ef 8310 	mrs	r3, PRIMASK
 800a97e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a980:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800a982:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a984:	b672      	cpsid	i
}
 800a986:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800a988:	1cbb      	adds	r3, r7, #2
 800a98a:	4619      	mov	r1, r3
 800a98c:	4812      	ldr	r0, [pc, #72]	; (800a9d8 <DbgTrace_TxCpltCallback+0x64>)
 800a98e:	f000 fbe6 	bl	800b15e <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800a992:	1cbb      	adds	r3, r7, #2
 800a994:	4619      	mov	r1, r3
 800a996:	4810      	ldr	r0, [pc, #64]	; (800a9d8 <DbgTrace_TxCpltCallback+0x64>)
 800a998:	f000 fcd2 	bl	800b340 <CircularQueue_Sense>
 800a99c:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d00c      	beq.n	800a9be <DbgTrace_TxCpltCallback+0x4a>
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	f383 8810 	msr	PRIMASK, r3
}
 800a9ae:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800a9b0:	887b      	ldrh	r3, [r7, #2]
 800a9b2:	4a0a      	ldr	r2, [pc, #40]	; (800a9dc <DbgTrace_TxCpltCallback+0x68>)
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	6938      	ldr	r0, [r7, #16]
 800a9b8:	f7f6 facd 	bl	8000f56 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800a9bc:	e008      	b.n	800a9d0 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800a9be:	4b08      	ldr	r3, [pc, #32]	; (800a9e0 <DbgTrace_TxCpltCallback+0x6c>)
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	701a      	strb	r2, [r3, #0]
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f383 8810 	msr	PRIMASK, r3
}
 800a9ce:	bf00      	nop
}
 800a9d0:	bf00      	nop
 800a9d2:	3718      	adds	r7, #24
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	200006e4 	.word	0x200006e4
 800a9dc:	0800a975 	.word	0x0800a975
 800a9e0:	20000011 	.word	0x20000011

0800a9e4 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b082      	sub	sp, #8
 800a9e8:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800a9ea:	f7f6 faae 	bl	8000f4a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800a9ee:	2302      	movs	r3, #2
 800a9f0:	9300      	str	r3, [sp, #0]
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a9f8:	4903      	ldr	r1, [pc, #12]	; (800aa08 <DbgTraceInit+0x24>)
 800a9fa:	4804      	ldr	r0, [pc, #16]	; (800aa0c <DbgTraceInit+0x28>)
 800a9fc:	f000 f956 	bl	800acac <CircularQueue_Init>
#endif 
#endif
  return;
 800aa00:	bf00      	nop
}
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
 800aa06:	bf00      	nop
 800aa08:	20000704 	.word	0x20000704
 800aa0c:	200006e4 	.word	0x200006e4

0800aa10 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	68b9      	ldr	r1, [r7, #8]
 800aa20:	68f8      	ldr	r0, [r7, #12]
 800aa22:	f000 f805 	bl	800aa30 <DbgTraceWrite>
 800aa26:	4603      	mov	r3, r0
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3710      	adds	r7, #16
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b08a      	sub	sp, #40	; 0x28
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	60f8      	str	r0, [r7, #12]
 800aa38:	60b9      	str	r1, [r7, #8]
 800aa3a:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aa40:	f3ef 8310 	mrs	r3, PRIMASK
 800aa44:	61bb      	str	r3, [r7, #24]
  return(result);
 800aa46:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800aa48:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa50:	d102      	bne.n	800aa58 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800aa52:	2300      	movs	r3, #0
 800aa54:	627b      	str	r3, [r7, #36]	; 0x24
 800aa56:	e037      	b.n	800aac8 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d006      	beq.n	800aa6c <DbgTraceWrite+0x3c>
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2b02      	cmp	r3, #2
 800aa62:	d003      	beq.n	800aa6c <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800aa64:	f04f 33ff 	mov.w	r3, #4294967295
 800aa68:	627b      	str	r3, [r7, #36]	; 0x24
 800aa6a:	e02d      	b.n	800aac8 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d02a      	beq.n	800aac8 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800aa76:	b672      	cpsid	i
}
 800aa78:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	b29a      	uxth	r2, r3
 800aa7e:	2301      	movs	r3, #1
 800aa80:	68b9      	ldr	r1, [r7, #8]
 800aa82:	4814      	ldr	r0, [pc, #80]	; (800aad4 <DbgTraceWrite+0xa4>)
 800aa84:	f000 f944 	bl	800ad10 <CircularQueue_Add>
 800aa88:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800aa8a:	69fb      	ldr	r3, [r7, #28]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d015      	beq.n	800aabc <DbgTraceWrite+0x8c>
 800aa90:	4b11      	ldr	r3, [pc, #68]	; (800aad8 <DbgTraceWrite+0xa8>)
 800aa92:	781b      	ldrb	r3, [r3, #0]
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d010      	beq.n	800aabc <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800aa9a:	4b0f      	ldr	r3, [pc, #60]	; (800aad8 <DbgTraceWrite+0xa8>)
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	701a      	strb	r2, [r3, #0]
 800aaa0:	6a3b      	ldr	r3, [r7, #32]
 800aaa2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	f383 8810 	msr	PRIMASK, r3
}
 800aaaa:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	4a0a      	ldr	r2, [pc, #40]	; (800aadc <DbgTraceWrite+0xac>)
 800aab2:	4619      	mov	r1, r3
 800aab4:	69f8      	ldr	r0, [r7, #28]
 800aab6:	f7f6 fa4e 	bl	8000f56 <DbgOutputTraces>
 800aaba:	e005      	b.n	800aac8 <DbgTraceWrite+0x98>
 800aabc:	6a3b      	ldr	r3, [r7, #32]
 800aabe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	f383 8810 	msr	PRIMASK, r3
}
 800aac6:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800aac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3728      	adds	r7, #40	; 0x28
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	200006e4 	.word	0x200006e4
 800aad8:	20000011 	.word	0x20000011
 800aadc:	0800a975 	.word	0x0800a975

0800aae0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800aae0:	b480      	push	{r7}
 800aae2:	b085      	sub	sp, #20
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	4603      	mov	r3, r0
 800aae8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800aaea:	4b0f      	ldr	r3, [pc, #60]	; (800ab28 <OTP_Read+0x48>)
 800aaec:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800aaee:	e002      	b.n	800aaf6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	3b08      	subs	r3, #8
 800aaf4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	3307      	adds	r3, #7
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	79fa      	ldrb	r2, [r7, #7]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d003      	beq.n	800ab0a <OTP_Read+0x2a>
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	4a09      	ldr	r2, [pc, #36]	; (800ab2c <OTP_Read+0x4c>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d1f2      	bne.n	800aaf0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	3307      	adds	r3, #7
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	79fa      	ldrb	r2, [r7, #7]
 800ab12:	429a      	cmp	r2, r3
 800ab14:	d001      	beq.n	800ab1a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800ab16:	2300      	movs	r3, #0
 800ab18:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3714      	adds	r7, #20
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr
 800ab28:	1fff73f8 	.word	0x1fff73f8
 800ab2c:	1fff7000 	.word	0x1fff7000

0800ab30 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b083      	sub	sp, #12
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	605a      	str	r2, [r3, #4]
}
 800ab44:	bf00      	nop
 800ab46:	370c      	adds	r7, #12
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b087      	sub	sp, #28
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab58:	f3ef 8310 	mrs	r3, PRIMASK
 800ab5c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab5e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ab60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab62:	b672      	cpsid	i
}
 800ab64:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d102      	bne.n	800ab76 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800ab70:	2301      	movs	r3, #1
 800ab72:	75fb      	strb	r3, [r7, #23]
 800ab74:	e001      	b.n	800ab7a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800ab76:	2300      	movs	r3, #0
 800ab78:	75fb      	strb	r3, [r7, #23]
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	f383 8810 	msr	PRIMASK, r3
}
 800ab84:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800ab86:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	371c      	adds	r7, #28
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr

0800ab94 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b087      	sub	sp, #28
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab9e:	f3ef 8310 	mrs	r3, PRIMASK
 800aba2:	60fb      	str	r3, [r7, #12]
  return(result);
 800aba4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aba6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aba8:	b672      	cpsid	i
}
 800abaa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681a      	ldr	r2, [r3, #0]
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	683a      	ldr	r2, [r7, #0]
 800abbe:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	683a      	ldr	r2, [r7, #0]
 800abc6:	605a      	str	r2, [r3, #4]
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	f383 8810 	msr	PRIMASK, r3
}
 800abd2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800abd4:	bf00      	nop
 800abd6:	371c      	adds	r7, #28
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b087      	sub	sp, #28
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abea:	f3ef 8310 	mrs	r3, PRIMASK
 800abee:	60fb      	str	r3, [r7, #12]
  return(result);
 800abf0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800abf2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800abf4:	b672      	cpsid	i
}
 800abf6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	687a      	ldr	r2, [r7, #4]
 800abfc:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	685a      	ldr	r2, [r3, #4]
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	683a      	ldr	r2, [r7, #0]
 800ac0a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	683a      	ldr	r2, [r7, #0]
 800ac12:	601a      	str	r2, [r3, #0]
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	f383 8810 	msr	PRIMASK, r3
}
 800ac1e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ac20:	bf00      	nop
 800ac22:	371c      	adds	r7, #28
 800ac24:	46bd      	mov	sp, r7
 800ac26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2a:	4770      	bx	lr

0800ac2c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b087      	sub	sp, #28
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac34:	f3ef 8310 	mrs	r3, PRIMASK
 800ac38:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ac3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac3e:	b672      	cpsid	i
}
 800ac40:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	685b      	ldr	r3, [r3, #4]
 800ac46:	687a      	ldr	r2, [r7, #4]
 800ac48:	6812      	ldr	r2, [r2, #0]
 800ac4a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	6852      	ldr	r2, [r2, #4]
 800ac54:	605a      	str	r2, [r3, #4]
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	f383 8810 	msr	PRIMASK, r3
}
 800ac60:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ac62:	bf00      	nop
 800ac64:	371c      	adds	r7, #28
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr

0800ac6e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b086      	sub	sp, #24
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
 800ac76:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac78:	f3ef 8310 	mrs	r3, PRIMASK
 800ac7c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ac80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ac82:	b672      	cpsid	i
}
 800ac84:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4618      	mov	r0, r3
 800ac94:	f7ff ffca 	bl	800ac2c <LST_remove_node>
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	f383 8810 	msr	PRIMASK, r3
}
 800aca2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800aca4:	bf00      	nop
 800aca6:	3718      	adds	r7, #24
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800acac:	b480      	push	{r7}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	60b9      	str	r1, [r7, #8]
 800acb6:	607a      	str	r2, [r7, #4]
 800acb8:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	68ba      	ldr	r2, [r7, #8]
 800acbe:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2200      	movs	r2, #0
 800acc4:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2200      	movs	r2, #0
 800acca:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2200      	movs	r2, #0
 800acd0:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	887a      	ldrh	r2, [r7, #2]
 800ace2:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	7e3a      	ldrb	r2, [r7, #24]
 800ace8:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800acea:	7e3b      	ldrb	r3, [r7, #24]
 800acec:	f003 0302 	and.w	r3, r3, #2
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d006      	beq.n	800ad02 <CircularQueue_Init+0x56>
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	891b      	ldrh	r3, [r3, #8]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d002      	beq.n	800ad02 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800acfc:	f04f 33ff 	mov.w	r3, #4294967295
 800ad00:	e000      	b.n	800ad04 <CircularQueue_Init+0x58>
  }
  return 0;
 800ad02:	2300      	movs	r3, #0
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3714      	adds	r7, #20
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b08e      	sub	sp, #56	; 0x38
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	603b      	str	r3, [r7, #0]
 800ad1c:	4613      	mov	r3, r2
 800ad1e:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800ad20:	2300      	movs	r3, #0
 800ad22:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800ad24:	2300      	movs	r3, #0
 800ad26:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800ad28:	2300      	movs	r3, #0
 800ad2a:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad30:	2300      	movs	r3, #0
 800ad32:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800ad34:	2300      	movs	r3, #0
 800ad36:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800ad38:	2300      	movs	r3, #0
 800ad3a:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	891b      	ldrh	r3, [r3, #8]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d101      	bne.n	800ad48 <CircularQueue_Add+0x38>
 800ad44:	2302      	movs	r3, #2
 800ad46:	e000      	b.n	800ad4a <CircularQueue_Add+0x3a>
 800ad48:	2300      	movs	r3, #0
 800ad4a:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	695b      	ldr	r3, [r3, #20]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d02a      	beq.n	800adaa <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	891b      	ldrh	r3, [r3, #8]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d123      	bne.n	800ada4 <CircularQueue_Add+0x94>
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	691b      	ldr	r3, [r3, #16]
 800ad64:	4413      	add	r3, r2
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	b29a      	uxth	r2, r3
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	6819      	ldr	r1, [r3, #0]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	691b      	ldr	r3, [r3, #16]
 800ad72:	1c58      	adds	r0, r3, #1
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	4298      	cmp	r0, r3
 800ad7a:	d306      	bcc.n	800ad8a <CircularQueue_Add+0x7a>
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	6918      	ldr	r0, [r3, #16]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	1ac3      	subs	r3, r0, r3
 800ad86:	3301      	adds	r3, #1
 800ad88:	e002      	b.n	800ad90 <CircularQueue_Add+0x80>
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	691b      	ldr	r3, [r3, #16]
 800ad8e:	3301      	adds	r3, #1
 800ad90:	440b      	add	r3, r1
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	021b      	lsls	r3, r3, #8
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	4413      	add	r3, r2
 800ad9c:	b29b      	uxth	r3, r3
 800ad9e:	3302      	adds	r3, #2
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	e001      	b.n	800ada8 <CircularQueue_Add+0x98>
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	891b      	ldrh	r3, [r3, #8]
 800ada8:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	891b      	ldrh	r3, [r3, #8]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d002      	beq.n	800adb8 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	891b      	ldrh	r3, [r3, #8]
 800adb6:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	691a      	ldr	r2, [r3, #16]
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d307      	bcc.n	800add4 <CircularQueue_Add+0xc4>
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	685a      	ldr	r2, [r3, #4]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6919      	ldr	r1, [r3, #16]
 800adcc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800adce:	440b      	add	r3, r1
 800add0:	1ad3      	subs	r3, r2, r3
 800add2:	e000      	b.n	800add6 <CircularQueue_Add+0xc6>
 800add4:	2300      	movs	r3, #0
 800add6:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800add8:	88fa      	ldrh	r2, [r7, #6]
 800adda:	7ffb      	ldrb	r3, [r7, #31]
 800addc:	4413      	add	r3, r2
 800adde:	461a      	mov	r2, r3
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	fb02 f303 	mul.w	r3, r2, r3
 800ade6:	69ba      	ldr	r2, [r7, #24]
 800ade8:	429a      	cmp	r2, r3
 800adea:	d80b      	bhi.n	800ae04 <CircularQueue_Add+0xf4>
 800adec:	88fa      	ldrh	r2, [r7, #6]
 800adee:	7ffb      	ldrb	r3, [r7, #31]
 800adf0:	4413      	add	r3, r2
 800adf2:	461a      	mov	r2, r3
 800adf4:	69bb      	ldr	r3, [r7, #24]
 800adf6:	fbb3 f1f2 	udiv	r1, r3, r2
 800adfa:	fb01 f202 	mul.w	r2, r1, r2
 800adfe:	1a9b      	subs	r3, r3, r2
 800ae00:	b2db      	uxtb	r3, r3
 800ae02:	e000      	b.n	800ae06 <CircularQueue_Add+0xf6>
 800ae04:	2300      	movs	r3, #0
 800ae06:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800ae08:	7dfa      	ldrb	r2, [r7, #23]
 800ae0a:	7ffb      	ldrb	r3, [r7, #31]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	bf8c      	ite	hi
 800ae10:	2301      	movhi	r3, #1
 800ae12:	2300      	movls	r3, #0
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800ae18:	7fbb      	ldrb	r3, [r7, #30]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d008      	beq.n	800ae30 <CircularQueue_Add+0x120>
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	7f1b      	ldrb	r3, [r3, #28]
 800ae22:	f003 0301 	and.w	r3, r3, #1
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d002      	beq.n	800ae30 <CircularQueue_Add+0x120>
 800ae2a:	7dfb      	ldrb	r3, [r7, #23]
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	e000      	b.n	800ae32 <CircularQueue_Add+0x122>
 800ae30:	8bbb      	ldrh	r3, [r7, #28]
 800ae32:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800ae34:	7fbb      	ldrb	r3, [r7, #30]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d008      	beq.n	800ae4c <CircularQueue_Add+0x13c>
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	7f1b      	ldrb	r3, [r3, #28]
 800ae3e:	f003 0302 	and.w	r3, r3, #2
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d002      	beq.n	800ae4c <CircularQueue_Add+0x13c>
 800ae46:	7ffb      	ldrb	r3, [r7, #31]
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	e000      	b.n	800ae4e <CircularQueue_Add+0x13e>
 800ae4c:	8bbb      	ldrh	r3, [r7, #28]
 800ae4e:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800ae50:	88fb      	ldrh	r3, [r7, #6]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	f000 817e 	beq.w	800b154 <CircularQueue_Add+0x444>
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	695a      	ldr	r2, [r3, #20]
 800ae5c:	88f9      	ldrh	r1, [r7, #6]
 800ae5e:	7ffb      	ldrb	r3, [r7, #31]
 800ae60:	440b      	add	r3, r1
 800ae62:	4619      	mov	r1, r3
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	fb01 f303 	mul.w	r3, r1, r3
 800ae6a:	441a      	add	r2, r3
 800ae6c:	8bbb      	ldrh	r3, [r7, #28]
 800ae6e:	441a      	add	r2, r3
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	429a      	cmp	r2, r3
 800ae76:	f200 816d 	bhi.w	800b154 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae7e:	e14a      	b.n	800b116 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	691a      	ldr	r2, [r3, #16]
 800ae84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae86:	441a      	add	r2, r3
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d307      	bcc.n	800aea0 <CircularQueue_Add+0x190>
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	691a      	ldr	r2, [r3, #16]
 800ae94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ae96:	441a      	add	r2, r3
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	1ad3      	subs	r3, r2, r3
 800ae9e:	e003      	b.n	800aea8 <CircularQueue_Add+0x198>
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	691a      	ldr	r2, [r3, #16]
 800aea4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aea6:	4413      	add	r3, r2
 800aea8:	68fa      	ldr	r2, [r7, #12]
 800aeaa:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	691b      	ldr	r3, [r3, #16]
 800aeb0:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	891b      	ldrh	r3, [r3, #8]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d130      	bne.n	800af1c <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec0:	1c59      	adds	r1, r3, #1
 800aec2:	6339      	str	r1, [r7, #48]	; 0x30
 800aec4:	4413      	add	r3, r2
 800aec6:	88fa      	ldrh	r2, [r7, #6]
 800aec8:	b2d2      	uxtb	r2, r2
 800aeca:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d304      	bcc.n	800aee0 <CircularQueue_Add+0x1d0>
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aedc:	1ad3      	subs	r3, r2, r3
 800aede:	e000      	b.n	800aee2 <CircularQueue_Add+0x1d2>
 800aee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee2:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800aee4:	88fb      	ldrh	r3, [r7, #6]
 800aee6:	0a1b      	lsrs	r3, r3, #8
 800aee8:	b298      	uxth	r0, r3
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681a      	ldr	r2, [r3, #0]
 800aeee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef0:	1c59      	adds	r1, r3, #1
 800aef2:	6339      	str	r1, [r7, #48]	; 0x30
 800aef4:	4413      	add	r3, r2
 800aef6:	b2c2      	uxtb	r2, r0
 800aef8:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af00:	429a      	cmp	r2, r3
 800af02:	d304      	bcc.n	800af0e <CircularQueue_Add+0x1fe>
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af0a:	1ad3      	subs	r3, r2, r3
 800af0c:	e000      	b.n	800af10 <CircularQueue_Add+0x200>
 800af0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af10:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	695b      	ldr	r3, [r3, #20]
 800af16:	1c9a      	adds	r2, r3, #2
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800af1c:	88fa      	ldrh	r2, [r7, #6]
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	6859      	ldr	r1, [r3, #4]
 800af22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af24:	1acb      	subs	r3, r1, r3
 800af26:	4293      	cmp	r3, r2
 800af28:	bf28      	it	cs
 800af2a:	4613      	movcs	r3, r2
 800af2c:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800af2e:	88fb      	ldrh	r3, [r7, #6]
 800af30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af32:	429a      	cmp	r2, r3
 800af34:	d007      	beq.n	800af46 <CircularQueue_Add+0x236>
 800af36:	88fb      	ldrh	r3, [r7, #6]
 800af38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d225      	bcs.n	800af8a <CircularQueue_Add+0x27a>
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	7f1b      	ldrb	r3, [r3, #28]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d121      	bne.n	800af8a <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681a      	ldr	r2, [r3, #0]
 800af4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af4c:	18d0      	adds	r0, r2, r3
 800af4e:	88fb      	ldrh	r3, [r7, #6]
 800af50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af52:	fb02 f303 	mul.w	r3, r2, r3
 800af56:	68ba      	ldr	r2, [r7, #8]
 800af58:	4413      	add	r3, r2
 800af5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af5c:	4619      	mov	r1, r3
 800af5e:	f002 fd9e 	bl	800da9e <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	695a      	ldr	r2, [r3, #20]
 800af66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af68:	441a      	add	r2, r3
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800af6e:	2300      	movs	r3, #0
 800af70:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800af72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af74:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800af76:	88fa      	ldrh	r2, [r7, #6]
 800af78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7a:	1ad3      	subs	r3, r2, r3
 800af7c:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800af7e:	7ffb      	ldrb	r3, [r7, #31]
 800af80:	b29a      	uxth	r2, r3
 800af82:	88fb      	ldrh	r3, [r7, #6]
 800af84:	4413      	add	r3, r2
 800af86:	86fb      	strh	r3, [r7, #54]	; 0x36
 800af88:	e0a4      	b.n	800b0d4 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800af8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f000 80a1 	beq.w	800b0d4 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	7f1b      	ldrb	r3, [r3, #28]
 800af96:	f003 0301 	and.w	r3, r3, #1
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d03a      	beq.n	800b014 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	891b      	ldrh	r3, [r3, #8]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d10d      	bne.n	800afc2 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681a      	ldr	r2, [r3, #0]
 800afaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afac:	3b02      	subs	r3, #2
 800afae:	4413      	add	r3, r2
 800afb0:	22ff      	movs	r2, #255	; 0xff
 800afb2:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afba:	3b01      	subs	r3, #1
 800afbc:	4413      	add	r3, r2
 800afbe:	22ff      	movs	r2, #255	; 0xff
 800afc0:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	695a      	ldr	r2, [r3, #20]
 800afc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc8:	441a      	add	r2, r3
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800afce:	2300      	movs	r3, #0
 800afd0:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800afd2:	88fb      	ldrh	r3, [r7, #6]
 800afd4:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800afd6:	2300      	movs	r3, #0
 800afd8:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	891b      	ldrh	r3, [r3, #8]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d16f      	bne.n	800b0c2 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afe8:	1c59      	adds	r1, r3, #1
 800afea:	6339      	str	r1, [r7, #48]	; 0x30
 800afec:	4413      	add	r3, r2
 800afee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aff0:	b2d2      	uxtb	r2, r2
 800aff2:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800aff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff6:	0a18      	lsrs	r0, r3, #8
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	681a      	ldr	r2, [r3, #0]
 800affc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affe:	1c59      	adds	r1, r3, #1
 800b000:	6339      	str	r1, [r7, #48]	; 0x30
 800b002:	4413      	add	r3, r2
 800b004:	b2c2      	uxtb	r2, r0
 800b006:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	695b      	ldr	r3, [r3, #20]
 800b00c:	1c9a      	adds	r2, r3, #2
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	615a      	str	r2, [r3, #20]
 800b012:	e056      	b.n	800b0c2 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	7f1b      	ldrb	r3, [r3, #28]
 800b018:	f003 0302 	and.w	r3, r3, #2
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d050      	beq.n	800b0c2 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	891b      	ldrh	r3, [r3, #8]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d14a      	bne.n	800b0be <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681a      	ldr	r2, [r3, #0]
 800b02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02e:	3b02      	subs	r3, #2
 800b030:	4413      	add	r3, r2
 800b032:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b034:	b2d2      	uxtb	r2, r2
 800b036:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03a:	0a19      	lsrs	r1, r3, #8
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b042:	3b01      	subs	r3, #1
 800b044:	4413      	add	r3, r2
 800b046:	b2ca      	uxtb	r2, r1
 800b048:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681a      	ldr	r2, [r3, #0]
 800b04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b050:	18d0      	adds	r0, r2, r3
 800b052:	88fb      	ldrh	r3, [r7, #6]
 800b054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b056:	fb02 f303 	mul.w	r3, r2, r3
 800b05a:	68ba      	ldr	r2, [r7, #8]
 800b05c:	4413      	add	r3, r2
 800b05e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b060:	4619      	mov	r1, r3
 800b062:	f002 fd1c 	bl	800da9e <memcpy>
             q->byteCount += NbBytesToCopy; 
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	695a      	ldr	r2, [r3, #20]
 800b06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b06c:	441a      	add	r2, r3
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800b072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b074:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800b076:	88fa      	ldrh	r2, [r7, #6]
 800b078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b07a:	1ad3      	subs	r3, r2, r3
 800b07c:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	699b      	ldr	r3, [r3, #24]
 800b082:	1c5a      	adds	r2, r3, #1
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800b088:	2300      	movs	r3, #0
 800b08a:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681a      	ldr	r2, [r3, #0]
 800b090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b092:	1c59      	adds	r1, r3, #1
 800b094:	6339      	str	r1, [r7, #48]	; 0x30
 800b096:	4413      	add	r3, r2
 800b098:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b09a:	b2d2      	uxtb	r2, r2
 800b09c:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a0:	0a18      	lsrs	r0, r3, #8
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a8:	1c59      	adds	r1, r3, #1
 800b0aa:	6339      	str	r1, [r7, #48]	; 0x30
 800b0ac:	4413      	add	r3, r2
 800b0ae:	b2c2      	uxtb	r2, r0
 800b0b0:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	695b      	ldr	r3, [r3, #20]
 800b0b6:	1c9a      	adds	r2, r3, #2
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	615a      	str	r2, [r3, #20]
 800b0bc:	e001      	b.n	800b0c2 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	e049      	b.n	800b156 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800b0c2:	7ffb      	ldrb	r3, [r7, #31]
 800b0c4:	b29a      	uxth	r2, r3
 800b0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	4413      	add	r3, r2
 800b0cc:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800b0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d015      	beq.n	800b106 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e0:	18d0      	adds	r0, r2, r3
 800b0e2:	88fb      	ldrh	r3, [r7, #6]
 800b0e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0e6:	fb03 f202 	mul.w	r2, r3, r2
 800b0ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ec:	4413      	add	r3, r2
 800b0ee:	68ba      	ldr	r2, [r7, #8]
 800b0f0:	4413      	add	r3, r2
 800b0f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	f002 fcd2 	bl	800da9e <memcpy>
        q->byteCount += NbBytesToCopy;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	695a      	ldr	r2, [r3, #20]
 800b0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b100:	441a      	add	r2, r3
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	699b      	ldr	r3, [r3, #24]
 800b10a:	1c5a      	adds	r2, r3, #1
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800b110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b112:	3301      	adds	r3, #1
 800b114:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	f4ff aeb0 	bcc.w	800ae80 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	6919      	ldr	r1, [r3, #16]
 800b128:	7ffb      	ldrb	r3, [r7, #31]
 800b12a:	4419      	add	r1, r3
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	4299      	cmp	r1, r3
 800b132:	d307      	bcc.n	800b144 <CircularQueue_Add+0x434>
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	6919      	ldr	r1, [r3, #16]
 800b138:	7ffb      	ldrb	r3, [r7, #31]
 800b13a:	4419      	add	r1, r3
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	1acb      	subs	r3, r1, r3
 800b142:	e003      	b.n	800b14c <CircularQueue_Add+0x43c>
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	6919      	ldr	r1, [r3, #16]
 800b148:	7ffb      	ldrb	r3, [r7, #31]
 800b14a:	440b      	add	r3, r1
 800b14c:	4413      	add	r3, r2
 800b14e:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800b150:	6a3b      	ldr	r3, [r7, #32]
 800b152:	e000      	b.n	800b156 <CircularQueue_Add+0x446>
    return NULL;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	3738      	adds	r7, #56	; 0x38
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}

0800b15e <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800b15e:	b480      	push	{r7}
 800b160:	b085      	sub	sp, #20
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
 800b166:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b168:	2300      	movs	r3, #0
 800b16a:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800b16c:	2300      	movs	r3, #0
 800b16e:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	891b      	ldrh	r3, [r3, #8]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d101      	bne.n	800b17c <CircularQueue_Remove+0x1e>
 800b178:	2302      	movs	r3, #2
 800b17a:	e000      	b.n	800b17e <CircularQueue_Remove+0x20>
 800b17c:	2300      	movs	r3, #0
 800b17e:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800b180:	2300      	movs	r3, #0
 800b182:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	695b      	ldr	r3, [r3, #20]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	f000 80cc 	beq.w	800b326 <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	891b      	ldrh	r3, [r3, #8]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d121      	bne.n	800b1da <CircularQueue_Remove+0x7c>
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681a      	ldr	r2, [r3, #0]
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	68db      	ldr	r3, [r3, #12]
 800b19e:	4413      	add	r3, r2
 800b1a0:	781b      	ldrb	r3, [r3, #0]
 800b1a2:	b29a      	uxth	r2, r3
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6819      	ldr	r1, [r3, #0]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	68db      	ldr	r3, [r3, #12]
 800b1ac:	1c58      	adds	r0, r3, #1
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	4298      	cmp	r0, r3
 800b1b4:	d306      	bcc.n	800b1c4 <CircularQueue_Remove+0x66>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	68d8      	ldr	r0, [r3, #12]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	1ac3      	subs	r3, r0, r3
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	e002      	b.n	800b1ca <CircularQueue_Remove+0x6c>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	440b      	add	r3, r1
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	021b      	lsls	r3, r3, #8
 800b1d2:	b29b      	uxth	r3, r3
 800b1d4:	4413      	add	r3, r2
 800b1d6:	b29b      	uxth	r3, r3
 800b1d8:	e001      	b.n	800b1de <CircularQueue_Remove+0x80>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	891b      	ldrh	r3, [r3, #8]
 800b1de:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	7f1b      	ldrb	r3, [r3, #28]
 800b1e4:	f003 0301 	and.w	r3, r3, #1
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d057      	beq.n	800b29c <CircularQueue_Remove+0x13e>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	7f1b      	ldrb	r3, [r3, #28]
 800b1f0:	f003 0302 	and.w	r3, r3, #2
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d151      	bne.n	800b29c <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b1f8:	897b      	ldrh	r3, [r7, #10]
 800b1fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d103      	bne.n	800b20a <CircularQueue_Remove+0xac>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	891b      	ldrh	r3, [r3, #8]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d012      	beq.n	800b230 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	68da      	ldr	r2, [r3, #12]
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b212:	429a      	cmp	r2, r3
 800b214:	d942      	bls.n	800b29c <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	891b      	ldrh	r3, [r3, #8]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d03e      	beq.n	800b29c <CircularQueue_Remove+0x13e>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	685a      	ldr	r2, [r3, #4]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	68db      	ldr	r3, [r3, #12]
 800b226:	1ad3      	subs	r3, r2, r3
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	8912      	ldrh	r2, [r2, #8]
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d235      	bcs.n	800b29c <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	695a      	ldr	r2, [r3, #20]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	68d9      	ldr	r1, [r3, #12]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	1acb      	subs	r3, r1, r3
 800b23e:	441a      	add	r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	891b      	ldrh	r3, [r3, #8]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d121      	bne.n	800b296 <CircularQueue_Remove+0x138>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	68db      	ldr	r3, [r3, #12]
 800b25a:	4413      	add	r3, r2
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	b29a      	uxth	r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6819      	ldr	r1, [r3, #0]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	68db      	ldr	r3, [r3, #12]
 800b268:	1c58      	adds	r0, r3, #1
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	4298      	cmp	r0, r3
 800b270:	d306      	bcc.n	800b280 <CircularQueue_Remove+0x122>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	68d8      	ldr	r0, [r3, #12]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	1ac3      	subs	r3, r0, r3
 800b27c:	3301      	adds	r3, #1
 800b27e:	e002      	b.n	800b286 <CircularQueue_Remove+0x128>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	68db      	ldr	r3, [r3, #12]
 800b284:	3301      	adds	r3, #1
 800b286:	440b      	add	r3, r1
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	021b      	lsls	r3, r3, #8
 800b28e:	b29b      	uxth	r3, r3
 800b290:	4413      	add	r3, r2
 800b292:	b29b      	uxth	r3, r3
 800b294:	e001      	b.n	800b29a <CircularQueue_Remove+0x13c>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	891b      	ldrh	r3, [r3, #8]
 800b29a:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	68d9      	ldr	r1, [r3, #12]
 800b2a4:	7a7b      	ldrb	r3, [r7, #9]
 800b2a6:	4419      	add	r1, r3
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	4299      	cmp	r1, r3
 800b2ae:	d307      	bcc.n	800b2c0 <CircularQueue_Remove+0x162>
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	68d9      	ldr	r1, [r3, #12]
 800b2b4:	7a7b      	ldrb	r3, [r7, #9]
 800b2b6:	4419      	add	r1, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	1acb      	subs	r3, r1, r3
 800b2be:	e003      	b.n	800b2c8 <CircularQueue_Remove+0x16a>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	68d9      	ldr	r1, [r3, #12]
 800b2c4:	7a7b      	ldrb	r3, [r7, #9]
 800b2c6:	440b      	add	r3, r1
 800b2c8:	4413      	add	r3, r2
 800b2ca:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	695b      	ldr	r3, [r3, #20]
 800b2d0:	8979      	ldrh	r1, [r7, #10]
 800b2d2:	7a7a      	ldrb	r2, [r7, #9]
 800b2d4:	440a      	add	r2, r1
 800b2d6:	1a9a      	subs	r2, r3, r2
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	695b      	ldr	r3, [r3, #20]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d01b      	beq.n	800b31c <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	68da      	ldr	r2, [r3, #12]
 800b2e8:	897b      	ldrh	r3, [r7, #10]
 800b2ea:	441a      	add	r2, r3
 800b2ec:	7a7b      	ldrb	r3, [r7, #9]
 800b2ee:	441a      	add	r2, r3
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d309      	bcc.n	800b30c <CircularQueue_Remove+0x1ae>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	68da      	ldr	r2, [r3, #12]
 800b2fc:	897b      	ldrh	r3, [r7, #10]
 800b2fe:	441a      	add	r2, r3
 800b300:	7a7b      	ldrb	r3, [r7, #9]
 800b302:	441a      	add	r2, r3
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	1ad3      	subs	r3, r2, r3
 800b30a:	e005      	b.n	800b318 <CircularQueue_Remove+0x1ba>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	68da      	ldr	r2, [r3, #12]
 800b310:	897b      	ldrh	r3, [r7, #10]
 800b312:	441a      	add	r2, r3
 800b314:	7a7b      	ldrb	r3, [r7, #9]
 800b316:	4413      	add	r3, r2
 800b318:	687a      	ldr	r2, [r7, #4]
 800b31a:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	699b      	ldr	r3, [r3, #24]
 800b320:	1e5a      	subs	r2, r3, #1
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d002      	beq.n	800b332 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	897a      	ldrh	r2, [r7, #10]
 800b330:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800b332:	68fb      	ldr	r3, [r7, #12]
}
 800b334:	4618      	mov	r0, r3
 800b336:	3714      	adds	r7, #20
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800b340:	b480      	push	{r7}
 800b342:	b087      	sub	sp, #28
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b34a:	2300      	movs	r3, #0
 800b34c:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800b34e:	2300      	movs	r3, #0
 800b350:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	891b      	ldrh	r3, [r3, #8]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d101      	bne.n	800b35e <CircularQueue_Sense+0x1e>
 800b35a:	2302      	movs	r3, #2
 800b35c:	e000      	b.n	800b360 <CircularQueue_Sense+0x20>
 800b35e:	2300      	movs	r3, #0
 800b360:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800b362:	2300      	movs	r3, #0
 800b364:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800b366:	2300      	movs	r3, #0
 800b368:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	695b      	ldr	r3, [r3, #20]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	f000 8090 	beq.w	800b494 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	891b      	ldrh	r3, [r3, #8]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d121      	bne.n	800b3c6 <CircularQueue_Sense+0x86>
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	4413      	add	r3, r2
 800b38c:	781b      	ldrb	r3, [r3, #0]
 800b38e:	b29a      	uxth	r2, r3
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6819      	ldr	r1, [r3, #0]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	68db      	ldr	r3, [r3, #12]
 800b398:	1c58      	adds	r0, r3, #1
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	4298      	cmp	r0, r3
 800b3a0:	d306      	bcc.n	800b3b0 <CircularQueue_Sense+0x70>
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	68d8      	ldr	r0, [r3, #12]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	1ac3      	subs	r3, r0, r3
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	e002      	b.n	800b3b6 <CircularQueue_Sense+0x76>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	440b      	add	r3, r1
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	b29b      	uxth	r3, r3
 800b3bc:	021b      	lsls	r3, r3, #8
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	4413      	add	r3, r2
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	e001      	b.n	800b3ca <CircularQueue_Sense+0x8a>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	891b      	ldrh	r3, [r3, #8]
 800b3ca:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	7f1b      	ldrb	r3, [r3, #28]
 800b3d0:	f003 0301 	and.w	r3, r3, #1
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d048      	beq.n	800b46a <CircularQueue_Sense+0x12a>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	7f1b      	ldrb	r3, [r3, #28]
 800b3dc:	f003 0302 	and.w	r3, r3, #2
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d142      	bne.n	800b46a <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b3e4:	8a7b      	ldrh	r3, [r7, #18]
 800b3e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d103      	bne.n	800b3f6 <CircularQueue_Sense+0xb6>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	891b      	ldrh	r3, [r3, #8]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d012      	beq.n	800b41c <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	68da      	ldr	r2, [r3, #12]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d933      	bls.n	800b46a <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	891b      	ldrh	r3, [r3, #8]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d02f      	beq.n	800b46a <CircularQueue_Sense+0x12a>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	685a      	ldr	r2, [r3, #4]
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	68db      	ldr	r3, [r3, #12]
 800b412:	1ad3      	subs	r3, r2, r3
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	8912      	ldrh	r2, [r2, #8]
 800b418:	4293      	cmp	r3, r2
 800b41a:	d226      	bcs.n	800b46a <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800b41c:	2300      	movs	r3, #0
 800b41e:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	891b      	ldrh	r3, [r3, #8]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d11d      	bne.n	800b464 <CircularQueue_Sense+0x124>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681a      	ldr	r2, [r3, #0]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	4413      	add	r3, r2
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	b29a      	uxth	r2, r3
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	6819      	ldr	r1, [r3, #0]
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	1c58      	adds	r0, r3, #1
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	4298      	cmp	r0, r3
 800b442:	d305      	bcc.n	800b450 <CircularQueue_Sense+0x110>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	68f8      	ldr	r0, [r7, #12]
 800b44a:	1ac3      	subs	r3, r0, r3
 800b44c:	3301      	adds	r3, #1
 800b44e:	e001      	b.n	800b454 <CircularQueue_Sense+0x114>
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	3301      	adds	r3, #1
 800b454:	440b      	add	r3, r1
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	b29b      	uxth	r3, r3
 800b45a:	021b      	lsls	r3, r3, #8
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	4413      	add	r3, r2
 800b460:	b29b      	uxth	r3, r3
 800b462:	e001      	b.n	800b468 <CircularQueue_Sense+0x128>
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	891b      	ldrh	r3, [r3, #8]
 800b468:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681a      	ldr	r2, [r3, #0]
 800b46e:	7af9      	ldrb	r1, [r7, #11]
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	4419      	add	r1, r3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	4299      	cmp	r1, r3
 800b47a:	d306      	bcc.n	800b48a <CircularQueue_Sense+0x14a>
 800b47c:	7af9      	ldrb	r1, [r7, #11]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	4419      	add	r1, r3
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	1acb      	subs	r3, r1, r3
 800b488:	e002      	b.n	800b490 <CircularQueue_Sense+0x150>
 800b48a:	7af9      	ldrb	r1, [r7, #11]
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	440b      	add	r3, r1
 800b490:	4413      	add	r3, r2
 800b492:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d002      	beq.n	800b4a0 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	8a7a      	ldrh	r2, [r7, #18]
 800b49e:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800b4a0:	697b      	ldr	r3, [r7, #20]
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	371c      	adds	r7, #28
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr
	...

0800b4b0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800b4b4:	4b03      	ldr	r3, [pc, #12]	; (800b4c4 <LL_FLASH_GetUDN+0x14>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr
 800b4c2:	bf00      	nop
 800b4c4:	1fff7580 	.word	0x1fff7580

0800b4c8 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800b4cc:	4b03      	ldr	r3, [pc, #12]	; (800b4dc <LL_FLASH_GetDeviceID+0x14>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	b2db      	uxtb	r3, r3
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr
 800b4dc:	1fff7584 	.word	0x1fff7584

0800b4e0 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800b4e4:	4b03      	ldr	r3, [pc, #12]	; (800b4f4 <LL_FLASH_GetSTCompanyID+0x14>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	0a1b      	lsrs	r3, r3, #8
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr
 800b4f4:	1fff7584 	.word	0x1fff7584

0800b4f8 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800b4f8:	b5b0      	push	{r4, r5, r7, lr}
 800b4fa:	b090      	sub	sp, #64	; 0x40
 800b4fc:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b4fe:	2392      	movs	r3, #146	; 0x92
 800b500:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800b504:	4b45      	ldr	r3, [pc, #276]	; (800b61c <APP_BLE_Init+0x124>)
 800b506:	1d3c      	adds	r4, r7, #4
 800b508:	461d      	mov	r5, r3
 800b50a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b50c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b50e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b516:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b51a:	c403      	stmia	r4!, {r0, r1}
 800b51c:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800b51e:	f000 fb37 	bl	800bb90 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800b522:	2101      	movs	r1, #1
 800b524:	2002      	movs	r0, #2
 800b526:	f001 fda9 	bl	800d07c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800b52a:	4a3d      	ldr	r2, [pc, #244]	; (800b620 <APP_BLE_Init+0x128>)
 800b52c:	2100      	movs	r1, #0
 800b52e:	2002      	movs	r0, #2
 800b530:	f001 fed0 	bl	800d2d4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800b534:	1d3b      	adds	r3, r7, #4
 800b536:	4618      	mov	r0, r3
 800b538:	f7fe fbe6 	bl	8009d08 <SHCI_C2_BLE_Init>
 800b53c:	4603      	mov	r3, r0
 800b53e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800b542:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b546:	2b00      	cmp	r3, #0
 800b548:	d012      	beq.n	800b570 <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800b54a:	4836      	ldr	r0, [pc, #216]	; (800b624 <APP_BLE_Init+0x12c>)
 800b54c:	f7ff f9ea 	bl	800a924 <DbgTraceGetFileName>
 800b550:	4601      	mov	r1, r0
 800b552:	f240 1347 	movw	r3, #327	; 0x147
 800b556:	4a34      	ldr	r2, [pc, #208]	; (800b628 <APP_BLE_Init+0x130>)
 800b558:	4834      	ldr	r0, [pc, #208]	; (800b62c <APP_BLE_Init+0x134>)
 800b55a:	f002 f8bf 	bl	800d6dc <iprintf>
 800b55e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b562:	4619      	mov	r1, r3
 800b564:	4832      	ldr	r0, [pc, #200]	; (800b630 <APP_BLE_Init+0x138>)
 800b566:	f002 f8b9 	bl	800d6dc <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800b56a:	f7f7 faf9 	bl	8002b60 <Error_Handler>
 800b56e:	e00c      	b.n	800b58a <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800b570:	482c      	ldr	r0, [pc, #176]	; (800b624 <APP_BLE_Init+0x12c>)
 800b572:	f7ff f9d7 	bl	800a924 <DbgTraceGetFileName>
 800b576:	4601      	mov	r1, r0
 800b578:	f240 134d 	movw	r3, #333	; 0x14d
 800b57c:	4a2a      	ldr	r2, [pc, #168]	; (800b628 <APP_BLE_Init+0x130>)
 800b57e:	482b      	ldr	r0, [pc, #172]	; (800b62c <APP_BLE_Init+0x134>)
 800b580:	f002 f8ac 	bl	800d6dc <iprintf>
 800b584:	482b      	ldr	r0, [pc, #172]	; (800b634 <APP_BLE_Init+0x13c>)
 800b586:	f002 f8a9 	bl	800d6dc <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800b58a:	f000 fb17 	bl	800bbbc <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800b58e:	f7fe fb15 	bl	8009bbc <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b592:	4b29      	ldr	r3, [pc, #164]	; (800b638 <APP_BLE_Init+0x140>)
 800b594:	2200      	movs	r2, #0
 800b596:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800b59a:	4b27      	ldr	r3, [pc, #156]	; (800b638 <APP_BLE_Init+0x140>)
 800b59c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5a0:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800b5a2:	4a26      	ldr	r2, [pc, #152]	; (800b63c <APP_BLE_Init+0x144>)
 800b5a4:	2100      	movs	r1, #0
 800b5a6:	2001      	movs	r0, #1
 800b5a8:	f001 fe94 	bl	800d2d4 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800b5ac:	2006      	movs	r0, #6
 800b5ae:	f7fe f979 	bl	80098a4 <aci_hal_set_radio_activity_mask>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800b5b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d010      	beq.n	800b5e2 <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800b5c0:	4818      	ldr	r0, [pc, #96]	; (800b624 <APP_BLE_Init+0x12c>)
 800b5c2:	f7ff f9af 	bl	800a924 <DbgTraceGetFileName>
 800b5c6:	4601      	mov	r1, r0
 800b5c8:	f240 1371 	movw	r3, #369	; 0x171
 800b5cc:	4a16      	ldr	r2, [pc, #88]	; (800b628 <APP_BLE_Init+0x130>)
 800b5ce:	4817      	ldr	r0, [pc, #92]	; (800b62c <APP_BLE_Init+0x134>)
 800b5d0:	f002 f884 	bl	800d6dc <iprintf>
 800b5d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b5d8:	4619      	mov	r1, r3
 800b5da:	4819      	ldr	r0, [pc, #100]	; (800b640 <APP_BLE_Init+0x148>)
 800b5dc:	f002 f87e 	bl	800d6dc <iprintf>
 800b5e0:	e00c      	b.n	800b5fc <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800b5e2:	4810      	ldr	r0, [pc, #64]	; (800b624 <APP_BLE_Init+0x12c>)
 800b5e4:	f7ff f99e 	bl	800a924 <DbgTraceGetFileName>
 800b5e8:	4601      	mov	r1, r0
 800b5ea:	f240 1375 	movw	r3, #373	; 0x175
 800b5ee:	4a0e      	ldr	r2, [pc, #56]	; (800b628 <APP_BLE_Init+0x130>)
 800b5f0:	480e      	ldr	r0, [pc, #56]	; (800b62c <APP_BLE_Init+0x134>)
 800b5f2:	f002 f873 	bl	800d6dc <iprintf>
 800b5f6:	4813      	ldr	r0, [pc, #76]	; (800b644 <APP_BLE_Init+0x14c>)
 800b5f8:	f002 f870 	bl	800d6dc <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800b5fc:	f000 ff9e 	bl	800c53c <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800b600:	4b0d      	ldr	r3, [pc, #52]	; (800b638 <APP_BLE_Init+0x140>)
 800b602:	2200      	movs	r2, #0
 800b604:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800b606:	4b0c      	ldr	r3, [pc, #48]	; (800b638 <APP_BLE_Init+0x140>)
 800b608:	2200      	movs	r2, #0
 800b60a:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800b60c:	2001      	movs	r0, #1
 800b60e:	f000 fd69 	bl	800c0e4 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800b612:	bf00      	nop
}
 800b614:	3740      	adds	r7, #64	; 0x40
 800b616:	46bd      	mov	sp, r7
 800b618:	bdb0      	pop	{r4, r5, r7, pc}
 800b61a:	bf00      	nop
 800b61c:	0800ea34 	.word	0x0800ea34
 800b620:	08009f25 	.word	0x08009f25
 800b624:	0800e928 	.word	0x0800e928
 800b628:	0800fc60 	.word	0x0800fc60
 800b62c:	0800e944 	.word	0x0800e944
 800b630:	0800e958 	.word	0x0800e958
 800b634:	0800e990 	.word	0x0800e990
 800b638:	2000170c 	.word	0x2000170c
 800b63c:	0800c269 	.word	0x0800c269
 800b640:	0800e9b8 	.word	0x0800e9b8
 800b644:	0800e9fc 	.word	0x0800e9fc

0800b648 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800b648:	b5b0      	push	{r4, r5, r7, lr}
 800b64a:	b08e      	sub	sp, #56	; 0x38
 800b64c:	af04      	add	r7, sp, #16
 800b64e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800b650:	2392      	movs	r3, #146	; 0x92
 800b652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	3301      	adds	r3, #1
 800b65a:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800b65c:	6a3b      	ldr	r3, [r7, #32]
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	2bff      	cmp	r3, #255	; 0xff
 800b662:	f000 811d 	beq.w	800b8a0 <SVCCTL_App_Notification+0x258>
 800b666:	2bff      	cmp	r3, #255	; 0xff
 800b668:	f300 8269 	bgt.w	800bb3e <SVCCTL_App_Notification+0x4f6>
 800b66c:	2b05      	cmp	r3, #5
 800b66e:	d002      	beq.n	800b676 <SVCCTL_App_Notification+0x2e>
 800b670:	2b3e      	cmp	r3, #62	; 0x3e
 800b672:	d042      	beq.n	800b6fa <SVCCTL_App_Notification+0xb2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800b674:	e263      	b.n	800bb3e <SVCCTL_App_Notification+0x4f6>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800b676:	6a3b      	ldr	r3, [r7, #32]
 800b678:	3302      	adds	r3, #2
 800b67a:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800b67c:	68bb      	ldr	r3, [r7, #8]
 800b67e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b682:	b29a      	uxth	r2, r3
 800b684:	4bb1      	ldr	r3, [pc, #708]	; (800b94c <SVCCTL_App_Notification+0x304>)
 800b686:	8adb      	ldrh	r3, [r3, #22]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d128      	bne.n	800b6de <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800b68c:	4baf      	ldr	r3, [pc, #700]	; (800b94c <SVCCTL_App_Notification+0x304>)
 800b68e:	2200      	movs	r2, #0
 800b690:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b692:	4bae      	ldr	r3, [pc, #696]	; (800b94c <SVCCTL_App_Notification+0x304>)
 800b694:	2200      	movs	r2, #0
 800b696:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800b69a:	48ad      	ldr	r0, [pc, #692]	; (800b950 <SVCCTL_App_Notification+0x308>)
 800b69c:	f7ff f942 	bl	800a924 <DbgTraceGetFileName>
 800b6a0:	4601      	mov	r1, r0
 800b6a2:	f240 13b9 	movw	r3, #441	; 0x1b9
 800b6a6:	4aab      	ldr	r2, [pc, #684]	; (800b954 <SVCCTL_App_Notification+0x30c>)
 800b6a8:	48ab      	ldr	r0, [pc, #684]	; (800b958 <SVCCTL_App_Notification+0x310>)
 800b6aa:	f002 f817 	bl	800d6dc <iprintf>
 800b6ae:	48ab      	ldr	r0, [pc, #684]	; (800b95c <SVCCTL_App_Notification+0x314>)
 800b6b0:	f002 f882 	bl	800d7b8 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800b6b4:	48a6      	ldr	r0, [pc, #664]	; (800b950 <SVCCTL_App_Notification+0x308>)
 800b6b6:	f7ff f935 	bl	800a924 <DbgTraceGetFileName>
 800b6ba:	4601      	mov	r1, r0
 800b6bc:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 800b6c0:	4aa4      	ldr	r2, [pc, #656]	; (800b954 <SVCCTL_App_Notification+0x30c>)
 800b6c2:	48a5      	ldr	r0, [pc, #660]	; (800b958 <SVCCTL_App_Notification+0x310>)
 800b6c4:	f002 f80a 	bl	800d6dc <iprintf>
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	78db      	ldrb	r3, [r3, #3]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	48a1      	ldr	r0, [pc, #644]	; (800b960 <SVCCTL_App_Notification+0x318>)
 800b6da:	f001 ffff 	bl	800d6dc <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800b6de:	2001      	movs	r0, #1
 800b6e0:	f000 fd00 	bl	800c0e4 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800b6e4:	4b9f      	ldr	r3, [pc, #636]	; (800b964 <SVCCTL_App_Notification+0x31c>)
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800b6ea:	4b98      	ldr	r3, [pc, #608]	; (800b94c <SVCCTL_App_Notification+0x304>)
 800b6ec:	8ada      	ldrh	r2, [r3, #22]
 800b6ee:	4b9d      	ldr	r3, [pc, #628]	; (800b964 <SVCCTL_App_Notification+0x31c>)
 800b6f0:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800b6f2:	489c      	ldr	r0, [pc, #624]	; (800b964 <SVCCTL_App_Notification+0x31c>)
 800b6f4:	f000 ff0e 	bl	800c514 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800b6f8:	e224      	b.n	800bb44 <SVCCTL_App_Notification+0x4fc>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800b6fa:	6a3b      	ldr	r3, [r7, #32]
 800b6fc:	3302      	adds	r3, #2
 800b6fe:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	2b01      	cmp	r3, #1
 800b706:	d042      	beq.n	800b78e <SVCCTL_App_Notification+0x146>
 800b708:	2b03      	cmp	r3, #3
 800b70a:	f040 80c7 	bne.w	800b89c <SVCCTL_App_Notification+0x254>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800b70e:	697b      	ldr	r3, [r7, #20]
 800b710:	3301      	adds	r3, #1
 800b712:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800b714:	488e      	ldr	r0, [pc, #568]	; (800b950 <SVCCTL_App_Notification+0x308>)
 800b716:	f7ff f905 	bl	800a924 <DbgTraceGetFileName>
 800b71a:	4601      	mov	r1, r0
 800b71c:	f240 13e1 	movw	r3, #481	; 0x1e1
 800b720:	4a8c      	ldr	r2, [pc, #560]	; (800b954 <SVCCTL_App_Notification+0x30c>)
 800b722:	488d      	ldr	r0, [pc, #564]	; (800b958 <SVCCTL_App_Notification+0x310>)
 800b724:	f001 ffda 	bl	800d6dc <iprintf>
 800b728:	488f      	ldr	r0, [pc, #572]	; (800b968 <SVCCTL_App_Notification+0x320>)
 800b72a:	f002 f845 	bl	800d7b8 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800b72e:	4888      	ldr	r0, [pc, #544]	; (800b950 <SVCCTL_App_Notification+0x308>)
 800b730:	f7ff f8f8 	bl	800a924 <DbgTraceGetFileName>
 800b734:	4601      	mov	r1, r0
 800b736:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 800b73a:	4a86      	ldr	r2, [pc, #536]	; (800b954 <SVCCTL_App_Notification+0x30c>)
 800b73c:	4886      	ldr	r0, [pc, #536]	; (800b958 <SVCCTL_App_Notification+0x310>)
 800b73e:	f001 ffcd 	bl	800d6dc <iprintf>
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800b748:	b29b      	uxth	r3, r3
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7f4 fec2 	bl	80004d4 <__aeabi_i2d>
 800b750:	f04f 0200 	mov.w	r2, #0
 800b754:	4b85      	ldr	r3, [pc, #532]	; (800b96c <SVCCTL_App_Notification+0x324>)
 800b756:	f7f4 ff27 	bl	80005a8 <__aeabi_dmul>
 800b75a:	4602      	mov	r2, r0
 800b75c:	460b      	mov	r3, r1
 800b75e:	4610      	mov	r0, r2
 800b760:	4619      	mov	r1, r3
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800b768:	b29b      	uxth	r3, r3
 800b76a:	461c      	mov	r4, r3
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800b772:	b29b      	uxth	r3, r3
 800b774:	461a      	mov	r2, r3
 800b776:	4613      	mov	r3, r2
 800b778:	009b      	lsls	r3, r3, #2
 800b77a:	4413      	add	r3, r2
 800b77c:	005b      	lsls	r3, r3, #1
 800b77e:	9301      	str	r3, [sp, #4]
 800b780:	9400      	str	r4, [sp, #0]
 800b782:	4602      	mov	r2, r0
 800b784:	460b      	mov	r3, r1
 800b786:	487a      	ldr	r0, [pc, #488]	; (800b970 <SVCCTL_App_Notification+0x328>)
 800b788:	f001 ffa8 	bl	800d6dc <iprintf>
          break;
 800b78c:	e087      	b.n	800b89e <SVCCTL_App_Notification+0x256>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	3301      	adds	r3, #1
 800b792:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800b794:	486e      	ldr	r0, [pc, #440]	; (800b950 <SVCCTL_App_Notification+0x308>)
 800b796:	f7ff f8c5 	bl	800a924 <DbgTraceGetFileName>
 800b79a:	4601      	mov	r1, r0
 800b79c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800b7a0:	4a6c      	ldr	r2, [pc, #432]	; (800b954 <SVCCTL_App_Notification+0x30c>)
 800b7a2:	486d      	ldr	r0, [pc, #436]	; (800b958 <SVCCTL_App_Notification+0x310>)
 800b7a4:	f001 ff9a 	bl	800d6dc <iprintf>
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	4870      	ldr	r0, [pc, #448]	; (800b974 <SVCCTL_App_Notification+0x32c>)
 800b7b4:	f001 ff92 	bl	800d6dc <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800b7b8:	4865      	ldr	r0, [pc, #404]	; (800b950 <SVCCTL_App_Notification+0x308>)
 800b7ba:	f7ff f8b3 	bl	800a924 <DbgTraceGetFileName>
 800b7be:	4601      	mov	r1, r0
 800b7c0:	f240 13f5 	movw	r3, #501	; 0x1f5
 800b7c4:	4a63      	ldr	r2, [pc, #396]	; (800b954 <SVCCTL_App_Notification+0x30c>)
 800b7c6:	4864      	ldr	r0, [pc, #400]	; (800b958 <SVCCTL_App_Notification+0x310>)
 800b7c8:	f001 ff88 	bl	800d6dc <iprintf>
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	7a9b      	ldrb	r3, [r3, #10]
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	7a5b      	ldrb	r3, [r3, #9]
 800b7d6:	461c      	mov	r4, r3
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	7a1b      	ldrb	r3, [r3, #8]
 800b7dc:	461d      	mov	r5, r3
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	79db      	ldrb	r3, [r3, #7]
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	799b      	ldrb	r3, [r3, #6]
 800b7e8:	4619      	mov	r1, r3
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	795b      	ldrb	r3, [r3, #5]
 800b7ee:	9302      	str	r3, [sp, #8]
 800b7f0:	9101      	str	r1, [sp, #4]
 800b7f2:	9200      	str	r2, [sp, #0]
 800b7f4:	462b      	mov	r3, r5
 800b7f6:	4622      	mov	r2, r4
 800b7f8:	4601      	mov	r1, r0
 800b7fa:	485f      	ldr	r0, [pc, #380]	; (800b978 <SVCCTL_App_Notification+0x330>)
 800b7fc:	f001 ff6e 	bl	800d6dc <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800b800:	4853      	ldr	r0, [pc, #332]	; (800b950 <SVCCTL_App_Notification+0x308>)
 800b802:	f7ff f88f 	bl	800a924 <DbgTraceGetFileName>
 800b806:	4601      	mov	r1, r0
 800b808:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 800b80c:	4a51      	ldr	r2, [pc, #324]	; (800b954 <SVCCTL_App_Notification+0x30c>)
 800b80e:	4852      	ldr	r0, [pc, #328]	; (800b958 <SVCCTL_App_Notification+0x310>)
 800b810:	f001 ff64 	bl	800d6dc <iprintf>
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	4618      	mov	r0, r3
 800b81e:	f7f4 fe59 	bl	80004d4 <__aeabi_i2d>
 800b822:	f04f 0200 	mov.w	r2, #0
 800b826:	4b51      	ldr	r3, [pc, #324]	; (800b96c <SVCCTL_App_Notification+0x324>)
 800b828:	f7f4 febe 	bl	80005a8 <__aeabi_dmul>
 800b82c:	4602      	mov	r2, r0
 800b82e:	460b      	mov	r3, r1
 800b830:	4610      	mov	r0, r2
 800b832:	4619      	mov	r1, r3
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	461c      	mov	r4, r3
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800b844:	b29b      	uxth	r3, r3
 800b846:	461a      	mov	r2, r3
 800b848:	4613      	mov	r3, r2
 800b84a:	009b      	lsls	r3, r3, #2
 800b84c:	4413      	add	r3, r2
 800b84e:	005b      	lsls	r3, r3, #1
 800b850:	9301      	str	r3, [sp, #4]
 800b852:	9400      	str	r4, [sp, #0]
 800b854:	4602      	mov	r2, r0
 800b856:	460b      	mov	r3, r1
 800b858:	4845      	ldr	r0, [pc, #276]	; (800b970 <SVCCTL_App_Notification+0x328>)
 800b85a:	f001 ff3f 	bl	800d6dc <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800b85e:	4b3b      	ldr	r3, [pc, #236]	; (800b94c <SVCCTL_App_Notification+0x304>)
 800b860:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b864:	2b04      	cmp	r3, #4
 800b866:	d104      	bne.n	800b872 <SVCCTL_App_Notification+0x22a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800b868:	4b38      	ldr	r3, [pc, #224]	; (800b94c <SVCCTL_App_Notification+0x304>)
 800b86a:	2206      	movs	r2, #6
 800b86c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800b870:	e003      	b.n	800b87a <SVCCTL_App_Notification+0x232>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800b872:	4b36      	ldr	r3, [pc, #216]	; (800b94c <SVCCTL_App_Notification+0x304>)
 800b874:	2205      	movs	r2, #5
 800b876:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800b880:	b29a      	uxth	r2, r3
 800b882:	4b32      	ldr	r3, [pc, #200]	; (800b94c <SVCCTL_App_Notification+0x304>)
 800b884:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800b886:	4b37      	ldr	r3, [pc, #220]	; (800b964 <SVCCTL_App_Notification+0x31c>)
 800b888:	2200      	movs	r2, #0
 800b88a:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800b88c:	4b2f      	ldr	r3, [pc, #188]	; (800b94c <SVCCTL_App_Notification+0x304>)
 800b88e:	8ada      	ldrh	r2, [r3, #22]
 800b890:	4b34      	ldr	r3, [pc, #208]	; (800b964 <SVCCTL_App_Notification+0x31c>)
 800b892:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800b894:	4833      	ldr	r0, [pc, #204]	; (800b964 <SVCCTL_App_Notification+0x31c>)
 800b896:	f000 fe3d 	bl	800c514 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800b89a:	e000      	b.n	800b89e <SVCCTL_App_Notification+0x256>
          break;
 800b89c:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800b89e:	e151      	b.n	800bb44 <SVCCTL_App_Notification+0x4fc>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800b8a0:	6a3b      	ldr	r3, [r7, #32]
 800b8a2:	3302      	adds	r3, #2
 800b8a4:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800b8a6:	69fb      	ldr	r3, [r7, #28]
 800b8a8:	881b      	ldrh	r3, [r3, #0]
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8b0:	f000 8141 	beq.w	800bb36 <SVCCTL_App_Notification+0x4ee>
 800b8b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8b8:	f300 8143 	bgt.w	800bb42 <SVCCTL_App_Notification+0x4fa>
 800b8bc:	2b04      	cmp	r3, #4
 800b8be:	f000 813c 	beq.w	800bb3a <SVCCTL_App_Notification+0x4f2>
 800b8c2:	2b04      	cmp	r3, #4
 800b8c4:	f2c0 813d 	blt.w	800bb42 <SVCCTL_App_Notification+0x4fa>
 800b8c8:	f240 420a 	movw	r2, #1034	; 0x40a
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	f300 8138 	bgt.w	800bb42 <SVCCTL_App_Notification+0x4fa>
 800b8d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8d6:	f340 8134 	ble.w	800bb42 <SVCCTL_App_Notification+0x4fa>
 800b8da:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800b8de:	2b09      	cmp	r3, #9
 800b8e0:	f200 812f 	bhi.w	800bb42 <SVCCTL_App_Notification+0x4fa>
 800b8e4:	a201      	add	r2, pc, #4	; (adr r2, 800b8ec <SVCCTL_App_Notification+0x2a4>)
 800b8e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8ea:	bf00      	nop
 800b8ec:	0800bab1 	.word	0x0800bab1
 800b8f0:	0800b985 	.word	0x0800b985
 800b8f4:	0800bb43 	.word	0x0800bb43
 800b8f8:	0800bb43 	.word	0x0800bb43
 800b8fc:	0800bb43 	.word	0x0800bb43
 800b900:	0800bb43 	.word	0x0800bb43
 800b904:	0800b915 	.word	0x0800b915
 800b908:	0800bb43 	.word	0x0800bb43
 800b90c:	0800b9f7 	.word	0x0800b9f7
 800b910:	0800b931 	.word	0x0800b931
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800b914:	480e      	ldr	r0, [pc, #56]	; (800b950 <SVCCTL_App_Notification+0x308>)
 800b916:	f7ff f805 	bl	800a924 <DbgTraceGetFileName>
 800b91a:	4601      	mov	r1, r0
 800b91c:	f240 233e 	movw	r3, #574	; 0x23e
 800b920:	4a0c      	ldr	r2, [pc, #48]	; (800b954 <SVCCTL_App_Notification+0x30c>)
 800b922:	480d      	ldr	r0, [pc, #52]	; (800b958 <SVCCTL_App_Notification+0x310>)
 800b924:	f001 feda 	bl	800d6dc <iprintf>
 800b928:	4814      	ldr	r0, [pc, #80]	; (800b97c <SVCCTL_App_Notification+0x334>)
 800b92a:	f001 fed7 	bl	800d6dc <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800b92e:	e105      	b.n	800bb3c <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800b930:	4807      	ldr	r0, [pc, #28]	; (800b950 <SVCCTL_App_Notification+0x308>)
 800b932:	f7fe fff7 	bl	800a924 <DbgTraceGetFileName>
 800b936:	4601      	mov	r1, r0
 800b938:	f240 234e 	movw	r3, #590	; 0x24e
 800b93c:	4a05      	ldr	r2, [pc, #20]	; (800b954 <SVCCTL_App_Notification+0x30c>)
 800b93e:	4806      	ldr	r0, [pc, #24]	; (800b958 <SVCCTL_App_Notification+0x310>)
 800b940:	f001 fecc 	bl	800d6dc <iprintf>
 800b944:	480e      	ldr	r0, [pc, #56]	; (800b980 <SVCCTL_App_Notification+0x338>)
 800b946:	f001 ff37 	bl	800d7b8 <puts>
          break;
 800b94a:	e0f7      	b.n	800bb3c <SVCCTL_App_Notification+0x4f4>
 800b94c:	2000170c 	.word	0x2000170c
 800b950:	0800e928 	.word	0x0800e928
 800b954:	0800fc70 	.word	0x0800fc70
 800b958:	0800e944 	.word	0x0800e944
 800b95c:	0800ea70 	.word	0x0800ea70
 800b960:	0800ea9c 	.word	0x0800ea9c
 800b964:	20001790 	.word	0x20001790
 800b968:	0800ead8 	.word	0x0800ead8
 800b96c:	3ff40000 	.word	0x3ff40000
 800b970:	0800eb0c 	.word	0x0800eb0c
 800b974:	0800eb78 	.word	0x0800eb78
 800b978:	0800ebc0 	.word	0x0800ebc0
 800b97c:	0800ec10 	.word	0x0800ec10
 800b980:	0800ec38 	.word	0x0800ec38
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800b984:	4872      	ldr	r0, [pc, #456]	; (800bb50 <SVCCTL_App_Notification+0x508>)
 800b986:	f7fe ffcd 	bl	800a924 <DbgTraceGetFileName>
 800b98a:	4601      	mov	r1, r0
 800b98c:	f240 2355 	movw	r3, #597	; 0x255
 800b990:	4a70      	ldr	r2, [pc, #448]	; (800bb54 <SVCCTL_App_Notification+0x50c>)
 800b992:	4871      	ldr	r0, [pc, #452]	; (800bb58 <SVCCTL_App_Notification+0x510>)
 800b994:	f001 fea2 	bl	800d6dc <iprintf>
 800b998:	4870      	ldr	r0, [pc, #448]	; (800bb5c <SVCCTL_App_Notification+0x514>)
 800b99a:	f001 ff0d 	bl	800d7b8 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800b99e:	4b70      	ldr	r3, [pc, #448]	; (800bb60 <SVCCTL_App_Notification+0x518>)
 800b9a0:	8adb      	ldrh	r3, [r3, #22]
 800b9a2:	4970      	ldr	r1, [pc, #448]	; (800bb64 <SVCCTL_App_Notification+0x51c>)
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7fd f9d4 	bl	8008d52 <aci_gap_pass_key_resp>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800b9b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d010      	beq.n	800b9da <SVCCTL_App_Notification+0x392>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800b9b8:	4865      	ldr	r0, [pc, #404]	; (800bb50 <SVCCTL_App_Notification+0x508>)
 800b9ba:	f7fe ffb3 	bl	800a924 <DbgTraceGetFileName>
 800b9be:	4601      	mov	r1, r0
 800b9c0:	f240 235a 	movw	r3, #602	; 0x25a
 800b9c4:	4a63      	ldr	r2, [pc, #396]	; (800bb54 <SVCCTL_App_Notification+0x50c>)
 800b9c6:	4864      	ldr	r0, [pc, #400]	; (800bb58 <SVCCTL_App_Notification+0x510>)
 800b9c8:	f001 fe88 	bl	800d6dc <iprintf>
 800b9cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	4865      	ldr	r0, [pc, #404]	; (800bb68 <SVCCTL_App_Notification+0x520>)
 800b9d4:	f001 fe82 	bl	800d6dc <iprintf>
          break;
 800b9d8:	e0b0      	b.n	800bb3c <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800b9da:	485d      	ldr	r0, [pc, #372]	; (800bb50 <SVCCTL_App_Notification+0x508>)
 800b9dc:	f7fe ffa2 	bl	800a924 <DbgTraceGetFileName>
 800b9e0:	4601      	mov	r1, r0
 800b9e2:	f240 235e 	movw	r3, #606	; 0x25e
 800b9e6:	4a5b      	ldr	r2, [pc, #364]	; (800bb54 <SVCCTL_App_Notification+0x50c>)
 800b9e8:	485b      	ldr	r0, [pc, #364]	; (800bb58 <SVCCTL_App_Notification+0x510>)
 800b9ea:	f001 fe77 	bl	800d6dc <iprintf>
 800b9ee:	485f      	ldr	r0, [pc, #380]	; (800bb6c <SVCCTL_App_Notification+0x524>)
 800b9f0:	f001 fee2 	bl	800d7b8 <puts>
          break;
 800b9f4:	e0a2      	b.n	800bb3c <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800b9f6:	4856      	ldr	r0, [pc, #344]	; (800bb50 <SVCCTL_App_Notification+0x508>)
 800b9f8:	f7fe ff94 	bl	800a924 <DbgTraceGetFileName>
 800b9fc:	4601      	mov	r1, r0
 800b9fe:	f240 2366 	movw	r3, #614	; 0x266
 800ba02:	4a54      	ldr	r2, [pc, #336]	; (800bb54 <SVCCTL_App_Notification+0x50c>)
 800ba04:	4854      	ldr	r0, [pc, #336]	; (800bb58 <SVCCTL_App_Notification+0x510>)
 800ba06:	f001 fe69 	bl	800d6dc <iprintf>
 800ba0a:	4859      	ldr	r0, [pc, #356]	; (800bb70 <SVCCTL_App_Notification+0x528>)
 800ba0c:	f001 fed4 	bl	800d7b8 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800ba10:	484f      	ldr	r0, [pc, #316]	; (800bb50 <SVCCTL_App_Notification+0x508>)
 800ba12:	f7fe ff87 	bl	800a924 <DbgTraceGetFileName>
 800ba16:	4601      	mov	r1, r0
 800ba18:	f240 2367 	movw	r3, #615	; 0x267
 800ba1c:	4a4d      	ldr	r2, [pc, #308]	; (800bb54 <SVCCTL_App_Notification+0x50c>)
 800ba1e:	484e      	ldr	r0, [pc, #312]	; (800bb58 <SVCCTL_App_Notification+0x510>)
 800ba20:	f001 fe5c 	bl	800d6dc <iprintf>
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	3302      	adds	r3, #2
 800ba28:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	4851      	ldr	r0, [pc, #324]	; (800bb74 <SVCCTL_App_Notification+0x52c>)
 800ba30:	f001 fe54 	bl	800d6dc <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800ba34:	4846      	ldr	r0, [pc, #280]	; (800bb50 <SVCCTL_App_Notification+0x508>)
 800ba36:	f7fe ff75 	bl	800a924 <DbgTraceGetFileName>
 800ba3a:	4601      	mov	r1, r0
 800ba3c:	f240 2369 	movw	r3, #617	; 0x269
 800ba40:	4a44      	ldr	r2, [pc, #272]	; (800bb54 <SVCCTL_App_Notification+0x50c>)
 800ba42:	4845      	ldr	r0, [pc, #276]	; (800bb58 <SVCCTL_App_Notification+0x510>)
 800ba44:	f001 fe4a 	bl	800d6dc <iprintf>
 800ba48:	69fb      	ldr	r3, [r7, #28]
 800ba4a:	3302      	adds	r3, #2
 800ba4c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800ba50:	4619      	mov	r1, r3
 800ba52:	4849      	ldr	r0, [pc, #292]	; (800bb78 <SVCCTL_App_Notification+0x530>)
 800ba54:	f001 fe42 	bl	800d6dc <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800ba58:	4b41      	ldr	r3, [pc, #260]	; (800bb60 <SVCCTL_App_Notification+0x518>)
 800ba5a:	8adb      	ldrh	r3, [r3, #22]
 800ba5c:	2101      	movs	r1, #1
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7fd fb21 	bl	80090a6 <aci_gap_numeric_comparison_value_confirm_yesno>
 800ba64:	4603      	mov	r3, r0
 800ba66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800ba6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d010      	beq.n	800ba94 <SVCCTL_App_Notification+0x44c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800ba72:	4837      	ldr	r0, [pc, #220]	; (800bb50 <SVCCTL_App_Notification+0x508>)
 800ba74:	f7fe ff56 	bl	800a924 <DbgTraceGetFileName>
 800ba78:	4601      	mov	r1, r0
 800ba7a:	f240 236e 	movw	r3, #622	; 0x26e
 800ba7e:	4a35      	ldr	r2, [pc, #212]	; (800bb54 <SVCCTL_App_Notification+0x50c>)
 800ba80:	4835      	ldr	r0, [pc, #212]	; (800bb58 <SVCCTL_App_Notification+0x510>)
 800ba82:	f001 fe2b 	bl	800d6dc <iprintf>
 800ba86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	483b      	ldr	r0, [pc, #236]	; (800bb7c <SVCCTL_App_Notification+0x534>)
 800ba8e:	f001 fe25 	bl	800d6dc <iprintf>
          break;
 800ba92:	e053      	b.n	800bb3c <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800ba94:	482e      	ldr	r0, [pc, #184]	; (800bb50 <SVCCTL_App_Notification+0x508>)
 800ba96:	f7fe ff45 	bl	800a924 <DbgTraceGetFileName>
 800ba9a:	4601      	mov	r1, r0
 800ba9c:	f240 2372 	movw	r3, #626	; 0x272
 800baa0:	4a2c      	ldr	r2, [pc, #176]	; (800bb54 <SVCCTL_App_Notification+0x50c>)
 800baa2:	482d      	ldr	r0, [pc, #180]	; (800bb58 <SVCCTL_App_Notification+0x510>)
 800baa4:	f001 fe1a 	bl	800d6dc <iprintf>
 800baa8:	4835      	ldr	r0, [pc, #212]	; (800bb80 <SVCCTL_App_Notification+0x538>)
 800baaa:	f001 fe85 	bl	800d7b8 <puts>
          break;
 800baae:	e045      	b.n	800bb3c <SVCCTL_App_Notification+0x4f4>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800bab0:	69fb      	ldr	r3, [r7, #28]
 800bab2:	3302      	adds	r3, #2
 800bab4:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800bab6:	4826      	ldr	r0, [pc, #152]	; (800bb50 <SVCCTL_App_Notification+0x508>)
 800bab8:	f7fe ff34 	bl	800a924 <DbgTraceGetFileName>
 800babc:	4601      	mov	r1, r0
 800babe:	f44f 731f 	mov.w	r3, #636	; 0x27c
 800bac2:	4a24      	ldr	r2, [pc, #144]	; (800bb54 <SVCCTL_App_Notification+0x50c>)
 800bac4:	4824      	ldr	r0, [pc, #144]	; (800bb58 <SVCCTL_App_Notification+0x510>)
 800bac6:	f001 fe09 	bl	800d6dc <iprintf>
 800baca:	482e      	ldr	r0, [pc, #184]	; (800bb84 <SVCCTL_App_Notification+0x53c>)
 800bacc:	f001 fe74 	bl	800d7b8 <puts>
          if (p_pairing_complete->Status != 0)
 800bad0:	69bb      	ldr	r3, [r7, #24]
 800bad2:	789b      	ldrb	r3, [r3, #2]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d013      	beq.n	800bb00 <SVCCTL_App_Notification+0x4b8>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800bad8:	481d      	ldr	r0, [pc, #116]	; (800bb50 <SVCCTL_App_Notification+0x508>)
 800bada:	f7fe ff23 	bl	800a924 <DbgTraceGetFileName>
 800bade:	4601      	mov	r1, r0
 800bae0:	f240 237f 	movw	r3, #639	; 0x27f
 800bae4:	4a1b      	ldr	r2, [pc, #108]	; (800bb54 <SVCCTL_App_Notification+0x50c>)
 800bae6:	481c      	ldr	r0, [pc, #112]	; (800bb58 <SVCCTL_App_Notification+0x510>)
 800bae8:	f001 fdf8 	bl	800d6dc <iprintf>
 800baec:	69bb      	ldr	r3, [r7, #24]
 800baee:	789b      	ldrb	r3, [r3, #2]
 800baf0:	4619      	mov	r1, r3
 800baf2:	69bb      	ldr	r3, [r7, #24]
 800baf4:	78db      	ldrb	r3, [r3, #3]
 800baf6:	461a      	mov	r2, r3
 800baf8:	4823      	ldr	r0, [pc, #140]	; (800bb88 <SVCCTL_App_Notification+0x540>)
 800bafa:	f001 fdef 	bl	800d6dc <iprintf>
 800bafe:	e00c      	b.n	800bb1a <SVCCTL_App_Notification+0x4d2>
            APP_DBG_MSG("     - Pairing Success\n");
 800bb00:	4813      	ldr	r0, [pc, #76]	; (800bb50 <SVCCTL_App_Notification+0x508>)
 800bb02:	f7fe ff0f 	bl	800a924 <DbgTraceGetFileName>
 800bb06:	4601      	mov	r1, r0
 800bb08:	f240 2383 	movw	r3, #643	; 0x283
 800bb0c:	4a11      	ldr	r2, [pc, #68]	; (800bb54 <SVCCTL_App_Notification+0x50c>)
 800bb0e:	4812      	ldr	r0, [pc, #72]	; (800bb58 <SVCCTL_App_Notification+0x510>)
 800bb10:	f001 fde4 	bl	800d6dc <iprintf>
 800bb14:	481d      	ldr	r0, [pc, #116]	; (800bb8c <SVCCTL_App_Notification+0x544>)
 800bb16:	f001 fe4f 	bl	800d7b8 <puts>
          APP_DBG_MSG("\n");
 800bb1a:	480d      	ldr	r0, [pc, #52]	; (800bb50 <SVCCTL_App_Notification+0x508>)
 800bb1c:	f7fe ff02 	bl	800a924 <DbgTraceGetFileName>
 800bb20:	4601      	mov	r1, r0
 800bb22:	f240 2385 	movw	r3, #645	; 0x285
 800bb26:	4a0b      	ldr	r2, [pc, #44]	; (800bb54 <SVCCTL_App_Notification+0x50c>)
 800bb28:	480b      	ldr	r0, [pc, #44]	; (800bb58 <SVCCTL_App_Notification+0x510>)
 800bb2a:	f001 fdd7 	bl	800d6dc <iprintf>
 800bb2e:	200a      	movs	r0, #10
 800bb30:	f001 fde6 	bl	800d700 <putchar>
          break;
 800bb34:	e002      	b.n	800bb3c <SVCCTL_App_Notification+0x4f4>
          break;
 800bb36:	bf00      	nop
 800bb38:	e003      	b.n	800bb42 <SVCCTL_App_Notification+0x4fa>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800bb3a:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800bb3c:	e001      	b.n	800bb42 <SVCCTL_App_Notification+0x4fa>
      break;
 800bb3e:	bf00      	nop
 800bb40:	e000      	b.n	800bb44 <SVCCTL_App_Notification+0x4fc>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800bb42:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800bb44:	2301      	movs	r3, #1
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3728      	adds	r7, #40	; 0x28
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bdb0      	pop	{r4, r5, r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	0800e928 	.word	0x0800e928
 800bb54:	0800fc70 	.word	0x0800fc70
 800bb58:	0800e944 	.word	0x0800e944
 800bb5c:	0800ec68 	.word	0x0800ec68
 800bb60:	2000170c 	.word	0x2000170c
 800bb64:	0001b207 	.word	0x0001b207
 800bb68:	0800ec90 	.word	0x0800ec90
 800bb6c:	0800ecc4 	.word	0x0800ecc4
 800bb70:	0800ecec 	.word	0x0800ecec
 800bb74:	0800ed20 	.word	0x0800ed20
 800bb78:	0800ed3c 	.word	0x0800ed3c
 800bb7c:	0800ed54 	.word	0x0800ed54
 800bb80:	0800eda4 	.word	0x0800eda4
 800bb84:	0800edec 	.word	0x0800edec
 800bb88:	0800ee18 	.word	0x0800ee18
 800bb8c:	0800ee54 	.word	0x0800ee54

0800bb90 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b082      	sub	sp, #8
 800bb94:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800bb96:	4b06      	ldr	r3, [pc, #24]	; (800bbb0 <Ble_Tl_Init+0x20>)
 800bb98:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800bb9a:	4b06      	ldr	r3, [pc, #24]	; (800bbb4 <Ble_Tl_Init+0x24>)
 800bb9c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800bb9e:	463b      	mov	r3, r7
 800bba0:	4619      	mov	r1, r3
 800bba2:	4805      	ldr	r0, [pc, #20]	; (800bbb8 <Ble_Tl_Init+0x28>)
 800bba4:	f7fe f9a2 	bl	8009eec <hci_init>

  return;
 800bba8:	bf00      	nop
}
 800bbaa:	3708      	adds	r7, #8
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	200300d8 	.word	0x200300d8
 800bbb4:	0800c3b5 	.word	0x0800c3b5
 800bbb8:	0800c37d 	.word	0x0800c37d

0800bbbc <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800bbbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbbe:	b08d      	sub	sp, #52	; 0x34
 800bbc0:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bbc6:	2392      	movs	r3, #146	; 0x92
 800bbc8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800bbca:	48a3      	ldr	r0, [pc, #652]	; (800be58 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800bbcc:	f7fe feaa 	bl	800a924 <DbgTraceGetFileName>
 800bbd0:	4601      	mov	r1, r0
 800bbd2:	f240 23c5 	movw	r3, #709	; 0x2c5
 800bbd6:	4aa1      	ldr	r2, [pc, #644]	; (800be5c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800bbd8:	48a1      	ldr	r0, [pc, #644]	; (800be60 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800bbda:	f001 fd7f 	bl	800d6dc <iprintf>
 800bbde:	48a1      	ldr	r0, [pc, #644]	; (800be64 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800bbe0:	f001 fdea 	bl	800d7b8 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800bbe4:	f7fd feb2 	bl	800994c <hci_reset>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800bbec:	7dfb      	ldrb	r3, [r7, #23]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d00f      	beq.n	800bc12 <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800bbf2:	4899      	ldr	r0, [pc, #612]	; (800be58 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800bbf4:	f7fe fe96 	bl	800a924 <DbgTraceGetFileName>
 800bbf8:	4601      	mov	r1, r0
 800bbfa:	f240 23ce 	movw	r3, #718	; 0x2ce
 800bbfe:	4a97      	ldr	r2, [pc, #604]	; (800be5c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800bc00:	4897      	ldr	r0, [pc, #604]	; (800be60 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800bc02:	f001 fd6b 	bl	800d6dc <iprintf>
 800bc06:	7dfb      	ldrb	r3, [r7, #23]
 800bc08:	4619      	mov	r1, r3
 800bc0a:	4897      	ldr	r0, [pc, #604]	; (800be68 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800bc0c:	f001 fd66 	bl	800d6dc <iprintf>
 800bc10:	e00c      	b.n	800bc2c <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800bc12:	4891      	ldr	r0, [pc, #580]	; (800be58 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800bc14:	f7fe fe86 	bl	800a924 <DbgTraceGetFileName>
 800bc18:	4601      	mov	r1, r0
 800bc1a:	f240 23d2 	movw	r3, #722	; 0x2d2
 800bc1e:	4a8f      	ldr	r2, [pc, #572]	; (800be5c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800bc20:	488f      	ldr	r0, [pc, #572]	; (800be60 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800bc22:	f001 fd5b 	bl	800d6dc <iprintf>
 800bc26:	4891      	ldr	r0, [pc, #580]	; (800be6c <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800bc28:	f001 fdc6 	bl	800d7b8 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800bc2c:	f000 fad8 	bl	800c1e0 <BleGetBdAddress>
 800bc30:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800bc32:	693a      	ldr	r2, [r7, #16]
 800bc34:	2106      	movs	r1, #6
 800bc36:	2000      	movs	r0, #0
 800bc38:	f7fd fd48 	bl	80096cc <aci_hal_write_config_data>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800bc40:	7dfb      	ldrb	r3, [r7, #23]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d00f      	beq.n	800bc66 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800bc46:	4884      	ldr	r0, [pc, #528]	; (800be58 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800bc48:	f7fe fe6c 	bl	800a924 <DbgTraceGetFileName>
 800bc4c:	4601      	mov	r1, r0
 800bc4e:	f44f 7337 	mov.w	r3, #732	; 0x2dc
 800bc52:	4a82      	ldr	r2, [pc, #520]	; (800be5c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800bc54:	4882      	ldr	r0, [pc, #520]	; (800be60 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800bc56:	f001 fd41 	bl	800d6dc <iprintf>
 800bc5a:	7dfb      	ldrb	r3, [r7, #23]
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	4884      	ldr	r0, [pc, #528]	; (800be70 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800bc60:	f001 fd3c 	bl	800d6dc <iprintf>
 800bc64:	e035      	b.n	800bcd2 <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800bc66:	487c      	ldr	r0, [pc, #496]	; (800be58 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800bc68:	f7fe fe5c 	bl	800a924 <DbgTraceGetFileName>
 800bc6c:	4601      	mov	r1, r0
 800bc6e:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 800bc72:	4a7a      	ldr	r2, [pc, #488]	; (800be5c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800bc74:	487a      	ldr	r0, [pc, #488]	; (800be60 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800bc76:	f001 fd31 	bl	800d6dc <iprintf>
 800bc7a:	487e      	ldr	r0, [pc, #504]	; (800be74 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800bc7c:	f001 fd9c 	bl	800d7b8 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800bc80:	4875      	ldr	r0, [pc, #468]	; (800be58 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800bc82:	f7fe fe4f 	bl	800a924 <DbgTraceGetFileName>
 800bc86:	4601      	mov	r1, r0
 800bc88:	f240 23e1 	movw	r3, #737	; 0x2e1
 800bc8c:	4a73      	ldr	r2, [pc, #460]	; (800be5c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800bc8e:	4874      	ldr	r0, [pc, #464]	; (800be60 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800bc90:	f001 fd24 	bl	800d6dc <iprintf>
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	3305      	adds	r3, #5
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	3304      	adds	r3, #4
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	461c      	mov	r4, r3
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	3303      	adds	r3, #3
 800bca8:	781b      	ldrb	r3, [r3, #0]
 800bcaa:	461d      	mov	r5, r3
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	3302      	adds	r3, #2
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	3301      	adds	r3, #1
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	4619      	mov	r1, r3
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	9302      	str	r3, [sp, #8]
 800bcc2:	9101      	str	r1, [sp, #4]
 800bcc4:	9200      	str	r2, [sp, #0]
 800bcc6:	462b      	mov	r3, r5
 800bcc8:	4622      	mov	r2, r4
 800bcca:	4601      	mov	r1, r0
 800bccc:	486a      	ldr	r0, [pc, #424]	; (800be78 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800bcce:	f001 fd05 	bl	800d6dc <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800bcd2:	4a6a      	ldr	r2, [pc, #424]	; (800be7c <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800bcd4:	2110      	movs	r1, #16
 800bcd6:	2018      	movs	r0, #24
 800bcd8:	f7fd fcf8 	bl	80096cc <aci_hal_write_config_data>
 800bcdc:	4603      	mov	r3, r0
 800bcde:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800bce0:	7dfb      	ldrb	r3, [r7, #23]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d00f      	beq.n	800bd06 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800bce6:	485c      	ldr	r0, [pc, #368]	; (800be58 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800bce8:	f7fe fe1c 	bl	800a924 <DbgTraceGetFileName>
 800bcec:	4601      	mov	r1, r0
 800bcee:	f240 332b 	movw	r3, #811	; 0x32b
 800bcf2:	4a5a      	ldr	r2, [pc, #360]	; (800be5c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800bcf4:	485a      	ldr	r0, [pc, #360]	; (800be60 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800bcf6:	f001 fcf1 	bl	800d6dc <iprintf>
 800bcfa:	7dfb      	ldrb	r3, [r7, #23]
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	4860      	ldr	r0, [pc, #384]	; (800be80 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800bd00:	f001 fcec 	bl	800d6dc <iprintf>
 800bd04:	e00c      	b.n	800bd20 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800bd06:	4854      	ldr	r0, [pc, #336]	; (800be58 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800bd08:	f7fe fe0c 	bl	800a924 <DbgTraceGetFileName>
 800bd0c:	4601      	mov	r1, r0
 800bd0e:	f240 332f 	movw	r3, #815	; 0x32f
 800bd12:	4a52      	ldr	r2, [pc, #328]	; (800be5c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800bd14:	4852      	ldr	r0, [pc, #328]	; (800be60 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800bd16:	f001 fce1 	bl	800d6dc <iprintf>
 800bd1a:	485a      	ldr	r0, [pc, #360]	; (800be84 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800bd1c:	f001 fd4c 	bl	800d7b8 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800bd20:	4a59      	ldr	r2, [pc, #356]	; (800be88 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800bd22:	2110      	movs	r1, #16
 800bd24:	2008      	movs	r0, #8
 800bd26:	f7fd fcd1 	bl	80096cc <aci_hal_write_config_data>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800bd2e:	7dfb      	ldrb	r3, [r7, #23]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d00f      	beq.n	800bd54 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800bd34:	4848      	ldr	r0, [pc, #288]	; (800be58 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800bd36:	f7fe fdf5 	bl	800a924 <DbgTraceGetFileName>
 800bd3a:	4601      	mov	r1, r0
 800bd3c:	f44f 734e 	mov.w	r3, #824	; 0x338
 800bd40:	4a46      	ldr	r2, [pc, #280]	; (800be5c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800bd42:	4847      	ldr	r0, [pc, #284]	; (800be60 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800bd44:	f001 fcca 	bl	800d6dc <iprintf>
 800bd48:	7dfb      	ldrb	r3, [r7, #23]
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	484f      	ldr	r0, [pc, #316]	; (800be8c <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800bd4e:	f001 fcc5 	bl	800d6dc <iprintf>
 800bd52:	e00c      	b.n	800bd6e <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800bd54:	4840      	ldr	r0, [pc, #256]	; (800be58 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800bd56:	f7fe fde5 	bl	800a924 <DbgTraceGetFileName>
 800bd5a:	4601      	mov	r1, r0
 800bd5c:	f44f 734f 	mov.w	r3, #828	; 0x33c
 800bd60:	4a3e      	ldr	r2, [pc, #248]	; (800be5c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800bd62:	483f      	ldr	r0, [pc, #252]	; (800be60 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800bd64:	f001 fcba 	bl	800d6dc <iprintf>
 800bd68:	4849      	ldr	r0, [pc, #292]	; (800be90 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800bd6a:	f001 fd25 	bl	800d7b8 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800bd6e:	2118      	movs	r1, #24
 800bd70:	2001      	movs	r0, #1
 800bd72:	f7fd fd30 	bl	80097d6 <aci_hal_set_tx_power_level>
 800bd76:	4603      	mov	r3, r0
 800bd78:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800bd7a:	7dfb      	ldrb	r3, [r7, #23]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d00f      	beq.n	800bda0 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800bd80:	4835      	ldr	r0, [pc, #212]	; (800be58 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800bd82:	f7fe fdcf 	bl	800a924 <DbgTraceGetFileName>
 800bd86:	4601      	mov	r1, r0
 800bd88:	f240 3345 	movw	r3, #837	; 0x345
 800bd8c:	4a33      	ldr	r2, [pc, #204]	; (800be5c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800bd8e:	4834      	ldr	r0, [pc, #208]	; (800be60 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800bd90:	f001 fca4 	bl	800d6dc <iprintf>
 800bd94:	7dfb      	ldrb	r3, [r7, #23]
 800bd96:	4619      	mov	r1, r3
 800bd98:	483e      	ldr	r0, [pc, #248]	; (800be94 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800bd9a:	f001 fc9f 	bl	800d6dc <iprintf>
 800bd9e:	e00c      	b.n	800bdba <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800bda0:	482d      	ldr	r0, [pc, #180]	; (800be58 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800bda2:	f7fe fdbf 	bl	800a924 <DbgTraceGetFileName>
 800bda6:	4601      	mov	r1, r0
 800bda8:	f240 3349 	movw	r3, #841	; 0x349
 800bdac:	4a2b      	ldr	r2, [pc, #172]	; (800be5c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800bdae:	482c      	ldr	r0, [pc, #176]	; (800be60 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800bdb0:	f001 fc94 	bl	800d6dc <iprintf>
 800bdb4:	4838      	ldr	r0, [pc, #224]	; (800be98 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800bdb6:	f001 fcff 	bl	800d7b8 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800bdba:	f7fd f9db 	bl	8009174 <aci_gatt_init>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800bdc2:	7dfb      	ldrb	r3, [r7, #23]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d00f      	beq.n	800bde8 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800bdc8:	4823      	ldr	r0, [pc, #140]	; (800be58 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800bdca:	f7fe fdab 	bl	800a924 <DbgTraceGetFileName>
 800bdce:	4601      	mov	r1, r0
 800bdd0:	f240 3352 	movw	r3, #850	; 0x352
 800bdd4:	4a21      	ldr	r2, [pc, #132]	; (800be5c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800bdd6:	4822      	ldr	r0, [pc, #136]	; (800be60 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800bdd8:	f001 fc80 	bl	800d6dc <iprintf>
 800bddc:	7dfb      	ldrb	r3, [r7, #23]
 800bdde:	4619      	mov	r1, r3
 800bde0:	482e      	ldr	r0, [pc, #184]	; (800be9c <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800bde2:	f001 fc7b 	bl	800d6dc <iprintf>
 800bde6:	e00c      	b.n	800be02 <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800bde8:	481b      	ldr	r0, [pc, #108]	; (800be58 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800bdea:	f7fe fd9b 	bl	800a924 <DbgTraceGetFileName>
 800bdee:	4601      	mov	r1, r0
 800bdf0:	f240 3356 	movw	r3, #854	; 0x356
 800bdf4:	4a19      	ldr	r2, [pc, #100]	; (800be5c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800bdf6:	481a      	ldr	r0, [pc, #104]	; (800be60 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800bdf8:	f001 fc70 	bl	800d6dc <iprintf>
 800bdfc:	4828      	ldr	r0, [pc, #160]	; (800bea0 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800bdfe:	f001 fcdb 	bl	800d7b8 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800be02:	2300      	movs	r3, #0
 800be04:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800be06:	7bfb      	ldrb	r3, [r7, #15]
 800be08:	f043 0301 	orr.w	r3, r3, #1
 800be0c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800be0e:	7bfb      	ldrb	r3, [r7, #15]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d069      	beq.n	800bee8 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800be14:	4b23      	ldr	r3, [pc, #140]	; (800bea4 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800be16:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800be18:	1dba      	adds	r2, r7, #6
 800be1a:	7bf8      	ldrb	r0, [r7, #15]
 800be1c:	1cbb      	adds	r3, r7, #2
 800be1e:	9301      	str	r3, [sp, #4]
 800be20:	1d3b      	adds	r3, r7, #4
 800be22:	9300      	str	r3, [sp, #0]
 800be24:	4613      	mov	r3, r2
 800be26:	2209      	movs	r2, #9
 800be28:	2100      	movs	r1, #0
 800be2a:	f7fc fff9 	bl	8008e20 <aci_gap_init>
 800be2e:	4603      	mov	r3, r0
 800be30:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800be32:	7dfb      	ldrb	r3, [r7, #23]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d039      	beq.n	800beac <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800be38:	4807      	ldr	r0, [pc, #28]	; (800be58 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800be3a:	f7fe fd73 	bl	800a924 <DbgTraceGetFileName>
 800be3e:	4601      	mov	r1, r0
 800be40:	f240 3376 	movw	r3, #886	; 0x376
 800be44:	4a05      	ldr	r2, [pc, #20]	; (800be5c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800be46:	4806      	ldr	r0, [pc, #24]	; (800be60 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800be48:	f001 fc48 	bl	800d6dc <iprintf>
 800be4c:	7dfb      	ldrb	r3, [r7, #23]
 800be4e:	4619      	mov	r1, r3
 800be50:	4815      	ldr	r0, [pc, #84]	; (800bea8 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800be52:	f001 fc43 	bl	800d6dc <iprintf>
 800be56:	e036      	b.n	800bec6 <Ble_Hci_Gap_Gatt_Init+0x30a>
 800be58:	0800e928 	.word	0x0800e928
 800be5c:	0800fc88 	.word	0x0800fc88
 800be60:	0800e944 	.word	0x0800e944
 800be64:	0800ee6c 	.word	0x0800ee6c
 800be68:	0800ee98 	.word	0x0800ee98
 800be6c:	0800eec8 	.word	0x0800eec8
 800be70:	0800eee8 	.word	0x0800eee8
 800be74:	0800ef44 	.word	0x0800ef44
 800be78:	0800ef90 	.word	0x0800ef90
 800be7c:	0800fc40 	.word	0x0800fc40
 800be80:	0800efcc 	.word	0x0800efcc
 800be84:	0800f024 	.word	0x0800f024
 800be88:	0800fc50 	.word	0x0800fc50
 800be8c:	0800f06c 	.word	0x0800f06c
 800be90:	0800f0c4 	.word	0x0800f0c4
 800be94:	0800f10c 	.word	0x0800f10c
 800be98:	0800f14c 	.word	0x0800f14c
 800be9c:	0800f17c 	.word	0x0800f17c
 800bea0:	0800f1b0 	.word	0x0800f1b0
 800bea4:	0800f1d4 	.word	0x0800f1d4
 800bea8:	0800f1e0 	.word	0x0800f1e0
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800beac:	487e      	ldr	r0, [pc, #504]	; (800c0a8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800beae:	f7fe fd39 	bl	800a924 <DbgTraceGetFileName>
 800beb2:	4601      	mov	r1, r0
 800beb4:	f240 337a 	movw	r3, #890	; 0x37a
 800beb8:	4a7c      	ldr	r2, [pc, #496]	; (800c0ac <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800beba:	487d      	ldr	r0, [pc, #500]	; (800c0b0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800bebc:	f001 fc0e 	bl	800d6dc <iprintf>
 800bec0:	487c      	ldr	r0, [pc, #496]	; (800c0b4 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 800bec2:	f001 fc79 	bl	800d7b8 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800bec6:	88fc      	ldrh	r4, [r7, #6]
 800bec8:	88bd      	ldrh	r5, [r7, #4]
 800beca:	68b8      	ldr	r0, [r7, #8]
 800becc:	f7f4 f958 	bl	8000180 <strlen>
 800bed0:	4603      	mov	r3, r0
 800bed2:	b2da      	uxtb	r2, r3
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	4613      	mov	r3, r2
 800beda:	2200      	movs	r2, #0
 800bedc:	4629      	mov	r1, r5
 800bede:	4620      	mov	r0, r4
 800bee0:	f7fd fb4b 	bl	800957a <aci_gatt_update_char_value>
 800bee4:	4603      	mov	r3, r0
 800bee6:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800bee8:	88f8      	ldrh	r0, [r7, #6]
 800beea:	8879      	ldrh	r1, [r7, #2]
 800beec:	463b      	mov	r3, r7
 800beee:	9300      	str	r3, [sp, #0]
 800bef0:	2302      	movs	r3, #2
 800bef2:	2200      	movs	r2, #0
 800bef4:	f7fd fb41 	bl	800957a <aci_gatt_update_char_value>
 800bef8:	4603      	mov	r3, r0
 800befa:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800befc:	2202      	movs	r2, #2
 800befe:	2102      	movs	r1, #2
 800bf00:	2000      	movs	r0, #0
 800bf02:	f7fd fd47 	bl	8009994 <hci_le_set_default_phy>
 800bf06:	4603      	mov	r3, r0
 800bf08:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800bf0a:	7dfb      	ldrb	r3, [r7, #23]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d00f      	beq.n	800bf30 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800bf10:	4865      	ldr	r0, [pc, #404]	; (800c0a8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800bf12:	f7fe fd07 	bl	800a924 <DbgTraceGetFileName>
 800bf16:	4601      	mov	r1, r0
 800bf18:	f44f 7367 	mov.w	r3, #924	; 0x39c
 800bf1c:	4a63      	ldr	r2, [pc, #396]	; (800c0ac <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800bf1e:	4864      	ldr	r0, [pc, #400]	; (800c0b0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800bf20:	f001 fbdc 	bl	800d6dc <iprintf>
 800bf24:	7dfb      	ldrb	r3, [r7, #23]
 800bf26:	4619      	mov	r1, r3
 800bf28:	4863      	ldr	r0, [pc, #396]	; (800c0b8 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 800bf2a:	f001 fbd7 	bl	800d6dc <iprintf>
 800bf2e:	e00c      	b.n	800bf4a <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800bf30:	485d      	ldr	r0, [pc, #372]	; (800c0a8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800bf32:	f7fe fcf7 	bl	800a924 <DbgTraceGetFileName>
 800bf36:	4601      	mov	r1, r0
 800bf38:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 800bf3c:	4a5b      	ldr	r2, [pc, #364]	; (800c0ac <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800bf3e:	485c      	ldr	r0, [pc, #368]	; (800c0b0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800bf40:	f001 fbcc 	bl	800d6dc <iprintf>
 800bf44:	485d      	ldr	r0, [pc, #372]	; (800c0bc <Ble_Hci_Gap_Gatt_Init+0x500>)
 800bf46:	f001 fc37 	bl	800d7b8 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800bf4a:	4b5d      	ldr	r3, [pc, #372]	; (800c0c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bf4c:	2201      	movs	r2, #1
 800bf4e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800bf50:	4b5b      	ldr	r3, [pc, #364]	; (800c0c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bf52:	781b      	ldrb	r3, [r3, #0]
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7fc fde4 	bl	8008b22 <aci_gap_set_io_capability>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800bf5e:	7dfb      	ldrb	r3, [r7, #23]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d00f      	beq.n	800bf84 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800bf64:	4850      	ldr	r0, [pc, #320]	; (800c0a8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800bf66:	f7fe fcdd 	bl	800a924 <DbgTraceGetFileName>
 800bf6a:	4601      	mov	r1, r0
 800bf6c:	f240 33aa 	movw	r3, #938	; 0x3aa
 800bf70:	4a4e      	ldr	r2, [pc, #312]	; (800c0ac <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800bf72:	484f      	ldr	r0, [pc, #316]	; (800c0b0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800bf74:	f001 fbb2 	bl	800d6dc <iprintf>
 800bf78:	7dfb      	ldrb	r3, [r7, #23]
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	4851      	ldr	r0, [pc, #324]	; (800c0c4 <Ble_Hci_Gap_Gatt_Init+0x508>)
 800bf7e:	f001 fbad 	bl	800d6dc <iprintf>
 800bf82:	e00c      	b.n	800bf9e <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800bf84:	4848      	ldr	r0, [pc, #288]	; (800c0a8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800bf86:	f7fe fccd 	bl	800a924 <DbgTraceGetFileName>
 800bf8a:	4601      	mov	r1, r0
 800bf8c:	f240 33ae 	movw	r3, #942	; 0x3ae
 800bf90:	4a46      	ldr	r2, [pc, #280]	; (800c0ac <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800bf92:	4847      	ldr	r0, [pc, #284]	; (800c0b0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800bf94:	f001 fba2 	bl	800d6dc <iprintf>
 800bf98:	484b      	ldr	r0, [pc, #300]	; (800c0c8 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 800bf9a:	f001 fc0d 	bl	800d7b8 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800bf9e:	4b48      	ldr	r3, [pc, #288]	; (800c0c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800bfa4:	4b46      	ldr	r3, [pc, #280]	; (800c0c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bfa6:	2208      	movs	r2, #8
 800bfa8:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800bfaa:	4b45      	ldr	r3, [pc, #276]	; (800c0c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bfac:	2210      	movs	r2, #16
 800bfae:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800bfb0:	4b43      	ldr	r3, [pc, #268]	; (800c0c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800bfb6:	4b42      	ldr	r3, [pc, #264]	; (800c0c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bfb8:	4a44      	ldr	r2, [pc, #272]	; (800c0cc <Ble_Hci_Gap_Gatt_Init+0x510>)
 800bfba:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800bfbc:	4b40      	ldr	r3, [pc, #256]	; (800c0c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800bfc2:	4b3f      	ldr	r3, [pc, #252]	; (800c0c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bfc4:	789c      	ldrb	r4, [r3, #2]
 800bfc6:	4b3e      	ldr	r3, [pc, #248]	; (800c0c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bfc8:	785d      	ldrb	r5, [r3, #1]
 800bfca:	4b3d      	ldr	r3, [pc, #244]	; (800c0c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bfcc:	791b      	ldrb	r3, [r3, #4]
 800bfce:	4a3c      	ldr	r2, [pc, #240]	; (800c0c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bfd0:	7952      	ldrb	r2, [r2, #5]
 800bfd2:	493b      	ldr	r1, [pc, #236]	; (800c0c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bfd4:	78c9      	ldrb	r1, [r1, #3]
 800bfd6:	483a      	ldr	r0, [pc, #232]	; (800c0c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800bfd8:	6880      	ldr	r0, [r0, #8]
 800bfda:	2600      	movs	r6, #0
 800bfdc:	9604      	str	r6, [sp, #16]
 800bfde:	9003      	str	r0, [sp, #12]
 800bfe0:	9102      	str	r1, [sp, #8]
 800bfe2:	9201      	str	r2, [sp, #4]
 800bfe4:	9300      	str	r3, [sp, #0]
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	2201      	movs	r2, #1
 800bfea:	4629      	mov	r1, r5
 800bfec:	4620      	mov	r0, r4
 800bfee:	f7fc fdec 	bl	8008bca <aci_gap_set_authentication_requirement>
 800bff2:	4603      	mov	r3, r0
 800bff4:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800bff6:	7dfb      	ldrb	r3, [r7, #23]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d00f      	beq.n	800c01c <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800bffc:	482a      	ldr	r0, [pc, #168]	; (800c0a8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800bffe:	f7fe fc91 	bl	800a924 <DbgTraceGetFileName>
 800c002:	4601      	mov	r1, r0
 800c004:	f240 33c9 	movw	r3, #969	; 0x3c9
 800c008:	4a28      	ldr	r2, [pc, #160]	; (800c0ac <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c00a:	4829      	ldr	r0, [pc, #164]	; (800c0b0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c00c:	f001 fb66 	bl	800d6dc <iprintf>
 800c010:	7dfb      	ldrb	r3, [r7, #23]
 800c012:	4619      	mov	r1, r3
 800c014:	482e      	ldr	r0, [pc, #184]	; (800c0d0 <Ble_Hci_Gap_Gatt_Init+0x514>)
 800c016:	f001 fb61 	bl	800d6dc <iprintf>
 800c01a:	e00c      	b.n	800c036 <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800c01c:	4822      	ldr	r0, [pc, #136]	; (800c0a8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c01e:	f7fe fc81 	bl	800a924 <DbgTraceGetFileName>
 800c022:	4601      	mov	r1, r0
 800c024:	f240 33cd 	movw	r3, #973	; 0x3cd
 800c028:	4a20      	ldr	r2, [pc, #128]	; (800c0ac <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c02a:	4821      	ldr	r0, [pc, #132]	; (800c0b0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c02c:	f001 fb56 	bl	800d6dc <iprintf>
 800c030:	4828      	ldr	r0, [pc, #160]	; (800c0d4 <Ble_Hci_Gap_Gatt_Init+0x518>)
 800c032:	f001 fbc1 	bl	800d7b8 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800c036:	4b22      	ldr	r3, [pc, #136]	; (800c0c0 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c038:	789b      	ldrb	r3, [r3, #2]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d023      	beq.n	800c086 <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 800c03e:	f7fd f80e 	bl	800905e <aci_gap_configure_filter_accept_list>
 800c042:	4603      	mov	r3, r0
 800c044:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800c046:	7dfb      	ldrb	r3, [r7, #23]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d00f      	beq.n	800c06c <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800c04c:	4816      	ldr	r0, [pc, #88]	; (800c0a8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c04e:	f7fe fc69 	bl	800a924 <DbgTraceGetFileName>
 800c052:	4601      	mov	r1, r0
 800c054:	f44f 7376 	mov.w	r3, #984	; 0x3d8
 800c058:	4a14      	ldr	r2, [pc, #80]	; (800c0ac <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c05a:	4815      	ldr	r0, [pc, #84]	; (800c0b0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c05c:	f001 fb3e 	bl	800d6dc <iprintf>
 800c060:	7dfb      	ldrb	r3, [r7, #23]
 800c062:	4619      	mov	r1, r3
 800c064:	481c      	ldr	r0, [pc, #112]	; (800c0d8 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 800c066:	f001 fb39 	bl	800d6dc <iprintf>
 800c06a:	e00c      	b.n	800c086 <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800c06c:	480e      	ldr	r0, [pc, #56]	; (800c0a8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c06e:	f7fe fc59 	bl	800a924 <DbgTraceGetFileName>
 800c072:	4601      	mov	r1, r0
 800c074:	f44f 7377 	mov.w	r3, #988	; 0x3dc
 800c078:	4a0c      	ldr	r2, [pc, #48]	; (800c0ac <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c07a:	480d      	ldr	r0, [pc, #52]	; (800c0b0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c07c:	f001 fb2e 	bl	800d6dc <iprintf>
 800c080:	4816      	ldr	r0, [pc, #88]	; (800c0dc <Ble_Hci_Gap_Gatt_Init+0x520>)
 800c082:	f001 fb99 	bl	800d7b8 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800c086:	4808      	ldr	r0, [pc, #32]	; (800c0a8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c088:	f7fe fc4c 	bl	800a924 <DbgTraceGetFileName>
 800c08c:	4601      	mov	r1, r0
 800c08e:	f240 33df 	movw	r3, #991	; 0x3df
 800c092:	4a06      	ldr	r2, [pc, #24]	; (800c0ac <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c094:	4806      	ldr	r0, [pc, #24]	; (800c0b0 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c096:	f001 fb21 	bl	800d6dc <iprintf>
 800c09a:	4811      	ldr	r0, [pc, #68]	; (800c0e0 <Ble_Hci_Gap_Gatt_Init+0x524>)
 800c09c:	f001 fb1e 	bl	800d6dc <iprintf>
}
 800c0a0:	bf00      	nop
 800c0a2:	371c      	adds	r7, #28
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0a8:	0800e928 	.word	0x0800e928
 800c0ac:	0800fc88 	.word	0x0800fc88
 800c0b0:	0800e944 	.word	0x0800e944
 800c0b4:	0800f210 	.word	0x0800f210
 800c0b8:	0800f230 	.word	0x0800f230
 800c0bc:	0800f26c 	.word	0x0800f26c
 800c0c0:	2000170c 	.word	0x2000170c
 800c0c4:	0800f298 	.word	0x0800f298
 800c0c8:	0800f2d8 	.word	0x0800f2d8
 800c0cc:	0001b207 	.word	0x0001b207
 800c0d0:	0800f308 	.word	0x0800f308
 800c0d4:	0800f354 	.word	0x0800f354
 800c0d8:	0800f390 	.word	0x0800f390
 800c0dc:	0800f3d0 	.word	0x0800f3d0
 800c0e0:	0800f400 	.word	0x0800f400

0800c0e4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b08c      	sub	sp, #48	; 0x30
 800c0e8:	af08      	add	r7, sp, #32
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c0ee:	2392      	movs	r3, #146	; 0x92
 800c0f0:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800c0f2:	4a32      	ldr	r2, [pc, #200]	; (800c1bc <Adv_Request+0xd8>)
 800c0f4:	79fb      	ldrb	r3, [r7, #7]
 800c0f6:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	9306      	str	r3, [sp, #24]
 800c0fe:	2300      	movs	r3, #0
 800c100:	9305      	str	r3, [sp, #20]
 800c102:	2300      	movs	r3, #0
 800c104:	9304      	str	r3, [sp, #16]
 800c106:	2300      	movs	r3, #0
 800c108:	9303      	str	r3, [sp, #12]
 800c10a:	2300      	movs	r3, #0
 800c10c:	9302      	str	r3, [sp, #8]
 800c10e:	2300      	movs	r3, #0
 800c110:	9301      	str	r3, [sp, #4]
 800c112:	2300      	movs	r3, #0
 800c114:	9300      	str	r3, [sp, #0]
 800c116:	2300      	movs	r3, #0
 800c118:	22a0      	movs	r2, #160	; 0xa0
 800c11a:	2180      	movs	r1, #128	; 0x80
 800c11c:	2000      	movs	r0, #0
 800c11e:	f7fc fc06 	bl	800892e <aci_gap_set_discoverable>
 800c122:	4603      	mov	r3, r0
 800c124:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800c126:	7bfb      	ldrb	r3, [r7, #15]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d00f      	beq.n	800c14c <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800c12c:	4824      	ldr	r0, [pc, #144]	; (800c1c0 <Adv_Request+0xdc>)
 800c12e:	f7fe fbf9 	bl	800a924 <DbgTraceGetFileName>
 800c132:	4601      	mov	r1, r0
 800c134:	f240 33f5 	movw	r3, #1013	; 0x3f5
 800c138:	4a22      	ldr	r2, [pc, #136]	; (800c1c4 <Adv_Request+0xe0>)
 800c13a:	4823      	ldr	r0, [pc, #140]	; (800c1c8 <Adv_Request+0xe4>)
 800c13c:	f001 face 	bl	800d6dc <iprintf>
 800c140:	7bfb      	ldrb	r3, [r7, #15]
 800c142:	4619      	mov	r1, r3
 800c144:	4821      	ldr	r0, [pc, #132]	; (800c1cc <Adv_Request+0xe8>)
 800c146:	f001 fac9 	bl	800d6dc <iprintf>
 800c14a:	e00c      	b.n	800c166 <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800c14c:	481c      	ldr	r0, [pc, #112]	; (800c1c0 <Adv_Request+0xdc>)
 800c14e:	f7fe fbe9 	bl	800a924 <DbgTraceGetFileName>
 800c152:	4601      	mov	r1, r0
 800c154:	f240 33f9 	movw	r3, #1017	; 0x3f9
 800c158:	4a1a      	ldr	r2, [pc, #104]	; (800c1c4 <Adv_Request+0xe0>)
 800c15a:	481b      	ldr	r0, [pc, #108]	; (800c1c8 <Adv_Request+0xe4>)
 800c15c:	f001 fabe 	bl	800d6dc <iprintf>
 800c160:	481b      	ldr	r0, [pc, #108]	; (800c1d0 <Adv_Request+0xec>)
 800c162:	f001 fb29 	bl	800d7b8 <puts>
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800c166:	491b      	ldr	r1, [pc, #108]	; (800c1d4 <Adv_Request+0xf0>)
 800c168:	2019      	movs	r0, #25
 800c16a:	f7fc ff06 	bl	8008f7a <aci_gap_update_adv_data>
 800c16e:	4603      	mov	r3, r0
 800c170:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800c172:	7bfb      	ldrb	r3, [r7, #15]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d00f      	beq.n	800c198 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800c178:	4811      	ldr	r0, [pc, #68]	; (800c1c0 <Adv_Request+0xdc>)
 800c17a:	f7fe fbd3 	bl	800a924 <DbgTraceGetFileName>
 800c17e:	4601      	mov	r1, r0
 800c180:	f240 4304 	movw	r3, #1028	; 0x404
 800c184:	4a0f      	ldr	r2, [pc, #60]	; (800c1c4 <Adv_Request+0xe0>)
 800c186:	4810      	ldr	r0, [pc, #64]	; (800c1c8 <Adv_Request+0xe4>)
 800c188:	f001 faa8 	bl	800d6dc <iprintf>
 800c18c:	7bfb      	ldrb	r3, [r7, #15]
 800c18e:	4619      	mov	r1, r3
 800c190:	4811      	ldr	r0, [pc, #68]	; (800c1d8 <Adv_Request+0xf4>)
 800c192:	f001 faa3 	bl	800d6dc <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800c196:	e00d      	b.n	800c1b4 <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800c198:	4809      	ldr	r0, [pc, #36]	; (800c1c0 <Adv_Request+0xdc>)
 800c19a:	f7fe fbc3 	bl	800a924 <DbgTraceGetFileName>
 800c19e:	4601      	mov	r1, r0
 800c1a0:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800c1a4:	4a07      	ldr	r2, [pc, #28]	; (800c1c4 <Adv_Request+0xe0>)
 800c1a6:	4808      	ldr	r0, [pc, #32]	; (800c1c8 <Adv_Request+0xe4>)
 800c1a8:	f001 fa98 	bl	800d6dc <iprintf>
 800c1ac:	480b      	ldr	r0, [pc, #44]	; (800c1dc <Adv_Request+0xf8>)
 800c1ae:	f001 fa95 	bl	800d6dc <iprintf>
  return;
 800c1b2:	bf00      	nop
}
 800c1b4:	3710      	adds	r7, #16
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	bf00      	nop
 800c1bc:	2000170c 	.word	0x2000170c
 800c1c0:	0800e928 	.word	0x0800e928
 800c1c4:	0800fca0 	.word	0x0800fca0
 800c1c8:	0800e944 	.word	0x0800e944
 800c1cc:	0800f42c 	.word	0x0800f42c
 800c1d0:	0800f464 	.word	0x0800f464
 800c1d4:	20000014 	.word	0x20000014
 800c1d8:	0800f48c 	.word	0x0800f48c
 800c1dc:	0800f4c0 	.word	0x0800f4c0

0800c1e0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b086      	sub	sp, #24
 800c1e4:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800c1e6:	f7ff f963 	bl	800b4b0 <LL_FLASH_GetUDN>
 800c1ea:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1f2:	d023      	beq.n	800c23c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800c1f4:	f7ff f974 	bl	800b4e0 <LL_FLASH_GetSTCompanyID>
 800c1f8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800c1fa:	f7ff f965 	bl	800b4c8 <LL_FLASH_GetDeviceID>
 800c1fe:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	b2da      	uxtb	r2, r3
 800c204:	4b16      	ldr	r3, [pc, #88]	; (800c260 <BleGetBdAddress+0x80>)
 800c206:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	0a1b      	lsrs	r3, r3, #8
 800c20c:	b2da      	uxtb	r2, r3
 800c20e:	4b14      	ldr	r3, [pc, #80]	; (800c260 <BleGetBdAddress+0x80>)
 800c210:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	b2da      	uxtb	r2, r3
 800c216:	4b12      	ldr	r3, [pc, #72]	; (800c260 <BleGetBdAddress+0x80>)
 800c218:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800c21a:	68bb      	ldr	r3, [r7, #8]
 800c21c:	b2da      	uxtb	r2, r3
 800c21e:	4b10      	ldr	r3, [pc, #64]	; (800c260 <BleGetBdAddress+0x80>)
 800c220:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	0a1b      	lsrs	r3, r3, #8
 800c226:	b2da      	uxtb	r2, r3
 800c228:	4b0d      	ldr	r3, [pc, #52]	; (800c260 <BleGetBdAddress+0x80>)
 800c22a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	0c1b      	lsrs	r3, r3, #16
 800c230:	b2da      	uxtb	r2, r3
 800c232:	4b0b      	ldr	r3, [pc, #44]	; (800c260 <BleGetBdAddress+0x80>)
 800c234:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800c236:	4b0a      	ldr	r3, [pc, #40]	; (800c260 <BleGetBdAddress+0x80>)
 800c238:	617b      	str	r3, [r7, #20]
 800c23a:	e00b      	b.n	800c254 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800c23c:	2000      	movs	r0, #0
 800c23e:	f7fe fc4f 	bl	800aae0 <OTP_Read>
 800c242:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d002      	beq.n	800c250 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	617b      	str	r3, [r7, #20]
 800c24e:	e001      	b.n	800c254 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800c250:	4b04      	ldr	r3, [pc, #16]	; (800c264 <BleGetBdAddress+0x84>)
 800c252:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800c254:	697b      	ldr	r3, [r7, #20]
}
 800c256:	4618      	mov	r0, r3
 800c258:	3718      	adds	r7, #24
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	20001704 	.word	0x20001704
 800c264:	0800fc38 	.word	0x0800fc38

0800c268 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800c26e:	4b1f      	ldr	r3, [pc, #124]	; (800c2ec <Adv_Cancel+0x84>)
 800c270:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c274:	2b05      	cmp	r3, #5
 800c276:	d035      	beq.n	800c2e4 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c278:	2392      	movs	r3, #146	; 0x92
 800c27a:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800c27c:	f7fc fb33 	bl	80088e6 <aci_gap_set_non_discoverable>
 800c280:	4603      	mov	r3, r0
 800c282:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c284:	4b19      	ldr	r3, [pc, #100]	; (800c2ec <Adv_Cancel+0x84>)
 800c286:	2200      	movs	r2, #0
 800c288:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800c28c:	79fb      	ldrb	r3, [r7, #7]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d00d      	beq.n	800c2ae <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800c292:	4817      	ldr	r0, [pc, #92]	; (800c2f0 <Adv_Cancel+0x88>)
 800c294:	f7fe fb46 	bl	800a924 <DbgTraceGetFileName>
 800c298:	4601      	mov	r1, r0
 800c29a:	f240 4356 	movw	r3, #1110	; 0x456
 800c29e:	4a15      	ldr	r2, [pc, #84]	; (800c2f4 <Adv_Cancel+0x8c>)
 800c2a0:	4815      	ldr	r0, [pc, #84]	; (800c2f8 <Adv_Cancel+0x90>)
 800c2a2:	f001 fa1b 	bl	800d6dc <iprintf>
 800c2a6:	4815      	ldr	r0, [pc, #84]	; (800c2fc <Adv_Cancel+0x94>)
 800c2a8:	f001 fa18 	bl	800d6dc <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800c2ac:	e01a      	b.n	800c2e4 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 800c2ae:	4810      	ldr	r0, [pc, #64]	; (800c2f0 <Adv_Cancel+0x88>)
 800c2b0:	f7fe fb38 	bl	800a924 <DbgTraceGetFileName>
 800c2b4:	4601      	mov	r1, r0
 800c2b6:	f240 435a 	movw	r3, #1114	; 0x45a
 800c2ba:	4a0e      	ldr	r2, [pc, #56]	; (800c2f4 <Adv_Cancel+0x8c>)
 800c2bc:	480e      	ldr	r0, [pc, #56]	; (800c2f8 <Adv_Cancel+0x90>)
 800c2be:	f001 fa0d 	bl	800d6dc <iprintf>
 800c2c2:	480f      	ldr	r0, [pc, #60]	; (800c300 <Adv_Cancel+0x98>)
 800c2c4:	f001 fa0a 	bl	800d6dc <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800c2c8:	4809      	ldr	r0, [pc, #36]	; (800c2f0 <Adv_Cancel+0x88>)
 800c2ca:	f7fe fb2b 	bl	800a924 <DbgTraceGetFileName>
 800c2ce:	4601      	mov	r1, r0
 800c2d0:	f240 435b 	movw	r3, #1115	; 0x45b
 800c2d4:	4a07      	ldr	r2, [pc, #28]	; (800c2f4 <Adv_Cancel+0x8c>)
 800c2d6:	4808      	ldr	r0, [pc, #32]	; (800c2f8 <Adv_Cancel+0x90>)
 800c2d8:	f001 fa00 	bl	800d6dc <iprintf>
 800c2dc:	4809      	ldr	r0, [pc, #36]	; (800c304 <Adv_Cancel+0x9c>)
 800c2de:	f001 f9fd 	bl	800d6dc <iprintf>
  return;
 800c2e2:	bf00      	nop
 800c2e4:	bf00      	nop
}
 800c2e6:	3708      	adds	r7, #8
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	2000170c 	.word	0x2000170c
 800c2f0:	0800e928 	.word	0x0800e928
 800c2f4:	0800fcac 	.word	0x0800fcac
 800c2f8:	0800e944 	.word	0x0800e944
 800c2fc:	0800f4e8 	.word	0x0800f4e8
 800c300:	0800f50c 	.word	0x0800f50c
 800c304:	0800f514 	.word	0x0800f514

0800c308 <APP_BLE_Key_Button1_Action>:
}
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

/* USER CODE BEGIN FD_SPECIFIC_FUNCTIONS */
void APP_BLE_Key_Button1_Action(void)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	af00      	add	r7, sp, #0
  P2PS_APP_B1_Button_Action();
 800c30c:	f000 fa00 	bl	800c710 <P2PS_APP_B1_Button_Action>
}
 800c310:	bf00      	nop
 800c312:	bd80      	pop	{r7, pc}

0800c314 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	af00      	add	r7, sp, #0
  P2PS_APP_B2_Button_Action();
 800c318:	f000 fa01 	bl	800c71e <P2PS_APP_B2_Button_Action>
}
 800c31c:	bf00      	nop
 800c31e:	bd80      	pop	{r7, pc}

0800c320 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	af00      	add	r7, sp, #0
  P2PS_APP_B3_Button_Action();
 800c324:	f000 fa02 	bl	800c72c <P2PS_APP_B3_Button_Action>
}
 800c328:	bf00      	nop
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <APP_BLE_Key_Motor_Stopped_Action>:

void APP_BLE_Key_Motor_Stopped_Action(void)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	af00      	add	r7, sp, #0
  P2PS_APP_Motor_Stopped_Action();
 800c330:	f000 fa04 	bl	800c73c <P2PS_APP_Motor_Stopped_Action>
}
 800c334:	bf00      	nop
 800c336:	bd80      	pop	{r7, pc}

0800c338 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800c340:	2100      	movs	r1, #0
 800c342:	2002      	movs	r0, #2
 800c344:	f000 ffe8 	bl	800d318 <UTIL_SEQ_SetTask>

  return;
 800c348:	bf00      	nop
}
 800c34a:	3708      	adds	r7, #8
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c358:	2001      	movs	r0, #1
 800c35a:	f001 f849 	bl	800d3f0 <UTIL_SEQ_SetEvt>

  return;
 800c35e:	bf00      	nop
}
 800c360:	3708      	adds	r7, #8
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b082      	sub	sp, #8
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c36e:	2001      	movs	r0, #1
 800c370:	f001 f85e 	bl	800d430 <UTIL_SEQ_WaitEvt>

  return;
 800c374:	bf00      	nop
}
 800c376:	3708      	adds	r7, #8
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	685b      	ldr	r3, [r3, #4]
 800c38c:	3308      	adds	r3, #8
 800c38e:	4618      	mov	r0, r3
 800c390:	f7fd fc66 	bl	8009c60 <SVCCTL_UserEvtRx>
 800c394:	4603      	mov	r3, r0
 800c396:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800c398:	7afb      	ldrb	r3, [r7, #11]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d003      	beq.n	800c3a6 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	2201      	movs	r2, #1
 800c3a2:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800c3a4:	e003      	b.n	800c3ae <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	701a      	strb	r2, [r3, #0]
  return;
 800c3ac:	bf00      	nop
}
 800c3ae:	3710      	adds	r7, #16
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800c3be:	79fb      	ldrb	r3, [r7, #7]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d002      	beq.n	800c3ca <BLE_StatusNot+0x16>
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	d006      	beq.n	800c3d6 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800c3c8:	e00b      	b.n	800c3e2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800c3ca:	23ff      	movs	r3, #255	; 0xff
 800c3cc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	f000 ffce 	bl	800d370 <UTIL_SEQ_PauseTask>
      break;
 800c3d4:	e005      	b.n	800c3e2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800c3d6:	23ff      	movs	r3, #255	; 0xff
 800c3d8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800c3da:	68f8      	ldr	r0, [r7, #12]
 800c3dc:	f000 ffe8 	bl	800d3b0 <UTIL_SEQ_ResumeTask>
      break;
 800c3e0:	bf00      	nop
  }

  return;
 800c3e2:	bf00      	nop
}
 800c3e4:	3710      	adds	r7, #16
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
	...

0800c3ec <Custom_STM_App_Notification>:
uint16_t Payload_To_Speed(uint8_t, uint8_t);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	2b03      	cmp	r3, #3
 800c3fa:	d876      	bhi.n	800c4ea <Custom_STM_App_Notification+0xfe>
 800c3fc:	a201      	add	r2, pc, #4	; (adr r2, 800c404 <Custom_STM_App_Notification+0x18>)
 800c3fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c402:	bf00      	nop
 800c404:	0800c4eb 	.word	0x0800c4eb
 800c408:	0800c415 	.word	0x0800c415
 800c40c:	0800c4ab 	.word	0x0800c4ab
 800c410:	0800c4cb 	.word	0x0800c4cb
      /* USER CODE END CUSTOM_STM_GOAL_C_READ_EVT */
      break;

    case CUSTOM_STM_GOAL_C_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_GOAL_C_WRITE_NO_RESP_EVT */
        APP_DBG_MSG("\r\n\r** CUSTOM_STM_GOAL_C_WRITE_NO_RESP_EVT \n");
 800c414:	4837      	ldr	r0, [pc, #220]	; (800c4f4 <Custom_STM_App_Notification+0x108>)
 800c416:	f7fe fa85 	bl	800a924 <DbgTraceGetFileName>
 800c41a:	4601      	mov	r1, r0
 800c41c:	236e      	movs	r3, #110	; 0x6e
 800c41e:	4a36      	ldr	r2, [pc, #216]	; (800c4f8 <Custom_STM_App_Notification+0x10c>)
 800c420:	4836      	ldr	r0, [pc, #216]	; (800c4fc <Custom_STM_App_Notification+0x110>)
 800c422:	f001 f95b 	bl	800d6dc <iprintf>
 800c426:	4836      	ldr	r0, [pc, #216]	; (800c500 <Custom_STM_App_Notification+0x114>)
 800c428:	f001 f9c6 	bl	800d7b8 <puts>
        APP_DBG_MSG("\r\n\r** Write Data: 0x%02X %02X \n", pNotification->DataTransfered.pPayload[0], pNotification->DataTransfered.pPayload[1]);
 800c42c:	4831      	ldr	r0, [pc, #196]	; (800c4f4 <Custom_STM_App_Notification+0x108>)
 800c42e:	f7fe fa79 	bl	800a924 <DbgTraceGetFileName>
 800c432:	4601      	mov	r1, r0
 800c434:	236f      	movs	r3, #111	; 0x6f
 800c436:	4a30      	ldr	r2, [pc, #192]	; (800c4f8 <Custom_STM_App_Notification+0x10c>)
 800c438:	4830      	ldr	r0, [pc, #192]	; (800c4fc <Custom_STM_App_Notification+0x110>)
 800c43a:	f001 f94f 	bl	800d6dc <iprintf>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	4619      	mov	r1, r3
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	685b      	ldr	r3, [r3, #4]
 800c44a:	3301      	adds	r3, #1
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	461a      	mov	r2, r3
 800c450:	482c      	ldr	r0, [pc, #176]	; (800c504 <Custom_STM_App_Notification+0x118>)
 800c452:	f001 f943 	bl	800d6dc <iprintf>
        uint16_t goal_speed = Payload_To_Speed(pNotification->DataTransfered.pPayload[0], pNotification->DataTransfered.pPayload[1]);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	781a      	ldrb	r2, [r3, #0]
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	3301      	adds	r3, #1
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	4619      	mov	r1, r3
 800c466:	4610      	mov	r0, r2
 800c468:	f000 f976 	bl	800c758 <Payload_To_Speed>
 800c46c:	4603      	mov	r3, r0
 800c46e:	81fb      	strh	r3, [r7, #14]

        if(goal_speed == 0)
 800c470:	89fb      	ldrh	r3, [r7, #14]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d108      	bne.n	800c488 <Custom_STM_App_Notification+0x9c>
        {
        	//if pending action is put here the motor stops too fast before notification is sent, so STOPPED notification is sent twice
        	//APP_DBG_MSG("\r\n\r** Before stop \n");
        	Stop_Motor();
 800c476:	f7f5 f91b 	bl	80016b0 <Stop_Motor>
        	//APP_DBG_MSG("\r\n\r** After stop \n");

        	Blue_On();
 800c47a:	f7f5 f9a5 	bl	80017c8 <Blue_On>
        	Green_Off();
 800c47e:	f7f5 f997 	bl	80017b0 <Green_Off>
        	Red_Off();
 800c482:	f7f5 f97d 	bl	8001780 <Red_Off>
        	HAL_GPIO_WritePin(Blue_Led_GPIO_Port, Blue_Led_Pin, GPIO_PIN_RESET);
        	HAL_GPIO_WritePin(Green_Led_GPIO_Port, Green_Led_Pin, GPIO_PIN_RESET);
        	HAL_GPIO_WritePin(Red_Led_GPIO_Port, Red_Led_Pin, GPIO_PIN_SET);
        }*/
      /* USER CODE END CUSTOM_STM_GOAL_C_WRITE_NO_RESP_EVT */
      break;
 800c486:	e031      	b.n	800c4ec <Custom_STM_App_Notification+0x100>
        	Blue_Off();
 800c488:	f7f5 f9aa 	bl	80017e0 <Blue_Off>
        	Green_On();
 800c48c:	f7f5 f984 	bl	8001798 <Green_On>
        	Red_Off();
 800c490:	f7f5 f976 	bl	8001780 <Red_Off>
        	Set_Speed(goal_speed);
 800c494:	89fb      	ldrh	r3, [r7, #14]
 800c496:	4618      	mov	r0, r3
 800c498:	f7f5 f914 	bl	80016c4 <Set_Speed>
        	Blue_Off();
 800c49c:	f7f5 f9a0 	bl	80017e0 <Blue_Off>
        	Green_Off();
 800c4a0:	f7f5 f986 	bl	80017b0 <Green_Off>
        	Red_On();
 800c4a4:	f7f5 f960 	bl	8001768 <Red_On>
      break;
 800c4a8:	e020      	b.n	800c4ec <Custom_STM_App_Notification+0x100>

    case CUSTOM_STM_STATE_C_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_STATE_C_NOTIFY_ENABLED_EVT */
        APP_DBG_MSG("\r\n\r** CUSTOM_STM_STATE_C_NOTIFY_ENABLED_EVT \n");
 800c4aa:	4812      	ldr	r0, [pc, #72]	; (800c4f4 <Custom_STM_App_Notification+0x108>)
 800c4ac:	f7fe fa3a 	bl	800a924 <DbgTraceGetFileName>
 800c4b0:	4601      	mov	r1, r0
 800c4b2:	23a5      	movs	r3, #165	; 0xa5
 800c4b4:	4a10      	ldr	r2, [pc, #64]	; (800c4f8 <Custom_STM_App_Notification+0x10c>)
 800c4b6:	4811      	ldr	r0, [pc, #68]	; (800c4fc <Custom_STM_App_Notification+0x110>)
 800c4b8:	f001 f910 	bl	800d6dc <iprintf>
 800c4bc:	4812      	ldr	r0, [pc, #72]	; (800c508 <Custom_STM_App_Notification+0x11c>)
 800c4be:	f001 f97b 	bl	800d7b8 <puts>

        Custom_App_Context.State_c_Notification_Status = 1;
 800c4c2:	4b12      	ldr	r3, [pc, #72]	; (800c50c <Custom_STM_App_Notification+0x120>)
 800c4c4:	2201      	movs	r2, #1
 800c4c6:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_STATE_C_NOTIFY_ENABLED_EVT */
      break;
 800c4c8:	e010      	b.n	800c4ec <Custom_STM_App_Notification+0x100>

    case CUSTOM_STM_STATE_C_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_STATE_C_NOTIFY_DISABLED_EVT */
        APP_DBG_MSG("\r\n\r** CUSTOM_STM_STATE_C_NOTIFY_DISABLED_EVT \n");
 800c4ca:	480a      	ldr	r0, [pc, #40]	; (800c4f4 <Custom_STM_App_Notification+0x108>)
 800c4cc:	f7fe fa2a 	bl	800a924 <DbgTraceGetFileName>
 800c4d0:	4601      	mov	r1, r0
 800c4d2:	23ad      	movs	r3, #173	; 0xad
 800c4d4:	4a08      	ldr	r2, [pc, #32]	; (800c4f8 <Custom_STM_App_Notification+0x10c>)
 800c4d6:	4809      	ldr	r0, [pc, #36]	; (800c4fc <Custom_STM_App_Notification+0x110>)
 800c4d8:	f001 f900 	bl	800d6dc <iprintf>
 800c4dc:	480c      	ldr	r0, [pc, #48]	; (800c510 <Custom_STM_App_Notification+0x124>)
 800c4de:	f001 f96b 	bl	800d7b8 <puts>

        Custom_App_Context.State_c_Notification_Status = 0;
 800c4e2:	4b0a      	ldr	r3, [pc, #40]	; (800c50c <Custom_STM_App_Notification+0x120>)
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_STATE_C_NOTIFY_DISABLED_EVT */
      break;
 800c4e8:	e000      	b.n	800c4ec <Custom_STM_App_Notification+0x100>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800c4ea:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800c4ec:	bf00      	nop
}
 800c4ee:	3710      	adds	r7, #16
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	0800f530 	.word	0x0800f530
 800c4f8:	0800fcb8 	.word	0x0800fcb8
 800c4fc:	0800f550 	.word	0x0800f550
 800c500:	0800f564 	.word	0x0800f564
 800c504:	0800f590 	.word	0x0800f590
 800c508:	0800f5b0 	.word	0x0800f5b0
 800c50c:	20001794 	.word	0x20001794
 800c510:	0800f5e0 	.word	0x0800f5e0

0800c514 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d002      	beq.n	800c52a <Custom_APP_Notification+0x16>
 800c524:	2b01      	cmp	r3, #1
 800c526:	d002      	beq.n	800c52e <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800c528:	e002      	b.n	800c530 <Custom_APP_Notification+0x1c>
      break;
 800c52a:	bf00      	nop
 800c52c:	e000      	b.n	800c530 <Custom_APP_Notification+0x1c>
      break;
 800c52e:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800c530:	bf00      	nop
}
 800c532:	370c      	adds	r7, #12
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr

0800c53c <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	  /*UTIL_SEQ_RegTask(1<< CFG_TASK_B1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Custom_State_c_Send_Notification);
	  UTIL_SEQ_RegTask(1<< CFG_TASK_B2_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Custom_State_c_Send_Notification);
	  UTIL_SEQ_RegTask(1<< CFG_TASK_B3_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Custom_State_c_Send_Notification);*/

	  UTIL_SEQ_RegTask(1<< CFG_TASK_MOTOR_STOPPED_ID, UTIL_SEQ_RFU, Custom_State_c_Send_Notification);
 800c540:	4a0b      	ldr	r2, [pc, #44]	; (800c570 <Custom_APP_Init+0x34>)
 800c542:	2100      	movs	r1, #0
 800c544:	2020      	movs	r0, #32
 800c546:	f000 fec5 	bl	800d2d4 <UTIL_SEQ_RegTask>
	  UTIL_SEQ_RegTask(1<< CFG_TASK_MOTOR_PENDING_ID, UTIL_SEQ_RFU, Custom_State_c_Send_Notification);
 800c54a:	4a09      	ldr	r2, [pc, #36]	; (800c570 <Custom_APP_Init+0x34>)
 800c54c:	2100      	movs	r1, #0
 800c54e:	2040      	movs	r0, #64	; 0x40
 800c550:	f000 fec0 	bl	800d2d4 <UTIL_SEQ_RegTask>
	  UTIL_SEQ_RegTask(1<< CFG_TASK_MOTOR_DONE_ID, UTIL_SEQ_RFU, Custom_State_c_Send_Notification);
 800c554:	4a06      	ldr	r2, [pc, #24]	; (800c570 <Custom_APP_Init+0x34>)
 800c556:	2100      	movs	r1, #0
 800c558:	2080      	movs	r0, #128	; 0x80
 800c55a:	f000 febb 	bl	800d2d4 <UTIL_SEQ_RegTask>

	  Custom_App_Context.State_c_Notification_Status = 0;
 800c55e:	4b05      	ldr	r3, [pc, #20]	; (800c574 <Custom_APP_Init+0x38>)
 800c560:	2200      	movs	r2, #0
 800c562:	701a      	strb	r2, [r3, #0]
	  Custom_App_Context.State_Status = STOPPED;
 800c564:	4b03      	ldr	r3, [pc, #12]	; (800c574 <Custom_APP_Init+0x38>)
 800c566:	2200      	movs	r2, #0
 800c568:	705a      	strb	r2, [r3, #1]
  /* USER CODE END CUSTOM_APP_Init */
  return;
 800c56a:	bf00      	nop
}
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	0800c579 	.word	0x0800c579
 800c574:	20001794 	.word	0x20001794

0800c578 <Custom_State_c_Send_Notification>:
  /* USER CODE END State_c_UC_Last*/
  return;
}

void Custom_State_c_Send_Notification(void) /* Property Notification */
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800c57e:	2300      	movs	r3, #0
 800c580:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN State_c_NS_1*/
  if(Custom_App_Context.State_c_Notification_Status)
 800c582:	4b58      	ldr	r3, [pc, #352]	; (800c6e4 <Custom_State_c_Send_Notification+0x16c>)
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	f000 8092 	beq.w	800c6b0 <Custom_State_c_Send_Notification+0x138>
  {
	  updateflag = 1;
 800c58c:	2301      	movs	r3, #1
 800c58e:	71fb      	strb	r3, [r7, #7]

	  if(Custom_App_Context.State_Status == STOPPED)
 800c590:	4b54      	ldr	r3, [pc, #336]	; (800c6e4 <Custom_State_c_Send_Notification+0x16c>)
 800c592:	785b      	ldrb	r3, [r3, #1]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d120      	bne.n	800c5da <Custom_State_c_Send_Notification+0x62>
	  {
		  NotifyCharData[0] = 0x00; //Big Endian
 800c598:	4b53      	ldr	r3, [pc, #332]	; (800c6e8 <Custom_State_c_Send_Notification+0x170>)
 800c59a:	2200      	movs	r2, #0
 800c59c:	701a      	strb	r2, [r3, #0]
		  NotifyCharData[1] = 0x00;
 800c59e:	4b52      	ldr	r3, [pc, #328]	; (800c6e8 <Custom_State_c_Send_Notification+0x170>)
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	705a      	strb	r2, [r3, #1]
		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT MOTOR STOPPED \n");
 800c5a4:	4851      	ldr	r0, [pc, #324]	; (800c6ec <Custom_State_c_Send_Notification+0x174>)
 800c5a6:	f7fe f9bd 	bl	800a924 <DbgTraceGetFileName>
 800c5aa:	4601      	mov	r1, r0
 800c5ac:	f44f 7390 	mov.w	r3, #288	; 0x120
 800c5b0:	4a4f      	ldr	r2, [pc, #316]	; (800c6f0 <Custom_State_c_Send_Notification+0x178>)
 800c5b2:	4850      	ldr	r0, [pc, #320]	; (800c6f4 <Custom_State_c_Send_Notification+0x17c>)
 800c5b4:	f001 f892 	bl	800d6dc <iprintf>
 800c5b8:	484f      	ldr	r0, [pc, #316]	; (800c6f8 <Custom_State_c_Send_Notification+0x180>)
 800c5ba:	f001 f8fd 	bl	800d7b8 <puts>
		  APP_DBG_MSG(" \n\r");
 800c5be:	484b      	ldr	r0, [pc, #300]	; (800c6ec <Custom_State_c_Send_Notification+0x174>)
 800c5c0:	f7fe f9b0 	bl	800a924 <DbgTraceGetFileName>
 800c5c4:	4601      	mov	r1, r0
 800c5c6:	f240 1321 	movw	r3, #289	; 0x121
 800c5ca:	4a49      	ldr	r2, [pc, #292]	; (800c6f0 <Custom_State_c_Send_Notification+0x178>)
 800c5cc:	4849      	ldr	r0, [pc, #292]	; (800c6f4 <Custom_State_c_Send_Notification+0x17c>)
 800c5ce:	f001 f885 	bl	800d6dc <iprintf>
 800c5d2:	484a      	ldr	r0, [pc, #296]	; (800c6fc <Custom_State_c_Send_Notification+0x184>)
 800c5d4:	f001 f882 	bl	800d6dc <iprintf>
 800c5d8:	e077      	b.n	800c6ca <Custom_State_c_Send_Notification+0x152>
	  }
	  else if (Custom_App_Context.State_Status == PENDING)
 800c5da:	4b42      	ldr	r3, [pc, #264]	; (800c6e4 <Custom_State_c_Send_Notification+0x16c>)
 800c5dc:	785b      	ldrb	r3, [r3, #1]
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	d120      	bne.n	800c624 <Custom_State_c_Send_Notification+0xac>
	  {
		  NotifyCharData[0] = 0x00;
 800c5e2:	4b41      	ldr	r3, [pc, #260]	; (800c6e8 <Custom_State_c_Send_Notification+0x170>)
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	701a      	strb	r2, [r3, #0]
		  NotifyCharData[1] = 0x01;
 800c5e8:	4b3f      	ldr	r3, [pc, #252]	; (800c6e8 <Custom_State_c_Send_Notification+0x170>)
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	705a      	strb	r2, [r3, #1]
		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT MOTOR PENDING \n");
 800c5ee:	483f      	ldr	r0, [pc, #252]	; (800c6ec <Custom_State_c_Send_Notification+0x174>)
 800c5f0:	f7fe f998 	bl	800a924 <DbgTraceGetFileName>
 800c5f4:	4601      	mov	r1, r0
 800c5f6:	f240 1327 	movw	r3, #295	; 0x127
 800c5fa:	4a3d      	ldr	r2, [pc, #244]	; (800c6f0 <Custom_State_c_Send_Notification+0x178>)
 800c5fc:	483d      	ldr	r0, [pc, #244]	; (800c6f4 <Custom_State_c_Send_Notification+0x17c>)
 800c5fe:	f001 f86d 	bl	800d6dc <iprintf>
 800c602:	483f      	ldr	r0, [pc, #252]	; (800c700 <Custom_State_c_Send_Notification+0x188>)
 800c604:	f001 f8d8 	bl	800d7b8 <puts>
		  APP_DBG_MSG(" \n\r");
 800c608:	4838      	ldr	r0, [pc, #224]	; (800c6ec <Custom_State_c_Send_Notification+0x174>)
 800c60a:	f7fe f98b 	bl	800a924 <DbgTraceGetFileName>
 800c60e:	4601      	mov	r1, r0
 800c610:	f44f 7394 	mov.w	r3, #296	; 0x128
 800c614:	4a36      	ldr	r2, [pc, #216]	; (800c6f0 <Custom_State_c_Send_Notification+0x178>)
 800c616:	4837      	ldr	r0, [pc, #220]	; (800c6f4 <Custom_State_c_Send_Notification+0x17c>)
 800c618:	f001 f860 	bl	800d6dc <iprintf>
 800c61c:	4837      	ldr	r0, [pc, #220]	; (800c6fc <Custom_State_c_Send_Notification+0x184>)
 800c61e:	f001 f85d 	bl	800d6dc <iprintf>
 800c622:	e052      	b.n	800c6ca <Custom_State_c_Send_Notification+0x152>
	  }
	  else if (Custom_App_Context.State_Status == DONE)
 800c624:	4b2f      	ldr	r3, [pc, #188]	; (800c6e4 <Custom_State_c_Send_Notification+0x16c>)
 800c626:	785b      	ldrb	r3, [r3, #1]
 800c628:	2b02      	cmp	r3, #2
 800c62a:	d120      	bne.n	800c66e <Custom_State_c_Send_Notification+0xf6>
	  {
		  NotifyCharData[0] = 0x00;
 800c62c:	4b2e      	ldr	r3, [pc, #184]	; (800c6e8 <Custom_State_c_Send_Notification+0x170>)
 800c62e:	2200      	movs	r2, #0
 800c630:	701a      	strb	r2, [r3, #0]
		  NotifyCharData[1] = 0x02;
 800c632:	4b2d      	ldr	r3, [pc, #180]	; (800c6e8 <Custom_State_c_Send_Notification+0x170>)
 800c634:	2202      	movs	r2, #2
 800c636:	705a      	strb	r2, [r3, #1]
		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT MOTOR DONE \n");
 800c638:	482c      	ldr	r0, [pc, #176]	; (800c6ec <Custom_State_c_Send_Notification+0x174>)
 800c63a:	f7fe f973 	bl	800a924 <DbgTraceGetFileName>
 800c63e:	4601      	mov	r1, r0
 800c640:	f44f 7397 	mov.w	r3, #302	; 0x12e
 800c644:	4a2a      	ldr	r2, [pc, #168]	; (800c6f0 <Custom_State_c_Send_Notification+0x178>)
 800c646:	482b      	ldr	r0, [pc, #172]	; (800c6f4 <Custom_State_c_Send_Notification+0x17c>)
 800c648:	f001 f848 	bl	800d6dc <iprintf>
 800c64c:	482d      	ldr	r0, [pc, #180]	; (800c704 <Custom_State_c_Send_Notification+0x18c>)
 800c64e:	f001 f8b3 	bl	800d7b8 <puts>
		  APP_DBG_MSG(" \n\r");
 800c652:	4826      	ldr	r0, [pc, #152]	; (800c6ec <Custom_State_c_Send_Notification+0x174>)
 800c654:	f7fe f966 	bl	800a924 <DbgTraceGetFileName>
 800c658:	4601      	mov	r1, r0
 800c65a:	f240 132f 	movw	r3, #303	; 0x12f
 800c65e:	4a24      	ldr	r2, [pc, #144]	; (800c6f0 <Custom_State_c_Send_Notification+0x178>)
 800c660:	4824      	ldr	r0, [pc, #144]	; (800c6f4 <Custom_State_c_Send_Notification+0x17c>)
 800c662:	f001 f83b 	bl	800d6dc <iprintf>
 800c666:	4825      	ldr	r0, [pc, #148]	; (800c6fc <Custom_State_c_Send_Notification+0x184>)
 800c668:	f001 f838 	bl	800d6dc <iprintf>
 800c66c:	e02d      	b.n	800c6ca <Custom_State_c_Send_Notification+0x152>
	  }
	  else
	  {
		  NotifyCharData[0] = 0x00;
 800c66e:	4b1e      	ldr	r3, [pc, #120]	; (800c6e8 <Custom_State_c_Send_Notification+0x170>)
 800c670:	2200      	movs	r2, #0
 800c672:	701a      	strb	r2, [r3, #0]
		  NotifyCharData[1] = 0x03;
 800c674:	4b1c      	ldr	r3, [pc, #112]	; (800c6e8 <Custom_State_c_Send_Notification+0x170>)
 800c676:	2203      	movs	r2, #3
 800c678:	705a      	strb	r2, [r3, #1]
		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT MOTOR WRONG STATE \n");
 800c67a:	481c      	ldr	r0, [pc, #112]	; (800c6ec <Custom_State_c_Send_Notification+0x174>)
 800c67c:	f7fe f952 	bl	800a924 <DbgTraceGetFileName>
 800c680:	4601      	mov	r1, r0
 800c682:	f240 1335 	movw	r3, #309	; 0x135
 800c686:	4a1a      	ldr	r2, [pc, #104]	; (800c6f0 <Custom_State_c_Send_Notification+0x178>)
 800c688:	481a      	ldr	r0, [pc, #104]	; (800c6f4 <Custom_State_c_Send_Notification+0x17c>)
 800c68a:	f001 f827 	bl	800d6dc <iprintf>
 800c68e:	481e      	ldr	r0, [pc, #120]	; (800c708 <Custom_State_c_Send_Notification+0x190>)
 800c690:	f001 f892 	bl	800d7b8 <puts>
		  APP_DBG_MSG(" \n\r");
 800c694:	4815      	ldr	r0, [pc, #84]	; (800c6ec <Custom_State_c_Send_Notification+0x174>)
 800c696:	f7fe f945 	bl	800a924 <DbgTraceGetFileName>
 800c69a:	4601      	mov	r1, r0
 800c69c:	f44f 739b 	mov.w	r3, #310	; 0x136
 800c6a0:	4a13      	ldr	r2, [pc, #76]	; (800c6f0 <Custom_State_c_Send_Notification+0x178>)
 800c6a2:	4814      	ldr	r0, [pc, #80]	; (800c6f4 <Custom_State_c_Send_Notification+0x17c>)
 800c6a4:	f001 f81a 	bl	800d6dc <iprintf>
 800c6a8:	4814      	ldr	r0, [pc, #80]	; (800c6fc <Custom_State_c_Send_Notification+0x184>)
 800c6aa:	f001 f817 	bl	800d6dc <iprintf>
 800c6ae:	e00c      	b.n	800c6ca <Custom_State_c_Send_Notification+0x152>
	  }
  }
  else
  {
	  APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 800c6b0:	480e      	ldr	r0, [pc, #56]	; (800c6ec <Custom_State_c_Send_Notification+0x174>)
 800c6b2:	f7fe f937 	bl	800a924 <DbgTraceGetFileName>
 800c6b6:	4601      	mov	r1, r0
 800c6b8:	f240 133b 	movw	r3, #315	; 0x13b
 800c6bc:	4a0c      	ldr	r2, [pc, #48]	; (800c6f0 <Custom_State_c_Send_Notification+0x178>)
 800c6be:	480d      	ldr	r0, [pc, #52]	; (800c6f4 <Custom_State_c_Send_Notification+0x17c>)
 800c6c0:	f001 f80c 	bl	800d6dc <iprintf>
 800c6c4:	4811      	ldr	r0, [pc, #68]	; (800c70c <Custom_State_c_Send_Notification+0x194>)
 800c6c6:	f001 f877 	bl	800d7b8 <puts>
  }
  /* USER CODE END State_c_NS_1*/

  if (updateflag != 0)
 800c6ca:	79fb      	ldrb	r3, [r7, #7]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d004      	beq.n	800c6da <Custom_State_c_Send_Notification+0x162>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_STATE_C, (uint8_t *)NotifyCharData);
 800c6d0:	4905      	ldr	r1, [pc, #20]	; (800c6e8 <Custom_State_c_Send_Notification+0x170>)
 800c6d2:	2001      	movs	r0, #1
 800c6d4:	f000 f9f2 	bl	800cabc <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN State_c_NS_Last*/

  /* USER CODE END State_c_NS_Last*/

  return;
 800c6d8:	bf00      	nop
 800c6da:	bf00      	nop
}
 800c6dc:	3708      	adds	r7, #8
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	bd80      	pop	{r7, pc}
 800c6e2:	bf00      	nop
 800c6e4:	20001794 	.word	0x20001794
 800c6e8:	20001798 	.word	0x20001798
 800c6ec:	0800f530 	.word	0x0800f530
 800c6f0:	0800fcd4 	.word	0x0800fcd4
 800c6f4:	0800f550 	.word	0x0800f550
 800c6f8:	0800f610 	.word	0x0800f610
 800c6fc:	0800f650 	.word	0x0800f650
 800c700:	0800f654 	.word	0x0800f654
 800c704:	0800f694 	.word	0x0800f694
 800c708:	0800f6d0 	.word	0x0800f6d0
 800c70c:	0800f714 	.word	0x0800f714

0800c710 <P2PS_APP_B1_Button_Action>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_APP_B1_Button_Action(void)
{
 800c710:	b480      	push	{r7}
 800c712:	af00      	add	r7, sp, #0
	//Custom_App_Context.State_Status = STOPPED;
  //UTIL_SEQ_SetTask(1<<CFG_TASK_B1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);

  return;
 800c714:	bf00      	nop
}
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr

0800c71e <P2PS_APP_B2_Button_Action>:

void P2PS_APP_B2_Button_Action(void)
{
 800c71e:	b480      	push	{r7}
 800c720:	af00      	add	r7, sp, #0
	//Custom_App_Context.State_Status = PENDING;
  //UTIL_SEQ_SetTask(1<<CFG_TASK_B2_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);

  return;
 800c722:	bf00      	nop
}
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr

0800c72c <P2PS_APP_B3_Button_Action>:

void P2PS_APP_B3_Button_Action(void)
{
 800c72c:	b480      	push	{r7}
 800c72e:	af00      	add	r7, sp, #0
	//Custom_App_Context.State_Status = DONE;
  //UTIL_SEQ_SetTask(1<<CFG_TASK_B3_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);

  return;
 800c730:	bf00      	nop
}
 800c732:	46bd      	mov	sp, r7
 800c734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c738:	4770      	bx	lr
	...

0800c73c <P2PS_APP_Motor_Stopped_Action>:

void P2PS_APP_Motor_Stopped_Action(void)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	af00      	add	r7, sp, #0
	Custom_App_Context.State_Status = STOPPED;
 800c740:	4b04      	ldr	r3, [pc, #16]	; (800c754 <P2PS_APP_Motor_Stopped_Action+0x18>)
 800c742:	2200      	movs	r2, #0
 800c744:	705a      	strb	r2, [r3, #1]
    UTIL_SEQ_SetTask(1<<CFG_TASK_MOTOR_STOPPED_ID, CFG_SCH_PRIO_0);
 800c746:	2100      	movs	r1, #0
 800c748:	2020      	movs	r0, #32
 800c74a:	f000 fde5 	bl	800d318 <UTIL_SEQ_SetTask>

    return;
 800c74e:	bf00      	nop
}
 800c750:	bd80      	pop	{r7, pc}
 800c752:	bf00      	nop
 800c754:	20001794 	.word	0x20001794

0800c758 <Payload_To_Speed>:

    return;
}

uint16_t Payload_To_Speed(uint8_t p0, uint8_t p1)
{
 800c758:	b480      	push	{r7}
 800c75a:	b085      	sub	sp, #20
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	4603      	mov	r3, r0
 800c760:	460a      	mov	r2, r1
 800c762:	71fb      	strb	r3, [r7, #7]
 800c764:	4613      	mov	r3, r2
 800c766:	71bb      	strb	r3, [r7, #6]
    uint16_t result = (p0 << 8) + p1;
 800c768:	79fb      	ldrb	r3, [r7, #7]
 800c76a:	b29b      	uxth	r3, r3
 800c76c:	021b      	lsls	r3, r3, #8
 800c76e:	b29a      	uxth	r2, r3
 800c770:	79bb      	ldrb	r3, [r7, #6]
 800c772:	b29b      	uxth	r3, r3
 800c774:	4413      	add	r3, r2
 800c776:	81fb      	strh	r3, [r7, #14]
    return result;
 800c778:	89fb      	ldrh	r3, [r7, #14]
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3714      	adds	r7, #20
 800c77e:	46bd      	mov	sp, r7
 800c780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c784:	4770      	bx	lr
	...

0800c788 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b08a      	sub	sp, #40	; 0x28
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800c790:	2300      	movs	r3, #0
 800c792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	3301      	adds	r3, #1
 800c79a:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800c79c:	6a3b      	ldr	r3, [r7, #32]
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	2bff      	cmp	r3, #255	; 0xff
 800c7a2:	d15e      	bne.n	800c862 <Custom_STM_Event_Handler+0xda>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800c7a4:	6a3b      	ldr	r3, [r7, #32]
 800c7a6:	3302      	adds	r3, #2
 800c7a8:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 800c7aa:	69fb      	ldr	r3, [r7, #28]
 800c7ac:	881b      	ldrh	r3, [r3, #0]
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	f640 4214 	movw	r2, #3092	; 0xc14
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d04e      	beq.n	800c856 <Custom_STM_Event_Handler+0xce>
 800c7b8:	f640 4214 	movw	r2, #3092	; 0xc14
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	dc4c      	bgt.n	800c85a <Custom_STM_Event_Handler+0xd2>
 800c7c0:	f640 4201 	movw	r2, #3073	; 0xc01
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d003      	beq.n	800c7d0 <Custom_STM_Event_Handler+0x48>
 800c7c8:	f640 4213 	movw	r2, #3091	; 0xc13
 800c7cc:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800c7ce:	e047      	b.n	800c860 <Custom_STM_Event_Handler+0xd8>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800c7d0:	69fb      	ldr	r3, [r7, #28]
 800c7d2:	3302      	adds	r3, #2
 800c7d4:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomState_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800c7d6:	69bb      	ldr	r3, [r7, #24]
 800c7d8:	885b      	ldrh	r3, [r3, #2]
 800c7da:	b29b      	uxth	r3, r3
 800c7dc:	461a      	mov	r2, r3
 800c7de:	4b24      	ldr	r3, [pc, #144]	; (800c870 <Custom_STM_Event_Handler+0xe8>)
 800c7e0:	889b      	ldrh	r3, [r3, #4]
 800c7e2:	3302      	adds	r3, #2
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d119      	bne.n	800c81c <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 800c7ee:	69bb      	ldr	r3, [r7, #24]
 800c7f0:	7a1b      	ldrb	r3, [r3, #8]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d002      	beq.n	800c7fc <Custom_STM_Event_Handler+0x74>
 800c7f6:	2b01      	cmp	r3, #1
 800c7f8:	d008      	beq.n	800c80c <Custom_STM_Event_Handler+0x84>
              break;
 800c7fa:	e02b      	b.n	800c854 <Custom_STM_Event_Handler+0xcc>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_STATE_C_NOTIFY_DISABLED_EVT;
 800c7fc:	2303      	movs	r3, #3
 800c7fe:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800c800:	f107 0308 	add.w	r3, r7, #8
 800c804:	4618      	mov	r0, r3
 800c806:	f7ff fdf1 	bl	800c3ec <Custom_STM_App_Notification>
                break;
 800c80a:	e023      	b.n	800c854 <Custom_STM_Event_Handler+0xcc>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_STATE_C_NOTIFY_ENABLED_EVT;
 800c80c:	2302      	movs	r3, #2
 800c80e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800c810:	f107 0308 	add.w	r3, r7, #8
 800c814:	4618      	mov	r0, r3
 800c816:	f7ff fde9 	bl	800c3ec <Custom_STM_App_Notification>
                break;
 800c81a:	e01b      	b.n	800c854 <Custom_STM_Event_Handler+0xcc>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomGoal_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800c81c:	69bb      	ldr	r3, [r7, #24]
 800c81e:	885b      	ldrh	r3, [r3, #2]
 800c820:	b29b      	uxth	r3, r3
 800c822:	461a      	mov	r2, r3
 800c824:	4b12      	ldr	r3, [pc, #72]	; (800c870 <Custom_STM_Event_Handler+0xe8>)
 800c826:	885b      	ldrh	r3, [r3, #2]
 800c828:	3301      	adds	r3, #1
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d117      	bne.n	800c85e <Custom_STM_Event_Handler+0xd6>
            return_value = SVCCTL_EvtAckFlowEnable;
 800c82e:	2301      	movs	r3, #1
 800c830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Notification.Custom_Evt_Opcode = CUSTOM_STM_GOAL_C_WRITE_NO_RESP_EVT;
 800c834:	2301      	movs	r3, #1
 800c836:	723b      	strb	r3, [r7, #8]
            Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800c838:	69bb      	ldr	r3, [r7, #24]
 800c83a:	88db      	ldrh	r3, [r3, #6]
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	b2db      	uxtb	r3, r3
 800c840:	743b      	strb	r3, [r7, #16]
            Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800c842:	69bb      	ldr	r3, [r7, #24]
 800c844:	3308      	adds	r3, #8
 800c846:	60fb      	str	r3, [r7, #12]
            Custom_STM_App_Notification(&Notification);
 800c848:	f107 0308 	add.w	r3, r7, #8
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7ff fdcd 	bl	800c3ec <Custom_STM_App_Notification>
          break;
 800c852:	e004      	b.n	800c85e <Custom_STM_Event_Handler+0xd6>
 800c854:	e003      	b.n	800c85e <Custom_STM_Event_Handler+0xd6>
          break;
 800c856:	bf00      	nop
 800c858:	e004      	b.n	800c864 <Custom_STM_Event_Handler+0xdc>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800c85a:	bf00      	nop
 800c85c:	e002      	b.n	800c864 <Custom_STM_Event_Handler+0xdc>
          break;
 800c85e:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800c860:	e000      	b.n	800c864 <Custom_STM_Event_Handler+0xdc>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800c862:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800c864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 800c868:	4618      	mov	r0, r3
 800c86a:	3728      	adds	r7, #40	; 0x28
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}
 800c870:	20001890 	.word	0x20001890

0800c874 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b08c      	sub	sp, #48	; 0x30
 800c878:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c87a:	2392      	movs	r3, #146	; 0x92
 800c87c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800c87e:	4880      	ldr	r0, [pc, #512]	; (800ca80 <SVCCTL_InitCustomSvc+0x20c>)
 800c880:	f7fd f9d4 	bl	8009c2c <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 800c884:	2306      	movs	r3, #6
 800c886:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_SERVER_ARM_UUID(uuid.Char_UUID_128);
 800c888:	238f      	movs	r3, #143	; 0x8f
 800c88a:	713b      	strb	r3, [r7, #4]
 800c88c:	23e5      	movs	r3, #229	; 0xe5
 800c88e:	717b      	strb	r3, [r7, #5]
 800c890:	23b3      	movs	r3, #179	; 0xb3
 800c892:	71bb      	strb	r3, [r7, #6]
 800c894:	23d5      	movs	r3, #213	; 0xd5
 800c896:	71fb      	strb	r3, [r7, #7]
 800c898:	232e      	movs	r3, #46	; 0x2e
 800c89a:	723b      	strb	r3, [r7, #8]
 800c89c:	237f      	movs	r3, #127	; 0x7f
 800c89e:	727b      	strb	r3, [r7, #9]
 800c8a0:	234a      	movs	r3, #74	; 0x4a
 800c8a2:	72bb      	strb	r3, [r7, #10]
 800c8a4:	2398      	movs	r3, #152	; 0x98
 800c8a6:	72fb      	strb	r3, [r7, #11]
 800c8a8:	232a      	movs	r3, #42	; 0x2a
 800c8aa:	733b      	strb	r3, [r7, #12]
 800c8ac:	2348      	movs	r3, #72	; 0x48
 800c8ae:	737b      	strb	r3, [r7, #13]
 800c8b0:	237a      	movs	r3, #122	; 0x7a
 800c8b2:	73bb      	strb	r3, [r7, #14]
 800c8b4:	23cc      	movs	r3, #204	; 0xcc
 800c8b6:	73fb      	strb	r3, [r7, #15]
 800c8b8:	2340      	movs	r3, #64	; 0x40
 800c8ba:	743b      	strb	r3, [r7, #16]
 800c8bc:	23fe      	movs	r3, #254	; 0xfe
 800c8be:	747b      	strb	r3, [r7, #17]
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	74bb      	strb	r3, [r7, #18]
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800c8c8:	7dbb      	ldrb	r3, [r7, #22]
 800c8ca:	1d39      	adds	r1, r7, #4
 800c8cc:	4a6d      	ldr	r2, [pc, #436]	; (800ca84 <SVCCTL_InitCustomSvc+0x210>)
 800c8ce:	9200      	str	r2, [sp, #0]
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	2002      	movs	r0, #2
 800c8d4:	f7fc fc73 	bl	80091be <aci_gatt_add_service>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomArmHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800c8dc:	7dfb      	ldrb	r3, [r7, #23]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d00f      	beq.n	800c902 <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: Arm, error code: 0x%x \n\r", ret);
 800c8e2:	4869      	ldr	r0, [pc, #420]	; (800ca88 <SVCCTL_InitCustomSvc+0x214>)
 800c8e4:	f7fe f81e 	bl	800a924 <DbgTraceGetFileName>
 800c8e8:	4601      	mov	r1, r0
 800c8ea:	f44f 739b 	mov.w	r3, #310	; 0x136
 800c8ee:	4a67      	ldr	r2, [pc, #412]	; (800ca8c <SVCCTL_InitCustomSvc+0x218>)
 800c8f0:	4867      	ldr	r0, [pc, #412]	; (800ca90 <SVCCTL_InitCustomSvc+0x21c>)
 800c8f2:	f000 fef3 	bl	800d6dc <iprintf>
 800c8f6:	7dfb      	ldrb	r3, [r7, #23]
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	4866      	ldr	r0, [pc, #408]	; (800ca94 <SVCCTL_InitCustomSvc+0x220>)
 800c8fc:	f000 feee 	bl	800d6dc <iprintf>
 800c900:	e00c      	b.n	800c91c <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: Arm \n\r");
 800c902:	4861      	ldr	r0, [pc, #388]	; (800ca88 <SVCCTL_InitCustomSvc+0x214>)
 800c904:	f7fe f80e 	bl	800a924 <DbgTraceGetFileName>
 800c908:	4601      	mov	r1, r0
 800c90a:	f44f 739d 	mov.w	r3, #314	; 0x13a
 800c90e:	4a5f      	ldr	r2, [pc, #380]	; (800ca8c <SVCCTL_InitCustomSvc+0x218>)
 800c910:	485f      	ldr	r0, [pc, #380]	; (800ca90 <SVCCTL_InitCustomSvc+0x21c>)
 800c912:	f000 fee3 	bl	800d6dc <iprintf>
 800c916:	4860      	ldr	r0, [pc, #384]	; (800ca98 <SVCCTL_InitCustomSvc+0x224>)
 800c918:	f000 fee0 	bl	800d6dc <iprintf>
  }

  /**
   *  Goal_Char
   */
  COPY_GOAL_CHAR_UUID(uuid.Char_UUID_128);
 800c91c:	2319      	movs	r3, #25
 800c91e:	713b      	strb	r3, [r7, #4]
 800c920:	23ed      	movs	r3, #237	; 0xed
 800c922:	717b      	strb	r3, [r7, #5]
 800c924:	2382      	movs	r3, #130	; 0x82
 800c926:	71bb      	strb	r3, [r7, #6]
 800c928:	23ae      	movs	r3, #174	; 0xae
 800c92a:	71fb      	strb	r3, [r7, #7]
 800c92c:	23ed      	movs	r3, #237	; 0xed
 800c92e:	723b      	strb	r3, [r7, #8]
 800c930:	2321      	movs	r3, #33	; 0x21
 800c932:	727b      	strb	r3, [r7, #9]
 800c934:	234c      	movs	r3, #76	; 0x4c
 800c936:	72bb      	strb	r3, [r7, #10]
 800c938:	239d      	movs	r3, #157	; 0x9d
 800c93a:	72fb      	strb	r3, [r7, #11]
 800c93c:	2341      	movs	r3, #65	; 0x41
 800c93e:	733b      	strb	r3, [r7, #12]
 800c940:	2345      	movs	r3, #69	; 0x45
 800c942:	737b      	strb	r3, [r7, #13]
 800c944:	2322      	movs	r3, #34	; 0x22
 800c946:	73bb      	strb	r3, [r7, #14]
 800c948:	238e      	movs	r3, #142	; 0x8e
 800c94a:	73fb      	strb	r3, [r7, #15]
 800c94c:	2341      	movs	r3, #65	; 0x41
 800c94e:	743b      	strb	r3, [r7, #16]
 800c950:	23fe      	movs	r3, #254	; 0xfe
 800c952:	747b      	strb	r3, [r7, #17]
 800c954:	2300      	movs	r3, #0
 800c956:	74bb      	strb	r3, [r7, #18]
 800c958:	2300      	movs	r3, #0
 800c95a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomArmHdle,
 800c95c:	4b49      	ldr	r3, [pc, #292]	; (800ca84 <SVCCTL_InitCustomSvc+0x210>)
 800c95e:	8818      	ldrh	r0, [r3, #0]
 800c960:	4b4e      	ldr	r3, [pc, #312]	; (800ca9c <SVCCTL_InitCustomSvc+0x228>)
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	b29b      	uxth	r3, r3
 800c966:	1d3a      	adds	r2, r7, #4
 800c968:	494d      	ldr	r1, [pc, #308]	; (800caa0 <SVCCTL_InitCustomSvc+0x22c>)
 800c96a:	9105      	str	r1, [sp, #20]
 800c96c:	2101      	movs	r1, #1
 800c96e:	9104      	str	r1, [sp, #16]
 800c970:	2110      	movs	r1, #16
 800c972:	9103      	str	r1, [sp, #12]
 800c974:	2101      	movs	r1, #1
 800c976:	9102      	str	r1, [sp, #8]
 800c978:	2100      	movs	r1, #0
 800c97a:	9101      	str	r1, [sp, #4]
 800c97c:	2106      	movs	r1, #6
 800c97e:	9100      	str	r1, [sp, #0]
 800c980:	2102      	movs	r1, #2
 800c982:	f7fc fcf2 	bl	800936a <aci_gatt_add_char>
 800c986:	4603      	mov	r3, r0
 800c988:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomGoal_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800c98a:	7dfb      	ldrb	r3, [r7, #23]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d00f      	beq.n	800c9b0 <SVCCTL_InitCustomSvc+0x13c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : GOAL_C, error code: 0x%x \n\r", ret);
 800c990:	483d      	ldr	r0, [pc, #244]	; (800ca88 <SVCCTL_InitCustomSvc+0x214>)
 800c992:	f7fd ffc7 	bl	800a924 <DbgTraceGetFileName>
 800c996:	4601      	mov	r1, r0
 800c998:	f44f 73a6 	mov.w	r3, #332	; 0x14c
 800c99c:	4a3b      	ldr	r2, [pc, #236]	; (800ca8c <SVCCTL_InitCustomSvc+0x218>)
 800c99e:	483c      	ldr	r0, [pc, #240]	; (800ca90 <SVCCTL_InitCustomSvc+0x21c>)
 800c9a0:	f000 fe9c 	bl	800d6dc <iprintf>
 800c9a4:	7dfb      	ldrb	r3, [r7, #23]
 800c9a6:	4619      	mov	r1, r3
 800c9a8:	483e      	ldr	r0, [pc, #248]	; (800caa4 <SVCCTL_InitCustomSvc+0x230>)
 800c9aa:	f000 fe97 	bl	800d6dc <iprintf>
 800c9ae:	e00c      	b.n	800c9ca <SVCCTL_InitCustomSvc+0x156>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : GOAL_C \n\r");
 800c9b0:	4835      	ldr	r0, [pc, #212]	; (800ca88 <SVCCTL_InitCustomSvc+0x214>)
 800c9b2:	f7fd ffb7 	bl	800a924 <DbgTraceGetFileName>
 800c9b6:	4601      	mov	r1, r0
 800c9b8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800c9bc:	4a33      	ldr	r2, [pc, #204]	; (800ca8c <SVCCTL_InitCustomSvc+0x218>)
 800c9be:	4834      	ldr	r0, [pc, #208]	; (800ca90 <SVCCTL_InitCustomSvc+0x21c>)
 800c9c0:	f000 fe8c 	bl	800d6dc <iprintf>
 800c9c4:	4838      	ldr	r0, [pc, #224]	; (800caa8 <SVCCTL_InitCustomSvc+0x234>)
 800c9c6:	f000 fe89 	bl	800d6dc <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  State_Char
   */
  COPY_STATE_CHAR_UUID(uuid.Char_UUID_128);
 800c9ca:	2319      	movs	r3, #25
 800c9cc:	713b      	strb	r3, [r7, #4]
 800c9ce:	23ed      	movs	r3, #237	; 0xed
 800c9d0:	717b      	strb	r3, [r7, #5]
 800c9d2:	2382      	movs	r3, #130	; 0x82
 800c9d4:	71bb      	strb	r3, [r7, #6]
 800c9d6:	23ae      	movs	r3, #174	; 0xae
 800c9d8:	71fb      	strb	r3, [r7, #7]
 800c9da:	23ed      	movs	r3, #237	; 0xed
 800c9dc:	723b      	strb	r3, [r7, #8]
 800c9de:	2321      	movs	r3, #33	; 0x21
 800c9e0:	727b      	strb	r3, [r7, #9]
 800c9e2:	234c      	movs	r3, #76	; 0x4c
 800c9e4:	72bb      	strb	r3, [r7, #10]
 800c9e6:	239d      	movs	r3, #157	; 0x9d
 800c9e8:	72fb      	strb	r3, [r7, #11]
 800c9ea:	2341      	movs	r3, #65	; 0x41
 800c9ec:	733b      	strb	r3, [r7, #12]
 800c9ee:	2345      	movs	r3, #69	; 0x45
 800c9f0:	737b      	strb	r3, [r7, #13]
 800c9f2:	2322      	movs	r3, #34	; 0x22
 800c9f4:	73bb      	strb	r3, [r7, #14]
 800c9f6:	238e      	movs	r3, #142	; 0x8e
 800c9f8:	73fb      	strb	r3, [r7, #15]
 800c9fa:	2342      	movs	r3, #66	; 0x42
 800c9fc:	743b      	strb	r3, [r7, #16]
 800c9fe:	23fe      	movs	r3, #254	; 0xfe
 800ca00:	747b      	strb	r3, [r7, #17]
 800ca02:	2300      	movs	r3, #0
 800ca04:	74bb      	strb	r3, [r7, #18]
 800ca06:	2300      	movs	r3, #0
 800ca08:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomArmHdle,
 800ca0a:	4b1e      	ldr	r3, [pc, #120]	; (800ca84 <SVCCTL_InitCustomSvc+0x210>)
 800ca0c:	8818      	ldrh	r0, [r3, #0]
 800ca0e:	4b27      	ldr	r3, [pc, #156]	; (800caac <SVCCTL_InitCustomSvc+0x238>)
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	b29b      	uxth	r3, r3
 800ca14:	1d3a      	adds	r2, r7, #4
 800ca16:	4926      	ldr	r1, [pc, #152]	; (800cab0 <SVCCTL_InitCustomSvc+0x23c>)
 800ca18:	9105      	str	r1, [sp, #20]
 800ca1a:	2101      	movs	r1, #1
 800ca1c:	9104      	str	r1, [sp, #16]
 800ca1e:	2110      	movs	r1, #16
 800ca20:	9103      	str	r1, [sp, #12]
 800ca22:	2101      	movs	r1, #1
 800ca24:	9102      	str	r1, [sp, #8]
 800ca26:	2100      	movs	r1, #0
 800ca28:	9101      	str	r1, [sp, #4]
 800ca2a:	2110      	movs	r1, #16
 800ca2c:	9100      	str	r1, [sp, #0]
 800ca2e:	2102      	movs	r1, #2
 800ca30:	f7fc fc9b 	bl	800936a <aci_gatt_add_char>
 800ca34:	4603      	mov	r3, r0
 800ca36:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomState_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800ca38:	7dfb      	ldrb	r3, [r7, #23]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d00f      	beq.n	800ca5e <SVCCTL_InitCustomSvc+0x1ea>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : STATE_C, error code: 0x%x \n\r", ret);
 800ca3e:	4812      	ldr	r0, [pc, #72]	; (800ca88 <SVCCTL_InitCustomSvc+0x214>)
 800ca40:	f7fd ff70 	bl	800a924 <DbgTraceGetFileName>
 800ca44:	4601      	mov	r1, r0
 800ca46:	f44f 73b3 	mov.w	r3, #358	; 0x166
 800ca4a:	4a10      	ldr	r2, [pc, #64]	; (800ca8c <SVCCTL_InitCustomSvc+0x218>)
 800ca4c:	4810      	ldr	r0, [pc, #64]	; (800ca90 <SVCCTL_InitCustomSvc+0x21c>)
 800ca4e:	f000 fe45 	bl	800d6dc <iprintf>
 800ca52:	7dfb      	ldrb	r3, [r7, #23]
 800ca54:	4619      	mov	r1, r3
 800ca56:	4817      	ldr	r0, [pc, #92]	; (800cab4 <SVCCTL_InitCustomSvc+0x240>)
 800ca58:	f000 fe40 	bl	800d6dc <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800ca5c:	e00d      	b.n	800ca7a <SVCCTL_InitCustomSvc+0x206>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : STATE_C \n\r");
 800ca5e:	480a      	ldr	r0, [pc, #40]	; (800ca88 <SVCCTL_InitCustomSvc+0x214>)
 800ca60:	f7fd ff60 	bl	800a924 <DbgTraceGetFileName>
 800ca64:	4601      	mov	r1, r0
 800ca66:	f44f 73b5 	mov.w	r3, #362	; 0x16a
 800ca6a:	4a08      	ldr	r2, [pc, #32]	; (800ca8c <SVCCTL_InitCustomSvc+0x218>)
 800ca6c:	4808      	ldr	r0, [pc, #32]	; (800ca90 <SVCCTL_InitCustomSvc+0x21c>)
 800ca6e:	f000 fe35 	bl	800d6dc <iprintf>
 800ca72:	4811      	ldr	r0, [pc, #68]	; (800cab8 <SVCCTL_InitCustomSvc+0x244>)
 800ca74:	f000 fe32 	bl	800d6dc <iprintf>
  return;
 800ca78:	bf00      	nop
}
 800ca7a:	3718      	adds	r7, #24
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}
 800ca80:	0800c789 	.word	0x0800c789
 800ca84:	20001890 	.word	0x20001890
 800ca88:	0800f75c 	.word	0x0800f75c
 800ca8c:	0800fcf8 	.word	0x0800fcf8
 800ca90:	0800f77c 	.word	0x0800f77c
 800ca94:	0800f790 	.word	0x0800f790
 800ca98:	0800f7d4 	.word	0x0800f7d4
 800ca9c:	2000002d 	.word	0x2000002d
 800caa0:	20001892 	.word	0x20001892
 800caa4:	0800f804 	.word	0x0800f804
 800caa8:	0800f84c 	.word	0x0800f84c
 800caac:	2000002e 	.word	0x2000002e
 800cab0:	20001894 	.word	0x20001894
 800cab4:	0800f880 	.word	0x0800f880
 800cab8:	0800f8c8 	.word	0x0800f8c8

0800cabc <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b086      	sub	sp, #24
 800cac0:	af02      	add	r7, sp, #8
 800cac2:	4603      	mov	r3, r0
 800cac4:	6039      	str	r1, [r7, #0]
 800cac6:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800cac8:	2392      	movs	r3, #146	; 0x92
 800caca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800cacc:	79fb      	ldrb	r3, [r7, #7]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d002      	beq.n	800cad8 <Custom_STM_App_Update_Char+0x1c>
 800cad2:	2b01      	cmp	r3, #1
 800cad4:	d02f      	beq.n	800cb36 <Custom_STM_App_Update_Char+0x7a>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 800cad6:	e05d      	b.n	800cb94 <Custom_STM_App_Update_Char+0xd8>
      ret = aci_gatt_update_char_value(CustomContext.CustomArmHdle,
 800cad8:	4b31      	ldr	r3, [pc, #196]	; (800cba0 <Custom_STM_App_Update_Char+0xe4>)
 800cada:	8818      	ldrh	r0, [r3, #0]
 800cadc:	4b30      	ldr	r3, [pc, #192]	; (800cba0 <Custom_STM_App_Update_Char+0xe4>)
 800cade:	8859      	ldrh	r1, [r3, #2]
 800cae0:	4b30      	ldr	r3, [pc, #192]	; (800cba4 <Custom_STM_App_Update_Char+0xe8>)
 800cae2:	781a      	ldrb	r2, [r3, #0]
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	9300      	str	r3, [sp, #0]
 800cae8:	4613      	mov	r3, r2
 800caea:	2200      	movs	r2, #0
 800caec:	f7fc fd45 	bl	800957a <aci_gatt_update_char_value>
 800caf0:	4603      	mov	r3, r0
 800caf2:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800caf4:	7bfb      	ldrb	r3, [r7, #15]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d00f      	beq.n	800cb1a <Custom_STM_App_Update_Char+0x5e>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value GOAL_C command, result : 0x%x \n\r", ret);
 800cafa:	482b      	ldr	r0, [pc, #172]	; (800cba8 <Custom_STM_App_Update_Char+0xec>)
 800cafc:	f7fd ff12 	bl	800a924 <DbgTraceGetFileName>
 800cb00:	4601      	mov	r1, r0
 800cb02:	f240 1391 	movw	r3, #401	; 0x191
 800cb06:	4a29      	ldr	r2, [pc, #164]	; (800cbac <Custom_STM_App_Update_Char+0xf0>)
 800cb08:	4829      	ldr	r0, [pc, #164]	; (800cbb0 <Custom_STM_App_Update_Char+0xf4>)
 800cb0a:	f000 fde7 	bl	800d6dc <iprintf>
 800cb0e:	7bfb      	ldrb	r3, [r7, #15]
 800cb10:	4619      	mov	r1, r3
 800cb12:	4828      	ldr	r0, [pc, #160]	; (800cbb4 <Custom_STM_App_Update_Char+0xf8>)
 800cb14:	f000 fde2 	bl	800d6dc <iprintf>
      break;
 800cb18:	e03c      	b.n	800cb94 <Custom_STM_App_Update_Char+0xd8>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value GOAL_C command\n\r");
 800cb1a:	4823      	ldr	r0, [pc, #140]	; (800cba8 <Custom_STM_App_Update_Char+0xec>)
 800cb1c:	f7fd ff02 	bl	800a924 <DbgTraceGetFileName>
 800cb20:	4601      	mov	r1, r0
 800cb22:	f240 1395 	movw	r3, #405	; 0x195
 800cb26:	4a21      	ldr	r2, [pc, #132]	; (800cbac <Custom_STM_App_Update_Char+0xf0>)
 800cb28:	4821      	ldr	r0, [pc, #132]	; (800cbb0 <Custom_STM_App_Update_Char+0xf4>)
 800cb2a:	f000 fdd7 	bl	800d6dc <iprintf>
 800cb2e:	4822      	ldr	r0, [pc, #136]	; (800cbb8 <Custom_STM_App_Update_Char+0xfc>)
 800cb30:	f000 fdd4 	bl	800d6dc <iprintf>
      break;
 800cb34:	e02e      	b.n	800cb94 <Custom_STM_App_Update_Char+0xd8>
      ret = aci_gatt_update_char_value(CustomContext.CustomArmHdle,
 800cb36:	4b1a      	ldr	r3, [pc, #104]	; (800cba0 <Custom_STM_App_Update_Char+0xe4>)
 800cb38:	8818      	ldrh	r0, [r3, #0]
 800cb3a:	4b19      	ldr	r3, [pc, #100]	; (800cba0 <Custom_STM_App_Update_Char+0xe4>)
 800cb3c:	8899      	ldrh	r1, [r3, #4]
 800cb3e:	4b1f      	ldr	r3, [pc, #124]	; (800cbbc <Custom_STM_App_Update_Char+0x100>)
 800cb40:	781a      	ldrb	r2, [r3, #0]
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	9300      	str	r3, [sp, #0]
 800cb46:	4613      	mov	r3, r2
 800cb48:	2200      	movs	r2, #0
 800cb4a:	f7fc fd16 	bl	800957a <aci_gatt_update_char_value>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800cb52:	7bfb      	ldrb	r3, [r7, #15]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d00f      	beq.n	800cb78 <Custom_STM_App_Update_Char+0xbc>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value STATE_C command, result : 0x%x \n\r", ret);
 800cb58:	4813      	ldr	r0, [pc, #76]	; (800cba8 <Custom_STM_App_Update_Char+0xec>)
 800cb5a:	f7fd fee3 	bl	800a924 <DbgTraceGetFileName>
 800cb5e:	4601      	mov	r1, r0
 800cb60:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 800cb64:	4a11      	ldr	r2, [pc, #68]	; (800cbac <Custom_STM_App_Update_Char+0xf0>)
 800cb66:	4812      	ldr	r0, [pc, #72]	; (800cbb0 <Custom_STM_App_Update_Char+0xf4>)
 800cb68:	f000 fdb8 	bl	800d6dc <iprintf>
 800cb6c:	7bfb      	ldrb	r3, [r7, #15]
 800cb6e:	4619      	mov	r1, r3
 800cb70:	4813      	ldr	r0, [pc, #76]	; (800cbc0 <Custom_STM_App_Update_Char+0x104>)
 800cb72:	f000 fdb3 	bl	800d6dc <iprintf>
      break;
 800cb76:	e00c      	b.n	800cb92 <Custom_STM_App_Update_Char+0xd6>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value STATE_C command\n\r");
 800cb78:	480b      	ldr	r0, [pc, #44]	; (800cba8 <Custom_STM_App_Update_Char+0xec>)
 800cb7a:	f7fd fed3 	bl	800a924 <DbgTraceGetFileName>
 800cb7e:	4601      	mov	r1, r0
 800cb80:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 800cb84:	4a09      	ldr	r2, [pc, #36]	; (800cbac <Custom_STM_App_Update_Char+0xf0>)
 800cb86:	480a      	ldr	r0, [pc, #40]	; (800cbb0 <Custom_STM_App_Update_Char+0xf4>)
 800cb88:	f000 fda8 	bl	800d6dc <iprintf>
 800cb8c:	480d      	ldr	r0, [pc, #52]	; (800cbc4 <Custom_STM_App_Update_Char+0x108>)
 800cb8e:	f000 fda5 	bl	800d6dc <iprintf>
      break;
 800cb92:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800cb94:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3710      	adds	r7, #16
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	20001890 	.word	0x20001890
 800cba4:	2000002d 	.word	0x2000002d
 800cba8:	0800f75c 	.word	0x0800f75c
 800cbac:	0800fd10 	.word	0x0800fd10
 800cbb0:	0800f77c 	.word	0x0800f77c
 800cbb4:	0800f8fc 	.word	0x0800f8fc
 800cbb8:	0800f944 	.word	0x0800f944
 800cbbc:	2000002e 	.word	0x2000002e
 800cbc0:	0800f97c 	.word	0x0800f97c
 800cbc4:	0800f9c4 	.word	0x0800f9c4

0800cbc8 <LL_PWR_EnableBootC2>:
{
 800cbc8:	b480      	push	{r7}
 800cbca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800cbcc:	4b05      	ldr	r3, [pc, #20]	; (800cbe4 <LL_PWR_EnableBootC2+0x1c>)
 800cbce:	68db      	ldr	r3, [r3, #12]
 800cbd0:	4a04      	ldr	r2, [pc, #16]	; (800cbe4 <LL_PWR_EnableBootC2+0x1c>)
 800cbd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbd6:	60d3      	str	r3, [r2, #12]
}
 800cbd8:	bf00      	nop
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe0:	4770      	bx	lr
 800cbe2:	bf00      	nop
 800cbe4:	58000400 	.word	0x58000400

0800cbe8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b083      	sub	sp, #12
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800cbf0:	4b06      	ldr	r3, [pc, #24]	; (800cc0c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800cbf2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800cbf6:	4905      	ldr	r1, [pc, #20]	; (800cc0c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800cc00:	bf00      	nop
 800cc02:	370c      	adds	r7, #12
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr
 800cc0c:	58000800 	.word	0x58000800

0800cc10 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b083      	sub	sp, #12
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800cc18:	4b05      	ldr	r3, [pc, #20]	; (800cc30 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800cc1a:	6a1a      	ldr	r2, [r3, #32]
 800cc1c:	4904      	ldr	r1, [pc, #16]	; (800cc30 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	4313      	orrs	r3, r2
 800cc22:	620b      	str	r3, [r1, #32]
}
 800cc24:	bf00      	nop
 800cc26:	370c      	adds	r7, #12
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr
 800cc30:	58000800 	.word	0x58000800

0800cc34 <LL_AHB3_GRP1_EnableClock>:
{
 800cc34:	b480      	push	{r7}
 800cc36:	b085      	sub	sp, #20
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800cc3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cc42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	4313      	orrs	r3, r2
 800cc4a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800cc4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	4013      	ands	r3, r2
 800cc56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800cc58:	68fb      	ldr	r3, [r7, #12]
}
 800cc5a:	bf00      	nop
 800cc5c:	3714      	adds	r7, #20
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc64:	4770      	bx	lr

0800cc66 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800cc66:	b480      	push	{r7}
 800cc68:	b085      	sub	sp, #20
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800cc6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc72:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800cc76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	4313      	orrs	r3, r2
 800cc7e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800cc82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cc86:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	4013      	ands	r3, r2
 800cc8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800cc90:	68fb      	ldr	r3, [r7, #12]
}
 800cc92:	bf00      	nop
 800cc94:	3714      	adds	r7, #20
 800cc96:	46bd      	mov	sp, r7
 800cc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9c:	4770      	bx	lr

0800cc9e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800cc9e:	b480      	push	{r7}
 800cca0:	b083      	sub	sp, #12
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	601a      	str	r2, [r3, #0]
}
 800ccb2:	bf00      	nop
 800ccb4:	370c      	adds	r7, #12
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbc:	4770      	bx	lr

0800ccbe <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800ccbe:	b480      	push	{r7}
 800ccc0:	b083      	sub	sp, #12
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	f043 0201 	orr.w	r2, r3, #1
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	601a      	str	r2, [r3, #0]
}
 800ccd2:	bf00      	nop
 800ccd4:	370c      	adds	r7, #12
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr

0800ccde <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800ccde:	b480      	push	{r7}
 800cce0:	b083      	sub	sp, #12
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
 800cce6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	685a      	ldr	r2, [r3, #4]
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	041b      	lsls	r3, r3, #16
 800ccf0:	43db      	mvns	r3, r3
 800ccf2:	401a      	ands	r2, r3
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	605a      	str	r2, [r3, #4]
}
 800ccf8:	bf00      	nop
 800ccfa:	370c      	adds	r7, #12
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr

0800cd04 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b083      	sub	sp, #12
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	685a      	ldr	r2, [r3, #4]
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	041b      	lsls	r3, r3, #16
 800cd16:	431a      	orrs	r2, r3
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	605a      	str	r2, [r3, #4]
}
 800cd1c:	bf00      	nop
 800cd1e:	370c      	adds	r7, #12
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr

0800cd28 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800cd28:	b480      	push	{r7}
 800cd2a:	b083      	sub	sp, #12
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	685a      	ldr	r2, [r3, #4]
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	43db      	mvns	r3, r3
 800cd3a:	401a      	ands	r2, r3
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	605a      	str	r2, [r3, #4]
}
 800cd40:	bf00      	nop
 800cd42:	370c      	adds	r7, #12
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr

0800cd4c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b083      	sub	sp, #12
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	683a      	ldr	r2, [r7, #0]
 800cd5a:	609a      	str	r2, [r3, #8]
}
 800cd5c:	bf00      	nop
 800cd5e:	370c      	adds	r7, #12
 800cd60:	46bd      	mov	sp, r7
 800cd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd66:	4770      	bx	lr

0800cd68 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b083      	sub	sp, #12
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	041a      	lsls	r2, r3, #16
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	609a      	str	r2, [r3, #8]
}
 800cd7a:	bf00      	nop
 800cd7c:	370c      	adds	r7, #12
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd84:	4770      	bx	lr

0800cd86 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800cd86:	b480      	push	{r7}
 800cd88:	b083      	sub	sp, #12
 800cd8a:	af00      	add	r7, sp, #0
 800cd8c:	6078      	str	r0, [r7, #4]
 800cd8e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	68da      	ldr	r2, [r3, #12]
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	4013      	ands	r3, r2
 800cd98:	683a      	ldr	r2, [r7, #0]
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d101      	bne.n	800cda2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800cd9e:	2301      	movs	r3, #1
 800cda0:	e000      	b.n	800cda4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800cda2:	2300      	movs	r3, #0
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	370c      	adds	r7, #12
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr

0800cdb0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b083      	sub	sp, #12
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	69da      	ldr	r2, [r3, #28]
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	4013      	ands	r3, r2
 800cdc2:	683a      	ldr	r2, [r7, #0]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	d101      	bne.n	800cdcc <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800cdc8:	2301      	movs	r3, #1
 800cdca:	e000      	b.n	800cdce <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800cdcc:	2300      	movs	r3, #0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	370c      	adds	r7, #12
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr
	...

0800cddc <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800cde0:	2102      	movs	r1, #2
 800cde2:	4818      	ldr	r0, [pc, #96]	; (800ce44 <HW_IPCC_Rx_Handler+0x68>)
 800cde4:	f7ff ffe4 	bl	800cdb0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800cde8:	4603      	mov	r3, r0
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d008      	beq.n	800ce00 <HW_IPCC_Rx_Handler+0x24>
 800cdee:	4b15      	ldr	r3, [pc, #84]	; (800ce44 <HW_IPCC_Rx_Handler+0x68>)
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	f003 0302 	and.w	r3, r3, #2
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d102      	bne.n	800ce00 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800cdfa:	f000 f8d5 	bl	800cfa8 <HW_IPCC_SYS_EvtHandler>
 800cdfe:	e01e      	b.n	800ce3e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800ce00:	2101      	movs	r1, #1
 800ce02:	4810      	ldr	r0, [pc, #64]	; (800ce44 <HW_IPCC_Rx_Handler+0x68>)
 800ce04:	f7ff ffd4 	bl	800cdb0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d008      	beq.n	800ce20 <HW_IPCC_Rx_Handler+0x44>
 800ce0e:	4b0d      	ldr	r3, [pc, #52]	; (800ce44 <HW_IPCC_Rx_Handler+0x68>)
 800ce10:	685b      	ldr	r3, [r3, #4]
 800ce12:	f003 0301 	and.w	r3, r3, #1
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d102      	bne.n	800ce20 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800ce1a:	f000 f889 	bl	800cf30 <HW_IPCC_BLE_EvtHandler>
 800ce1e:	e00e      	b.n	800ce3e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800ce20:	2108      	movs	r1, #8
 800ce22:	4808      	ldr	r0, [pc, #32]	; (800ce44 <HW_IPCC_Rx_Handler+0x68>)
 800ce24:	f7ff ffc4 	bl	800cdb0 <LL_C2_IPCC_IsActiveFlag_CHx>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d008      	beq.n	800ce40 <HW_IPCC_Rx_Handler+0x64>
 800ce2e:	4b05      	ldr	r3, [pc, #20]	; (800ce44 <HW_IPCC_Rx_Handler+0x68>)
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	f003 0308 	and.w	r3, r3, #8
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d102      	bne.n	800ce40 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800ce3a:	f000 f901 	bl	800d040 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800ce3e:	bf00      	nop
 800ce40:	bf00      	nop
}
 800ce42:	bd80      	pop	{r7, pc}
 800ce44:	58000c00 	.word	0x58000c00

0800ce48 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800ce4c:	2102      	movs	r1, #2
 800ce4e:	4818      	ldr	r0, [pc, #96]	; (800ceb0 <HW_IPCC_Tx_Handler+0x68>)
 800ce50:	f7ff ff99 	bl	800cd86 <LL_C1_IPCC_IsActiveFlag_CHx>
 800ce54:	4603      	mov	r3, r0
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d108      	bne.n	800ce6c <HW_IPCC_Tx_Handler+0x24>
 800ce5a:	4b15      	ldr	r3, [pc, #84]	; (800ceb0 <HW_IPCC_Tx_Handler+0x68>)
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d102      	bne.n	800ce6c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800ce66:	f000 f893 	bl	800cf90 <HW_IPCC_SYS_CmdEvtHandler>
 800ce6a:	e01e      	b.n	800ceaa <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800ce6c:	2108      	movs	r1, #8
 800ce6e:	4810      	ldr	r0, [pc, #64]	; (800ceb0 <HW_IPCC_Tx_Handler+0x68>)
 800ce70:	f7ff ff89 	bl	800cd86 <LL_C1_IPCC_IsActiveFlag_CHx>
 800ce74:	4603      	mov	r3, r0
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d108      	bne.n	800ce8c <HW_IPCC_Tx_Handler+0x44>
 800ce7a:	4b0d      	ldr	r3, [pc, #52]	; (800ceb0 <HW_IPCC_Tx_Handler+0x68>)
 800ce7c:	685b      	ldr	r3, [r3, #4]
 800ce7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d102      	bne.n	800ce8c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800ce86:	f000 f8bd 	bl	800d004 <HW_IPCC_MM_FreeBufHandler>
 800ce8a:	e00e      	b.n	800ceaa <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800ce8c:	2120      	movs	r1, #32
 800ce8e:	4808      	ldr	r0, [pc, #32]	; (800ceb0 <HW_IPCC_Tx_Handler+0x68>)
 800ce90:	f7ff ff79 	bl	800cd86 <LL_C1_IPCC_IsActiveFlag_CHx>
 800ce94:	4603      	mov	r3, r0
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d108      	bne.n	800ceac <HW_IPCC_Tx_Handler+0x64>
 800ce9a:	4b05      	ldr	r3, [pc, #20]	; (800ceb0 <HW_IPCC_Tx_Handler+0x68>)
 800ce9c:	685b      	ldr	r3, [r3, #4]
 800ce9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d102      	bne.n	800ceac <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800cea6:	f000 f84f 	bl	800cf48 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800ceaa:	bf00      	nop
 800ceac:	bf00      	nop
}
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	58000c00 	.word	0x58000c00

0800ceb4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800ceb8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800cebc:	f7ff fed3 	bl	800cc66 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800cec0:	f44f 7000 	mov.w	r0, #512	; 0x200
 800cec4:	f7ff fea4 	bl	800cc10 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800cec8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800cecc:	f7ff fe8c 	bl	800cbe8 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800ced0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800ced2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800ced4:	f7ff fe78 	bl	800cbc8 <LL_PWR_EnableBootC2>

  return;
 800ced8:	bf00      	nop
}
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800cee0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800cee4:	f7ff fea6 	bl	800cc34 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800cee8:	4806      	ldr	r0, [pc, #24]	; (800cf04 <HW_IPCC_Init+0x28>)
 800ceea:	f7ff fee8 	bl	800ccbe <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800ceee:	4805      	ldr	r0, [pc, #20]	; (800cf04 <HW_IPCC_Init+0x28>)
 800cef0:	f7ff fed5 	bl	800cc9e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800cef4:	202c      	movs	r0, #44	; 0x2c
 800cef6:	f7f6 fbd8 	bl	80036aa <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800cefa:	202d      	movs	r0, #45	; 0x2d
 800cefc:	f7f6 fbd5 	bl	80036aa <HAL_NVIC_EnableIRQ>

  return;
 800cf00:	bf00      	nop
}
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	58000c00 	.word	0x58000c00

0800cf08 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800cf0c:	2101      	movs	r1, #1
 800cf0e:	4802      	ldr	r0, [pc, #8]	; (800cf18 <HW_IPCC_BLE_Init+0x10>)
 800cf10:	f7ff ff0a 	bl	800cd28 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800cf14:	bf00      	nop
}
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	58000c00 	.word	0x58000c00

0800cf1c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800cf20:	2101      	movs	r1, #1
 800cf22:	4802      	ldr	r0, [pc, #8]	; (800cf2c <HW_IPCC_BLE_SendCmd+0x10>)
 800cf24:	f7ff ff20 	bl	800cd68 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800cf28:	bf00      	nop
}
 800cf2a:	bd80      	pop	{r7, pc}
 800cf2c:	58000c00 	.word	0x58000c00

0800cf30 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800cf34:	f7fd fb3e 	bl	800a5b4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800cf38:	2101      	movs	r1, #1
 800cf3a:	4802      	ldr	r0, [pc, #8]	; (800cf44 <HW_IPCC_BLE_EvtHandler+0x14>)
 800cf3c:	f7ff ff06 	bl	800cd4c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800cf40:	bf00      	nop
}
 800cf42:	bd80      	pop	{r7, pc}
 800cf44:	58000c00 	.word	0x58000c00

0800cf48 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800cf4c:	2120      	movs	r1, #32
 800cf4e:	4803      	ldr	r0, [pc, #12]	; (800cf5c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800cf50:	f7ff fed8 	bl	800cd04 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800cf54:	f7fd fb5e 	bl	800a614 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800cf58:	bf00      	nop
}
 800cf5a:	bd80      	pop	{r7, pc}
 800cf5c:	58000c00 	.word	0x58000c00

0800cf60 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800cf64:	2102      	movs	r1, #2
 800cf66:	4802      	ldr	r0, [pc, #8]	; (800cf70 <HW_IPCC_SYS_Init+0x10>)
 800cf68:	f7ff fede 	bl	800cd28 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800cf6c:	bf00      	nop
}
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	58000c00 	.word	0x58000c00

0800cf74 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800cf78:	2102      	movs	r1, #2
 800cf7a:	4804      	ldr	r0, [pc, #16]	; (800cf8c <HW_IPCC_SYS_SendCmd+0x18>)
 800cf7c:	f7ff fef4 	bl	800cd68 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800cf80:	2102      	movs	r1, #2
 800cf82:	4802      	ldr	r0, [pc, #8]	; (800cf8c <HW_IPCC_SYS_SendCmd+0x18>)
 800cf84:	f7ff feab 	bl	800ccde <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800cf88:	bf00      	nop
}
 800cf8a:	bd80      	pop	{r7, pc}
 800cf8c:	58000c00 	.word	0x58000c00

0800cf90 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800cf94:	2102      	movs	r1, #2
 800cf96:	4803      	ldr	r0, [pc, #12]	; (800cfa4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800cf98:	f7ff feb4 	bl	800cd04 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800cf9c:	f7fd fb8a 	bl	800a6b4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800cfa0:	bf00      	nop
}
 800cfa2:	bd80      	pop	{r7, pc}
 800cfa4:	58000c00 	.word	0x58000c00

0800cfa8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800cfac:	f7fd fb98 	bl	800a6e0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800cfb0:	2102      	movs	r1, #2
 800cfb2:	4802      	ldr	r0, [pc, #8]	; (800cfbc <HW_IPCC_SYS_EvtHandler+0x14>)
 800cfb4:	f7ff feca 	bl	800cd4c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800cfb8:	bf00      	nop
}
 800cfba:	bd80      	pop	{r7, pc}
 800cfbc:	58000c00 	.word	0x58000c00

0800cfc0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800cfc8:	2108      	movs	r1, #8
 800cfca:	480c      	ldr	r0, [pc, #48]	; (800cffc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800cfcc:	f7ff fedb 	bl	800cd86 <LL_C1_IPCC_IsActiveFlag_CHx>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d007      	beq.n	800cfe6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800cfd6:	4a0a      	ldr	r2, [pc, #40]	; (800d000 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800cfdc:	2108      	movs	r1, #8
 800cfde:	4807      	ldr	r0, [pc, #28]	; (800cffc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800cfe0:	f7ff fe7d 	bl	800ccde <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800cfe4:	e006      	b.n	800cff4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800cfea:	2108      	movs	r1, #8
 800cfec:	4803      	ldr	r0, [pc, #12]	; (800cffc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800cfee:	f7ff febb 	bl	800cd68 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800cff2:	bf00      	nop
}
 800cff4:	3708      	adds	r7, #8
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	58000c00 	.word	0x58000c00
 800d000:	20001898 	.word	0x20001898

0800d004 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800d004:	b580      	push	{r7, lr}
 800d006:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d008:	2108      	movs	r1, #8
 800d00a:	4806      	ldr	r0, [pc, #24]	; (800d024 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d00c:	f7ff fe7a 	bl	800cd04 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800d010:	4b05      	ldr	r3, [pc, #20]	; (800d028 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d016:	2108      	movs	r1, #8
 800d018:	4802      	ldr	r0, [pc, #8]	; (800d024 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d01a:	f7ff fea5 	bl	800cd68 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d01e:	bf00      	nop
}
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	58000c00 	.word	0x58000c00
 800d028:	20001898 	.word	0x20001898

0800d02c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d030:	2108      	movs	r1, #8
 800d032:	4802      	ldr	r0, [pc, #8]	; (800d03c <HW_IPCC_TRACES_Init+0x10>)
 800d034:	f7ff fe78 	bl	800cd28 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d038:	bf00      	nop
}
 800d03a:	bd80      	pop	{r7, pc}
 800d03c:	58000c00 	.word	0x58000c00

0800d040 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800d040:	b580      	push	{r7, lr}
 800d042:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800d044:	f7fd fbf4 	bl	800a830 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d048:	2108      	movs	r1, #8
 800d04a:	4802      	ldr	r0, [pc, #8]	; (800d054 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800d04c:	f7ff fe7e 	bl	800cd4c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d050:	bf00      	nop
}
 800d052:	bd80      	pop	{r7, pc}
 800d054:	58000c00 	.word	0x58000c00

0800d058 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800d058:	b480      	push	{r7}
 800d05a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800d05c:	4b05      	ldr	r3, [pc, #20]	; (800d074 <UTIL_LPM_Init+0x1c>)
 800d05e:	2200      	movs	r2, #0
 800d060:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800d062:	4b05      	ldr	r3, [pc, #20]	; (800d078 <UTIL_LPM_Init+0x20>)
 800d064:	2200      	movs	r2, #0
 800d066:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800d068:	bf00      	nop
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr
 800d072:	bf00      	nop
 800d074:	2000189c 	.word	0x2000189c
 800d078:	200018a0 	.word	0x200018a0

0800d07c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800d07c:	b480      	push	{r7}
 800d07e:	b087      	sub	sp, #28
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	460b      	mov	r3, r1
 800d086:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d088:	f3ef 8310 	mrs	r3, PRIMASK
 800d08c:	613b      	str	r3, [r7, #16]
  return(result);
 800d08e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800d090:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d092:	b672      	cpsid	i
}
 800d094:	bf00      	nop
  
  switch(state)
 800d096:	78fb      	ldrb	r3, [r7, #3]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d008      	beq.n	800d0ae <UTIL_LPM_SetOffMode+0x32>
 800d09c:	2b01      	cmp	r3, #1
 800d09e:	d10e      	bne.n	800d0be <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800d0a0:	4b0d      	ldr	r3, [pc, #52]	; (800d0d8 <UTIL_LPM_SetOffMode+0x5c>)
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	4a0b      	ldr	r2, [pc, #44]	; (800d0d8 <UTIL_LPM_SetOffMode+0x5c>)
 800d0aa:	6013      	str	r3, [r2, #0]
      break;
 800d0ac:	e008      	b.n	800d0c0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	43da      	mvns	r2, r3
 800d0b2:	4b09      	ldr	r3, [pc, #36]	; (800d0d8 <UTIL_LPM_SetOffMode+0x5c>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4013      	ands	r3, r2
 800d0b8:	4a07      	ldr	r2, [pc, #28]	; (800d0d8 <UTIL_LPM_SetOffMode+0x5c>)
 800d0ba:	6013      	str	r3, [r2, #0]
      break;
 800d0bc:	e000      	b.n	800d0c0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800d0be:	bf00      	nop
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f383 8810 	msr	PRIMASK, r3
}
 800d0ca:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800d0cc:	bf00      	nop
 800d0ce:	371c      	adds	r7, #28
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr
 800d0d8:	200018a0 	.word	0x200018a0

0800d0dc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b090      	sub	sp, #64	; 0x40
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800d0e4:	4b73      	ldr	r3, [pc, #460]	; (800d2b4 <UTIL_SEQ_Run+0x1d8>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800d0ea:	4b72      	ldr	r3, [pc, #456]	; (800d2b4 <UTIL_SEQ_Run+0x1d8>)
 800d0ec:	681a      	ldr	r2, [r3, #0]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	4013      	ands	r3, r2
 800d0f2:	4a70      	ldr	r2, [pc, #448]	; (800d2b4 <UTIL_SEQ_Run+0x1d8>)
 800d0f4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800d0f6:	4b70      	ldr	r3, [pc, #448]	; (800d2b8 <UTIL_SEQ_Run+0x1dc>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800d0fc:	4b6f      	ldr	r3, [pc, #444]	; (800d2bc <UTIL_SEQ_Run+0x1e0>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800d102:	4b6f      	ldr	r3, [pc, #444]	; (800d2c0 <UTIL_SEQ_Run+0x1e4>)
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800d108:	4b6e      	ldr	r3, [pc, #440]	; (800d2c4 <UTIL_SEQ_Run+0x1e8>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800d10e:	e08d      	b.n	800d22c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800d110:	2300      	movs	r3, #0
 800d112:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800d114:	e002      	b.n	800d11c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800d116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d118:	3301      	adds	r3, #1
 800d11a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800d11c:	4a6a      	ldr	r2, [pc, #424]	; (800d2c8 <UTIL_SEQ_Run+0x1ec>)
 800d11e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d120:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d126:	401a      	ands	r2, r3
 800d128:	4b62      	ldr	r3, [pc, #392]	; (800d2b4 <UTIL_SEQ_Run+0x1d8>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	4013      	ands	r3, r2
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d0f1      	beq.n	800d116 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800d132:	4a65      	ldr	r2, [pc, #404]	; (800d2c8 <UTIL_SEQ_Run+0x1ec>)
 800d134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d136:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d13c:	401a      	ands	r2, r3
 800d13e:	4b5d      	ldr	r3, [pc, #372]	; (800d2b4 <UTIL_SEQ_Run+0x1d8>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	4013      	ands	r3, r2
 800d144:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800d146:	4a60      	ldr	r2, [pc, #384]	; (800d2c8 <UTIL_SEQ_Run+0x1ec>)
 800d148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d14a:	00db      	lsls	r3, r3, #3
 800d14c:	4413      	add	r3, r2
 800d14e:	685a      	ldr	r2, [r3, #4]
 800d150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d152:	4013      	ands	r3, r2
 800d154:	2b00      	cmp	r3, #0
 800d156:	d106      	bne.n	800d166 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800d158:	4a5b      	ldr	r2, [pc, #364]	; (800d2c8 <UTIL_SEQ_Run+0x1ec>)
 800d15a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d15c:	00db      	lsls	r3, r3, #3
 800d15e:	4413      	add	r3, r2
 800d160:	f04f 32ff 	mov.w	r2, #4294967295
 800d164:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800d166:	4a58      	ldr	r2, [pc, #352]	; (800d2c8 <UTIL_SEQ_Run+0x1ec>)
 800d168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d16a:	00db      	lsls	r3, r3, #3
 800d16c:	4413      	add	r3, r2
 800d16e:	685a      	ldr	r2, [r3, #4]
 800d170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d172:	4013      	ands	r3, r2
 800d174:	4618      	mov	r0, r3
 800d176:	f000 f9b3 	bl	800d4e0 <SEQ_BitPosition>
 800d17a:	4603      	mov	r3, r0
 800d17c:	461a      	mov	r2, r3
 800d17e:	4b53      	ldr	r3, [pc, #332]	; (800d2cc <UTIL_SEQ_Run+0x1f0>)
 800d180:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800d182:	4a51      	ldr	r2, [pc, #324]	; (800d2c8 <UTIL_SEQ_Run+0x1ec>)
 800d184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d186:	00db      	lsls	r3, r3, #3
 800d188:	4413      	add	r3, r2
 800d18a:	685a      	ldr	r2, [r3, #4]
 800d18c:	4b4f      	ldr	r3, [pc, #316]	; (800d2cc <UTIL_SEQ_Run+0x1f0>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	2101      	movs	r1, #1
 800d192:	fa01 f303 	lsl.w	r3, r1, r3
 800d196:	43db      	mvns	r3, r3
 800d198:	401a      	ands	r2, r3
 800d19a:	494b      	ldr	r1, [pc, #300]	; (800d2c8 <UTIL_SEQ_Run+0x1ec>)
 800d19c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d19e:	00db      	lsls	r3, r3, #3
 800d1a0:	440b      	add	r3, r1
 800d1a2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1a4:	f3ef 8310 	mrs	r3, PRIMASK
 800d1a8:	61bb      	str	r3, [r7, #24]
  return(result);
 800d1aa:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d1ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800d1ae:	b672      	cpsid	i
}
 800d1b0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800d1b2:	4b46      	ldr	r3, [pc, #280]	; (800d2cc <UTIL_SEQ_Run+0x1f0>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d1bc:	43da      	mvns	r2, r3
 800d1be:	4b3e      	ldr	r3, [pc, #248]	; (800d2b8 <UTIL_SEQ_Run+0x1dc>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	4013      	ands	r3, r2
 800d1c4:	4a3c      	ldr	r2, [pc, #240]	; (800d2b8 <UTIL_SEQ_Run+0x1dc>)
 800d1c6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d1c8:	2302      	movs	r3, #2
 800d1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1cc:	e013      	b.n	800d1f6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800d1ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1d0:	3b01      	subs	r3, #1
 800d1d2:	4a3d      	ldr	r2, [pc, #244]	; (800d2c8 <UTIL_SEQ_Run+0x1ec>)
 800d1d4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800d1d8:	4b3c      	ldr	r3, [pc, #240]	; (800d2cc <UTIL_SEQ_Run+0x1f0>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	2201      	movs	r2, #1
 800d1de:	fa02 f303 	lsl.w	r3, r2, r3
 800d1e2:	43da      	mvns	r2, r3
 800d1e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1e6:	3b01      	subs	r3, #1
 800d1e8:	400a      	ands	r2, r1
 800d1ea:	4937      	ldr	r1, [pc, #220]	; (800d2c8 <UTIL_SEQ_Run+0x1ec>)
 800d1ec:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d1f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1f2:	3b01      	subs	r3, #1
 800d1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d1f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d1e8      	bne.n	800d1ce <UTIL_SEQ_Run+0xf2>
 800d1fc:	6a3b      	ldr	r3, [r7, #32]
 800d1fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	f383 8810 	msr	PRIMASK, r3
}
 800d206:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800d208:	4b30      	ldr	r3, [pc, #192]	; (800d2cc <UTIL_SEQ_Run+0x1f0>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4a30      	ldr	r2, [pc, #192]	; (800d2d0 <UTIL_SEQ_Run+0x1f4>)
 800d20e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d212:	4798      	blx	r3

    local_taskset = TaskSet;
 800d214:	4b28      	ldr	r3, [pc, #160]	; (800d2b8 <UTIL_SEQ_Run+0x1dc>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800d21a:	4b28      	ldr	r3, [pc, #160]	; (800d2bc <UTIL_SEQ_Run+0x1e0>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800d220:	4b27      	ldr	r3, [pc, #156]	; (800d2c0 <UTIL_SEQ_Run+0x1e4>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800d226:	4b27      	ldr	r3, [pc, #156]	; (800d2c4 <UTIL_SEQ_Run+0x1e8>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800d22c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d230:	401a      	ands	r2, r3
 800d232:	4b20      	ldr	r3, [pc, #128]	; (800d2b4 <UTIL_SEQ_Run+0x1d8>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	4013      	ands	r3, r2
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d005      	beq.n	800d248 <UTIL_SEQ_Run+0x16c>
 800d23c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d240:	4013      	ands	r3, r2
 800d242:	2b00      	cmp	r3, #0
 800d244:	f43f af64 	beq.w	800d110 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800d248:	4b20      	ldr	r3, [pc, #128]	; (800d2cc <UTIL_SEQ_Run+0x1f0>)
 800d24a:	f04f 32ff 	mov.w	r2, #4294967295
 800d24e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800d250:	f000 f938 	bl	800d4c4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d254:	f3ef 8310 	mrs	r3, PRIMASK
 800d258:	613b      	str	r3, [r7, #16]
  return(result);
 800d25a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800d25c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d25e:	b672      	cpsid	i
}
 800d260:	bf00      	nop
  local_taskset = TaskSet;
 800d262:	4b15      	ldr	r3, [pc, #84]	; (800d2b8 <UTIL_SEQ_Run+0x1dc>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800d268:	4b14      	ldr	r3, [pc, #80]	; (800d2bc <UTIL_SEQ_Run+0x1e0>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800d26e:	4b14      	ldr	r3, [pc, #80]	; (800d2c0 <UTIL_SEQ_Run+0x1e4>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800d274:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d278:	401a      	ands	r2, r3
 800d27a:	4b0e      	ldr	r3, [pc, #56]	; (800d2b4 <UTIL_SEQ_Run+0x1d8>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	4013      	ands	r3, r2
 800d280:	2b00      	cmp	r3, #0
 800d282:	d107      	bne.n	800d294 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800d284:	4b0f      	ldr	r3, [pc, #60]	; (800d2c4 <UTIL_SEQ_Run+0x1e8>)
 800d286:	681a      	ldr	r2, [r3, #0]
 800d288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d28a:	4013      	ands	r3, r2
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d101      	bne.n	800d294 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800d290:	f7f4 f9ba 	bl	8001608 <UTIL_SEQ_Idle>
 800d294:	69fb      	ldr	r3, [r7, #28]
 800d296:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f383 8810 	msr	PRIMASK, r3
}
 800d29e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800d2a0:	f000 f917 	bl	800d4d2 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800d2a4:	4a03      	ldr	r2, [pc, #12]	; (800d2b4 <UTIL_SEQ_Run+0x1d8>)
 800d2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a8:	6013      	str	r3, [r2, #0]

  return;
 800d2aa:	bf00      	nop
}
 800d2ac:	3740      	adds	r7, #64	; 0x40
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop
 800d2b4:	20000034 	.word	0x20000034
 800d2b8:	200018a4 	.word	0x200018a4
 800d2bc:	200018a8 	.word	0x200018a8
 800d2c0:	20000030 	.word	0x20000030
 800d2c4:	200018ac 	.word	0x200018ac
 800d2c8:	20001934 	.word	0x20001934
 800d2cc:	200018b0 	.word	0x200018b0
 800d2d0:	200018b4 	.word	0x200018b4

0800d2d4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b088      	sub	sp, #32
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	60f8      	str	r0, [r7, #12]
 800d2dc:	60b9      	str	r1, [r7, #8]
 800d2de:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d2e0:	f3ef 8310 	mrs	r3, PRIMASK
 800d2e4:	617b      	str	r3, [r7, #20]
  return(result);
 800d2e6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800d2e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d2ea:	b672      	cpsid	i
}
 800d2ec:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800d2ee:	68f8      	ldr	r0, [r7, #12]
 800d2f0:	f000 f8f6 	bl	800d4e0 <SEQ_BitPosition>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	4619      	mov	r1, r3
 800d2f8:	4a06      	ldr	r2, [pc, #24]	; (800d314 <UTIL_SEQ_RegTask+0x40>)
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d300:	69fb      	ldr	r3, [r7, #28]
 800d302:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d304:	69bb      	ldr	r3, [r7, #24]
 800d306:	f383 8810 	msr	PRIMASK, r3
}
 800d30a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800d30c:	bf00      	nop
}
 800d30e:	3720      	adds	r7, #32
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}
 800d314:	200018b4 	.word	0x200018b4

0800d318 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800d318:	b480      	push	{r7}
 800d31a:	b087      	sub	sp, #28
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d322:	f3ef 8310 	mrs	r3, PRIMASK
 800d326:	60fb      	str	r3, [r7, #12]
  return(result);
 800d328:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d32a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d32c:	b672      	cpsid	i
}
 800d32e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800d330:	4b0d      	ldr	r3, [pc, #52]	; (800d368 <UTIL_SEQ_SetTask+0x50>)
 800d332:	681a      	ldr	r2, [r3, #0]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	4313      	orrs	r3, r2
 800d338:	4a0b      	ldr	r2, [pc, #44]	; (800d368 <UTIL_SEQ_SetTask+0x50>)
 800d33a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800d33c:	4a0b      	ldr	r2, [pc, #44]	; (800d36c <UTIL_SEQ_SetTask+0x54>)
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	431a      	orrs	r2, r3
 800d348:	4908      	ldr	r1, [pc, #32]	; (800d36c <UTIL_SEQ_SetTask+0x54>)
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	f383 8810 	msr	PRIMASK, r3
}
 800d35a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d35c:	bf00      	nop
}
 800d35e:	371c      	adds	r7, #28
 800d360:	46bd      	mov	sp, r7
 800d362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d366:	4770      	bx	lr
 800d368:	200018a4 	.word	0x200018a4
 800d36c:	20001934 	.word	0x20001934

0800d370 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800d370:	b480      	push	{r7}
 800d372:	b087      	sub	sp, #28
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d378:	f3ef 8310 	mrs	r3, PRIMASK
 800d37c:	60fb      	str	r3, [r7, #12]
  return(result);
 800d37e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d380:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d382:	b672      	cpsid	i
}
 800d384:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	43da      	mvns	r2, r3
 800d38a:	4b08      	ldr	r3, [pc, #32]	; (800d3ac <UTIL_SEQ_PauseTask+0x3c>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4013      	ands	r3, r2
 800d390:	4a06      	ldr	r2, [pc, #24]	; (800d3ac <UTIL_SEQ_PauseTask+0x3c>)
 800d392:	6013      	str	r3, [r2, #0]
 800d394:	697b      	ldr	r3, [r7, #20]
 800d396:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d398:	693b      	ldr	r3, [r7, #16]
 800d39a:	f383 8810 	msr	PRIMASK, r3
}
 800d39e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d3a0:	bf00      	nop
}
 800d3a2:	371c      	adds	r7, #28
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3aa:	4770      	bx	lr
 800d3ac:	20000030 	.word	0x20000030

0800d3b0 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b087      	sub	sp, #28
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3b8:	f3ef 8310 	mrs	r3, PRIMASK
 800d3bc:	60fb      	str	r3, [r7, #12]
  return(result);
 800d3be:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d3c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d3c2:	b672      	cpsid	i
}
 800d3c4:	bf00      	nop

  TaskMask |= TaskId_bm;
 800d3c6:	4b09      	ldr	r3, [pc, #36]	; (800d3ec <UTIL_SEQ_ResumeTask+0x3c>)
 800d3c8:	681a      	ldr	r2, [r3, #0]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	4a07      	ldr	r2, [pc, #28]	; (800d3ec <UTIL_SEQ_ResumeTask+0x3c>)
 800d3d0:	6013      	str	r3, [r2, #0]
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	f383 8810 	msr	PRIMASK, r3
}
 800d3dc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d3de:	bf00      	nop
}
 800d3e0:	371c      	adds	r7, #28
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e8:	4770      	bx	lr
 800d3ea:	bf00      	nop
 800d3ec:	20000030 	.word	0x20000030

0800d3f0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b087      	sub	sp, #28
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3f8:	f3ef 8310 	mrs	r3, PRIMASK
 800d3fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d400:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d402:	b672      	cpsid	i
}
 800d404:	bf00      	nop

  EvtSet |= EvtId_bm;
 800d406:	4b09      	ldr	r3, [pc, #36]	; (800d42c <UTIL_SEQ_SetEvt+0x3c>)
 800d408:	681a      	ldr	r2, [r3, #0]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	4313      	orrs	r3, r2
 800d40e:	4a07      	ldr	r2, [pc, #28]	; (800d42c <UTIL_SEQ_SetEvt+0x3c>)
 800d410:	6013      	str	r3, [r2, #0]
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	f383 8810 	msr	PRIMASK, r3
}
 800d41c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d41e:	bf00      	nop
}
 800d420:	371c      	adds	r7, #28
 800d422:	46bd      	mov	sp, r7
 800d424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d428:	4770      	bx	lr
 800d42a:	bf00      	nop
 800d42c:	200018a8 	.word	0x200018a8

0800d430 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b088      	sub	sp, #32
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800d438:	4b1f      	ldr	r3, [pc, #124]	; (800d4b8 <UTIL_SEQ_WaitEvt+0x88>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800d43e:	4b1e      	ldr	r3, [pc, #120]	; (800d4b8 <UTIL_SEQ_WaitEvt+0x88>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d446:	d102      	bne.n	800d44e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800d448:	2300      	movs	r3, #0
 800d44a:	61fb      	str	r3, [r7, #28]
 800d44c:	e005      	b.n	800d45a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800d44e:	4b1a      	ldr	r3, [pc, #104]	; (800d4b8 <UTIL_SEQ_WaitEvt+0x88>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	2201      	movs	r2, #1
 800d454:	fa02 f303 	lsl.w	r3, r2, r3
 800d458:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800d45a:	4b18      	ldr	r3, [pc, #96]	; (800d4bc <UTIL_SEQ_WaitEvt+0x8c>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800d460:	4a16      	ldr	r2, [pc, #88]	; (800d4bc <UTIL_SEQ_WaitEvt+0x8c>)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800d466:	e003      	b.n	800d470 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800d468:	6879      	ldr	r1, [r7, #4]
 800d46a:	69f8      	ldr	r0, [r7, #28]
 800d46c:	f7f4 f8d3 	bl	8001616 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800d470:	4b13      	ldr	r3, [pc, #76]	; (800d4c0 <UTIL_SEQ_WaitEvt+0x90>)
 800d472:	681a      	ldr	r2, [r3, #0]
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	4013      	ands	r3, r2
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d0f5      	beq.n	800d468 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800d47c:	4a0e      	ldr	r2, [pc, #56]	; (800d4b8 <UTIL_SEQ_WaitEvt+0x88>)
 800d47e:	69bb      	ldr	r3, [r7, #24]
 800d480:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d482:	f3ef 8310 	mrs	r3, PRIMASK
 800d486:	60bb      	str	r3, [r7, #8]
  return(result);
 800d488:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d48a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d48c:	b672      	cpsid	i
}
 800d48e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	43da      	mvns	r2, r3
 800d494:	4b0a      	ldr	r3, [pc, #40]	; (800d4c0 <UTIL_SEQ_WaitEvt+0x90>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4013      	ands	r3, r2
 800d49a:	4a09      	ldr	r2, [pc, #36]	; (800d4c0 <UTIL_SEQ_WaitEvt+0x90>)
 800d49c:	6013      	str	r3, [r2, #0]
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	f383 8810 	msr	PRIMASK, r3
}
 800d4a8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800d4aa:	4a04      	ldr	r2, [pc, #16]	; (800d4bc <UTIL_SEQ_WaitEvt+0x8c>)
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	6013      	str	r3, [r2, #0]
  return;
 800d4b0:	bf00      	nop
}
 800d4b2:	3720      	adds	r7, #32
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}
 800d4b8:	200018b0 	.word	0x200018b0
 800d4bc:	200018ac 	.word	0x200018ac
 800d4c0:	200018a8 	.word	0x200018a8

0800d4c4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d4c8:	bf00      	nop
}
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d0:	4770      	bx	lr

0800d4d2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800d4d2:	b480      	push	{r7}
 800d4d4:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d4d6:	bf00      	nop
}
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr

0800d4e0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b085      	sub	sp, #20
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	0c1b      	lsrs	r3, r3, #16
 800d4f4:	041b      	lsls	r3, r3, #16
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d104      	bne.n	800d504 <SEQ_BitPosition+0x24>
 800d4fa:	2310      	movs	r3, #16
 800d4fc:	73fb      	strb	r3, [r7, #15]
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	041b      	lsls	r3, r3, #16
 800d502:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d105      	bne.n	800d51a <SEQ_BitPosition+0x3a>
 800d50e:	7bfb      	ldrb	r3, [r7, #15]
 800d510:	3308      	adds	r3, #8
 800d512:	73fb      	strb	r3, [r7, #15]
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	021b      	lsls	r3, r3, #8
 800d518:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d520:	2b00      	cmp	r3, #0
 800d522:	d105      	bne.n	800d530 <SEQ_BitPosition+0x50>
 800d524:	7bfb      	ldrb	r3, [r7, #15]
 800d526:	3304      	adds	r3, #4
 800d528:	73fb      	strb	r3, [r7, #15]
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	011b      	lsls	r3, r3, #4
 800d52e:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800d530:	68bb      	ldr	r3, [r7, #8]
 800d532:	0f1b      	lsrs	r3, r3, #28
 800d534:	4a07      	ldr	r2, [pc, #28]	; (800d554 <SEQ_BitPosition+0x74>)
 800d536:	5cd2      	ldrb	r2, [r2, r3]
 800d538:	7bfb      	ldrb	r3, [r7, #15]
 800d53a:	4413      	add	r3, r2
 800d53c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800d53e:	7bfb      	ldrb	r3, [r7, #15]
 800d540:	f1c3 031f 	rsb	r3, r3, #31
 800d544:	b2db      	uxtb	r3, r3
}
 800d546:	4618      	mov	r0, r3
 800d548:	3714      	adds	r7, #20
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr
 800d552:	bf00      	nop
 800d554:	0800fd2c 	.word	0x0800fd2c

0800d558 <std>:
 800d558:	2300      	movs	r3, #0
 800d55a:	b510      	push	{r4, lr}
 800d55c:	4604      	mov	r4, r0
 800d55e:	e9c0 3300 	strd	r3, r3, [r0]
 800d562:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d566:	6083      	str	r3, [r0, #8]
 800d568:	8181      	strh	r1, [r0, #12]
 800d56a:	6643      	str	r3, [r0, #100]	; 0x64
 800d56c:	81c2      	strh	r2, [r0, #14]
 800d56e:	6183      	str	r3, [r0, #24]
 800d570:	4619      	mov	r1, r3
 800d572:	2208      	movs	r2, #8
 800d574:	305c      	adds	r0, #92	; 0x5c
 800d576:	f000 f9ff 	bl	800d978 <memset>
 800d57a:	4b0d      	ldr	r3, [pc, #52]	; (800d5b0 <std+0x58>)
 800d57c:	6263      	str	r3, [r4, #36]	; 0x24
 800d57e:	4b0d      	ldr	r3, [pc, #52]	; (800d5b4 <std+0x5c>)
 800d580:	62a3      	str	r3, [r4, #40]	; 0x28
 800d582:	4b0d      	ldr	r3, [pc, #52]	; (800d5b8 <std+0x60>)
 800d584:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d586:	4b0d      	ldr	r3, [pc, #52]	; (800d5bc <std+0x64>)
 800d588:	6323      	str	r3, [r4, #48]	; 0x30
 800d58a:	4b0d      	ldr	r3, [pc, #52]	; (800d5c0 <std+0x68>)
 800d58c:	6224      	str	r4, [r4, #32]
 800d58e:	429c      	cmp	r4, r3
 800d590:	d006      	beq.n	800d5a0 <std+0x48>
 800d592:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d596:	4294      	cmp	r4, r2
 800d598:	d002      	beq.n	800d5a0 <std+0x48>
 800d59a:	33d0      	adds	r3, #208	; 0xd0
 800d59c:	429c      	cmp	r4, r3
 800d59e:	d105      	bne.n	800d5ac <std+0x54>
 800d5a0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d5a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5a8:	f000 ba76 	b.w	800da98 <__retarget_lock_init_recursive>
 800d5ac:	bd10      	pop	{r4, pc}
 800d5ae:	bf00      	nop
 800d5b0:	0800d7c9 	.word	0x0800d7c9
 800d5b4:	0800d7eb 	.word	0x0800d7eb
 800d5b8:	0800d823 	.word	0x0800d823
 800d5bc:	0800d847 	.word	0x0800d847
 800d5c0:	20001944 	.word	0x20001944

0800d5c4 <stdio_exit_handler>:
 800d5c4:	4a02      	ldr	r2, [pc, #8]	; (800d5d0 <stdio_exit_handler+0xc>)
 800d5c6:	4903      	ldr	r1, [pc, #12]	; (800d5d4 <stdio_exit_handler+0x10>)
 800d5c8:	4803      	ldr	r0, [pc, #12]	; (800d5d8 <stdio_exit_handler+0x14>)
 800d5ca:	f000 b869 	b.w	800d6a0 <_fwalk_sglue>
 800d5ce:	bf00      	nop
 800d5d0:	20000038 	.word	0x20000038
 800d5d4:	0800e361 	.word	0x0800e361
 800d5d8:	20000044 	.word	0x20000044

0800d5dc <cleanup_stdio>:
 800d5dc:	6841      	ldr	r1, [r0, #4]
 800d5de:	4b0c      	ldr	r3, [pc, #48]	; (800d610 <cleanup_stdio+0x34>)
 800d5e0:	4299      	cmp	r1, r3
 800d5e2:	b510      	push	{r4, lr}
 800d5e4:	4604      	mov	r4, r0
 800d5e6:	d001      	beq.n	800d5ec <cleanup_stdio+0x10>
 800d5e8:	f000 feba 	bl	800e360 <_fflush_r>
 800d5ec:	68a1      	ldr	r1, [r4, #8]
 800d5ee:	4b09      	ldr	r3, [pc, #36]	; (800d614 <cleanup_stdio+0x38>)
 800d5f0:	4299      	cmp	r1, r3
 800d5f2:	d002      	beq.n	800d5fa <cleanup_stdio+0x1e>
 800d5f4:	4620      	mov	r0, r4
 800d5f6:	f000 feb3 	bl	800e360 <_fflush_r>
 800d5fa:	68e1      	ldr	r1, [r4, #12]
 800d5fc:	4b06      	ldr	r3, [pc, #24]	; (800d618 <cleanup_stdio+0x3c>)
 800d5fe:	4299      	cmp	r1, r3
 800d600:	d004      	beq.n	800d60c <cleanup_stdio+0x30>
 800d602:	4620      	mov	r0, r4
 800d604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d608:	f000 beaa 	b.w	800e360 <_fflush_r>
 800d60c:	bd10      	pop	{r4, pc}
 800d60e:	bf00      	nop
 800d610:	20001944 	.word	0x20001944
 800d614:	200019ac 	.word	0x200019ac
 800d618:	20001a14 	.word	0x20001a14

0800d61c <global_stdio_init.part.0>:
 800d61c:	b510      	push	{r4, lr}
 800d61e:	4b0b      	ldr	r3, [pc, #44]	; (800d64c <global_stdio_init.part.0+0x30>)
 800d620:	4c0b      	ldr	r4, [pc, #44]	; (800d650 <global_stdio_init.part.0+0x34>)
 800d622:	4a0c      	ldr	r2, [pc, #48]	; (800d654 <global_stdio_init.part.0+0x38>)
 800d624:	601a      	str	r2, [r3, #0]
 800d626:	4620      	mov	r0, r4
 800d628:	2200      	movs	r2, #0
 800d62a:	2104      	movs	r1, #4
 800d62c:	f7ff ff94 	bl	800d558 <std>
 800d630:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d634:	2201      	movs	r2, #1
 800d636:	2109      	movs	r1, #9
 800d638:	f7ff ff8e 	bl	800d558 <std>
 800d63c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d640:	2202      	movs	r2, #2
 800d642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d646:	2112      	movs	r1, #18
 800d648:	f7ff bf86 	b.w	800d558 <std>
 800d64c:	20001a7c 	.word	0x20001a7c
 800d650:	20001944 	.word	0x20001944
 800d654:	0800d5c5 	.word	0x0800d5c5

0800d658 <__sfp_lock_acquire>:
 800d658:	4801      	ldr	r0, [pc, #4]	; (800d660 <__sfp_lock_acquire+0x8>)
 800d65a:	f000 ba1e 	b.w	800da9a <__retarget_lock_acquire_recursive>
 800d65e:	bf00      	nop
 800d660:	20001a85 	.word	0x20001a85

0800d664 <__sfp_lock_release>:
 800d664:	4801      	ldr	r0, [pc, #4]	; (800d66c <__sfp_lock_release+0x8>)
 800d666:	f000 ba19 	b.w	800da9c <__retarget_lock_release_recursive>
 800d66a:	bf00      	nop
 800d66c:	20001a85 	.word	0x20001a85

0800d670 <__sinit>:
 800d670:	b510      	push	{r4, lr}
 800d672:	4604      	mov	r4, r0
 800d674:	f7ff fff0 	bl	800d658 <__sfp_lock_acquire>
 800d678:	6a23      	ldr	r3, [r4, #32]
 800d67a:	b11b      	cbz	r3, 800d684 <__sinit+0x14>
 800d67c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d680:	f7ff bff0 	b.w	800d664 <__sfp_lock_release>
 800d684:	4b04      	ldr	r3, [pc, #16]	; (800d698 <__sinit+0x28>)
 800d686:	6223      	str	r3, [r4, #32]
 800d688:	4b04      	ldr	r3, [pc, #16]	; (800d69c <__sinit+0x2c>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d1f5      	bne.n	800d67c <__sinit+0xc>
 800d690:	f7ff ffc4 	bl	800d61c <global_stdio_init.part.0>
 800d694:	e7f2      	b.n	800d67c <__sinit+0xc>
 800d696:	bf00      	nop
 800d698:	0800d5dd 	.word	0x0800d5dd
 800d69c:	20001a7c 	.word	0x20001a7c

0800d6a0 <_fwalk_sglue>:
 800d6a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6a4:	4607      	mov	r7, r0
 800d6a6:	4688      	mov	r8, r1
 800d6a8:	4614      	mov	r4, r2
 800d6aa:	2600      	movs	r6, #0
 800d6ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d6b0:	f1b9 0901 	subs.w	r9, r9, #1
 800d6b4:	d505      	bpl.n	800d6c2 <_fwalk_sglue+0x22>
 800d6b6:	6824      	ldr	r4, [r4, #0]
 800d6b8:	2c00      	cmp	r4, #0
 800d6ba:	d1f7      	bne.n	800d6ac <_fwalk_sglue+0xc>
 800d6bc:	4630      	mov	r0, r6
 800d6be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6c2:	89ab      	ldrh	r3, [r5, #12]
 800d6c4:	2b01      	cmp	r3, #1
 800d6c6:	d907      	bls.n	800d6d8 <_fwalk_sglue+0x38>
 800d6c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	d003      	beq.n	800d6d8 <_fwalk_sglue+0x38>
 800d6d0:	4629      	mov	r1, r5
 800d6d2:	4638      	mov	r0, r7
 800d6d4:	47c0      	blx	r8
 800d6d6:	4306      	orrs	r6, r0
 800d6d8:	3568      	adds	r5, #104	; 0x68
 800d6da:	e7e9      	b.n	800d6b0 <_fwalk_sglue+0x10>

0800d6dc <iprintf>:
 800d6dc:	b40f      	push	{r0, r1, r2, r3}
 800d6de:	b507      	push	{r0, r1, r2, lr}
 800d6e0:	4906      	ldr	r1, [pc, #24]	; (800d6fc <iprintf+0x20>)
 800d6e2:	ab04      	add	r3, sp, #16
 800d6e4:	6808      	ldr	r0, [r1, #0]
 800d6e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6ea:	6881      	ldr	r1, [r0, #8]
 800d6ec:	9301      	str	r3, [sp, #4]
 800d6ee:	f000 fb07 	bl	800dd00 <_vfiprintf_r>
 800d6f2:	b003      	add	sp, #12
 800d6f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6f8:	b004      	add	sp, #16
 800d6fa:	4770      	bx	lr
 800d6fc:	20000090 	.word	0x20000090

0800d700 <putchar>:
 800d700:	4b02      	ldr	r3, [pc, #8]	; (800d70c <putchar+0xc>)
 800d702:	4601      	mov	r1, r0
 800d704:	6818      	ldr	r0, [r3, #0]
 800d706:	6882      	ldr	r2, [r0, #8]
 800d708:	f000 beb4 	b.w	800e474 <_putc_r>
 800d70c:	20000090 	.word	0x20000090

0800d710 <_puts_r>:
 800d710:	6a03      	ldr	r3, [r0, #32]
 800d712:	b570      	push	{r4, r5, r6, lr}
 800d714:	6884      	ldr	r4, [r0, #8]
 800d716:	4605      	mov	r5, r0
 800d718:	460e      	mov	r6, r1
 800d71a:	b90b      	cbnz	r3, 800d720 <_puts_r+0x10>
 800d71c:	f7ff ffa8 	bl	800d670 <__sinit>
 800d720:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d722:	07db      	lsls	r3, r3, #31
 800d724:	d405      	bmi.n	800d732 <_puts_r+0x22>
 800d726:	89a3      	ldrh	r3, [r4, #12]
 800d728:	0598      	lsls	r0, r3, #22
 800d72a:	d402      	bmi.n	800d732 <_puts_r+0x22>
 800d72c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d72e:	f000 f9b4 	bl	800da9a <__retarget_lock_acquire_recursive>
 800d732:	89a3      	ldrh	r3, [r4, #12]
 800d734:	0719      	lsls	r1, r3, #28
 800d736:	d513      	bpl.n	800d760 <_puts_r+0x50>
 800d738:	6923      	ldr	r3, [r4, #16]
 800d73a:	b18b      	cbz	r3, 800d760 <_puts_r+0x50>
 800d73c:	3e01      	subs	r6, #1
 800d73e:	68a3      	ldr	r3, [r4, #8]
 800d740:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d744:	3b01      	subs	r3, #1
 800d746:	60a3      	str	r3, [r4, #8]
 800d748:	b9e9      	cbnz	r1, 800d786 <_puts_r+0x76>
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	da2e      	bge.n	800d7ac <_puts_r+0x9c>
 800d74e:	4622      	mov	r2, r4
 800d750:	210a      	movs	r1, #10
 800d752:	4628      	mov	r0, r5
 800d754:	f000 f87b 	bl	800d84e <__swbuf_r>
 800d758:	3001      	adds	r0, #1
 800d75a:	d007      	beq.n	800d76c <_puts_r+0x5c>
 800d75c:	250a      	movs	r5, #10
 800d75e:	e007      	b.n	800d770 <_puts_r+0x60>
 800d760:	4621      	mov	r1, r4
 800d762:	4628      	mov	r0, r5
 800d764:	f000 f8b0 	bl	800d8c8 <__swsetup_r>
 800d768:	2800      	cmp	r0, #0
 800d76a:	d0e7      	beq.n	800d73c <_puts_r+0x2c>
 800d76c:	f04f 35ff 	mov.w	r5, #4294967295
 800d770:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d772:	07da      	lsls	r2, r3, #31
 800d774:	d405      	bmi.n	800d782 <_puts_r+0x72>
 800d776:	89a3      	ldrh	r3, [r4, #12]
 800d778:	059b      	lsls	r3, r3, #22
 800d77a:	d402      	bmi.n	800d782 <_puts_r+0x72>
 800d77c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d77e:	f000 f98d 	bl	800da9c <__retarget_lock_release_recursive>
 800d782:	4628      	mov	r0, r5
 800d784:	bd70      	pop	{r4, r5, r6, pc}
 800d786:	2b00      	cmp	r3, #0
 800d788:	da04      	bge.n	800d794 <_puts_r+0x84>
 800d78a:	69a2      	ldr	r2, [r4, #24]
 800d78c:	429a      	cmp	r2, r3
 800d78e:	dc06      	bgt.n	800d79e <_puts_r+0x8e>
 800d790:	290a      	cmp	r1, #10
 800d792:	d004      	beq.n	800d79e <_puts_r+0x8e>
 800d794:	6823      	ldr	r3, [r4, #0]
 800d796:	1c5a      	adds	r2, r3, #1
 800d798:	6022      	str	r2, [r4, #0]
 800d79a:	7019      	strb	r1, [r3, #0]
 800d79c:	e7cf      	b.n	800d73e <_puts_r+0x2e>
 800d79e:	4622      	mov	r2, r4
 800d7a0:	4628      	mov	r0, r5
 800d7a2:	f000 f854 	bl	800d84e <__swbuf_r>
 800d7a6:	3001      	adds	r0, #1
 800d7a8:	d1c9      	bne.n	800d73e <_puts_r+0x2e>
 800d7aa:	e7df      	b.n	800d76c <_puts_r+0x5c>
 800d7ac:	6823      	ldr	r3, [r4, #0]
 800d7ae:	250a      	movs	r5, #10
 800d7b0:	1c5a      	adds	r2, r3, #1
 800d7b2:	6022      	str	r2, [r4, #0]
 800d7b4:	701d      	strb	r5, [r3, #0]
 800d7b6:	e7db      	b.n	800d770 <_puts_r+0x60>

0800d7b8 <puts>:
 800d7b8:	4b02      	ldr	r3, [pc, #8]	; (800d7c4 <puts+0xc>)
 800d7ba:	4601      	mov	r1, r0
 800d7bc:	6818      	ldr	r0, [r3, #0]
 800d7be:	f7ff bfa7 	b.w	800d710 <_puts_r>
 800d7c2:	bf00      	nop
 800d7c4:	20000090 	.word	0x20000090

0800d7c8 <__sread>:
 800d7c8:	b510      	push	{r4, lr}
 800d7ca:	460c      	mov	r4, r1
 800d7cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7d0:	f000 f914 	bl	800d9fc <_read_r>
 800d7d4:	2800      	cmp	r0, #0
 800d7d6:	bfab      	itete	ge
 800d7d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d7da:	89a3      	ldrhlt	r3, [r4, #12]
 800d7dc:	181b      	addge	r3, r3, r0
 800d7de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d7e2:	bfac      	ite	ge
 800d7e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d7e6:	81a3      	strhlt	r3, [r4, #12]
 800d7e8:	bd10      	pop	{r4, pc}

0800d7ea <__swrite>:
 800d7ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7ee:	461f      	mov	r7, r3
 800d7f0:	898b      	ldrh	r3, [r1, #12]
 800d7f2:	05db      	lsls	r3, r3, #23
 800d7f4:	4605      	mov	r5, r0
 800d7f6:	460c      	mov	r4, r1
 800d7f8:	4616      	mov	r6, r2
 800d7fa:	d505      	bpl.n	800d808 <__swrite+0x1e>
 800d7fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d800:	2302      	movs	r3, #2
 800d802:	2200      	movs	r2, #0
 800d804:	f000 f8e8 	bl	800d9d8 <_lseek_r>
 800d808:	89a3      	ldrh	r3, [r4, #12]
 800d80a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d80e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d812:	81a3      	strh	r3, [r4, #12]
 800d814:	4632      	mov	r2, r6
 800d816:	463b      	mov	r3, r7
 800d818:	4628      	mov	r0, r5
 800d81a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d81e:	f000 b8ff 	b.w	800da20 <_write_r>

0800d822 <__sseek>:
 800d822:	b510      	push	{r4, lr}
 800d824:	460c      	mov	r4, r1
 800d826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d82a:	f000 f8d5 	bl	800d9d8 <_lseek_r>
 800d82e:	1c43      	adds	r3, r0, #1
 800d830:	89a3      	ldrh	r3, [r4, #12]
 800d832:	bf15      	itete	ne
 800d834:	6560      	strne	r0, [r4, #84]	; 0x54
 800d836:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d83a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d83e:	81a3      	strheq	r3, [r4, #12]
 800d840:	bf18      	it	ne
 800d842:	81a3      	strhne	r3, [r4, #12]
 800d844:	bd10      	pop	{r4, pc}

0800d846 <__sclose>:
 800d846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d84a:	f000 b8b5 	b.w	800d9b8 <_close_r>

0800d84e <__swbuf_r>:
 800d84e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d850:	460e      	mov	r6, r1
 800d852:	4614      	mov	r4, r2
 800d854:	4605      	mov	r5, r0
 800d856:	b118      	cbz	r0, 800d860 <__swbuf_r+0x12>
 800d858:	6a03      	ldr	r3, [r0, #32]
 800d85a:	b90b      	cbnz	r3, 800d860 <__swbuf_r+0x12>
 800d85c:	f7ff ff08 	bl	800d670 <__sinit>
 800d860:	69a3      	ldr	r3, [r4, #24]
 800d862:	60a3      	str	r3, [r4, #8]
 800d864:	89a3      	ldrh	r3, [r4, #12]
 800d866:	071a      	lsls	r2, r3, #28
 800d868:	d525      	bpl.n	800d8b6 <__swbuf_r+0x68>
 800d86a:	6923      	ldr	r3, [r4, #16]
 800d86c:	b31b      	cbz	r3, 800d8b6 <__swbuf_r+0x68>
 800d86e:	6823      	ldr	r3, [r4, #0]
 800d870:	6922      	ldr	r2, [r4, #16]
 800d872:	1a98      	subs	r0, r3, r2
 800d874:	6963      	ldr	r3, [r4, #20]
 800d876:	b2f6      	uxtb	r6, r6
 800d878:	4283      	cmp	r3, r0
 800d87a:	4637      	mov	r7, r6
 800d87c:	dc04      	bgt.n	800d888 <__swbuf_r+0x3a>
 800d87e:	4621      	mov	r1, r4
 800d880:	4628      	mov	r0, r5
 800d882:	f000 fd6d 	bl	800e360 <_fflush_r>
 800d886:	b9e0      	cbnz	r0, 800d8c2 <__swbuf_r+0x74>
 800d888:	68a3      	ldr	r3, [r4, #8]
 800d88a:	3b01      	subs	r3, #1
 800d88c:	60a3      	str	r3, [r4, #8]
 800d88e:	6823      	ldr	r3, [r4, #0]
 800d890:	1c5a      	adds	r2, r3, #1
 800d892:	6022      	str	r2, [r4, #0]
 800d894:	701e      	strb	r6, [r3, #0]
 800d896:	6962      	ldr	r2, [r4, #20]
 800d898:	1c43      	adds	r3, r0, #1
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d004      	beq.n	800d8a8 <__swbuf_r+0x5a>
 800d89e:	89a3      	ldrh	r3, [r4, #12]
 800d8a0:	07db      	lsls	r3, r3, #31
 800d8a2:	d506      	bpl.n	800d8b2 <__swbuf_r+0x64>
 800d8a4:	2e0a      	cmp	r6, #10
 800d8a6:	d104      	bne.n	800d8b2 <__swbuf_r+0x64>
 800d8a8:	4621      	mov	r1, r4
 800d8aa:	4628      	mov	r0, r5
 800d8ac:	f000 fd58 	bl	800e360 <_fflush_r>
 800d8b0:	b938      	cbnz	r0, 800d8c2 <__swbuf_r+0x74>
 800d8b2:	4638      	mov	r0, r7
 800d8b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8b6:	4621      	mov	r1, r4
 800d8b8:	4628      	mov	r0, r5
 800d8ba:	f000 f805 	bl	800d8c8 <__swsetup_r>
 800d8be:	2800      	cmp	r0, #0
 800d8c0:	d0d5      	beq.n	800d86e <__swbuf_r+0x20>
 800d8c2:	f04f 37ff 	mov.w	r7, #4294967295
 800d8c6:	e7f4      	b.n	800d8b2 <__swbuf_r+0x64>

0800d8c8 <__swsetup_r>:
 800d8c8:	b538      	push	{r3, r4, r5, lr}
 800d8ca:	4b2a      	ldr	r3, [pc, #168]	; (800d974 <__swsetup_r+0xac>)
 800d8cc:	4605      	mov	r5, r0
 800d8ce:	6818      	ldr	r0, [r3, #0]
 800d8d0:	460c      	mov	r4, r1
 800d8d2:	b118      	cbz	r0, 800d8dc <__swsetup_r+0x14>
 800d8d4:	6a03      	ldr	r3, [r0, #32]
 800d8d6:	b90b      	cbnz	r3, 800d8dc <__swsetup_r+0x14>
 800d8d8:	f7ff feca 	bl	800d670 <__sinit>
 800d8dc:	89a3      	ldrh	r3, [r4, #12]
 800d8de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d8e2:	0718      	lsls	r0, r3, #28
 800d8e4:	d422      	bmi.n	800d92c <__swsetup_r+0x64>
 800d8e6:	06d9      	lsls	r1, r3, #27
 800d8e8:	d407      	bmi.n	800d8fa <__swsetup_r+0x32>
 800d8ea:	2309      	movs	r3, #9
 800d8ec:	602b      	str	r3, [r5, #0]
 800d8ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d8f2:	81a3      	strh	r3, [r4, #12]
 800d8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8f8:	e034      	b.n	800d964 <__swsetup_r+0x9c>
 800d8fa:	0758      	lsls	r0, r3, #29
 800d8fc:	d512      	bpl.n	800d924 <__swsetup_r+0x5c>
 800d8fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d900:	b141      	cbz	r1, 800d914 <__swsetup_r+0x4c>
 800d902:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d906:	4299      	cmp	r1, r3
 800d908:	d002      	beq.n	800d910 <__swsetup_r+0x48>
 800d90a:	4628      	mov	r0, r5
 800d90c:	f000 f8d6 	bl	800dabc <_free_r>
 800d910:	2300      	movs	r3, #0
 800d912:	6363      	str	r3, [r4, #52]	; 0x34
 800d914:	89a3      	ldrh	r3, [r4, #12]
 800d916:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d91a:	81a3      	strh	r3, [r4, #12]
 800d91c:	2300      	movs	r3, #0
 800d91e:	6063      	str	r3, [r4, #4]
 800d920:	6923      	ldr	r3, [r4, #16]
 800d922:	6023      	str	r3, [r4, #0]
 800d924:	89a3      	ldrh	r3, [r4, #12]
 800d926:	f043 0308 	orr.w	r3, r3, #8
 800d92a:	81a3      	strh	r3, [r4, #12]
 800d92c:	6923      	ldr	r3, [r4, #16]
 800d92e:	b94b      	cbnz	r3, 800d944 <__swsetup_r+0x7c>
 800d930:	89a3      	ldrh	r3, [r4, #12]
 800d932:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d93a:	d003      	beq.n	800d944 <__swsetup_r+0x7c>
 800d93c:	4621      	mov	r1, r4
 800d93e:	4628      	mov	r0, r5
 800d940:	f000 fd5c 	bl	800e3fc <__smakebuf_r>
 800d944:	89a0      	ldrh	r0, [r4, #12]
 800d946:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d94a:	f010 0301 	ands.w	r3, r0, #1
 800d94e:	d00a      	beq.n	800d966 <__swsetup_r+0x9e>
 800d950:	2300      	movs	r3, #0
 800d952:	60a3      	str	r3, [r4, #8]
 800d954:	6963      	ldr	r3, [r4, #20]
 800d956:	425b      	negs	r3, r3
 800d958:	61a3      	str	r3, [r4, #24]
 800d95a:	6923      	ldr	r3, [r4, #16]
 800d95c:	b943      	cbnz	r3, 800d970 <__swsetup_r+0xa8>
 800d95e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d962:	d1c4      	bne.n	800d8ee <__swsetup_r+0x26>
 800d964:	bd38      	pop	{r3, r4, r5, pc}
 800d966:	0781      	lsls	r1, r0, #30
 800d968:	bf58      	it	pl
 800d96a:	6963      	ldrpl	r3, [r4, #20]
 800d96c:	60a3      	str	r3, [r4, #8]
 800d96e:	e7f4      	b.n	800d95a <__swsetup_r+0x92>
 800d970:	2000      	movs	r0, #0
 800d972:	e7f7      	b.n	800d964 <__swsetup_r+0x9c>
 800d974:	20000090 	.word	0x20000090

0800d978 <memset>:
 800d978:	4402      	add	r2, r0
 800d97a:	4603      	mov	r3, r0
 800d97c:	4293      	cmp	r3, r2
 800d97e:	d100      	bne.n	800d982 <memset+0xa>
 800d980:	4770      	bx	lr
 800d982:	f803 1b01 	strb.w	r1, [r3], #1
 800d986:	e7f9      	b.n	800d97c <memset+0x4>

0800d988 <strrchr>:
 800d988:	b513      	push	{r0, r1, r4, lr}
 800d98a:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800d98e:	4603      	mov	r3, r0
 800d990:	d110      	bne.n	800d9b4 <strrchr+0x2c>
 800d992:	b002      	add	sp, #8
 800d994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d998:	f000 bda0 	b.w	800e4dc <strchr>
 800d99c:	1c43      	adds	r3, r0, #1
 800d99e:	4604      	mov	r4, r0
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	9101      	str	r1, [sp, #4]
 800d9a4:	f000 fd9a 	bl	800e4dc <strchr>
 800d9a8:	9901      	ldr	r1, [sp, #4]
 800d9aa:	2800      	cmp	r0, #0
 800d9ac:	d1f6      	bne.n	800d99c <strrchr+0x14>
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	b002      	add	sp, #8
 800d9b2:	bd10      	pop	{r4, pc}
 800d9b4:	2400      	movs	r4, #0
 800d9b6:	e7f3      	b.n	800d9a0 <strrchr+0x18>

0800d9b8 <_close_r>:
 800d9b8:	b538      	push	{r3, r4, r5, lr}
 800d9ba:	4d06      	ldr	r5, [pc, #24]	; (800d9d4 <_close_r+0x1c>)
 800d9bc:	2300      	movs	r3, #0
 800d9be:	4604      	mov	r4, r0
 800d9c0:	4608      	mov	r0, r1
 800d9c2:	602b      	str	r3, [r5, #0]
 800d9c4:	f7f5 fb73 	bl	80030ae <_close>
 800d9c8:	1c43      	adds	r3, r0, #1
 800d9ca:	d102      	bne.n	800d9d2 <_close_r+0x1a>
 800d9cc:	682b      	ldr	r3, [r5, #0]
 800d9ce:	b103      	cbz	r3, 800d9d2 <_close_r+0x1a>
 800d9d0:	6023      	str	r3, [r4, #0]
 800d9d2:	bd38      	pop	{r3, r4, r5, pc}
 800d9d4:	20001a80 	.word	0x20001a80

0800d9d8 <_lseek_r>:
 800d9d8:	b538      	push	{r3, r4, r5, lr}
 800d9da:	4d07      	ldr	r5, [pc, #28]	; (800d9f8 <_lseek_r+0x20>)
 800d9dc:	4604      	mov	r4, r0
 800d9de:	4608      	mov	r0, r1
 800d9e0:	4611      	mov	r1, r2
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	602a      	str	r2, [r5, #0]
 800d9e6:	461a      	mov	r2, r3
 800d9e8:	f7f5 fb88 	bl	80030fc <_lseek>
 800d9ec:	1c43      	adds	r3, r0, #1
 800d9ee:	d102      	bne.n	800d9f6 <_lseek_r+0x1e>
 800d9f0:	682b      	ldr	r3, [r5, #0]
 800d9f2:	b103      	cbz	r3, 800d9f6 <_lseek_r+0x1e>
 800d9f4:	6023      	str	r3, [r4, #0]
 800d9f6:	bd38      	pop	{r3, r4, r5, pc}
 800d9f8:	20001a80 	.word	0x20001a80

0800d9fc <_read_r>:
 800d9fc:	b538      	push	{r3, r4, r5, lr}
 800d9fe:	4d07      	ldr	r5, [pc, #28]	; (800da1c <_read_r+0x20>)
 800da00:	4604      	mov	r4, r0
 800da02:	4608      	mov	r0, r1
 800da04:	4611      	mov	r1, r2
 800da06:	2200      	movs	r2, #0
 800da08:	602a      	str	r2, [r5, #0]
 800da0a:	461a      	mov	r2, r3
 800da0c:	f7f5 fb32 	bl	8003074 <_read>
 800da10:	1c43      	adds	r3, r0, #1
 800da12:	d102      	bne.n	800da1a <_read_r+0x1e>
 800da14:	682b      	ldr	r3, [r5, #0]
 800da16:	b103      	cbz	r3, 800da1a <_read_r+0x1e>
 800da18:	6023      	str	r3, [r4, #0]
 800da1a:	bd38      	pop	{r3, r4, r5, pc}
 800da1c:	20001a80 	.word	0x20001a80

0800da20 <_write_r>:
 800da20:	b538      	push	{r3, r4, r5, lr}
 800da22:	4d07      	ldr	r5, [pc, #28]	; (800da40 <_write_r+0x20>)
 800da24:	4604      	mov	r4, r0
 800da26:	4608      	mov	r0, r1
 800da28:	4611      	mov	r1, r2
 800da2a:	2200      	movs	r2, #0
 800da2c:	602a      	str	r2, [r5, #0]
 800da2e:	461a      	mov	r2, r3
 800da30:	f7fc ffee 	bl	800aa10 <_write>
 800da34:	1c43      	adds	r3, r0, #1
 800da36:	d102      	bne.n	800da3e <_write_r+0x1e>
 800da38:	682b      	ldr	r3, [r5, #0]
 800da3a:	b103      	cbz	r3, 800da3e <_write_r+0x1e>
 800da3c:	6023      	str	r3, [r4, #0]
 800da3e:	bd38      	pop	{r3, r4, r5, pc}
 800da40:	20001a80 	.word	0x20001a80

0800da44 <__errno>:
 800da44:	4b01      	ldr	r3, [pc, #4]	; (800da4c <__errno+0x8>)
 800da46:	6818      	ldr	r0, [r3, #0]
 800da48:	4770      	bx	lr
 800da4a:	bf00      	nop
 800da4c:	20000090 	.word	0x20000090

0800da50 <__libc_init_array>:
 800da50:	b570      	push	{r4, r5, r6, lr}
 800da52:	4d0d      	ldr	r5, [pc, #52]	; (800da88 <__libc_init_array+0x38>)
 800da54:	4c0d      	ldr	r4, [pc, #52]	; (800da8c <__libc_init_array+0x3c>)
 800da56:	1b64      	subs	r4, r4, r5
 800da58:	10a4      	asrs	r4, r4, #2
 800da5a:	2600      	movs	r6, #0
 800da5c:	42a6      	cmp	r6, r4
 800da5e:	d109      	bne.n	800da74 <__libc_init_array+0x24>
 800da60:	4d0b      	ldr	r5, [pc, #44]	; (800da90 <__libc_init_array+0x40>)
 800da62:	4c0c      	ldr	r4, [pc, #48]	; (800da94 <__libc_init_array+0x44>)
 800da64:	f000 fd7a 	bl	800e55c <_init>
 800da68:	1b64      	subs	r4, r4, r5
 800da6a:	10a4      	asrs	r4, r4, #2
 800da6c:	2600      	movs	r6, #0
 800da6e:	42a6      	cmp	r6, r4
 800da70:	d105      	bne.n	800da7e <__libc_init_array+0x2e>
 800da72:	bd70      	pop	{r4, r5, r6, pc}
 800da74:	f855 3b04 	ldr.w	r3, [r5], #4
 800da78:	4798      	blx	r3
 800da7a:	3601      	adds	r6, #1
 800da7c:	e7ee      	b.n	800da5c <__libc_init_array+0xc>
 800da7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800da82:	4798      	blx	r3
 800da84:	3601      	adds	r6, #1
 800da86:	e7f2      	b.n	800da6e <__libc_init_array+0x1e>
 800da88:	0800fd78 	.word	0x0800fd78
 800da8c:	0800fd78 	.word	0x0800fd78
 800da90:	0800fd78 	.word	0x0800fd78
 800da94:	0800fd7c 	.word	0x0800fd7c

0800da98 <__retarget_lock_init_recursive>:
 800da98:	4770      	bx	lr

0800da9a <__retarget_lock_acquire_recursive>:
 800da9a:	4770      	bx	lr

0800da9c <__retarget_lock_release_recursive>:
 800da9c:	4770      	bx	lr

0800da9e <memcpy>:
 800da9e:	440a      	add	r2, r1
 800daa0:	4291      	cmp	r1, r2
 800daa2:	f100 33ff 	add.w	r3, r0, #4294967295
 800daa6:	d100      	bne.n	800daaa <memcpy+0xc>
 800daa8:	4770      	bx	lr
 800daaa:	b510      	push	{r4, lr}
 800daac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dab0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dab4:	4291      	cmp	r1, r2
 800dab6:	d1f9      	bne.n	800daac <memcpy+0xe>
 800dab8:	bd10      	pop	{r4, pc}
	...

0800dabc <_free_r>:
 800dabc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dabe:	2900      	cmp	r1, #0
 800dac0:	d044      	beq.n	800db4c <_free_r+0x90>
 800dac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dac6:	9001      	str	r0, [sp, #4]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	f1a1 0404 	sub.w	r4, r1, #4
 800dace:	bfb8      	it	lt
 800dad0:	18e4      	addlt	r4, r4, r3
 800dad2:	f000 f8df 	bl	800dc94 <__malloc_lock>
 800dad6:	4a1e      	ldr	r2, [pc, #120]	; (800db50 <_free_r+0x94>)
 800dad8:	9801      	ldr	r0, [sp, #4]
 800dada:	6813      	ldr	r3, [r2, #0]
 800dadc:	b933      	cbnz	r3, 800daec <_free_r+0x30>
 800dade:	6063      	str	r3, [r4, #4]
 800dae0:	6014      	str	r4, [r2, #0]
 800dae2:	b003      	add	sp, #12
 800dae4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dae8:	f000 b8da 	b.w	800dca0 <__malloc_unlock>
 800daec:	42a3      	cmp	r3, r4
 800daee:	d908      	bls.n	800db02 <_free_r+0x46>
 800daf0:	6825      	ldr	r5, [r4, #0]
 800daf2:	1961      	adds	r1, r4, r5
 800daf4:	428b      	cmp	r3, r1
 800daf6:	bf01      	itttt	eq
 800daf8:	6819      	ldreq	r1, [r3, #0]
 800dafa:	685b      	ldreq	r3, [r3, #4]
 800dafc:	1949      	addeq	r1, r1, r5
 800dafe:	6021      	streq	r1, [r4, #0]
 800db00:	e7ed      	b.n	800dade <_free_r+0x22>
 800db02:	461a      	mov	r2, r3
 800db04:	685b      	ldr	r3, [r3, #4]
 800db06:	b10b      	cbz	r3, 800db0c <_free_r+0x50>
 800db08:	42a3      	cmp	r3, r4
 800db0a:	d9fa      	bls.n	800db02 <_free_r+0x46>
 800db0c:	6811      	ldr	r1, [r2, #0]
 800db0e:	1855      	adds	r5, r2, r1
 800db10:	42a5      	cmp	r5, r4
 800db12:	d10b      	bne.n	800db2c <_free_r+0x70>
 800db14:	6824      	ldr	r4, [r4, #0]
 800db16:	4421      	add	r1, r4
 800db18:	1854      	adds	r4, r2, r1
 800db1a:	42a3      	cmp	r3, r4
 800db1c:	6011      	str	r1, [r2, #0]
 800db1e:	d1e0      	bne.n	800dae2 <_free_r+0x26>
 800db20:	681c      	ldr	r4, [r3, #0]
 800db22:	685b      	ldr	r3, [r3, #4]
 800db24:	6053      	str	r3, [r2, #4]
 800db26:	440c      	add	r4, r1
 800db28:	6014      	str	r4, [r2, #0]
 800db2a:	e7da      	b.n	800dae2 <_free_r+0x26>
 800db2c:	d902      	bls.n	800db34 <_free_r+0x78>
 800db2e:	230c      	movs	r3, #12
 800db30:	6003      	str	r3, [r0, #0]
 800db32:	e7d6      	b.n	800dae2 <_free_r+0x26>
 800db34:	6825      	ldr	r5, [r4, #0]
 800db36:	1961      	adds	r1, r4, r5
 800db38:	428b      	cmp	r3, r1
 800db3a:	bf04      	itt	eq
 800db3c:	6819      	ldreq	r1, [r3, #0]
 800db3e:	685b      	ldreq	r3, [r3, #4]
 800db40:	6063      	str	r3, [r4, #4]
 800db42:	bf04      	itt	eq
 800db44:	1949      	addeq	r1, r1, r5
 800db46:	6021      	streq	r1, [r4, #0]
 800db48:	6054      	str	r4, [r2, #4]
 800db4a:	e7ca      	b.n	800dae2 <_free_r+0x26>
 800db4c:	b003      	add	sp, #12
 800db4e:	bd30      	pop	{r4, r5, pc}
 800db50:	20001a88 	.word	0x20001a88

0800db54 <sbrk_aligned>:
 800db54:	b570      	push	{r4, r5, r6, lr}
 800db56:	4e0e      	ldr	r6, [pc, #56]	; (800db90 <sbrk_aligned+0x3c>)
 800db58:	460c      	mov	r4, r1
 800db5a:	6831      	ldr	r1, [r6, #0]
 800db5c:	4605      	mov	r5, r0
 800db5e:	b911      	cbnz	r1, 800db66 <sbrk_aligned+0x12>
 800db60:	f000 fcec 	bl	800e53c <_sbrk_r>
 800db64:	6030      	str	r0, [r6, #0]
 800db66:	4621      	mov	r1, r4
 800db68:	4628      	mov	r0, r5
 800db6a:	f000 fce7 	bl	800e53c <_sbrk_r>
 800db6e:	1c43      	adds	r3, r0, #1
 800db70:	d00a      	beq.n	800db88 <sbrk_aligned+0x34>
 800db72:	1cc4      	adds	r4, r0, #3
 800db74:	f024 0403 	bic.w	r4, r4, #3
 800db78:	42a0      	cmp	r0, r4
 800db7a:	d007      	beq.n	800db8c <sbrk_aligned+0x38>
 800db7c:	1a21      	subs	r1, r4, r0
 800db7e:	4628      	mov	r0, r5
 800db80:	f000 fcdc 	bl	800e53c <_sbrk_r>
 800db84:	3001      	adds	r0, #1
 800db86:	d101      	bne.n	800db8c <sbrk_aligned+0x38>
 800db88:	f04f 34ff 	mov.w	r4, #4294967295
 800db8c:	4620      	mov	r0, r4
 800db8e:	bd70      	pop	{r4, r5, r6, pc}
 800db90:	20001a8c 	.word	0x20001a8c

0800db94 <_malloc_r>:
 800db94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db98:	1ccd      	adds	r5, r1, #3
 800db9a:	f025 0503 	bic.w	r5, r5, #3
 800db9e:	3508      	adds	r5, #8
 800dba0:	2d0c      	cmp	r5, #12
 800dba2:	bf38      	it	cc
 800dba4:	250c      	movcc	r5, #12
 800dba6:	2d00      	cmp	r5, #0
 800dba8:	4607      	mov	r7, r0
 800dbaa:	db01      	blt.n	800dbb0 <_malloc_r+0x1c>
 800dbac:	42a9      	cmp	r1, r5
 800dbae:	d905      	bls.n	800dbbc <_malloc_r+0x28>
 800dbb0:	230c      	movs	r3, #12
 800dbb2:	603b      	str	r3, [r7, #0]
 800dbb4:	2600      	movs	r6, #0
 800dbb6:	4630      	mov	r0, r6
 800dbb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800dc90 <_malloc_r+0xfc>
 800dbc0:	f000 f868 	bl	800dc94 <__malloc_lock>
 800dbc4:	f8d8 3000 	ldr.w	r3, [r8]
 800dbc8:	461c      	mov	r4, r3
 800dbca:	bb5c      	cbnz	r4, 800dc24 <_malloc_r+0x90>
 800dbcc:	4629      	mov	r1, r5
 800dbce:	4638      	mov	r0, r7
 800dbd0:	f7ff ffc0 	bl	800db54 <sbrk_aligned>
 800dbd4:	1c43      	adds	r3, r0, #1
 800dbd6:	4604      	mov	r4, r0
 800dbd8:	d155      	bne.n	800dc86 <_malloc_r+0xf2>
 800dbda:	f8d8 4000 	ldr.w	r4, [r8]
 800dbde:	4626      	mov	r6, r4
 800dbe0:	2e00      	cmp	r6, #0
 800dbe2:	d145      	bne.n	800dc70 <_malloc_r+0xdc>
 800dbe4:	2c00      	cmp	r4, #0
 800dbe6:	d048      	beq.n	800dc7a <_malloc_r+0xe6>
 800dbe8:	6823      	ldr	r3, [r4, #0]
 800dbea:	4631      	mov	r1, r6
 800dbec:	4638      	mov	r0, r7
 800dbee:	eb04 0903 	add.w	r9, r4, r3
 800dbf2:	f000 fca3 	bl	800e53c <_sbrk_r>
 800dbf6:	4581      	cmp	r9, r0
 800dbf8:	d13f      	bne.n	800dc7a <_malloc_r+0xe6>
 800dbfa:	6821      	ldr	r1, [r4, #0]
 800dbfc:	1a6d      	subs	r5, r5, r1
 800dbfe:	4629      	mov	r1, r5
 800dc00:	4638      	mov	r0, r7
 800dc02:	f7ff ffa7 	bl	800db54 <sbrk_aligned>
 800dc06:	3001      	adds	r0, #1
 800dc08:	d037      	beq.n	800dc7a <_malloc_r+0xe6>
 800dc0a:	6823      	ldr	r3, [r4, #0]
 800dc0c:	442b      	add	r3, r5
 800dc0e:	6023      	str	r3, [r4, #0]
 800dc10:	f8d8 3000 	ldr.w	r3, [r8]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d038      	beq.n	800dc8a <_malloc_r+0xf6>
 800dc18:	685a      	ldr	r2, [r3, #4]
 800dc1a:	42a2      	cmp	r2, r4
 800dc1c:	d12b      	bne.n	800dc76 <_malloc_r+0xe2>
 800dc1e:	2200      	movs	r2, #0
 800dc20:	605a      	str	r2, [r3, #4]
 800dc22:	e00f      	b.n	800dc44 <_malloc_r+0xb0>
 800dc24:	6822      	ldr	r2, [r4, #0]
 800dc26:	1b52      	subs	r2, r2, r5
 800dc28:	d41f      	bmi.n	800dc6a <_malloc_r+0xd6>
 800dc2a:	2a0b      	cmp	r2, #11
 800dc2c:	d917      	bls.n	800dc5e <_malloc_r+0xca>
 800dc2e:	1961      	adds	r1, r4, r5
 800dc30:	42a3      	cmp	r3, r4
 800dc32:	6025      	str	r5, [r4, #0]
 800dc34:	bf18      	it	ne
 800dc36:	6059      	strne	r1, [r3, #4]
 800dc38:	6863      	ldr	r3, [r4, #4]
 800dc3a:	bf08      	it	eq
 800dc3c:	f8c8 1000 	streq.w	r1, [r8]
 800dc40:	5162      	str	r2, [r4, r5]
 800dc42:	604b      	str	r3, [r1, #4]
 800dc44:	4638      	mov	r0, r7
 800dc46:	f104 060b 	add.w	r6, r4, #11
 800dc4a:	f000 f829 	bl	800dca0 <__malloc_unlock>
 800dc4e:	f026 0607 	bic.w	r6, r6, #7
 800dc52:	1d23      	adds	r3, r4, #4
 800dc54:	1af2      	subs	r2, r6, r3
 800dc56:	d0ae      	beq.n	800dbb6 <_malloc_r+0x22>
 800dc58:	1b9b      	subs	r3, r3, r6
 800dc5a:	50a3      	str	r3, [r4, r2]
 800dc5c:	e7ab      	b.n	800dbb6 <_malloc_r+0x22>
 800dc5e:	42a3      	cmp	r3, r4
 800dc60:	6862      	ldr	r2, [r4, #4]
 800dc62:	d1dd      	bne.n	800dc20 <_malloc_r+0x8c>
 800dc64:	f8c8 2000 	str.w	r2, [r8]
 800dc68:	e7ec      	b.n	800dc44 <_malloc_r+0xb0>
 800dc6a:	4623      	mov	r3, r4
 800dc6c:	6864      	ldr	r4, [r4, #4]
 800dc6e:	e7ac      	b.n	800dbca <_malloc_r+0x36>
 800dc70:	4634      	mov	r4, r6
 800dc72:	6876      	ldr	r6, [r6, #4]
 800dc74:	e7b4      	b.n	800dbe0 <_malloc_r+0x4c>
 800dc76:	4613      	mov	r3, r2
 800dc78:	e7cc      	b.n	800dc14 <_malloc_r+0x80>
 800dc7a:	230c      	movs	r3, #12
 800dc7c:	603b      	str	r3, [r7, #0]
 800dc7e:	4638      	mov	r0, r7
 800dc80:	f000 f80e 	bl	800dca0 <__malloc_unlock>
 800dc84:	e797      	b.n	800dbb6 <_malloc_r+0x22>
 800dc86:	6025      	str	r5, [r4, #0]
 800dc88:	e7dc      	b.n	800dc44 <_malloc_r+0xb0>
 800dc8a:	605b      	str	r3, [r3, #4]
 800dc8c:	deff      	udf	#255	; 0xff
 800dc8e:	bf00      	nop
 800dc90:	20001a88 	.word	0x20001a88

0800dc94 <__malloc_lock>:
 800dc94:	4801      	ldr	r0, [pc, #4]	; (800dc9c <__malloc_lock+0x8>)
 800dc96:	f7ff bf00 	b.w	800da9a <__retarget_lock_acquire_recursive>
 800dc9a:	bf00      	nop
 800dc9c:	20001a84 	.word	0x20001a84

0800dca0 <__malloc_unlock>:
 800dca0:	4801      	ldr	r0, [pc, #4]	; (800dca8 <__malloc_unlock+0x8>)
 800dca2:	f7ff befb 	b.w	800da9c <__retarget_lock_release_recursive>
 800dca6:	bf00      	nop
 800dca8:	20001a84 	.word	0x20001a84

0800dcac <__sfputc_r>:
 800dcac:	6893      	ldr	r3, [r2, #8]
 800dcae:	3b01      	subs	r3, #1
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	b410      	push	{r4}
 800dcb4:	6093      	str	r3, [r2, #8]
 800dcb6:	da08      	bge.n	800dcca <__sfputc_r+0x1e>
 800dcb8:	6994      	ldr	r4, [r2, #24]
 800dcba:	42a3      	cmp	r3, r4
 800dcbc:	db01      	blt.n	800dcc2 <__sfputc_r+0x16>
 800dcbe:	290a      	cmp	r1, #10
 800dcc0:	d103      	bne.n	800dcca <__sfputc_r+0x1e>
 800dcc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcc6:	f7ff bdc2 	b.w	800d84e <__swbuf_r>
 800dcca:	6813      	ldr	r3, [r2, #0]
 800dccc:	1c58      	adds	r0, r3, #1
 800dcce:	6010      	str	r0, [r2, #0]
 800dcd0:	7019      	strb	r1, [r3, #0]
 800dcd2:	4608      	mov	r0, r1
 800dcd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcd8:	4770      	bx	lr

0800dcda <__sfputs_r>:
 800dcda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcdc:	4606      	mov	r6, r0
 800dcde:	460f      	mov	r7, r1
 800dce0:	4614      	mov	r4, r2
 800dce2:	18d5      	adds	r5, r2, r3
 800dce4:	42ac      	cmp	r4, r5
 800dce6:	d101      	bne.n	800dcec <__sfputs_r+0x12>
 800dce8:	2000      	movs	r0, #0
 800dcea:	e007      	b.n	800dcfc <__sfputs_r+0x22>
 800dcec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcf0:	463a      	mov	r2, r7
 800dcf2:	4630      	mov	r0, r6
 800dcf4:	f7ff ffda 	bl	800dcac <__sfputc_r>
 800dcf8:	1c43      	adds	r3, r0, #1
 800dcfa:	d1f3      	bne.n	800dce4 <__sfputs_r+0xa>
 800dcfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dd00 <_vfiprintf_r>:
 800dd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd04:	460d      	mov	r5, r1
 800dd06:	b09d      	sub	sp, #116	; 0x74
 800dd08:	4614      	mov	r4, r2
 800dd0a:	4698      	mov	r8, r3
 800dd0c:	4606      	mov	r6, r0
 800dd0e:	b118      	cbz	r0, 800dd18 <_vfiprintf_r+0x18>
 800dd10:	6a03      	ldr	r3, [r0, #32]
 800dd12:	b90b      	cbnz	r3, 800dd18 <_vfiprintf_r+0x18>
 800dd14:	f7ff fcac 	bl	800d670 <__sinit>
 800dd18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd1a:	07d9      	lsls	r1, r3, #31
 800dd1c:	d405      	bmi.n	800dd2a <_vfiprintf_r+0x2a>
 800dd1e:	89ab      	ldrh	r3, [r5, #12]
 800dd20:	059a      	lsls	r2, r3, #22
 800dd22:	d402      	bmi.n	800dd2a <_vfiprintf_r+0x2a>
 800dd24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd26:	f7ff feb8 	bl	800da9a <__retarget_lock_acquire_recursive>
 800dd2a:	89ab      	ldrh	r3, [r5, #12]
 800dd2c:	071b      	lsls	r3, r3, #28
 800dd2e:	d501      	bpl.n	800dd34 <_vfiprintf_r+0x34>
 800dd30:	692b      	ldr	r3, [r5, #16]
 800dd32:	b99b      	cbnz	r3, 800dd5c <_vfiprintf_r+0x5c>
 800dd34:	4629      	mov	r1, r5
 800dd36:	4630      	mov	r0, r6
 800dd38:	f7ff fdc6 	bl	800d8c8 <__swsetup_r>
 800dd3c:	b170      	cbz	r0, 800dd5c <_vfiprintf_r+0x5c>
 800dd3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd40:	07dc      	lsls	r4, r3, #31
 800dd42:	d504      	bpl.n	800dd4e <_vfiprintf_r+0x4e>
 800dd44:	f04f 30ff 	mov.w	r0, #4294967295
 800dd48:	b01d      	add	sp, #116	; 0x74
 800dd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd4e:	89ab      	ldrh	r3, [r5, #12]
 800dd50:	0598      	lsls	r0, r3, #22
 800dd52:	d4f7      	bmi.n	800dd44 <_vfiprintf_r+0x44>
 800dd54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd56:	f7ff fea1 	bl	800da9c <__retarget_lock_release_recursive>
 800dd5a:	e7f3      	b.n	800dd44 <_vfiprintf_r+0x44>
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	9309      	str	r3, [sp, #36]	; 0x24
 800dd60:	2320      	movs	r3, #32
 800dd62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd66:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd6a:	2330      	movs	r3, #48	; 0x30
 800dd6c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800df20 <_vfiprintf_r+0x220>
 800dd70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd74:	f04f 0901 	mov.w	r9, #1
 800dd78:	4623      	mov	r3, r4
 800dd7a:	469a      	mov	sl, r3
 800dd7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd80:	b10a      	cbz	r2, 800dd86 <_vfiprintf_r+0x86>
 800dd82:	2a25      	cmp	r2, #37	; 0x25
 800dd84:	d1f9      	bne.n	800dd7a <_vfiprintf_r+0x7a>
 800dd86:	ebba 0b04 	subs.w	fp, sl, r4
 800dd8a:	d00b      	beq.n	800dda4 <_vfiprintf_r+0xa4>
 800dd8c:	465b      	mov	r3, fp
 800dd8e:	4622      	mov	r2, r4
 800dd90:	4629      	mov	r1, r5
 800dd92:	4630      	mov	r0, r6
 800dd94:	f7ff ffa1 	bl	800dcda <__sfputs_r>
 800dd98:	3001      	adds	r0, #1
 800dd9a:	f000 80a9 	beq.w	800def0 <_vfiprintf_r+0x1f0>
 800dd9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dda0:	445a      	add	r2, fp
 800dda2:	9209      	str	r2, [sp, #36]	; 0x24
 800dda4:	f89a 3000 	ldrb.w	r3, [sl]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	f000 80a1 	beq.w	800def0 <_vfiprintf_r+0x1f0>
 800ddae:	2300      	movs	r3, #0
 800ddb0:	f04f 32ff 	mov.w	r2, #4294967295
 800ddb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddb8:	f10a 0a01 	add.w	sl, sl, #1
 800ddbc:	9304      	str	r3, [sp, #16]
 800ddbe:	9307      	str	r3, [sp, #28]
 800ddc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ddc4:	931a      	str	r3, [sp, #104]	; 0x68
 800ddc6:	4654      	mov	r4, sl
 800ddc8:	2205      	movs	r2, #5
 800ddca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddce:	4854      	ldr	r0, [pc, #336]	; (800df20 <_vfiprintf_r+0x220>)
 800ddd0:	f7f2 f9de 	bl	8000190 <memchr>
 800ddd4:	9a04      	ldr	r2, [sp, #16]
 800ddd6:	b9d8      	cbnz	r0, 800de10 <_vfiprintf_r+0x110>
 800ddd8:	06d1      	lsls	r1, r2, #27
 800ddda:	bf44      	itt	mi
 800dddc:	2320      	movmi	r3, #32
 800ddde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dde2:	0713      	lsls	r3, r2, #28
 800dde4:	bf44      	itt	mi
 800dde6:	232b      	movmi	r3, #43	; 0x2b
 800dde8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddec:	f89a 3000 	ldrb.w	r3, [sl]
 800ddf0:	2b2a      	cmp	r3, #42	; 0x2a
 800ddf2:	d015      	beq.n	800de20 <_vfiprintf_r+0x120>
 800ddf4:	9a07      	ldr	r2, [sp, #28]
 800ddf6:	4654      	mov	r4, sl
 800ddf8:	2000      	movs	r0, #0
 800ddfa:	f04f 0c0a 	mov.w	ip, #10
 800ddfe:	4621      	mov	r1, r4
 800de00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de04:	3b30      	subs	r3, #48	; 0x30
 800de06:	2b09      	cmp	r3, #9
 800de08:	d94d      	bls.n	800dea6 <_vfiprintf_r+0x1a6>
 800de0a:	b1b0      	cbz	r0, 800de3a <_vfiprintf_r+0x13a>
 800de0c:	9207      	str	r2, [sp, #28]
 800de0e:	e014      	b.n	800de3a <_vfiprintf_r+0x13a>
 800de10:	eba0 0308 	sub.w	r3, r0, r8
 800de14:	fa09 f303 	lsl.w	r3, r9, r3
 800de18:	4313      	orrs	r3, r2
 800de1a:	9304      	str	r3, [sp, #16]
 800de1c:	46a2      	mov	sl, r4
 800de1e:	e7d2      	b.n	800ddc6 <_vfiprintf_r+0xc6>
 800de20:	9b03      	ldr	r3, [sp, #12]
 800de22:	1d19      	adds	r1, r3, #4
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	9103      	str	r1, [sp, #12]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	bfbb      	ittet	lt
 800de2c:	425b      	neglt	r3, r3
 800de2e:	f042 0202 	orrlt.w	r2, r2, #2
 800de32:	9307      	strge	r3, [sp, #28]
 800de34:	9307      	strlt	r3, [sp, #28]
 800de36:	bfb8      	it	lt
 800de38:	9204      	strlt	r2, [sp, #16]
 800de3a:	7823      	ldrb	r3, [r4, #0]
 800de3c:	2b2e      	cmp	r3, #46	; 0x2e
 800de3e:	d10c      	bne.n	800de5a <_vfiprintf_r+0x15a>
 800de40:	7863      	ldrb	r3, [r4, #1]
 800de42:	2b2a      	cmp	r3, #42	; 0x2a
 800de44:	d134      	bne.n	800deb0 <_vfiprintf_r+0x1b0>
 800de46:	9b03      	ldr	r3, [sp, #12]
 800de48:	1d1a      	adds	r2, r3, #4
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	9203      	str	r2, [sp, #12]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	bfb8      	it	lt
 800de52:	f04f 33ff 	movlt.w	r3, #4294967295
 800de56:	3402      	adds	r4, #2
 800de58:	9305      	str	r3, [sp, #20]
 800de5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800df30 <_vfiprintf_r+0x230>
 800de5e:	7821      	ldrb	r1, [r4, #0]
 800de60:	2203      	movs	r2, #3
 800de62:	4650      	mov	r0, sl
 800de64:	f7f2 f994 	bl	8000190 <memchr>
 800de68:	b138      	cbz	r0, 800de7a <_vfiprintf_r+0x17a>
 800de6a:	9b04      	ldr	r3, [sp, #16]
 800de6c:	eba0 000a 	sub.w	r0, r0, sl
 800de70:	2240      	movs	r2, #64	; 0x40
 800de72:	4082      	lsls	r2, r0
 800de74:	4313      	orrs	r3, r2
 800de76:	3401      	adds	r4, #1
 800de78:	9304      	str	r3, [sp, #16]
 800de7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de7e:	4829      	ldr	r0, [pc, #164]	; (800df24 <_vfiprintf_r+0x224>)
 800de80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de84:	2206      	movs	r2, #6
 800de86:	f7f2 f983 	bl	8000190 <memchr>
 800de8a:	2800      	cmp	r0, #0
 800de8c:	d03f      	beq.n	800df0e <_vfiprintf_r+0x20e>
 800de8e:	4b26      	ldr	r3, [pc, #152]	; (800df28 <_vfiprintf_r+0x228>)
 800de90:	bb1b      	cbnz	r3, 800deda <_vfiprintf_r+0x1da>
 800de92:	9b03      	ldr	r3, [sp, #12]
 800de94:	3307      	adds	r3, #7
 800de96:	f023 0307 	bic.w	r3, r3, #7
 800de9a:	3308      	adds	r3, #8
 800de9c:	9303      	str	r3, [sp, #12]
 800de9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dea0:	443b      	add	r3, r7
 800dea2:	9309      	str	r3, [sp, #36]	; 0x24
 800dea4:	e768      	b.n	800dd78 <_vfiprintf_r+0x78>
 800dea6:	fb0c 3202 	mla	r2, ip, r2, r3
 800deaa:	460c      	mov	r4, r1
 800deac:	2001      	movs	r0, #1
 800deae:	e7a6      	b.n	800ddfe <_vfiprintf_r+0xfe>
 800deb0:	2300      	movs	r3, #0
 800deb2:	3401      	adds	r4, #1
 800deb4:	9305      	str	r3, [sp, #20]
 800deb6:	4619      	mov	r1, r3
 800deb8:	f04f 0c0a 	mov.w	ip, #10
 800debc:	4620      	mov	r0, r4
 800debe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dec2:	3a30      	subs	r2, #48	; 0x30
 800dec4:	2a09      	cmp	r2, #9
 800dec6:	d903      	bls.n	800ded0 <_vfiprintf_r+0x1d0>
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d0c6      	beq.n	800de5a <_vfiprintf_r+0x15a>
 800decc:	9105      	str	r1, [sp, #20]
 800dece:	e7c4      	b.n	800de5a <_vfiprintf_r+0x15a>
 800ded0:	fb0c 2101 	mla	r1, ip, r1, r2
 800ded4:	4604      	mov	r4, r0
 800ded6:	2301      	movs	r3, #1
 800ded8:	e7f0      	b.n	800debc <_vfiprintf_r+0x1bc>
 800deda:	ab03      	add	r3, sp, #12
 800dedc:	9300      	str	r3, [sp, #0]
 800dede:	462a      	mov	r2, r5
 800dee0:	4b12      	ldr	r3, [pc, #72]	; (800df2c <_vfiprintf_r+0x22c>)
 800dee2:	a904      	add	r1, sp, #16
 800dee4:	4630      	mov	r0, r6
 800dee6:	f3af 8000 	nop.w
 800deea:	4607      	mov	r7, r0
 800deec:	1c78      	adds	r0, r7, #1
 800deee:	d1d6      	bne.n	800de9e <_vfiprintf_r+0x19e>
 800def0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800def2:	07d9      	lsls	r1, r3, #31
 800def4:	d405      	bmi.n	800df02 <_vfiprintf_r+0x202>
 800def6:	89ab      	ldrh	r3, [r5, #12]
 800def8:	059a      	lsls	r2, r3, #22
 800defa:	d402      	bmi.n	800df02 <_vfiprintf_r+0x202>
 800defc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800defe:	f7ff fdcd 	bl	800da9c <__retarget_lock_release_recursive>
 800df02:	89ab      	ldrh	r3, [r5, #12]
 800df04:	065b      	lsls	r3, r3, #25
 800df06:	f53f af1d 	bmi.w	800dd44 <_vfiprintf_r+0x44>
 800df0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df0c:	e71c      	b.n	800dd48 <_vfiprintf_r+0x48>
 800df0e:	ab03      	add	r3, sp, #12
 800df10:	9300      	str	r3, [sp, #0]
 800df12:	462a      	mov	r2, r5
 800df14:	4b05      	ldr	r3, [pc, #20]	; (800df2c <_vfiprintf_r+0x22c>)
 800df16:	a904      	add	r1, sp, #16
 800df18:	4630      	mov	r0, r6
 800df1a:	f000 f879 	bl	800e010 <_printf_i>
 800df1e:	e7e4      	b.n	800deea <_vfiprintf_r+0x1ea>
 800df20:	0800fd3c 	.word	0x0800fd3c
 800df24:	0800fd46 	.word	0x0800fd46
 800df28:	00000000 	.word	0x00000000
 800df2c:	0800dcdb 	.word	0x0800dcdb
 800df30:	0800fd42 	.word	0x0800fd42

0800df34 <_printf_common>:
 800df34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df38:	4616      	mov	r6, r2
 800df3a:	4699      	mov	r9, r3
 800df3c:	688a      	ldr	r2, [r1, #8]
 800df3e:	690b      	ldr	r3, [r1, #16]
 800df40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800df44:	4293      	cmp	r3, r2
 800df46:	bfb8      	it	lt
 800df48:	4613      	movlt	r3, r2
 800df4a:	6033      	str	r3, [r6, #0]
 800df4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800df50:	4607      	mov	r7, r0
 800df52:	460c      	mov	r4, r1
 800df54:	b10a      	cbz	r2, 800df5a <_printf_common+0x26>
 800df56:	3301      	adds	r3, #1
 800df58:	6033      	str	r3, [r6, #0]
 800df5a:	6823      	ldr	r3, [r4, #0]
 800df5c:	0699      	lsls	r1, r3, #26
 800df5e:	bf42      	ittt	mi
 800df60:	6833      	ldrmi	r3, [r6, #0]
 800df62:	3302      	addmi	r3, #2
 800df64:	6033      	strmi	r3, [r6, #0]
 800df66:	6825      	ldr	r5, [r4, #0]
 800df68:	f015 0506 	ands.w	r5, r5, #6
 800df6c:	d106      	bne.n	800df7c <_printf_common+0x48>
 800df6e:	f104 0a19 	add.w	sl, r4, #25
 800df72:	68e3      	ldr	r3, [r4, #12]
 800df74:	6832      	ldr	r2, [r6, #0]
 800df76:	1a9b      	subs	r3, r3, r2
 800df78:	42ab      	cmp	r3, r5
 800df7a:	dc26      	bgt.n	800dfca <_printf_common+0x96>
 800df7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800df80:	1e13      	subs	r3, r2, #0
 800df82:	6822      	ldr	r2, [r4, #0]
 800df84:	bf18      	it	ne
 800df86:	2301      	movne	r3, #1
 800df88:	0692      	lsls	r2, r2, #26
 800df8a:	d42b      	bmi.n	800dfe4 <_printf_common+0xb0>
 800df8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800df90:	4649      	mov	r1, r9
 800df92:	4638      	mov	r0, r7
 800df94:	47c0      	blx	r8
 800df96:	3001      	adds	r0, #1
 800df98:	d01e      	beq.n	800dfd8 <_printf_common+0xa4>
 800df9a:	6823      	ldr	r3, [r4, #0]
 800df9c:	6922      	ldr	r2, [r4, #16]
 800df9e:	f003 0306 	and.w	r3, r3, #6
 800dfa2:	2b04      	cmp	r3, #4
 800dfa4:	bf02      	ittt	eq
 800dfa6:	68e5      	ldreq	r5, [r4, #12]
 800dfa8:	6833      	ldreq	r3, [r6, #0]
 800dfaa:	1aed      	subeq	r5, r5, r3
 800dfac:	68a3      	ldr	r3, [r4, #8]
 800dfae:	bf0c      	ite	eq
 800dfb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dfb4:	2500      	movne	r5, #0
 800dfb6:	4293      	cmp	r3, r2
 800dfb8:	bfc4      	itt	gt
 800dfba:	1a9b      	subgt	r3, r3, r2
 800dfbc:	18ed      	addgt	r5, r5, r3
 800dfbe:	2600      	movs	r6, #0
 800dfc0:	341a      	adds	r4, #26
 800dfc2:	42b5      	cmp	r5, r6
 800dfc4:	d11a      	bne.n	800dffc <_printf_common+0xc8>
 800dfc6:	2000      	movs	r0, #0
 800dfc8:	e008      	b.n	800dfdc <_printf_common+0xa8>
 800dfca:	2301      	movs	r3, #1
 800dfcc:	4652      	mov	r2, sl
 800dfce:	4649      	mov	r1, r9
 800dfd0:	4638      	mov	r0, r7
 800dfd2:	47c0      	blx	r8
 800dfd4:	3001      	adds	r0, #1
 800dfd6:	d103      	bne.n	800dfe0 <_printf_common+0xac>
 800dfd8:	f04f 30ff 	mov.w	r0, #4294967295
 800dfdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfe0:	3501      	adds	r5, #1
 800dfe2:	e7c6      	b.n	800df72 <_printf_common+0x3e>
 800dfe4:	18e1      	adds	r1, r4, r3
 800dfe6:	1c5a      	adds	r2, r3, #1
 800dfe8:	2030      	movs	r0, #48	; 0x30
 800dfea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dfee:	4422      	add	r2, r4
 800dff0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dff4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dff8:	3302      	adds	r3, #2
 800dffa:	e7c7      	b.n	800df8c <_printf_common+0x58>
 800dffc:	2301      	movs	r3, #1
 800dffe:	4622      	mov	r2, r4
 800e000:	4649      	mov	r1, r9
 800e002:	4638      	mov	r0, r7
 800e004:	47c0      	blx	r8
 800e006:	3001      	adds	r0, #1
 800e008:	d0e6      	beq.n	800dfd8 <_printf_common+0xa4>
 800e00a:	3601      	adds	r6, #1
 800e00c:	e7d9      	b.n	800dfc2 <_printf_common+0x8e>
	...

0800e010 <_printf_i>:
 800e010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e014:	7e0f      	ldrb	r7, [r1, #24]
 800e016:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e018:	2f78      	cmp	r7, #120	; 0x78
 800e01a:	4691      	mov	r9, r2
 800e01c:	4680      	mov	r8, r0
 800e01e:	460c      	mov	r4, r1
 800e020:	469a      	mov	sl, r3
 800e022:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e026:	d807      	bhi.n	800e038 <_printf_i+0x28>
 800e028:	2f62      	cmp	r7, #98	; 0x62
 800e02a:	d80a      	bhi.n	800e042 <_printf_i+0x32>
 800e02c:	2f00      	cmp	r7, #0
 800e02e:	f000 80d4 	beq.w	800e1da <_printf_i+0x1ca>
 800e032:	2f58      	cmp	r7, #88	; 0x58
 800e034:	f000 80c0 	beq.w	800e1b8 <_printf_i+0x1a8>
 800e038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e03c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e040:	e03a      	b.n	800e0b8 <_printf_i+0xa8>
 800e042:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e046:	2b15      	cmp	r3, #21
 800e048:	d8f6      	bhi.n	800e038 <_printf_i+0x28>
 800e04a:	a101      	add	r1, pc, #4	; (adr r1, 800e050 <_printf_i+0x40>)
 800e04c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e050:	0800e0a9 	.word	0x0800e0a9
 800e054:	0800e0bd 	.word	0x0800e0bd
 800e058:	0800e039 	.word	0x0800e039
 800e05c:	0800e039 	.word	0x0800e039
 800e060:	0800e039 	.word	0x0800e039
 800e064:	0800e039 	.word	0x0800e039
 800e068:	0800e0bd 	.word	0x0800e0bd
 800e06c:	0800e039 	.word	0x0800e039
 800e070:	0800e039 	.word	0x0800e039
 800e074:	0800e039 	.word	0x0800e039
 800e078:	0800e039 	.word	0x0800e039
 800e07c:	0800e1c1 	.word	0x0800e1c1
 800e080:	0800e0e9 	.word	0x0800e0e9
 800e084:	0800e17b 	.word	0x0800e17b
 800e088:	0800e039 	.word	0x0800e039
 800e08c:	0800e039 	.word	0x0800e039
 800e090:	0800e1e3 	.word	0x0800e1e3
 800e094:	0800e039 	.word	0x0800e039
 800e098:	0800e0e9 	.word	0x0800e0e9
 800e09c:	0800e039 	.word	0x0800e039
 800e0a0:	0800e039 	.word	0x0800e039
 800e0a4:	0800e183 	.word	0x0800e183
 800e0a8:	682b      	ldr	r3, [r5, #0]
 800e0aa:	1d1a      	adds	r2, r3, #4
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	602a      	str	r2, [r5, #0]
 800e0b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e0b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	e09f      	b.n	800e1fc <_printf_i+0x1ec>
 800e0bc:	6820      	ldr	r0, [r4, #0]
 800e0be:	682b      	ldr	r3, [r5, #0]
 800e0c0:	0607      	lsls	r7, r0, #24
 800e0c2:	f103 0104 	add.w	r1, r3, #4
 800e0c6:	6029      	str	r1, [r5, #0]
 800e0c8:	d501      	bpl.n	800e0ce <_printf_i+0xbe>
 800e0ca:	681e      	ldr	r6, [r3, #0]
 800e0cc:	e003      	b.n	800e0d6 <_printf_i+0xc6>
 800e0ce:	0646      	lsls	r6, r0, #25
 800e0d0:	d5fb      	bpl.n	800e0ca <_printf_i+0xba>
 800e0d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e0d6:	2e00      	cmp	r6, #0
 800e0d8:	da03      	bge.n	800e0e2 <_printf_i+0xd2>
 800e0da:	232d      	movs	r3, #45	; 0x2d
 800e0dc:	4276      	negs	r6, r6
 800e0de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e0e2:	485a      	ldr	r0, [pc, #360]	; (800e24c <_printf_i+0x23c>)
 800e0e4:	230a      	movs	r3, #10
 800e0e6:	e012      	b.n	800e10e <_printf_i+0xfe>
 800e0e8:	682b      	ldr	r3, [r5, #0]
 800e0ea:	6820      	ldr	r0, [r4, #0]
 800e0ec:	1d19      	adds	r1, r3, #4
 800e0ee:	6029      	str	r1, [r5, #0]
 800e0f0:	0605      	lsls	r5, r0, #24
 800e0f2:	d501      	bpl.n	800e0f8 <_printf_i+0xe8>
 800e0f4:	681e      	ldr	r6, [r3, #0]
 800e0f6:	e002      	b.n	800e0fe <_printf_i+0xee>
 800e0f8:	0641      	lsls	r1, r0, #25
 800e0fa:	d5fb      	bpl.n	800e0f4 <_printf_i+0xe4>
 800e0fc:	881e      	ldrh	r6, [r3, #0]
 800e0fe:	4853      	ldr	r0, [pc, #332]	; (800e24c <_printf_i+0x23c>)
 800e100:	2f6f      	cmp	r7, #111	; 0x6f
 800e102:	bf0c      	ite	eq
 800e104:	2308      	moveq	r3, #8
 800e106:	230a      	movne	r3, #10
 800e108:	2100      	movs	r1, #0
 800e10a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e10e:	6865      	ldr	r5, [r4, #4]
 800e110:	60a5      	str	r5, [r4, #8]
 800e112:	2d00      	cmp	r5, #0
 800e114:	bfa2      	ittt	ge
 800e116:	6821      	ldrge	r1, [r4, #0]
 800e118:	f021 0104 	bicge.w	r1, r1, #4
 800e11c:	6021      	strge	r1, [r4, #0]
 800e11e:	b90e      	cbnz	r6, 800e124 <_printf_i+0x114>
 800e120:	2d00      	cmp	r5, #0
 800e122:	d04b      	beq.n	800e1bc <_printf_i+0x1ac>
 800e124:	4615      	mov	r5, r2
 800e126:	fbb6 f1f3 	udiv	r1, r6, r3
 800e12a:	fb03 6711 	mls	r7, r3, r1, r6
 800e12e:	5dc7      	ldrb	r7, [r0, r7]
 800e130:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e134:	4637      	mov	r7, r6
 800e136:	42bb      	cmp	r3, r7
 800e138:	460e      	mov	r6, r1
 800e13a:	d9f4      	bls.n	800e126 <_printf_i+0x116>
 800e13c:	2b08      	cmp	r3, #8
 800e13e:	d10b      	bne.n	800e158 <_printf_i+0x148>
 800e140:	6823      	ldr	r3, [r4, #0]
 800e142:	07de      	lsls	r6, r3, #31
 800e144:	d508      	bpl.n	800e158 <_printf_i+0x148>
 800e146:	6923      	ldr	r3, [r4, #16]
 800e148:	6861      	ldr	r1, [r4, #4]
 800e14a:	4299      	cmp	r1, r3
 800e14c:	bfde      	ittt	le
 800e14e:	2330      	movle	r3, #48	; 0x30
 800e150:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e154:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e158:	1b52      	subs	r2, r2, r5
 800e15a:	6122      	str	r2, [r4, #16]
 800e15c:	f8cd a000 	str.w	sl, [sp]
 800e160:	464b      	mov	r3, r9
 800e162:	aa03      	add	r2, sp, #12
 800e164:	4621      	mov	r1, r4
 800e166:	4640      	mov	r0, r8
 800e168:	f7ff fee4 	bl	800df34 <_printf_common>
 800e16c:	3001      	adds	r0, #1
 800e16e:	d14a      	bne.n	800e206 <_printf_i+0x1f6>
 800e170:	f04f 30ff 	mov.w	r0, #4294967295
 800e174:	b004      	add	sp, #16
 800e176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e17a:	6823      	ldr	r3, [r4, #0]
 800e17c:	f043 0320 	orr.w	r3, r3, #32
 800e180:	6023      	str	r3, [r4, #0]
 800e182:	4833      	ldr	r0, [pc, #204]	; (800e250 <_printf_i+0x240>)
 800e184:	2778      	movs	r7, #120	; 0x78
 800e186:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e18a:	6823      	ldr	r3, [r4, #0]
 800e18c:	6829      	ldr	r1, [r5, #0]
 800e18e:	061f      	lsls	r7, r3, #24
 800e190:	f851 6b04 	ldr.w	r6, [r1], #4
 800e194:	d402      	bmi.n	800e19c <_printf_i+0x18c>
 800e196:	065f      	lsls	r7, r3, #25
 800e198:	bf48      	it	mi
 800e19a:	b2b6      	uxthmi	r6, r6
 800e19c:	07df      	lsls	r7, r3, #31
 800e19e:	bf48      	it	mi
 800e1a0:	f043 0320 	orrmi.w	r3, r3, #32
 800e1a4:	6029      	str	r1, [r5, #0]
 800e1a6:	bf48      	it	mi
 800e1a8:	6023      	strmi	r3, [r4, #0]
 800e1aa:	b91e      	cbnz	r6, 800e1b4 <_printf_i+0x1a4>
 800e1ac:	6823      	ldr	r3, [r4, #0]
 800e1ae:	f023 0320 	bic.w	r3, r3, #32
 800e1b2:	6023      	str	r3, [r4, #0]
 800e1b4:	2310      	movs	r3, #16
 800e1b6:	e7a7      	b.n	800e108 <_printf_i+0xf8>
 800e1b8:	4824      	ldr	r0, [pc, #144]	; (800e24c <_printf_i+0x23c>)
 800e1ba:	e7e4      	b.n	800e186 <_printf_i+0x176>
 800e1bc:	4615      	mov	r5, r2
 800e1be:	e7bd      	b.n	800e13c <_printf_i+0x12c>
 800e1c0:	682b      	ldr	r3, [r5, #0]
 800e1c2:	6826      	ldr	r6, [r4, #0]
 800e1c4:	6961      	ldr	r1, [r4, #20]
 800e1c6:	1d18      	adds	r0, r3, #4
 800e1c8:	6028      	str	r0, [r5, #0]
 800e1ca:	0635      	lsls	r5, r6, #24
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	d501      	bpl.n	800e1d4 <_printf_i+0x1c4>
 800e1d0:	6019      	str	r1, [r3, #0]
 800e1d2:	e002      	b.n	800e1da <_printf_i+0x1ca>
 800e1d4:	0670      	lsls	r0, r6, #25
 800e1d6:	d5fb      	bpl.n	800e1d0 <_printf_i+0x1c0>
 800e1d8:	8019      	strh	r1, [r3, #0]
 800e1da:	2300      	movs	r3, #0
 800e1dc:	6123      	str	r3, [r4, #16]
 800e1de:	4615      	mov	r5, r2
 800e1e0:	e7bc      	b.n	800e15c <_printf_i+0x14c>
 800e1e2:	682b      	ldr	r3, [r5, #0]
 800e1e4:	1d1a      	adds	r2, r3, #4
 800e1e6:	602a      	str	r2, [r5, #0]
 800e1e8:	681d      	ldr	r5, [r3, #0]
 800e1ea:	6862      	ldr	r2, [r4, #4]
 800e1ec:	2100      	movs	r1, #0
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	f7f1 ffce 	bl	8000190 <memchr>
 800e1f4:	b108      	cbz	r0, 800e1fa <_printf_i+0x1ea>
 800e1f6:	1b40      	subs	r0, r0, r5
 800e1f8:	6060      	str	r0, [r4, #4]
 800e1fa:	6863      	ldr	r3, [r4, #4]
 800e1fc:	6123      	str	r3, [r4, #16]
 800e1fe:	2300      	movs	r3, #0
 800e200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e204:	e7aa      	b.n	800e15c <_printf_i+0x14c>
 800e206:	6923      	ldr	r3, [r4, #16]
 800e208:	462a      	mov	r2, r5
 800e20a:	4649      	mov	r1, r9
 800e20c:	4640      	mov	r0, r8
 800e20e:	47d0      	blx	sl
 800e210:	3001      	adds	r0, #1
 800e212:	d0ad      	beq.n	800e170 <_printf_i+0x160>
 800e214:	6823      	ldr	r3, [r4, #0]
 800e216:	079b      	lsls	r3, r3, #30
 800e218:	d413      	bmi.n	800e242 <_printf_i+0x232>
 800e21a:	68e0      	ldr	r0, [r4, #12]
 800e21c:	9b03      	ldr	r3, [sp, #12]
 800e21e:	4298      	cmp	r0, r3
 800e220:	bfb8      	it	lt
 800e222:	4618      	movlt	r0, r3
 800e224:	e7a6      	b.n	800e174 <_printf_i+0x164>
 800e226:	2301      	movs	r3, #1
 800e228:	4632      	mov	r2, r6
 800e22a:	4649      	mov	r1, r9
 800e22c:	4640      	mov	r0, r8
 800e22e:	47d0      	blx	sl
 800e230:	3001      	adds	r0, #1
 800e232:	d09d      	beq.n	800e170 <_printf_i+0x160>
 800e234:	3501      	adds	r5, #1
 800e236:	68e3      	ldr	r3, [r4, #12]
 800e238:	9903      	ldr	r1, [sp, #12]
 800e23a:	1a5b      	subs	r3, r3, r1
 800e23c:	42ab      	cmp	r3, r5
 800e23e:	dcf2      	bgt.n	800e226 <_printf_i+0x216>
 800e240:	e7eb      	b.n	800e21a <_printf_i+0x20a>
 800e242:	2500      	movs	r5, #0
 800e244:	f104 0619 	add.w	r6, r4, #25
 800e248:	e7f5      	b.n	800e236 <_printf_i+0x226>
 800e24a:	bf00      	nop
 800e24c:	0800fd4d 	.word	0x0800fd4d
 800e250:	0800fd5e 	.word	0x0800fd5e

0800e254 <__sflush_r>:
 800e254:	898a      	ldrh	r2, [r1, #12]
 800e256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e25a:	4605      	mov	r5, r0
 800e25c:	0710      	lsls	r0, r2, #28
 800e25e:	460c      	mov	r4, r1
 800e260:	d458      	bmi.n	800e314 <__sflush_r+0xc0>
 800e262:	684b      	ldr	r3, [r1, #4]
 800e264:	2b00      	cmp	r3, #0
 800e266:	dc05      	bgt.n	800e274 <__sflush_r+0x20>
 800e268:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	dc02      	bgt.n	800e274 <__sflush_r+0x20>
 800e26e:	2000      	movs	r0, #0
 800e270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e274:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e276:	2e00      	cmp	r6, #0
 800e278:	d0f9      	beq.n	800e26e <__sflush_r+0x1a>
 800e27a:	2300      	movs	r3, #0
 800e27c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e280:	682f      	ldr	r7, [r5, #0]
 800e282:	6a21      	ldr	r1, [r4, #32]
 800e284:	602b      	str	r3, [r5, #0]
 800e286:	d032      	beq.n	800e2ee <__sflush_r+0x9a>
 800e288:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e28a:	89a3      	ldrh	r3, [r4, #12]
 800e28c:	075a      	lsls	r2, r3, #29
 800e28e:	d505      	bpl.n	800e29c <__sflush_r+0x48>
 800e290:	6863      	ldr	r3, [r4, #4]
 800e292:	1ac0      	subs	r0, r0, r3
 800e294:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e296:	b10b      	cbz	r3, 800e29c <__sflush_r+0x48>
 800e298:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e29a:	1ac0      	subs	r0, r0, r3
 800e29c:	2300      	movs	r3, #0
 800e29e:	4602      	mov	r2, r0
 800e2a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e2a2:	6a21      	ldr	r1, [r4, #32]
 800e2a4:	4628      	mov	r0, r5
 800e2a6:	47b0      	blx	r6
 800e2a8:	1c43      	adds	r3, r0, #1
 800e2aa:	89a3      	ldrh	r3, [r4, #12]
 800e2ac:	d106      	bne.n	800e2bc <__sflush_r+0x68>
 800e2ae:	6829      	ldr	r1, [r5, #0]
 800e2b0:	291d      	cmp	r1, #29
 800e2b2:	d82b      	bhi.n	800e30c <__sflush_r+0xb8>
 800e2b4:	4a29      	ldr	r2, [pc, #164]	; (800e35c <__sflush_r+0x108>)
 800e2b6:	410a      	asrs	r2, r1
 800e2b8:	07d6      	lsls	r6, r2, #31
 800e2ba:	d427      	bmi.n	800e30c <__sflush_r+0xb8>
 800e2bc:	2200      	movs	r2, #0
 800e2be:	6062      	str	r2, [r4, #4]
 800e2c0:	04d9      	lsls	r1, r3, #19
 800e2c2:	6922      	ldr	r2, [r4, #16]
 800e2c4:	6022      	str	r2, [r4, #0]
 800e2c6:	d504      	bpl.n	800e2d2 <__sflush_r+0x7e>
 800e2c8:	1c42      	adds	r2, r0, #1
 800e2ca:	d101      	bne.n	800e2d0 <__sflush_r+0x7c>
 800e2cc:	682b      	ldr	r3, [r5, #0]
 800e2ce:	b903      	cbnz	r3, 800e2d2 <__sflush_r+0x7e>
 800e2d0:	6560      	str	r0, [r4, #84]	; 0x54
 800e2d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e2d4:	602f      	str	r7, [r5, #0]
 800e2d6:	2900      	cmp	r1, #0
 800e2d8:	d0c9      	beq.n	800e26e <__sflush_r+0x1a>
 800e2da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e2de:	4299      	cmp	r1, r3
 800e2e0:	d002      	beq.n	800e2e8 <__sflush_r+0x94>
 800e2e2:	4628      	mov	r0, r5
 800e2e4:	f7ff fbea 	bl	800dabc <_free_r>
 800e2e8:	2000      	movs	r0, #0
 800e2ea:	6360      	str	r0, [r4, #52]	; 0x34
 800e2ec:	e7c0      	b.n	800e270 <__sflush_r+0x1c>
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	4628      	mov	r0, r5
 800e2f2:	47b0      	blx	r6
 800e2f4:	1c41      	adds	r1, r0, #1
 800e2f6:	d1c8      	bne.n	800e28a <__sflush_r+0x36>
 800e2f8:	682b      	ldr	r3, [r5, #0]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d0c5      	beq.n	800e28a <__sflush_r+0x36>
 800e2fe:	2b1d      	cmp	r3, #29
 800e300:	d001      	beq.n	800e306 <__sflush_r+0xb2>
 800e302:	2b16      	cmp	r3, #22
 800e304:	d101      	bne.n	800e30a <__sflush_r+0xb6>
 800e306:	602f      	str	r7, [r5, #0]
 800e308:	e7b1      	b.n	800e26e <__sflush_r+0x1a>
 800e30a:	89a3      	ldrh	r3, [r4, #12]
 800e30c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e310:	81a3      	strh	r3, [r4, #12]
 800e312:	e7ad      	b.n	800e270 <__sflush_r+0x1c>
 800e314:	690f      	ldr	r7, [r1, #16]
 800e316:	2f00      	cmp	r7, #0
 800e318:	d0a9      	beq.n	800e26e <__sflush_r+0x1a>
 800e31a:	0793      	lsls	r3, r2, #30
 800e31c:	680e      	ldr	r6, [r1, #0]
 800e31e:	bf08      	it	eq
 800e320:	694b      	ldreq	r3, [r1, #20]
 800e322:	600f      	str	r7, [r1, #0]
 800e324:	bf18      	it	ne
 800e326:	2300      	movne	r3, #0
 800e328:	eba6 0807 	sub.w	r8, r6, r7
 800e32c:	608b      	str	r3, [r1, #8]
 800e32e:	f1b8 0f00 	cmp.w	r8, #0
 800e332:	dd9c      	ble.n	800e26e <__sflush_r+0x1a>
 800e334:	6a21      	ldr	r1, [r4, #32]
 800e336:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e338:	4643      	mov	r3, r8
 800e33a:	463a      	mov	r2, r7
 800e33c:	4628      	mov	r0, r5
 800e33e:	47b0      	blx	r6
 800e340:	2800      	cmp	r0, #0
 800e342:	dc06      	bgt.n	800e352 <__sflush_r+0xfe>
 800e344:	89a3      	ldrh	r3, [r4, #12]
 800e346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e34a:	81a3      	strh	r3, [r4, #12]
 800e34c:	f04f 30ff 	mov.w	r0, #4294967295
 800e350:	e78e      	b.n	800e270 <__sflush_r+0x1c>
 800e352:	4407      	add	r7, r0
 800e354:	eba8 0800 	sub.w	r8, r8, r0
 800e358:	e7e9      	b.n	800e32e <__sflush_r+0xda>
 800e35a:	bf00      	nop
 800e35c:	dfbffffe 	.word	0xdfbffffe

0800e360 <_fflush_r>:
 800e360:	b538      	push	{r3, r4, r5, lr}
 800e362:	690b      	ldr	r3, [r1, #16]
 800e364:	4605      	mov	r5, r0
 800e366:	460c      	mov	r4, r1
 800e368:	b913      	cbnz	r3, 800e370 <_fflush_r+0x10>
 800e36a:	2500      	movs	r5, #0
 800e36c:	4628      	mov	r0, r5
 800e36e:	bd38      	pop	{r3, r4, r5, pc}
 800e370:	b118      	cbz	r0, 800e37a <_fflush_r+0x1a>
 800e372:	6a03      	ldr	r3, [r0, #32]
 800e374:	b90b      	cbnz	r3, 800e37a <_fflush_r+0x1a>
 800e376:	f7ff f97b 	bl	800d670 <__sinit>
 800e37a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d0f3      	beq.n	800e36a <_fflush_r+0xa>
 800e382:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e384:	07d0      	lsls	r0, r2, #31
 800e386:	d404      	bmi.n	800e392 <_fflush_r+0x32>
 800e388:	0599      	lsls	r1, r3, #22
 800e38a:	d402      	bmi.n	800e392 <_fflush_r+0x32>
 800e38c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e38e:	f7ff fb84 	bl	800da9a <__retarget_lock_acquire_recursive>
 800e392:	4628      	mov	r0, r5
 800e394:	4621      	mov	r1, r4
 800e396:	f7ff ff5d 	bl	800e254 <__sflush_r>
 800e39a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e39c:	07da      	lsls	r2, r3, #31
 800e39e:	4605      	mov	r5, r0
 800e3a0:	d4e4      	bmi.n	800e36c <_fflush_r+0xc>
 800e3a2:	89a3      	ldrh	r3, [r4, #12]
 800e3a4:	059b      	lsls	r3, r3, #22
 800e3a6:	d4e1      	bmi.n	800e36c <_fflush_r+0xc>
 800e3a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e3aa:	f7ff fb77 	bl	800da9c <__retarget_lock_release_recursive>
 800e3ae:	e7dd      	b.n	800e36c <_fflush_r+0xc>

0800e3b0 <__swhatbuf_r>:
 800e3b0:	b570      	push	{r4, r5, r6, lr}
 800e3b2:	460c      	mov	r4, r1
 800e3b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e3b8:	2900      	cmp	r1, #0
 800e3ba:	b096      	sub	sp, #88	; 0x58
 800e3bc:	4615      	mov	r5, r2
 800e3be:	461e      	mov	r6, r3
 800e3c0:	da0d      	bge.n	800e3de <__swhatbuf_r+0x2e>
 800e3c2:	89a3      	ldrh	r3, [r4, #12]
 800e3c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e3c8:	f04f 0100 	mov.w	r1, #0
 800e3cc:	bf0c      	ite	eq
 800e3ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e3d2:	2340      	movne	r3, #64	; 0x40
 800e3d4:	2000      	movs	r0, #0
 800e3d6:	6031      	str	r1, [r6, #0]
 800e3d8:	602b      	str	r3, [r5, #0]
 800e3da:	b016      	add	sp, #88	; 0x58
 800e3dc:	bd70      	pop	{r4, r5, r6, pc}
 800e3de:	466a      	mov	r2, sp
 800e3e0:	f000 f88a 	bl	800e4f8 <_fstat_r>
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	dbec      	blt.n	800e3c2 <__swhatbuf_r+0x12>
 800e3e8:	9901      	ldr	r1, [sp, #4]
 800e3ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e3ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e3f2:	4259      	negs	r1, r3
 800e3f4:	4159      	adcs	r1, r3
 800e3f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3fa:	e7eb      	b.n	800e3d4 <__swhatbuf_r+0x24>

0800e3fc <__smakebuf_r>:
 800e3fc:	898b      	ldrh	r3, [r1, #12]
 800e3fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e400:	079d      	lsls	r5, r3, #30
 800e402:	4606      	mov	r6, r0
 800e404:	460c      	mov	r4, r1
 800e406:	d507      	bpl.n	800e418 <__smakebuf_r+0x1c>
 800e408:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e40c:	6023      	str	r3, [r4, #0]
 800e40e:	6123      	str	r3, [r4, #16]
 800e410:	2301      	movs	r3, #1
 800e412:	6163      	str	r3, [r4, #20]
 800e414:	b002      	add	sp, #8
 800e416:	bd70      	pop	{r4, r5, r6, pc}
 800e418:	ab01      	add	r3, sp, #4
 800e41a:	466a      	mov	r2, sp
 800e41c:	f7ff ffc8 	bl	800e3b0 <__swhatbuf_r>
 800e420:	9900      	ldr	r1, [sp, #0]
 800e422:	4605      	mov	r5, r0
 800e424:	4630      	mov	r0, r6
 800e426:	f7ff fbb5 	bl	800db94 <_malloc_r>
 800e42a:	b948      	cbnz	r0, 800e440 <__smakebuf_r+0x44>
 800e42c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e430:	059a      	lsls	r2, r3, #22
 800e432:	d4ef      	bmi.n	800e414 <__smakebuf_r+0x18>
 800e434:	f023 0303 	bic.w	r3, r3, #3
 800e438:	f043 0302 	orr.w	r3, r3, #2
 800e43c:	81a3      	strh	r3, [r4, #12]
 800e43e:	e7e3      	b.n	800e408 <__smakebuf_r+0xc>
 800e440:	89a3      	ldrh	r3, [r4, #12]
 800e442:	6020      	str	r0, [r4, #0]
 800e444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e448:	81a3      	strh	r3, [r4, #12]
 800e44a:	9b00      	ldr	r3, [sp, #0]
 800e44c:	6163      	str	r3, [r4, #20]
 800e44e:	9b01      	ldr	r3, [sp, #4]
 800e450:	6120      	str	r0, [r4, #16]
 800e452:	b15b      	cbz	r3, 800e46c <__smakebuf_r+0x70>
 800e454:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e458:	4630      	mov	r0, r6
 800e45a:	f000 f85f 	bl	800e51c <_isatty_r>
 800e45e:	b128      	cbz	r0, 800e46c <__smakebuf_r+0x70>
 800e460:	89a3      	ldrh	r3, [r4, #12]
 800e462:	f023 0303 	bic.w	r3, r3, #3
 800e466:	f043 0301 	orr.w	r3, r3, #1
 800e46a:	81a3      	strh	r3, [r4, #12]
 800e46c:	89a3      	ldrh	r3, [r4, #12]
 800e46e:	431d      	orrs	r5, r3
 800e470:	81a5      	strh	r5, [r4, #12]
 800e472:	e7cf      	b.n	800e414 <__smakebuf_r+0x18>

0800e474 <_putc_r>:
 800e474:	b570      	push	{r4, r5, r6, lr}
 800e476:	460d      	mov	r5, r1
 800e478:	4614      	mov	r4, r2
 800e47a:	4606      	mov	r6, r0
 800e47c:	b118      	cbz	r0, 800e486 <_putc_r+0x12>
 800e47e:	6a03      	ldr	r3, [r0, #32]
 800e480:	b90b      	cbnz	r3, 800e486 <_putc_r+0x12>
 800e482:	f7ff f8f5 	bl	800d670 <__sinit>
 800e486:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e488:	07d8      	lsls	r0, r3, #31
 800e48a:	d405      	bmi.n	800e498 <_putc_r+0x24>
 800e48c:	89a3      	ldrh	r3, [r4, #12]
 800e48e:	0599      	lsls	r1, r3, #22
 800e490:	d402      	bmi.n	800e498 <_putc_r+0x24>
 800e492:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e494:	f7ff fb01 	bl	800da9a <__retarget_lock_acquire_recursive>
 800e498:	68a3      	ldr	r3, [r4, #8]
 800e49a:	3b01      	subs	r3, #1
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	60a3      	str	r3, [r4, #8]
 800e4a0:	da05      	bge.n	800e4ae <_putc_r+0x3a>
 800e4a2:	69a2      	ldr	r2, [r4, #24]
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	db12      	blt.n	800e4ce <_putc_r+0x5a>
 800e4a8:	b2eb      	uxtb	r3, r5
 800e4aa:	2b0a      	cmp	r3, #10
 800e4ac:	d00f      	beq.n	800e4ce <_putc_r+0x5a>
 800e4ae:	6823      	ldr	r3, [r4, #0]
 800e4b0:	1c5a      	adds	r2, r3, #1
 800e4b2:	6022      	str	r2, [r4, #0]
 800e4b4:	701d      	strb	r5, [r3, #0]
 800e4b6:	b2ed      	uxtb	r5, r5
 800e4b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e4ba:	07da      	lsls	r2, r3, #31
 800e4bc:	d405      	bmi.n	800e4ca <_putc_r+0x56>
 800e4be:	89a3      	ldrh	r3, [r4, #12]
 800e4c0:	059b      	lsls	r3, r3, #22
 800e4c2:	d402      	bmi.n	800e4ca <_putc_r+0x56>
 800e4c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e4c6:	f7ff fae9 	bl	800da9c <__retarget_lock_release_recursive>
 800e4ca:	4628      	mov	r0, r5
 800e4cc:	bd70      	pop	{r4, r5, r6, pc}
 800e4ce:	4629      	mov	r1, r5
 800e4d0:	4622      	mov	r2, r4
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	f7ff f9bb 	bl	800d84e <__swbuf_r>
 800e4d8:	4605      	mov	r5, r0
 800e4da:	e7ed      	b.n	800e4b8 <_putc_r+0x44>

0800e4dc <strchr>:
 800e4dc:	b2c9      	uxtb	r1, r1
 800e4de:	4603      	mov	r3, r0
 800e4e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4e4:	b11a      	cbz	r2, 800e4ee <strchr+0x12>
 800e4e6:	428a      	cmp	r2, r1
 800e4e8:	d1f9      	bne.n	800e4de <strchr+0x2>
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	4770      	bx	lr
 800e4ee:	2900      	cmp	r1, #0
 800e4f0:	bf18      	it	ne
 800e4f2:	2300      	movne	r3, #0
 800e4f4:	e7f9      	b.n	800e4ea <strchr+0xe>
	...

0800e4f8 <_fstat_r>:
 800e4f8:	b538      	push	{r3, r4, r5, lr}
 800e4fa:	4d07      	ldr	r5, [pc, #28]	; (800e518 <_fstat_r+0x20>)
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	4604      	mov	r4, r0
 800e500:	4608      	mov	r0, r1
 800e502:	4611      	mov	r1, r2
 800e504:	602b      	str	r3, [r5, #0]
 800e506:	f7f4 fdde 	bl	80030c6 <_fstat>
 800e50a:	1c43      	adds	r3, r0, #1
 800e50c:	d102      	bne.n	800e514 <_fstat_r+0x1c>
 800e50e:	682b      	ldr	r3, [r5, #0]
 800e510:	b103      	cbz	r3, 800e514 <_fstat_r+0x1c>
 800e512:	6023      	str	r3, [r4, #0]
 800e514:	bd38      	pop	{r3, r4, r5, pc}
 800e516:	bf00      	nop
 800e518:	20001a80 	.word	0x20001a80

0800e51c <_isatty_r>:
 800e51c:	b538      	push	{r3, r4, r5, lr}
 800e51e:	4d06      	ldr	r5, [pc, #24]	; (800e538 <_isatty_r+0x1c>)
 800e520:	2300      	movs	r3, #0
 800e522:	4604      	mov	r4, r0
 800e524:	4608      	mov	r0, r1
 800e526:	602b      	str	r3, [r5, #0]
 800e528:	f7f4 fddd 	bl	80030e6 <_isatty>
 800e52c:	1c43      	adds	r3, r0, #1
 800e52e:	d102      	bne.n	800e536 <_isatty_r+0x1a>
 800e530:	682b      	ldr	r3, [r5, #0]
 800e532:	b103      	cbz	r3, 800e536 <_isatty_r+0x1a>
 800e534:	6023      	str	r3, [r4, #0]
 800e536:	bd38      	pop	{r3, r4, r5, pc}
 800e538:	20001a80 	.word	0x20001a80

0800e53c <_sbrk_r>:
 800e53c:	b538      	push	{r3, r4, r5, lr}
 800e53e:	4d06      	ldr	r5, [pc, #24]	; (800e558 <_sbrk_r+0x1c>)
 800e540:	2300      	movs	r3, #0
 800e542:	4604      	mov	r4, r0
 800e544:	4608      	mov	r0, r1
 800e546:	602b      	str	r3, [r5, #0]
 800e548:	f7f4 fde6 	bl	8003118 <_sbrk>
 800e54c:	1c43      	adds	r3, r0, #1
 800e54e:	d102      	bne.n	800e556 <_sbrk_r+0x1a>
 800e550:	682b      	ldr	r3, [r5, #0]
 800e552:	b103      	cbz	r3, 800e556 <_sbrk_r+0x1a>
 800e554:	6023      	str	r3, [r4, #0]
 800e556:	bd38      	pop	{r3, r4, r5, pc}
 800e558:	20001a80 	.word	0x20001a80

0800e55c <_init>:
 800e55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e55e:	bf00      	nop
 800e560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e562:	bc08      	pop	{r3}
 800e564:	469e      	mov	lr, r3
 800e566:	4770      	bx	lr

0800e568 <_fini>:
 800e568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e56a:	bf00      	nop
 800e56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e56e:	bc08      	pop	{r3}
 800e570:	469e      	mov	lr, r3
 800e572:	4770      	bx	lr
