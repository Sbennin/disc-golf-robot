
Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006498  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  080065d8  080065d8  000165d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080068f0  080068f0  000168f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080068f8  080068f8  000168f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080068fc  080068fc  000168fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  20000008  08006900  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000578  20000074  0800696c  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  200005ec  0800696c  000205ec  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 11 .debug_info   00014f24  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000031a3  00000000  00000000  0003500b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000016c8  00000000  00000000  000381b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000112f  00000000  00000000  00039878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00022ef9  00000000  00000000  0003a9a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00016138  00000000  00000000  0005d8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d96f0  00000000  00000000  000739d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000066bc  00000000  00000000  0014d0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004a  00000000  00000000  00153784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	080065c0 	.word	0x080065c0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	080065c0 	.word	0x080065c0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2uiz>:
 80009cc:	004a      	lsls	r2, r1, #1
 80009ce:	d211      	bcs.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009d4:	d211      	bcs.n	80009fa <__aeabi_d2uiz+0x2e>
 80009d6:	d50d      	bpl.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e0:	d40e      	bmi.n	8000a00 <__aeabi_d2uiz+0x34>
 80009e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ee:	fa23 f002 	lsr.w	r0, r3, r2
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d102      	bne.n	8000a06 <__aeabi_d2uiz+0x3a>
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	4770      	bx	lr
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	4770      	bx	lr

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b970 	b.w	8000d04 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9e08      	ldr	r6, [sp, #32]
 8000a42:	460d      	mov	r5, r1
 8000a44:	4604      	mov	r4, r0
 8000a46:	460f      	mov	r7, r1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d14a      	bne.n	8000ae2 <__udivmoddi4+0xa6>
 8000a4c:	428a      	cmp	r2, r1
 8000a4e:	4694      	mov	ip, r2
 8000a50:	d965      	bls.n	8000b1e <__udivmoddi4+0xe2>
 8000a52:	fab2 f382 	clz	r3, r2
 8000a56:	b143      	cbz	r3, 8000a6a <__udivmoddi4+0x2e>
 8000a58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a5c:	f1c3 0220 	rsb	r2, r3, #32
 8000a60:	409f      	lsls	r7, r3
 8000a62:	fa20 f202 	lsr.w	r2, r0, r2
 8000a66:	4317      	orrs	r7, r2
 8000a68:	409c      	lsls	r4, r3
 8000a6a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a6e:	fa1f f58c 	uxth.w	r5, ip
 8000a72:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a76:	0c22      	lsrs	r2, r4, #16
 8000a78:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a7c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a80:	fb01 f005 	mul.w	r0, r1, r5
 8000a84:	4290      	cmp	r0, r2
 8000a86:	d90a      	bls.n	8000a9e <__udivmoddi4+0x62>
 8000a88:	eb1c 0202 	adds.w	r2, ip, r2
 8000a8c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a90:	f080 811c 	bcs.w	8000ccc <__udivmoddi4+0x290>
 8000a94:	4290      	cmp	r0, r2
 8000a96:	f240 8119 	bls.w	8000ccc <__udivmoddi4+0x290>
 8000a9a:	3902      	subs	r1, #2
 8000a9c:	4462      	add	r2, ip
 8000a9e:	1a12      	subs	r2, r2, r0
 8000aa0:	b2a4      	uxth	r4, r4
 8000aa2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aa6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aaa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aae:	fb00 f505 	mul.w	r5, r0, r5
 8000ab2:	42a5      	cmp	r5, r4
 8000ab4:	d90a      	bls.n	8000acc <__udivmoddi4+0x90>
 8000ab6:	eb1c 0404 	adds.w	r4, ip, r4
 8000aba:	f100 32ff 	add.w	r2, r0, #4294967295
 8000abe:	f080 8107 	bcs.w	8000cd0 <__udivmoddi4+0x294>
 8000ac2:	42a5      	cmp	r5, r4
 8000ac4:	f240 8104 	bls.w	8000cd0 <__udivmoddi4+0x294>
 8000ac8:	4464      	add	r4, ip
 8000aca:	3802      	subs	r0, #2
 8000acc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ad0:	1b64      	subs	r4, r4, r5
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	b11e      	cbz	r6, 8000ade <__udivmoddi4+0xa2>
 8000ad6:	40dc      	lsrs	r4, r3
 8000ad8:	2300      	movs	r3, #0
 8000ada:	e9c6 4300 	strd	r4, r3, [r6]
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	428b      	cmp	r3, r1
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0xbc>
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	f000 80ed 	beq.w	8000cc6 <__udivmoddi4+0x28a>
 8000aec:	2100      	movs	r1, #0
 8000aee:	e9c6 0500 	strd	r0, r5, [r6]
 8000af2:	4608      	mov	r0, r1
 8000af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af8:	fab3 f183 	clz	r1, r3
 8000afc:	2900      	cmp	r1, #0
 8000afe:	d149      	bne.n	8000b94 <__udivmoddi4+0x158>
 8000b00:	42ab      	cmp	r3, r5
 8000b02:	d302      	bcc.n	8000b0a <__udivmoddi4+0xce>
 8000b04:	4282      	cmp	r2, r0
 8000b06:	f200 80f8 	bhi.w	8000cfa <__udivmoddi4+0x2be>
 8000b0a:	1a84      	subs	r4, r0, r2
 8000b0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b10:	2001      	movs	r0, #1
 8000b12:	4617      	mov	r7, r2
 8000b14:	2e00      	cmp	r6, #0
 8000b16:	d0e2      	beq.n	8000ade <__udivmoddi4+0xa2>
 8000b18:	e9c6 4700 	strd	r4, r7, [r6]
 8000b1c:	e7df      	b.n	8000ade <__udivmoddi4+0xa2>
 8000b1e:	b902      	cbnz	r2, 8000b22 <__udivmoddi4+0xe6>
 8000b20:	deff      	udf	#255	; 0xff
 8000b22:	fab2 f382 	clz	r3, r2
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8090 	bne.w	8000c4c <__udivmoddi4+0x210>
 8000b2c:	1a8a      	subs	r2, r1, r2
 8000b2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b32:	fa1f fe8c 	uxth.w	lr, ip
 8000b36:	2101      	movs	r1, #1
 8000b38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b40:	0c22      	lsrs	r2, r4, #16
 8000b42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b46:	fb0e f005 	mul.w	r0, lr, r5
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x124>
 8000b4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b52:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x122>
 8000b58:	4290      	cmp	r0, r2
 8000b5a:	f200 80cb 	bhi.w	8000cf4 <__udivmoddi4+0x2b8>
 8000b5e:	4645      	mov	r5, r8
 8000b60:	1a12      	subs	r2, r2, r0
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b68:	fb07 2210 	mls	r2, r7, r0, r2
 8000b6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b70:	fb0e fe00 	mul.w	lr, lr, r0
 8000b74:	45a6      	cmp	lr, r4
 8000b76:	d908      	bls.n	8000b8a <__udivmoddi4+0x14e>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b80:	d202      	bcs.n	8000b88 <__udivmoddi4+0x14c>
 8000b82:	45a6      	cmp	lr, r4
 8000b84:	f200 80bb 	bhi.w	8000cfe <__udivmoddi4+0x2c2>
 8000b88:	4610      	mov	r0, r2
 8000b8a:	eba4 040e 	sub.w	r4, r4, lr
 8000b8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b92:	e79f      	b.n	8000ad4 <__udivmoddi4+0x98>
 8000b94:	f1c1 0720 	rsb	r7, r1, #32
 8000b98:	408b      	lsls	r3, r1
 8000b9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ba2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ba6:	fa20 f307 	lsr.w	r3, r0, r7
 8000baa:	40fd      	lsrs	r5, r7
 8000bac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb0:	4323      	orrs	r3, r4
 8000bb2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bb6:	fa1f fe8c 	uxth.w	lr, ip
 8000bba:	fb09 5518 	mls	r5, r9, r8, r5
 8000bbe:	0c1c      	lsrs	r4, r3, #16
 8000bc0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bc4:	fb08 f50e 	mul.w	r5, r8, lr
 8000bc8:	42a5      	cmp	r5, r4
 8000bca:	fa02 f201 	lsl.w	r2, r2, r1
 8000bce:	fa00 f001 	lsl.w	r0, r0, r1
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b0>
 8000bd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bdc:	f080 8088 	bcs.w	8000cf0 <__udivmoddi4+0x2b4>
 8000be0:	42a5      	cmp	r5, r4
 8000be2:	f240 8085 	bls.w	8000cf0 <__udivmoddi4+0x2b4>
 8000be6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bea:	4464      	add	r4, ip
 8000bec:	1b64      	subs	r4, r4, r5
 8000bee:	b29d      	uxth	r5, r3
 8000bf0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bf4:	fb09 4413 	mls	r4, r9, r3, r4
 8000bf8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bfc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c00:	45a6      	cmp	lr, r4
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1da>
 8000c04:	eb1c 0404 	adds.w	r4, ip, r4
 8000c08:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c0c:	d26c      	bcs.n	8000ce8 <__udivmoddi4+0x2ac>
 8000c0e:	45a6      	cmp	lr, r4
 8000c10:	d96a      	bls.n	8000ce8 <__udivmoddi4+0x2ac>
 8000c12:	3b02      	subs	r3, #2
 8000c14:	4464      	add	r4, ip
 8000c16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c1e:	eba4 040e 	sub.w	r4, r4, lr
 8000c22:	42ac      	cmp	r4, r5
 8000c24:	46c8      	mov	r8, r9
 8000c26:	46ae      	mov	lr, r5
 8000c28:	d356      	bcc.n	8000cd8 <__udivmoddi4+0x29c>
 8000c2a:	d053      	beq.n	8000cd4 <__udivmoddi4+0x298>
 8000c2c:	b156      	cbz	r6, 8000c44 <__udivmoddi4+0x208>
 8000c2e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c32:	eb64 040e 	sbc.w	r4, r4, lr
 8000c36:	fa04 f707 	lsl.w	r7, r4, r7
 8000c3a:	40ca      	lsrs	r2, r1
 8000c3c:	40cc      	lsrs	r4, r1
 8000c3e:	4317      	orrs	r7, r2
 8000c40:	e9c6 7400 	strd	r7, r4, [r6]
 8000c44:	4618      	mov	r0, r3
 8000c46:	2100      	movs	r1, #0
 8000c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4c:	f1c3 0120 	rsb	r1, r3, #32
 8000c50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c54:	fa20 f201 	lsr.w	r2, r0, r1
 8000c58:	fa25 f101 	lsr.w	r1, r5, r1
 8000c5c:	409d      	lsls	r5, r3
 8000c5e:	432a      	orrs	r2, r5
 8000c60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c70:	0c11      	lsrs	r1, r2, #16
 8000c72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c76:	fb00 f50e 	mul.w	r5, r0, lr
 8000c7a:	428d      	cmp	r5, r1
 8000c7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x258>
 8000c82:	eb1c 0101 	adds.w	r1, ip, r1
 8000c86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c8a:	d22f      	bcs.n	8000cec <__udivmoddi4+0x2b0>
 8000c8c:	428d      	cmp	r5, r1
 8000c8e:	d92d      	bls.n	8000cec <__udivmoddi4+0x2b0>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4461      	add	r1, ip
 8000c94:	1b49      	subs	r1, r1, r5
 8000c96:	b292      	uxth	r2, r2
 8000c98:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c9c:	fb07 1115 	mls	r1, r7, r5, r1
 8000ca0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ca4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ca8:	4291      	cmp	r1, r2
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x282>
 8000cac:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cb4:	d216      	bcs.n	8000ce4 <__udivmoddi4+0x2a8>
 8000cb6:	4291      	cmp	r1, r2
 8000cb8:	d914      	bls.n	8000ce4 <__udivmoddi4+0x2a8>
 8000cba:	3d02      	subs	r5, #2
 8000cbc:	4462      	add	r2, ip
 8000cbe:	1a52      	subs	r2, r2, r1
 8000cc0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cc4:	e738      	b.n	8000b38 <__udivmoddi4+0xfc>
 8000cc6:	4631      	mov	r1, r6
 8000cc8:	4630      	mov	r0, r6
 8000cca:	e708      	b.n	8000ade <__udivmoddi4+0xa2>
 8000ccc:	4639      	mov	r1, r7
 8000cce:	e6e6      	b.n	8000a9e <__udivmoddi4+0x62>
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	e6fb      	b.n	8000acc <__udivmoddi4+0x90>
 8000cd4:	4548      	cmp	r0, r9
 8000cd6:	d2a9      	bcs.n	8000c2c <__udivmoddi4+0x1f0>
 8000cd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cdc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	e7a3      	b.n	8000c2c <__udivmoddi4+0x1f0>
 8000ce4:	4645      	mov	r5, r8
 8000ce6:	e7ea      	b.n	8000cbe <__udivmoddi4+0x282>
 8000ce8:	462b      	mov	r3, r5
 8000cea:	e794      	b.n	8000c16 <__udivmoddi4+0x1da>
 8000cec:	4640      	mov	r0, r8
 8000cee:	e7d1      	b.n	8000c94 <__udivmoddi4+0x258>
 8000cf0:	46d0      	mov	r8, sl
 8000cf2:	e77b      	b.n	8000bec <__udivmoddi4+0x1b0>
 8000cf4:	3d02      	subs	r5, #2
 8000cf6:	4462      	add	r2, ip
 8000cf8:	e732      	b.n	8000b60 <__udivmoddi4+0x124>
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	e70a      	b.n	8000b14 <__udivmoddi4+0xd8>
 8000cfe:	4464      	add	r4, ip
 8000d00:	3802      	subs	r0, #2
 8000d02:	e742      	b.n	8000b8a <__udivmoddi4+0x14e>

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <Digital_Mode>:
	char buff[]={'@', MOTOR_ADDRESS, 'A', '\r'};
	Motor_Transmit(buff, sizeof(buff));
}

void Digital_Mode()
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
	char buff[]={'@', MOTOR_ADDRESS, 'D', '\r'};
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <Digital_Mode+0x1c>)
 8000d10:	607b      	str	r3, [r7, #4]
	Motor_Transmit(buff, sizeof(buff));
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2104      	movs	r1, #4
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 fc20 	bl	800155c <Motor_Transmit>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	0d443040 	.word	0x0d443040

08000d28 <Set_Digital_Speed>:
	uint8_t size = sprintf(buff, "@%cKP%c\r", MOTOR_ADDRESS, pc);
	Motor_Transmit(buff, size);
}

void Set_Digital_Speed(uint16_t ds)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b090      	sub	sp, #64	; 0x40
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	80fb      	strh	r3, [r7, #6]
	if (ds < 100)
 8000d32:	88fb      	ldrh	r3, [r7, #6]
 8000d34:	2b63      	cmp	r3, #99	; 0x63
 8000d36:	d802      	bhi.n	8000d3e <Set_Digital_Speed+0x16>
	{
		ds = 100;
 8000d38:	2364      	movs	r3, #100	; 0x64
 8000d3a:	80fb      	strh	r3, [r7, #6]
 8000d3c:	e007      	b.n	8000d4e <Set_Digital_Speed+0x26>
	}
	else if (ds > 9999)
 8000d3e:	88fb      	ldrh	r3, [r7, #6]
 8000d40:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d902      	bls.n	8000d4e <Set_Digital_Speed+0x26>
	{
		ds = 9999;
 8000d48:	f242 730f 	movw	r3, #9999	; 0x270f
 8000d4c:	80fb      	strh	r3, [r7, #6]
	}

	char buff[50];
	uint8_t size = sprintf(buff, "@%cM%d\r", MOTOR_ADDRESS, ds);
 8000d4e:	88fb      	ldrh	r3, [r7, #6]
 8000d50:	f107 000c 	add.w	r0, r7, #12
 8000d54:	2230      	movs	r2, #48	; 0x30
 8000d56:	4909      	ldr	r1, [pc, #36]	; (8000d7c <Set_Digital_Speed+0x54>)
 8000d58:	f004 fad4 	bl	8005304 <siprintf>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	Motor_Transmit(buff, size);
 8000d62:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8000d66:	f107 030c 	add.w	r3, r7, #12
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 fbf5 	bl	800155c <Motor_Transmit>
}
 8000d72:	bf00      	nop
 8000d74:	3740      	adds	r7, #64	; 0x40
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	08006608 	.word	0x08006608

08000d80 <Start_Motor>:

void Start_Motor()
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
	char buff[]={'@', MOTOR_ADDRESS, 'S', '\r'};
 8000d86:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <Start_Motor+0x1c>)
 8000d88:	607b      	str	r3, [r7, #4]
	Motor_Transmit(buff, sizeof(buff));
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2104      	movs	r1, #4
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 fbe4 	bl	800155c <Motor_Transmit>
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	0d533040 	.word	0x0d533040

08000da0 <Verify_Current_Speed>:

	return Array_To_Int(subbuff);
}

uint16_t Verify_Current_Speed()
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
	char tx_buff[]={'@', MOTOR_ADDRESS, 'V','M', '\r'};
 8000da6:	4a1a      	ldr	r2, [pc, #104]	; (8000e10 <Verify_Current_Speed+0x70>)
 8000da8:	f107 0318 	add.w	r3, r7, #24
 8000dac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000db0:	6018      	str	r0, [r3, #0]
 8000db2:	3304      	adds	r3, #4
 8000db4:	7019      	strb	r1, [r3, #0]
	Motor_Transmit(tx_buff, sizeof(tx_buff));
 8000db6:	f107 0318 	add.w	r3, r7, #24
 8000dba:	2105      	movs	r1, #5
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 fbcd 	bl	800155c <Motor_Transmit>

	uint8_t rx_buff[10];
	uint8_t size = Motor_Receive(rx_buff); //M9999
 8000dc2:	f107 030c 	add.w	r3, r7, #12
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 fbdc 	bl	8001584 <Motor_Receive>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	77fb      	strb	r3, [r7, #31]
	if (size == 0)
 8000dd0:	7ffb      	ldrb	r3, [r7, #31]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d101      	bne.n	8000dda <Verify_Current_Speed+0x3a>
	{
		return 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e015      	b.n	8000e06 <Verify_Current_Speed+0x66>
	}

	char subbuff[5];
	memcpy( subbuff, &rx_buff[1], size - 2 );
 8000dda:	7ffb      	ldrb	r3, [r7, #31]
 8000ddc:	3b02      	subs	r3, #2
 8000dde:	461a      	mov	r2, r3
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	1c59      	adds	r1, r3, #1
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	4618      	mov	r0, r3
 8000dea:	f004 fb0d 	bl	8005408 <memcpy>
	subbuff[size - 2] = '\0';
 8000dee:	7ffb      	ldrb	r3, [r7, #31]
 8000df0:	3b02      	subs	r3, #2
 8000df2:	3320      	adds	r3, #32
 8000df4:	443b      	add	r3, r7
 8000df6:	2200      	movs	r2, #0
 8000df8:	f803 2c1c 	strb.w	r2, [r3, #-28]

	return Array_To_Int(subbuff);
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f001 f856 	bl	8001eb0 <Array_To_Int>
 8000e04:	4603      	mov	r3, r0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3720      	adds	r7, #32
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	08006640 	.word	0x08006640

08000e14 <Coast>:
	Motor_Transmit(tx_buff, sizeof(tx_buff));
	return;
}

void Coast()
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
	char buff[]={'@', MOTOR_ADDRESS, ',', '\r'};
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <Coast+0x1c>)
 8000e1c:	607b      	str	r3, [r7, #4]
	Motor_Transmit(buff, sizeof(buff));
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2104      	movs	r1, #4
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 fb9a 	bl	800155c <Motor_Transmit>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	0d2c3040 	.word	0x0d2c3040

08000e34 <Hard_Brake>:

void Hard_Brake()
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
	char buff[]={'@', MOTOR_ADDRESS, '.', '\r'};
 8000e3a:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <Hard_Brake+0x1c>)
 8000e3c:	607b      	str	r3, [r7, #4]
	Motor_Transmit(buff, sizeof(buff));
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2104      	movs	r1, #4
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 fb8a 	bl	800155c <Motor_Transmit>
}
 8000e48:	bf00      	nop
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	0d2e3040 	.word	0x0d2e3040

08000e54 <Set_Counterclockwise_Direction>:
	char buff[]={'@', MOTOR_ADDRESS, '+', '\r'};
	Motor_Transmit(buff, sizeof(buff));
}

void Set_Counterclockwise_Direction()
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
	char buff[]={'@', MOTOR_ADDRESS, '-', '\r'};
 8000e5a:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <Set_Counterclockwise_Direction+0x1c>)
 8000e5c:	607b      	str	r3, [r7, #4]
	Motor_Transmit(buff, sizeof(buff));
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2104      	movs	r1, #4
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 fb7a 	bl	800155c <Motor_Transmit>
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	0d2d3040 	.word	0x0d2d3040

08000e74 <Hall_Sensor_Triggered>:
 */

#include "main.h"

uint8_t Hall_Sensor_Triggered()
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
	if ( HAL_GPIO_ReadPin(HALL_SENSOR_GPIO_Port, HALL_SENSOR_Pin) == GPIO_PIN_RESET)
 8000e78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e80:	f001 fbd4 	bl	800262c <HAL_GPIO_ReadPin>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <Hall_Sensor_Triggered+0x1a>
	{
		return 1;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e000      	b.n	8000e90 <Hall_Sensor_Triggered+0x1c>
	}
	else
	{
		return 0;
 8000e8e:	2300      	movs	r3, #0
	}
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ea4:	f023 0218 	bic.w	r2, r3, #24
 8000ea8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ec8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ecc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ece:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ed8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000edc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
}
 8000ee6:	bf00      	nop
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef8:	f001 f86e 	bl	8001fd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efc:	f000 f8de 	bl	80010bc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f00:	f000 f952 	bl	80011a8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f04:	f000 fa30 	bl	8001368 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000f08:	f000 f96c 	bl	80011e4 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8000f0c:	f000 f9b6 	bl	800127c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000f10:	f000 fa02 	bl	8001318 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  state = 0;
 8000f14:	4b66      	ldr	r3, [pc, #408]	; (80010b0 <main+0x1bc>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
  state_changed = 1;
 8000f1a:	4b66      	ldr	r3, [pc, #408]	; (80010b4 <main+0x1c0>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	601a      	str	r2, [r3, #0]
  SevenSegment_Off();
 8000f20:	f000 fc88 	bl	8001834 <SevenSegment_Off>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SevenSegment_UpdateAllDigits(counter); // Has some ms of HAL_Delay() inside this function
 8000f24:	4b64      	ldr	r3, [pc, #400]	; (80010b8 <main+0x1c4>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 fb8b 	bl	8001644 <SevenSegment_UpdateAllDigits>

	  if (state == 0){
 8000f2e:	4b60      	ldr	r3, [pc, #384]	; (80010b0 <main+0x1bc>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d11a      	bne.n	8000f6c <main+0x78>
		  counter++;
 8000f36:	4b60      	ldr	r3, [pc, #384]	; (80010b8 <main+0x1c4>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	4a5e      	ldr	r2, [pc, #376]	; (80010b8 <main+0x1c4>)
 8000f3e:	6013      	str	r3, [r2, #0]
		  if (counter >= 1000){
 8000f40:	4b5d      	ldr	r3, [pc, #372]	; (80010b8 <main+0x1c4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f48:	d302      	bcc.n	8000f50 <main+0x5c>
		  	  counter = 0;
 8000f4a:	4b5b      	ldr	r3, [pc, #364]	; (80010b8 <main+0x1c4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
		  }

		  //nothing running, waiting for input
		  if (state_changed == 1)
 8000f50:	4b58      	ldr	r3, [pc, #352]	; (80010b4 <main+0x1c0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d102      	bne.n	8000f5e <main+0x6a>
		  {
			  state_changed = 0;
 8000f58:	4b56      	ldr	r3, [pc, #344]	; (80010b4 <main+0x1c0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
		  }

		  Blue_On();
 8000f5e:	f000 ffe9 	bl	8001f34 <Blue_On>
		  Green_Off();
 8000f62:	f000 ffdb 	bl	8001f1c <Green_Off>
		  Red_Off();
 8000f66:	f000 ffc1 	bl	8001eec <Red_Off>
 8000f6a:	e7db      	b.n	8000f24 <main+0x30>
	  }
	  else if (state == 1){
 8000f6c:	4b50      	ldr	r3, [pc, #320]	; (80010b0 <main+0x1bc>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d11f      	bne.n	8000fb4 <main+0xc0>
		  //start motor spinning
		  if (state_changed == 1)
 8000f74:	4b4f      	ldr	r3, [pc, #316]	; (80010b4 <main+0x1c0>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d105      	bne.n	8000f88 <main+0x94>
		  {
			  Arm_Spin_State(ARM_SPEED);
 8000f7c:	20fa      	movs	r0, #250	; 0xfa
 8000f7e:	f000 fcb9 	bl	80018f4 <Arm_Spin_State>
			  state_changed = 0;
 8000f82:	4b4c      	ldr	r3, [pc, #304]	; (80010b4 <main+0x1c0>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
		  }

		  if (Arm_Done_Spinning(ARM_SPEED) == 1)
 8000f88:	20fa      	movs	r0, #250	; 0xfa
 8000f8a:	f000 fcd0 	bl	800192e <Arm_Done_Spinning>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d105      	bne.n	8000fa0 <main+0xac>
		  {
			  state = 2;
 8000f94:	4b46      	ldr	r3, [pc, #280]	; (80010b0 <main+0x1bc>)
 8000f96:	2202      	movs	r2, #2
 8000f98:	601a      	str	r2, [r3, #0]
			  state_changed = 1;
 8000f9a:	4b46      	ldr	r3, [pc, #280]	; (80010b4 <main+0x1c0>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]
		  }

		  Blue_Off();
 8000fa0:	f000 ffd4 	bl	8001f4c <Blue_Off>
		  Green_Off();
 8000fa4:	f000 ffba 	bl	8001f1c <Green_Off>
		  Red_On();
 8000fa8:	f000 ff94 	bl	8001ed4 <Red_On>
		  HAL_Delay(100);
 8000fac:	2064      	movs	r0, #100	; 0x64
 8000fae:	f001 f899 	bl	80020e4 <HAL_Delay>
 8000fb2:	e7b7      	b.n	8000f24 <main+0x30>
	  }
	  else if (state == 2){
 8000fb4:	4b3e      	ldr	r3, [pc, #248]	; (80010b0 <main+0x1bc>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d10d      	bne.n	8000fd8 <main+0xe4>
		  //motor is up to speed
		  if (state_changed == 1)
 8000fbc:	4b3d      	ldr	r3, [pc, #244]	; (80010b4 <main+0x1c0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d102      	bne.n	8000fca <main+0xd6>
		  {
			  state_changed = 0;
 8000fc4:	4b3b      	ldr	r3, [pc, #236]	; (80010b4 <main+0x1c0>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
		  }

		  Blue_Off();
 8000fca:	f000 ffbf 	bl	8001f4c <Blue_Off>
		  Green_On();
 8000fce:	f000 ff99 	bl	8001f04 <Green_On>
		  Red_Off();
 8000fd2:	f000 ff8b 	bl	8001eec <Red_Off>
 8000fd6:	e7a5      	b.n	8000f24 <main+0x30>
	  }
	  else if (state == 3){
 8000fd8:	4b35      	ldr	r3, [pc, #212]	; (80010b0 <main+0x1bc>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b03      	cmp	r3, #3
 8000fde:	d119      	bne.n	8001014 <main+0x120>
		  //ready to launch, waiting for right position
		  if (state_changed == 1)
 8000fe0:	4b34      	ldr	r3, [pc, #208]	; (80010b4 <main+0x1c0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d102      	bne.n	8000fee <main+0xfa>
		  {
			  state_changed = 0;
 8000fe8:	4b32      	ldr	r3, [pc, #200]	; (80010b4 <main+0x1c0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
		  }

		  if (Arm_Launched_In_Position(ARM_SPEED) == 1)
 8000fee:	20fa      	movs	r0, #250	; 0xfa
 8000ff0:	f000 fccf 	bl	8001992 <Arm_Launched_In_Position>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d105      	bne.n	8001006 <main+0x112>
		  {
			  state = 4;
 8000ffa:	4b2d      	ldr	r3, [pc, #180]	; (80010b0 <main+0x1bc>)
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	601a      	str	r2, [r3, #0]
			  state_changed = 1;
 8001000:	4b2c      	ldr	r3, [pc, #176]	; (80010b4 <main+0x1c0>)
 8001002:	2201      	movs	r2, #1
 8001004:	601a      	str	r2, [r3, #0]
		  }

		  Blue_Off();
 8001006:	f000 ffa1 	bl	8001f4c <Blue_Off>
		  Green_On();
 800100a:	f000 ff7b 	bl	8001f04 <Green_On>
		  Red_On();
 800100e:	f000 ff61 	bl	8001ed4 <Red_On>
 8001012:	e787      	b.n	8000f24 <main+0x30>
	  }
	  else if (state == 4){
 8001014:	4b26      	ldr	r3, [pc, #152]	; (80010b0 <main+0x1bc>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b04      	cmp	r3, #4
 800101a:	d11a      	bne.n	8001052 <main+0x15e>
		  //after launching, slow motor
		  if (state_changed == 1)
 800101c:	4b25      	ldr	r3, [pc, #148]	; (80010b4 <main+0x1c0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d104      	bne.n	800102e <main+0x13a>
		  {
			  Hard_Brake();
 8001024:	f7ff ff06 	bl	8000e34 <Hard_Brake>
			  //Coast();
			  state_changed = 0;
 8001028:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <main+0x1c0>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
		  }

		  if (Arm_Stopped() == 1)
 800102e:	f000 fc9f 	bl	8001970 <Arm_Stopped>
 8001032:	4603      	mov	r3, r0
 8001034:	2b01      	cmp	r3, #1
 8001036:	d105      	bne.n	8001044 <main+0x150>
		  {
			  state = 5;
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <main+0x1bc>)
 800103a:	2205      	movs	r2, #5
 800103c:	601a      	str	r2, [r3, #0]
			  state_changed = 1;
 800103e:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <main+0x1c0>)
 8001040:	2201      	movs	r2, #1
 8001042:	601a      	str	r2, [r3, #0]
		  }

		  Blue_On();
 8001044:	f000 ff76 	bl	8001f34 <Blue_On>
		  Green_Off();
 8001048:	f000 ff68 	bl	8001f1c <Green_Off>
		  Red_Off();
 800104c:	f000 ff4e 	bl	8001eec <Red_Off>
 8001050:	e768      	b.n	8000f24 <main+0x30>
	  }
	  else if (state == 5){
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <main+0x1bc>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2b05      	cmp	r3, #5
 8001058:	d10d      	bne.n	8001076 <main+0x182>
		  //motor stopped, disc launched
		  if (state_changed == 1)
 800105a:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <main+0x1c0>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d102      	bne.n	8001068 <main+0x174>
		  {
			  state_changed = 0;
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <main+0x1c0>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
		  }

		  Blue_On();
 8001068:	f000 ff64 	bl	8001f34 <Blue_On>
		  Green_Off();
 800106c:	f000 ff56 	bl	8001f1c <Green_Off>
		  Red_On();
 8001070:	f000 ff30 	bl	8001ed4 <Red_On>
 8001074:	e756      	b.n	8000f24 <main+0x30>
	  }
	  else if (state == 6){
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <main+0x1bc>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b06      	cmp	r3, #6
 800107c:	d113      	bne.n	80010a6 <main+0x1b2>
		  //launch disc
		  if (state_changed == 1)
 800107e:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <main+0x1c0>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d108      	bne.n	8001098 <main+0x1a4>
		  {
			  Launch_Disc_State(ARM_SPEED);
 8001086:	20fa      	movs	r0, #250	; 0xfa
 8001088:	f000 fcad 	bl	80019e6 <Launch_Disc_State>
			  state = 4;
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <main+0x1bc>)
 800108e:	2204      	movs	r2, #4
 8001090:	601a      	str	r2, [r3, #0]
			  state_changed = 1;
 8001092:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <main+0x1c0>)
 8001094:	2201      	movs	r2, #1
 8001096:	601a      	str	r2, [r3, #0]
			  //state_changed = 0;
		  }

		  Blue_On();
 8001098:	f000 ff4c 	bl	8001f34 <Blue_On>
		  Green_On();
 800109c:	f000 ff32 	bl	8001f04 <Green_On>
		  Red_Off();
 80010a0:	f000 ff24 	bl	8001eec <Red_Off>
 80010a4:	e73e      	b.n	8000f24 <main+0x30>
	  }
	  else{
		  state = 0;
 80010a6:	4b02      	ldr	r3, [pc, #8]	; (80010b0 <main+0x1bc>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
	  SevenSegment_UpdateAllDigits(counter); // Has some ms of HAL_Delay() inside this function
 80010ac:	e73a      	b.n	8000f24 <main+0x30>
 80010ae:	bf00      	nop
 80010b0:	20000494 	.word	0x20000494
 80010b4:	20000498 	.word	0x20000498
 80010b8:	20000008 	.word	0x20000008

080010bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b09a      	sub	sp, #104	; 0x68
 80010c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c2:	f107 0320 	add.w	r3, r7, #32
 80010c6:	2248      	movs	r2, #72	; 0x48
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f004 f968 	bl	80053a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	611a      	str	r2, [r3, #16]
 80010de:	615a      	str	r2, [r3, #20]
 80010e0:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80010e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010f0:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80010f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	f023 0303 	bic.w	r3, r3, #3
 80010fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001106:	f001 fbd1 	bl	80028ac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800110a:	2000      	movs	r0, #0
 800110c:	f7ff fec2 	bl	8000e94 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001110:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <SystemClock_Config+0xe8>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001118:	4a22      	ldr	r2, [pc, #136]	; (80011a4 <SystemClock_Config+0xe8>)
 800111a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <SystemClock_Config+0xe8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800112c:	2327      	movs	r3, #39	; 0x27
 800112e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001130:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001136:	2301      	movs	r3, #1
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800113a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001140:	2301      	movs	r3, #1
 8001142:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001144:	2340      	movs	r3, #64	; 0x40
 8001146:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001148:	2300      	movs	r3, #0
 800114a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800114c:	2360      	movs	r3, #96	; 0x60
 800114e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001150:	2300      	movs	r3, #0
 8001152:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001154:	f107 0320 	add.w	r3, r7, #32
 8001158:	4618      	mov	r0, r3
 800115a:	f001 ff3b 	bl	8002fd4 <HAL_RCC_OscConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001164:	f000 fa68 	bl	8001638 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001168:	236f      	movs	r3, #111	; 0x6f
 800116a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800116c:	2302      	movs	r3, #2
 800116e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2101      	movs	r1, #1
 8001188:	4618      	mov	r0, r3
 800118a:	f002 fa97 	bl	80036bc <HAL_RCC_ClockConfig>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 8001194:	f000 fa50 	bl	8001638 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001198:	f003 f852 	bl	8004240 <HAL_RCCEx_EnableMSIPLLMode>
}
 800119c:	bf00      	nop
 800119e:	3768      	adds	r7, #104	; 0x68
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	58000400 	.word	0x58000400

080011a8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b094      	sub	sp, #80	; 0x50
 80011ac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011ae:	463b      	mov	r3, r7
 80011b0:	2250      	movs	r2, #80	; 0x50
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f004 f8f3 	bl	80053a0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80011ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011be:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80011c0:	2300      	movs	r3, #0
 80011c2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c8:	463b      	mov	r3, r7
 80011ca:	4618      	mov	r0, r3
 80011cc:	f002 fec2 	bl	8003f54 <HAL_RCCEx_PeriphCLKConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80011d6:	f000 fa2f 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80011da:	bf00      	nop
 80011dc:	3750      	adds	r7, #80	; 0x50
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80011e8:	4b22      	ldr	r3, [pc, #136]	; (8001274 <MX_LPUART1_UART_Init+0x90>)
 80011ea:	4a23      	ldr	r2, [pc, #140]	; (8001278 <MX_LPUART1_UART_Init+0x94>)
 80011ec:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 38400;
 80011ee:	4b21      	ldr	r3, [pc, #132]	; (8001274 <MX_LPUART1_UART_Init+0x90>)
 80011f0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80011f4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <MX_LPUART1_UART_Init+0x90>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <MX_LPUART1_UART_Init+0x90>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <MX_LPUART1_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b1a      	ldr	r3, [pc, #104]	; (8001274 <MX_LPUART1_UART_Init+0x90>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <MX_LPUART1_UART_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <MX_LPUART1_UART_Init+0x90>)
 8001216:	2200      	movs	r2, #0
 8001218:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800121a:	4b16      	ldr	r3, [pc, #88]	; (8001274 <MX_LPUART1_UART_Init+0x90>)
 800121c:	2200      	movs	r2, #0
 800121e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_LPUART1_UART_Init+0x90>)
 8001222:	2200      	movs	r2, #0
 8001224:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <MX_LPUART1_UART_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800122c:	4811      	ldr	r0, [pc, #68]	; (8001274 <MX_LPUART1_UART_Init+0x90>)
 800122e:	f003 f93e 	bl	80044ae <HAL_UART_Init>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001238:	f000 f9fe 	bl	8001638 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800123c:	2100      	movs	r1, #0
 800123e:	480d      	ldr	r0, [pc, #52]	; (8001274 <MX_LPUART1_UART_Init+0x90>)
 8001240:	f003 ff5c 	bl	80050fc <HAL_UARTEx_SetTxFifoThreshold>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800124a:	f000 f9f5 	bl	8001638 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800124e:	2100      	movs	r1, #0
 8001250:	4808      	ldr	r0, [pc, #32]	; (8001274 <MX_LPUART1_UART_Init+0x90>)
 8001252:	f003 ff91 	bl	8005178 <HAL_UARTEx_SetRxFifoThreshold>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800125c:	f000 f9ec 	bl	8001638 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_LPUART1_UART_Init+0x90>)
 8001262:	f003 ff12 	bl	800508a <HAL_UARTEx_DisableFifoMode>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800126c:	f000 f9e4 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000090 	.word	0x20000090
 8001278:	40008000 	.word	0x40008000

0800127c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001280:	4b23      	ldr	r3, [pc, #140]	; (8001310 <MX_USART1_UART_Init+0x94>)
 8001282:	4a24      	ldr	r2, [pc, #144]	; (8001314 <MX_USART1_UART_Init+0x98>)
 8001284:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001286:	4b22      	ldr	r3, [pc, #136]	; (8001310 <MX_USART1_UART_Init+0x94>)
 8001288:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800128c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 800128e:	4b20      	ldr	r3, [pc, #128]	; (8001310 <MX_USART1_UART_Init+0x94>)
 8001290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001294:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001296:	4b1e      	ldr	r3, [pc, #120]	; (8001310 <MX_USART1_UART_Init+0x94>)
 8001298:	2200      	movs	r2, #0
 800129a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800129c:	4b1c      	ldr	r3, [pc, #112]	; (8001310 <MX_USART1_UART_Init+0x94>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012a2:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <MX_USART1_UART_Init+0x94>)
 80012a4:	220c      	movs	r2, #12
 80012a6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a8:	4b19      	ldr	r3, [pc, #100]	; (8001310 <MX_USART1_UART_Init+0x94>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ae:	4b18      	ldr	r3, [pc, #96]	; (8001310 <MX_USART1_UART_Init+0x94>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012b4:	4b16      	ldr	r3, [pc, #88]	; (8001310 <MX_USART1_UART_Init+0x94>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <MX_USART1_UART_Init+0x94>)
 80012bc:	2200      	movs	r2, #0
 80012be:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <MX_USART1_UART_Init+0x94>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012c6:	4812      	ldr	r0, [pc, #72]	; (8001310 <MX_USART1_UART_Init+0x94>)
 80012c8:	f003 f8f1 	bl	80044ae <HAL_UART_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80012d2:	f000 f9b1 	bl	8001638 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d6:	2100      	movs	r1, #0
 80012d8:	480d      	ldr	r0, [pc, #52]	; (8001310 <MX_USART1_UART_Init+0x94>)
 80012da:	f003 ff0f 	bl	80050fc <HAL_UARTEx_SetTxFifoThreshold>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80012e4:	f000 f9a8 	bl	8001638 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e8:	2100      	movs	r1, #0
 80012ea:	4809      	ldr	r0, [pc, #36]	; (8001310 <MX_USART1_UART_Init+0x94>)
 80012ec:	f003 ff44 	bl	8005178 <HAL_UARTEx_SetRxFifoThreshold>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80012f6:	f000 f99f 	bl	8001638 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_USART1_UART_Init+0x94>)
 80012fc:	f003 fec5 	bl	800508a <HAL_UARTEx_DisableFifoMode>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001306:	f000 f997 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000124 	.word	0x20000124
 8001314:	40013800 	.word	0x40013800

08001318 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800131c:	4b10      	ldr	r3, [pc, #64]	; (8001360 <MX_USB_PCD_Init+0x48>)
 800131e:	4a11      	ldr	r2, [pc, #68]	; (8001364 <MX_USB_PCD_Init+0x4c>)
 8001320:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_USB_PCD_Init+0x48>)
 8001324:	2208      	movs	r2, #8
 8001326:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001328:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <MX_USB_PCD_Init+0x48>)
 800132a:	2202      	movs	r2, #2
 800132c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_USB_PCD_Init+0x48>)
 8001330:	2202      	movs	r2, #2
 8001332:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <MX_USB_PCD_Init+0x48>)
 8001336:	2200      	movs	r2, #0
 8001338:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_USB_PCD_Init+0x48>)
 800133c:	2200      	movs	r2, #0
 800133e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <MX_USB_PCD_Init+0x48>)
 8001342:	2200      	movs	r2, #0
 8001344:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_USB_PCD_Init+0x48>)
 8001348:	2200      	movs	r2, #0
 800134a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800134c:	4804      	ldr	r0, [pc, #16]	; (8001360 <MX_USB_PCD_Init+0x48>)
 800134e:	f001 f9b5 	bl	80026bc <HAL_PCD_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001358:	f000 f96e 	bl	8001638 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200001b8 	.word	0x200001b8
 8001364:	40006800 	.word	0x40006800

08001368 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137c:	2004      	movs	r0, #4
 800137e:	f7ff fd9f 	bl	8000ec0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	2001      	movs	r0, #1
 8001384:	f7ff fd9c 	bl	8000ec0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001388:	2002      	movs	r0, #2
 800138a:	f7ff fd99 	bl	8000ec0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800138e:	2008      	movs	r0, #8
 8001390:	f7ff fd96 	bl	8000ec0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Solenoid_Pin|digit1_Pin|digit2_Pin|digit3_Pin
 8001394:	2200      	movs	r2, #0
 8001396:	f240 11e1 	movw	r1, #481	; 0x1e1
 800139a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139e:	f001 f95d 	bl	800265c <HAL_GPIO_WritePin>
                          |digit4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, segmentG_Pin|segmentA_Pin, GPIO_PIN_SET);
 80013a2:	2201      	movs	r2, #1
 80013a4:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80013a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ac:	f001 f956 	bl	800265c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2123      	movs	r1, #35	; 0x23
 80013b4:	4843      	ldr	r0, [pc, #268]	; (80014c4 <MX_GPIO_Init+0x15c>)
 80013b6:	f001 f951 	bl	800265c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, segmentF_Pin|segmentE_Pin|segmentD_Pin|segmentC_Pin, GPIO_PIN_SET);
 80013ba:	2201      	movs	r2, #1
 80013bc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80013c0:	4840      	ldr	r0, [pc, #256]	; (80014c4 <MX_GPIO_Init+0x15c>)
 80013c2:	f001 f94b 	bl	800265c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(segmentB_GPIO_Port, segmentB_Pin, GPIO_PIN_SET);
 80013c6:	2201      	movs	r2, #1
 80013c8:	2140      	movs	r1, #64	; 0x40
 80013ca:	483f      	ldr	r0, [pc, #252]	; (80014c8 <MX_GPIO_Init+0x160>)
 80013cc:	f001 f946 	bl	800265c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Solenoid_Pin */
  GPIO_InitStruct.Pin = Solenoid_Pin;
 80013d0:	2301      	movs	r3, #1
 80013d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d8:	2301      	movs	r3, #1
 80013da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Solenoid_GPIO_Port, &GPIO_InitStruct);
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	4619      	mov	r1, r3
 80013e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013e8:	f000 ffb0 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pins : segmentG_Pin digit1_Pin digit2_Pin digit3_Pin
                           digit4_Pin segmentA_Pin */
  GPIO_InitStruct.Pin = segmentG_Pin|digit1_Pin|digit2_Pin|digit3_Pin
 80013ec:	f44f 63be 	mov.w	r3, #1520	; 0x5f0
 80013f0:	607b      	str	r3, [r7, #4]
                          |digit4_Pin|segmentA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f2:	2301      	movs	r3, #1
 80013f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	4619      	mov	r1, r3
 8001402:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001406:	f000 ffa1 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pin : HALL_SENSOR_Pin */
  GPIO_InitStruct.Pin = HALL_SENSOR_Pin;
 800140a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800140e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001414:	2301      	movs	r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(HALL_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	4619      	mov	r1, r3
 800141c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001420:	f000 ff94 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001424:	2310      	movs	r3, #16
 8001426:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001428:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800142c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800142e:	2301      	movs	r3, #1
 8001430:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4619      	mov	r1, r3
 8001436:	4824      	ldr	r0, [pc, #144]	; (80014c8 <MX_GPIO_Init+0x160>)
 8001438:	f000 ff88 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin segmentF_Pin segmentE_Pin
                           segmentD_Pin segmentC_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|segmentF_Pin|segmentE_Pin
 800143c:	f24f 0323 	movw	r3, #61475	; 0xf023
 8001440:	607b      	str	r3, [r7, #4]
                          |segmentD_Pin|segmentC_Pin|LD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	4619      	mov	r1, r3
 8001452:	481c      	ldr	r0, [pc, #112]	; (80014c4 <MX_GPIO_Init+0x15c>)
 8001454:	f000 ff7a 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pin : segmentB_Pin */
  GPIO_InitStruct.Pin = segmentB_Pin;
 8001458:	2340      	movs	r3, #64	; 0x40
 800145a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145c:	2301      	movs	r3, #1
 800145e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(segmentB_GPIO_Port, &GPIO_InitStruct);
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	4619      	mov	r1, r3
 800146c:	4816      	ldr	r0, [pc, #88]	; (80014c8 <MX_GPIO_Init+0x160>)
 800146e:	f000 ff6d 	bl	800234c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001472:	2303      	movs	r3, #3
 8001474:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001476:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800147a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147c:	2301      	movs	r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	4619      	mov	r1, r3
 8001484:	4811      	ldr	r0, [pc, #68]	; (80014cc <MX_GPIO_Init+0x164>)
 8001486:	f000 ff61 	bl	800234c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	2006      	movs	r0, #6
 8001490:	f000 ff27 	bl	80022e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001494:	2006      	movs	r0, #6
 8001496:	f000 ff3e 	bl	8002316 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	2007      	movs	r0, #7
 80014a0:	f000 ff1f 	bl	80022e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80014a4:	2007      	movs	r0, #7
 80014a6:	f000 ff36 	bl	8002316 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	200a      	movs	r0, #10
 80014b0:	f000 ff17 	bl	80022e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80014b4:	200a      	movs	r0, #10
 80014b6:	f000 ff2e 	bl	8002316 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014ba:	bf00      	nop
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	48000400 	.word	0x48000400
 80014c8:	48000800 	.word	0x48000800
 80014cc:	48000c00 	.word	0x48000c00

080014d0 <B1_Pressed>:

/* USER CODE BEGIN 4 */
void B1_Pressed()
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
	if (state == 0)
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <B1_Pressed+0x50>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d106      	bne.n	80014ea <B1_Pressed+0x1a>
	{
		state = 1;
 80014dc:	4b10      	ldr	r3, [pc, #64]	; (8001520 <B1_Pressed+0x50>)
 80014de:	2201      	movs	r2, #1
 80014e0:	601a      	str	r2, [r3, #0]
		state_changed = 1;
 80014e2:	4b10      	ldr	r3, [pc, #64]	; (8001524 <B1_Pressed+0x54>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	601a      	str	r2, [r3, #0]
	else if (state == 5)
	{
		state = 0;
		state_changed = 1;
	}
}
 80014e8:	e014      	b.n	8001514 <B1_Pressed+0x44>
	else if (state == 2)
 80014ea:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <B1_Pressed+0x50>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d106      	bne.n	8001500 <B1_Pressed+0x30>
		state = 3;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <B1_Pressed+0x50>)
 80014f4:	2203      	movs	r2, #3
 80014f6:	601a      	str	r2, [r3, #0]
		state_changed = 1;
 80014f8:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <B1_Pressed+0x54>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	601a      	str	r2, [r3, #0]
}
 80014fe:	e009      	b.n	8001514 <B1_Pressed+0x44>
	else if (state == 5)
 8001500:	4b07      	ldr	r3, [pc, #28]	; (8001520 <B1_Pressed+0x50>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b05      	cmp	r3, #5
 8001506:	d105      	bne.n	8001514 <B1_Pressed+0x44>
		state = 0;
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <B1_Pressed+0x50>)
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
		state_changed = 1;
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <B1_Pressed+0x54>)
 8001510:	2201      	movs	r2, #1
 8001512:	601a      	str	r2, [r3, #0]
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000494 	.word	0x20000494
 8001524:	20000498 	.word	0x20000498

08001528 <B2_Pressed>:

void B2_Pressed()
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
		Launch_Disc_State(ARM_SPEED);
		state = 4;
		state_changed = 1;
		*/
	}
}
 800152c:	bf00      	nop
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <B3_Pressed>:

void B3_Pressed()
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
	state = 4;
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <B3_Pressed+0x1c>)
 800153e:	2204      	movs	r2, #4
 8001540:	601a      	str	r2, [r3, #0]
	state_changed = 1;
 8001542:	4b05      	ldr	r3, [pc, #20]	; (8001558 <B3_Pressed+0x20>)
 8001544:	2201      	movs	r2, #1
 8001546:	601a      	str	r2, [r3, #0]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	20000494 	.word	0x20000494
 8001558:	20000498 	.word	0x20000498

0800155c <Motor_Transmit>:

void Motor_Transmit(char tx_buff[], uint8_t size)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)tx_buff, size, 10);
 8001568:	78fb      	ldrb	r3, [r7, #3]
 800156a:	b29a      	uxth	r2, r3
 800156c:	230a      	movs	r3, #10
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	4803      	ldr	r0, [pc, #12]	; (8001580 <Motor_Transmit+0x24>)
 8001572:	f002 ffec 	bl	800454e <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart1, (uint8_t*)tx_buff, size, 10);
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000090 	.word	0x20000090

08001584 <Motor_Receive>:

HAL_StatusTypeDef Motor_Receive(uint8_t rx_buff[])
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	//return HAL_UART_Receive(&hlpuart1, rx_buff, size, 10);
	//return HAL_UART_Receive(&huart1, rx_buff, size, 10);

	uint8_t rx_char[1];
	uint8_t i = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status = HAL_UART_Receive(&hlpuart1, rx_char, 1, 10000);
 8001590:	f107 010c 	add.w	r1, r7, #12
 8001594:	f242 7310 	movw	r3, #10000	; 0x2710
 8001598:	2201      	movs	r2, #1
 800159a:	4819      	ldr	r0, [pc, #100]	; (8001600 <Motor_Receive+0x7c>)
 800159c:	f003 f865 	bl	800466a <HAL_UART_Receive>
 80015a0:	4603      	mov	r3, r0
 80015a2:	73bb      	strb	r3, [r7, #14]
	if (status != HAL_OK)
 80015a4:	7bbb      	ldrb	r3, [r7, #14]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <Motor_Receive+0x2a>
	{
		return 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e023      	b.n	80015f6 <Motor_Receive+0x72>
	}
	rx_buff[i] = rx_char[0];
 80015ae:	7bfb      	ldrb	r3, [r7, #15]
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	4413      	add	r3, r2
 80015b4:	7b3a      	ldrb	r2, [r7, #12]
 80015b6:	701a      	strb	r2, [r3, #0]
	i++;
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	3301      	adds	r3, #1
 80015bc:	73fb      	strb	r3, [r7, #15]
	while (rx_char[0] != '\r')
 80015be:	e016      	b.n	80015ee <Motor_Receive+0x6a>
	{
		status = HAL_UART_Receive(&hlpuart1, rx_char, 1, 10000);
 80015c0:	f107 010c 	add.w	r1, r7, #12
 80015c4:	f242 7310 	movw	r3, #10000	; 0x2710
 80015c8:	2201      	movs	r2, #1
 80015ca:	480d      	ldr	r0, [pc, #52]	; (8001600 <Motor_Receive+0x7c>)
 80015cc:	f003 f84d 	bl	800466a <HAL_UART_Receive>
 80015d0:	4603      	mov	r3, r0
 80015d2:	73bb      	strb	r3, [r7, #14]
		if (status != HAL_OK)
 80015d4:	7bbb      	ldrb	r3, [r7, #14]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <Motor_Receive+0x5a>
		{
			return 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	e00b      	b.n	80015f6 <Motor_Receive+0x72>
		}
		rx_buff[i] = rx_char[0];
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	4413      	add	r3, r2
 80015e4:	7b3a      	ldrb	r2, [r7, #12]
 80015e6:	701a      	strb	r2, [r3, #0]
		i++;
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	3301      	adds	r3, #1
 80015ec:	73fb      	strb	r3, [r7, #15]
	while (rx_char[0] != '\r')
 80015ee:	7b3b      	ldrb	r3, [r7, #12]
 80015f0:	2b0d      	cmp	r3, #13
 80015f2:	d1e5      	bne.n	80015c0 <Motor_Receive+0x3c>
	}
	return i;
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000090 	.word	0x20000090

08001604 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == B1_Pin){B1_Pressed();}
 800160e:	88fb      	ldrh	r3, [r7, #6]
 8001610:	2b10      	cmp	r3, #16
 8001612:	d102      	bne.n	800161a <HAL_GPIO_EXTI_Callback+0x16>
 8001614:	f7ff ff5c 	bl	80014d0 <B1_Pressed>
	else if(GPIO_PIN == B2_Pin){B2_Pressed();}
	else if(GPIO_PIN == B3_Pin){B3_Pressed();}
}
 8001618:	e00a      	b.n	8001630 <HAL_GPIO_EXTI_Callback+0x2c>
	else if(GPIO_PIN == B2_Pin){B2_Pressed();}
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	2b01      	cmp	r3, #1
 800161e:	d102      	bne.n	8001626 <HAL_GPIO_EXTI_Callback+0x22>
 8001620:	f7ff ff82 	bl	8001528 <B2_Pressed>
}
 8001624:	e004      	b.n	8001630 <HAL_GPIO_EXTI_Callback+0x2c>
	else if(GPIO_PIN == B3_Pin){B3_Pressed();}
 8001626:	88fb      	ldrh	r3, [r7, #6]
 8001628:	2b02      	cmp	r3, #2
 800162a:	d101      	bne.n	8001630 <HAL_GPIO_EXTI_Callback+0x2c>
 800162c:	f7ff ff84 	bl	8001538 <B3_Pressed>
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800163c:	b672      	cpsid	i
}
 800163e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001640:	e7fe      	b.n	8001640 <Error_Handler+0x8>
	...

08001644 <SevenSegment_UpdateAllDigits>:
		0x7f,
		0x67
};

// Call this function as often as possible, each digit only flashes for a few ms
void SevenSegment_UpdateAllDigits(uint32_t value){
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	uint8_t tmp_digit1 = value/1000;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a45      	ldr	r2, [pc, #276]	; (8001764 <SevenSegment_UpdateAllDigits+0x120>)
 8001650:	fba2 2303 	umull	r2, r3, r2, r3
 8001654:	099b      	lsrs	r3, r3, #6
 8001656:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp_digit2 = ((value/100)%10);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a43      	ldr	r2, [pc, #268]	; (8001768 <SevenSegment_UpdateAllDigits+0x124>)
 800165c:	fba2 2303 	umull	r2, r3, r2, r3
 8001660:	0959      	lsrs	r1, r3, #5
 8001662:	4b42      	ldr	r3, [pc, #264]	; (800176c <SevenSegment_UpdateAllDigits+0x128>)
 8001664:	fba3 2301 	umull	r2, r3, r3, r1
 8001668:	08da      	lsrs	r2, r3, #3
 800166a:	4613      	mov	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4413      	add	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	1aca      	subs	r2, r1, r3
 8001674:	4613      	mov	r3, r2
 8001676:	73bb      	strb	r3, [r7, #14]
	uint8_t tmp_digit3 = ((value/10)%10);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a3c      	ldr	r2, [pc, #240]	; (800176c <SevenSegment_UpdateAllDigits+0x128>)
 800167c:	fba2 2303 	umull	r2, r3, r2, r3
 8001680:	08d9      	lsrs	r1, r3, #3
 8001682:	4b3a      	ldr	r3, [pc, #232]	; (800176c <SevenSegment_UpdateAllDigits+0x128>)
 8001684:	fba3 2301 	umull	r2, r3, r3, r1
 8001688:	08da      	lsrs	r2, r3, #3
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	1aca      	subs	r2, r1, r3
 8001694:	4613      	mov	r3, r2
 8001696:	737b      	strb	r3, [r7, #13]
	uint8_t tmp_digit4 = (value%10);
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4b34      	ldr	r3, [pc, #208]	; (800176c <SevenSegment_UpdateAllDigits+0x128>)
 800169c:	fba3 2301 	umull	r2, r3, r3, r1
 80016a0:	08da      	lsrs	r2, r3, #3
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	1aca      	subs	r2, r1, r3
 80016ac:	4613      	mov	r3, r2
 80016ae:	733b      	strb	r3, [r7, #12]

	SevenSegment_UpdateDigit(segmentNumber[tmp_digit1]);
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	4a2f      	ldr	r2, [pc, #188]	; (8001770 <SevenSegment_UpdateAllDigits+0x12c>)
 80016b4:	5cd3      	ldrb	r3, [r2, r3]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f85c 	bl	8001774 <SevenSegment_UpdateDigit>
	D1_LOW;
 80016bc:	2200      	movs	r2, #0
 80016be:	2120      	movs	r1, #32
 80016c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c4:	f000 ffca 	bl	800265c <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80016c8:	2002      	movs	r0, #2
 80016ca:	f000 fd0b 	bl	80020e4 <HAL_Delay>
	D1_HIGH;
 80016ce:	2201      	movs	r2, #1
 80016d0:	2120      	movs	r1, #32
 80016d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d6:	f000 ffc1 	bl	800265c <HAL_GPIO_WritePin>

	SevenSegment_UpdateDigit(segmentNumber[tmp_digit2]);
 80016da:	7bbb      	ldrb	r3, [r7, #14]
 80016dc:	4a24      	ldr	r2, [pc, #144]	; (8001770 <SevenSegment_UpdateAllDigits+0x12c>)
 80016de:	5cd3      	ldrb	r3, [r2, r3]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 f847 	bl	8001774 <SevenSegment_UpdateDigit>
	D2_LOW;
 80016e6:	2200      	movs	r2, #0
 80016e8:	2140      	movs	r1, #64	; 0x40
 80016ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ee:	f000 ffb5 	bl	800265c <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80016f2:	2002      	movs	r0, #2
 80016f4:	f000 fcf6 	bl	80020e4 <HAL_Delay>
	D2_HIGH;
 80016f8:	2201      	movs	r2, #1
 80016fa:	2140      	movs	r1, #64	; 0x40
 80016fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001700:	f000 ffac 	bl	800265c <HAL_GPIO_WritePin>

	SevenSegment_UpdateDigit(segmentNumber[tmp_digit3]);
 8001704:	7b7b      	ldrb	r3, [r7, #13]
 8001706:	4a1a      	ldr	r2, [pc, #104]	; (8001770 <SevenSegment_UpdateAllDigits+0x12c>)
 8001708:	5cd3      	ldrb	r3, [r2, r3]
 800170a:	4618      	mov	r0, r3
 800170c:	f000 f832 	bl	8001774 <SevenSegment_UpdateDigit>
	D3_LOW;
 8001710:	2200      	movs	r2, #0
 8001712:	2180      	movs	r1, #128	; 0x80
 8001714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001718:	f000 ffa0 	bl	800265c <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800171c:	2002      	movs	r0, #2
 800171e:	f000 fce1 	bl	80020e4 <HAL_Delay>
	D3_HIGH;
 8001722:	2201      	movs	r2, #1
 8001724:	2180      	movs	r1, #128	; 0x80
 8001726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172a:	f000 ff97 	bl	800265c <HAL_GPIO_WritePin>

	SevenSegment_UpdateDigit(segmentNumber[tmp_digit4]);
 800172e:	7b3b      	ldrb	r3, [r7, #12]
 8001730:	4a0f      	ldr	r2, [pc, #60]	; (8001770 <SevenSegment_UpdateAllDigits+0x12c>)
 8001732:	5cd3      	ldrb	r3, [r2, r3]
 8001734:	4618      	mov	r0, r3
 8001736:	f000 f81d 	bl	8001774 <SevenSegment_UpdateDigit>
	D4_LOW;
 800173a:	2200      	movs	r2, #0
 800173c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001744:	f000 ff8a 	bl	800265c <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001748:	2002      	movs	r0, #2
 800174a:	f000 fccb 	bl	80020e4 <HAL_Delay>
	D4_HIGH;
 800174e:	2201      	movs	r2, #1
 8001750:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001758:	f000 ff80 	bl	800265c <HAL_GPIO_WritePin>
}
 800175c:	bf00      	nop
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	10624dd3 	.word	0x10624dd3
 8001768:	51eb851f 	.word	0x51eb851f
 800176c:	cccccccd 	.word	0xcccccccd
 8001770:	2000000c 	.word	0x2000000c

08001774 <SevenSegment_UpdateDigit>:

void SevenSegment_UpdateDigit(uint8_t number){
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(segmentA_GPIO_Port, segmentA_Pin, ((number>>0)&0x01));
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	b2db      	uxtb	r3, r3
 8001786:	461a      	mov	r2, r3
 8001788:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800178c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001790:	f000 ff64 	bl	800265c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentB_GPIO_Port, segmentB_Pin, ((number>>1)&0x01));
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	085b      	lsrs	r3, r3, #1
 8001798:	b2db      	uxtb	r3, r3
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	461a      	mov	r2, r3
 80017a2:	2140      	movs	r1, #64	; 0x40
 80017a4:	4821      	ldr	r0, [pc, #132]	; (800182c <SevenSegment_UpdateDigit+0xb8>)
 80017a6:	f000 ff59 	bl	800265c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentC_GPIO_Port, segmentC_Pin, ((number>>2)&0x01));
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	089b      	lsrs	r3, r3, #2
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	461a      	mov	r2, r3
 80017b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017bc:	481c      	ldr	r0, [pc, #112]	; (8001830 <SevenSegment_UpdateDigit+0xbc>)
 80017be:	f000 ff4d 	bl	800265c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentD_GPIO_Port, segmentD_Pin, ((number>>3)&0x01));
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	08db      	lsrs	r3, r3, #3
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	461a      	mov	r2, r3
 80017d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017d4:	4816      	ldr	r0, [pc, #88]	; (8001830 <SevenSegment_UpdateDigit+0xbc>)
 80017d6:	f000 ff41 	bl	800265c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentE_GPIO_Port, segmentE_Pin, ((number>>4)&0x01));
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	091b      	lsrs	r3, r3, #4
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	461a      	mov	r2, r3
 80017e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ec:	4810      	ldr	r0, [pc, #64]	; (8001830 <SevenSegment_UpdateDigit+0xbc>)
 80017ee:	f000 ff35 	bl	800265c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentF_GPIO_Port, segmentF_Pin, ((number>>5)&0x01));
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	095b      	lsrs	r3, r3, #5
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	461a      	mov	r2, r3
 8001800:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001804:	480a      	ldr	r0, [pc, #40]	; (8001830 <SevenSegment_UpdateDigit+0xbc>)
 8001806:	f000 ff29 	bl	800265c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentG_GPIO_Port, segmentG_Pin, ((number>>6)&0x01));
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	099b      	lsrs	r3, r3, #6
 800180e:	b2db      	uxtb	r3, r3
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	b2db      	uxtb	r3, r3
 8001816:	461a      	mov	r2, r3
 8001818:	2110      	movs	r1, #16
 800181a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181e:	f000 ff1d 	bl	800265c <HAL_GPIO_WritePin>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	48000800 	.word	0x48000800
 8001830:	48000400 	.word	0x48000400

08001834 <SevenSegment_Off>:

void SevenSegment_Off(){
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	// reset segment pins to low/OFF (set to high/ON)
	HAL_GPIO_WritePin(segmentA_GPIO_Port, segmentA_Pin, GPIO_PIN_RESET);
 8001838:	2200      	movs	r2, #0
 800183a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800183e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001842:	f000 ff0b 	bl	800265c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentB_GPIO_Port, segmentB_Pin, GPIO_PIN_RESET);
 8001846:	2200      	movs	r2, #0
 8001848:	2140      	movs	r1, #64	; 0x40
 800184a:	481e      	ldr	r0, [pc, #120]	; (80018c4 <SevenSegment_Off+0x90>)
 800184c:	f000 ff06 	bl	800265c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentC_GPIO_Port, segmentC_Pin, GPIO_PIN_RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001856:	481c      	ldr	r0, [pc, #112]	; (80018c8 <SevenSegment_Off+0x94>)
 8001858:	f000 ff00 	bl	800265c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentD_GPIO_Port, segmentD_Pin, GPIO_PIN_RESET);
 800185c:	2200      	movs	r2, #0
 800185e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001862:	4819      	ldr	r0, [pc, #100]	; (80018c8 <SevenSegment_Off+0x94>)
 8001864:	f000 fefa 	bl	800265c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentE_GPIO_Port, segmentE_Pin, GPIO_PIN_RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800186e:	4816      	ldr	r0, [pc, #88]	; (80018c8 <SevenSegment_Off+0x94>)
 8001870:	f000 fef4 	bl	800265c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentF_GPIO_Port, segmentF_Pin, GPIO_PIN_RESET);
 8001874:	2200      	movs	r2, #0
 8001876:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800187a:	4813      	ldr	r0, [pc, #76]	; (80018c8 <SevenSegment_Off+0x94>)
 800187c:	f000 feee 	bl	800265c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentG_GPIO_Port, segmentG_Pin, GPIO_PIN_RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	2110      	movs	r1, #16
 8001884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001888:	f000 fee8 	bl	800265c <HAL_GPIO_WritePin>

	// set all digit (grounds) to high/OFF (reset to low/ON)
	D1_HIGH;
 800188c:	2201      	movs	r2, #1
 800188e:	2120      	movs	r1, #32
 8001890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001894:	f000 fee2 	bl	800265c <HAL_GPIO_WritePin>
	D2_HIGH;
 8001898:	2201      	movs	r2, #1
 800189a:	2140      	movs	r1, #64	; 0x40
 800189c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a0:	f000 fedc 	bl	800265c <HAL_GPIO_WritePin>
	D3_HIGH;
 80018a4:	2201      	movs	r2, #1
 80018a6:	2180      	movs	r1, #128	; 0x80
 80018a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ac:	f000 fed6 	bl	800265c <HAL_GPIO_WritePin>
	D4_HIGH;
 80018b0:	2201      	movs	r2, #1
 80018b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ba:	f000 fecf 	bl	800265c <HAL_GPIO_WritePin>
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	48000800 	.word	0x48000800
 80018c8:	48000400 	.word	0x48000400

080018cc <Solenoid_Up>:

#include "main.h"
#include "solenoid.h"

void Solenoid_Up()
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Solenoid_GPIO_Port, Solenoid_Pin, GPIO_PIN_SET);
 80018d0:	2201      	movs	r2, #1
 80018d2:	2101      	movs	r1, #1
 80018d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d8:	f000 fec0 	bl	800265c <HAL_GPIO_WritePin>
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}

080018e0 <Solenoid_Down>:

void Solenoid_Down()
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Solenoid_GPIO_Port, Solenoid_Pin, GPIO_PIN_RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2101      	movs	r1, #1
 80018e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ec:	f000 feb6 	bl	800265c <HAL_GPIO_WritePin>
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <Arm_Spin_State>:
uint16_t Calc_Big_Motor_Speed(uint16_t);
uint16_t Calc_Launch_Delay(uint16_t);
void Motor_Init();

void Arm_Spin_State(uint16_t arm_speed)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	80fb      	strh	r3, [r7, #6]
	Motor_Init();
 80018fe:	f000 f8c9 	bl	8001a94 <Motor_Init>

	uint16_t motor_speed = Calc_Big_Motor_Speed(arm_speed);
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	4618      	mov	r0, r3
 8001906:	f000 f88f 	bl	8001a28 <Calc_Big_Motor_Speed>
 800190a:	4603      	mov	r3, r0
 800190c:	81fb      	strh	r3, [r7, #14]

	Set_Digital_Speed(motor_speed);
 800190e:	89fb      	ldrh	r3, [r7, #14]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff fa09 	bl	8000d28 <Set_Digital_Speed>
	HAL_Delay(COMMAND_DELAY);
 8001916:	2064      	movs	r0, #100	; 0x64
 8001918:	f000 fbe4 	bl	80020e4 <HAL_Delay>
	Start_Motor();
 800191c:	f7ff fa30 	bl	8000d80 <Start_Motor>
	HAL_Delay(COMMAND_DELAY);
 8001920:	2064      	movs	r0, #100	; 0x64
 8001922:	f000 fbdf 	bl	80020e4 <HAL_Delay>
}
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <Arm_Done_Spinning>:

uint8_t Arm_Done_Spinning(uint16_t set_arm_speed)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b084      	sub	sp, #16
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	80fb      	strh	r3, [r7, #6]
	uint16_t set_motor_speed = Calc_Big_Motor_Speed(set_arm_speed);
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	4618      	mov	r0, r3
 800193c:	f000 f874 	bl	8001a28 <Calc_Big_Motor_Speed>
 8001940:	4603      	mov	r3, r0
 8001942:	81fb      	strh	r3, [r7, #14]
	uint16_t cur_motor_speed = Verify_Current_Speed();
 8001944:	f7ff fa2c 	bl	8000da0 <Verify_Current_Speed>
 8001948:	4603      	mov	r3, r0
 800194a:	81bb      	strh	r3, [r7, #12]

	if (abs(set_motor_speed - cur_motor_speed) < MOTOR_SPEED_TOL)
 800194c:	89fa      	ldrh	r2, [r7, #14]
 800194e:	89bb      	ldrh	r3, [r7, #12]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f113 0f09 	cmn.w	r3, #9
 8001956:	db06      	blt.n	8001966 <Arm_Done_Spinning+0x38>
 8001958:	89fa      	ldrh	r2, [r7, #14]
 800195a:	89bb      	ldrh	r3, [r7, #12]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b09      	cmp	r3, #9
 8001960:	dc01      	bgt.n	8001966 <Arm_Done_Spinning+0x38>
	{
		return 1;
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <Arm_Done_Spinning+0x3a>
	}
	else
	{
		return 0;
 8001966:	2300      	movs	r3, #0
	}
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <Arm_Stopped>:

uint8_t Arm_Stopped()
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
	uint16_t cur_motor_speed = Verify_Current_Speed();
 8001976:	f7ff fa13 	bl	8000da0 <Verify_Current_Speed>
 800197a:	4603      	mov	r3, r0
 800197c:	80fb      	strh	r3, [r7, #6]

	if (cur_motor_speed < MOTOR_STOP_TOL)
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	2b04      	cmp	r3, #4
 8001982:	d801      	bhi.n	8001988 <Arm_Stopped+0x18>
	{
		return 1;
 8001984:	2301      	movs	r3, #1
 8001986:	e000      	b.n	800198a <Arm_Stopped+0x1a>
	}
	else
	{
		return 0;
 8001988:	2300      	movs	r3, #0
	}
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <Arm_Launched_In_Position>:

uint8_t Arm_Launched_In_Position(uint16_t set_arm_speed)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b084      	sub	sp, #16
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	80fb      	strh	r3, [r7, #6]
	uint16_t set_motor_speed = Calc_Big_Motor_Speed(set_arm_speed);
 800199c:	88fb      	ldrh	r3, [r7, #6]
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f842 	bl	8001a28 <Calc_Big_Motor_Speed>
 80019a4:	4603      	mov	r3, r0
 80019a6:	81fb      	strh	r3, [r7, #14]
	uint16_t launch_delay = Calc_Launch_Delay(set_motor_speed);
 80019a8:	89fb      	ldrh	r3, [r7, #14]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 f84a 	bl	8001a44 <Calc_Launch_Delay>
 80019b0:	4603      	mov	r3, r0
 80019b2:	81bb      	strh	r3, [r7, #12]

	if (Hall_Sensor_Triggered() == 1)
 80019b4:	f7ff fa5e 	bl	8000e74 <Hall_Sensor_Triggered>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d10e      	bne.n	80019dc <Arm_Launched_In_Position+0x4a>
	{
		HAL_Delay(launch_delay);
 80019be:	89bb      	ldrh	r3, [r7, #12]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 fb8f 	bl	80020e4 <HAL_Delay>
		Solenoid_Up();
 80019c6:	f7ff ff81 	bl	80018cc <Solenoid_Up>
		HAL_Delay(launch_delay*LAUNCH_DELAY_DIV); //wait for full rev to confirm launched
 80019ca:	89bb      	ldrh	r3, [r7, #12]
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 fb88 	bl	80020e4 <HAL_Delay>
		Solenoid_Down();
 80019d4:	f7ff ff84 	bl	80018e0 <Solenoid_Down>
		return 1;
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <Arm_Launched_In_Position+0x4c>
	}
	else
	{
		return 0;
 80019dc:	2300      	movs	r3, #0
	}
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <Launch_Disc_State>:

void Launch_Disc_State(uint16_t set_arm_speed)
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b084      	sub	sp, #16
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	4603      	mov	r3, r0
 80019ee:	80fb      	strh	r3, [r7, #6]
	uint16_t set_motor_speed = Calc_Big_Motor_Speed(set_arm_speed);
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f818 	bl	8001a28 <Calc_Big_Motor_Speed>
 80019f8:	4603      	mov	r3, r0
 80019fa:	81fb      	strh	r3, [r7, #14]
	uint16_t launch_delay = Calc_Launch_Delay(set_motor_speed);
 80019fc:	89fb      	ldrh	r3, [r7, #14]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 f820 	bl	8001a44 <Calc_Launch_Delay>
 8001a04:	4603      	mov	r3, r0
 8001a06:	81bb      	strh	r3, [r7, #12]

	HAL_Delay(launch_delay);
 8001a08:	89bb      	ldrh	r3, [r7, #12]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 fb6a 	bl	80020e4 <HAL_Delay>
	//Blue_On();
	//HAL_Delay(500);
	//Blue_Off();
	//Green_On();
	Solenoid_Up();
 8001a10:	f7ff ff5c 	bl	80018cc <Solenoid_Up>
	//HAL_Delay(500);

	//Green_Off();
	//Red_On();
	//HAL_Delay(launch_delay*LAUNCH_DELAY_DIV); //wait for full rev to confirm launched
	HAL_Delay(500);
 8001a14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a18:	f000 fb64 	bl	80020e4 <HAL_Delay>
	//Red_Off();
	Solenoid_Down();
 8001a1c:	f7ff ff60 	bl	80018e0 <Solenoid_Down>
}
 8001a20:	bf00      	nop
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <Calc_Big_Motor_Speed>:

uint16_t Calc_Big_Motor_Speed(uint16_t arm_speed)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	80fb      	strh	r3, [r7, #6]
	return arm_speed * BIG_MOTOR_GEAR_RATIO;
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	b29b      	uxth	r3, r3
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <Calc_Launch_Delay>:

uint16_t Calc_Launch_Delay(uint16_t motor_speed)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	80fb      	strh	r3, [r7, #6]
	uint16_t rev_period = 1000.0/(motor_speed/60.0);
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fd3f 	bl	80004d4 <__aeabi_i2d>
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <Calc_Launch_Delay+0x48>)
 8001a5c:	f7fe fece 	bl	80007fc <__aeabi_ddiv>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	f04f 0000 	mov.w	r0, #0
 8001a68:	4909      	ldr	r1, [pc, #36]	; (8001a90 <Calc_Launch_Delay+0x4c>)
 8001a6a:	f7fe fec7 	bl	80007fc <__aeabi_ddiv>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	f7fe ffa9 	bl	80009cc <__aeabi_d2uiz>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	81fb      	strh	r3, [r7, #14]
	return rev_period /LAUNCH_DELAY_DIV;
 8001a7e:	89fb      	ldrh	r3, [r7, #14]
 8001a80:	089b      	lsrs	r3, r3, #2
 8001a82:	b29b      	uxth	r3, r3
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3710      	adds	r7, #16
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	404e0000 	.word	0x404e0000
 8001a90:	408f4000 	.word	0x408f4000

08001a94 <Motor_Init>:

void Motor_Init()
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
	Digital_Mode();
 8001a98:	f7ff f936 	bl	8000d08 <Digital_Mode>
	HAL_Delay(COMMAND_DELAY);
 8001a9c:	2064      	movs	r0, #100	; 0x64
 8001a9e:	f000 fb21 	bl	80020e4 <HAL_Delay>
	Set_Counterclockwise_Direction();
 8001aa2:	f7ff f9d7 	bl	8000e54 <Set_Counterclockwise_Direction>
	HAL_Delay(COMMAND_DELAY);
 8001aa6:	2064      	movs	r0, #100	; 0x64
 8001aa8:	f000 fb1c 	bl	80020e4 <HAL_Delay>
	Coast();
 8001aac:	f7ff f9b2 	bl	8000e14 <Coast>
	HAL_Delay(COMMAND_DELAY);
 8001ab0:	2064      	movs	r0, #100	; 0x64
 8001ab2:	f000 fb17 	bl	80020e4 <HAL_Delay>
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <LL_AHB2_GRP1_EnableClock>:
{
 8001aba:	b480      	push	{r7}
 8001abc:	b085      	sub	sp, #20
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ac8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4013      	ands	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ade:	68fb      	ldr	r3, [r7, #12]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001afa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b10:	68fb      	ldr	r3, [r7, #12]
}
 8001b12:	bf00      	nop
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b085      	sub	sp, #20
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b42:	68fb      	ldr	r3, [r7, #12]
}
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4013      	ands	r3, r2
 8001b72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b74:	68fb      	ldr	r3, [r7, #12]
}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b09c      	sub	sp, #112	; 0x70
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b98:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ba8:	f107 030c 	add.w	r3, r7, #12
 8001bac:	2250      	movs	r2, #80	; 0x50
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f003 fbf5 	bl	80053a0 <memset>
  if(huart->Instance==LPUART1)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a2b      	ldr	r2, [pc, #172]	; (8001c68 <HAL_UART_MspInit+0xd8>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d125      	bne.n	8001c0c <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bc8:	f107 030c 	add.w	r3, r7, #12
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f002 f9c1 	bl	8003f54 <HAL_RCCEx_PeriphCLKConfig>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bd8:	f7ff fd2e 	bl	8001638 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001bdc:	2001      	movs	r0, #1
 8001bde:	f7ff ff9e 	bl	8001b1e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	2001      	movs	r0, #1
 8001be4:	f7ff ff69 	bl	8001aba <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = MOTOR_TX_Pin|MOTOR_RX_Pin;
 8001be8:	230c      	movs	r3, #12
 8001bea:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	2302      	movs	r3, #2
 8001bee:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001bf8:	2308      	movs	r3, #8
 8001bfa:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c00:	4619      	mov	r1, r3
 8001c02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c06:	f000 fba1 	bl	800234c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c0a:	e029      	b.n	8001c60 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART1)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a16      	ldr	r2, [pc, #88]	; (8001c6c <HAL_UART_MspInit+0xdc>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d124      	bne.n	8001c60 <HAL_UART_MspInit+0xd0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c16:	2301      	movs	r3, #1
 8001c18:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c1e:	f107 030c 	add.w	r3, r7, #12
 8001c22:	4618      	mov	r0, r3
 8001c24:	f002 f996 	bl	8003f54 <HAL_RCCEx_PeriphCLKConfig>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_UART_MspInit+0xa2>
      Error_Handler();
 8001c2e:	f7ff fd03 	bl	8001638 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c32:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c36:	f7ff ff8b 	bl	8001b50 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3a:	2002      	movs	r0, #2
 8001c3c:	f7ff ff3d 	bl	8001aba <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = STLINERX_Pin|STLINK_TX_Pin;
 8001c40:	23c0      	movs	r3, #192	; 0xc0
 8001c42:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c50:	2307      	movs	r3, #7
 8001c52:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c54:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4805      	ldr	r0, [pc, #20]	; (8001c70 <HAL_UART_MspInit+0xe0>)
 8001c5c:	f000 fb76 	bl	800234c <HAL_GPIO_Init>
}
 8001c60:	bf00      	nop
 8001c62:	3770      	adds	r7, #112	; 0x70
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40008000 	.word	0x40008000
 8001c6c:	40013800 	.word	0x40013800
 8001c70:	48000400 	.word	0x48000400

08001c74 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b09c      	sub	sp, #112	; 0x70
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c7c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	605a      	str	r2, [r3, #4]
 8001c86:	609a      	str	r2, [r3, #8]
 8001c88:	60da      	str	r2, [r3, #12]
 8001c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	2250      	movs	r2, #80	; 0x50
 8001c92:	2100      	movs	r1, #0
 8001c94:	4618      	mov	r0, r3
 8001c96:	f003 fb83 	bl	80053a0 <memset>
  if(hpcd->Instance==USB)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a1f      	ldr	r2, [pc, #124]	; (8001d1c <HAL_PCD_MspInit+0xa8>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d136      	bne.n	8001d12 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001ca4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ca8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001caa:	2318      	movs	r3, #24
 8001cac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001cae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cb2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001cb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cb8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001cba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001cbe:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001cc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cc4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001cc6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001cca:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ccc:	f107 030c 	add.w	r3, r7, #12
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f002 f93f 	bl	8003f54 <HAL_RCCEx_PeriphCLKConfig>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8001cdc:	f7ff fcac 	bl	8001638 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	f7ff feea 	bl	8001aba <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ce6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001cea:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001cf8:	230a      	movs	r3, #10
 8001cfa:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001d00:	4619      	mov	r1, r3
 8001d02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d06:	f000 fb21 	bl	800234c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001d0a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001d0e:	f7ff feed 	bl	8001aec <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001d12:	bf00      	nop
 8001d14:	3770      	adds	r7, #112	; 0x70
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40006800 	.word	0x40006800

08001d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d24:	e7fe      	b.n	8001d24 <NMI_Handler+0x4>

08001d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d2a:	e7fe      	b.n	8001d2a <HardFault_Handler+0x4>

08001d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <MemManage_Handler+0x4>

08001d32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d36:	e7fe      	b.n	8001d36 <BusFault_Handler+0x4>

08001d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <UsageFault_Handler+0x4>

08001d3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d6c:	f000 f98e 	bl	800208c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f000 fc87 	bl	800268c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8001d86:	2002      	movs	r0, #2
 8001d88:	f000 fc80 	bl	800268c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001d94:	2010      	movs	r0, #16
 8001d96:	f000 fc79 	bl	800268c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001da8:	4a14      	ldr	r2, [pc, #80]	; (8001dfc <_sbrk+0x5c>)
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <_sbrk+0x60>)
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001db4:	4b13      	ldr	r3, [pc, #76]	; (8001e04 <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <_sbrk+0x64>)
 8001dbe:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <_sbrk+0x68>)
 8001dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <_sbrk+0x64>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d207      	bcs.n	8001de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dd0:	f003 faee 	bl	80053b0 <__errno>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
 8001dde:	e009      	b.n	8001df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <_sbrk+0x64>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001de6:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <_sbrk+0x64>)
 8001df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001df2:	68fb      	ldr	r3, [r7, #12]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20030000 	.word	0x20030000
 8001e00:	00000800 	.word	0x00000800
 8001e04:	2000049c 	.word	0x2000049c
 8001e08:	200005f0 	.word	0x200005f0

08001e0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001e10:	4b24      	ldr	r3, [pc, #144]	; (8001ea4 <SystemInit+0x98>)
 8001e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e16:	4a23      	ldr	r2, [pc, #140]	; (8001ea4 <SystemInit+0x98>)
 8001e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e34:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001e38:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e44:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <SystemInit+0x9c>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e52:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e56:	f023 0305 	bic.w	r3, r3, #5
 8001e5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e6a:	f023 0301 	bic.w	r3, r3, #1
 8001e6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e76:	4a0d      	ldr	r2, [pc, #52]	; (8001eac <SystemInit+0xa0>)
 8001e78:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e7e:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <SystemInit+0xa0>)
 8001e80:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e90:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e96:	2200      	movs	r2, #0
 8001e98:	619a      	str	r2, [r3, #24]
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000ed00 	.word	0xe000ed00
 8001ea8:	faf6fefb 	.word	0xfaf6fefb
 8001eac:	22041000 	.word	0x22041000

08001eb0 <Array_To_Int>:

#include "utilities.h"
#include <stdio.h>

uint16_t Array_To_Int(char array[])
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	uint16_t i;
	sscanf(array, "%hd", &i);
 8001eb8:	f107 030e 	add.w	r3, r7, #14
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4904      	ldr	r1, [pc, #16]	; (8001ed0 <Array_To_Int+0x20>)
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f003 fa3f 	bl	8005344 <siscanf>
	return i;
 8001ec6:	89fb      	ldrh	r3, [r7, #14]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	0800669c 	.word	0x0800669c

08001ed4 <Red_On>:

void Red_On()
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001ed8:	2201      	movs	r2, #1
 8001eda:	2102      	movs	r1, #2
 8001edc:	4802      	ldr	r0, [pc, #8]	; (8001ee8 <Red_On+0x14>)
 8001ede:	f000 fbbd 	bl	800265c <HAL_GPIO_WritePin>
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	48000400 	.word	0x48000400

08001eec <Red_Off>:

void Red_Off()
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2102      	movs	r1, #2
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <Red_Off+0x14>)
 8001ef6:	f000 fbb1 	bl	800265c <HAL_GPIO_WritePin>
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	48000400 	.word	0x48000400

08001f04 <Green_On>:

void Green_On()
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001f08:	2201      	movs	r2, #1
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	4802      	ldr	r0, [pc, #8]	; (8001f18 <Green_On+0x14>)
 8001f0e:	f000 fba5 	bl	800265c <HAL_GPIO_WritePin>
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	48000400 	.word	0x48000400

08001f1c <Green_Off>:

void Green_Off()
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001f20:	2200      	movs	r2, #0
 8001f22:	2101      	movs	r1, #1
 8001f24:	4802      	ldr	r0, [pc, #8]	; (8001f30 <Green_Off+0x14>)
 8001f26:	f000 fb99 	bl	800265c <HAL_GPIO_WritePin>
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	48000400 	.word	0x48000400

08001f34 <Blue_On>:

void Blue_On()
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001f38:	2201      	movs	r2, #1
 8001f3a:	2120      	movs	r1, #32
 8001f3c:	4802      	ldr	r0, [pc, #8]	; (8001f48 <Blue_On+0x14>)
 8001f3e:	f000 fb8d 	bl	800265c <HAL_GPIO_WritePin>
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	48000400 	.word	0x48000400

08001f4c <Blue_Off>:

void Blue_Off()
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001f50:	2200      	movs	r2, #0
 8001f52:	2120      	movs	r1, #32
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <Blue_Off+0x14>)
 8001f56:	f000 fb81 	bl	800265c <HAL_GPIO_WritePin>
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	48000400 	.word	0x48000400

08001f64 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001f64:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f66:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f68:	3304      	adds	r3, #4

08001f6a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f6a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f6c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001f6e:	d3f9      	bcc.n	8001f64 <CopyDataInit>
  bx lr
 8001f70:	4770      	bx	lr

08001f72 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001f72:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001f74:	3004      	adds	r0, #4

08001f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001f76:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001f78:	d3fb      	bcc.n	8001f72 <FillZerobss>
  bx lr
 8001f7a:	4770      	bx	lr

08001f7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f7c:	480c      	ldr	r0, [pc, #48]	; (8001fb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f7e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f80:	f7ff ff44 	bl	8001e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001f84:	480b      	ldr	r0, [pc, #44]	; (8001fb4 <LoopForever+0x6>)
 8001f86:	490c      	ldr	r1, [pc, #48]	; (8001fb8 <LoopForever+0xa>)
 8001f88:	4a0c      	ldr	r2, [pc, #48]	; (8001fbc <LoopForever+0xe>)
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f7ff ffed 	bl	8001f6a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001f90:	480b      	ldr	r0, [pc, #44]	; (8001fc0 <LoopForever+0x12>)
 8001f92:	490c      	ldr	r1, [pc, #48]	; (8001fc4 <LoopForever+0x16>)
 8001f94:	4a0c      	ldr	r2, [pc, #48]	; (8001fc8 <LoopForever+0x1a>)
 8001f96:	2300      	movs	r3, #0
 8001f98:	f7ff ffe7 	bl	8001f6a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001f9c:	480b      	ldr	r0, [pc, #44]	; (8001fcc <LoopForever+0x1e>)
 8001f9e:	490c      	ldr	r1, [pc, #48]	; (8001fd0 <LoopForever+0x22>)
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f7ff ffe8 	bl	8001f76 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001fa6:	f003 fa09 	bl	80053bc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001faa:	f7fe ffa3 	bl	8000ef4 <main>

08001fae <LoopForever>:

LoopForever:
  b LoopForever
 8001fae:	e7fe      	b.n	8001fae <LoopForever>
  ldr   r0, =_estack
 8001fb0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001fb4:	20000008 	.word	0x20000008
 8001fb8:	20000074 	.word	0x20000074
 8001fbc:	08006900 	.word	0x08006900
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001fc0:	20030000 	.word	0x20030000
 8001fc4:	20030000 	.word	0x20030000
 8001fc8:	0800696c 	.word	0x0800696c
  INIT_BSS _sbss, _ebss
 8001fcc:	20000074 	.word	0x20000074
 8001fd0:	200005ec 	.word	0x200005ec

08001fd4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fd4:	e7fe      	b.n	8001fd4 <ADC1_IRQHandler>
	...

08001fd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <HAL_Init+0x3c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a0b      	ldr	r2, [pc, #44]	; (8002014 <HAL_Init+0x3c>)
 8001fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fee:	2003      	movs	r0, #3
 8001ff0:	f000 f96c 	bl	80022cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	f000 f80f 	bl	8002018 <HAL_InitTick>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d002      	beq.n	8002006 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	71fb      	strb	r3, [r7, #7]
 8002004:	e001      	b.n	800200a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002006:	f7ff fdbc 	bl	8001b82 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800200a:	79fb      	ldrb	r3, [r7, #7]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	58004000 	.word	0x58004000

08002018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002024:	4b17      	ldr	r3, [pc, #92]	; (8002084 <HAL_InitTick+0x6c>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d024      	beq.n	8002076 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800202c:	f001 fcf2 	bl	8003a14 <HAL_RCC_GetHCLKFreq>
 8002030:	4602      	mov	r2, r0
 8002032:	4b14      	ldr	r3, [pc, #80]	; (8002084 <HAL_InitTick+0x6c>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	4619      	mov	r1, r3
 8002038:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002040:	fbb2 f3f3 	udiv	r3, r2, r3
 8002044:	4618      	mov	r0, r3
 8002046:	f000 f974 	bl	8002332 <HAL_SYSTICK_Config>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10f      	bne.n	8002070 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b0f      	cmp	r3, #15
 8002054:	d809      	bhi.n	800206a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002056:	2200      	movs	r2, #0
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	f04f 30ff 	mov.w	r0, #4294967295
 800205e:	f000 f940 	bl	80022e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002062:	4a09      	ldr	r2, [pc, #36]	; (8002088 <HAL_InitTick+0x70>)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	e007      	b.n	800207a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	73fb      	strb	r3, [r7, #15]
 800206e:	e004      	b.n	800207a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	73fb      	strb	r3, [r7, #15]
 8002074:	e001      	b.n	800207a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800207a:	7bfb      	ldrb	r3, [r7, #15]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20000020 	.word	0x20000020
 8002088:	2000001c 	.word	0x2000001c

0800208c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_IncTick+0x20>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	461a      	mov	r2, r3
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_IncTick+0x24>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4413      	add	r3, r2
 800209c:	4a04      	ldr	r2, [pc, #16]	; (80020b0 <HAL_IncTick+0x24>)
 800209e:	6013      	str	r3, [r2, #0]
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	20000020 	.word	0x20000020
 80020b0:	200004a0 	.word	0x200004a0

080020b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return uwTick;
 80020b8:	4b03      	ldr	r3, [pc, #12]	; (80020c8 <HAL_GetTick+0x14>)
 80020ba:	681b      	ldr	r3, [r3, #0]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	200004a0 	.word	0x200004a0

080020cc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80020d0:	4b03      	ldr	r3, [pc, #12]	; (80020e0 <HAL_GetTickPrio+0x14>)
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	2000001c 	.word	0x2000001c

080020e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020ec:	f7ff ffe2 	bl	80020b4 <HAL_GetTick>
 80020f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fc:	d005      	beq.n	800210a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_Delay+0x44>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4413      	add	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800210a:	bf00      	nop
 800210c:	f7ff ffd2 	bl	80020b4 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	429a      	cmp	r2, r3
 800211a:	d8f7      	bhi.n	800210c <HAL_Delay+0x28>
  {
  }
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000020 	.word	0x20000020

0800212c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <__NVIC_SetPriorityGrouping+0x44>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002148:	4013      	ands	r3, r2
 800214a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002154:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800215c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800215e:	4a04      	ldr	r2, [pc, #16]	; (8002170 <__NVIC_SetPriorityGrouping+0x44>)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	60d3      	str	r3, [r2, #12]
}
 8002164:	bf00      	nop
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <__NVIC_GetPriorityGrouping+0x18>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	0a1b      	lsrs	r3, r3, #8
 800217e:	f003 0307 	and.w	r3, r3, #7
}
 8002182:	4618      	mov	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	db0b      	blt.n	80021ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021a2:	79fb      	ldrb	r3, [r7, #7]
 80021a4:	f003 021f 	and.w	r2, r3, #31
 80021a8:	4907      	ldr	r1, [pc, #28]	; (80021c8 <__NVIC_EnableIRQ+0x38>)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	095b      	lsrs	r3, r3, #5
 80021b0:	2001      	movs	r0, #1
 80021b2:	fa00 f202 	lsl.w	r2, r0, r2
 80021b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000e100 	.word	0xe000e100

080021cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	6039      	str	r1, [r7, #0]
 80021d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	db0a      	blt.n	80021f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	490c      	ldr	r1, [pc, #48]	; (8002218 <__NVIC_SetPriority+0x4c>)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	0112      	lsls	r2, r2, #4
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	440b      	add	r3, r1
 80021f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021f4:	e00a      	b.n	800220c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	4908      	ldr	r1, [pc, #32]	; (800221c <__NVIC_SetPriority+0x50>)
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	3b04      	subs	r3, #4
 8002204:	0112      	lsls	r2, r2, #4
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	440b      	add	r3, r1
 800220a:	761a      	strb	r2, [r3, #24]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000e100 	.word	0xe000e100
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002220:	b480      	push	{r7}
 8002222:	b089      	sub	sp, #36	; 0x24
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f1c3 0307 	rsb	r3, r3, #7
 800223a:	2b04      	cmp	r3, #4
 800223c:	bf28      	it	cs
 800223e:	2304      	movcs	r3, #4
 8002240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3304      	adds	r3, #4
 8002246:	2b06      	cmp	r3, #6
 8002248:	d902      	bls.n	8002250 <NVIC_EncodePriority+0x30>
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3b03      	subs	r3, #3
 800224e:	e000      	b.n	8002252 <NVIC_EncodePriority+0x32>
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002254:	f04f 32ff 	mov.w	r2, #4294967295
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	fa02 f303 	lsl.w	r3, r2, r3
 800225e:	43da      	mvns	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	401a      	ands	r2, r3
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002268:	f04f 31ff 	mov.w	r1, #4294967295
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	fa01 f303 	lsl.w	r3, r1, r3
 8002272:	43d9      	mvns	r1, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002278:	4313      	orrs	r3, r2
         );
}
 800227a:	4618      	mov	r0, r3
 800227c:	3724      	adds	r7, #36	; 0x24
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3b01      	subs	r3, #1
 8002294:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002298:	d301      	bcc.n	800229e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800229a:	2301      	movs	r3, #1
 800229c:	e00f      	b.n	80022be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800229e:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <SysTick_Config+0x40>)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022a6:	210f      	movs	r1, #15
 80022a8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ac:	f7ff ff8e 	bl	80021cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <SysTick_Config+0x40>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022b6:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <SysTick_Config+0x40>)
 80022b8:	2207      	movs	r2, #7
 80022ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	e000e010 	.word	0xe000e010

080022cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7ff ff29 	bl	800212c <__NVIC_SetPriorityGrouping>
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b086      	sub	sp, #24
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	4603      	mov	r3, r0
 80022ea:	60b9      	str	r1, [r7, #8]
 80022ec:	607a      	str	r2, [r7, #4]
 80022ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022f0:	f7ff ff40 	bl	8002174 <__NVIC_GetPriorityGrouping>
 80022f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	6978      	ldr	r0, [r7, #20]
 80022fc:	f7ff ff90 	bl	8002220 <NVIC_EncodePriority>
 8002300:	4602      	mov	r2, r0
 8002302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff ff5f 	bl	80021cc <__NVIC_SetPriority>
}
 800230e:	bf00      	nop
 8002310:	3718      	adds	r7, #24
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff33 	bl	8002190 <__NVIC_EnableIRQ>
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002332:	b580      	push	{r7, lr}
 8002334:	b082      	sub	sp, #8
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7ff ffa4 	bl	8002288 <SysTick_Config>
 8002340:	4603      	mov	r3, r0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800234c:	b480      	push	{r7}
 800234e:	b087      	sub	sp, #28
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800235a:	e14c      	b.n	80025f6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	2101      	movs	r1, #1
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	fa01 f303 	lsl.w	r3, r1, r3
 8002368:	4013      	ands	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 813e 	beq.w	80025f0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	2b01      	cmp	r3, #1
 800237e:	d005      	beq.n	800238c <HAL_GPIO_Init+0x40>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d130      	bne.n	80023ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	2203      	movs	r2, #3
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4013      	ands	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023c2:	2201      	movs	r2, #1
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4013      	ands	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	091b      	lsrs	r3, r3, #4
 80023d8:	f003 0201 	and.w	r2, r3, #1
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d017      	beq.n	800242a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	2203      	movs	r2, #3
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4013      	ands	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d123      	bne.n	800247e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	08da      	lsrs	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3208      	adds	r2, #8
 800243e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002442:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	220f      	movs	r2, #15
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	4013      	ands	r3, r2
 8002458:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	691a      	ldr	r2, [r3, #16]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	fa02 f303 	lsl.w	r3, r2, r3
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	08da      	lsrs	r2, r3, #3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3208      	adds	r2, #8
 8002478:	6939      	ldr	r1, [r7, #16]
 800247a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	2203      	movs	r2, #3
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4013      	ands	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 0203 	and.w	r2, r3, #3
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 8098 	beq.w	80025f0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80024c0:	4a54      	ldr	r2, [pc, #336]	; (8002614 <HAL_GPIO_Init+0x2c8>)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	089b      	lsrs	r3, r3, #2
 80024c6:	3302      	adds	r3, #2
 80024c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	220f      	movs	r2, #15
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4013      	ands	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024ea:	d019      	beq.n	8002520 <HAL_GPIO_Init+0x1d4>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a4a      	ldr	r2, [pc, #296]	; (8002618 <HAL_GPIO_Init+0x2cc>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d013      	beq.n	800251c <HAL_GPIO_Init+0x1d0>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a49      	ldr	r2, [pc, #292]	; (800261c <HAL_GPIO_Init+0x2d0>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d00d      	beq.n	8002518 <HAL_GPIO_Init+0x1cc>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a48      	ldr	r2, [pc, #288]	; (8002620 <HAL_GPIO_Init+0x2d4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d007      	beq.n	8002514 <HAL_GPIO_Init+0x1c8>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a47      	ldr	r2, [pc, #284]	; (8002624 <HAL_GPIO_Init+0x2d8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d101      	bne.n	8002510 <HAL_GPIO_Init+0x1c4>
 800250c:	2304      	movs	r3, #4
 800250e:	e008      	b.n	8002522 <HAL_GPIO_Init+0x1d6>
 8002510:	2307      	movs	r3, #7
 8002512:	e006      	b.n	8002522 <HAL_GPIO_Init+0x1d6>
 8002514:	2303      	movs	r3, #3
 8002516:	e004      	b.n	8002522 <HAL_GPIO_Init+0x1d6>
 8002518:	2302      	movs	r3, #2
 800251a:	e002      	b.n	8002522 <HAL_GPIO_Init+0x1d6>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <HAL_GPIO_Init+0x1d6>
 8002520:	2300      	movs	r3, #0
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	f002 0203 	and.w	r2, r2, #3
 8002528:	0092      	lsls	r2, r2, #2
 800252a:	4093      	lsls	r3, r2
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	4313      	orrs	r3, r2
 8002530:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002532:	4938      	ldr	r1, [pc, #224]	; (8002614 <HAL_GPIO_Init+0x2c8>)
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	089b      	lsrs	r3, r3, #2
 8002538:	3302      	adds	r3, #2
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002540:	4b39      	ldr	r3, [pc, #228]	; (8002628 <HAL_GPIO_Init+0x2dc>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	43db      	mvns	r3, r3
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4013      	ands	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002564:	4a30      	ldr	r2, [pc, #192]	; (8002628 <HAL_GPIO_Init+0x2dc>)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800256a:	4b2f      	ldr	r3, [pc, #188]	; (8002628 <HAL_GPIO_Init+0x2dc>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	43db      	mvns	r3, r3
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	4013      	ands	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800258e:	4a26      	ldr	r2, [pc, #152]	; (8002628 <HAL_GPIO_Init+0x2dc>)
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002594:	4b24      	ldr	r3, [pc, #144]	; (8002628 <HAL_GPIO_Init+0x2dc>)
 8002596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800259a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	43db      	mvns	r3, r3
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4013      	ands	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025ba:	4a1b      	ldr	r2, [pc, #108]	; (8002628 <HAL_GPIO_Init+0x2dc>)
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80025c2:	4b19      	ldr	r3, [pc, #100]	; (8002628 <HAL_GPIO_Init+0x2dc>)
 80025c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4013      	ands	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025e8:	4a0f      	ldr	r2, [pc, #60]	; (8002628 <HAL_GPIO_Init+0x2dc>)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	3301      	adds	r3, #1
 80025f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	f47f aeab 	bne.w	800235c <HAL_GPIO_Init+0x10>
  }
}
 8002606:	bf00      	nop
 8002608:	bf00      	nop
 800260a:	371c      	adds	r7, #28
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	40010000 	.word	0x40010000
 8002618:	48000400 	.word	0x48000400
 800261c:	48000800 	.word	0x48000800
 8002620:	48000c00 	.word	0x48000c00
 8002624:	48001000 	.word	0x48001000
 8002628:	58000800 	.word	0x58000800

0800262c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	887b      	ldrh	r3, [r7, #2]
 800263e:	4013      	ands	r3, r2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d002      	beq.n	800264a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002644:	2301      	movs	r3, #1
 8002646:	73fb      	strb	r3, [r7, #15]
 8002648:	e001      	b.n	800264e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800264a:	2300      	movs	r3, #0
 800264c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800264e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	807b      	strh	r3, [r7, #2]
 8002668:	4613      	mov	r3, r2
 800266a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800266c:	787b      	ldrb	r3, [r7, #1]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002672:	887a      	ldrh	r2, [r7, #2]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002678:	e002      	b.n	8002680 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800267a:	887a      	ldrh	r2, [r7, #2]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002696:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	4013      	ands	r3, r2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d006      	beq.n	80026b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026a2:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026a4:	88fb      	ldrh	r3, [r7, #6]
 80026a6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe ffaa 	bl	8001604 <HAL_GPIO_EXTI_Callback>
  }
}
 80026b0:	bf00      	nop
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	58000800 	.word	0x58000800

080026bc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e0c0      	b.n	8002850 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d106      	bne.n	80026e8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff fac6 	bl	8001c74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2203      	movs	r2, #3
 80026ec:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f002 fdcb 	bl	8005290 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	e03e      	b.n	800277e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002700:	7bfa      	ldrb	r2, [r7, #15]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	00db      	lsls	r3, r3, #3
 800270c:	440b      	add	r3, r1
 800270e:	3311      	adds	r3, #17
 8002710:	2201      	movs	r2, #1
 8002712:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002714:	7bfa      	ldrb	r2, [r7, #15]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	440b      	add	r3, r1
 8002722:	3310      	adds	r3, #16
 8002724:	7bfa      	ldrb	r2, [r7, #15]
 8002726:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002728:	7bfa      	ldrb	r2, [r7, #15]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	440b      	add	r3, r1
 8002736:	3313      	adds	r3, #19
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800273c:	7bfa      	ldrb	r2, [r7, #15]
 800273e:	6879      	ldr	r1, [r7, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	440b      	add	r3, r1
 800274a:	3320      	adds	r3, #32
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002750:	7bfa      	ldrb	r2, [r7, #15]
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	4613      	mov	r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	4413      	add	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	440b      	add	r3, r1
 800275e:	3324      	adds	r3, #36	; 0x24
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	440b      	add	r3, r1
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002778:	7bfb      	ldrb	r3, [r7, #15]
 800277a:	3301      	adds	r3, #1
 800277c:	73fb      	strb	r3, [r7, #15]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	791b      	ldrb	r3, [r3, #4]
 8002782:	7bfa      	ldrb	r2, [r7, #15]
 8002784:	429a      	cmp	r2, r3
 8002786:	d3bb      	bcc.n	8002700 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002788:	2300      	movs	r3, #0
 800278a:	73fb      	strb	r3, [r7, #15]
 800278c:	e044      	b.n	8002818 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	4413      	add	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	440b      	add	r3, r1
 800279c:	f203 1351 	addw	r3, r3, #337	; 0x151
 80027a0:	2200      	movs	r2, #0
 80027a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027a4:	7bfa      	ldrb	r2, [r7, #15]
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	440b      	add	r3, r1
 80027b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80027b6:	7bfa      	ldrb	r2, [r7, #15]
 80027b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027ba:	7bfa      	ldrb	r2, [r7, #15]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	440b      	add	r3, r1
 80027c8:	f203 1353 	addw	r3, r3, #339	; 0x153
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027d0:	7bfa      	ldrb	r2, [r7, #15]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	440b      	add	r3, r1
 80027de:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80027e2:	2200      	movs	r2, #0
 80027e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027e6:	7bfa      	ldrb	r2, [r7, #15]
 80027e8:	6879      	ldr	r1, [r7, #4]
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	440b      	add	r3, r1
 80027f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027fc:	7bfa      	ldrb	r2, [r7, #15]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	00db      	lsls	r3, r3, #3
 8002808:	440b      	add	r3, r1
 800280a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	3301      	adds	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	791b      	ldrb	r3, [r3, #4]
 800281c:	7bfa      	ldrb	r2, [r7, #15]
 800281e:	429a      	cmp	r2, r3
 8002820:	d3b5      	bcc.n	800278e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3304      	adds	r3, #4
 800282a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800282e:	f002 fd4a 	bl	80052c6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	7a9b      	ldrb	r3, [r3, #10]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d102      	bne.n	800284e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f805 	bl	8002858 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800287c:	b29b      	uxth	r3, r3
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002890:	b29b      	uxth	r3, r3
 8002892:	f043 0302 	orr.w	r3, r3, #2
 8002896:	b29a      	uxth	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a04      	ldr	r2, [pc, #16]	; (80028c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80028b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ba:	6013      	str	r3, [r2, #0]
}
 80028bc:	bf00      	nop
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	58000400 	.word	0x58000400

080028cc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80028d0:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80028d8:	4618      	mov	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	58000400 	.word	0x58000400

080028e8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80028ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028fa:	d101      	bne.n	8002900 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <LL_RCC_HSE_Enable>:
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800291a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800291e:	6013      	str	r3, [r2, #0]
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <LL_RCC_HSE_Disable>:
{
 800292a:	b480      	push	{r7}
 800292c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800292e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800293c:	6013      	str	r3, [r2, #0]
}
 800293e:	bf00      	nop
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <LL_RCC_HSE_IsReady>:
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800294c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002956:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800295a:	d101      	bne.n	8002960 <LL_RCC_HSE_IsReady+0x18>
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <LL_RCC_HSE_IsReady+0x1a>
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <LL_RCC_HSI_Enable>:
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800297a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297e:	6013      	str	r3, [r2, #0]
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <LL_RCC_HSI_Disable>:
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800298e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002998:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800299c:	6013      	str	r3, [r2, #0]
}
 800299e:	bf00      	nop
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <LL_RCC_HSI_IsReady>:
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80029ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ba:	d101      	bne.n	80029c0 <LL_RCC_HSI_IsReady+0x18>
 80029bc:	2301      	movs	r3, #1
 80029be:	e000      	b.n	80029c2 <LL_RCC_HSI_IsReady+0x1a>
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <LL_RCC_HSI_SetCalibTrimming>:
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80029d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	061b      	lsls	r3, r3, #24
 80029e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029e6:	4313      	orrs	r3, r2
 80029e8:	604b      	str	r3, [r1, #4]
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <LL_RCC_HSI48_Enable>:
{
 80029f6:	b480      	push	{r7}
 80029f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80029fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <LL_RCC_HSI48_Disable>:
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a28:	f023 0301 	bic.w	r3, r3, #1
 8002a2c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002a30:	bf00      	nop
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr

08002a3a <LL_RCC_HSI48_IsReady>:
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d101      	bne.n	8002a52 <LL_RCC_HSI48_IsReady+0x18>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <LL_RCC_HSI48_IsReady+0x1a>
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <LL_RCC_LSE_Enable>:
{
 8002a5e:	b480      	push	{r7}
 8002a60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002a76:	bf00      	nop
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <LL_RCC_LSE_Disable>:
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a90:	f023 0301 	bic.w	r3, r3, #1
 8002a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002a98:	bf00      	nop
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <LL_RCC_LSE_EnableBypass>:
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ab2:	f043 0304 	orr.w	r3, r3, #4
 8002ab6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002aba:	bf00      	nop
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_RCC_LSE_DisableBypass>:
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ad4:	f023 0304 	bic.w	r3, r3, #4
 8002ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002adc:	bf00      	nop
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d101      	bne.n	8002afe <LL_RCC_LSE_IsReady+0x18>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <LL_RCC_LSE_IsReady+0x1a>
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002b0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b1a:	f043 0301 	orr.w	r3, r3, #1
 8002b1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002b22:	bf00      	nop
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b3c:	f023 0301 	bic.w	r3, r3, #1
 8002b40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002b4e:	b480      	push	{r7}
 8002b50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d101      	bne.n	8002b66 <LL_RCC_LSI1_IsReady+0x18>
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <LL_RCC_LSI1_IsReady+0x1a>
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002b72:	b480      	push	{r7}
 8002b74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b82:	f043 0304 	orr.w	r3, r3, #4
 8002b86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002b8a:	bf00      	nop
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ba0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ba4:	f023 0304 	bic.w	r3, r3, #4
 8002ba8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d101      	bne.n	8002bce <LL_RCC_LSI2_IsReady+0x18>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <LL_RCC_LSI2_IsReady+0x1a>
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	021b      	lsls	r3, r3, #8
 8002bf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	6013      	str	r3, [r2, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002c26:	b480      	push	{r7}
 8002c28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c34:	f023 0301 	bic.w	r3, r3, #1
 8002c38:	6013      	str	r3, [r2, #0]
}
 8002c3a:	bf00      	nop
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d101      	bne.n	8002c5a <LL_RCC_MSI_IsReady+0x16>
 8002c56:	2301      	movs	r3, #1
 8002c58:	e000      	b.n	8002c5c <LL_RCC_MSI_IsReady+0x18>
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	600b      	str	r3, [r1, #0]
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c9e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2bb0      	cmp	r3, #176	; 0xb0
 8002ca4:	d901      	bls.n	8002caa <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002ca6:	23b0      	movs	r3, #176	; 0xb0
 8002ca8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002caa:	687b      	ldr	r3, [r7, #4]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002cc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	021b      	lsls	r3, r3, #8
 8002cce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	604b      	str	r3, [r1, #4]
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f023 0203 	bic.w	r2, r3, #3
 8002cf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 030c 	and.w	r3, r3, #12
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr

08002d22 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002d2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	608b      	str	r3, [r1, #8]
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d56:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002d5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d82:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002d86:	f023 020f 	bic.w	r2, r3, #15
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	091b      	lsrs	r3, r3, #4
 8002d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002db6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	608b      	str	r3, [r1, #8]
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	608b      	str	r3, [r1, #8]
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e14:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002e2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e6a:	6013      	str	r3, [r2, #0]
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002e76:	b480      	push	{r7}
 8002e78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e88:	6013      	str	r3, [r2, #0]
}
 8002e8a:	bf00      	nop
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ea6:	d101      	bne.n	8002eac <LL_RCC_PLL_IsReady+0x18>
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e000      	b.n	8002eae <LL_RCC_PLL_IsReady+0x1a>
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	0a1b      	lsrs	r3, r3, #8
 8002ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002eea:	b480      	push	{r7}
 8002eec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002eee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002f02:	b480      	push	{r7}
 8002f04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	f003 0303 	and.w	r3, r3, #3
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f2c:	d101      	bne.n	8002f32 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e000      	b.n	8002f34 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f46:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f52:	d101      	bne.n	8002f58 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f78:	d101      	bne.n	8002f7e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f9c:	d101      	bne.n	8002fa2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr

08002fae <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fc0:	d101      	bne.n	8002fc6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b08d      	sub	sp, #52	; 0x34
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e363      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0320 	and.w	r3, r3, #32
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 808d 	beq.w	800310e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ff4:	f7ff fe89 	bl	8002d0a <LL_RCC_GetSysClkSource>
 8002ff8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ffa:	f7ff ff82 	bl	8002f02 <LL_RCC_PLL_GetMainSource>
 8002ffe:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <HAL_RCC_OscConfig+0x3e>
 8003006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003008:	2b0c      	cmp	r3, #12
 800300a:	d147      	bne.n	800309c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800300c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300e:	2b01      	cmp	r3, #1
 8003010:	d144      	bne.n	800309c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e347      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003022:	f7ff fe34 	bl	8002c8e <LL_RCC_MSI_GetRange>
 8003026:	4603      	mov	r3, r0
 8003028:	429c      	cmp	r4, r3
 800302a:	d914      	bls.n	8003056 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	4618      	mov	r0, r3
 8003032:	f000 fd2f 	bl	8003a94 <RCC_SetFlashLatencyFromMSIRange>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e336      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff fe0e 	bl	8002c66 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff fe32 	bl	8002cb8 <LL_RCC_MSI_SetCalibTrimming>
 8003054:	e013      	b.n	800307e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff fe03 	bl	8002c66 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff fe27 	bl	8002cb8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	4618      	mov	r0, r3
 8003070:	f000 fd10 	bl	8003a94 <RCC_SetFlashLatencyFromMSIRange>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e317      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800307e:	f000 fcc9 	bl	8003a14 <HAL_RCC_GetHCLKFreq>
 8003082:	4603      	mov	r3, r0
 8003084:	4aa4      	ldr	r2, [pc, #656]	; (8003318 <HAL_RCC_OscConfig+0x344>)
 8003086:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003088:	4ba4      	ldr	r3, [pc, #656]	; (800331c <HAL_RCC_OscConfig+0x348>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f7fe ffc3 	bl	8002018 <HAL_InitTick>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d039      	beq.n	800310c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e308      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	69db      	ldr	r3, [r3, #28]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d01e      	beq.n	80030e2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030a4:	f7ff fdb0 	bl	8002c08 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030a8:	f7ff f804 	bl	80020b4 <HAL_GetTick>
 80030ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030b0:	f7ff f800 	bl	80020b4 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e2f5      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80030c2:	f7ff fdbf 	bl	8002c44 <LL_RCC_MSI_IsReady>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f1      	beq.n	80030b0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fdc8 	bl	8002c66 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff fdec 	bl	8002cb8 <LL_RCC_MSI_SetCalibTrimming>
 80030e0:	e015      	b.n	800310e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030e2:	f7ff fda0 	bl	8002c26 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030e6:	f7fe ffe5 	bl	80020b4 <HAL_GetTick>
 80030ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030ee:	f7fe ffe1 	bl	80020b4 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e2d6      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003100:	f7ff fda0 	bl	8002c44 <LL_RCC_MSI_IsReady>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f1      	bne.n	80030ee <HAL_RCC_OscConfig+0x11a>
 800310a:	e000      	b.n	800310e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800310c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d047      	beq.n	80031aa <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800311a:	f7ff fdf6 	bl	8002d0a <LL_RCC_GetSysClkSource>
 800311e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003120:	f7ff feef 	bl	8002f02 <LL_RCC_PLL_GetMainSource>
 8003124:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	2b08      	cmp	r3, #8
 800312a:	d005      	beq.n	8003138 <HAL_RCC_OscConfig+0x164>
 800312c:	6a3b      	ldr	r3, [r7, #32]
 800312e:	2b0c      	cmp	r3, #12
 8003130:	d108      	bne.n	8003144 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	2b03      	cmp	r3, #3
 8003136:	d105      	bne.n	8003144 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d134      	bne.n	80031aa <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e2b4      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800314c:	d102      	bne.n	8003154 <HAL_RCC_OscConfig+0x180>
 800314e:	f7ff fbdd 	bl	800290c <LL_RCC_HSE_Enable>
 8003152:	e001      	b.n	8003158 <HAL_RCC_OscConfig+0x184>
 8003154:	f7ff fbe9 	bl	800292a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d012      	beq.n	8003186 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003160:	f7fe ffa8 	bl	80020b4 <HAL_GetTick>
 8003164:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003168:	f7fe ffa4 	bl	80020b4 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	; 0x64
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e299      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800317a:	f7ff fbe5 	bl	8002948 <LL_RCC_HSE_IsReady>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f1      	beq.n	8003168 <HAL_RCC_OscConfig+0x194>
 8003184:	e011      	b.n	80031aa <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003186:	f7fe ff95 	bl	80020b4 <HAL_GetTick>
 800318a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800318e:	f7fe ff91 	bl	80020b4 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b64      	cmp	r3, #100	; 0x64
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e286      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80031a0:	f7ff fbd2 	bl	8002948 <LL_RCC_HSE_IsReady>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f1      	bne.n	800318e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d04c      	beq.n	8003250 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031b6:	f7ff fda8 	bl	8002d0a <LL_RCC_GetSysClkSource>
 80031ba:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031bc:	f7ff fea1 	bl	8002f02 <LL_RCC_PLL_GetMainSource>
 80031c0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d005      	beq.n	80031d4 <HAL_RCC_OscConfig+0x200>
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	2b0c      	cmp	r3, #12
 80031cc:	d10e      	bne.n	80031ec <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d10b      	bne.n	80031ec <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e266      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff fbf1 	bl	80029cc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80031ea:	e031      	b.n	8003250 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d019      	beq.n	8003228 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f4:	f7ff fbba 	bl	800296c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7fe ff5c 	bl	80020b4 <HAL_GetTick>
 80031fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003200:	f7fe ff58 	bl	80020b4 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e24d      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003212:	f7ff fbc9 	bl	80029a8 <LL_RCC_HSI_IsReady>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0f1      	beq.n	8003200 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	691b      	ldr	r3, [r3, #16]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff fbd3 	bl	80029cc <LL_RCC_HSI_SetCalibTrimming>
 8003226:	e013      	b.n	8003250 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003228:	f7ff fbaf 	bl	800298a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322c:	f7fe ff42 	bl	80020b4 <HAL_GetTick>
 8003230:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003232:	e008      	b.n	8003246 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003234:	f7fe ff3e 	bl	80020b4 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e233      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003246:	f7ff fbaf 	bl	80029a8 <LL_RCC_HSI_IsReady>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f1      	bne.n	8003234 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b00      	cmp	r3, #0
 800325a:	d106      	bne.n	800326a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 80a3 	beq.w	80033b0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d076      	beq.n	8003360 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0310 	and.w	r3, r3, #16
 800327a:	2b00      	cmp	r3, #0
 800327c:	d046      	beq.n	800330c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800327e:	f7ff fc66 	bl	8002b4e <LL_RCC_LSI1_IsReady>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d113      	bne.n	80032b0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003288:	f7ff fc3f 	bl	8002b0a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800328c:	f7fe ff12 	bl	80020b4 <HAL_GetTick>
 8003290:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003294:	f7fe ff0e 	bl	80020b4 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e203      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80032a6:	f7ff fc52 	bl	8002b4e <LL_RCC_LSI1_IsReady>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f1      	beq.n	8003294 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80032b0:	f7ff fc5f 	bl	8002b72 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b4:	f7fe fefe 	bl	80020b4 <HAL_GetTick>
 80032b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80032bc:	f7fe fefa 	bl	80020b4 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e1ef      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80032ce:	f7ff fc72 	bl	8002bb6 <LL_RCC_LSI2_IsReady>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0f1      	beq.n	80032bc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff fc7c 	bl	8002bda <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80032e2:	f7ff fc23 	bl	8002b2c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e6:	f7fe fee5 	bl	80020b4 <HAL_GetTick>
 80032ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80032ee:	f7fe fee1 	bl	80020b4 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e1d6      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003300:	f7ff fc25 	bl	8002b4e <LL_RCC_LSI1_IsReady>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f1      	bne.n	80032ee <HAL_RCC_OscConfig+0x31a>
 800330a:	e051      	b.n	80033b0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800330c:	f7ff fbfd 	bl	8002b0a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003310:	f7fe fed0 	bl	80020b4 <HAL_GetTick>
 8003314:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003316:	e00c      	b.n	8003332 <HAL_RCC_OscConfig+0x35e>
 8003318:	20000018 	.word	0x20000018
 800331c:	2000001c 	.word	0x2000001c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003320:	f7fe fec8 	bl	80020b4 <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e1bd      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003332:	f7ff fc0c 	bl	8002b4e <LL_RCC_LSI1_IsReady>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f1      	beq.n	8003320 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800333c:	f7ff fc2a 	bl	8002b94 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003342:	f7fe feb7 	bl	80020b4 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b03      	cmp	r3, #3
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e1ac      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003354:	f7ff fc2f 	bl	8002bb6 <LL_RCC_LSI2_IsReady>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f1      	bne.n	8003342 <HAL_RCC_OscConfig+0x36e>
 800335e:	e027      	b.n	80033b0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003360:	f7ff fc18 	bl	8002b94 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003364:	f7fe fea6 	bl	80020b4 <HAL_GetTick>
 8003368:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800336c:	f7fe fea2 	bl	80020b4 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b03      	cmp	r3, #3
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e197      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800337e:	f7ff fc1a 	bl	8002bb6 <LL_RCC_LSI2_IsReady>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1f1      	bne.n	800336c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003388:	f7ff fbd0 	bl	8002b2c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338c:	f7fe fe92 	bl	80020b4 <HAL_GetTick>
 8003390:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003394:	f7fe fe8e 	bl	80020b4 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e183      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80033a6:	f7ff fbd2 	bl	8002b4e <LL_RCC_LSI1_IsReady>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1f1      	bne.n	8003394 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d05b      	beq.n	8003474 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033bc:	4ba7      	ldr	r3, [pc, #668]	; (800365c <HAL_RCC_OscConfig+0x688>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d114      	bne.n	80033f2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80033c8:	f7ff fa70 	bl	80028ac <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033cc:	f7fe fe72 	bl	80020b4 <HAL_GetTick>
 80033d0:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d4:	f7fe fe6e 	bl	80020b4 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e163      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033e6:	4b9d      	ldr	r3, [pc, #628]	; (800365c <HAL_RCC_OscConfig+0x688>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d102      	bne.n	8003400 <HAL_RCC_OscConfig+0x42c>
 80033fa:	f7ff fb30 	bl	8002a5e <LL_RCC_LSE_Enable>
 80033fe:	e00c      	b.n	800341a <HAL_RCC_OscConfig+0x446>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b05      	cmp	r3, #5
 8003406:	d104      	bne.n	8003412 <HAL_RCC_OscConfig+0x43e>
 8003408:	f7ff fb4b 	bl	8002aa2 <LL_RCC_LSE_EnableBypass>
 800340c:	f7ff fb27 	bl	8002a5e <LL_RCC_LSE_Enable>
 8003410:	e003      	b.n	800341a <HAL_RCC_OscConfig+0x446>
 8003412:	f7ff fb35 	bl	8002a80 <LL_RCC_LSE_Disable>
 8003416:	f7ff fb55 	bl	8002ac4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d014      	beq.n	800344c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003422:	f7fe fe47 	bl	80020b4 <HAL_GetTick>
 8003426:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003428:	e00a      	b.n	8003440 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342a:	f7fe fe43 	bl	80020b4 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	f241 3288 	movw	r2, #5000	; 0x1388
 8003438:	4293      	cmp	r3, r2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e136      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003440:	f7ff fb51 	bl	8002ae6 <LL_RCC_LSE_IsReady>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0ef      	beq.n	800342a <HAL_RCC_OscConfig+0x456>
 800344a:	e013      	b.n	8003474 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344c:	f7fe fe32 	bl	80020b4 <HAL_GetTick>
 8003450:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003452:	e00a      	b.n	800346a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003454:	f7fe fe2e 	bl	80020b4 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003462:	4293      	cmp	r3, r2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e121      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800346a:	f7ff fb3c 	bl	8002ae6 <LL_RCC_LSE_IsReady>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1ef      	bne.n	8003454 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800347c:	2b00      	cmp	r3, #0
 800347e:	d02c      	beq.n	80034da <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003484:	2b00      	cmp	r3, #0
 8003486:	d014      	beq.n	80034b2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003488:	f7ff fab5 	bl	80029f6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348c:	f7fe fe12 	bl	80020b4 <HAL_GetTick>
 8003490:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003494:	f7fe fe0e 	bl	80020b4 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e103      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80034a6:	f7ff fac8 	bl	8002a3a <LL_RCC_HSI48_IsReady>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0f1      	beq.n	8003494 <HAL_RCC_OscConfig+0x4c0>
 80034b0:	e013      	b.n	80034da <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034b2:	f7ff fab1 	bl	8002a18 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b6:	f7fe fdfd 	bl	80020b4 <HAL_GetTick>
 80034ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80034bc:	e008      	b.n	80034d0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034be:	f7fe fdf9 	bl	80020b4 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e0ee      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80034d0:	f7ff fab3 	bl	8002a3a <LL_RCC_HSI48_IsReady>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f1      	bne.n	80034be <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 80e4 	beq.w	80036ac <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034e4:	f7ff fc11 	bl	8002d0a <LL_RCC_GetSysClkSource>
 80034e8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80034ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	f040 80b4 	bne.w	8003664 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f003 0203 	and.w	r2, r3, #3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	429a      	cmp	r2, r3
 8003508:	d123      	bne.n	8003552 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003514:	429a      	cmp	r2, r3
 8003516:	d11c      	bne.n	8003552 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	0a1b      	lsrs	r3, r3, #8
 800351c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003524:	429a      	cmp	r2, r3
 8003526:	d114      	bne.n	8003552 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003532:	429a      	cmp	r2, r3
 8003534:	d10d      	bne.n	8003552 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003540:	429a      	cmp	r2, r3
 8003542:	d106      	bne.n	8003552 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800354e:	429a      	cmp	r2, r3
 8003550:	d05d      	beq.n	800360e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	2b0c      	cmp	r3, #12
 8003556:	d058      	beq.n	800360a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e0a1      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800356a:	f7ff fc84 	bl	8002e76 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800356e:	f7fe fda1 	bl	80020b4 <HAL_GetTick>
 8003572:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003576:	f7fe fd9d 	bl	80020b4 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e092      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1ef      	bne.n	8003576 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800359a:	68da      	ldr	r2, [r3, #12]
 800359c:	4b30      	ldr	r3, [pc, #192]	; (8003660 <HAL_RCC_OscConfig+0x68c>)
 800359e:	4013      	ands	r3, r2
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035a8:	4311      	orrs	r1, r2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035ae:	0212      	lsls	r2, r2, #8
 80035b0:	4311      	orrs	r1, r2
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035b6:	4311      	orrs	r1, r2
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035bc:	4311      	orrs	r1, r2
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80035c2:	430a      	orrs	r2, r1
 80035c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035cc:	f7ff fc44 	bl	8002e58 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035e0:	f7fe fd68 	bl	80020b4 <HAL_GetTick>
 80035e4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e8:	f7fe fd64 	bl	80020b4 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e059      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0ef      	beq.n	80035e8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003608:	e050      	b.n	80036ac <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e04f      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800360e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d147      	bne.n	80036ac <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800361c:	f7ff fc1c 	bl	8002e58 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800362a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800362e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003630:	f7fe fd40 	bl	80020b4 <HAL_GetTick>
 8003634:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003638:	f7fe fd3c 	bl	80020b4 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b02      	cmp	r3, #2
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e031      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800364a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0ef      	beq.n	8003638 <HAL_RCC_OscConfig+0x664>
 8003658:	e028      	b.n	80036ac <HAL_RCC_OscConfig+0x6d8>
 800365a:	bf00      	nop
 800365c:	58000400 	.word	0x58000400
 8003660:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	2b0c      	cmp	r3, #12
 8003668:	d01e      	beq.n	80036a8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800366a:	f7ff fc04 	bl	8002e76 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366e:	f7fe fd21 	bl	80020b4 <HAL_GetTick>
 8003672:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003676:	f7fe fd1d 	bl	80020b4 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e012      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1ef      	bne.n	8003676 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036a0:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_RCC_OscConfig+0x6e4>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	60cb      	str	r3, [r1, #12]
 80036a6:	e001      	b.n	80036ac <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e000      	b.n	80036ae <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3734      	adds	r7, #52	; 0x34
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd90      	pop	{r4, r7, pc}
 80036b6:	bf00      	nop
 80036b8:	eefefffc 	.word	0xeefefffc

080036bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e12d      	b.n	800392c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036d0:	4b98      	ldr	r3, [pc, #608]	; (8003934 <HAL_RCC_ClockConfig+0x278>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0307 	and.w	r3, r3, #7
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d91b      	bls.n	8003716 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	4b95      	ldr	r3, [pc, #596]	; (8003934 <HAL_RCC_ClockConfig+0x278>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 0207 	bic.w	r2, r3, #7
 80036e6:	4993      	ldr	r1, [pc, #588]	; (8003934 <HAL_RCC_ClockConfig+0x278>)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ee:	f7fe fce1 	bl	80020b4 <HAL_GetTick>
 80036f2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80036f6:	f7fe fcdd 	bl	80020b4 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e111      	b.n	800392c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003708:	4b8a      	ldr	r3, [pc, #552]	; (8003934 <HAL_RCC_ClockConfig+0x278>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	429a      	cmp	r2, r3
 8003714:	d1ef      	bne.n	80036f6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d016      	beq.n	8003750 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff fafb 	bl	8002d22 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800372c:	f7fe fcc2 	bl	80020b4 <HAL_GetTick>
 8003730:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003732:	e008      	b.n	8003746 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003734:	f7fe fcbe 	bl	80020b4 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e0f2      	b.n	800392c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003746:	f7ff fbe8 	bl	8002f1a <LL_RCC_IsActiveFlag_HPRE>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0f1      	beq.n	8003734 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b00      	cmp	r3, #0
 800375a:	d016      	beq.n	800378a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff faf2 	bl	8002d4a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003766:	f7fe fca5 	bl	80020b4 <HAL_GetTick>
 800376a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800376c:	e008      	b.n	8003780 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800376e:	f7fe fca1 	bl	80020b4 <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	2b02      	cmp	r3, #2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e0d5      	b.n	800392c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003780:	f7ff fbdd 	bl	8002f3e <LL_RCC_IsActiveFlag_C2HPRE>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f1      	beq.n	800376e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d016      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff faeb 	bl	8002d76 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037a0:	f7fe fc88 	bl	80020b4 <HAL_GetTick>
 80037a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037a8:	f7fe fc84 	bl	80020b4 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e0b8      	b.n	800392c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80037ba:	f7ff fbd3 	bl	8002f64 <LL_RCC_IsActiveFlag_SHDHPRE>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f1      	beq.n	80037a8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d016      	beq.n	80037fe <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff fae5 	bl	8002da4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037da:	f7fe fc6b 	bl	80020b4 <HAL_GetTick>
 80037de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037e2:	f7fe fc67 	bl	80020b4 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e09b      	b.n	800392c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80037f4:	f7ff fbc9 	bl	8002f8a <LL_RCC_IsActiveFlag_PPRE1>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f1      	beq.n	80037e2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d017      	beq.n	800383a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff fadb 	bl	8002dcc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003816:	f7fe fc4d 	bl	80020b4 <HAL_GetTick>
 800381a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800381c:	e008      	b.n	8003830 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800381e:	f7fe fc49 	bl	80020b4 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e07d      	b.n	800392c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003830:	f7ff fbbd 	bl	8002fae <LL_RCC_IsActiveFlag_PPRE2>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0f1      	beq.n	800381e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	2b00      	cmp	r3, #0
 8003844:	d043      	beq.n	80038ce <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	2b02      	cmp	r3, #2
 800384c:	d106      	bne.n	800385c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800384e:	f7ff f87b 	bl	8002948 <LL_RCC_HSE_IsReady>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d11e      	bne.n	8003896 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e067      	b.n	800392c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b03      	cmp	r3, #3
 8003862:	d106      	bne.n	8003872 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003864:	f7ff fb16 	bl	8002e94 <LL_RCC_PLL_IsReady>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d113      	bne.n	8003896 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e05c      	b.n	800392c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800387a:	f7ff f9e3 	bl	8002c44 <LL_RCC_MSI_IsReady>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d108      	bne.n	8003896 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e051      	b.n	800392c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003888:	f7ff f88e 	bl	80029a8 <LL_RCC_HSI_IsReady>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e04a      	b.n	800392c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff fa21 	bl	8002ce2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038a0:	f7fe fc08 	bl	80020b4 <HAL_GetTick>
 80038a4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a6:	e00a      	b.n	80038be <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a8:	f7fe fc04 	bl	80020b4 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e036      	b.n	800392c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038be:	f7ff fa24 	bl	8002d0a <LL_RCC_GetSysClkSource>
 80038c2:	4602      	mov	r2, r0
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d1ec      	bne.n	80038a8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038ce:	4b19      	ldr	r3, [pc, #100]	; (8003934 <HAL_RCC_ClockConfig+0x278>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d21b      	bcs.n	8003914 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038dc:	4b15      	ldr	r3, [pc, #84]	; (8003934 <HAL_RCC_ClockConfig+0x278>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f023 0207 	bic.w	r2, r3, #7
 80038e4:	4913      	ldr	r1, [pc, #76]	; (8003934 <HAL_RCC_ClockConfig+0x278>)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038ec:	f7fe fbe2 	bl	80020b4 <HAL_GetTick>
 80038f0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80038f4:	f7fe fbde 	bl	80020b4 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e012      	b.n	800392c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003906:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <HAL_RCC_ClockConfig+0x278>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d1ef      	bne.n	80038f4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003914:	f000 f87e 	bl	8003a14 <HAL_RCC_GetHCLKFreq>
 8003918:	4603      	mov	r3, r0
 800391a:	4a07      	ldr	r2, [pc, #28]	; (8003938 <HAL_RCC_ClockConfig+0x27c>)
 800391c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800391e:	f7fe fbd5 	bl	80020cc <HAL_GetTickPrio>
 8003922:	4603      	mov	r3, r0
 8003924:	4618      	mov	r0, r3
 8003926:	f7fe fb77 	bl	8002018 <HAL_InitTick>
 800392a:	4603      	mov	r3, r0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	58004000 	.word	0x58004000
 8003938:	20000018 	.word	0x20000018

0800393c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800393c:	b590      	push	{r4, r7, lr}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003942:	f7ff f9e2 	bl	8002d0a <LL_RCC_GetSysClkSource>
 8003946:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10a      	bne.n	8003964 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800394e:	f7ff f99e 	bl	8002c8e <LL_RCC_MSI_GetRange>
 8003952:	4603      	mov	r3, r0
 8003954:	091b      	lsrs	r3, r3, #4
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	4a2b      	ldr	r2, [pc, #172]	; (8003a08 <HAL_RCC_GetSysClockFreq+0xcc>)
 800395c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	e04b      	b.n	80039fc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b04      	cmp	r3, #4
 8003968:	d102      	bne.n	8003970 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800396a:	4b28      	ldr	r3, [pc, #160]	; (8003a0c <HAL_RCC_GetSysClockFreq+0xd0>)
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	e045      	b.n	80039fc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b08      	cmp	r3, #8
 8003974:	d10a      	bne.n	800398c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003976:	f7fe ffb7 	bl	80028e8 <LL_RCC_HSE_IsEnabledDiv2>
 800397a:	4603      	mov	r3, r0
 800397c:	2b01      	cmp	r3, #1
 800397e:	d102      	bne.n	8003986 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003980:	4b22      	ldr	r3, [pc, #136]	; (8003a0c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	e03a      	b.n	80039fc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003986:	4b22      	ldr	r3, [pc, #136]	; (8003a10 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003988:	60fb      	str	r3, [r7, #12]
 800398a:	e037      	b.n	80039fc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800398c:	f7ff fab9 	bl	8002f02 <LL_RCC_PLL_GetMainSource>
 8003990:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d003      	beq.n	80039a0 <HAL_RCC_GetSysClockFreq+0x64>
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	2b03      	cmp	r3, #3
 800399c:	d003      	beq.n	80039a6 <HAL_RCC_GetSysClockFreq+0x6a>
 800399e:	e00d      	b.n	80039bc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80039a0:	4b1a      	ldr	r3, [pc, #104]	; (8003a0c <HAL_RCC_GetSysClockFreq+0xd0>)
 80039a2:	60bb      	str	r3, [r7, #8]
        break;
 80039a4:	e015      	b.n	80039d2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80039a6:	f7fe ff9f 	bl	80028e8 <LL_RCC_HSE_IsEnabledDiv2>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d102      	bne.n	80039b6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80039b0:	4b16      	ldr	r3, [pc, #88]	; (8003a0c <HAL_RCC_GetSysClockFreq+0xd0>)
 80039b2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80039b4:	e00d      	b.n	80039d2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80039b6:	4b16      	ldr	r3, [pc, #88]	; (8003a10 <HAL_RCC_GetSysClockFreq+0xd4>)
 80039b8:	60bb      	str	r3, [r7, #8]
        break;
 80039ba:	e00a      	b.n	80039d2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80039bc:	f7ff f967 	bl	8002c8e <LL_RCC_MSI_GetRange>
 80039c0:	4603      	mov	r3, r0
 80039c2:	091b      	lsrs	r3, r3, #4
 80039c4:	f003 030f 	and.w	r3, r3, #15
 80039c8:	4a0f      	ldr	r2, [pc, #60]	; (8003a08 <HAL_RCC_GetSysClockFreq+0xcc>)
 80039ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ce:	60bb      	str	r3, [r7, #8]
        break;
 80039d0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80039d2:	f7ff fa71 	bl	8002eb8 <LL_RCC_PLL_GetN>
 80039d6:	4602      	mov	r2, r0
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	fb03 f402 	mul.w	r4, r3, r2
 80039de:	f7ff fa84 	bl	8002eea <LL_RCC_PLL_GetDivider>
 80039e2:	4603      	mov	r3, r0
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	3301      	adds	r3, #1
 80039e8:	fbb4 f4f3 	udiv	r4, r4, r3
 80039ec:	f7ff fa71 	bl	8002ed2 <LL_RCC_PLL_GetR>
 80039f0:	4603      	mov	r3, r0
 80039f2:	0f5b      	lsrs	r3, r3, #29
 80039f4:	3301      	adds	r3, #1
 80039f6:	fbb4 f3f3 	udiv	r3, r4, r3
 80039fa:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80039fc:	68fb      	ldr	r3, [r7, #12]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd90      	pop	{r4, r7, pc}
 8003a06:	bf00      	nop
 8003a08:	08006738 	.word	0x08006738
 8003a0c:	00f42400 	.word	0x00f42400
 8003a10:	01e84800 	.word	0x01e84800

08003a14 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a14:	b598      	push	{r3, r4, r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003a18:	f7ff ff90 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8003a1c:	4604      	mov	r4, r0
 8003a1e:	f7ff f9e9 	bl	8002df4 <LL_RCC_GetAHBPrescaler>
 8003a22:	4603      	mov	r3, r0
 8003a24:	091b      	lsrs	r3, r3, #4
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	4a03      	ldr	r2, [pc, #12]	; (8003a38 <HAL_RCC_GetHCLKFreq+0x24>)
 8003a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a30:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	bd98      	pop	{r3, r4, r7, pc}
 8003a38:	080066d8 	.word	0x080066d8

08003a3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a3c:	b598      	push	{r3, r4, r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003a40:	f7ff ffe8 	bl	8003a14 <HAL_RCC_GetHCLKFreq>
 8003a44:	4604      	mov	r4, r0
 8003a46:	f7ff f9ef 	bl	8002e28 <LL_RCC_GetAPB1Prescaler>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	0a1b      	lsrs	r3, r3, #8
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	4a04      	ldr	r2, [pc, #16]	; (8003a64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a58:	f003 031f 	and.w	r3, r3, #31
 8003a5c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	bd98      	pop	{r3, r4, r7, pc}
 8003a64:	08006718 	.word	0x08006718

08003a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a68:	b598      	push	{r3, r4, r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003a6c:	f7ff ffd2 	bl	8003a14 <HAL_RCC_GetHCLKFreq>
 8003a70:	4604      	mov	r4, r0
 8003a72:	f7ff f9e5 	bl	8002e40 <LL_RCC_GetAPB2Prescaler>
 8003a76:	4603      	mov	r3, r0
 8003a78:	0adb      	lsrs	r3, r3, #11
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	4a04      	ldr	r2, [pc, #16]	; (8003a90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	bd98      	pop	{r3, r4, r7, pc}
 8003a90:	08006718 	.word	0x08006718

08003a94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003a94:	b590      	push	{r4, r7, lr}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2bb0      	cmp	r3, #176	; 0xb0
 8003aa0:	d903      	bls.n	8003aaa <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003aa2:	4b15      	ldr	r3, [pc, #84]	; (8003af8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	e007      	b.n	8003aba <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	f003 030f 	and.w	r3, r3, #15
 8003ab2:	4a11      	ldr	r2, [pc, #68]	; (8003af8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003aba:	f7ff f9a7 	bl	8002e0c <LL_RCC_GetAHB4Prescaler>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	091b      	lsrs	r3, r3, #4
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	4a0d      	ldr	r2, [pc, #52]	; (8003afc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003ac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	4a0a      	ldr	r2, [pc, #40]	; (8003b00 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8003adc:	0c9c      	lsrs	r4, r3, #18
 8003ade:	f7fe fef5 	bl	80028cc <HAL_PWREx_GetVoltageRange>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4620      	mov	r0, r4
 8003ae8:	f000 f80c 	bl	8003b04 <RCC_SetFlashLatency>
 8003aec:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd90      	pop	{r4, r7, pc}
 8003af6:	bf00      	nop
 8003af8:	08006738 	.word	0x08006738
 8003afc:	080066d8 	.word	0x080066d8
 8003b00:	431bde83 	.word	0x431bde83

08003b04 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003b04:	b590      	push	{r4, r7, lr}
 8003b06:	b093      	sub	sp, #76	; 0x4c
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003b0e:	4b37      	ldr	r3, [pc, #220]	; (8003bec <RCC_SetFlashLatency+0xe8>)
 8003b10:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003b14:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003b1a:	4a35      	ldr	r2, [pc, #212]	; (8003bf0 <RCC_SetFlashLatency+0xec>)
 8003b1c:	f107 031c 	add.w	r3, r7, #28
 8003b20:	ca07      	ldmia	r2, {r0, r1, r2}
 8003b22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003b26:	4b33      	ldr	r3, [pc, #204]	; (8003bf4 <RCC_SetFlashLatency+0xf0>)
 8003b28:	f107 040c 	add.w	r4, r7, #12
 8003b2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003b32:	2300      	movs	r3, #0
 8003b34:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b3c:	d11a      	bne.n	8003b74 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003b3e:	2300      	movs	r3, #0
 8003b40:	643b      	str	r3, [r7, #64]	; 0x40
 8003b42:	e013      	b.n	8003b6c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003b44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	3348      	adds	r3, #72	; 0x48
 8003b4a:	443b      	add	r3, r7
 8003b4c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d807      	bhi.n	8003b66 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	3348      	adds	r3, #72	; 0x48
 8003b5c:	443b      	add	r3, r7
 8003b5e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003b62:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003b64:	e020      	b.n	8003ba8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003b66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b68:	3301      	adds	r3, #1
 8003b6a:	643b      	str	r3, [r7, #64]	; 0x40
 8003b6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d9e8      	bls.n	8003b44 <RCC_SetFlashLatency+0x40>
 8003b72:	e019      	b.n	8003ba8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003b74:	2300      	movs	r3, #0
 8003b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b78:	e013      	b.n	8003ba2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	3348      	adds	r3, #72	; 0x48
 8003b80:	443b      	add	r3, r7
 8003b82:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d807      	bhi.n	8003b9c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	3348      	adds	r3, #72	; 0x48
 8003b92:	443b      	add	r3, r7
 8003b94:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003b98:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003b9a:	e005      	b.n	8003ba8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d9e8      	bls.n	8003b7a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003ba8:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <RCC_SetFlashLatency+0xf4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f023 0207 	bic.w	r2, r3, #7
 8003bb0:	4911      	ldr	r1, [pc, #68]	; (8003bf8 <RCC_SetFlashLatency+0xf4>)
 8003bb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003bb8:	f7fe fa7c 	bl	80020b4 <HAL_GetTick>
 8003bbc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003bbe:	e008      	b.n	8003bd2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003bc0:	f7fe fa78 	bl	80020b4 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e007      	b.n	8003be2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003bd2:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <RCC_SetFlashLatency+0xf4>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d1ef      	bne.n	8003bc0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	374c      	adds	r7, #76	; 0x4c
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd90      	pop	{r4, r7, pc}
 8003bea:	bf00      	nop
 8003bec:	080066a0 	.word	0x080066a0
 8003bf0:	080066b0 	.word	0x080066b0
 8003bf4:	080066bc 	.word	0x080066bc
 8003bf8:	58004000 	.word	0x58004000

08003bfc <LL_RCC_LSE_IsEnabled>:
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003c00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <LL_RCC_LSE_IsEnabled+0x18>
 8003c10:	2301      	movs	r3, #1
 8003c12:	e000      	b.n	8003c16 <LL_RCC_LSE_IsEnabled+0x1a>
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <LL_RCC_LSE_IsReady>:
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003c24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d101      	bne.n	8003c38 <LL_RCC_LSE_IsReady+0x18>
 8003c34:	2301      	movs	r3, #1
 8003c36:	e000      	b.n	8003c3a <LL_RCC_LSE_IsReady+0x1a>
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <LL_RCC_MSI_EnablePLLMode>:
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c52:	f043 0304 	orr.w	r3, r3, #4
 8003c56:	6013      	str	r3, [r2, #0]
}
 8003c58:	bf00      	nop
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <LL_RCC_SetRFWKPClockSource>:
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <LL_RCC_SetSMPSClockSource>:
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9c:	f023 0203 	bic.w	r2, r3, #3
 8003ca0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003caa:	bf00      	nop
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <LL_RCC_SetSMPSPrescaler>:
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003cc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <LL_RCC_SetUSARTClockSource>:
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cee:	f023 0203 	bic.w	r2, r3, #3
 8003cf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003cfe:	bf00      	nop
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr

08003d0a <LL_RCC_SetLPUARTClockSource>:
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr

08003d36 <LL_RCC_SetI2CClockSource>:
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d42:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	091b      	lsrs	r3, r3, #4
 8003d4a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	401a      	ands	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003d5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d64:	bf00      	nop
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <LL_RCC_SetLPTIMClockSource>:
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	0c1b      	lsrs	r3, r3, #16
 8003d84:	041b      	lsls	r3, r3, #16
 8003d86:	43db      	mvns	r3, r3
 8003d88:	401a      	ands	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	041b      	lsls	r3, r3, #16
 8003d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <LL_RCC_SetSAIClockSource>:
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003db8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <LL_RCC_SetRNGClockSource>:
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003de4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <LL_RCC_SetCLK48ClockSource>:
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003e04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <LL_RCC_SetUSBClockSource>:
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff ffe3 	bl	8003dfc <LL_RCC_SetCLK48ClockSource>
}
 8003e36:	bf00      	nop
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <LL_RCC_SetADCClockSource>:
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b083      	sub	sp, #12
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <LL_RCC_SetRTCClockSource>:
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <LL_RCC_GetRTCClockSource>:
{
 8003e96:	b480      	push	{r7}
 8003e98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <LL_RCC_ForceBackupDomainReset>:
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ebc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003ec8:	bf00      	nop
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ede:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003eea:	bf00      	nop
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <LL_RCC_PLLSAI1_Enable>:
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f06:	6013      	str	r3, [r2, #0]
}
 8003f08:	bf00      	nop
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr

08003f12 <LL_RCC_PLLSAI1_Disable>:
{
 8003f12:	b480      	push	{r7}
 8003f14:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003f16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f24:	6013      	str	r3, [r2, #0]
}
 8003f26:	bf00      	nop
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <LL_RCC_PLLSAI1_IsReady>:
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f42:	d101      	bne.n	8003f48 <LL_RCC_PLLSAI1_IsReady+0x18>
 8003f44:	2301      	movs	r3, #1
 8003f46:	e000      	b.n	8003f4a <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003f60:	2300      	movs	r3, #0
 8003f62:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d034      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f74:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f78:	d021      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003f7a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003f7e:	d81b      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f84:	d01d      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003f86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f8a:	d815      	bhi.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00b      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003f90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f94:	d110      	bne.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003f96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003fa6:	e00d      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3304      	adds	r3, #4
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 f94d 	bl	800424c <RCCEx_PLLSAI1_ConfigNP>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003fb6:	e005      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	77fb      	strb	r3, [r7, #31]
        break;
 8003fbc:	e002      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003fbe:	bf00      	nop
 8003fc0:	e000      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003fc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fc4:	7ffb      	ldrb	r3, [r7, #31]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d105      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7ff fee8 	bl	8003da4 <LL_RCC_SetSAIClockSource>
 8003fd4:	e001      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd6:	7ffb      	ldrb	r3, [r7, #31]
 8003fd8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d046      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003fe6:	f7ff ff56 	bl	8003e96 <LL_RCC_GetRTCClockSource>
 8003fea:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d03c      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003ff6:	f7fe fc59 	bl	80028ac <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d105      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	4618      	mov	r0, r3
 8004006:	f7ff ff30 	bl	8003e6a <LL_RCC_SetRTCClockSource>
 800400a:	e02e      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800400c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004014:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004016:	f7ff ff4b 	bl	8003eb0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800401a:	f7ff ff5a 	bl	8003ed2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	4313      	orrs	r3, r2
 800402a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800402c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004036:	f7ff fde1 	bl	8003bfc <LL_RCC_LSE_IsEnabled>
 800403a:	4603      	mov	r3, r0
 800403c:	2b01      	cmp	r3, #1
 800403e:	d114      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004040:	f7fe f838 	bl	80020b4 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004046:	e00b      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004048:	f7fe f834 	bl	80020b4 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f241 3288 	movw	r2, #5000	; 0x1388
 8004056:	4293      	cmp	r3, r2
 8004058:	d902      	bls.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	77fb      	strb	r3, [r7, #31]
              break;
 800405e:	e004      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004060:	f7ff fdde 	bl	8003c20 <LL_RCC_LSE_IsReady>
 8004064:	4603      	mov	r3, r0
 8004066:	2b01      	cmp	r3, #1
 8004068:	d1ee      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800406a:	7ffb      	ldrb	r3, [r7, #31]
 800406c:	77bb      	strb	r3, [r7, #30]
 800406e:	e001      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004070:	7ffb      	ldrb	r3, [r7, #31]
 8004072:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d004      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff fe2a 	bl	8003cde <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d004      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	4618      	mov	r0, r3
 800409c:	f7ff fe35 	bl	8003d0a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0310 	and.w	r3, r3, #16
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d004      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b0:	4618      	mov	r0, r3
 80040b2:	f7ff fe5d 	bl	8003d70 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0320 	and.w	r3, r3, #32
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d004      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff fe52 	bl	8003d70 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d004      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff fe2a 	bl	8003d36 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d004      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff fe1f 	bl	8003d36 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004100:	2b00      	cmp	r3, #0
 8004102:	d022      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004108:	4618      	mov	r0, r3
 800410a:	f7ff fe8d 	bl	8003e28 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004112:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004116:	d107      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004126:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004130:	d10b      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	3304      	adds	r3, #4
 8004136:	4618      	mov	r0, r3
 8004138:	f000 f8e3 	bl	8004302 <RCCEx_PLLSAI1_ConfigNQ>
 800413c:	4603      	mov	r3, r0
 800413e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004140:	7ffb      	ldrb	r3, [r7, #31]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004146:	7ffb      	ldrb	r3, [r7, #31]
 8004148:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004152:	2b00      	cmp	r3, #0
 8004154:	d02b      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415e:	d008      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004168:	d003      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416e:	2b00      	cmp	r3, #0
 8004170:	d105      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff fe2a 	bl	8003dd0 <LL_RCC_SetRNGClockSource>
 800417c:	e00a      	b.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	2000      	movs	r0, #0
 800418a:	f7ff fe21 	bl	8003dd0 <LL_RCC_SetRNGClockSource>
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f7ff fe34 	bl	8003dfc <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004198:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800419c:	d107      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800419e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041ac:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d022      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff fe3d 	bl	8003e3e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041cc:	d107      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80041ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041dc:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041e6:	d10b      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3304      	adds	r3, #4
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 f8e3 	bl	80043b8 <RCCEx_PLLSAI1_ConfigNR>
 80041f2:	4603      	mov	r3, r0
 80041f4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80041f6:	7ffb      	ldrb	r3, [r7, #31]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80041fc:	7ffb      	ldrb	r3, [r7, #31]
 80041fe:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d004      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff fd26 	bl	8003c62 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d009      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff fd45 	bl	8003cb6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff fd2c 	bl	8003c8e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004236:	7fbb      	ldrb	r3, [r7, #30]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3720      	adds	r7, #32
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004244:	f7ff fcfe 	bl	8003c44 <LL_RCC_MSI_EnablePLLMode>
}
 8004248:	bf00      	nop
 800424a:	bd80      	pop	{r7, pc}

0800424c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004258:	f7ff fe5b 	bl	8003f12 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800425c:	f7fd ff2a 	bl	80020b4 <HAL_GetTick>
 8004260:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004262:	e009      	b.n	8004278 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004264:	f7fd ff26 	bl	80020b4 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d902      	bls.n	8004278 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	73fb      	strb	r3, [r7, #15]
      break;
 8004276:	e004      	b.n	8004282 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004278:	f7ff fe5a 	bl	8003f30 <LL_RCC_PLLSAI1_IsReady>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f0      	bne.n	8004264 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004282:	7bfb      	ldrb	r3, [r7, #15]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d137      	bne.n	80042f8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800429c:	4313      	orrs	r3, r2
 800429e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80042a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042b2:	4313      	orrs	r3, r2
 80042b4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80042b6:	f7ff fe1d 	bl	8003ef4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ba:	f7fd fefb 	bl	80020b4 <HAL_GetTick>
 80042be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80042c0:	e009      	b.n	80042d6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042c2:	f7fd fef7 	bl	80020b4 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d902      	bls.n	80042d6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	73fb      	strb	r3, [r7, #15]
        break;
 80042d4:	e004      	b.n	80042e0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80042d6:	f7ff fe2b 	bl	8003f30 <LL_RCC_PLLSAI1_IsReady>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d1f0      	bne.n	80042c2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d108      	bne.n	80042f8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80042e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ea:	691a      	ldr	r2, [r3, #16]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042f4:	4313      	orrs	r3, r2
 80042f6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80042f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b084      	sub	sp, #16
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800430a:	2300      	movs	r3, #0
 800430c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800430e:	f7ff fe00 	bl	8003f12 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004312:	f7fd fecf 	bl	80020b4 <HAL_GetTick>
 8004316:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004318:	e009      	b.n	800432e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800431a:	f7fd fecb 	bl	80020b4 <HAL_GetTick>
 800431e:	4602      	mov	r2, r0
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d902      	bls.n	800432e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	73fb      	strb	r3, [r7, #15]
      break;
 800432c:	e004      	b.n	8004338 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800432e:	f7ff fdff 	bl	8003f30 <LL_RCC_PLLSAI1_IsReady>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1f0      	bne.n	800431a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004338:	7bfb      	ldrb	r3, [r7, #15]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d137      	bne.n	80043ae <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800433e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	021b      	lsls	r3, r3, #8
 800434e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004352:	4313      	orrs	r3, r2
 8004354:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004368:	4313      	orrs	r3, r2
 800436a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800436c:	f7ff fdc2 	bl	8003ef4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004370:	f7fd fea0 	bl	80020b4 <HAL_GetTick>
 8004374:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004376:	e009      	b.n	800438c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004378:	f7fd fe9c 	bl	80020b4 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d902      	bls.n	800438c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	73fb      	strb	r3, [r7, #15]
        break;
 800438a:	e004      	b.n	8004396 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800438c:	f7ff fdd0 	bl	8003f30 <LL_RCC_PLLSAI1_IsReady>
 8004390:	4603      	mov	r3, r0
 8004392:	2b01      	cmp	r3, #1
 8004394:	d1f0      	bne.n	8004378 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004396:	7bfb      	ldrb	r3, [r7, #15]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d108      	bne.n	80043ae <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800439c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a0:	691a      	ldr	r2, [r3, #16]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043aa:	4313      	orrs	r3, r2
 80043ac:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80043ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80043c4:	f7ff fda5 	bl	8003f12 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80043c8:	f7fd fe74 	bl	80020b4 <HAL_GetTick>
 80043cc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80043ce:	e009      	b.n	80043e4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043d0:	f7fd fe70 	bl	80020b4 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d902      	bls.n	80043e4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	73fb      	strb	r3, [r7, #15]
      break;
 80043e2:	e004      	b.n	80043ee <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80043e4:	f7ff fda4 	bl	8003f30 <LL_RCC_PLLSAI1_IsReady>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f0      	bne.n	80043d0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d137      	bne.n	8004464 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80043f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	021b      	lsls	r3, r3, #8
 8004404:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004408:	4313      	orrs	r3, r2
 800440a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800440c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800441e:	4313      	orrs	r3, r2
 8004420:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004422:	f7ff fd67 	bl	8003ef4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004426:	f7fd fe45 	bl	80020b4 <HAL_GetTick>
 800442a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800442c:	e009      	b.n	8004442 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800442e:	f7fd fe41 	bl	80020b4 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d902      	bls.n	8004442 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	73fb      	strb	r3, [r7, #15]
        break;
 8004440:	e004      	b.n	800444c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004442:	f7ff fd75 	bl	8003f30 <LL_RCC_PLLSAI1_IsReady>
 8004446:	4603      	mov	r3, r0
 8004448:	2b01      	cmp	r3, #1
 800444a:	d1f0      	bne.n	800442e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800444c:	7bfb      	ldrb	r3, [r7, #15]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d108      	bne.n	8004464 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004460:	4313      	orrs	r3, r2
 8004462:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004464:	7bfb      	ldrb	r3, [r7, #15]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <LL_RCC_GetUSARTClockSource>:
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800447a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4013      	ands	r3, r2
}
 8004482:	4618      	mov	r0, r3
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <LL_RCC_GetLPUARTClockSource>:
{
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4013      	ands	r3, r2
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr

080044ae <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e042      	b.n	8004546 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d106      	bne.n	80044d8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7fd fb5c 	bl	8001b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2224      	movs	r2, #36	; 0x24
 80044dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0201 	bic.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 fba7 	bl	8004c4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f97c 	bl	80047fc <UART_SetConfig>
 8004504:	4603      	mov	r3, r0
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e01b      	b.n	8004546 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800451c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800452c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0201 	orr.w	r2, r2, #1
 800453c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 fc26 	bl	8004d90 <UART_CheckIdleState>
 8004544:	4603      	mov	r3, r0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3708      	adds	r7, #8
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	b08a      	sub	sp, #40	; 0x28
 8004552:	af02      	add	r7, sp, #8
 8004554:	60f8      	str	r0, [r7, #12]
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	603b      	str	r3, [r7, #0]
 800455a:	4613      	mov	r3, r2
 800455c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004564:	2b20      	cmp	r3, #32
 8004566:	d17b      	bne.n	8004660 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <HAL_UART_Transmit+0x26>
 800456e:	88fb      	ldrh	r3, [r7, #6]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d101      	bne.n	8004578 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e074      	b.n	8004662 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2221      	movs	r2, #33	; 0x21
 8004584:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004588:	f7fd fd94 	bl	80020b4 <HAL_GetTick>
 800458c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	88fa      	ldrh	r2, [r7, #6]
 8004592:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	88fa      	ldrh	r2, [r7, #6]
 800459a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045a6:	d108      	bne.n	80045ba <HAL_UART_Transmit+0x6c>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d104      	bne.n	80045ba <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80045b0:	2300      	movs	r3, #0
 80045b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	61bb      	str	r3, [r7, #24]
 80045b8:	e003      	b.n	80045c2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045be:	2300      	movs	r3, #0
 80045c0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045c2:	e030      	b.n	8004626 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	9300      	str	r3, [sp, #0]
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2200      	movs	r2, #0
 80045cc:	2180      	movs	r1, #128	; 0x80
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 fc88 	bl	8004ee4 <UART_WaitOnFlagUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d005      	beq.n	80045e6 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2220      	movs	r2, #32
 80045de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e03d      	b.n	8004662 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10b      	bne.n	8004604 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	3302      	adds	r3, #2
 8004600:	61bb      	str	r3, [r7, #24]
 8004602:	e007      	b.n	8004614 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	781a      	ldrb	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	3301      	adds	r3, #1
 8004612:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800461a:	b29b      	uxth	r3, r3
 800461c:	3b01      	subs	r3, #1
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1c8      	bne.n	80045c4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2200      	movs	r2, #0
 800463a:	2140      	movs	r1, #64	; 0x40
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 fc51 	bl	8004ee4 <UART_WaitOnFlagUntilTimeout>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d005      	beq.n	8004654 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2220      	movs	r2, #32
 800464c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004650:	2303      	movs	r3, #3
 8004652:	e006      	b.n	8004662 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2220      	movs	r2, #32
 8004658:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	e000      	b.n	8004662 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004660:	2302      	movs	r3, #2
  }
}
 8004662:	4618      	mov	r0, r3
 8004664:	3720      	adds	r7, #32
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b08a      	sub	sp, #40	; 0x28
 800466e:	af02      	add	r7, sp, #8
 8004670:	60f8      	str	r0, [r7, #12]
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	603b      	str	r3, [r7, #0]
 8004676:	4613      	mov	r3, r2
 8004678:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004680:	2b20      	cmp	r3, #32
 8004682:	f040 80b5 	bne.w	80047f0 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <HAL_UART_Receive+0x28>
 800468c:	88fb      	ldrh	r3, [r7, #6]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e0ad      	b.n	80047f2 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2222      	movs	r2, #34	; 0x22
 80046a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046ac:	f7fd fd02 	bl	80020b4 <HAL_GetTick>
 80046b0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	88fa      	ldrh	r2, [r7, #6]
 80046b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	88fa      	ldrh	r2, [r7, #6]
 80046be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ca:	d10e      	bne.n	80046ea <HAL_UART_Receive+0x80>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d105      	bne.n	80046e0 <HAL_UART_Receive+0x76>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80046da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80046de:	e02d      	b.n	800473c <HAL_UART_Receive+0xd2>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	22ff      	movs	r2, #255	; 0xff
 80046e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80046e8:	e028      	b.n	800473c <HAL_UART_Receive+0xd2>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10d      	bne.n	800470e <HAL_UART_Receive+0xa4>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d104      	bne.n	8004704 <HAL_UART_Receive+0x9a>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	22ff      	movs	r2, #255	; 0xff
 80046fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004702:	e01b      	b.n	800473c <HAL_UART_Receive+0xd2>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	227f      	movs	r2, #127	; 0x7f
 8004708:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800470c:	e016      	b.n	800473c <HAL_UART_Receive+0xd2>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004716:	d10d      	bne.n	8004734 <HAL_UART_Receive+0xca>
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d104      	bne.n	800472a <HAL_UART_Receive+0xc0>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	227f      	movs	r2, #127	; 0x7f
 8004724:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004728:	e008      	b.n	800473c <HAL_UART_Receive+0xd2>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	223f      	movs	r2, #63	; 0x3f
 800472e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004732:	e003      	b.n	800473c <HAL_UART_Receive+0xd2>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004742:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800474c:	d108      	bne.n	8004760 <HAL_UART_Receive+0xf6>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d104      	bne.n	8004760 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004756:	2300      	movs	r3, #0
 8004758:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	61bb      	str	r3, [r7, #24]
 800475e:	e003      	b.n	8004768 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004764:	2300      	movs	r3, #0
 8004766:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004768:	e036      	b.n	80047d8 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2200      	movs	r2, #0
 8004772:	2120      	movs	r1, #32
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 fbb5 	bl	8004ee4 <UART_WaitOnFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e032      	b.n	80047f2 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d10c      	bne.n	80047ac <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004798:	b29a      	uxth	r2, r3
 800479a:	8a7b      	ldrh	r3, [r7, #18]
 800479c:	4013      	ands	r3, r2
 800479e:	b29a      	uxth	r2, r3
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	3302      	adds	r3, #2
 80047a8:	61bb      	str	r3, [r7, #24]
 80047aa:	e00c      	b.n	80047c6 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b2:	b2da      	uxtb	r2, r3
 80047b4:	8a7b      	ldrh	r3, [r7, #18]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	4013      	ands	r3, r2
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	3301      	adds	r3, #1
 80047c4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80047cc:	b29b      	uxth	r3, r3
 80047ce:	3b01      	subs	r3, #1
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80047de:	b29b      	uxth	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1c2      	bne.n	800476a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2220      	movs	r2, #32
 80047e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 80047ec:	2300      	movs	r3, #0
 80047ee:	e000      	b.n	80047f2 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80047f0:	2302      	movs	r3, #2
  }
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3720      	adds	r7, #32
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004800:	b08c      	sub	sp, #48	; 0x30
 8004802:	af00      	add	r7, sp, #0
 8004804:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	431a      	orrs	r2, r3
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	431a      	orrs	r2, r3
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	4313      	orrs	r3, r2
 8004822:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	4baf      	ldr	r3, [pc, #700]	; (8004ae8 <UART_SetConfig+0x2ec>)
 800482c:	4013      	ands	r3, r2
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	6812      	ldr	r2, [r2, #0]
 8004832:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004834:	430b      	orrs	r3, r1
 8004836:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4aa4      	ldr	r2, [pc, #656]	; (8004aec <UART_SetConfig+0x2f0>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d004      	beq.n	8004868 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004864:	4313      	orrs	r3, r2
 8004866:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004872:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	6812      	ldr	r2, [r2, #0]
 800487a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800487c:	430b      	orrs	r3, r1
 800487e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004886:	f023 010f 	bic.w	r1, r3, #15
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a95      	ldr	r2, [pc, #596]	; (8004af0 <UART_SetConfig+0x2f4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d125      	bne.n	80048ec <UART_SetConfig+0xf0>
 80048a0:	2003      	movs	r0, #3
 80048a2:	f7ff fde4 	bl	800446e <LL_RCC_GetUSARTClockSource>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b03      	cmp	r3, #3
 80048aa:	d81b      	bhi.n	80048e4 <UART_SetConfig+0xe8>
 80048ac:	a201      	add	r2, pc, #4	; (adr r2, 80048b4 <UART_SetConfig+0xb8>)
 80048ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b2:	bf00      	nop
 80048b4:	080048c5 	.word	0x080048c5
 80048b8:	080048d5 	.word	0x080048d5
 80048bc:	080048cd 	.word	0x080048cd
 80048c0:	080048dd 	.word	0x080048dd
 80048c4:	2301      	movs	r3, #1
 80048c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ca:	e042      	b.n	8004952 <UART_SetConfig+0x156>
 80048cc:	2302      	movs	r3, #2
 80048ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048d2:	e03e      	b.n	8004952 <UART_SetConfig+0x156>
 80048d4:	2304      	movs	r3, #4
 80048d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048da:	e03a      	b.n	8004952 <UART_SetConfig+0x156>
 80048dc:	2308      	movs	r3, #8
 80048de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048e2:	e036      	b.n	8004952 <UART_SetConfig+0x156>
 80048e4:	2310      	movs	r3, #16
 80048e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ea:	e032      	b.n	8004952 <UART_SetConfig+0x156>
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a7e      	ldr	r2, [pc, #504]	; (8004aec <UART_SetConfig+0x2f0>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d12a      	bne.n	800494c <UART_SetConfig+0x150>
 80048f6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80048fa:	f7ff fdc8 	bl	800448e <LL_RCC_GetLPUARTClockSource>
 80048fe:	4603      	mov	r3, r0
 8004900:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004904:	d01a      	beq.n	800493c <UART_SetConfig+0x140>
 8004906:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800490a:	d81b      	bhi.n	8004944 <UART_SetConfig+0x148>
 800490c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004910:	d00c      	beq.n	800492c <UART_SetConfig+0x130>
 8004912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004916:	d815      	bhi.n	8004944 <UART_SetConfig+0x148>
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <UART_SetConfig+0x128>
 800491c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004920:	d008      	beq.n	8004934 <UART_SetConfig+0x138>
 8004922:	e00f      	b.n	8004944 <UART_SetConfig+0x148>
 8004924:	2300      	movs	r3, #0
 8004926:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800492a:	e012      	b.n	8004952 <UART_SetConfig+0x156>
 800492c:	2302      	movs	r3, #2
 800492e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004932:	e00e      	b.n	8004952 <UART_SetConfig+0x156>
 8004934:	2304      	movs	r3, #4
 8004936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800493a:	e00a      	b.n	8004952 <UART_SetConfig+0x156>
 800493c:	2308      	movs	r3, #8
 800493e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004942:	e006      	b.n	8004952 <UART_SetConfig+0x156>
 8004944:	2310      	movs	r3, #16
 8004946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800494a:	e002      	b.n	8004952 <UART_SetConfig+0x156>
 800494c:	2310      	movs	r3, #16
 800494e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a65      	ldr	r2, [pc, #404]	; (8004aec <UART_SetConfig+0x2f0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	f040 8097 	bne.w	8004a8c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800495e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004962:	2b08      	cmp	r3, #8
 8004964:	d823      	bhi.n	80049ae <UART_SetConfig+0x1b2>
 8004966:	a201      	add	r2, pc, #4	; (adr r2, 800496c <UART_SetConfig+0x170>)
 8004968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496c:	08004991 	.word	0x08004991
 8004970:	080049af 	.word	0x080049af
 8004974:	08004999 	.word	0x08004999
 8004978:	080049af 	.word	0x080049af
 800497c:	0800499f 	.word	0x0800499f
 8004980:	080049af 	.word	0x080049af
 8004984:	080049af 	.word	0x080049af
 8004988:	080049af 	.word	0x080049af
 800498c:	080049a7 	.word	0x080049a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004990:	f7ff f854 	bl	8003a3c <HAL_RCC_GetPCLK1Freq>
 8004994:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004996:	e010      	b.n	80049ba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004998:	4b56      	ldr	r3, [pc, #344]	; (8004af4 <UART_SetConfig+0x2f8>)
 800499a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800499c:	e00d      	b.n	80049ba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800499e:	f7fe ffcd 	bl	800393c <HAL_RCC_GetSysClockFreq>
 80049a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049a4:	e009      	b.n	80049ba <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049ac:	e005      	b.n	80049ba <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80049b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80049ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f000 812b 	beq.w	8004c18 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	4a4c      	ldr	r2, [pc, #304]	; (8004af8 <UART_SetConfig+0x2fc>)
 80049c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049cc:	461a      	mov	r2, r3
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	4613      	mov	r3, r2
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	4413      	add	r3, r2
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d305      	bcc.n	80049f2 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d903      	bls.n	80049fa <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80049f8:	e10e      	b.n	8004c18 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	2200      	movs	r2, #0
 80049fe:	60bb      	str	r3, [r7, #8]
 8004a00:	60fa      	str	r2, [r7, #12]
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	4a3c      	ldr	r2, [pc, #240]	; (8004af8 <UART_SetConfig+0x2fc>)
 8004a08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2200      	movs	r2, #0
 8004a10:	603b      	str	r3, [r7, #0]
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a1c:	f7fb fff6 	bl	8000a0c <__aeabi_uldivmod>
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	4610      	mov	r0, r2
 8004a26:	4619      	mov	r1, r3
 8004a28:	f04f 0200 	mov.w	r2, #0
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	020b      	lsls	r3, r1, #8
 8004a32:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004a36:	0202      	lsls	r2, r0, #8
 8004a38:	6979      	ldr	r1, [r7, #20]
 8004a3a:	6849      	ldr	r1, [r1, #4]
 8004a3c:	0849      	lsrs	r1, r1, #1
 8004a3e:	2000      	movs	r0, #0
 8004a40:	460c      	mov	r4, r1
 8004a42:	4605      	mov	r5, r0
 8004a44:	eb12 0804 	adds.w	r8, r2, r4
 8004a48:	eb43 0905 	adc.w	r9, r3, r5
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	469a      	mov	sl, r3
 8004a54:	4693      	mov	fp, r2
 8004a56:	4652      	mov	r2, sl
 8004a58:	465b      	mov	r3, fp
 8004a5a:	4640      	mov	r0, r8
 8004a5c:	4649      	mov	r1, r9
 8004a5e:	f7fb ffd5 	bl	8000a0c <__aeabi_uldivmod>
 8004a62:	4602      	mov	r2, r0
 8004a64:	460b      	mov	r3, r1
 8004a66:	4613      	mov	r3, r2
 8004a68:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a70:	d308      	bcc.n	8004a84 <UART_SetConfig+0x288>
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a78:	d204      	bcs.n	8004a84 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6a3a      	ldr	r2, [r7, #32]
 8004a80:	60da      	str	r2, [r3, #12]
 8004a82:	e0c9      	b.n	8004c18 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a8a:	e0c5      	b.n	8004c18 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a94:	d16d      	bne.n	8004b72 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004a96:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	2b07      	cmp	r3, #7
 8004a9e:	d82d      	bhi.n	8004afc <UART_SetConfig+0x300>
 8004aa0:	a201      	add	r2, pc, #4	; (adr r2, 8004aa8 <UART_SetConfig+0x2ac>)
 8004aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa6:	bf00      	nop
 8004aa8:	08004ac9 	.word	0x08004ac9
 8004aac:	08004ad1 	.word	0x08004ad1
 8004ab0:	08004afd 	.word	0x08004afd
 8004ab4:	08004ad7 	.word	0x08004ad7
 8004ab8:	08004afd 	.word	0x08004afd
 8004abc:	08004afd 	.word	0x08004afd
 8004ac0:	08004afd 	.word	0x08004afd
 8004ac4:	08004adf 	.word	0x08004adf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ac8:	f7fe ffce 	bl	8003a68 <HAL_RCC_GetPCLK2Freq>
 8004acc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004ace:	e01b      	b.n	8004b08 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ad0:	4b08      	ldr	r3, [pc, #32]	; (8004af4 <UART_SetConfig+0x2f8>)
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ad4:	e018      	b.n	8004b08 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ad6:	f7fe ff31 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8004ada:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004adc:	e014      	b.n	8004b08 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ae4:	e010      	b.n	8004b08 <UART_SetConfig+0x30c>
 8004ae6:	bf00      	nop
 8004ae8:	cfff69f3 	.word	0xcfff69f3
 8004aec:	40008000 	.word	0x40008000
 8004af0:	40013800 	.word	0x40013800
 8004af4:	00f42400 	.word	0x00f42400
 8004af8:	08006778 	.word	0x08006778
      default:
        pclk = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 8084 	beq.w	8004c18 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	4a4b      	ldr	r2, [pc, #300]	; (8004c44 <UART_SetConfig+0x448>)
 8004b16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b22:	005a      	lsls	r2, r3, #1
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	085b      	lsrs	r3, r3, #1
 8004b2a:	441a      	add	r2, r3
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b34:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b36:	6a3b      	ldr	r3, [r7, #32]
 8004b38:	2b0f      	cmp	r3, #15
 8004b3a:	d916      	bls.n	8004b6a <UART_SetConfig+0x36e>
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b42:	d212      	bcs.n	8004b6a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b44:	6a3b      	ldr	r3, [r7, #32]
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	f023 030f 	bic.w	r3, r3, #15
 8004b4c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b4e:	6a3b      	ldr	r3, [r7, #32]
 8004b50:	085b      	lsrs	r3, r3, #1
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	f003 0307 	and.w	r3, r3, #7
 8004b58:	b29a      	uxth	r2, r3
 8004b5a:	8bfb      	ldrh	r3, [r7, #30]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	8bfa      	ldrh	r2, [r7, #30]
 8004b66:	60da      	str	r2, [r3, #12]
 8004b68:	e056      	b.n	8004c18 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b70:	e052      	b.n	8004c18 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b76:	3b01      	subs	r3, #1
 8004b78:	2b07      	cmp	r3, #7
 8004b7a:	d822      	bhi.n	8004bc2 <UART_SetConfig+0x3c6>
 8004b7c:	a201      	add	r2, pc, #4	; (adr r2, 8004b84 <UART_SetConfig+0x388>)
 8004b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b82:	bf00      	nop
 8004b84:	08004ba5 	.word	0x08004ba5
 8004b88:	08004bad 	.word	0x08004bad
 8004b8c:	08004bc3 	.word	0x08004bc3
 8004b90:	08004bb3 	.word	0x08004bb3
 8004b94:	08004bc3 	.word	0x08004bc3
 8004b98:	08004bc3 	.word	0x08004bc3
 8004b9c:	08004bc3 	.word	0x08004bc3
 8004ba0:	08004bbb 	.word	0x08004bbb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ba4:	f7fe ff60 	bl	8003a68 <HAL_RCC_GetPCLK2Freq>
 8004ba8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004baa:	e010      	b.n	8004bce <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bac:	4b26      	ldr	r3, [pc, #152]	; (8004c48 <UART_SetConfig+0x44c>)
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bb0:	e00d      	b.n	8004bce <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bb2:	f7fe fec3 	bl	800393c <HAL_RCC_GetSysClockFreq>
 8004bb6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bb8:	e009      	b.n	8004bce <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bc0:	e005      	b.n	8004bce <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004bcc:	bf00      	nop
    }

    if (pclk != 0U)
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d021      	beq.n	8004c18 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	4a1a      	ldr	r2, [pc, #104]	; (8004c44 <UART_SetConfig+0x448>)
 8004bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bde:	461a      	mov	r2, r3
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	fbb3 f2f2 	udiv	r2, r3, r2
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	085b      	lsrs	r3, r3, #1
 8004bec:	441a      	add	r2, r3
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	2b0f      	cmp	r3, #15
 8004bfc:	d909      	bls.n	8004c12 <UART_SetConfig+0x416>
 8004bfe:	6a3b      	ldr	r3, [r7, #32]
 8004c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c04:	d205      	bcs.n	8004c12 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c06:	6a3b      	ldr	r3, [r7, #32]
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	60da      	str	r2, [r3, #12]
 8004c10:	e002      	b.n	8004c18 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2200      	movs	r2, #0
 8004c32:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004c34:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3730      	adds	r7, #48	; 0x30
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c42:	bf00      	nop
 8004c44:	08006778 	.word	0x08006778
 8004c48:	00f42400 	.word	0x00f42400

08004c4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c58:	f003 0308 	and.w	r3, r3, #8
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbe:	f003 0304 	and.w	r3, r3, #4
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	f003 0310 	and.w	r3, r3, #16
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d01a      	beq.n	8004d62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d4a:	d10a      	bne.n	8004d62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00a      	beq.n	8004d84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	605a      	str	r2, [r3, #4]
  }
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b098      	sub	sp, #96	; 0x60
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004da0:	f7fd f988 	bl	80020b4 <HAL_GetTick>
 8004da4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0308 	and.w	r3, r3, #8
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d12f      	bne.n	8004e14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004db4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f88e 	bl	8004ee4 <UART_WaitOnFlagUntilTimeout>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d022      	beq.n	8004e14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd6:	e853 3f00 	ldrex	r3, [r3]
 8004dda:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004de2:	653b      	str	r3, [r7, #80]	; 0x50
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	461a      	mov	r2, r3
 8004dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dec:	647b      	str	r3, [r7, #68]	; 0x44
 8004dee:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004df2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004df4:	e841 2300 	strex	r3, r2, [r1]
 8004df8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e6      	bne.n	8004dce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e063      	b.n	8004edc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0304 	and.w	r3, r3, #4
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d149      	bne.n	8004eb6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f857 	bl	8004ee4 <UART_WaitOnFlagUntilTimeout>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d03c      	beq.n	8004eb6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	e853 3f00 	ldrex	r3, [r3]
 8004e48:	623b      	str	r3, [r7, #32]
   return(result);
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	461a      	mov	r2, r3
 8004e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e5a:	633b      	str	r3, [r7, #48]	; 0x30
 8004e5c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e62:	e841 2300 	strex	r3, r2, [r1]
 8004e66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1e6      	bne.n	8004e3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	3308      	adds	r3, #8
 8004e74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	e853 3f00 	ldrex	r3, [r3]
 8004e7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f023 0301 	bic.w	r3, r3, #1
 8004e84:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3308      	adds	r3, #8
 8004e8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e8e:	61fa      	str	r2, [r7, #28]
 8004e90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e92:	69b9      	ldr	r1, [r7, #24]
 8004e94:	69fa      	ldr	r2, [r7, #28]
 8004e96:	e841 2300 	strex	r3, r2, [r1]
 8004e9a:	617b      	str	r3, [r7, #20]
   return(result);
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1e5      	bne.n	8004e6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e012      	b.n	8004edc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2220      	movs	r2, #32
 8004eba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3758      	adds	r7, #88	; 0x58
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	603b      	str	r3, [r7, #0]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ef4:	e04f      	b.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efc:	d04b      	beq.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004efe:	f7fd f8d9 	bl	80020b4 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d302      	bcc.n	8004f14 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	e04e      	b.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0304 	and.w	r3, r3, #4
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d037      	beq.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2b80      	cmp	r3, #128	; 0x80
 8004f2a:	d034      	beq.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b40      	cmp	r3, #64	; 0x40
 8004f30:	d031      	beq.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d110      	bne.n	8004f62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2208      	movs	r2, #8
 8004f46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f48:	68f8      	ldr	r0, [r7, #12]
 8004f4a:	f000 f838 	bl	8004fbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2208      	movs	r2, #8
 8004f52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e029      	b.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f70:	d111      	bne.n	8004f96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 f81e 	bl	8004fbe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e00f      	b.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	bf0c      	ite	eq
 8004fa6:	2301      	moveq	r3, #1
 8004fa8:	2300      	movne	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	461a      	mov	r2, r3
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d0a0      	beq.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b095      	sub	sp, #84	; 0x54
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fce:	e853 3f00 	ldrex	r3, [r3]
 8004fd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fe4:	643b      	str	r3, [r7, #64]	; 0x40
 8004fe6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fec:	e841 2300 	strex	r3, r2, [r1]
 8004ff0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1e6      	bne.n	8004fc6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3308      	adds	r3, #8
 8004ffe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	e853 3f00 	ldrex	r3, [r3]
 8005006:	61fb      	str	r3, [r7, #28]
   return(result);
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800500e:	f023 0301 	bic.w	r3, r3, #1
 8005012:	64bb      	str	r3, [r7, #72]	; 0x48
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3308      	adds	r3, #8
 800501a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800501c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800501e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005020:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005024:	e841 2300 	strex	r3, r2, [r1]
 8005028:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1e3      	bne.n	8004ff8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005034:	2b01      	cmp	r3, #1
 8005036:	d118      	bne.n	800506a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	e853 3f00 	ldrex	r3, [r3]
 8005044:	60bb      	str	r3, [r7, #8]
   return(result);
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f023 0310 	bic.w	r3, r3, #16
 800504c:	647b      	str	r3, [r7, #68]	; 0x44
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	461a      	mov	r2, r3
 8005054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005056:	61bb      	str	r3, [r7, #24]
 8005058:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505a:	6979      	ldr	r1, [r7, #20]
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	e841 2300 	strex	r3, r2, [r1]
 8005062:	613b      	str	r3, [r7, #16]
   return(result);
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1e6      	bne.n	8005038 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2220      	movs	r2, #32
 800506e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800507e:	bf00      	nop
 8005080:	3754      	adds	r7, #84	; 0x54
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800508a:	b480      	push	{r7}
 800508c:	b085      	sub	sp, #20
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005098:	2b01      	cmp	r3, #1
 800509a:	d101      	bne.n	80050a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800509c:	2302      	movs	r3, #2
 800509e:	e027      	b.n	80050f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2224      	movs	r2, #36	; 0x24
 80050ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0201 	bic.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80050ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2220      	movs	r2, #32
 80050e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80050ee:	2300      	movs	r3, #0
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005110:	2302      	movs	r3, #2
 8005112:	e02d      	b.n	8005170 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2224      	movs	r2, #36	; 0x24
 8005120:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0201 	bic.w	r2, r2, #1
 800513a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	430a      	orrs	r2, r1
 800514e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f84f 	bl	80051f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2220      	movs	r2, #32
 8005162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3710      	adds	r7, #16
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005188:	2b01      	cmp	r3, #1
 800518a:	d101      	bne.n	8005190 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800518c:	2302      	movs	r3, #2
 800518e:	e02d      	b.n	80051ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2224      	movs	r2, #36	; 0x24
 800519c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0201 	bic.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	683a      	ldr	r2, [r7, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f811 	bl	80051f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2220      	movs	r2, #32
 80051de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005200:	2b00      	cmp	r3, #0
 8005202:	d108      	bne.n	8005216 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005214:	e031      	b.n	800527a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005216:	2308      	movs	r3, #8
 8005218:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800521a:	2308      	movs	r3, #8
 800521c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	0e5b      	lsrs	r3, r3, #25
 8005226:	b2db      	uxtb	r3, r3
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	0f5b      	lsrs	r3, r3, #29
 8005236:	b2db      	uxtb	r3, r3
 8005238:	f003 0307 	and.w	r3, r3, #7
 800523c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800523e:	7bbb      	ldrb	r3, [r7, #14]
 8005240:	7b3a      	ldrb	r2, [r7, #12]
 8005242:	4911      	ldr	r1, [pc, #68]	; (8005288 <UARTEx_SetNbDataToProcess+0x94>)
 8005244:	5c8a      	ldrb	r2, [r1, r2]
 8005246:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800524a:	7b3a      	ldrb	r2, [r7, #12]
 800524c:	490f      	ldr	r1, [pc, #60]	; (800528c <UARTEx_SetNbDataToProcess+0x98>)
 800524e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005250:	fb93 f3f2 	sdiv	r3, r3, r2
 8005254:	b29a      	uxth	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	7b7a      	ldrb	r2, [r7, #13]
 8005260:	4909      	ldr	r1, [pc, #36]	; (8005288 <UARTEx_SetNbDataToProcess+0x94>)
 8005262:	5c8a      	ldrb	r2, [r1, r2]
 8005264:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005268:	7b7a      	ldrb	r2, [r7, #13]
 800526a:	4908      	ldr	r1, [pc, #32]	; (800528c <UARTEx_SetNbDataToProcess+0x98>)
 800526c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800526e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005272:	b29a      	uxth	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800527a:	bf00      	nop
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	08006790 	.word	0x08006790
 800528c:	08006798 	.word	0x08006798

08005290 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005298:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800529c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80052a4:	b29a      	uxth	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	43db      	mvns	r3, r3
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	4013      	ands	r3, r2
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b085      	sub	sp, #20
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	1d3b      	adds	r3, r7, #4
 80052d0:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
	...

08005304 <siprintf>:
 8005304:	b40e      	push	{r1, r2, r3}
 8005306:	b500      	push	{lr}
 8005308:	b09c      	sub	sp, #112	; 0x70
 800530a:	ab1d      	add	r3, sp, #116	; 0x74
 800530c:	9002      	str	r0, [sp, #8]
 800530e:	9006      	str	r0, [sp, #24]
 8005310:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005314:	4809      	ldr	r0, [pc, #36]	; (800533c <siprintf+0x38>)
 8005316:	9107      	str	r1, [sp, #28]
 8005318:	9104      	str	r1, [sp, #16]
 800531a:	4909      	ldr	r1, [pc, #36]	; (8005340 <siprintf+0x3c>)
 800531c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005320:	9105      	str	r1, [sp, #20]
 8005322:	6800      	ldr	r0, [r0, #0]
 8005324:	9301      	str	r3, [sp, #4]
 8005326:	a902      	add	r1, sp, #8
 8005328:	f000 f9ce 	bl	80056c8 <_svfiprintf_r>
 800532c:	9b02      	ldr	r3, [sp, #8]
 800532e:	2200      	movs	r2, #0
 8005330:	701a      	strb	r2, [r3, #0]
 8005332:	b01c      	add	sp, #112	; 0x70
 8005334:	f85d eb04 	ldr.w	lr, [sp], #4
 8005338:	b003      	add	sp, #12
 800533a:	4770      	bx	lr
 800533c:	20000070 	.word	0x20000070
 8005340:	ffff0208 	.word	0xffff0208

08005344 <siscanf>:
 8005344:	b40e      	push	{r1, r2, r3}
 8005346:	b510      	push	{r4, lr}
 8005348:	b09f      	sub	sp, #124	; 0x7c
 800534a:	ac21      	add	r4, sp, #132	; 0x84
 800534c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005350:	f854 2b04 	ldr.w	r2, [r4], #4
 8005354:	9201      	str	r2, [sp, #4]
 8005356:	f8ad 101c 	strh.w	r1, [sp, #28]
 800535a:	9004      	str	r0, [sp, #16]
 800535c:	9008      	str	r0, [sp, #32]
 800535e:	f7fa ff0f 	bl	8000180 <strlen>
 8005362:	4b0c      	ldr	r3, [pc, #48]	; (8005394 <siscanf+0x50>)
 8005364:	9005      	str	r0, [sp, #20]
 8005366:	9009      	str	r0, [sp, #36]	; 0x24
 8005368:	930d      	str	r3, [sp, #52]	; 0x34
 800536a:	480b      	ldr	r0, [pc, #44]	; (8005398 <siscanf+0x54>)
 800536c:	9a01      	ldr	r2, [sp, #4]
 800536e:	6800      	ldr	r0, [r0, #0]
 8005370:	9403      	str	r4, [sp, #12]
 8005372:	2300      	movs	r3, #0
 8005374:	9311      	str	r3, [sp, #68]	; 0x44
 8005376:	9316      	str	r3, [sp, #88]	; 0x58
 8005378:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800537c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005380:	a904      	add	r1, sp, #16
 8005382:	4623      	mov	r3, r4
 8005384:	f000 faf8 	bl	8005978 <__ssvfiscanf_r>
 8005388:	b01f      	add	sp, #124	; 0x7c
 800538a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800538e:	b003      	add	sp, #12
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	0800539d 	.word	0x0800539d
 8005398:	20000070 	.word	0x20000070

0800539c <__seofread>:
 800539c:	2000      	movs	r0, #0
 800539e:	4770      	bx	lr

080053a0 <memset>:
 80053a0:	4402      	add	r2, r0
 80053a2:	4603      	mov	r3, r0
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d100      	bne.n	80053aa <memset+0xa>
 80053a8:	4770      	bx	lr
 80053aa:	f803 1b01 	strb.w	r1, [r3], #1
 80053ae:	e7f9      	b.n	80053a4 <memset+0x4>

080053b0 <__errno>:
 80053b0:	4b01      	ldr	r3, [pc, #4]	; (80053b8 <__errno+0x8>)
 80053b2:	6818      	ldr	r0, [r3, #0]
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	20000070 	.word	0x20000070

080053bc <__libc_init_array>:
 80053bc:	b570      	push	{r4, r5, r6, lr}
 80053be:	4d0d      	ldr	r5, [pc, #52]	; (80053f4 <__libc_init_array+0x38>)
 80053c0:	4c0d      	ldr	r4, [pc, #52]	; (80053f8 <__libc_init_array+0x3c>)
 80053c2:	1b64      	subs	r4, r4, r5
 80053c4:	10a4      	asrs	r4, r4, #2
 80053c6:	2600      	movs	r6, #0
 80053c8:	42a6      	cmp	r6, r4
 80053ca:	d109      	bne.n	80053e0 <__libc_init_array+0x24>
 80053cc:	4d0b      	ldr	r5, [pc, #44]	; (80053fc <__libc_init_array+0x40>)
 80053ce:	4c0c      	ldr	r4, [pc, #48]	; (8005400 <__libc_init_array+0x44>)
 80053d0:	f001 f8f6 	bl	80065c0 <_init>
 80053d4:	1b64      	subs	r4, r4, r5
 80053d6:	10a4      	asrs	r4, r4, #2
 80053d8:	2600      	movs	r6, #0
 80053da:	42a6      	cmp	r6, r4
 80053dc:	d105      	bne.n	80053ea <__libc_init_array+0x2e>
 80053de:	bd70      	pop	{r4, r5, r6, pc}
 80053e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053e4:	4798      	blx	r3
 80053e6:	3601      	adds	r6, #1
 80053e8:	e7ee      	b.n	80053c8 <__libc_init_array+0xc>
 80053ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ee:	4798      	blx	r3
 80053f0:	3601      	adds	r6, #1
 80053f2:	e7f2      	b.n	80053da <__libc_init_array+0x1e>
 80053f4:	080068f8 	.word	0x080068f8
 80053f8:	080068f8 	.word	0x080068f8
 80053fc:	080068f8 	.word	0x080068f8
 8005400:	080068fc 	.word	0x080068fc

08005404 <__retarget_lock_acquire_recursive>:
 8005404:	4770      	bx	lr

08005406 <__retarget_lock_release_recursive>:
 8005406:	4770      	bx	lr

08005408 <memcpy>:
 8005408:	440a      	add	r2, r1
 800540a:	4291      	cmp	r1, r2
 800540c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005410:	d100      	bne.n	8005414 <memcpy+0xc>
 8005412:	4770      	bx	lr
 8005414:	b510      	push	{r4, lr}
 8005416:	f811 4b01 	ldrb.w	r4, [r1], #1
 800541a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800541e:	4291      	cmp	r1, r2
 8005420:	d1f9      	bne.n	8005416 <memcpy+0xe>
 8005422:	bd10      	pop	{r4, pc}

08005424 <_free_r>:
 8005424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005426:	2900      	cmp	r1, #0
 8005428:	d044      	beq.n	80054b4 <_free_r+0x90>
 800542a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800542e:	9001      	str	r0, [sp, #4]
 8005430:	2b00      	cmp	r3, #0
 8005432:	f1a1 0404 	sub.w	r4, r1, #4
 8005436:	bfb8      	it	lt
 8005438:	18e4      	addlt	r4, r4, r3
 800543a:	f000 f8df 	bl	80055fc <__malloc_lock>
 800543e:	4a1e      	ldr	r2, [pc, #120]	; (80054b8 <_free_r+0x94>)
 8005440:	9801      	ldr	r0, [sp, #4]
 8005442:	6813      	ldr	r3, [r2, #0]
 8005444:	b933      	cbnz	r3, 8005454 <_free_r+0x30>
 8005446:	6063      	str	r3, [r4, #4]
 8005448:	6014      	str	r4, [r2, #0]
 800544a:	b003      	add	sp, #12
 800544c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005450:	f000 b8da 	b.w	8005608 <__malloc_unlock>
 8005454:	42a3      	cmp	r3, r4
 8005456:	d908      	bls.n	800546a <_free_r+0x46>
 8005458:	6825      	ldr	r5, [r4, #0]
 800545a:	1961      	adds	r1, r4, r5
 800545c:	428b      	cmp	r3, r1
 800545e:	bf01      	itttt	eq
 8005460:	6819      	ldreq	r1, [r3, #0]
 8005462:	685b      	ldreq	r3, [r3, #4]
 8005464:	1949      	addeq	r1, r1, r5
 8005466:	6021      	streq	r1, [r4, #0]
 8005468:	e7ed      	b.n	8005446 <_free_r+0x22>
 800546a:	461a      	mov	r2, r3
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	b10b      	cbz	r3, 8005474 <_free_r+0x50>
 8005470:	42a3      	cmp	r3, r4
 8005472:	d9fa      	bls.n	800546a <_free_r+0x46>
 8005474:	6811      	ldr	r1, [r2, #0]
 8005476:	1855      	adds	r5, r2, r1
 8005478:	42a5      	cmp	r5, r4
 800547a:	d10b      	bne.n	8005494 <_free_r+0x70>
 800547c:	6824      	ldr	r4, [r4, #0]
 800547e:	4421      	add	r1, r4
 8005480:	1854      	adds	r4, r2, r1
 8005482:	42a3      	cmp	r3, r4
 8005484:	6011      	str	r1, [r2, #0]
 8005486:	d1e0      	bne.n	800544a <_free_r+0x26>
 8005488:	681c      	ldr	r4, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	6053      	str	r3, [r2, #4]
 800548e:	440c      	add	r4, r1
 8005490:	6014      	str	r4, [r2, #0]
 8005492:	e7da      	b.n	800544a <_free_r+0x26>
 8005494:	d902      	bls.n	800549c <_free_r+0x78>
 8005496:	230c      	movs	r3, #12
 8005498:	6003      	str	r3, [r0, #0]
 800549a:	e7d6      	b.n	800544a <_free_r+0x26>
 800549c:	6825      	ldr	r5, [r4, #0]
 800549e:	1961      	adds	r1, r4, r5
 80054a0:	428b      	cmp	r3, r1
 80054a2:	bf04      	itt	eq
 80054a4:	6819      	ldreq	r1, [r3, #0]
 80054a6:	685b      	ldreq	r3, [r3, #4]
 80054a8:	6063      	str	r3, [r4, #4]
 80054aa:	bf04      	itt	eq
 80054ac:	1949      	addeq	r1, r1, r5
 80054ae:	6021      	streq	r1, [r4, #0]
 80054b0:	6054      	str	r4, [r2, #4]
 80054b2:	e7ca      	b.n	800544a <_free_r+0x26>
 80054b4:	b003      	add	sp, #12
 80054b6:	bd30      	pop	{r4, r5, pc}
 80054b8:	200005e4 	.word	0x200005e4

080054bc <sbrk_aligned>:
 80054bc:	b570      	push	{r4, r5, r6, lr}
 80054be:	4e0e      	ldr	r6, [pc, #56]	; (80054f8 <sbrk_aligned+0x3c>)
 80054c0:	460c      	mov	r4, r1
 80054c2:	6831      	ldr	r1, [r6, #0]
 80054c4:	4605      	mov	r5, r0
 80054c6:	b911      	cbnz	r1, 80054ce <sbrk_aligned+0x12>
 80054c8:	f000 ff3a 	bl	8006340 <_sbrk_r>
 80054cc:	6030      	str	r0, [r6, #0]
 80054ce:	4621      	mov	r1, r4
 80054d0:	4628      	mov	r0, r5
 80054d2:	f000 ff35 	bl	8006340 <_sbrk_r>
 80054d6:	1c43      	adds	r3, r0, #1
 80054d8:	d00a      	beq.n	80054f0 <sbrk_aligned+0x34>
 80054da:	1cc4      	adds	r4, r0, #3
 80054dc:	f024 0403 	bic.w	r4, r4, #3
 80054e0:	42a0      	cmp	r0, r4
 80054e2:	d007      	beq.n	80054f4 <sbrk_aligned+0x38>
 80054e4:	1a21      	subs	r1, r4, r0
 80054e6:	4628      	mov	r0, r5
 80054e8:	f000 ff2a 	bl	8006340 <_sbrk_r>
 80054ec:	3001      	adds	r0, #1
 80054ee:	d101      	bne.n	80054f4 <sbrk_aligned+0x38>
 80054f0:	f04f 34ff 	mov.w	r4, #4294967295
 80054f4:	4620      	mov	r0, r4
 80054f6:	bd70      	pop	{r4, r5, r6, pc}
 80054f8:	200005e8 	.word	0x200005e8

080054fc <_malloc_r>:
 80054fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005500:	1ccd      	adds	r5, r1, #3
 8005502:	f025 0503 	bic.w	r5, r5, #3
 8005506:	3508      	adds	r5, #8
 8005508:	2d0c      	cmp	r5, #12
 800550a:	bf38      	it	cc
 800550c:	250c      	movcc	r5, #12
 800550e:	2d00      	cmp	r5, #0
 8005510:	4607      	mov	r7, r0
 8005512:	db01      	blt.n	8005518 <_malloc_r+0x1c>
 8005514:	42a9      	cmp	r1, r5
 8005516:	d905      	bls.n	8005524 <_malloc_r+0x28>
 8005518:	230c      	movs	r3, #12
 800551a:	603b      	str	r3, [r7, #0]
 800551c:	2600      	movs	r6, #0
 800551e:	4630      	mov	r0, r6
 8005520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005524:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80055f8 <_malloc_r+0xfc>
 8005528:	f000 f868 	bl	80055fc <__malloc_lock>
 800552c:	f8d8 3000 	ldr.w	r3, [r8]
 8005530:	461c      	mov	r4, r3
 8005532:	bb5c      	cbnz	r4, 800558c <_malloc_r+0x90>
 8005534:	4629      	mov	r1, r5
 8005536:	4638      	mov	r0, r7
 8005538:	f7ff ffc0 	bl	80054bc <sbrk_aligned>
 800553c:	1c43      	adds	r3, r0, #1
 800553e:	4604      	mov	r4, r0
 8005540:	d155      	bne.n	80055ee <_malloc_r+0xf2>
 8005542:	f8d8 4000 	ldr.w	r4, [r8]
 8005546:	4626      	mov	r6, r4
 8005548:	2e00      	cmp	r6, #0
 800554a:	d145      	bne.n	80055d8 <_malloc_r+0xdc>
 800554c:	2c00      	cmp	r4, #0
 800554e:	d048      	beq.n	80055e2 <_malloc_r+0xe6>
 8005550:	6823      	ldr	r3, [r4, #0]
 8005552:	4631      	mov	r1, r6
 8005554:	4638      	mov	r0, r7
 8005556:	eb04 0903 	add.w	r9, r4, r3
 800555a:	f000 fef1 	bl	8006340 <_sbrk_r>
 800555e:	4581      	cmp	r9, r0
 8005560:	d13f      	bne.n	80055e2 <_malloc_r+0xe6>
 8005562:	6821      	ldr	r1, [r4, #0]
 8005564:	1a6d      	subs	r5, r5, r1
 8005566:	4629      	mov	r1, r5
 8005568:	4638      	mov	r0, r7
 800556a:	f7ff ffa7 	bl	80054bc <sbrk_aligned>
 800556e:	3001      	adds	r0, #1
 8005570:	d037      	beq.n	80055e2 <_malloc_r+0xe6>
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	442b      	add	r3, r5
 8005576:	6023      	str	r3, [r4, #0]
 8005578:	f8d8 3000 	ldr.w	r3, [r8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d038      	beq.n	80055f2 <_malloc_r+0xf6>
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	42a2      	cmp	r2, r4
 8005584:	d12b      	bne.n	80055de <_malloc_r+0xe2>
 8005586:	2200      	movs	r2, #0
 8005588:	605a      	str	r2, [r3, #4]
 800558a:	e00f      	b.n	80055ac <_malloc_r+0xb0>
 800558c:	6822      	ldr	r2, [r4, #0]
 800558e:	1b52      	subs	r2, r2, r5
 8005590:	d41f      	bmi.n	80055d2 <_malloc_r+0xd6>
 8005592:	2a0b      	cmp	r2, #11
 8005594:	d917      	bls.n	80055c6 <_malloc_r+0xca>
 8005596:	1961      	adds	r1, r4, r5
 8005598:	42a3      	cmp	r3, r4
 800559a:	6025      	str	r5, [r4, #0]
 800559c:	bf18      	it	ne
 800559e:	6059      	strne	r1, [r3, #4]
 80055a0:	6863      	ldr	r3, [r4, #4]
 80055a2:	bf08      	it	eq
 80055a4:	f8c8 1000 	streq.w	r1, [r8]
 80055a8:	5162      	str	r2, [r4, r5]
 80055aa:	604b      	str	r3, [r1, #4]
 80055ac:	4638      	mov	r0, r7
 80055ae:	f104 060b 	add.w	r6, r4, #11
 80055b2:	f000 f829 	bl	8005608 <__malloc_unlock>
 80055b6:	f026 0607 	bic.w	r6, r6, #7
 80055ba:	1d23      	adds	r3, r4, #4
 80055bc:	1af2      	subs	r2, r6, r3
 80055be:	d0ae      	beq.n	800551e <_malloc_r+0x22>
 80055c0:	1b9b      	subs	r3, r3, r6
 80055c2:	50a3      	str	r3, [r4, r2]
 80055c4:	e7ab      	b.n	800551e <_malloc_r+0x22>
 80055c6:	42a3      	cmp	r3, r4
 80055c8:	6862      	ldr	r2, [r4, #4]
 80055ca:	d1dd      	bne.n	8005588 <_malloc_r+0x8c>
 80055cc:	f8c8 2000 	str.w	r2, [r8]
 80055d0:	e7ec      	b.n	80055ac <_malloc_r+0xb0>
 80055d2:	4623      	mov	r3, r4
 80055d4:	6864      	ldr	r4, [r4, #4]
 80055d6:	e7ac      	b.n	8005532 <_malloc_r+0x36>
 80055d8:	4634      	mov	r4, r6
 80055da:	6876      	ldr	r6, [r6, #4]
 80055dc:	e7b4      	b.n	8005548 <_malloc_r+0x4c>
 80055de:	4613      	mov	r3, r2
 80055e0:	e7cc      	b.n	800557c <_malloc_r+0x80>
 80055e2:	230c      	movs	r3, #12
 80055e4:	603b      	str	r3, [r7, #0]
 80055e6:	4638      	mov	r0, r7
 80055e8:	f000 f80e 	bl	8005608 <__malloc_unlock>
 80055ec:	e797      	b.n	800551e <_malloc_r+0x22>
 80055ee:	6025      	str	r5, [r4, #0]
 80055f0:	e7dc      	b.n	80055ac <_malloc_r+0xb0>
 80055f2:	605b      	str	r3, [r3, #4]
 80055f4:	deff      	udf	#255	; 0xff
 80055f6:	bf00      	nop
 80055f8:	200005e4 	.word	0x200005e4

080055fc <__malloc_lock>:
 80055fc:	4801      	ldr	r0, [pc, #4]	; (8005604 <__malloc_lock+0x8>)
 80055fe:	f7ff bf01 	b.w	8005404 <__retarget_lock_acquire_recursive>
 8005602:	bf00      	nop
 8005604:	200005e0 	.word	0x200005e0

08005608 <__malloc_unlock>:
 8005608:	4801      	ldr	r0, [pc, #4]	; (8005610 <__malloc_unlock+0x8>)
 800560a:	f7ff befc 	b.w	8005406 <__retarget_lock_release_recursive>
 800560e:	bf00      	nop
 8005610:	200005e0 	.word	0x200005e0

08005614 <__ssputs_r>:
 8005614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005618:	688e      	ldr	r6, [r1, #8]
 800561a:	461f      	mov	r7, r3
 800561c:	42be      	cmp	r6, r7
 800561e:	680b      	ldr	r3, [r1, #0]
 8005620:	4682      	mov	sl, r0
 8005622:	460c      	mov	r4, r1
 8005624:	4690      	mov	r8, r2
 8005626:	d82c      	bhi.n	8005682 <__ssputs_r+0x6e>
 8005628:	898a      	ldrh	r2, [r1, #12]
 800562a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800562e:	d026      	beq.n	800567e <__ssputs_r+0x6a>
 8005630:	6965      	ldr	r5, [r4, #20]
 8005632:	6909      	ldr	r1, [r1, #16]
 8005634:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005638:	eba3 0901 	sub.w	r9, r3, r1
 800563c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005640:	1c7b      	adds	r3, r7, #1
 8005642:	444b      	add	r3, r9
 8005644:	106d      	asrs	r5, r5, #1
 8005646:	429d      	cmp	r5, r3
 8005648:	bf38      	it	cc
 800564a:	461d      	movcc	r5, r3
 800564c:	0553      	lsls	r3, r2, #21
 800564e:	d527      	bpl.n	80056a0 <__ssputs_r+0x8c>
 8005650:	4629      	mov	r1, r5
 8005652:	f7ff ff53 	bl	80054fc <_malloc_r>
 8005656:	4606      	mov	r6, r0
 8005658:	b360      	cbz	r0, 80056b4 <__ssputs_r+0xa0>
 800565a:	6921      	ldr	r1, [r4, #16]
 800565c:	464a      	mov	r2, r9
 800565e:	f7ff fed3 	bl	8005408 <memcpy>
 8005662:	89a3      	ldrh	r3, [r4, #12]
 8005664:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800566c:	81a3      	strh	r3, [r4, #12]
 800566e:	6126      	str	r6, [r4, #16]
 8005670:	6165      	str	r5, [r4, #20]
 8005672:	444e      	add	r6, r9
 8005674:	eba5 0509 	sub.w	r5, r5, r9
 8005678:	6026      	str	r6, [r4, #0]
 800567a:	60a5      	str	r5, [r4, #8]
 800567c:	463e      	mov	r6, r7
 800567e:	42be      	cmp	r6, r7
 8005680:	d900      	bls.n	8005684 <__ssputs_r+0x70>
 8005682:	463e      	mov	r6, r7
 8005684:	6820      	ldr	r0, [r4, #0]
 8005686:	4632      	mov	r2, r6
 8005688:	4641      	mov	r1, r8
 800568a:	f000 fe3e 	bl	800630a <memmove>
 800568e:	68a3      	ldr	r3, [r4, #8]
 8005690:	1b9b      	subs	r3, r3, r6
 8005692:	60a3      	str	r3, [r4, #8]
 8005694:	6823      	ldr	r3, [r4, #0]
 8005696:	4433      	add	r3, r6
 8005698:	6023      	str	r3, [r4, #0]
 800569a:	2000      	movs	r0, #0
 800569c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056a0:	462a      	mov	r2, r5
 80056a2:	f000 fe5d 	bl	8006360 <_realloc_r>
 80056a6:	4606      	mov	r6, r0
 80056a8:	2800      	cmp	r0, #0
 80056aa:	d1e0      	bne.n	800566e <__ssputs_r+0x5a>
 80056ac:	6921      	ldr	r1, [r4, #16]
 80056ae:	4650      	mov	r0, sl
 80056b0:	f7ff feb8 	bl	8005424 <_free_r>
 80056b4:	230c      	movs	r3, #12
 80056b6:	f8ca 3000 	str.w	r3, [sl]
 80056ba:	89a3      	ldrh	r3, [r4, #12]
 80056bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056c0:	81a3      	strh	r3, [r4, #12]
 80056c2:	f04f 30ff 	mov.w	r0, #4294967295
 80056c6:	e7e9      	b.n	800569c <__ssputs_r+0x88>

080056c8 <_svfiprintf_r>:
 80056c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056cc:	4698      	mov	r8, r3
 80056ce:	898b      	ldrh	r3, [r1, #12]
 80056d0:	061b      	lsls	r3, r3, #24
 80056d2:	b09d      	sub	sp, #116	; 0x74
 80056d4:	4607      	mov	r7, r0
 80056d6:	460d      	mov	r5, r1
 80056d8:	4614      	mov	r4, r2
 80056da:	d50e      	bpl.n	80056fa <_svfiprintf_r+0x32>
 80056dc:	690b      	ldr	r3, [r1, #16]
 80056de:	b963      	cbnz	r3, 80056fa <_svfiprintf_r+0x32>
 80056e0:	2140      	movs	r1, #64	; 0x40
 80056e2:	f7ff ff0b 	bl	80054fc <_malloc_r>
 80056e6:	6028      	str	r0, [r5, #0]
 80056e8:	6128      	str	r0, [r5, #16]
 80056ea:	b920      	cbnz	r0, 80056f6 <_svfiprintf_r+0x2e>
 80056ec:	230c      	movs	r3, #12
 80056ee:	603b      	str	r3, [r7, #0]
 80056f0:	f04f 30ff 	mov.w	r0, #4294967295
 80056f4:	e0d0      	b.n	8005898 <_svfiprintf_r+0x1d0>
 80056f6:	2340      	movs	r3, #64	; 0x40
 80056f8:	616b      	str	r3, [r5, #20]
 80056fa:	2300      	movs	r3, #0
 80056fc:	9309      	str	r3, [sp, #36]	; 0x24
 80056fe:	2320      	movs	r3, #32
 8005700:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005704:	f8cd 800c 	str.w	r8, [sp, #12]
 8005708:	2330      	movs	r3, #48	; 0x30
 800570a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80058b0 <_svfiprintf_r+0x1e8>
 800570e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005712:	f04f 0901 	mov.w	r9, #1
 8005716:	4623      	mov	r3, r4
 8005718:	469a      	mov	sl, r3
 800571a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800571e:	b10a      	cbz	r2, 8005724 <_svfiprintf_r+0x5c>
 8005720:	2a25      	cmp	r2, #37	; 0x25
 8005722:	d1f9      	bne.n	8005718 <_svfiprintf_r+0x50>
 8005724:	ebba 0b04 	subs.w	fp, sl, r4
 8005728:	d00b      	beq.n	8005742 <_svfiprintf_r+0x7a>
 800572a:	465b      	mov	r3, fp
 800572c:	4622      	mov	r2, r4
 800572e:	4629      	mov	r1, r5
 8005730:	4638      	mov	r0, r7
 8005732:	f7ff ff6f 	bl	8005614 <__ssputs_r>
 8005736:	3001      	adds	r0, #1
 8005738:	f000 80a9 	beq.w	800588e <_svfiprintf_r+0x1c6>
 800573c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800573e:	445a      	add	r2, fp
 8005740:	9209      	str	r2, [sp, #36]	; 0x24
 8005742:	f89a 3000 	ldrb.w	r3, [sl]
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 80a1 	beq.w	800588e <_svfiprintf_r+0x1c6>
 800574c:	2300      	movs	r3, #0
 800574e:	f04f 32ff 	mov.w	r2, #4294967295
 8005752:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005756:	f10a 0a01 	add.w	sl, sl, #1
 800575a:	9304      	str	r3, [sp, #16]
 800575c:	9307      	str	r3, [sp, #28]
 800575e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005762:	931a      	str	r3, [sp, #104]	; 0x68
 8005764:	4654      	mov	r4, sl
 8005766:	2205      	movs	r2, #5
 8005768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800576c:	4850      	ldr	r0, [pc, #320]	; (80058b0 <_svfiprintf_r+0x1e8>)
 800576e:	f7fa fd0f 	bl	8000190 <memchr>
 8005772:	9a04      	ldr	r2, [sp, #16]
 8005774:	b9d8      	cbnz	r0, 80057ae <_svfiprintf_r+0xe6>
 8005776:	06d0      	lsls	r0, r2, #27
 8005778:	bf44      	itt	mi
 800577a:	2320      	movmi	r3, #32
 800577c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005780:	0711      	lsls	r1, r2, #28
 8005782:	bf44      	itt	mi
 8005784:	232b      	movmi	r3, #43	; 0x2b
 8005786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800578a:	f89a 3000 	ldrb.w	r3, [sl]
 800578e:	2b2a      	cmp	r3, #42	; 0x2a
 8005790:	d015      	beq.n	80057be <_svfiprintf_r+0xf6>
 8005792:	9a07      	ldr	r2, [sp, #28]
 8005794:	4654      	mov	r4, sl
 8005796:	2000      	movs	r0, #0
 8005798:	f04f 0c0a 	mov.w	ip, #10
 800579c:	4621      	mov	r1, r4
 800579e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057a2:	3b30      	subs	r3, #48	; 0x30
 80057a4:	2b09      	cmp	r3, #9
 80057a6:	d94d      	bls.n	8005844 <_svfiprintf_r+0x17c>
 80057a8:	b1b0      	cbz	r0, 80057d8 <_svfiprintf_r+0x110>
 80057aa:	9207      	str	r2, [sp, #28]
 80057ac:	e014      	b.n	80057d8 <_svfiprintf_r+0x110>
 80057ae:	eba0 0308 	sub.w	r3, r0, r8
 80057b2:	fa09 f303 	lsl.w	r3, r9, r3
 80057b6:	4313      	orrs	r3, r2
 80057b8:	9304      	str	r3, [sp, #16]
 80057ba:	46a2      	mov	sl, r4
 80057bc:	e7d2      	b.n	8005764 <_svfiprintf_r+0x9c>
 80057be:	9b03      	ldr	r3, [sp, #12]
 80057c0:	1d19      	adds	r1, r3, #4
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	9103      	str	r1, [sp, #12]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	bfbb      	ittet	lt
 80057ca:	425b      	neglt	r3, r3
 80057cc:	f042 0202 	orrlt.w	r2, r2, #2
 80057d0:	9307      	strge	r3, [sp, #28]
 80057d2:	9307      	strlt	r3, [sp, #28]
 80057d4:	bfb8      	it	lt
 80057d6:	9204      	strlt	r2, [sp, #16]
 80057d8:	7823      	ldrb	r3, [r4, #0]
 80057da:	2b2e      	cmp	r3, #46	; 0x2e
 80057dc:	d10c      	bne.n	80057f8 <_svfiprintf_r+0x130>
 80057de:	7863      	ldrb	r3, [r4, #1]
 80057e0:	2b2a      	cmp	r3, #42	; 0x2a
 80057e2:	d134      	bne.n	800584e <_svfiprintf_r+0x186>
 80057e4:	9b03      	ldr	r3, [sp, #12]
 80057e6:	1d1a      	adds	r2, r3, #4
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	9203      	str	r2, [sp, #12]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	bfb8      	it	lt
 80057f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80057f4:	3402      	adds	r4, #2
 80057f6:	9305      	str	r3, [sp, #20]
 80057f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80058c0 <_svfiprintf_r+0x1f8>
 80057fc:	7821      	ldrb	r1, [r4, #0]
 80057fe:	2203      	movs	r2, #3
 8005800:	4650      	mov	r0, sl
 8005802:	f7fa fcc5 	bl	8000190 <memchr>
 8005806:	b138      	cbz	r0, 8005818 <_svfiprintf_r+0x150>
 8005808:	9b04      	ldr	r3, [sp, #16]
 800580a:	eba0 000a 	sub.w	r0, r0, sl
 800580e:	2240      	movs	r2, #64	; 0x40
 8005810:	4082      	lsls	r2, r0
 8005812:	4313      	orrs	r3, r2
 8005814:	3401      	adds	r4, #1
 8005816:	9304      	str	r3, [sp, #16]
 8005818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800581c:	4825      	ldr	r0, [pc, #148]	; (80058b4 <_svfiprintf_r+0x1ec>)
 800581e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005822:	2206      	movs	r2, #6
 8005824:	f7fa fcb4 	bl	8000190 <memchr>
 8005828:	2800      	cmp	r0, #0
 800582a:	d038      	beq.n	800589e <_svfiprintf_r+0x1d6>
 800582c:	4b22      	ldr	r3, [pc, #136]	; (80058b8 <_svfiprintf_r+0x1f0>)
 800582e:	bb1b      	cbnz	r3, 8005878 <_svfiprintf_r+0x1b0>
 8005830:	9b03      	ldr	r3, [sp, #12]
 8005832:	3307      	adds	r3, #7
 8005834:	f023 0307 	bic.w	r3, r3, #7
 8005838:	3308      	adds	r3, #8
 800583a:	9303      	str	r3, [sp, #12]
 800583c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800583e:	4433      	add	r3, r6
 8005840:	9309      	str	r3, [sp, #36]	; 0x24
 8005842:	e768      	b.n	8005716 <_svfiprintf_r+0x4e>
 8005844:	fb0c 3202 	mla	r2, ip, r2, r3
 8005848:	460c      	mov	r4, r1
 800584a:	2001      	movs	r0, #1
 800584c:	e7a6      	b.n	800579c <_svfiprintf_r+0xd4>
 800584e:	2300      	movs	r3, #0
 8005850:	3401      	adds	r4, #1
 8005852:	9305      	str	r3, [sp, #20]
 8005854:	4619      	mov	r1, r3
 8005856:	f04f 0c0a 	mov.w	ip, #10
 800585a:	4620      	mov	r0, r4
 800585c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005860:	3a30      	subs	r2, #48	; 0x30
 8005862:	2a09      	cmp	r2, #9
 8005864:	d903      	bls.n	800586e <_svfiprintf_r+0x1a6>
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0c6      	beq.n	80057f8 <_svfiprintf_r+0x130>
 800586a:	9105      	str	r1, [sp, #20]
 800586c:	e7c4      	b.n	80057f8 <_svfiprintf_r+0x130>
 800586e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005872:	4604      	mov	r4, r0
 8005874:	2301      	movs	r3, #1
 8005876:	e7f0      	b.n	800585a <_svfiprintf_r+0x192>
 8005878:	ab03      	add	r3, sp, #12
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	462a      	mov	r2, r5
 800587e:	4b0f      	ldr	r3, [pc, #60]	; (80058bc <_svfiprintf_r+0x1f4>)
 8005880:	a904      	add	r1, sp, #16
 8005882:	4638      	mov	r0, r7
 8005884:	f3af 8000 	nop.w
 8005888:	1c42      	adds	r2, r0, #1
 800588a:	4606      	mov	r6, r0
 800588c:	d1d6      	bne.n	800583c <_svfiprintf_r+0x174>
 800588e:	89ab      	ldrh	r3, [r5, #12]
 8005890:	065b      	lsls	r3, r3, #25
 8005892:	f53f af2d 	bmi.w	80056f0 <_svfiprintf_r+0x28>
 8005896:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005898:	b01d      	add	sp, #116	; 0x74
 800589a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800589e:	ab03      	add	r3, sp, #12
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	462a      	mov	r2, r5
 80058a4:	4b05      	ldr	r3, [pc, #20]	; (80058bc <_svfiprintf_r+0x1f4>)
 80058a6:	a904      	add	r1, sp, #16
 80058a8:	4638      	mov	r0, r7
 80058aa:	f000 fa4b 	bl	8005d44 <_printf_i>
 80058ae:	e7eb      	b.n	8005888 <_svfiprintf_r+0x1c0>
 80058b0:	080067a0 	.word	0x080067a0
 80058b4:	080067aa 	.word	0x080067aa
 80058b8:	00000000 	.word	0x00000000
 80058bc:	08005615 	.word	0x08005615
 80058c0:	080067a6 	.word	0x080067a6

080058c4 <_sungetc_r>:
 80058c4:	b538      	push	{r3, r4, r5, lr}
 80058c6:	1c4b      	adds	r3, r1, #1
 80058c8:	4614      	mov	r4, r2
 80058ca:	d103      	bne.n	80058d4 <_sungetc_r+0x10>
 80058cc:	f04f 35ff 	mov.w	r5, #4294967295
 80058d0:	4628      	mov	r0, r5
 80058d2:	bd38      	pop	{r3, r4, r5, pc}
 80058d4:	8993      	ldrh	r3, [r2, #12]
 80058d6:	f023 0320 	bic.w	r3, r3, #32
 80058da:	8193      	strh	r3, [r2, #12]
 80058dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058de:	6852      	ldr	r2, [r2, #4]
 80058e0:	b2cd      	uxtb	r5, r1
 80058e2:	b18b      	cbz	r3, 8005908 <_sungetc_r+0x44>
 80058e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80058e6:	4293      	cmp	r3, r2
 80058e8:	dd08      	ble.n	80058fc <_sungetc_r+0x38>
 80058ea:	6823      	ldr	r3, [r4, #0]
 80058ec:	1e5a      	subs	r2, r3, #1
 80058ee:	6022      	str	r2, [r4, #0]
 80058f0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80058f4:	6863      	ldr	r3, [r4, #4]
 80058f6:	3301      	adds	r3, #1
 80058f8:	6063      	str	r3, [r4, #4]
 80058fa:	e7e9      	b.n	80058d0 <_sungetc_r+0xc>
 80058fc:	4621      	mov	r1, r4
 80058fe:	f000 fcca 	bl	8006296 <__submore>
 8005902:	2800      	cmp	r0, #0
 8005904:	d0f1      	beq.n	80058ea <_sungetc_r+0x26>
 8005906:	e7e1      	b.n	80058cc <_sungetc_r+0x8>
 8005908:	6921      	ldr	r1, [r4, #16]
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	b151      	cbz	r1, 8005924 <_sungetc_r+0x60>
 800590e:	4299      	cmp	r1, r3
 8005910:	d208      	bcs.n	8005924 <_sungetc_r+0x60>
 8005912:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005916:	42a9      	cmp	r1, r5
 8005918:	d104      	bne.n	8005924 <_sungetc_r+0x60>
 800591a:	3b01      	subs	r3, #1
 800591c:	3201      	adds	r2, #1
 800591e:	6023      	str	r3, [r4, #0]
 8005920:	6062      	str	r2, [r4, #4]
 8005922:	e7d5      	b.n	80058d0 <_sungetc_r+0xc>
 8005924:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800592c:	6363      	str	r3, [r4, #52]	; 0x34
 800592e:	2303      	movs	r3, #3
 8005930:	63a3      	str	r3, [r4, #56]	; 0x38
 8005932:	4623      	mov	r3, r4
 8005934:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005938:	6023      	str	r3, [r4, #0]
 800593a:	2301      	movs	r3, #1
 800593c:	e7dc      	b.n	80058f8 <_sungetc_r+0x34>

0800593e <__ssrefill_r>:
 800593e:	b510      	push	{r4, lr}
 8005940:	460c      	mov	r4, r1
 8005942:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005944:	b169      	cbz	r1, 8005962 <__ssrefill_r+0x24>
 8005946:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800594a:	4299      	cmp	r1, r3
 800594c:	d001      	beq.n	8005952 <__ssrefill_r+0x14>
 800594e:	f7ff fd69 	bl	8005424 <_free_r>
 8005952:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005954:	6063      	str	r3, [r4, #4]
 8005956:	2000      	movs	r0, #0
 8005958:	6360      	str	r0, [r4, #52]	; 0x34
 800595a:	b113      	cbz	r3, 8005962 <__ssrefill_r+0x24>
 800595c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800595e:	6023      	str	r3, [r4, #0]
 8005960:	bd10      	pop	{r4, pc}
 8005962:	6923      	ldr	r3, [r4, #16]
 8005964:	6023      	str	r3, [r4, #0]
 8005966:	2300      	movs	r3, #0
 8005968:	6063      	str	r3, [r4, #4]
 800596a:	89a3      	ldrh	r3, [r4, #12]
 800596c:	f043 0320 	orr.w	r3, r3, #32
 8005970:	81a3      	strh	r3, [r4, #12]
 8005972:	f04f 30ff 	mov.w	r0, #4294967295
 8005976:	e7f3      	b.n	8005960 <__ssrefill_r+0x22>

08005978 <__ssvfiscanf_r>:
 8005978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800597c:	460c      	mov	r4, r1
 800597e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005982:	2100      	movs	r1, #0
 8005984:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005988:	49a6      	ldr	r1, [pc, #664]	; (8005c24 <__ssvfiscanf_r+0x2ac>)
 800598a:	91a0      	str	r1, [sp, #640]	; 0x280
 800598c:	f10d 0804 	add.w	r8, sp, #4
 8005990:	49a5      	ldr	r1, [pc, #660]	; (8005c28 <__ssvfiscanf_r+0x2b0>)
 8005992:	4fa6      	ldr	r7, [pc, #664]	; (8005c2c <__ssvfiscanf_r+0x2b4>)
 8005994:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005c30 <__ssvfiscanf_r+0x2b8>
 8005998:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800599c:	4606      	mov	r6, r0
 800599e:	91a1      	str	r1, [sp, #644]	; 0x284
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	7813      	ldrb	r3, [r2, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 815a 	beq.w	8005c5e <__ssvfiscanf_r+0x2e6>
 80059aa:	5cf9      	ldrb	r1, [r7, r3]
 80059ac:	f011 0108 	ands.w	r1, r1, #8
 80059b0:	f102 0501 	add.w	r5, r2, #1
 80059b4:	d019      	beq.n	80059ea <__ssvfiscanf_r+0x72>
 80059b6:	6863      	ldr	r3, [r4, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	dd0f      	ble.n	80059dc <__ssvfiscanf_r+0x64>
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	781a      	ldrb	r2, [r3, #0]
 80059c0:	5cba      	ldrb	r2, [r7, r2]
 80059c2:	0712      	lsls	r2, r2, #28
 80059c4:	d401      	bmi.n	80059ca <__ssvfiscanf_r+0x52>
 80059c6:	462a      	mov	r2, r5
 80059c8:	e7eb      	b.n	80059a2 <__ssvfiscanf_r+0x2a>
 80059ca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80059cc:	3201      	adds	r2, #1
 80059ce:	9245      	str	r2, [sp, #276]	; 0x114
 80059d0:	6862      	ldr	r2, [r4, #4]
 80059d2:	3301      	adds	r3, #1
 80059d4:	3a01      	subs	r2, #1
 80059d6:	6062      	str	r2, [r4, #4]
 80059d8:	6023      	str	r3, [r4, #0]
 80059da:	e7ec      	b.n	80059b6 <__ssvfiscanf_r+0x3e>
 80059dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80059de:	4621      	mov	r1, r4
 80059e0:	4630      	mov	r0, r6
 80059e2:	4798      	blx	r3
 80059e4:	2800      	cmp	r0, #0
 80059e6:	d0e9      	beq.n	80059bc <__ssvfiscanf_r+0x44>
 80059e8:	e7ed      	b.n	80059c6 <__ssvfiscanf_r+0x4e>
 80059ea:	2b25      	cmp	r3, #37	; 0x25
 80059ec:	d012      	beq.n	8005a14 <__ssvfiscanf_r+0x9c>
 80059ee:	469a      	mov	sl, r3
 80059f0:	6863      	ldr	r3, [r4, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f340 8091 	ble.w	8005b1a <__ssvfiscanf_r+0x1a2>
 80059f8:	6822      	ldr	r2, [r4, #0]
 80059fa:	7813      	ldrb	r3, [r2, #0]
 80059fc:	4553      	cmp	r3, sl
 80059fe:	f040 812e 	bne.w	8005c5e <__ssvfiscanf_r+0x2e6>
 8005a02:	6863      	ldr	r3, [r4, #4]
 8005a04:	3b01      	subs	r3, #1
 8005a06:	6063      	str	r3, [r4, #4]
 8005a08:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005a0a:	3201      	adds	r2, #1
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	6022      	str	r2, [r4, #0]
 8005a10:	9345      	str	r3, [sp, #276]	; 0x114
 8005a12:	e7d8      	b.n	80059c6 <__ssvfiscanf_r+0x4e>
 8005a14:	9141      	str	r1, [sp, #260]	; 0x104
 8005a16:	9143      	str	r1, [sp, #268]	; 0x10c
 8005a18:	7853      	ldrb	r3, [r2, #1]
 8005a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a1c:	bf02      	ittt	eq
 8005a1e:	2310      	moveq	r3, #16
 8005a20:	1c95      	addeq	r5, r2, #2
 8005a22:	9341      	streq	r3, [sp, #260]	; 0x104
 8005a24:	220a      	movs	r2, #10
 8005a26:	46aa      	mov	sl, r5
 8005a28:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005a2c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005a30:	2b09      	cmp	r3, #9
 8005a32:	d91c      	bls.n	8005a6e <__ssvfiscanf_r+0xf6>
 8005a34:	487e      	ldr	r0, [pc, #504]	; (8005c30 <__ssvfiscanf_r+0x2b8>)
 8005a36:	2203      	movs	r2, #3
 8005a38:	f7fa fbaa 	bl	8000190 <memchr>
 8005a3c:	b138      	cbz	r0, 8005a4e <__ssvfiscanf_r+0xd6>
 8005a3e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005a40:	eba0 0009 	sub.w	r0, r0, r9
 8005a44:	2301      	movs	r3, #1
 8005a46:	4083      	lsls	r3, r0
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	9341      	str	r3, [sp, #260]	; 0x104
 8005a4c:	4655      	mov	r5, sl
 8005a4e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005a52:	2b78      	cmp	r3, #120	; 0x78
 8005a54:	d806      	bhi.n	8005a64 <__ssvfiscanf_r+0xec>
 8005a56:	2b57      	cmp	r3, #87	; 0x57
 8005a58:	d810      	bhi.n	8005a7c <__ssvfiscanf_r+0x104>
 8005a5a:	2b25      	cmp	r3, #37	; 0x25
 8005a5c:	d0c7      	beq.n	80059ee <__ssvfiscanf_r+0x76>
 8005a5e:	d857      	bhi.n	8005b10 <__ssvfiscanf_r+0x198>
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d065      	beq.n	8005b30 <__ssvfiscanf_r+0x1b8>
 8005a64:	2303      	movs	r3, #3
 8005a66:	9347      	str	r3, [sp, #284]	; 0x11c
 8005a68:	230a      	movs	r3, #10
 8005a6a:	9342      	str	r3, [sp, #264]	; 0x108
 8005a6c:	e076      	b.n	8005b5c <__ssvfiscanf_r+0x1e4>
 8005a6e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005a70:	fb02 1103 	mla	r1, r2, r3, r1
 8005a74:	3930      	subs	r1, #48	; 0x30
 8005a76:	9143      	str	r1, [sp, #268]	; 0x10c
 8005a78:	4655      	mov	r5, sl
 8005a7a:	e7d4      	b.n	8005a26 <__ssvfiscanf_r+0xae>
 8005a7c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005a80:	2a20      	cmp	r2, #32
 8005a82:	d8ef      	bhi.n	8005a64 <__ssvfiscanf_r+0xec>
 8005a84:	a101      	add	r1, pc, #4	; (adr r1, 8005a8c <__ssvfiscanf_r+0x114>)
 8005a86:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005a8a:	bf00      	nop
 8005a8c:	08005b3f 	.word	0x08005b3f
 8005a90:	08005a65 	.word	0x08005a65
 8005a94:	08005a65 	.word	0x08005a65
 8005a98:	08005b9d 	.word	0x08005b9d
 8005a9c:	08005a65 	.word	0x08005a65
 8005aa0:	08005a65 	.word	0x08005a65
 8005aa4:	08005a65 	.word	0x08005a65
 8005aa8:	08005a65 	.word	0x08005a65
 8005aac:	08005a65 	.word	0x08005a65
 8005ab0:	08005a65 	.word	0x08005a65
 8005ab4:	08005a65 	.word	0x08005a65
 8005ab8:	08005bb3 	.word	0x08005bb3
 8005abc:	08005b99 	.word	0x08005b99
 8005ac0:	08005b17 	.word	0x08005b17
 8005ac4:	08005b17 	.word	0x08005b17
 8005ac8:	08005b17 	.word	0x08005b17
 8005acc:	08005a65 	.word	0x08005a65
 8005ad0:	08005b55 	.word	0x08005b55
 8005ad4:	08005a65 	.word	0x08005a65
 8005ad8:	08005a65 	.word	0x08005a65
 8005adc:	08005a65 	.word	0x08005a65
 8005ae0:	08005a65 	.word	0x08005a65
 8005ae4:	08005bc3 	.word	0x08005bc3
 8005ae8:	08005b91 	.word	0x08005b91
 8005aec:	08005b37 	.word	0x08005b37
 8005af0:	08005a65 	.word	0x08005a65
 8005af4:	08005a65 	.word	0x08005a65
 8005af8:	08005bbf 	.word	0x08005bbf
 8005afc:	08005a65 	.word	0x08005a65
 8005b00:	08005b99 	.word	0x08005b99
 8005b04:	08005a65 	.word	0x08005a65
 8005b08:	08005a65 	.word	0x08005a65
 8005b0c:	08005b3f 	.word	0x08005b3f
 8005b10:	3b45      	subs	r3, #69	; 0x45
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d8a6      	bhi.n	8005a64 <__ssvfiscanf_r+0xec>
 8005b16:	2305      	movs	r3, #5
 8005b18:	e01f      	b.n	8005b5a <__ssvfiscanf_r+0x1e2>
 8005b1a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	4630      	mov	r0, r6
 8005b20:	4798      	blx	r3
 8005b22:	2800      	cmp	r0, #0
 8005b24:	f43f af68 	beq.w	80059f8 <__ssvfiscanf_r+0x80>
 8005b28:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	f040 808d 	bne.w	8005c4a <__ssvfiscanf_r+0x2d2>
 8005b30:	f04f 30ff 	mov.w	r0, #4294967295
 8005b34:	e08f      	b.n	8005c56 <__ssvfiscanf_r+0x2de>
 8005b36:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005b38:	f042 0220 	orr.w	r2, r2, #32
 8005b3c:	9241      	str	r2, [sp, #260]	; 0x104
 8005b3e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b44:	9241      	str	r2, [sp, #260]	; 0x104
 8005b46:	2210      	movs	r2, #16
 8005b48:	2b6f      	cmp	r3, #111	; 0x6f
 8005b4a:	9242      	str	r2, [sp, #264]	; 0x108
 8005b4c:	bf34      	ite	cc
 8005b4e:	2303      	movcc	r3, #3
 8005b50:	2304      	movcs	r3, #4
 8005b52:	e002      	b.n	8005b5a <__ssvfiscanf_r+0x1e2>
 8005b54:	2300      	movs	r3, #0
 8005b56:	9342      	str	r3, [sp, #264]	; 0x108
 8005b58:	2303      	movs	r3, #3
 8005b5a:	9347      	str	r3, [sp, #284]	; 0x11c
 8005b5c:	6863      	ldr	r3, [r4, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	dd3d      	ble.n	8005bde <__ssvfiscanf_r+0x266>
 8005b62:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005b64:	0659      	lsls	r1, r3, #25
 8005b66:	d404      	bmi.n	8005b72 <__ssvfiscanf_r+0x1fa>
 8005b68:	6823      	ldr	r3, [r4, #0]
 8005b6a:	781a      	ldrb	r2, [r3, #0]
 8005b6c:	5cba      	ldrb	r2, [r7, r2]
 8005b6e:	0712      	lsls	r2, r2, #28
 8005b70:	d43c      	bmi.n	8005bec <__ssvfiscanf_r+0x274>
 8005b72:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	dc4b      	bgt.n	8005c10 <__ssvfiscanf_r+0x298>
 8005b78:	466b      	mov	r3, sp
 8005b7a:	4622      	mov	r2, r4
 8005b7c:	a941      	add	r1, sp, #260	; 0x104
 8005b7e:	4630      	mov	r0, r6
 8005b80:	f000 fa02 	bl	8005f88 <_scanf_chars>
 8005b84:	2801      	cmp	r0, #1
 8005b86:	d06a      	beq.n	8005c5e <__ssvfiscanf_r+0x2e6>
 8005b88:	2802      	cmp	r0, #2
 8005b8a:	f47f af1c 	bne.w	80059c6 <__ssvfiscanf_r+0x4e>
 8005b8e:	e7cb      	b.n	8005b28 <__ssvfiscanf_r+0x1b0>
 8005b90:	2308      	movs	r3, #8
 8005b92:	9342      	str	r3, [sp, #264]	; 0x108
 8005b94:	2304      	movs	r3, #4
 8005b96:	e7e0      	b.n	8005b5a <__ssvfiscanf_r+0x1e2>
 8005b98:	220a      	movs	r2, #10
 8005b9a:	e7d5      	b.n	8005b48 <__ssvfiscanf_r+0x1d0>
 8005b9c:	4629      	mov	r1, r5
 8005b9e:	4640      	mov	r0, r8
 8005ba0:	f000 fb40 	bl	8006224 <__sccl>
 8005ba4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005baa:	9341      	str	r3, [sp, #260]	; 0x104
 8005bac:	4605      	mov	r5, r0
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e7d3      	b.n	8005b5a <__ssvfiscanf_r+0x1e2>
 8005bb2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bb8:	9341      	str	r3, [sp, #260]	; 0x104
 8005bba:	2300      	movs	r3, #0
 8005bbc:	e7cd      	b.n	8005b5a <__ssvfiscanf_r+0x1e2>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	e7cb      	b.n	8005b5a <__ssvfiscanf_r+0x1e2>
 8005bc2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005bc4:	06c3      	lsls	r3, r0, #27
 8005bc6:	f53f aefe 	bmi.w	80059c6 <__ssvfiscanf_r+0x4e>
 8005bca:	9b00      	ldr	r3, [sp, #0]
 8005bcc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005bce:	1d19      	adds	r1, r3, #4
 8005bd0:	9100      	str	r1, [sp, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	07c0      	lsls	r0, r0, #31
 8005bd6:	bf4c      	ite	mi
 8005bd8:	801a      	strhmi	r2, [r3, #0]
 8005bda:	601a      	strpl	r2, [r3, #0]
 8005bdc:	e6f3      	b.n	80059c6 <__ssvfiscanf_r+0x4e>
 8005bde:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005be0:	4621      	mov	r1, r4
 8005be2:	4630      	mov	r0, r6
 8005be4:	4798      	blx	r3
 8005be6:	2800      	cmp	r0, #0
 8005be8:	d0bb      	beq.n	8005b62 <__ssvfiscanf_r+0x1ea>
 8005bea:	e79d      	b.n	8005b28 <__ssvfiscanf_r+0x1b0>
 8005bec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005bee:	3201      	adds	r2, #1
 8005bf0:	9245      	str	r2, [sp, #276]	; 0x114
 8005bf2:	6862      	ldr	r2, [r4, #4]
 8005bf4:	3a01      	subs	r2, #1
 8005bf6:	2a00      	cmp	r2, #0
 8005bf8:	6062      	str	r2, [r4, #4]
 8005bfa:	dd02      	ble.n	8005c02 <__ssvfiscanf_r+0x28a>
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	6023      	str	r3, [r4, #0]
 8005c00:	e7b2      	b.n	8005b68 <__ssvfiscanf_r+0x1f0>
 8005c02:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005c04:	4621      	mov	r1, r4
 8005c06:	4630      	mov	r0, r6
 8005c08:	4798      	blx	r3
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	d0ac      	beq.n	8005b68 <__ssvfiscanf_r+0x1f0>
 8005c0e:	e78b      	b.n	8005b28 <__ssvfiscanf_r+0x1b0>
 8005c10:	2b04      	cmp	r3, #4
 8005c12:	dc0f      	bgt.n	8005c34 <__ssvfiscanf_r+0x2bc>
 8005c14:	466b      	mov	r3, sp
 8005c16:	4622      	mov	r2, r4
 8005c18:	a941      	add	r1, sp, #260	; 0x104
 8005c1a:	4630      	mov	r0, r6
 8005c1c:	f000 fa0e 	bl	800603c <_scanf_i>
 8005c20:	e7b0      	b.n	8005b84 <__ssvfiscanf_r+0x20c>
 8005c22:	bf00      	nop
 8005c24:	080058c5 	.word	0x080058c5
 8005c28:	0800593f 	.word	0x0800593f
 8005c2c:	080067ef 	.word	0x080067ef
 8005c30:	080067a6 	.word	0x080067a6
 8005c34:	4b0b      	ldr	r3, [pc, #44]	; (8005c64 <__ssvfiscanf_r+0x2ec>)
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f43f aec5 	beq.w	80059c6 <__ssvfiscanf_r+0x4e>
 8005c3c:	466b      	mov	r3, sp
 8005c3e:	4622      	mov	r2, r4
 8005c40:	a941      	add	r1, sp, #260	; 0x104
 8005c42:	4630      	mov	r0, r6
 8005c44:	f3af 8000 	nop.w
 8005c48:	e79c      	b.n	8005b84 <__ssvfiscanf_r+0x20c>
 8005c4a:	89a3      	ldrh	r3, [r4, #12]
 8005c4c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005c50:	bf18      	it	ne
 8005c52:	f04f 30ff 	movne.w	r0, #4294967295
 8005c56:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8005c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c5e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005c60:	e7f9      	b.n	8005c56 <__ssvfiscanf_r+0x2de>
 8005c62:	bf00      	nop
 8005c64:	00000000 	.word	0x00000000

08005c68 <_printf_common>:
 8005c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c6c:	4616      	mov	r6, r2
 8005c6e:	4699      	mov	r9, r3
 8005c70:	688a      	ldr	r2, [r1, #8]
 8005c72:	690b      	ldr	r3, [r1, #16]
 8005c74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	bfb8      	it	lt
 8005c7c:	4613      	movlt	r3, r2
 8005c7e:	6033      	str	r3, [r6, #0]
 8005c80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c84:	4607      	mov	r7, r0
 8005c86:	460c      	mov	r4, r1
 8005c88:	b10a      	cbz	r2, 8005c8e <_printf_common+0x26>
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	6033      	str	r3, [r6, #0]
 8005c8e:	6823      	ldr	r3, [r4, #0]
 8005c90:	0699      	lsls	r1, r3, #26
 8005c92:	bf42      	ittt	mi
 8005c94:	6833      	ldrmi	r3, [r6, #0]
 8005c96:	3302      	addmi	r3, #2
 8005c98:	6033      	strmi	r3, [r6, #0]
 8005c9a:	6825      	ldr	r5, [r4, #0]
 8005c9c:	f015 0506 	ands.w	r5, r5, #6
 8005ca0:	d106      	bne.n	8005cb0 <_printf_common+0x48>
 8005ca2:	f104 0a19 	add.w	sl, r4, #25
 8005ca6:	68e3      	ldr	r3, [r4, #12]
 8005ca8:	6832      	ldr	r2, [r6, #0]
 8005caa:	1a9b      	subs	r3, r3, r2
 8005cac:	42ab      	cmp	r3, r5
 8005cae:	dc26      	bgt.n	8005cfe <_printf_common+0x96>
 8005cb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cb4:	1e13      	subs	r3, r2, #0
 8005cb6:	6822      	ldr	r2, [r4, #0]
 8005cb8:	bf18      	it	ne
 8005cba:	2301      	movne	r3, #1
 8005cbc:	0692      	lsls	r2, r2, #26
 8005cbe:	d42b      	bmi.n	8005d18 <_printf_common+0xb0>
 8005cc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cc4:	4649      	mov	r1, r9
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	47c0      	blx	r8
 8005cca:	3001      	adds	r0, #1
 8005ccc:	d01e      	beq.n	8005d0c <_printf_common+0xa4>
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	6922      	ldr	r2, [r4, #16]
 8005cd2:	f003 0306 	and.w	r3, r3, #6
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	bf02      	ittt	eq
 8005cda:	68e5      	ldreq	r5, [r4, #12]
 8005cdc:	6833      	ldreq	r3, [r6, #0]
 8005cde:	1aed      	subeq	r5, r5, r3
 8005ce0:	68a3      	ldr	r3, [r4, #8]
 8005ce2:	bf0c      	ite	eq
 8005ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ce8:	2500      	movne	r5, #0
 8005cea:	4293      	cmp	r3, r2
 8005cec:	bfc4      	itt	gt
 8005cee:	1a9b      	subgt	r3, r3, r2
 8005cf0:	18ed      	addgt	r5, r5, r3
 8005cf2:	2600      	movs	r6, #0
 8005cf4:	341a      	adds	r4, #26
 8005cf6:	42b5      	cmp	r5, r6
 8005cf8:	d11a      	bne.n	8005d30 <_printf_common+0xc8>
 8005cfa:	2000      	movs	r0, #0
 8005cfc:	e008      	b.n	8005d10 <_printf_common+0xa8>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	4652      	mov	r2, sl
 8005d02:	4649      	mov	r1, r9
 8005d04:	4638      	mov	r0, r7
 8005d06:	47c0      	blx	r8
 8005d08:	3001      	adds	r0, #1
 8005d0a:	d103      	bne.n	8005d14 <_printf_common+0xac>
 8005d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d14:	3501      	adds	r5, #1
 8005d16:	e7c6      	b.n	8005ca6 <_printf_common+0x3e>
 8005d18:	18e1      	adds	r1, r4, r3
 8005d1a:	1c5a      	adds	r2, r3, #1
 8005d1c:	2030      	movs	r0, #48	; 0x30
 8005d1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d22:	4422      	add	r2, r4
 8005d24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d2c:	3302      	adds	r3, #2
 8005d2e:	e7c7      	b.n	8005cc0 <_printf_common+0x58>
 8005d30:	2301      	movs	r3, #1
 8005d32:	4622      	mov	r2, r4
 8005d34:	4649      	mov	r1, r9
 8005d36:	4638      	mov	r0, r7
 8005d38:	47c0      	blx	r8
 8005d3a:	3001      	adds	r0, #1
 8005d3c:	d0e6      	beq.n	8005d0c <_printf_common+0xa4>
 8005d3e:	3601      	adds	r6, #1
 8005d40:	e7d9      	b.n	8005cf6 <_printf_common+0x8e>
	...

08005d44 <_printf_i>:
 8005d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d48:	7e0f      	ldrb	r7, [r1, #24]
 8005d4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005d4c:	2f78      	cmp	r7, #120	; 0x78
 8005d4e:	4691      	mov	r9, r2
 8005d50:	4680      	mov	r8, r0
 8005d52:	460c      	mov	r4, r1
 8005d54:	469a      	mov	sl, r3
 8005d56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005d5a:	d807      	bhi.n	8005d6c <_printf_i+0x28>
 8005d5c:	2f62      	cmp	r7, #98	; 0x62
 8005d5e:	d80a      	bhi.n	8005d76 <_printf_i+0x32>
 8005d60:	2f00      	cmp	r7, #0
 8005d62:	f000 80d4 	beq.w	8005f0e <_printf_i+0x1ca>
 8005d66:	2f58      	cmp	r7, #88	; 0x58
 8005d68:	f000 80c0 	beq.w	8005eec <_printf_i+0x1a8>
 8005d6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d74:	e03a      	b.n	8005dec <_printf_i+0xa8>
 8005d76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d7a:	2b15      	cmp	r3, #21
 8005d7c:	d8f6      	bhi.n	8005d6c <_printf_i+0x28>
 8005d7e:	a101      	add	r1, pc, #4	; (adr r1, 8005d84 <_printf_i+0x40>)
 8005d80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d84:	08005ddd 	.word	0x08005ddd
 8005d88:	08005df1 	.word	0x08005df1
 8005d8c:	08005d6d 	.word	0x08005d6d
 8005d90:	08005d6d 	.word	0x08005d6d
 8005d94:	08005d6d 	.word	0x08005d6d
 8005d98:	08005d6d 	.word	0x08005d6d
 8005d9c:	08005df1 	.word	0x08005df1
 8005da0:	08005d6d 	.word	0x08005d6d
 8005da4:	08005d6d 	.word	0x08005d6d
 8005da8:	08005d6d 	.word	0x08005d6d
 8005dac:	08005d6d 	.word	0x08005d6d
 8005db0:	08005ef5 	.word	0x08005ef5
 8005db4:	08005e1d 	.word	0x08005e1d
 8005db8:	08005eaf 	.word	0x08005eaf
 8005dbc:	08005d6d 	.word	0x08005d6d
 8005dc0:	08005d6d 	.word	0x08005d6d
 8005dc4:	08005f17 	.word	0x08005f17
 8005dc8:	08005d6d 	.word	0x08005d6d
 8005dcc:	08005e1d 	.word	0x08005e1d
 8005dd0:	08005d6d 	.word	0x08005d6d
 8005dd4:	08005d6d 	.word	0x08005d6d
 8005dd8:	08005eb7 	.word	0x08005eb7
 8005ddc:	682b      	ldr	r3, [r5, #0]
 8005dde:	1d1a      	adds	r2, r3, #4
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	602a      	str	r2, [r5, #0]
 8005de4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005de8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dec:	2301      	movs	r3, #1
 8005dee:	e09f      	b.n	8005f30 <_printf_i+0x1ec>
 8005df0:	6820      	ldr	r0, [r4, #0]
 8005df2:	682b      	ldr	r3, [r5, #0]
 8005df4:	0607      	lsls	r7, r0, #24
 8005df6:	f103 0104 	add.w	r1, r3, #4
 8005dfa:	6029      	str	r1, [r5, #0]
 8005dfc:	d501      	bpl.n	8005e02 <_printf_i+0xbe>
 8005dfe:	681e      	ldr	r6, [r3, #0]
 8005e00:	e003      	b.n	8005e0a <_printf_i+0xc6>
 8005e02:	0646      	lsls	r6, r0, #25
 8005e04:	d5fb      	bpl.n	8005dfe <_printf_i+0xba>
 8005e06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005e0a:	2e00      	cmp	r6, #0
 8005e0c:	da03      	bge.n	8005e16 <_printf_i+0xd2>
 8005e0e:	232d      	movs	r3, #45	; 0x2d
 8005e10:	4276      	negs	r6, r6
 8005e12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e16:	485a      	ldr	r0, [pc, #360]	; (8005f80 <_printf_i+0x23c>)
 8005e18:	230a      	movs	r3, #10
 8005e1a:	e012      	b.n	8005e42 <_printf_i+0xfe>
 8005e1c:	682b      	ldr	r3, [r5, #0]
 8005e1e:	6820      	ldr	r0, [r4, #0]
 8005e20:	1d19      	adds	r1, r3, #4
 8005e22:	6029      	str	r1, [r5, #0]
 8005e24:	0605      	lsls	r5, r0, #24
 8005e26:	d501      	bpl.n	8005e2c <_printf_i+0xe8>
 8005e28:	681e      	ldr	r6, [r3, #0]
 8005e2a:	e002      	b.n	8005e32 <_printf_i+0xee>
 8005e2c:	0641      	lsls	r1, r0, #25
 8005e2e:	d5fb      	bpl.n	8005e28 <_printf_i+0xe4>
 8005e30:	881e      	ldrh	r6, [r3, #0]
 8005e32:	4853      	ldr	r0, [pc, #332]	; (8005f80 <_printf_i+0x23c>)
 8005e34:	2f6f      	cmp	r7, #111	; 0x6f
 8005e36:	bf0c      	ite	eq
 8005e38:	2308      	moveq	r3, #8
 8005e3a:	230a      	movne	r3, #10
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e42:	6865      	ldr	r5, [r4, #4]
 8005e44:	60a5      	str	r5, [r4, #8]
 8005e46:	2d00      	cmp	r5, #0
 8005e48:	bfa2      	ittt	ge
 8005e4a:	6821      	ldrge	r1, [r4, #0]
 8005e4c:	f021 0104 	bicge.w	r1, r1, #4
 8005e50:	6021      	strge	r1, [r4, #0]
 8005e52:	b90e      	cbnz	r6, 8005e58 <_printf_i+0x114>
 8005e54:	2d00      	cmp	r5, #0
 8005e56:	d04b      	beq.n	8005ef0 <_printf_i+0x1ac>
 8005e58:	4615      	mov	r5, r2
 8005e5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005e5e:	fb03 6711 	mls	r7, r3, r1, r6
 8005e62:	5dc7      	ldrb	r7, [r0, r7]
 8005e64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005e68:	4637      	mov	r7, r6
 8005e6a:	42bb      	cmp	r3, r7
 8005e6c:	460e      	mov	r6, r1
 8005e6e:	d9f4      	bls.n	8005e5a <_printf_i+0x116>
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	d10b      	bne.n	8005e8c <_printf_i+0x148>
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	07de      	lsls	r6, r3, #31
 8005e78:	d508      	bpl.n	8005e8c <_printf_i+0x148>
 8005e7a:	6923      	ldr	r3, [r4, #16]
 8005e7c:	6861      	ldr	r1, [r4, #4]
 8005e7e:	4299      	cmp	r1, r3
 8005e80:	bfde      	ittt	le
 8005e82:	2330      	movle	r3, #48	; 0x30
 8005e84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e8c:	1b52      	subs	r2, r2, r5
 8005e8e:	6122      	str	r2, [r4, #16]
 8005e90:	f8cd a000 	str.w	sl, [sp]
 8005e94:	464b      	mov	r3, r9
 8005e96:	aa03      	add	r2, sp, #12
 8005e98:	4621      	mov	r1, r4
 8005e9a:	4640      	mov	r0, r8
 8005e9c:	f7ff fee4 	bl	8005c68 <_printf_common>
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d14a      	bne.n	8005f3a <_printf_i+0x1f6>
 8005ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea8:	b004      	add	sp, #16
 8005eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eae:	6823      	ldr	r3, [r4, #0]
 8005eb0:	f043 0320 	orr.w	r3, r3, #32
 8005eb4:	6023      	str	r3, [r4, #0]
 8005eb6:	4833      	ldr	r0, [pc, #204]	; (8005f84 <_printf_i+0x240>)
 8005eb8:	2778      	movs	r7, #120	; 0x78
 8005eba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ebe:	6823      	ldr	r3, [r4, #0]
 8005ec0:	6829      	ldr	r1, [r5, #0]
 8005ec2:	061f      	lsls	r7, r3, #24
 8005ec4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005ec8:	d402      	bmi.n	8005ed0 <_printf_i+0x18c>
 8005eca:	065f      	lsls	r7, r3, #25
 8005ecc:	bf48      	it	mi
 8005ece:	b2b6      	uxthmi	r6, r6
 8005ed0:	07df      	lsls	r7, r3, #31
 8005ed2:	bf48      	it	mi
 8005ed4:	f043 0320 	orrmi.w	r3, r3, #32
 8005ed8:	6029      	str	r1, [r5, #0]
 8005eda:	bf48      	it	mi
 8005edc:	6023      	strmi	r3, [r4, #0]
 8005ede:	b91e      	cbnz	r6, 8005ee8 <_printf_i+0x1a4>
 8005ee0:	6823      	ldr	r3, [r4, #0]
 8005ee2:	f023 0320 	bic.w	r3, r3, #32
 8005ee6:	6023      	str	r3, [r4, #0]
 8005ee8:	2310      	movs	r3, #16
 8005eea:	e7a7      	b.n	8005e3c <_printf_i+0xf8>
 8005eec:	4824      	ldr	r0, [pc, #144]	; (8005f80 <_printf_i+0x23c>)
 8005eee:	e7e4      	b.n	8005eba <_printf_i+0x176>
 8005ef0:	4615      	mov	r5, r2
 8005ef2:	e7bd      	b.n	8005e70 <_printf_i+0x12c>
 8005ef4:	682b      	ldr	r3, [r5, #0]
 8005ef6:	6826      	ldr	r6, [r4, #0]
 8005ef8:	6961      	ldr	r1, [r4, #20]
 8005efa:	1d18      	adds	r0, r3, #4
 8005efc:	6028      	str	r0, [r5, #0]
 8005efe:	0635      	lsls	r5, r6, #24
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	d501      	bpl.n	8005f08 <_printf_i+0x1c4>
 8005f04:	6019      	str	r1, [r3, #0]
 8005f06:	e002      	b.n	8005f0e <_printf_i+0x1ca>
 8005f08:	0670      	lsls	r0, r6, #25
 8005f0a:	d5fb      	bpl.n	8005f04 <_printf_i+0x1c0>
 8005f0c:	8019      	strh	r1, [r3, #0]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	6123      	str	r3, [r4, #16]
 8005f12:	4615      	mov	r5, r2
 8005f14:	e7bc      	b.n	8005e90 <_printf_i+0x14c>
 8005f16:	682b      	ldr	r3, [r5, #0]
 8005f18:	1d1a      	adds	r2, r3, #4
 8005f1a:	602a      	str	r2, [r5, #0]
 8005f1c:	681d      	ldr	r5, [r3, #0]
 8005f1e:	6862      	ldr	r2, [r4, #4]
 8005f20:	2100      	movs	r1, #0
 8005f22:	4628      	mov	r0, r5
 8005f24:	f7fa f934 	bl	8000190 <memchr>
 8005f28:	b108      	cbz	r0, 8005f2e <_printf_i+0x1ea>
 8005f2a:	1b40      	subs	r0, r0, r5
 8005f2c:	6060      	str	r0, [r4, #4]
 8005f2e:	6863      	ldr	r3, [r4, #4]
 8005f30:	6123      	str	r3, [r4, #16]
 8005f32:	2300      	movs	r3, #0
 8005f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f38:	e7aa      	b.n	8005e90 <_printf_i+0x14c>
 8005f3a:	6923      	ldr	r3, [r4, #16]
 8005f3c:	462a      	mov	r2, r5
 8005f3e:	4649      	mov	r1, r9
 8005f40:	4640      	mov	r0, r8
 8005f42:	47d0      	blx	sl
 8005f44:	3001      	adds	r0, #1
 8005f46:	d0ad      	beq.n	8005ea4 <_printf_i+0x160>
 8005f48:	6823      	ldr	r3, [r4, #0]
 8005f4a:	079b      	lsls	r3, r3, #30
 8005f4c:	d413      	bmi.n	8005f76 <_printf_i+0x232>
 8005f4e:	68e0      	ldr	r0, [r4, #12]
 8005f50:	9b03      	ldr	r3, [sp, #12]
 8005f52:	4298      	cmp	r0, r3
 8005f54:	bfb8      	it	lt
 8005f56:	4618      	movlt	r0, r3
 8005f58:	e7a6      	b.n	8005ea8 <_printf_i+0x164>
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	4632      	mov	r2, r6
 8005f5e:	4649      	mov	r1, r9
 8005f60:	4640      	mov	r0, r8
 8005f62:	47d0      	blx	sl
 8005f64:	3001      	adds	r0, #1
 8005f66:	d09d      	beq.n	8005ea4 <_printf_i+0x160>
 8005f68:	3501      	adds	r5, #1
 8005f6a:	68e3      	ldr	r3, [r4, #12]
 8005f6c:	9903      	ldr	r1, [sp, #12]
 8005f6e:	1a5b      	subs	r3, r3, r1
 8005f70:	42ab      	cmp	r3, r5
 8005f72:	dcf2      	bgt.n	8005f5a <_printf_i+0x216>
 8005f74:	e7eb      	b.n	8005f4e <_printf_i+0x20a>
 8005f76:	2500      	movs	r5, #0
 8005f78:	f104 0619 	add.w	r6, r4, #25
 8005f7c:	e7f5      	b.n	8005f6a <_printf_i+0x226>
 8005f7e:	bf00      	nop
 8005f80:	080067b1 	.word	0x080067b1
 8005f84:	080067c2 	.word	0x080067c2

08005f88 <_scanf_chars>:
 8005f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f8c:	4615      	mov	r5, r2
 8005f8e:	688a      	ldr	r2, [r1, #8]
 8005f90:	4680      	mov	r8, r0
 8005f92:	460c      	mov	r4, r1
 8005f94:	b932      	cbnz	r2, 8005fa4 <_scanf_chars+0x1c>
 8005f96:	698a      	ldr	r2, [r1, #24]
 8005f98:	2a00      	cmp	r2, #0
 8005f9a:	bf0c      	ite	eq
 8005f9c:	2201      	moveq	r2, #1
 8005f9e:	f04f 32ff 	movne.w	r2, #4294967295
 8005fa2:	608a      	str	r2, [r1, #8]
 8005fa4:	6822      	ldr	r2, [r4, #0]
 8005fa6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8006038 <_scanf_chars+0xb0>
 8005faa:	06d1      	lsls	r1, r2, #27
 8005fac:	bf5f      	itttt	pl
 8005fae:	681a      	ldrpl	r2, [r3, #0]
 8005fb0:	1d11      	addpl	r1, r2, #4
 8005fb2:	6019      	strpl	r1, [r3, #0]
 8005fb4:	6816      	ldrpl	r6, [r2, #0]
 8005fb6:	2700      	movs	r7, #0
 8005fb8:	69a0      	ldr	r0, [r4, #24]
 8005fba:	b188      	cbz	r0, 8005fe0 <_scanf_chars+0x58>
 8005fbc:	2801      	cmp	r0, #1
 8005fbe:	d107      	bne.n	8005fd0 <_scanf_chars+0x48>
 8005fc0:	682a      	ldr	r2, [r5, #0]
 8005fc2:	7811      	ldrb	r1, [r2, #0]
 8005fc4:	6962      	ldr	r2, [r4, #20]
 8005fc6:	5c52      	ldrb	r2, [r2, r1]
 8005fc8:	b952      	cbnz	r2, 8005fe0 <_scanf_chars+0x58>
 8005fca:	2f00      	cmp	r7, #0
 8005fcc:	d031      	beq.n	8006032 <_scanf_chars+0xaa>
 8005fce:	e022      	b.n	8006016 <_scanf_chars+0x8e>
 8005fd0:	2802      	cmp	r0, #2
 8005fd2:	d120      	bne.n	8006016 <_scanf_chars+0x8e>
 8005fd4:	682b      	ldr	r3, [r5, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005fdc:	071b      	lsls	r3, r3, #28
 8005fde:	d41a      	bmi.n	8006016 <_scanf_chars+0x8e>
 8005fe0:	6823      	ldr	r3, [r4, #0]
 8005fe2:	06da      	lsls	r2, r3, #27
 8005fe4:	bf5e      	ittt	pl
 8005fe6:	682b      	ldrpl	r3, [r5, #0]
 8005fe8:	781b      	ldrbpl	r3, [r3, #0]
 8005fea:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005fee:	682a      	ldr	r2, [r5, #0]
 8005ff0:	686b      	ldr	r3, [r5, #4]
 8005ff2:	3201      	adds	r2, #1
 8005ff4:	602a      	str	r2, [r5, #0]
 8005ff6:	68a2      	ldr	r2, [r4, #8]
 8005ff8:	3b01      	subs	r3, #1
 8005ffa:	3a01      	subs	r2, #1
 8005ffc:	606b      	str	r3, [r5, #4]
 8005ffe:	3701      	adds	r7, #1
 8006000:	60a2      	str	r2, [r4, #8]
 8006002:	b142      	cbz	r2, 8006016 <_scanf_chars+0x8e>
 8006004:	2b00      	cmp	r3, #0
 8006006:	dcd7      	bgt.n	8005fb8 <_scanf_chars+0x30>
 8006008:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800600c:	4629      	mov	r1, r5
 800600e:	4640      	mov	r0, r8
 8006010:	4798      	blx	r3
 8006012:	2800      	cmp	r0, #0
 8006014:	d0d0      	beq.n	8005fb8 <_scanf_chars+0x30>
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	f013 0310 	ands.w	r3, r3, #16
 800601c:	d105      	bne.n	800602a <_scanf_chars+0xa2>
 800601e:	68e2      	ldr	r2, [r4, #12]
 8006020:	3201      	adds	r2, #1
 8006022:	60e2      	str	r2, [r4, #12]
 8006024:	69a2      	ldr	r2, [r4, #24]
 8006026:	b102      	cbz	r2, 800602a <_scanf_chars+0xa2>
 8006028:	7033      	strb	r3, [r6, #0]
 800602a:	6923      	ldr	r3, [r4, #16]
 800602c:	443b      	add	r3, r7
 800602e:	6123      	str	r3, [r4, #16]
 8006030:	2000      	movs	r0, #0
 8006032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006036:	bf00      	nop
 8006038:	080067ef 	.word	0x080067ef

0800603c <_scanf_i>:
 800603c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006040:	4698      	mov	r8, r3
 8006042:	4b74      	ldr	r3, [pc, #464]	; (8006214 <_scanf_i+0x1d8>)
 8006044:	460c      	mov	r4, r1
 8006046:	4682      	mov	sl, r0
 8006048:	4616      	mov	r6, r2
 800604a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800604e:	b087      	sub	sp, #28
 8006050:	ab03      	add	r3, sp, #12
 8006052:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006056:	4b70      	ldr	r3, [pc, #448]	; (8006218 <_scanf_i+0x1dc>)
 8006058:	69a1      	ldr	r1, [r4, #24]
 800605a:	4a70      	ldr	r2, [pc, #448]	; (800621c <_scanf_i+0x1e0>)
 800605c:	2903      	cmp	r1, #3
 800605e:	bf18      	it	ne
 8006060:	461a      	movne	r2, r3
 8006062:	68a3      	ldr	r3, [r4, #8]
 8006064:	9201      	str	r2, [sp, #4]
 8006066:	1e5a      	subs	r2, r3, #1
 8006068:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800606c:	bf88      	it	hi
 800606e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006072:	4627      	mov	r7, r4
 8006074:	bf82      	ittt	hi
 8006076:	eb03 0905 	addhi.w	r9, r3, r5
 800607a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800607e:	60a3      	strhi	r3, [r4, #8]
 8006080:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006084:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006088:	bf98      	it	ls
 800608a:	f04f 0900 	movls.w	r9, #0
 800608e:	6023      	str	r3, [r4, #0]
 8006090:	463d      	mov	r5, r7
 8006092:	f04f 0b00 	mov.w	fp, #0
 8006096:	6831      	ldr	r1, [r6, #0]
 8006098:	ab03      	add	r3, sp, #12
 800609a:	7809      	ldrb	r1, [r1, #0]
 800609c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80060a0:	2202      	movs	r2, #2
 80060a2:	f7fa f875 	bl	8000190 <memchr>
 80060a6:	b328      	cbz	r0, 80060f4 <_scanf_i+0xb8>
 80060a8:	f1bb 0f01 	cmp.w	fp, #1
 80060ac:	d159      	bne.n	8006162 <_scanf_i+0x126>
 80060ae:	6862      	ldr	r2, [r4, #4]
 80060b0:	b92a      	cbnz	r2, 80060be <_scanf_i+0x82>
 80060b2:	6822      	ldr	r2, [r4, #0]
 80060b4:	2308      	movs	r3, #8
 80060b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ba:	6063      	str	r3, [r4, #4]
 80060bc:	6022      	str	r2, [r4, #0]
 80060be:	6822      	ldr	r2, [r4, #0]
 80060c0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80060c4:	6022      	str	r2, [r4, #0]
 80060c6:	68a2      	ldr	r2, [r4, #8]
 80060c8:	1e51      	subs	r1, r2, #1
 80060ca:	60a1      	str	r1, [r4, #8]
 80060cc:	b192      	cbz	r2, 80060f4 <_scanf_i+0xb8>
 80060ce:	6832      	ldr	r2, [r6, #0]
 80060d0:	1c51      	adds	r1, r2, #1
 80060d2:	6031      	str	r1, [r6, #0]
 80060d4:	7812      	ldrb	r2, [r2, #0]
 80060d6:	f805 2b01 	strb.w	r2, [r5], #1
 80060da:	6872      	ldr	r2, [r6, #4]
 80060dc:	3a01      	subs	r2, #1
 80060de:	2a00      	cmp	r2, #0
 80060e0:	6072      	str	r2, [r6, #4]
 80060e2:	dc07      	bgt.n	80060f4 <_scanf_i+0xb8>
 80060e4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80060e8:	4631      	mov	r1, r6
 80060ea:	4650      	mov	r0, sl
 80060ec:	4790      	blx	r2
 80060ee:	2800      	cmp	r0, #0
 80060f0:	f040 8085 	bne.w	80061fe <_scanf_i+0x1c2>
 80060f4:	f10b 0b01 	add.w	fp, fp, #1
 80060f8:	f1bb 0f03 	cmp.w	fp, #3
 80060fc:	d1cb      	bne.n	8006096 <_scanf_i+0x5a>
 80060fe:	6863      	ldr	r3, [r4, #4]
 8006100:	b90b      	cbnz	r3, 8006106 <_scanf_i+0xca>
 8006102:	230a      	movs	r3, #10
 8006104:	6063      	str	r3, [r4, #4]
 8006106:	6863      	ldr	r3, [r4, #4]
 8006108:	4945      	ldr	r1, [pc, #276]	; (8006220 <_scanf_i+0x1e4>)
 800610a:	6960      	ldr	r0, [r4, #20]
 800610c:	1ac9      	subs	r1, r1, r3
 800610e:	f000 f889 	bl	8006224 <__sccl>
 8006112:	f04f 0b00 	mov.w	fp, #0
 8006116:	68a3      	ldr	r3, [r4, #8]
 8006118:	6822      	ldr	r2, [r4, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d03d      	beq.n	800619a <_scanf_i+0x15e>
 800611e:	6831      	ldr	r1, [r6, #0]
 8006120:	6960      	ldr	r0, [r4, #20]
 8006122:	f891 c000 	ldrb.w	ip, [r1]
 8006126:	f810 000c 	ldrb.w	r0, [r0, ip]
 800612a:	2800      	cmp	r0, #0
 800612c:	d035      	beq.n	800619a <_scanf_i+0x15e>
 800612e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006132:	d124      	bne.n	800617e <_scanf_i+0x142>
 8006134:	0510      	lsls	r0, r2, #20
 8006136:	d522      	bpl.n	800617e <_scanf_i+0x142>
 8006138:	f10b 0b01 	add.w	fp, fp, #1
 800613c:	f1b9 0f00 	cmp.w	r9, #0
 8006140:	d003      	beq.n	800614a <_scanf_i+0x10e>
 8006142:	3301      	adds	r3, #1
 8006144:	f109 39ff 	add.w	r9, r9, #4294967295
 8006148:	60a3      	str	r3, [r4, #8]
 800614a:	6873      	ldr	r3, [r6, #4]
 800614c:	3b01      	subs	r3, #1
 800614e:	2b00      	cmp	r3, #0
 8006150:	6073      	str	r3, [r6, #4]
 8006152:	dd1b      	ble.n	800618c <_scanf_i+0x150>
 8006154:	6833      	ldr	r3, [r6, #0]
 8006156:	3301      	adds	r3, #1
 8006158:	6033      	str	r3, [r6, #0]
 800615a:	68a3      	ldr	r3, [r4, #8]
 800615c:	3b01      	subs	r3, #1
 800615e:	60a3      	str	r3, [r4, #8]
 8006160:	e7d9      	b.n	8006116 <_scanf_i+0xda>
 8006162:	f1bb 0f02 	cmp.w	fp, #2
 8006166:	d1ae      	bne.n	80060c6 <_scanf_i+0x8a>
 8006168:	6822      	ldr	r2, [r4, #0]
 800616a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800616e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006172:	d1bf      	bne.n	80060f4 <_scanf_i+0xb8>
 8006174:	2310      	movs	r3, #16
 8006176:	6063      	str	r3, [r4, #4]
 8006178:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800617c:	e7a2      	b.n	80060c4 <_scanf_i+0x88>
 800617e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006182:	6022      	str	r2, [r4, #0]
 8006184:	780b      	ldrb	r3, [r1, #0]
 8006186:	f805 3b01 	strb.w	r3, [r5], #1
 800618a:	e7de      	b.n	800614a <_scanf_i+0x10e>
 800618c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006190:	4631      	mov	r1, r6
 8006192:	4650      	mov	r0, sl
 8006194:	4798      	blx	r3
 8006196:	2800      	cmp	r0, #0
 8006198:	d0df      	beq.n	800615a <_scanf_i+0x11e>
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	05d9      	lsls	r1, r3, #23
 800619e:	d50d      	bpl.n	80061bc <_scanf_i+0x180>
 80061a0:	42bd      	cmp	r5, r7
 80061a2:	d909      	bls.n	80061b8 <_scanf_i+0x17c>
 80061a4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80061a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80061ac:	4632      	mov	r2, r6
 80061ae:	4650      	mov	r0, sl
 80061b0:	4798      	blx	r3
 80061b2:	f105 39ff 	add.w	r9, r5, #4294967295
 80061b6:	464d      	mov	r5, r9
 80061b8:	42bd      	cmp	r5, r7
 80061ba:	d028      	beq.n	800620e <_scanf_i+0x1d2>
 80061bc:	6822      	ldr	r2, [r4, #0]
 80061be:	f012 0210 	ands.w	r2, r2, #16
 80061c2:	d113      	bne.n	80061ec <_scanf_i+0x1b0>
 80061c4:	702a      	strb	r2, [r5, #0]
 80061c6:	6863      	ldr	r3, [r4, #4]
 80061c8:	9e01      	ldr	r6, [sp, #4]
 80061ca:	4639      	mov	r1, r7
 80061cc:	4650      	mov	r0, sl
 80061ce:	47b0      	blx	r6
 80061d0:	f8d8 3000 	ldr.w	r3, [r8]
 80061d4:	6821      	ldr	r1, [r4, #0]
 80061d6:	1d1a      	adds	r2, r3, #4
 80061d8:	f8c8 2000 	str.w	r2, [r8]
 80061dc:	f011 0f20 	tst.w	r1, #32
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	d00f      	beq.n	8006204 <_scanf_i+0x1c8>
 80061e4:	6018      	str	r0, [r3, #0]
 80061e6:	68e3      	ldr	r3, [r4, #12]
 80061e8:	3301      	adds	r3, #1
 80061ea:	60e3      	str	r3, [r4, #12]
 80061ec:	6923      	ldr	r3, [r4, #16]
 80061ee:	1bed      	subs	r5, r5, r7
 80061f0:	445d      	add	r5, fp
 80061f2:	442b      	add	r3, r5
 80061f4:	6123      	str	r3, [r4, #16]
 80061f6:	2000      	movs	r0, #0
 80061f8:	b007      	add	sp, #28
 80061fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061fe:	f04f 0b00 	mov.w	fp, #0
 8006202:	e7ca      	b.n	800619a <_scanf_i+0x15e>
 8006204:	07ca      	lsls	r2, r1, #31
 8006206:	bf4c      	ite	mi
 8006208:	8018      	strhmi	r0, [r3, #0]
 800620a:	6018      	strpl	r0, [r3, #0]
 800620c:	e7eb      	b.n	80061e6 <_scanf_i+0x1aa>
 800620e:	2001      	movs	r0, #1
 8006210:	e7f2      	b.n	80061f8 <_scanf_i+0x1bc>
 8006212:	bf00      	nop
 8006214:	080066cc 	.word	0x080066cc
 8006218:	080065ad 	.word	0x080065ad
 800621c:	080064c5 	.word	0x080064c5
 8006220:	080067e3 	.word	0x080067e3

08006224 <__sccl>:
 8006224:	b570      	push	{r4, r5, r6, lr}
 8006226:	780b      	ldrb	r3, [r1, #0]
 8006228:	4604      	mov	r4, r0
 800622a:	2b5e      	cmp	r3, #94	; 0x5e
 800622c:	bf0b      	itete	eq
 800622e:	784b      	ldrbeq	r3, [r1, #1]
 8006230:	1c4a      	addne	r2, r1, #1
 8006232:	1c8a      	addeq	r2, r1, #2
 8006234:	2100      	movne	r1, #0
 8006236:	bf08      	it	eq
 8006238:	2101      	moveq	r1, #1
 800623a:	3801      	subs	r0, #1
 800623c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006240:	f800 1f01 	strb.w	r1, [r0, #1]!
 8006244:	42a8      	cmp	r0, r5
 8006246:	d1fb      	bne.n	8006240 <__sccl+0x1c>
 8006248:	b90b      	cbnz	r3, 800624e <__sccl+0x2a>
 800624a:	1e50      	subs	r0, r2, #1
 800624c:	bd70      	pop	{r4, r5, r6, pc}
 800624e:	f081 0101 	eor.w	r1, r1, #1
 8006252:	54e1      	strb	r1, [r4, r3]
 8006254:	4610      	mov	r0, r2
 8006256:	4602      	mov	r2, r0
 8006258:	f812 5b01 	ldrb.w	r5, [r2], #1
 800625c:	2d2d      	cmp	r5, #45	; 0x2d
 800625e:	d005      	beq.n	800626c <__sccl+0x48>
 8006260:	2d5d      	cmp	r5, #93	; 0x5d
 8006262:	d016      	beq.n	8006292 <__sccl+0x6e>
 8006264:	2d00      	cmp	r5, #0
 8006266:	d0f1      	beq.n	800624c <__sccl+0x28>
 8006268:	462b      	mov	r3, r5
 800626a:	e7f2      	b.n	8006252 <__sccl+0x2e>
 800626c:	7846      	ldrb	r6, [r0, #1]
 800626e:	2e5d      	cmp	r6, #93	; 0x5d
 8006270:	d0fa      	beq.n	8006268 <__sccl+0x44>
 8006272:	42b3      	cmp	r3, r6
 8006274:	dcf8      	bgt.n	8006268 <__sccl+0x44>
 8006276:	3002      	adds	r0, #2
 8006278:	461a      	mov	r2, r3
 800627a:	3201      	adds	r2, #1
 800627c:	4296      	cmp	r6, r2
 800627e:	54a1      	strb	r1, [r4, r2]
 8006280:	dcfb      	bgt.n	800627a <__sccl+0x56>
 8006282:	1af2      	subs	r2, r6, r3
 8006284:	3a01      	subs	r2, #1
 8006286:	1c5d      	adds	r5, r3, #1
 8006288:	42b3      	cmp	r3, r6
 800628a:	bfa8      	it	ge
 800628c:	2200      	movge	r2, #0
 800628e:	18ab      	adds	r3, r5, r2
 8006290:	e7e1      	b.n	8006256 <__sccl+0x32>
 8006292:	4610      	mov	r0, r2
 8006294:	e7da      	b.n	800624c <__sccl+0x28>

08006296 <__submore>:
 8006296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800629a:	460c      	mov	r4, r1
 800629c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800629e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062a2:	4299      	cmp	r1, r3
 80062a4:	d11d      	bne.n	80062e2 <__submore+0x4c>
 80062a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80062aa:	f7ff f927 	bl	80054fc <_malloc_r>
 80062ae:	b918      	cbnz	r0, 80062b8 <__submore+0x22>
 80062b0:	f04f 30ff 	mov.w	r0, #4294967295
 80062b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062bc:	63a3      	str	r3, [r4, #56]	; 0x38
 80062be:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80062c2:	6360      	str	r0, [r4, #52]	; 0x34
 80062c4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80062c8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80062cc:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80062d0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80062d4:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80062d8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80062dc:	6020      	str	r0, [r4, #0]
 80062de:	2000      	movs	r0, #0
 80062e0:	e7e8      	b.n	80062b4 <__submore+0x1e>
 80062e2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80062e4:	0077      	lsls	r7, r6, #1
 80062e6:	463a      	mov	r2, r7
 80062e8:	f000 f83a 	bl	8006360 <_realloc_r>
 80062ec:	4605      	mov	r5, r0
 80062ee:	2800      	cmp	r0, #0
 80062f0:	d0de      	beq.n	80062b0 <__submore+0x1a>
 80062f2:	eb00 0806 	add.w	r8, r0, r6
 80062f6:	4601      	mov	r1, r0
 80062f8:	4632      	mov	r2, r6
 80062fa:	4640      	mov	r0, r8
 80062fc:	f7ff f884 	bl	8005408 <memcpy>
 8006300:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8006304:	f8c4 8000 	str.w	r8, [r4]
 8006308:	e7e9      	b.n	80062de <__submore+0x48>

0800630a <memmove>:
 800630a:	4288      	cmp	r0, r1
 800630c:	b510      	push	{r4, lr}
 800630e:	eb01 0402 	add.w	r4, r1, r2
 8006312:	d902      	bls.n	800631a <memmove+0x10>
 8006314:	4284      	cmp	r4, r0
 8006316:	4623      	mov	r3, r4
 8006318:	d807      	bhi.n	800632a <memmove+0x20>
 800631a:	1e43      	subs	r3, r0, #1
 800631c:	42a1      	cmp	r1, r4
 800631e:	d008      	beq.n	8006332 <memmove+0x28>
 8006320:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006324:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006328:	e7f8      	b.n	800631c <memmove+0x12>
 800632a:	4402      	add	r2, r0
 800632c:	4601      	mov	r1, r0
 800632e:	428a      	cmp	r2, r1
 8006330:	d100      	bne.n	8006334 <memmove+0x2a>
 8006332:	bd10      	pop	{r4, pc}
 8006334:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006338:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800633c:	e7f7      	b.n	800632e <memmove+0x24>
	...

08006340 <_sbrk_r>:
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	4d06      	ldr	r5, [pc, #24]	; (800635c <_sbrk_r+0x1c>)
 8006344:	2300      	movs	r3, #0
 8006346:	4604      	mov	r4, r0
 8006348:	4608      	mov	r0, r1
 800634a:	602b      	str	r3, [r5, #0]
 800634c:	f7fb fd28 	bl	8001da0 <_sbrk>
 8006350:	1c43      	adds	r3, r0, #1
 8006352:	d102      	bne.n	800635a <_sbrk_r+0x1a>
 8006354:	682b      	ldr	r3, [r5, #0]
 8006356:	b103      	cbz	r3, 800635a <_sbrk_r+0x1a>
 8006358:	6023      	str	r3, [r4, #0]
 800635a:	bd38      	pop	{r3, r4, r5, pc}
 800635c:	200005dc 	.word	0x200005dc

08006360 <_realloc_r>:
 8006360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006364:	4680      	mov	r8, r0
 8006366:	4614      	mov	r4, r2
 8006368:	460e      	mov	r6, r1
 800636a:	b921      	cbnz	r1, 8006376 <_realloc_r+0x16>
 800636c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006370:	4611      	mov	r1, r2
 8006372:	f7ff b8c3 	b.w	80054fc <_malloc_r>
 8006376:	b92a      	cbnz	r2, 8006384 <_realloc_r+0x24>
 8006378:	f7ff f854 	bl	8005424 <_free_r>
 800637c:	4625      	mov	r5, r4
 800637e:	4628      	mov	r0, r5
 8006380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006384:	f000 f914 	bl	80065b0 <_malloc_usable_size_r>
 8006388:	4284      	cmp	r4, r0
 800638a:	4607      	mov	r7, r0
 800638c:	d802      	bhi.n	8006394 <_realloc_r+0x34>
 800638e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006392:	d812      	bhi.n	80063ba <_realloc_r+0x5a>
 8006394:	4621      	mov	r1, r4
 8006396:	4640      	mov	r0, r8
 8006398:	f7ff f8b0 	bl	80054fc <_malloc_r>
 800639c:	4605      	mov	r5, r0
 800639e:	2800      	cmp	r0, #0
 80063a0:	d0ed      	beq.n	800637e <_realloc_r+0x1e>
 80063a2:	42bc      	cmp	r4, r7
 80063a4:	4622      	mov	r2, r4
 80063a6:	4631      	mov	r1, r6
 80063a8:	bf28      	it	cs
 80063aa:	463a      	movcs	r2, r7
 80063ac:	f7ff f82c 	bl	8005408 <memcpy>
 80063b0:	4631      	mov	r1, r6
 80063b2:	4640      	mov	r0, r8
 80063b4:	f7ff f836 	bl	8005424 <_free_r>
 80063b8:	e7e1      	b.n	800637e <_realloc_r+0x1e>
 80063ba:	4635      	mov	r5, r6
 80063bc:	e7df      	b.n	800637e <_realloc_r+0x1e>
	...

080063c0 <_strtol_l.constprop.0>:
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063c6:	d001      	beq.n	80063cc <_strtol_l.constprop.0+0xc>
 80063c8:	2b24      	cmp	r3, #36	; 0x24
 80063ca:	d906      	bls.n	80063da <_strtol_l.constprop.0+0x1a>
 80063cc:	f7fe fff0 	bl	80053b0 <__errno>
 80063d0:	2316      	movs	r3, #22
 80063d2:	6003      	str	r3, [r0, #0]
 80063d4:	2000      	movs	r0, #0
 80063d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063da:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80064c0 <_strtol_l.constprop.0+0x100>
 80063de:	460d      	mov	r5, r1
 80063e0:	462e      	mov	r6, r5
 80063e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80063e6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80063ea:	f017 0708 	ands.w	r7, r7, #8
 80063ee:	d1f7      	bne.n	80063e0 <_strtol_l.constprop.0+0x20>
 80063f0:	2c2d      	cmp	r4, #45	; 0x2d
 80063f2:	d132      	bne.n	800645a <_strtol_l.constprop.0+0x9a>
 80063f4:	782c      	ldrb	r4, [r5, #0]
 80063f6:	2701      	movs	r7, #1
 80063f8:	1cb5      	adds	r5, r6, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d05b      	beq.n	80064b6 <_strtol_l.constprop.0+0xf6>
 80063fe:	2b10      	cmp	r3, #16
 8006400:	d109      	bne.n	8006416 <_strtol_l.constprop.0+0x56>
 8006402:	2c30      	cmp	r4, #48	; 0x30
 8006404:	d107      	bne.n	8006416 <_strtol_l.constprop.0+0x56>
 8006406:	782c      	ldrb	r4, [r5, #0]
 8006408:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800640c:	2c58      	cmp	r4, #88	; 0x58
 800640e:	d14d      	bne.n	80064ac <_strtol_l.constprop.0+0xec>
 8006410:	786c      	ldrb	r4, [r5, #1]
 8006412:	2310      	movs	r3, #16
 8006414:	3502      	adds	r5, #2
 8006416:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800641a:	f108 38ff 	add.w	r8, r8, #4294967295
 800641e:	f04f 0e00 	mov.w	lr, #0
 8006422:	fbb8 f9f3 	udiv	r9, r8, r3
 8006426:	4676      	mov	r6, lr
 8006428:	fb03 8a19 	mls	sl, r3, r9, r8
 800642c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006430:	f1bc 0f09 	cmp.w	ip, #9
 8006434:	d816      	bhi.n	8006464 <_strtol_l.constprop.0+0xa4>
 8006436:	4664      	mov	r4, ip
 8006438:	42a3      	cmp	r3, r4
 800643a:	dd24      	ble.n	8006486 <_strtol_l.constprop.0+0xc6>
 800643c:	f1be 3fff 	cmp.w	lr, #4294967295
 8006440:	d008      	beq.n	8006454 <_strtol_l.constprop.0+0x94>
 8006442:	45b1      	cmp	r9, r6
 8006444:	d31c      	bcc.n	8006480 <_strtol_l.constprop.0+0xc0>
 8006446:	d101      	bne.n	800644c <_strtol_l.constprop.0+0x8c>
 8006448:	45a2      	cmp	sl, r4
 800644a:	db19      	blt.n	8006480 <_strtol_l.constprop.0+0xc0>
 800644c:	fb06 4603 	mla	r6, r6, r3, r4
 8006450:	f04f 0e01 	mov.w	lr, #1
 8006454:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006458:	e7e8      	b.n	800642c <_strtol_l.constprop.0+0x6c>
 800645a:	2c2b      	cmp	r4, #43	; 0x2b
 800645c:	bf04      	itt	eq
 800645e:	782c      	ldrbeq	r4, [r5, #0]
 8006460:	1cb5      	addeq	r5, r6, #2
 8006462:	e7ca      	b.n	80063fa <_strtol_l.constprop.0+0x3a>
 8006464:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006468:	f1bc 0f19 	cmp.w	ip, #25
 800646c:	d801      	bhi.n	8006472 <_strtol_l.constprop.0+0xb2>
 800646e:	3c37      	subs	r4, #55	; 0x37
 8006470:	e7e2      	b.n	8006438 <_strtol_l.constprop.0+0x78>
 8006472:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006476:	f1bc 0f19 	cmp.w	ip, #25
 800647a:	d804      	bhi.n	8006486 <_strtol_l.constprop.0+0xc6>
 800647c:	3c57      	subs	r4, #87	; 0x57
 800647e:	e7db      	b.n	8006438 <_strtol_l.constprop.0+0x78>
 8006480:	f04f 3eff 	mov.w	lr, #4294967295
 8006484:	e7e6      	b.n	8006454 <_strtol_l.constprop.0+0x94>
 8006486:	f1be 3fff 	cmp.w	lr, #4294967295
 800648a:	d105      	bne.n	8006498 <_strtol_l.constprop.0+0xd8>
 800648c:	2322      	movs	r3, #34	; 0x22
 800648e:	6003      	str	r3, [r0, #0]
 8006490:	4646      	mov	r6, r8
 8006492:	b942      	cbnz	r2, 80064a6 <_strtol_l.constprop.0+0xe6>
 8006494:	4630      	mov	r0, r6
 8006496:	e79e      	b.n	80063d6 <_strtol_l.constprop.0+0x16>
 8006498:	b107      	cbz	r7, 800649c <_strtol_l.constprop.0+0xdc>
 800649a:	4276      	negs	r6, r6
 800649c:	2a00      	cmp	r2, #0
 800649e:	d0f9      	beq.n	8006494 <_strtol_l.constprop.0+0xd4>
 80064a0:	f1be 0f00 	cmp.w	lr, #0
 80064a4:	d000      	beq.n	80064a8 <_strtol_l.constprop.0+0xe8>
 80064a6:	1e69      	subs	r1, r5, #1
 80064a8:	6011      	str	r1, [r2, #0]
 80064aa:	e7f3      	b.n	8006494 <_strtol_l.constprop.0+0xd4>
 80064ac:	2430      	movs	r4, #48	; 0x30
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1b1      	bne.n	8006416 <_strtol_l.constprop.0+0x56>
 80064b2:	2308      	movs	r3, #8
 80064b4:	e7af      	b.n	8006416 <_strtol_l.constprop.0+0x56>
 80064b6:	2c30      	cmp	r4, #48	; 0x30
 80064b8:	d0a5      	beq.n	8006406 <_strtol_l.constprop.0+0x46>
 80064ba:	230a      	movs	r3, #10
 80064bc:	e7ab      	b.n	8006416 <_strtol_l.constprop.0+0x56>
 80064be:	bf00      	nop
 80064c0:	080067ef 	.word	0x080067ef

080064c4 <_strtol_r>:
 80064c4:	f7ff bf7c 	b.w	80063c0 <_strtol_l.constprop.0>

080064c8 <_strtoul_l.constprop.0>:
 80064c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064cc:	4f36      	ldr	r7, [pc, #216]	; (80065a8 <_strtoul_l.constprop.0+0xe0>)
 80064ce:	4686      	mov	lr, r0
 80064d0:	460d      	mov	r5, r1
 80064d2:	4628      	mov	r0, r5
 80064d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80064d8:	5d3e      	ldrb	r6, [r7, r4]
 80064da:	f016 0608 	ands.w	r6, r6, #8
 80064de:	d1f8      	bne.n	80064d2 <_strtoul_l.constprop.0+0xa>
 80064e0:	2c2d      	cmp	r4, #45	; 0x2d
 80064e2:	d130      	bne.n	8006546 <_strtoul_l.constprop.0+0x7e>
 80064e4:	782c      	ldrb	r4, [r5, #0]
 80064e6:	2601      	movs	r6, #1
 80064e8:	1c85      	adds	r5, r0, #2
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d057      	beq.n	800659e <_strtoul_l.constprop.0+0xd6>
 80064ee:	2b10      	cmp	r3, #16
 80064f0:	d109      	bne.n	8006506 <_strtoul_l.constprop.0+0x3e>
 80064f2:	2c30      	cmp	r4, #48	; 0x30
 80064f4:	d107      	bne.n	8006506 <_strtoul_l.constprop.0+0x3e>
 80064f6:	7828      	ldrb	r0, [r5, #0]
 80064f8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80064fc:	2858      	cmp	r0, #88	; 0x58
 80064fe:	d149      	bne.n	8006594 <_strtoul_l.constprop.0+0xcc>
 8006500:	786c      	ldrb	r4, [r5, #1]
 8006502:	2310      	movs	r3, #16
 8006504:	3502      	adds	r5, #2
 8006506:	f04f 38ff 	mov.w	r8, #4294967295
 800650a:	2700      	movs	r7, #0
 800650c:	fbb8 f8f3 	udiv	r8, r8, r3
 8006510:	fb03 f908 	mul.w	r9, r3, r8
 8006514:	ea6f 0909 	mvn.w	r9, r9
 8006518:	4638      	mov	r0, r7
 800651a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800651e:	f1bc 0f09 	cmp.w	ip, #9
 8006522:	d815      	bhi.n	8006550 <_strtoul_l.constprop.0+0x88>
 8006524:	4664      	mov	r4, ip
 8006526:	42a3      	cmp	r3, r4
 8006528:	dd23      	ble.n	8006572 <_strtoul_l.constprop.0+0xaa>
 800652a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800652e:	d007      	beq.n	8006540 <_strtoul_l.constprop.0+0x78>
 8006530:	4580      	cmp	r8, r0
 8006532:	d31b      	bcc.n	800656c <_strtoul_l.constprop.0+0xa4>
 8006534:	d101      	bne.n	800653a <_strtoul_l.constprop.0+0x72>
 8006536:	45a1      	cmp	r9, r4
 8006538:	db18      	blt.n	800656c <_strtoul_l.constprop.0+0xa4>
 800653a:	fb00 4003 	mla	r0, r0, r3, r4
 800653e:	2701      	movs	r7, #1
 8006540:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006544:	e7e9      	b.n	800651a <_strtoul_l.constprop.0+0x52>
 8006546:	2c2b      	cmp	r4, #43	; 0x2b
 8006548:	bf04      	itt	eq
 800654a:	782c      	ldrbeq	r4, [r5, #0]
 800654c:	1c85      	addeq	r5, r0, #2
 800654e:	e7cc      	b.n	80064ea <_strtoul_l.constprop.0+0x22>
 8006550:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006554:	f1bc 0f19 	cmp.w	ip, #25
 8006558:	d801      	bhi.n	800655e <_strtoul_l.constprop.0+0x96>
 800655a:	3c37      	subs	r4, #55	; 0x37
 800655c:	e7e3      	b.n	8006526 <_strtoul_l.constprop.0+0x5e>
 800655e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006562:	f1bc 0f19 	cmp.w	ip, #25
 8006566:	d804      	bhi.n	8006572 <_strtoul_l.constprop.0+0xaa>
 8006568:	3c57      	subs	r4, #87	; 0x57
 800656a:	e7dc      	b.n	8006526 <_strtoul_l.constprop.0+0x5e>
 800656c:	f04f 37ff 	mov.w	r7, #4294967295
 8006570:	e7e6      	b.n	8006540 <_strtoul_l.constprop.0+0x78>
 8006572:	1c7b      	adds	r3, r7, #1
 8006574:	d106      	bne.n	8006584 <_strtoul_l.constprop.0+0xbc>
 8006576:	2322      	movs	r3, #34	; 0x22
 8006578:	f8ce 3000 	str.w	r3, [lr]
 800657c:	4638      	mov	r0, r7
 800657e:	b932      	cbnz	r2, 800658e <_strtoul_l.constprop.0+0xc6>
 8006580:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006584:	b106      	cbz	r6, 8006588 <_strtoul_l.constprop.0+0xc0>
 8006586:	4240      	negs	r0, r0
 8006588:	2a00      	cmp	r2, #0
 800658a:	d0f9      	beq.n	8006580 <_strtoul_l.constprop.0+0xb8>
 800658c:	b107      	cbz	r7, 8006590 <_strtoul_l.constprop.0+0xc8>
 800658e:	1e69      	subs	r1, r5, #1
 8006590:	6011      	str	r1, [r2, #0]
 8006592:	e7f5      	b.n	8006580 <_strtoul_l.constprop.0+0xb8>
 8006594:	2430      	movs	r4, #48	; 0x30
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1b5      	bne.n	8006506 <_strtoul_l.constprop.0+0x3e>
 800659a:	2308      	movs	r3, #8
 800659c:	e7b3      	b.n	8006506 <_strtoul_l.constprop.0+0x3e>
 800659e:	2c30      	cmp	r4, #48	; 0x30
 80065a0:	d0a9      	beq.n	80064f6 <_strtoul_l.constprop.0+0x2e>
 80065a2:	230a      	movs	r3, #10
 80065a4:	e7af      	b.n	8006506 <_strtoul_l.constprop.0+0x3e>
 80065a6:	bf00      	nop
 80065a8:	080067ef 	.word	0x080067ef

080065ac <_strtoul_r>:
 80065ac:	f7ff bf8c 	b.w	80064c8 <_strtoul_l.constprop.0>

080065b0 <_malloc_usable_size_r>:
 80065b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065b4:	1f18      	subs	r0, r3, #4
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	bfbc      	itt	lt
 80065ba:	580b      	ldrlt	r3, [r1, r0]
 80065bc:	18c0      	addlt	r0, r0, r3
 80065be:	4770      	bx	lr

080065c0 <_init>:
 80065c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c2:	bf00      	nop
 80065c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065c6:	bc08      	pop	{r3}
 80065c8:	469e      	mov	lr, r3
 80065ca:	4770      	bx	lr

080065cc <_fini>:
 80065cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ce:	bf00      	nop
 80065d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065d2:	bc08      	pop	{r3}
 80065d4:	469e      	mov	lr, r3
 80065d6:	4770      	bx	lr
