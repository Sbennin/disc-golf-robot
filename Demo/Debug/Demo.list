
Demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d98  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e8  08005ed8  08005ed8  00015ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080061c0  080061c0  000161c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080061c8  080061c8  000161c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080061cc  080061cc  000161cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  20000008  080061d0  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000580  20000070  08006238  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  200005f0  08006238  000205f0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 11 .debug_info   00014f99  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000031b4  00000000  00000000  0003507c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000016d8  00000000  00000000  00038230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000113d  00000000  00000000  00039908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00022f05  00000000  00000000  0003aa45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001616f  00000000  00000000  0005d94a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000d975f  00000000  00000000  00073ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006578  00000000  00000000  0014d218  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004a  00000000  00000000  00153790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000070 	.word	0x20000070
 800015c:	00000000 	.word	0x00000000
 8000160:	08005ec0 	.word	0x08005ec0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000074 	.word	0x20000074
 800017c:	08005ec0 	.word	0x08005ec0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2uiz>:
 80009cc:	004a      	lsls	r2, r1, #1
 80009ce:	d211      	bcs.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009d4:	d211      	bcs.n	80009fa <__aeabi_d2uiz+0x2e>
 80009d6:	d50d      	bpl.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e0:	d40e      	bmi.n	8000a00 <__aeabi_d2uiz+0x34>
 80009e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ee:	fa23 f002 	lsr.w	r0, r3, r2
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d102      	bne.n	8000a06 <__aeabi_d2uiz+0x3a>
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	4770      	bx	lr
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	4770      	bx	lr

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b970 	b.w	8000d04 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9e08      	ldr	r6, [sp, #32]
 8000a42:	460d      	mov	r5, r1
 8000a44:	4604      	mov	r4, r0
 8000a46:	460f      	mov	r7, r1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d14a      	bne.n	8000ae2 <__udivmoddi4+0xa6>
 8000a4c:	428a      	cmp	r2, r1
 8000a4e:	4694      	mov	ip, r2
 8000a50:	d965      	bls.n	8000b1e <__udivmoddi4+0xe2>
 8000a52:	fab2 f382 	clz	r3, r2
 8000a56:	b143      	cbz	r3, 8000a6a <__udivmoddi4+0x2e>
 8000a58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a5c:	f1c3 0220 	rsb	r2, r3, #32
 8000a60:	409f      	lsls	r7, r3
 8000a62:	fa20 f202 	lsr.w	r2, r0, r2
 8000a66:	4317      	orrs	r7, r2
 8000a68:	409c      	lsls	r4, r3
 8000a6a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a6e:	fa1f f58c 	uxth.w	r5, ip
 8000a72:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a76:	0c22      	lsrs	r2, r4, #16
 8000a78:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a7c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a80:	fb01 f005 	mul.w	r0, r1, r5
 8000a84:	4290      	cmp	r0, r2
 8000a86:	d90a      	bls.n	8000a9e <__udivmoddi4+0x62>
 8000a88:	eb1c 0202 	adds.w	r2, ip, r2
 8000a8c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a90:	f080 811c 	bcs.w	8000ccc <__udivmoddi4+0x290>
 8000a94:	4290      	cmp	r0, r2
 8000a96:	f240 8119 	bls.w	8000ccc <__udivmoddi4+0x290>
 8000a9a:	3902      	subs	r1, #2
 8000a9c:	4462      	add	r2, ip
 8000a9e:	1a12      	subs	r2, r2, r0
 8000aa0:	b2a4      	uxth	r4, r4
 8000aa2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aa6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aaa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aae:	fb00 f505 	mul.w	r5, r0, r5
 8000ab2:	42a5      	cmp	r5, r4
 8000ab4:	d90a      	bls.n	8000acc <__udivmoddi4+0x90>
 8000ab6:	eb1c 0404 	adds.w	r4, ip, r4
 8000aba:	f100 32ff 	add.w	r2, r0, #4294967295
 8000abe:	f080 8107 	bcs.w	8000cd0 <__udivmoddi4+0x294>
 8000ac2:	42a5      	cmp	r5, r4
 8000ac4:	f240 8104 	bls.w	8000cd0 <__udivmoddi4+0x294>
 8000ac8:	4464      	add	r4, ip
 8000aca:	3802      	subs	r0, #2
 8000acc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ad0:	1b64      	subs	r4, r4, r5
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	b11e      	cbz	r6, 8000ade <__udivmoddi4+0xa2>
 8000ad6:	40dc      	lsrs	r4, r3
 8000ad8:	2300      	movs	r3, #0
 8000ada:	e9c6 4300 	strd	r4, r3, [r6]
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	428b      	cmp	r3, r1
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0xbc>
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	f000 80ed 	beq.w	8000cc6 <__udivmoddi4+0x28a>
 8000aec:	2100      	movs	r1, #0
 8000aee:	e9c6 0500 	strd	r0, r5, [r6]
 8000af2:	4608      	mov	r0, r1
 8000af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af8:	fab3 f183 	clz	r1, r3
 8000afc:	2900      	cmp	r1, #0
 8000afe:	d149      	bne.n	8000b94 <__udivmoddi4+0x158>
 8000b00:	42ab      	cmp	r3, r5
 8000b02:	d302      	bcc.n	8000b0a <__udivmoddi4+0xce>
 8000b04:	4282      	cmp	r2, r0
 8000b06:	f200 80f8 	bhi.w	8000cfa <__udivmoddi4+0x2be>
 8000b0a:	1a84      	subs	r4, r0, r2
 8000b0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b10:	2001      	movs	r0, #1
 8000b12:	4617      	mov	r7, r2
 8000b14:	2e00      	cmp	r6, #0
 8000b16:	d0e2      	beq.n	8000ade <__udivmoddi4+0xa2>
 8000b18:	e9c6 4700 	strd	r4, r7, [r6]
 8000b1c:	e7df      	b.n	8000ade <__udivmoddi4+0xa2>
 8000b1e:	b902      	cbnz	r2, 8000b22 <__udivmoddi4+0xe6>
 8000b20:	deff      	udf	#255	; 0xff
 8000b22:	fab2 f382 	clz	r3, r2
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8090 	bne.w	8000c4c <__udivmoddi4+0x210>
 8000b2c:	1a8a      	subs	r2, r1, r2
 8000b2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b32:	fa1f fe8c 	uxth.w	lr, ip
 8000b36:	2101      	movs	r1, #1
 8000b38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b40:	0c22      	lsrs	r2, r4, #16
 8000b42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b46:	fb0e f005 	mul.w	r0, lr, r5
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x124>
 8000b4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b52:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x122>
 8000b58:	4290      	cmp	r0, r2
 8000b5a:	f200 80cb 	bhi.w	8000cf4 <__udivmoddi4+0x2b8>
 8000b5e:	4645      	mov	r5, r8
 8000b60:	1a12      	subs	r2, r2, r0
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b68:	fb07 2210 	mls	r2, r7, r0, r2
 8000b6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b70:	fb0e fe00 	mul.w	lr, lr, r0
 8000b74:	45a6      	cmp	lr, r4
 8000b76:	d908      	bls.n	8000b8a <__udivmoddi4+0x14e>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b80:	d202      	bcs.n	8000b88 <__udivmoddi4+0x14c>
 8000b82:	45a6      	cmp	lr, r4
 8000b84:	f200 80bb 	bhi.w	8000cfe <__udivmoddi4+0x2c2>
 8000b88:	4610      	mov	r0, r2
 8000b8a:	eba4 040e 	sub.w	r4, r4, lr
 8000b8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b92:	e79f      	b.n	8000ad4 <__udivmoddi4+0x98>
 8000b94:	f1c1 0720 	rsb	r7, r1, #32
 8000b98:	408b      	lsls	r3, r1
 8000b9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ba2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ba6:	fa20 f307 	lsr.w	r3, r0, r7
 8000baa:	40fd      	lsrs	r5, r7
 8000bac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb0:	4323      	orrs	r3, r4
 8000bb2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bb6:	fa1f fe8c 	uxth.w	lr, ip
 8000bba:	fb09 5518 	mls	r5, r9, r8, r5
 8000bbe:	0c1c      	lsrs	r4, r3, #16
 8000bc0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bc4:	fb08 f50e 	mul.w	r5, r8, lr
 8000bc8:	42a5      	cmp	r5, r4
 8000bca:	fa02 f201 	lsl.w	r2, r2, r1
 8000bce:	fa00 f001 	lsl.w	r0, r0, r1
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b0>
 8000bd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bdc:	f080 8088 	bcs.w	8000cf0 <__udivmoddi4+0x2b4>
 8000be0:	42a5      	cmp	r5, r4
 8000be2:	f240 8085 	bls.w	8000cf0 <__udivmoddi4+0x2b4>
 8000be6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bea:	4464      	add	r4, ip
 8000bec:	1b64      	subs	r4, r4, r5
 8000bee:	b29d      	uxth	r5, r3
 8000bf0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bf4:	fb09 4413 	mls	r4, r9, r3, r4
 8000bf8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bfc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c00:	45a6      	cmp	lr, r4
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1da>
 8000c04:	eb1c 0404 	adds.w	r4, ip, r4
 8000c08:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c0c:	d26c      	bcs.n	8000ce8 <__udivmoddi4+0x2ac>
 8000c0e:	45a6      	cmp	lr, r4
 8000c10:	d96a      	bls.n	8000ce8 <__udivmoddi4+0x2ac>
 8000c12:	3b02      	subs	r3, #2
 8000c14:	4464      	add	r4, ip
 8000c16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c1e:	eba4 040e 	sub.w	r4, r4, lr
 8000c22:	42ac      	cmp	r4, r5
 8000c24:	46c8      	mov	r8, r9
 8000c26:	46ae      	mov	lr, r5
 8000c28:	d356      	bcc.n	8000cd8 <__udivmoddi4+0x29c>
 8000c2a:	d053      	beq.n	8000cd4 <__udivmoddi4+0x298>
 8000c2c:	b156      	cbz	r6, 8000c44 <__udivmoddi4+0x208>
 8000c2e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c32:	eb64 040e 	sbc.w	r4, r4, lr
 8000c36:	fa04 f707 	lsl.w	r7, r4, r7
 8000c3a:	40ca      	lsrs	r2, r1
 8000c3c:	40cc      	lsrs	r4, r1
 8000c3e:	4317      	orrs	r7, r2
 8000c40:	e9c6 7400 	strd	r7, r4, [r6]
 8000c44:	4618      	mov	r0, r3
 8000c46:	2100      	movs	r1, #0
 8000c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4c:	f1c3 0120 	rsb	r1, r3, #32
 8000c50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c54:	fa20 f201 	lsr.w	r2, r0, r1
 8000c58:	fa25 f101 	lsr.w	r1, r5, r1
 8000c5c:	409d      	lsls	r5, r3
 8000c5e:	432a      	orrs	r2, r5
 8000c60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c70:	0c11      	lsrs	r1, r2, #16
 8000c72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c76:	fb00 f50e 	mul.w	r5, r0, lr
 8000c7a:	428d      	cmp	r5, r1
 8000c7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x258>
 8000c82:	eb1c 0101 	adds.w	r1, ip, r1
 8000c86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c8a:	d22f      	bcs.n	8000cec <__udivmoddi4+0x2b0>
 8000c8c:	428d      	cmp	r5, r1
 8000c8e:	d92d      	bls.n	8000cec <__udivmoddi4+0x2b0>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4461      	add	r1, ip
 8000c94:	1b49      	subs	r1, r1, r5
 8000c96:	b292      	uxth	r2, r2
 8000c98:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c9c:	fb07 1115 	mls	r1, r7, r5, r1
 8000ca0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ca4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ca8:	4291      	cmp	r1, r2
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x282>
 8000cac:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cb4:	d216      	bcs.n	8000ce4 <__udivmoddi4+0x2a8>
 8000cb6:	4291      	cmp	r1, r2
 8000cb8:	d914      	bls.n	8000ce4 <__udivmoddi4+0x2a8>
 8000cba:	3d02      	subs	r5, #2
 8000cbc:	4462      	add	r2, ip
 8000cbe:	1a52      	subs	r2, r2, r1
 8000cc0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cc4:	e738      	b.n	8000b38 <__udivmoddi4+0xfc>
 8000cc6:	4631      	mov	r1, r6
 8000cc8:	4630      	mov	r0, r6
 8000cca:	e708      	b.n	8000ade <__udivmoddi4+0xa2>
 8000ccc:	4639      	mov	r1, r7
 8000cce:	e6e6      	b.n	8000a9e <__udivmoddi4+0x62>
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	e6fb      	b.n	8000acc <__udivmoddi4+0x90>
 8000cd4:	4548      	cmp	r0, r9
 8000cd6:	d2a9      	bcs.n	8000c2c <__udivmoddi4+0x1f0>
 8000cd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cdc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	e7a3      	b.n	8000c2c <__udivmoddi4+0x1f0>
 8000ce4:	4645      	mov	r5, r8
 8000ce6:	e7ea      	b.n	8000cbe <__udivmoddi4+0x282>
 8000ce8:	462b      	mov	r3, r5
 8000cea:	e794      	b.n	8000c16 <__udivmoddi4+0x1da>
 8000cec:	4640      	mov	r0, r8
 8000cee:	e7d1      	b.n	8000c94 <__udivmoddi4+0x258>
 8000cf0:	46d0      	mov	r8, sl
 8000cf2:	e77b      	b.n	8000bec <__udivmoddi4+0x1b0>
 8000cf4:	3d02      	subs	r5, #2
 8000cf6:	4462      	add	r2, ip
 8000cf8:	e732      	b.n	8000b60 <__udivmoddi4+0x124>
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	e70a      	b.n	8000b14 <__udivmoddi4+0xd8>
 8000cfe:	4464      	add	r4, ip
 8000d00:	3802      	subs	r0, #2
 8000d02:	e742      	b.n	8000b8a <__udivmoddi4+0x14e>

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <Verify_Current_Speed>:

	return Array_To_Int(subbuff);
}

uint16_t Verify_Current_Speed()
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b088      	sub	sp, #32
 8000d0c:	af00      	add	r7, sp, #0
	char tx_buff[]={'@', MOTOR_ADDRESS, 'V','M', '\r'};
 8000d0e:	4a1a      	ldr	r2, [pc, #104]	; (8000d78 <Verify_Current_Speed+0x70>)
 8000d10:	f107 0318 	add.w	r3, r7, #24
 8000d14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d18:	6018      	str	r0, [r3, #0]
 8000d1a:	3304      	adds	r3, #4
 8000d1c:	7019      	strb	r1, [r3, #0]
	Motor_Transmit(tx_buff, sizeof(tx_buff));
 8000d1e:	f107 0318 	add.w	r3, r7, #24
 8000d22:	2105      	movs	r1, #5
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 fb99 	bl	800145c <Motor_Transmit>

	uint8_t rx_buff[10];
	uint8_t size = Motor_Receive(rx_buff); //M9999
 8000d2a:	f107 030c 	add.w	r3, r7, #12
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f000 fba8 	bl	8001484 <Motor_Receive>
 8000d34:	4603      	mov	r3, r0
 8000d36:	77fb      	strb	r3, [r7, #31]
	if (size == 0)
 8000d38:	7ffb      	ldrb	r3, [r7, #31]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d101      	bne.n	8000d42 <Verify_Current_Speed+0x3a>
	{
		return 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e015      	b.n	8000d6e <Verify_Current_Speed+0x66>
	}

	char subbuff[5];
	memcpy( subbuff, &rx_buff[1], size - 2 );
 8000d42:	7ffb      	ldrb	r3, [r7, #31]
 8000d44:	3b02      	subs	r3, #2
 8000d46:	461a      	mov	r2, r3
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	1c59      	adds	r1, r3, #1
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	4618      	mov	r0, r3
 8000d52:	f004 fadb 	bl	800530c <memcpy>
	subbuff[size - 2] = '\0';
 8000d56:	7ffb      	ldrb	r3, [r7, #31]
 8000d58:	3b02      	subs	r3, #2
 8000d5a:	3320      	adds	r3, #32
 8000d5c:	443b      	add	r3, r7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	f803 2c1c 	strb.w	r2, [r3, #-28]

	return Array_To_Int(subbuff);
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	4618      	mov	r0, r3
 8000d68:	f001 f844 	bl	8001df4 <Array_To_Int>
 8000d6c:	4603      	mov	r3, r0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3720      	adds	r7, #32
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	08005f40 	.word	0x08005f40

08000d7c <Hard_Brake>:
	char buff[]={'@', MOTOR_ADDRESS, ',', '\r'};
	Motor_Transmit(buff, sizeof(buff));
}

void Hard_Brake()
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
	char buff[]={'@', MOTOR_ADDRESS, '.', '\r'};
 8000d82:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <Hard_Brake+0x1c>)
 8000d84:	607b      	str	r3, [r7, #4]
	Motor_Transmit(buff, sizeof(buff));
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2104      	movs	r1, #4
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 fb66 	bl	800145c <Motor_Transmit>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	0d2e3040 	.word	0x0d2e3040

08000d9c <Hall_Sensor_Triggered>:
 */

#include "main.h"

uint8_t Hall_Sensor_Triggered()
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	if ( HAL_GPIO_ReadPin(HALL_SENSOR_GPIO_Port, HALL_SENSOR_Pin) == GPIO_PIN_RESET)
 8000da0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da8:	f001 fbe2 	bl	8002570 <HAL_GPIO_ReadPin>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <Hall_Sensor_Triggered+0x1a>
	{
		return 1;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e000      	b.n	8000db8 <Hall_Sensor_Triggered+0x1c>
	}
	else
	{
		return 0;
 8000db6:	2300      	movs	r3, #0
	}
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <Read_Motor_Speed>:

uint32_t Read_Motor_Speed()
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
	//TODO implement
}
 8000dc0:	bf00      	nop
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ddc:	f023 0218 	bic.w	r2, r3, #24
 8000de0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
}
 8000e1e:	bf00      	nop
 8000e20:	3714      	adds	r7, #20
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e32:	f001 f873 	bl	8001f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e36:	f000 f8d1 	bl	8000fdc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e3a:	f000 f945 	bl	80010c8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e3e:	f000 fa23 	bl	8001288 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000e42:	f000 f95f 	bl	8001104 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8000e46:	f000 f9a9 	bl	800119c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8000e4a:	f000 f9f5 	bl	8001238 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  state = 0;
 8000e4e:	4b60      	ldr	r3, [pc, #384]	; (8000fd0 <main+0x1a4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
  state_changed = 1;
 8000e54:	4b5f      	ldr	r3, [pc, #380]	; (8000fd4 <main+0x1a8>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	601a      	str	r2, [r3, #0]
  SevenSegment_Off();
 8000e5a:	f000 fcab 	bl	80017b4 <SevenSegment_Off>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SevenSegment_UpdateAllDigits(current_rpm);
 8000e5e:	4b5e      	ldr	r3, [pc, #376]	; (8000fd8 <main+0x1ac>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 fbae 	bl	80015c4 <SevenSegment_UpdateAllDigits>

	  if (state == 0){
 8000e68:	4b59      	ldr	r3, [pc, #356]	; (8000fd0 <main+0x1a4>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d10d      	bne.n	8000e8c <main+0x60>
		  //nothing running, waiting for input
		  // NEW MOTOR: running big motor up until satisfied by pressing button
		  if (state_changed == 1)
 8000e70:	4b58      	ldr	r3, [pc, #352]	; (8000fd4 <main+0x1a8>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d102      	bne.n	8000e7e <main+0x52>
		  {
			  state_changed = 0;
 8000e78:	4b56      	ldr	r3, [pc, #344]	; (8000fd4 <main+0x1a8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
		  }

		  Blue_On();
 8000e7e:	f000 fffb 	bl	8001e78 <Blue_On>
		  Green_Off();
 8000e82:	f000 ffed 	bl	8001e60 <Green_Off>
		  Red_Off();
 8000e86:	f000 ffd3 	bl	8001e30 <Red_Off>
 8000e8a:	e7e8      	b.n	8000e5e <main+0x32>
	  }
	  else if (state == 1){
 8000e8c:	4b50      	ldr	r3, [pc, #320]	; (8000fd0 <main+0x1a4>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d11c      	bne.n	8000ece <main+0xa2>
		  //start motor spinning
		  // NEW MOTOR: ready to launch, waiting for right position
		  if (state_changed == 1)
 8000e94:	4b4f      	ldr	r3, [pc, #316]	; (8000fd4 <main+0x1a8>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d102      	bne.n	8000ea2 <main+0x76>
		  {
#if (ANAHEIM == 1)
				  Arm_Spin_State(ARM_SPEED);
#endif
			  state_changed = 0;
 8000e9c:	4b4d      	ldr	r3, [pc, #308]	; (8000fd4 <main+0x1a8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
		  {
			  state = 2;
			  state_changed = 1;
		  }
#else
		  if (Arm_Launched_In_Position((uint16_t)current_rpm) == 1)
 8000ea2:	4b4d      	ldr	r3, [pc, #308]	; (8000fd8 <main+0x1ac>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 fcf5 	bl	8001898 <Arm_Launched_In_Position>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d105      	bne.n	8000ec0 <main+0x94>
		  {
			  state = 2;
 8000eb4:	4b46      	ldr	r3, [pc, #280]	; (8000fd0 <main+0x1a4>)
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	601a      	str	r2, [r3, #0]
			  state_changed = 1;
 8000eba:	4b46      	ldr	r3, [pc, #280]	; (8000fd4 <main+0x1a8>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]
		  }
#endif

		  Blue_Off();
 8000ec0:	f000 ffe6 	bl	8001e90 <Blue_Off>
		  Green_Off();
 8000ec4:	f000 ffcc 	bl	8001e60 <Green_Off>
		  Red_On();
 8000ec8:	f000 ffa6 	bl	8001e18 <Red_On>
 8000ecc:	e7c7      	b.n	8000e5e <main+0x32>
		  //HAL_Delay(100);
	  }
	  else if (state == 2){
 8000ece:	4b40      	ldr	r3, [pc, #256]	; (8000fd0 <main+0x1a4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d11d      	bne.n	8000f12 <main+0xe6>
		  //motor is up to speed
		  // NEW MOTOR: after launching, slowing down motor
		  if (state_changed == 1)
 8000ed6:	4b3f      	ldr	r3, [pc, #252]	; (8000fd4 <main+0x1a8>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d102      	bne.n	8000ee4 <main+0xb8>
		  {
			  state_changed = 0;
 8000ede:	4b3d      	ldr	r3, [pc, #244]	; (8000fd4 <main+0x1a8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
		  }
#if (ANAHEIM == 0)
		  uint32_t motor_speed = Read_Motor_Speed();
 8000ee4:	f7ff ff6a 	bl	8000dbc <Read_Motor_Speed>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	607b      	str	r3, [r7, #4]
		  SevenSegment_UpdateAllDigits(motor_speed);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f000 fb69 	bl	80015c4 <SevenSegment_UpdateAllDigits>
		  if (motor_speed < 5){
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b04      	cmp	r3, #4
 8000ef6:	d805      	bhi.n	8000f04 <main+0xd8>
			  state = 3;
 8000ef8:	4b35      	ldr	r3, [pc, #212]	; (8000fd0 <main+0x1a4>)
 8000efa:	2203      	movs	r2, #3
 8000efc:	601a      	str	r2, [r3, #0]
			  state_changed = 4;
 8000efe:	4b35      	ldr	r3, [pc, #212]	; (8000fd4 <main+0x1a8>)
 8000f00:	2204      	movs	r2, #4
 8000f02:	601a      	str	r2, [r3, #0]
		  }
#endif

		  Blue_Off();
 8000f04:	f000 ffc4 	bl	8001e90 <Blue_Off>
		  Green_On();
 8000f08:	f000 ff9e 	bl	8001e48 <Green_On>
		  Red_Off();
 8000f0c:	f000 ff90 	bl	8001e30 <Red_Off>
 8000f10:	e7a5      	b.n	8000e5e <main+0x32>
	  }
	  else if (state == 3){
 8000f12:	4b2f      	ldr	r3, [pc, #188]	; (8000fd0 <main+0x1a4>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	d10d      	bne.n	8000f36 <main+0x10a>
		  //ready to launch, waiting for right position
		  // NEW MOTOR: motor stopped, disc launched, press button to restart
		  if (state_changed == 1)
 8000f1a:	4b2e      	ldr	r3, [pc, #184]	; (8000fd4 <main+0x1a8>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d102      	bne.n	8000f28 <main+0xfc>
		  {
			  state_changed = 0;
 8000f22:	4b2c      	ldr	r3, [pc, #176]	; (8000fd4 <main+0x1a8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
			  state = 4;
			  state_changed = 1;
		  }
#endif

		  Blue_Off();
 8000f28:	f000 ffb2 	bl	8001e90 <Blue_Off>
		  Green_On();
 8000f2c:	f000 ff8c 	bl	8001e48 <Green_On>
		  Red_On();
 8000f30:	f000 ff72 	bl	8001e18 <Red_On>
 8000f34:	e793      	b.n	8000e5e <main+0x32>
	  }
	  else if (state == 4){
 8000f36:	4b26      	ldr	r3, [pc, #152]	; (8000fd0 <main+0x1a4>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	d11a      	bne.n	8000f74 <main+0x148>
		  //after launching, slow motor
		  if (state_changed == 1)
 8000f3e:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <main+0x1a8>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d104      	bne.n	8000f50 <main+0x124>
		  {
			  Hard_Brake();
 8000f46:	f7ff ff19 	bl	8000d7c <Hard_Brake>
			  //Coast();
			  state_changed = 0;
 8000f4a:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <main+0x1a8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
		  }

		  if (Arm_Stopped() == 1)
 8000f50:	f000 fc90 	bl	8001874 <Arm_Stopped>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d105      	bne.n	8000f66 <main+0x13a>
		  {
			  state = 5;
 8000f5a:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <main+0x1a4>)
 8000f5c:	2205      	movs	r2, #5
 8000f5e:	601a      	str	r2, [r3, #0]
			  state_changed = 1;
 8000f60:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <main+0x1a8>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	601a      	str	r2, [r3, #0]
		  }

		  Blue_On();
 8000f66:	f000 ff87 	bl	8001e78 <Blue_On>
		  Green_Off();
 8000f6a:	f000 ff79 	bl	8001e60 <Green_Off>
		  Red_Off();
 8000f6e:	f000 ff5f 	bl	8001e30 <Red_Off>
 8000f72:	e774      	b.n	8000e5e <main+0x32>
	  }
	  else if (state == 5){
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <main+0x1a4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b05      	cmp	r3, #5
 8000f7a:	d10d      	bne.n	8000f98 <main+0x16c>
		  //motor stopped, disc launched
		  if (state_changed == 1)
 8000f7c:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <main+0x1a8>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b01      	cmp	r3, #1
 8000f82:	d102      	bne.n	8000f8a <main+0x15e>
		  {
			  state_changed = 0;
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <main+0x1a8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
		  }

		  Blue_On();
 8000f8a:	f000 ff75 	bl	8001e78 <Blue_On>
		  Green_Off();
 8000f8e:	f000 ff67 	bl	8001e60 <Green_Off>
		  Red_On();
 8000f92:	f000 ff41 	bl	8001e18 <Red_On>
 8000f96:	e762      	b.n	8000e5e <main+0x32>
	  }
	  else if (state == 6){
 8000f98:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <main+0x1a4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b06      	cmp	r3, #6
 8000f9e:	d113      	bne.n	8000fc8 <main+0x19c>
		  // manually launch disc
		  if (state_changed == 1)
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <main+0x1a8>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d108      	bne.n	8000fba <main+0x18e>
		  {
			  Launch_Disc_State(ARM_SPEED);
 8000fa8:	20fa      	movs	r0, #250	; 0xfa
 8000faa:	f000 fcc7 	bl	800193c <Launch_Disc_State>
			  state = 4;
 8000fae:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <main+0x1a4>)
 8000fb0:	2204      	movs	r2, #4
 8000fb2:	601a      	str	r2, [r3, #0]
			  state_changed = 1;
 8000fb4:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <main+0x1a8>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	601a      	str	r2, [r3, #0]
			  //state_changed = 0;
		  }

		  Blue_On();
 8000fba:	f000 ff5d 	bl	8001e78 <Blue_On>
		  Green_On();
 8000fbe:	f000 ff43 	bl	8001e48 <Green_On>
		  Red_Off();
 8000fc2:	f000 ff35 	bl	8001e30 <Red_Off>
 8000fc6:	e74a      	b.n	8000e5e <main+0x32>
	  }
	  else{
		  state = 0;
 8000fc8:	4b01      	ldr	r3, [pc, #4]	; (8000fd0 <main+0x1a4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
	  SevenSegment_UpdateAllDigits(current_rpm);
 8000fce:	e746      	b.n	8000e5e <main+0x32>
 8000fd0:	20000490 	.word	0x20000490
 8000fd4:	20000494 	.word	0x20000494
 8000fd8:	20000498 	.word	0x20000498

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b09a      	sub	sp, #104	; 0x68
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0320 	add.w	r3, r7, #32
 8000fe6:	2248      	movs	r2, #72	; 0x48
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f004 f95a 	bl	80052a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]
 8000ffe:	615a      	str	r2, [r3, #20]
 8001000:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8001002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800100c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001010:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8001012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	f023 0303 	bic.w	r3, r3, #3
 800101c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001020:	f043 0301 	orr.w	r3, r3, #1
 8001024:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001026:	f001 fbe3 	bl	80027f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800102a:	2000      	movs	r0, #0
 800102c:	f7ff fece 	bl	8000dcc <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <SystemClock_Config+0xe8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001038:	4a22      	ldr	r2, [pc, #136]	; (80010c4 <SystemClock_Config+0xe8>)
 800103a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <SystemClock_Config+0xe8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800104c:	2327      	movs	r3, #39	; 0x27
 800104e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001050:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001056:	2301      	movs	r3, #1
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800105a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001060:	2301      	movs	r3, #1
 8001062:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001064:	2340      	movs	r3, #64	; 0x40
 8001066:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001068:	2300      	movs	r3, #0
 800106a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800106c:	2360      	movs	r3, #96	; 0x60
 800106e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001070:	2300      	movs	r3, #0
 8001072:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001074:	f107 0320 	add.w	r3, r7, #32
 8001078:	4618      	mov	r0, r3
 800107a:	f001 ff4d 	bl	8002f18 <HAL_RCC_OscConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001084:	f000 fa98 	bl	80015b8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001088:	236f      	movs	r3, #111	; 0x6f
 800108a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800108c:	2302      	movs	r3, #2
 800108e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	2101      	movs	r1, #1
 80010a8:	4618      	mov	r0, r3
 80010aa:	f002 faa9 	bl	8003600 <HAL_RCC_ClockConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80010b4:	f000 fa80 	bl	80015b8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80010b8:	f003 f864 	bl	8004184 <HAL_RCCEx_EnableMSIPLLMode>
}
 80010bc:	bf00      	nop
 80010be:	3768      	adds	r7, #104	; 0x68
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	58000400 	.word	0x58000400

080010c8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b094      	sub	sp, #80	; 0x50
 80010cc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ce:	463b      	mov	r3, r7
 80010d0:	2250      	movs	r2, #80	; 0x50
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f004 f8e5 	bl	80052a4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 80010da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010de:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80010e0:	2300      	movs	r3, #0
 80010e2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e8:	463b      	mov	r3, r7
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 fed4 	bl	8003e98 <HAL_RCCEx_PeriphCLKConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80010f6:	f000 fa5f 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80010fa:	bf00      	nop
 80010fc:	3750      	adds	r7, #80	; 0x50
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001108:	4b22      	ldr	r3, [pc, #136]	; (8001194 <MX_LPUART1_UART_Init+0x90>)
 800110a:	4a23      	ldr	r2, [pc, #140]	; (8001198 <MX_LPUART1_UART_Init+0x94>)
 800110c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 38400;
 800110e:	4b21      	ldr	r3, [pc, #132]	; (8001194 <MX_LPUART1_UART_Init+0x90>)
 8001110:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001114:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001116:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <MX_LPUART1_UART_Init+0x90>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800111c:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <MX_LPUART1_UART_Init+0x90>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <MX_LPUART1_UART_Init+0x90>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_LPUART1_UART_Init+0x90>)
 800112a:	220c      	movs	r2, #12
 800112c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <MX_LPUART1_UART_Init+0x90>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001134:	4b17      	ldr	r3, [pc, #92]	; (8001194 <MX_LPUART1_UART_Init+0x90>)
 8001136:	2200      	movs	r2, #0
 8001138:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <MX_LPUART1_UART_Init+0x90>)
 800113c:	2200      	movs	r2, #0
 800113e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <MX_LPUART1_UART_Init+0x90>)
 8001142:	2200      	movs	r2, #0
 8001144:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001146:	4b13      	ldr	r3, [pc, #76]	; (8001194 <MX_LPUART1_UART_Init+0x90>)
 8001148:	2200      	movs	r2, #0
 800114a:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800114c:	4811      	ldr	r0, [pc, #68]	; (8001194 <MX_LPUART1_UART_Init+0x90>)
 800114e:	f003 f950 	bl	80043f2 <HAL_UART_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001158:	f000 fa2e 	bl	80015b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800115c:	2100      	movs	r1, #0
 800115e:	480d      	ldr	r0, [pc, #52]	; (8001194 <MX_LPUART1_UART_Init+0x90>)
 8001160:	f003 ff6e 	bl	8005040 <HAL_UARTEx_SetTxFifoThreshold>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800116a:	f000 fa25 	bl	80015b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800116e:	2100      	movs	r1, #0
 8001170:	4808      	ldr	r0, [pc, #32]	; (8001194 <MX_LPUART1_UART_Init+0x90>)
 8001172:	f003 ffa3 	bl	80050bc <HAL_UARTEx_SetRxFifoThreshold>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800117c:	f000 fa1c 	bl	80015b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001180:	4804      	ldr	r0, [pc, #16]	; (8001194 <MX_LPUART1_UART_Init+0x90>)
 8001182:	f003 ff24 	bl	8004fce <HAL_UARTEx_DisableFifoMode>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800118c:	f000 fa14 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	2000008c 	.word	0x2000008c
 8001198:	40008000 	.word	0x40008000

0800119c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011a0:	4b23      	ldr	r3, [pc, #140]	; (8001230 <MX_USART1_UART_Init+0x94>)
 80011a2:	4a24      	ldr	r2, [pc, #144]	; (8001234 <MX_USART1_UART_Init+0x98>)
 80011a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011a6:	4b22      	ldr	r3, [pc, #136]	; (8001230 <MX_USART1_UART_Init+0x94>)
 80011a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_7B;
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <MX_USART1_UART_Init+0x94>)
 80011b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011b4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <MX_USART1_UART_Init+0x94>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <MX_USART1_UART_Init+0x94>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <MX_USART1_UART_Init+0x94>)
 80011c4:	220c      	movs	r2, #12
 80011c6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <MX_USART1_UART_Init+0x94>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <MX_USART1_UART_Init+0x94>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <MX_USART1_UART_Init+0x94>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <MX_USART1_UART_Init+0x94>)
 80011dc:	2200      	movs	r2, #0
 80011de:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <MX_USART1_UART_Init+0x94>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011e6:	4812      	ldr	r0, [pc, #72]	; (8001230 <MX_USART1_UART_Init+0x94>)
 80011e8:	f003 f903 	bl	80043f2 <HAL_UART_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80011f2:	f000 f9e1 	bl	80015b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011f6:	2100      	movs	r1, #0
 80011f8:	480d      	ldr	r0, [pc, #52]	; (8001230 <MX_USART1_UART_Init+0x94>)
 80011fa:	f003 ff21 	bl	8005040 <HAL_UARTEx_SetTxFifoThreshold>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001204:	f000 f9d8 	bl	80015b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001208:	2100      	movs	r1, #0
 800120a:	4809      	ldr	r0, [pc, #36]	; (8001230 <MX_USART1_UART_Init+0x94>)
 800120c:	f003 ff56 	bl	80050bc <HAL_UARTEx_SetRxFifoThreshold>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001216:	f000 f9cf 	bl	80015b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800121a:	4805      	ldr	r0, [pc, #20]	; (8001230 <MX_USART1_UART_Init+0x94>)
 800121c:	f003 fed7 	bl	8004fce <HAL_UARTEx_DisableFifoMode>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001226:	f000 f9c7 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000120 	.word	0x20000120
 8001234:	40013800 	.word	0x40013800

08001238 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800123c:	4b10      	ldr	r3, [pc, #64]	; (8001280 <MX_USB_PCD_Init+0x48>)
 800123e:	4a11      	ldr	r2, [pc, #68]	; (8001284 <MX_USB_PCD_Init+0x4c>)
 8001240:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_USB_PCD_Init+0x48>)
 8001244:	2208      	movs	r2, #8
 8001246:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8001248:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <MX_USB_PCD_Init+0x48>)
 800124a:	2202      	movs	r2, #2
 800124c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <MX_USB_PCD_Init+0x48>)
 8001250:	2202      	movs	r2, #2
 8001252:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8001254:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <MX_USB_PCD_Init+0x48>)
 8001256:	2200      	movs	r2, #0
 8001258:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <MX_USB_PCD_Init+0x48>)
 800125c:	2200      	movs	r2, #0
 800125e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <MX_USB_PCD_Init+0x48>)
 8001262:	2200      	movs	r2, #0
 8001264:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <MX_USB_PCD_Init+0x48>)
 8001268:	2200      	movs	r2, #0
 800126a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_USB_PCD_Init+0x48>)
 800126e:	f001 f9c7 	bl	8002600 <HAL_PCD_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8001278:	f000 f99e 	bl	80015b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200001b4 	.word	0x200001b4
 8001284:	40006800 	.word	0x40006800

08001288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800129c:	2004      	movs	r0, #4
 800129e:	f7ff fdab 	bl	8000df8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a2:	2001      	movs	r0, #1
 80012a4:	f7ff fda8 	bl	8000df8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a8:	2002      	movs	r0, #2
 80012aa:	f7ff fda5 	bl	8000df8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ae:	2008      	movs	r0, #8
 80012b0:	f7ff fda2 	bl	8000df8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Solenoid_Pin|digit1_Pin|digit2_Pin|digit3_Pin
 80012b4:	2200      	movs	r2, #0
 80012b6:	f240 11e1 	movw	r1, #481	; 0x1e1
 80012ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012be:	f001 f96f 	bl	80025a0 <HAL_GPIO_WritePin>
                          |digit4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, segmentG_Pin|segmentA_Pin, GPIO_PIN_SET);
 80012c2:	2201      	movs	r2, #1
 80012c4:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80012c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012cc:	f001 f968 	bl	80025a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	2123      	movs	r1, #35	; 0x23
 80012d4:	4847      	ldr	r0, [pc, #284]	; (80013f4 <MX_GPIO_Init+0x16c>)
 80012d6:	f001 f963 	bl	80025a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, segmentF_Pin|segmentE_Pin|segmentD_Pin|segmentC_Pin, GPIO_PIN_SET);
 80012da:	2201      	movs	r2, #1
 80012dc:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80012e0:	4844      	ldr	r0, [pc, #272]	; (80013f4 <MX_GPIO_Init+0x16c>)
 80012e2:	f001 f95d 	bl	80025a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(segmentB_GPIO_Port, segmentB_Pin, GPIO_PIN_SET);
 80012e6:	2201      	movs	r2, #1
 80012e8:	2140      	movs	r1, #64	; 0x40
 80012ea:	4843      	ldr	r0, [pc, #268]	; (80013f8 <MX_GPIO_Init+0x170>)
 80012ec:	f001 f958 	bl	80025a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Solenoid_Pin */
  GPIO_InitStruct.Pin = Solenoid_Pin;
 80012f0:	2301      	movs	r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Solenoid_GPIO_Port, &GPIO_InitStruct);
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	4619      	mov	r1, r3
 8001304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001308:	f000 ffc2 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pins : segmentG_Pin digit1_Pin digit2_Pin digit3_Pin
                           digit4_Pin segmentA_Pin */
  GPIO_InitStruct.Pin = segmentG_Pin|digit1_Pin|digit2_Pin|digit3_Pin
 800130c:	f44f 63be 	mov.w	r3, #1520	; 0x5f0
 8001310:	607b      	str	r3, [r7, #4]
                          |digit4_Pin|segmentA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001312:	2301      	movs	r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	4619      	mov	r1, r3
 8001322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001326:	f000 ffb3 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pin : HALL_SENSOR_Pin */
  GPIO_InitStruct.Pin = HALL_SENSOR_Pin;
 800132a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800132e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001330:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001334:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001336:	2301      	movs	r3, #1
 8001338:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(HALL_SENSOR_GPIO_Port, &GPIO_InitStruct);
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	4619      	mov	r1, r3
 800133e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001342:	f000 ffa5 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001346:	2310      	movs	r3, #16
 8001348:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800134a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800134e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001350:	2301      	movs	r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	4619      	mov	r1, r3
 8001358:	4827      	ldr	r0, [pc, #156]	; (80013f8 <MX_GPIO_Init+0x170>)
 800135a:	f000 ff99 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin segmentF_Pin segmentE_Pin
                           segmentD_Pin segmentC_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|segmentF_Pin|segmentE_Pin
 800135e:	f24f 0323 	movw	r3, #61475	; 0xf023
 8001362:	607b      	str	r3, [r7, #4]
                          |segmentD_Pin|segmentC_Pin|LD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	2301      	movs	r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	4619      	mov	r1, r3
 8001374:	481f      	ldr	r0, [pc, #124]	; (80013f4 <MX_GPIO_Init+0x16c>)
 8001376:	f000 ff8b 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pin : segmentB_Pin */
  GPIO_InitStruct.Pin = segmentB_Pin;
 800137a:	2340      	movs	r3, #64	; 0x40
 800137c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137e:	2301      	movs	r3, #1
 8001380:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(segmentB_GPIO_Port, &GPIO_InitStruct);
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	4619      	mov	r1, r3
 800138e:	481a      	ldr	r0, [pc, #104]	; (80013f8 <MX_GPIO_Init+0x170>)
 8001390:	f000 ff7e 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001394:	2303      	movs	r3, #3
 8001396:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001398:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800139c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800139e:	2301      	movs	r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	4619      	mov	r1, r3
 80013a6:	4815      	ldr	r0, [pc, #84]	; (80013fc <MX_GPIO_Init+0x174>)
 80013a8:	f000 ff72 	bl	8002290 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2100      	movs	r1, #0
 80013b0:	2006      	movs	r0, #6
 80013b2:	f000 ff38 	bl	8002226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013b6:	2006      	movs	r0, #6
 80013b8:	f000 ff4f 	bl	800225a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80013bc:	2200      	movs	r2, #0
 80013be:	2100      	movs	r1, #0
 80013c0:	2007      	movs	r0, #7
 80013c2:	f000 ff30 	bl	8002226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80013c6:	2007      	movs	r0, #7
 80013c8:	f000 ff47 	bl	800225a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2100      	movs	r1, #0
 80013d0:	200a      	movs	r0, #10
 80013d2:	f000 ff28 	bl	8002226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80013d6:	200a      	movs	r0, #10
 80013d8:	f000 ff3f 	bl	800225a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013dc:	2200      	movs	r2, #0
 80013de:	2100      	movs	r1, #0
 80013e0:	2017      	movs	r0, #23
 80013e2:	f000 ff20 	bl	8002226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013e6:	2017      	movs	r0, #23
 80013e8:	f000 ff37 	bl	800225a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013ec:	bf00      	nop
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	48000400 	.word	0x48000400
 80013f8:	48000800 	.word	0x48000800
 80013fc:	48000c00 	.word	0x48000c00

08001400 <B1_Pressed>:

/* USER CODE BEGIN 4 */
void B1_Pressed()
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
	{
		state = 0;
		state_changed = 1;
	}
#else
	if (state == 0){
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <B1_Pressed+0x38>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d106      	bne.n	800141a <B1_Pressed+0x1a>
		state = 1;
 800140c:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <B1_Pressed+0x38>)
 800140e:	2201      	movs	r2, #1
 8001410:	601a      	str	r2, [r3, #0]
		state_changed = 1;
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <B1_Pressed+0x3c>)
 8001414:	2201      	movs	r2, #1
 8001416:	601a      	str	r2, [r3, #0]
	else if (state == 3){
		state = 0;
		state_changed = 1;
	}
#endif
}
 8001418:	e009      	b.n	800142e <B1_Pressed+0x2e>
	else if (state == 3){
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <B1_Pressed+0x38>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2b03      	cmp	r3, #3
 8001420:	d105      	bne.n	800142e <B1_Pressed+0x2e>
		state = 0;
 8001422:	4b05      	ldr	r3, [pc, #20]	; (8001438 <B1_Pressed+0x38>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
		state_changed = 1;
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <B1_Pressed+0x3c>)
 800142a:	2201      	movs	r2, #1
 800142c:	601a      	str	r2, [r3, #0]
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	20000490 	.word	0x20000490
 800143c:	20000494 	.word	0x20000494

08001440 <B2_Pressed>:

void B2_Pressed()
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
		Launch_Disc_State(ARM_SPEED);
		state = 4;
		state_changed = 1;
		*/
	}
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <B3_Pressed>:

void B3_Pressed()
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
#if (ANAHEIM == 1)
	state = 4;
	state_changed = 1;
#endif
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <Motor_Transmit>:

void Motor_Transmit(char tx_buff[], uint8_t size)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)tx_buff, size, 10);
 8001468:	78fb      	ldrb	r3, [r7, #3]
 800146a:	b29a      	uxth	r2, r3
 800146c:	230a      	movs	r3, #10
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	4803      	ldr	r0, [pc, #12]	; (8001480 <Motor_Transmit+0x24>)
 8001472:	f003 f80e 	bl	8004492 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart1, (uint8_t*)tx_buff, size, 10);
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	2000008c 	.word	0x2000008c

08001484 <Motor_Receive>:

HAL_StatusTypeDef Motor_Receive(uint8_t rx_buff[])
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	//return HAL_UART_Receive(&hlpuart1, rx_buff, size, 10);
	//return HAL_UART_Receive(&huart1, rx_buff, size, 10);

	uint8_t rx_char[1];
	uint8_t i = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status = HAL_UART_Receive(&hlpuart1, rx_char, 1, 10000);
 8001490:	f107 010c 	add.w	r1, r7, #12
 8001494:	f242 7310 	movw	r3, #10000	; 0x2710
 8001498:	2201      	movs	r2, #1
 800149a:	4819      	ldr	r0, [pc, #100]	; (8001500 <Motor_Receive+0x7c>)
 800149c:	f003 f887 	bl	80045ae <HAL_UART_Receive>
 80014a0:	4603      	mov	r3, r0
 80014a2:	73bb      	strb	r3, [r7, #14]
	if (status != HAL_OK)
 80014a4:	7bbb      	ldrb	r3, [r7, #14]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <Motor_Receive+0x2a>
	{
		return 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	e023      	b.n	80014f6 <Motor_Receive+0x72>
	}
	rx_buff[i] = rx_char[0];
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	4413      	add	r3, r2
 80014b4:	7b3a      	ldrb	r2, [r7, #12]
 80014b6:	701a      	strb	r2, [r3, #0]
	i++;
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	3301      	adds	r3, #1
 80014bc:	73fb      	strb	r3, [r7, #15]
	while (rx_char[0] != '\r')
 80014be:	e016      	b.n	80014ee <Motor_Receive+0x6a>
	{
		status = HAL_UART_Receive(&hlpuart1, rx_char, 1, 10000);
 80014c0:	f107 010c 	add.w	r1, r7, #12
 80014c4:	f242 7310 	movw	r3, #10000	; 0x2710
 80014c8:	2201      	movs	r2, #1
 80014ca:	480d      	ldr	r0, [pc, #52]	; (8001500 <Motor_Receive+0x7c>)
 80014cc:	f003 f86f 	bl	80045ae <HAL_UART_Receive>
 80014d0:	4603      	mov	r3, r0
 80014d2:	73bb      	strb	r3, [r7, #14]
		if (status != HAL_OK)
 80014d4:	7bbb      	ldrb	r3, [r7, #14]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <Motor_Receive+0x5a>
		{
			return 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	e00b      	b.n	80014f6 <Motor_Receive+0x72>
		}
		rx_buff[i] = rx_char[0];
 80014de:	7bfb      	ldrb	r3, [r7, #15]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	4413      	add	r3, r2
 80014e4:	7b3a      	ldrb	r2, [r7, #12]
 80014e6:	701a      	strb	r2, [r3, #0]
		i++;
 80014e8:	7bfb      	ldrb	r3, [r7, #15]
 80014ea:	3301      	adds	r3, #1
 80014ec:	73fb      	strb	r3, [r7, #15]
	while (rx_char[0] != '\r')
 80014ee:	7b3b      	ldrb	r3, [r7, #12]
 80014f0:	2b0d      	cmp	r3, #13
 80014f2:	d1e5      	bne.n	80014c0 <Motor_Receive+0x3c>
	}
	return i;
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2000008c 	.word	0x2000008c

08001504 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_PIN == HALL_SENSOR_Pin){
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001514:	d130      	bne.n	8001578 <HAL_GPIO_EXTI_Callback+0x74>
		uint32_t curr_tick = HAL_GetTick();
 8001516:	f000 fd6f 	bl	8001ff8 <HAL_GetTick>
 800151a:	60f8      	str	r0, [r7, #12]
		uint32_t time_since_last = curr_tick - hs_prev_tick;
 800151c:	4b21      	ldr	r3, [pc, #132]	; (80015a4 <HAL_GPIO_EXTI_Callback+0xa0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	60bb      	str	r3, [r7, #8]
		current_rpm = (uint32_t)(1.0 / time_since_last * 60.0 * 1000.0);
 8001526:	68b8      	ldr	r0, [r7, #8]
 8001528:	f7fe ffc4 	bl	80004b4 <__aeabi_ui2d>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	f04f 0000 	mov.w	r0, #0
 8001534:	491c      	ldr	r1, [pc, #112]	; (80015a8 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001536:	f7ff f961 	bl	80007fc <__aeabi_ddiv>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	f04f 0200 	mov.w	r2, #0
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <HAL_GPIO_EXTI_Callback+0xa8>)
 8001548:	f7ff f82e 	bl	80005a8 <__aeabi_dmul>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <HAL_GPIO_EXTI_Callback+0xac>)
 800155a:	f7ff f825 	bl	80005a8 <__aeabi_dmul>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff fa31 	bl	80009cc <__aeabi_d2uiz>
 800156a:	4603      	mov	r3, r0
 800156c:	4a11      	ldr	r2, [pc, #68]	; (80015b4 <HAL_GPIO_EXTI_Callback+0xb0>)
 800156e:	6013      	str	r3, [r2, #0]
		hs_prev_tick = curr_tick;
 8001570:	4a0c      	ldr	r2, [pc, #48]	; (80015a4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6013      	str	r3, [r2, #0]
	}
	else if(GPIO_PIN == B1_Pin){B1_Pressed();}
	else if(GPIO_PIN == B2_Pin){B2_Pressed();}
	else if(GPIO_PIN == B3_Pin){B3_Pressed();}
}
 8001576:	e010      	b.n	800159a <HAL_GPIO_EXTI_Callback+0x96>
	else if(GPIO_PIN == B1_Pin){B1_Pressed();}
 8001578:	88fb      	ldrh	r3, [r7, #6]
 800157a:	2b10      	cmp	r3, #16
 800157c:	d102      	bne.n	8001584 <HAL_GPIO_EXTI_Callback+0x80>
 800157e:	f7ff ff3f 	bl	8001400 <B1_Pressed>
}
 8001582:	e00a      	b.n	800159a <HAL_GPIO_EXTI_Callback+0x96>
	else if(GPIO_PIN == B2_Pin){B2_Pressed();}
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d102      	bne.n	8001590 <HAL_GPIO_EXTI_Callback+0x8c>
 800158a:	f7ff ff59 	bl	8001440 <B2_Pressed>
}
 800158e:	e004      	b.n	800159a <HAL_GPIO_EXTI_Callback+0x96>
	else if(GPIO_PIN == B3_Pin){B3_Pressed();}
 8001590:	88fb      	ldrh	r3, [r7, #6]
 8001592:	2b02      	cmp	r3, #2
 8001594:	d101      	bne.n	800159a <HAL_GPIO_EXTI_Callback+0x96>
 8001596:	f7ff ff5a 	bl	800144e <B3_Pressed>
}
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	2000049c 	.word	0x2000049c
 80015a8:	3ff00000 	.word	0x3ff00000
 80015ac:	404e0000 	.word	0x404e0000
 80015b0:	408f4000 	.word	0x408f4000
 80015b4:	20000498 	.word	0x20000498

080015b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015bc:	b672      	cpsid	i
}
 80015be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <Error_Handler+0x8>
	...

080015c4 <SevenSegment_UpdateAllDigits>:
		0x7f,
		0x67
};

// Call this function as often as possible, each digit only flashes for a few ms
void SevenSegment_UpdateAllDigits(uint32_t value){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	uint8_t tmp_digit1 = value/1000;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a45      	ldr	r2, [pc, #276]	; (80016e4 <SevenSegment_UpdateAllDigits+0x120>)
 80015d0:	fba2 2303 	umull	r2, r3, r2, r3
 80015d4:	099b      	lsrs	r3, r3, #6
 80015d6:	73fb      	strb	r3, [r7, #15]
	uint8_t tmp_digit2 = ((value/100)%10);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4a43      	ldr	r2, [pc, #268]	; (80016e8 <SevenSegment_UpdateAllDigits+0x124>)
 80015dc:	fba2 2303 	umull	r2, r3, r2, r3
 80015e0:	0959      	lsrs	r1, r3, #5
 80015e2:	4b42      	ldr	r3, [pc, #264]	; (80016ec <SevenSegment_UpdateAllDigits+0x128>)
 80015e4:	fba3 2301 	umull	r2, r3, r3, r1
 80015e8:	08da      	lsrs	r2, r3, #3
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	1aca      	subs	r2, r1, r3
 80015f4:	4613      	mov	r3, r2
 80015f6:	73bb      	strb	r3, [r7, #14]
	uint8_t tmp_digit3 = ((value/10)%10);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a3c      	ldr	r2, [pc, #240]	; (80016ec <SevenSegment_UpdateAllDigits+0x128>)
 80015fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001600:	08d9      	lsrs	r1, r3, #3
 8001602:	4b3a      	ldr	r3, [pc, #232]	; (80016ec <SevenSegment_UpdateAllDigits+0x128>)
 8001604:	fba3 2301 	umull	r2, r3, r3, r1
 8001608:	08da      	lsrs	r2, r3, #3
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	1aca      	subs	r2, r1, r3
 8001614:	4613      	mov	r3, r2
 8001616:	737b      	strb	r3, [r7, #13]
	uint8_t tmp_digit4 = (value%10);
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	4b34      	ldr	r3, [pc, #208]	; (80016ec <SevenSegment_UpdateAllDigits+0x128>)
 800161c:	fba3 2301 	umull	r2, r3, r3, r1
 8001620:	08da      	lsrs	r2, r3, #3
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	1aca      	subs	r2, r1, r3
 800162c:	4613      	mov	r3, r2
 800162e:	733b      	strb	r3, [r7, #12]

	SevenSegment_UpdateDigit(segmentNumber[tmp_digit1]);
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	4a2f      	ldr	r2, [pc, #188]	; (80016f0 <SevenSegment_UpdateAllDigits+0x12c>)
 8001634:	5cd3      	ldrb	r3, [r2, r3]
 8001636:	4618      	mov	r0, r3
 8001638:	f000 f85c 	bl	80016f4 <SevenSegment_UpdateDigit>
	D1_LOW;
 800163c:	2200      	movs	r2, #0
 800163e:	2120      	movs	r1, #32
 8001640:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001644:	f000 ffac 	bl	80025a0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001648:	2002      	movs	r0, #2
 800164a:	f000 fced 	bl	8002028 <HAL_Delay>
	D1_HIGH;
 800164e:	2201      	movs	r2, #1
 8001650:	2120      	movs	r1, #32
 8001652:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001656:	f000 ffa3 	bl	80025a0 <HAL_GPIO_WritePin>

	SevenSegment_UpdateDigit(segmentNumber[tmp_digit2]);
 800165a:	7bbb      	ldrb	r3, [r7, #14]
 800165c:	4a24      	ldr	r2, [pc, #144]	; (80016f0 <SevenSegment_UpdateAllDigits+0x12c>)
 800165e:	5cd3      	ldrb	r3, [r2, r3]
 8001660:	4618      	mov	r0, r3
 8001662:	f000 f847 	bl	80016f4 <SevenSegment_UpdateDigit>
	D2_LOW;
 8001666:	2200      	movs	r2, #0
 8001668:	2140      	movs	r1, #64	; 0x40
 800166a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800166e:	f000 ff97 	bl	80025a0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001672:	2002      	movs	r0, #2
 8001674:	f000 fcd8 	bl	8002028 <HAL_Delay>
	D2_HIGH;
 8001678:	2201      	movs	r2, #1
 800167a:	2140      	movs	r1, #64	; 0x40
 800167c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001680:	f000 ff8e 	bl	80025a0 <HAL_GPIO_WritePin>

	SevenSegment_UpdateDigit(segmentNumber[tmp_digit3]);
 8001684:	7b7b      	ldrb	r3, [r7, #13]
 8001686:	4a1a      	ldr	r2, [pc, #104]	; (80016f0 <SevenSegment_UpdateAllDigits+0x12c>)
 8001688:	5cd3      	ldrb	r3, [r2, r3]
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f832 	bl	80016f4 <SevenSegment_UpdateDigit>
	D3_LOW;
 8001690:	2200      	movs	r2, #0
 8001692:	2180      	movs	r1, #128	; 0x80
 8001694:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001698:	f000 ff82 	bl	80025a0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 800169c:	2002      	movs	r0, #2
 800169e:	f000 fcc3 	bl	8002028 <HAL_Delay>
	D3_HIGH;
 80016a2:	2201      	movs	r2, #1
 80016a4:	2180      	movs	r1, #128	; 0x80
 80016a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016aa:	f000 ff79 	bl	80025a0 <HAL_GPIO_WritePin>

	SevenSegment_UpdateDigit(segmentNumber[tmp_digit4]);
 80016ae:	7b3b      	ldrb	r3, [r7, #12]
 80016b0:	4a0f      	ldr	r2, [pc, #60]	; (80016f0 <SevenSegment_UpdateAllDigits+0x12c>)
 80016b2:	5cd3      	ldrb	r3, [r2, r3]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 f81d 	bl	80016f4 <SevenSegment_UpdateDigit>
	D4_LOW;
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c4:	f000 ff6c 	bl	80025a0 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 80016c8:	2002      	movs	r0, #2
 80016ca:	f000 fcad 	bl	8002028 <HAL_Delay>
	D4_HIGH;
 80016ce:	2201      	movs	r2, #1
 80016d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d8:	f000 ff62 	bl	80025a0 <HAL_GPIO_WritePin>
}
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	10624dd3 	.word	0x10624dd3
 80016e8:	51eb851f 	.word	0x51eb851f
 80016ec:	cccccccd 	.word	0xcccccccd
 80016f0:	20000008 	.word	0x20000008

080016f4 <SevenSegment_UpdateDigit>:

void SevenSegment_UpdateDigit(uint8_t number){
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(segmentA_GPIO_Port, segmentA_Pin, ((number>>0)&0x01));
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	b2db      	uxtb	r3, r3
 8001706:	461a      	mov	r2, r3
 8001708:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800170c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001710:	f000 ff46 	bl	80025a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentB_GPIO_Port, segmentB_Pin, ((number>>1)&0x01));
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	085b      	lsrs	r3, r3, #1
 8001718:	b2db      	uxtb	r3, r3
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	b2db      	uxtb	r3, r3
 8001720:	461a      	mov	r2, r3
 8001722:	2140      	movs	r1, #64	; 0x40
 8001724:	4821      	ldr	r0, [pc, #132]	; (80017ac <SevenSegment_UpdateDigit+0xb8>)
 8001726:	f000 ff3b 	bl	80025a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentC_GPIO_Port, segmentC_Pin, ((number>>2)&0x01));
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	089b      	lsrs	r3, r3, #2
 800172e:	b2db      	uxtb	r3, r3
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	b2db      	uxtb	r3, r3
 8001736:	461a      	mov	r2, r3
 8001738:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800173c:	481c      	ldr	r0, [pc, #112]	; (80017b0 <SevenSegment_UpdateDigit+0xbc>)
 800173e:	f000 ff2f 	bl	80025a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentD_GPIO_Port, segmentD_Pin, ((number>>3)&0x01));
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	08db      	lsrs	r3, r3, #3
 8001746:	b2db      	uxtb	r3, r3
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	b2db      	uxtb	r3, r3
 800174e:	461a      	mov	r2, r3
 8001750:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001754:	4816      	ldr	r0, [pc, #88]	; (80017b0 <SevenSegment_UpdateDigit+0xbc>)
 8001756:	f000 ff23 	bl	80025a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentE_GPIO_Port, segmentE_Pin, ((number>>4)&0x01));
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	091b      	lsrs	r3, r3, #4
 800175e:	b2db      	uxtb	r3, r3
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	b2db      	uxtb	r3, r3
 8001766:	461a      	mov	r2, r3
 8001768:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800176c:	4810      	ldr	r0, [pc, #64]	; (80017b0 <SevenSegment_UpdateDigit+0xbc>)
 800176e:	f000 ff17 	bl	80025a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentF_GPIO_Port, segmentF_Pin, ((number>>5)&0x01));
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	095b      	lsrs	r3, r3, #5
 8001776:	b2db      	uxtb	r3, r3
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	b2db      	uxtb	r3, r3
 800177e:	461a      	mov	r2, r3
 8001780:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001784:	480a      	ldr	r0, [pc, #40]	; (80017b0 <SevenSegment_UpdateDigit+0xbc>)
 8001786:	f000 ff0b 	bl	80025a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentG_GPIO_Port, segmentG_Pin, ((number>>6)&0x01));
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	099b      	lsrs	r3, r3, #6
 800178e:	b2db      	uxtb	r3, r3
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	b2db      	uxtb	r3, r3
 8001796:	461a      	mov	r2, r3
 8001798:	2110      	movs	r1, #16
 800179a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179e:	f000 feff 	bl	80025a0 <HAL_GPIO_WritePin>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	48000800 	.word	0x48000800
 80017b0:	48000400 	.word	0x48000400

080017b4 <SevenSegment_Off>:

void SevenSegment_Off(){
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	// reset segment pins to low/OFF (set to high/ON)
	HAL_GPIO_WritePin(segmentA_GPIO_Port, segmentA_Pin, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c2:	f000 feed 	bl	80025a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentB_GPIO_Port, segmentB_Pin, GPIO_PIN_RESET);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2140      	movs	r1, #64	; 0x40
 80017ca:	481e      	ldr	r0, [pc, #120]	; (8001844 <SevenSegment_Off+0x90>)
 80017cc:	f000 fee8 	bl	80025a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentC_GPIO_Port, segmentC_Pin, GPIO_PIN_RESET);
 80017d0:	2200      	movs	r2, #0
 80017d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017d6:	481c      	ldr	r0, [pc, #112]	; (8001848 <SevenSegment_Off+0x94>)
 80017d8:	f000 fee2 	bl	80025a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentD_GPIO_Port, segmentD_Pin, GPIO_PIN_RESET);
 80017dc:	2200      	movs	r2, #0
 80017de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017e2:	4819      	ldr	r0, [pc, #100]	; (8001848 <SevenSegment_Off+0x94>)
 80017e4:	f000 fedc 	bl	80025a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentE_GPIO_Port, segmentE_Pin, GPIO_PIN_RESET);
 80017e8:	2200      	movs	r2, #0
 80017ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ee:	4816      	ldr	r0, [pc, #88]	; (8001848 <SevenSegment_Off+0x94>)
 80017f0:	f000 fed6 	bl	80025a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentF_GPIO_Port, segmentF_Pin, GPIO_PIN_RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017fa:	4813      	ldr	r0, [pc, #76]	; (8001848 <SevenSegment_Off+0x94>)
 80017fc:	f000 fed0 	bl	80025a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(segmentG_GPIO_Port, segmentG_Pin, GPIO_PIN_RESET);
 8001800:	2200      	movs	r2, #0
 8001802:	2110      	movs	r1, #16
 8001804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001808:	f000 feca 	bl	80025a0 <HAL_GPIO_WritePin>

	// set all digit (grounds) to high/OFF (reset to low/ON)
	D1_HIGH;
 800180c:	2201      	movs	r2, #1
 800180e:	2120      	movs	r1, #32
 8001810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001814:	f000 fec4 	bl	80025a0 <HAL_GPIO_WritePin>
	D2_HIGH;
 8001818:	2201      	movs	r2, #1
 800181a:	2140      	movs	r1, #64	; 0x40
 800181c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001820:	f000 febe 	bl	80025a0 <HAL_GPIO_WritePin>
	D3_HIGH;
 8001824:	2201      	movs	r2, #1
 8001826:	2180      	movs	r1, #128	; 0x80
 8001828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182c:	f000 feb8 	bl	80025a0 <HAL_GPIO_WritePin>
	D4_HIGH;
 8001830:	2201      	movs	r2, #1
 8001832:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183a:	f000 feb1 	bl	80025a0 <HAL_GPIO_WritePin>
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	48000800 	.word	0x48000800
 8001848:	48000400 	.word	0x48000400

0800184c <Solenoid_Up>:

#include "main.h"
#include "solenoid.h"

void Solenoid_Up()
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Solenoid_GPIO_Port, Solenoid_Pin, GPIO_PIN_SET);
 8001850:	2201      	movs	r2, #1
 8001852:	2101      	movs	r1, #1
 8001854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001858:	f000 fea2 	bl	80025a0 <HAL_GPIO_WritePin>
}
 800185c:	bf00      	nop
 800185e:	bd80      	pop	{r7, pc}

08001860 <Solenoid_Down>:

void Solenoid_Down()
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Solenoid_GPIO_Port, Solenoid_Pin, GPIO_PIN_RESET);
 8001864:	2200      	movs	r2, #0
 8001866:	2101      	movs	r1, #1
 8001868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186c:	f000 fe98 	bl	80025a0 <HAL_GPIO_WritePin>
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}

08001874 <Arm_Stopped>:
		return 0;
	}
}

uint8_t Arm_Stopped()
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
	uint16_t cur_motor_speed = Verify_Current_Speed();
 800187a:	f7ff fa45 	bl	8000d08 <Verify_Current_Speed>
 800187e:	4603      	mov	r3, r0
 8001880:	80fb      	strh	r3, [r7, #6]

	if (cur_motor_speed < MOTOR_STOP_TOL)
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	2b04      	cmp	r3, #4
 8001886:	d801      	bhi.n	800188c <Arm_Stopped+0x18>
	{
		return 1;
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <Arm_Stopped+0x1a>
	}
	else
	{
		return 0;
 800188c:	2300      	movs	r3, #0
	}
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
	...

08001898 <Arm_Launched_In_Position>:

uint8_t Arm_Launched_In_Position(uint16_t set_arm_speed)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	80fb      	strh	r3, [r7, #6]
	uint16_t set_motor_speed = Calc_Big_Motor_Speed(set_arm_speed);
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 f86a 	bl	800197e <Calc_Big_Motor_Speed>
 80018aa:	4603      	mov	r3, r0
 80018ac:	81fb      	strh	r3, [r7, #14]
	uint16_t launch_delay = Calc_Launch_Delay(set_motor_speed);
 80018ae:	89fb      	ldrh	r3, [r7, #14]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f000 f873 	bl	800199c <Calc_Launch_Delay>
 80018b6:	4603      	mov	r3, r0
 80018b8:	81bb      	strh	r3, [r7, #12]

	if (Hall_Sensor_Triggered() == 1)
 80018ba:	f7ff fa6f 	bl	8000d9c <Hall_Sensor_Triggered>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d130      	bne.n	8001926 <Arm_Launched_In_Position+0x8e>
	{
		HAL_Delay(launch_delay);
 80018c4:	89bb      	ldrh	r3, [r7, #12]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 fbae 	bl	8002028 <HAL_Delay>
		Solenoid_Up();
 80018cc:	f7ff ffbe 	bl	800184c <Solenoid_Up>
		HAL_Delay(1.0/set_arm_speed*60.0*1000.0); //wait for full revolution to confirm launched
 80018d0:	88fb      	ldrh	r3, [r7, #6]
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fdfe 	bl	80004d4 <__aeabi_i2d>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	f04f 0000 	mov.w	r0, #0
 80018e0:	4913      	ldr	r1, [pc, #76]	; (8001930 <Arm_Launched_In_Position+0x98>)
 80018e2:	f7fe ff8b 	bl	80007fc <__aeabi_ddiv>
 80018e6:	4602      	mov	r2, r0
 80018e8:	460b      	mov	r3, r1
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <Arm_Launched_In_Position+0x9c>)
 80018f4:	f7fe fe58 	bl	80005a8 <__aeabi_dmul>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <Arm_Launched_In_Position+0xa0>)
 8001906:	f7fe fe4f 	bl	80005a8 <__aeabi_dmul>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	f7ff f85b 	bl	80009cc <__aeabi_d2uiz>
 8001916:	4603      	mov	r3, r0
 8001918:	4618      	mov	r0, r3
 800191a:	f000 fb85 	bl	8002028 <HAL_Delay>
		Solenoid_Down();
 800191e:	f7ff ff9f 	bl	8001860 <Solenoid_Down>
		return 1;
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <Arm_Launched_In_Position+0x90>
	}
	else
	{
		return 0;
 8001926:	2300      	movs	r3, #0
	}
}
 8001928:	4618      	mov	r0, r3
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	3ff00000 	.word	0x3ff00000
 8001934:	404e0000 	.word	0x404e0000
 8001938:	408f4000 	.word	0x408f4000

0800193c <Launch_Disc_State>:

void Launch_Disc_State(uint16_t set_arm_speed)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	80fb      	strh	r3, [r7, #6]
	uint16_t set_motor_speed = Calc_Big_Motor_Speed(set_arm_speed);
 8001946:	88fb      	ldrh	r3, [r7, #6]
 8001948:	4618      	mov	r0, r3
 800194a:	f000 f818 	bl	800197e <Calc_Big_Motor_Speed>
 800194e:	4603      	mov	r3, r0
 8001950:	81fb      	strh	r3, [r7, #14]
	uint16_t launch_delay = Calc_Launch_Delay(set_motor_speed);
 8001952:	89fb      	ldrh	r3, [r7, #14]
 8001954:	4618      	mov	r0, r3
 8001956:	f000 f821 	bl	800199c <Calc_Launch_Delay>
 800195a:	4603      	mov	r3, r0
 800195c:	81bb      	strh	r3, [r7, #12]

	HAL_Delay(launch_delay);
 800195e:	89bb      	ldrh	r3, [r7, #12]
 8001960:	4618      	mov	r0, r3
 8001962:	f000 fb61 	bl	8002028 <HAL_Delay>
	//Blue_On();
	//HAL_Delay(500);
	//Blue_Off();
	//Green_On();
	Solenoid_Up();
 8001966:	f7ff ff71 	bl	800184c <Solenoid_Up>
	//HAL_Delay(500);

	//Green_Off();
	//Red_On();
	//HAL_Delay(launch_delay*LAUNCH_DELAY_DIV); //wait for full rev to confirm launched
	HAL_Delay(500);
 800196a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800196e:	f000 fb5b 	bl	8002028 <HAL_Delay>
	//Red_Off();
	Solenoid_Down();
 8001972:	f7ff ff75 	bl	8001860 <Solenoid_Down>
}
 8001976:	bf00      	nop
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <Calc_Big_Motor_Speed>:

uint16_t Calc_Big_Motor_Speed(uint16_t arm_speed)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	80fb      	strh	r3, [r7, #6]
	return arm_speed * BIG_MOTOR_GEAR_RATIO;
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	b29b      	uxth	r3, r3
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <Calc_Launch_Delay>:

uint16_t Calc_Launch_Delay(uint16_t motor_speed)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	80fb      	strh	r3, [r7, #6]
	uint16_t rev_period = 1000.0/(motor_speed/60.0);
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fd93 	bl	80004d4 <__aeabi_i2d>
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <Calc_Launch_Delay+0x48>)
 80019b4:	f7fe ff22 	bl	80007fc <__aeabi_ddiv>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	f04f 0000 	mov.w	r0, #0
 80019c0:	4909      	ldr	r1, [pc, #36]	; (80019e8 <Calc_Launch_Delay+0x4c>)
 80019c2:	f7fe ff1b 	bl	80007fc <__aeabi_ddiv>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	f7fe fffd 	bl	80009cc <__aeabi_d2uiz>
 80019d2:	4603      	mov	r3, r0
 80019d4:	81fb      	strh	r3, [r7, #14]
	return rev_period /LAUNCH_DELAY_DIV;
 80019d6:	89fb      	ldrh	r3, [r7, #14]
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	b29b      	uxth	r3, r3
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	404e0000 	.word	0x404e0000
 80019e8:	408f4000 	.word	0x408f4000

080019ec <LL_AHB2_GRP1_EnableClock>:
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a10:	68fb      	ldr	r3, [r7, #12]
}
 8001a12:	bf00      	nop
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b085      	sub	sp, #20
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a42:	68fb      	ldr	r3, [r7, #12]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4013      	ands	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a74:	68fb      	ldr	r3, [r7, #12]
}
 8001a76:	bf00      	nop
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b085      	sub	sp, #20
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
	...

08001ac4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b09c      	sub	sp, #112	; 0x70
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001adc:	f107 030c 	add.w	r3, r7, #12
 8001ae0:	2250      	movs	r2, #80	; 0x50
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f003 fbdd 	bl	80052a4 <memset>
  if(huart->Instance==LPUART1)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a2b      	ldr	r2, [pc, #172]	; (8001b9c <HAL_UART_MspInit+0xd8>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d125      	bne.n	8001b40 <HAL_UART_MspInit+0x7c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001af4:	2302      	movs	r3, #2
 8001af6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001af8:	2300      	movs	r3, #0
 8001afa:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001afc:	f107 030c 	add.w	r3, r7, #12
 8001b00:	4618      	mov	r0, r3
 8001b02:	f002 f9c9 	bl	8003e98 <HAL_RCCEx_PeriphCLKConfig>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b0c:	f7ff fd54 	bl	80015b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001b10:	2001      	movs	r0, #1
 8001b12:	f7ff ff9d 	bl	8001a50 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b16:	2001      	movs	r0, #1
 8001b18:	f7ff ff68 	bl	80019ec <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = MOTOR_TX_Pin|MOTOR_RX_Pin;
 8001b1c:	230c      	movs	r3, #12
 8001b1e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b24:	2301      	movs	r3, #1
 8001b26:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001b2c:	2308      	movs	r3, #8
 8001b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b34:	4619      	mov	r1, r3
 8001b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b3a:	f000 fba9 	bl	8002290 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b3e:	e029      	b.n	8001b94 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART1)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a16      	ldr	r2, [pc, #88]	; (8001ba0 <HAL_UART_MspInit+0xdc>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d124      	bne.n	8001b94 <HAL_UART_MspInit+0xd0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b52:	f107 030c 	add.w	r3, r7, #12
 8001b56:	4618      	mov	r0, r3
 8001b58:	f002 f99e 	bl	8003e98 <HAL_RCCEx_PeriphCLKConfig>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_UART_MspInit+0xa2>
      Error_Handler();
 8001b62:	f7ff fd29 	bl	80015b8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b66:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001b6a:	f7ff ff8a 	bl	8001a82 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6e:	2002      	movs	r0, #2
 8001b70:	f7ff ff3c 	bl	80019ec <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = STLINERX_Pin|STLINK_TX_Pin;
 8001b74:	23c0      	movs	r3, #192	; 0xc0
 8001b76:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b80:	2300      	movs	r3, #0
 8001b82:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b84:	2307      	movs	r3, #7
 8001b86:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b88:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <HAL_UART_MspInit+0xe0>)
 8001b90:	f000 fb7e 	bl	8002290 <HAL_GPIO_Init>
}
 8001b94:	bf00      	nop
 8001b96:	3770      	adds	r7, #112	; 0x70
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40008000 	.word	0x40008000
 8001ba0:	40013800 	.word	0x40013800
 8001ba4:	48000400 	.word	0x48000400

08001ba8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b09c      	sub	sp, #112	; 0x70
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bc0:	f107 030c 	add.w	r3, r7, #12
 8001bc4:	2250      	movs	r2, #80	; 0x50
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f003 fb6b 	bl	80052a4 <memset>
  if(hpcd->Instance==USB)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a1f      	ldr	r2, [pc, #124]	; (8001c50 <HAL_PCD_MspInit+0xa8>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d136      	bne.n	8001c46 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001bd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bdc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8001bde:	2318      	movs	r3, #24
 8001be0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001be2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001be6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001be8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bec:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001bee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001bf2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8001bf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001bf8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001bfa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001bfe:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c00:	f107 030c 	add.w	r3, r7, #12
 8001c04:	4618      	mov	r0, r3
 8001c06:	f002 f947 	bl	8003e98 <HAL_RCCEx_PeriphCLKConfig>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8001c10:	f7ff fcd2 	bl	80015b8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c14:	2001      	movs	r0, #1
 8001c16:	f7ff fee9 	bl	80019ec <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c1e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	2302      	movs	r3, #2
 8001c22:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001c2c:	230a      	movs	r3, #10
 8001c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c30:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c34:	4619      	mov	r1, r3
 8001c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c3a:	f000 fb29 	bl	8002290 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001c3e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001c42:	f7ff feec 	bl	8001a1e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001c46:	bf00      	nop
 8001c48:	3770      	adds	r7, #112	; 0x70
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40006800 	.word	0x40006800

08001c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c58:	e7fe      	b.n	8001c58 <NMI_Handler+0x4>

08001c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <HardFault_Handler+0x4>

08001c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <MemManage_Handler+0x4>

08001c66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c6a:	e7fe      	b.n	8001c6a <BusFault_Handler+0x4>

08001c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <UsageFault_Handler+0x4>

08001c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca0:	f000 f996 	bl	8001fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 8001cac:	2001      	movs	r0, #1
 8001cae:	f000 fc8f 	bl	80025d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 8001cba:	2002      	movs	r0, #2
 8001cbc:	f000 fc88 	bl	80025d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001cc8:	2010      	movs	r0, #16
 8001cca:	f000 fc81 	bl	80025d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HALL_SENSOR_Pin);
 8001cd6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001cda:	f000 fc79 	bl	80025d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cec:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <_sbrk+0x5c>)
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <_sbrk+0x60>)
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf8:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <_sbrk+0x64>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d102      	bne.n	8001d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d00:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <_sbrk+0x64>)
 8001d02:	4a12      	ldr	r2, [pc, #72]	; (8001d4c <_sbrk+0x68>)
 8001d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d06:	4b10      	ldr	r3, [pc, #64]	; (8001d48 <_sbrk+0x64>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d207      	bcs.n	8001d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d14:	f003 face 	bl	80052b4 <__errno>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d22:	e009      	b.n	8001d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d24:	4b08      	ldr	r3, [pc, #32]	; (8001d48 <_sbrk+0x64>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d2a:	4b07      	ldr	r3, [pc, #28]	; (8001d48 <_sbrk+0x64>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	4a05      	ldr	r2, [pc, #20]	; (8001d48 <_sbrk+0x64>)
 8001d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d36:	68fb      	ldr	r3, [r7, #12]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20030000 	.word	0x20030000
 8001d44:	00000800 	.word	0x00000800
 8001d48:	200004a0 	.word	0x200004a0
 8001d4c:	200005f0 	.word	0x200005f0

08001d50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001d54:	4b24      	ldr	r3, [pc, #144]	; (8001de8 <SystemInit+0x98>)
 8001d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d5a:	4a23      	ldr	r2, [pc, #140]	; (8001de8 <SystemInit+0x98>)
 8001d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d78:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001d7c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d88:	4b18      	ldr	r3, [pc, #96]	; (8001dec <SystemInit+0x9c>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d9a:	f023 0305 	bic.w	r3, r3, #5
 8001d9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001daa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dae:	f023 0301 	bic.w	r3, r3, #1
 8001db2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dba:	4a0d      	ldr	r2, [pc, #52]	; (8001df0 <SystemInit+0xa0>)
 8001dbc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc2:	4a0b      	ldr	r2, [pc, #44]	; (8001df0 <SystemInit+0xa0>)
 8001dc4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dda:	2200      	movs	r2, #0
 8001ddc:	619a      	str	r2, [r3, #24]
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000ed00 	.word	0xe000ed00
 8001dec:	faf6fefb 	.word	0xfaf6fefb
 8001df0:	22041000 	.word	0x22041000

08001df4 <Array_To_Int>:

#include "utilities.h"
#include <stdio.h>

uint16_t Array_To_Int(char array[])
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	uint16_t i;
	sscanf(array, "%hd", &i);
 8001dfc:	f107 030e 	add.w	r3, r7, #14
 8001e00:	461a      	mov	r2, r3
 8001e02:	4904      	ldr	r1, [pc, #16]	; (8001e14 <Array_To_Int+0x20>)
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f003 fa1f 	bl	8005248 <siscanf>
	return i;
 8001e0a:	89fb      	ldrh	r3, [r7, #14]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	08005f9c 	.word	0x08005f9c

08001e18 <Red_On>:

void Red_On()
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	2102      	movs	r1, #2
 8001e20:	4802      	ldr	r0, [pc, #8]	; (8001e2c <Red_On+0x14>)
 8001e22:	f000 fbbd 	bl	80025a0 <HAL_GPIO_WritePin>
}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	48000400 	.word	0x48000400

08001e30 <Red_Off>:

void Red_Off()
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001e34:	2200      	movs	r2, #0
 8001e36:	2102      	movs	r1, #2
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <Red_Off+0x14>)
 8001e3a:	f000 fbb1 	bl	80025a0 <HAL_GPIO_WritePin>
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	48000400 	.word	0x48000400

08001e48 <Green_On>:

void Green_On()
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	2101      	movs	r1, #1
 8001e50:	4802      	ldr	r0, [pc, #8]	; (8001e5c <Green_On+0x14>)
 8001e52:	f000 fba5 	bl	80025a0 <HAL_GPIO_WritePin>
}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	48000400 	.word	0x48000400

08001e60 <Green_Off>:

void Green_Off()
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001e64:	2200      	movs	r2, #0
 8001e66:	2101      	movs	r1, #1
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <Green_Off+0x14>)
 8001e6a:	f000 fb99 	bl	80025a0 <HAL_GPIO_WritePin>
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	48000400 	.word	0x48000400

08001e78 <Blue_On>:

void Blue_On()
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	2120      	movs	r1, #32
 8001e80:	4802      	ldr	r0, [pc, #8]	; (8001e8c <Blue_On+0x14>)
 8001e82:	f000 fb8d 	bl	80025a0 <HAL_GPIO_WritePin>
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	48000400 	.word	0x48000400

08001e90 <Blue_Off>:

void Blue_Off()
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001e94:	2200      	movs	r2, #0
 8001e96:	2120      	movs	r1, #32
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <Blue_Off+0x14>)
 8001e9a:	f000 fb81 	bl	80025a0 <HAL_GPIO_WritePin>
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	48000400 	.word	0x48000400

08001ea8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001ea8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eaa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eac:	3304      	adds	r3, #4

08001eae <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eae:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001eb2:	d3f9      	bcc.n	8001ea8 <CopyDataInit>
  bx lr
 8001eb4:	4770      	bx	lr

08001eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001eb6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001eb8:	3004      	adds	r0, #4

08001eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001eba:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001ebc:	d3fb      	bcc.n	8001eb6 <FillZerobss>
  bx lr
 8001ebe:	4770      	bx	lr

08001ec0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ec0:	480c      	ldr	r0, [pc, #48]	; (8001ef4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ec2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ec4:	f7ff ff44 	bl	8001d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001ec8:	480b      	ldr	r0, [pc, #44]	; (8001ef8 <LoopForever+0x6>)
 8001eca:	490c      	ldr	r1, [pc, #48]	; (8001efc <LoopForever+0xa>)
 8001ecc:	4a0c      	ldr	r2, [pc, #48]	; (8001f00 <LoopForever+0xe>)
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f7ff ffed 	bl	8001eae <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001ed4:	480b      	ldr	r0, [pc, #44]	; (8001f04 <LoopForever+0x12>)
 8001ed6:	490c      	ldr	r1, [pc, #48]	; (8001f08 <LoopForever+0x16>)
 8001ed8:	4a0c      	ldr	r2, [pc, #48]	; (8001f0c <LoopForever+0x1a>)
 8001eda:	2300      	movs	r3, #0
 8001edc:	f7ff ffe7 	bl	8001eae <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001ee0:	480b      	ldr	r0, [pc, #44]	; (8001f10 <LoopForever+0x1e>)
 8001ee2:	490c      	ldr	r1, [pc, #48]	; (8001f14 <LoopForever+0x22>)
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f7ff ffe8 	bl	8001eba <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001eea:	f003 f9e9 	bl	80052c0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001eee:	f7fe ff9d 	bl	8000e2c <main>

08001ef2 <LoopForever>:

LoopForever:
  b LoopForever
 8001ef2:	e7fe      	b.n	8001ef2 <LoopForever>
  ldr   r0, =_estack
 8001ef4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001ef8:	20000008 	.word	0x20000008
 8001efc:	20000070 	.word	0x20000070
 8001f00:	080061d0 	.word	0x080061d0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001f04:	20030000 	.word	0x20030000
 8001f08:	20030000 	.word	0x20030000
 8001f0c:	08006238 	.word	0x08006238
  INIT_BSS _sbss, _ebss
 8001f10:	20000070 	.word	0x20000070
 8001f14:	200005f0 	.word	0x200005f0

08001f18 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f18:	e7fe      	b.n	8001f18 <ADC1_IRQHandler>
	...

08001f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f22:	2300      	movs	r3, #0
 8001f24:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <HAL_Init+0x3c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a0b      	ldr	r2, [pc, #44]	; (8001f58 <HAL_Init+0x3c>)
 8001f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f30:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f32:	2003      	movs	r0, #3
 8001f34:	f000 f96c 	bl	8002210 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f38:	2000      	movs	r0, #0
 8001f3a:	f000 f80f 	bl	8001f5c <HAL_InitTick>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d002      	beq.n	8001f4a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	71fb      	strb	r3, [r7, #7]
 8001f48:	e001      	b.n	8001f4e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f4a:	f7ff fdb3 	bl	8001ab4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	58004000 	.word	0x58004000

08001f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001f68:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <HAL_InitTick+0x6c>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d024      	beq.n	8001fba <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f70:	f001 fcf2 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 8001f74:	4602      	mov	r2, r0
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <HAL_InitTick+0x6c>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f80:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 f974 	bl	8002276 <HAL_SYSTICK_Config>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10f      	bne.n	8001fb4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b0f      	cmp	r3, #15
 8001f98:	d809      	bhi.n	8001fae <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa2:	f000 f940 	bl	8002226 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fa6:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <HAL_InitTick+0x70>)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	e007      	b.n	8001fbe <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	73fb      	strb	r3, [r7, #15]
 8001fb2:	e004      	b.n	8001fbe <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	e001      	b.n	8001fbe <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3710      	adds	r7, #16
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	2000001c 	.word	0x2000001c
 8001fcc:	20000018 	.word	0x20000018

08001fd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_IncTick+0x20>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_IncTick+0x24>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4413      	add	r3, r2
 8001fe0:	4a04      	ldr	r2, [pc, #16]	; (8001ff4 <HAL_IncTick+0x24>)
 8001fe2:	6013      	str	r3, [r2, #0]
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	2000001c 	.word	0x2000001c
 8001ff4:	200004a4 	.word	0x200004a4

08001ff8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return uwTick;
 8001ffc:	4b03      	ldr	r3, [pc, #12]	; (800200c <HAL_GetTick+0x14>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
}
 8002000:	4618      	mov	r0, r3
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	200004a4 	.word	0x200004a4

08002010 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002014:	4b03      	ldr	r3, [pc, #12]	; (8002024 <HAL_GetTickPrio+0x14>)
 8002016:	681b      	ldr	r3, [r3, #0]
}
 8002018:	4618      	mov	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000018 	.word	0x20000018

08002028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002030:	f7ff ffe2 	bl	8001ff8 <HAL_GetTick>
 8002034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002040:	d005      	beq.n	800204e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <HAL_Delay+0x44>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	4413      	add	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800204e:	bf00      	nop
 8002050:	f7ff ffd2 	bl	8001ff8 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	429a      	cmp	r2, r3
 800205e:	d8f7      	bhi.n	8002050 <HAL_Delay+0x28>
  {
  }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	2000001c 	.word	0x2000001c

08002070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800208c:	4013      	ands	r3, r2
 800208e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800209c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020a2:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <__NVIC_SetPriorityGrouping+0x44>)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	60d3      	str	r3, [r2, #12]
}
 80020a8:	bf00      	nop
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000ed00 	.word	0xe000ed00

080020b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020bc:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <__NVIC_GetPriorityGrouping+0x18>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	f003 0307 	and.w	r3, r3, #7
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr
 80020d0:	e000ed00 	.word	0xe000ed00

080020d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	4603      	mov	r3, r0
 80020dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	db0b      	blt.n	80020fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	f003 021f 	and.w	r2, r3, #31
 80020ec:	4907      	ldr	r1, [pc, #28]	; (800210c <__NVIC_EnableIRQ+0x38>)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	095b      	lsrs	r3, r3, #5
 80020f4:	2001      	movs	r0, #1
 80020f6:	fa00 f202 	lsl.w	r2, r0, r2
 80020fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	e000e100 	.word	0xe000e100

08002110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	6039      	str	r1, [r7, #0]
 800211a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002120:	2b00      	cmp	r3, #0
 8002122:	db0a      	blt.n	800213a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	490c      	ldr	r1, [pc, #48]	; (800215c <__NVIC_SetPriority+0x4c>)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	0112      	lsls	r2, r2, #4
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	440b      	add	r3, r1
 8002134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002138:	e00a      	b.n	8002150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	b2da      	uxtb	r2, r3
 800213e:	4908      	ldr	r1, [pc, #32]	; (8002160 <__NVIC_SetPriority+0x50>)
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	3b04      	subs	r3, #4
 8002148:	0112      	lsls	r2, r2, #4
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	440b      	add	r3, r1
 800214e:	761a      	strb	r2, [r3, #24]
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000e100 	.word	0xe000e100
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	; 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f1c3 0307 	rsb	r3, r3, #7
 800217e:	2b04      	cmp	r3, #4
 8002180:	bf28      	it	cs
 8002182:	2304      	movcs	r3, #4
 8002184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3304      	adds	r3, #4
 800218a:	2b06      	cmp	r3, #6
 800218c:	d902      	bls.n	8002194 <NVIC_EncodePriority+0x30>
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3b03      	subs	r3, #3
 8002192:	e000      	b.n	8002196 <NVIC_EncodePriority+0x32>
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002198:	f04f 32ff 	mov.w	r2, #4294967295
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43da      	mvns	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	401a      	ands	r2, r3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ac:	f04f 31ff 	mov.w	r1, #4294967295
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	43d9      	mvns	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021bc:	4313      	orrs	r3, r2
         );
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3724      	adds	r7, #36	; 0x24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
	...

080021cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021dc:	d301      	bcc.n	80021e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021de:	2301      	movs	r3, #1
 80021e0:	e00f      	b.n	8002202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021e2:	4a0a      	ldr	r2, [pc, #40]	; (800220c <SysTick_Config+0x40>)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021ea:	210f      	movs	r1, #15
 80021ec:	f04f 30ff 	mov.w	r0, #4294967295
 80021f0:	f7ff ff8e 	bl	8002110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <SysTick_Config+0x40>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021fa:	4b04      	ldr	r3, [pc, #16]	; (800220c <SysTick_Config+0x40>)
 80021fc:	2207      	movs	r2, #7
 80021fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	e000e010 	.word	0xe000e010

08002210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7ff ff29 	bl	8002070 <__NVIC_SetPriorityGrouping>
}
 800221e:	bf00      	nop
 8002220:	3708      	adds	r7, #8
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b086      	sub	sp, #24
 800222a:	af00      	add	r7, sp, #0
 800222c:	4603      	mov	r3, r0
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
 8002232:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002234:	f7ff ff40 	bl	80020b8 <__NVIC_GetPriorityGrouping>
 8002238:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	6978      	ldr	r0, [r7, #20]
 8002240:	f7ff ff90 	bl	8002164 <NVIC_EncodePriority>
 8002244:	4602      	mov	r2, r0
 8002246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff5f 	bl	8002110 <__NVIC_SetPriority>
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff33 	bl	80020d4 <__NVIC_EnableIRQ>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff ffa4 	bl	80021cc <SysTick_Config>
 8002284:	4603      	mov	r3, r0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002290:	b480      	push	{r7}
 8002292:	b087      	sub	sp, #28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800229e:	e14c      	b.n	800253a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	2101      	movs	r1, #1
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ac:	4013      	ands	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 813e 	beq.w	8002534 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d005      	beq.n	80022d0 <HAL_GPIO_Init+0x40>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d130      	bne.n	8002332 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	2203      	movs	r2, #3
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4013      	ands	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002306:	2201      	movs	r2, #1
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	091b      	lsrs	r3, r3, #4
 800231c:	f003 0201 	and.w	r2, r3, #1
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b03      	cmp	r3, #3
 800233c:	d017      	beq.n	800236e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	2203      	movs	r2, #3
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4013      	ands	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d123      	bne.n	80023c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	08da      	lsrs	r2, r3, #3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3208      	adds	r2, #8
 8002382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002386:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	220f      	movs	r2, #15
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	691a      	ldr	r2, [r3, #16]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	08da      	lsrs	r2, r3, #3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3208      	adds	r2, #8
 80023bc:	6939      	ldr	r1, [r7, #16]
 80023be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	2203      	movs	r2, #3
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4013      	ands	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 0203 	and.w	r2, r3, #3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 8098 	beq.w	8002534 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002404:	4a54      	ldr	r2, [pc, #336]	; (8002558 <HAL_GPIO_Init+0x2c8>)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	3302      	adds	r3, #2
 800240c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002410:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	220f      	movs	r2, #15
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800242e:	d019      	beq.n	8002464 <HAL_GPIO_Init+0x1d4>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a4a      	ldr	r2, [pc, #296]	; (800255c <HAL_GPIO_Init+0x2cc>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d013      	beq.n	8002460 <HAL_GPIO_Init+0x1d0>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	4a49      	ldr	r2, [pc, #292]	; (8002560 <HAL_GPIO_Init+0x2d0>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d00d      	beq.n	800245c <HAL_GPIO_Init+0x1cc>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	4a48      	ldr	r2, [pc, #288]	; (8002564 <HAL_GPIO_Init+0x2d4>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d007      	beq.n	8002458 <HAL_GPIO_Init+0x1c8>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a47      	ldr	r2, [pc, #284]	; (8002568 <HAL_GPIO_Init+0x2d8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d101      	bne.n	8002454 <HAL_GPIO_Init+0x1c4>
 8002450:	2304      	movs	r3, #4
 8002452:	e008      	b.n	8002466 <HAL_GPIO_Init+0x1d6>
 8002454:	2307      	movs	r3, #7
 8002456:	e006      	b.n	8002466 <HAL_GPIO_Init+0x1d6>
 8002458:	2303      	movs	r3, #3
 800245a:	e004      	b.n	8002466 <HAL_GPIO_Init+0x1d6>
 800245c:	2302      	movs	r3, #2
 800245e:	e002      	b.n	8002466 <HAL_GPIO_Init+0x1d6>
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <HAL_GPIO_Init+0x1d6>
 8002464:	2300      	movs	r3, #0
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	f002 0203 	and.w	r2, r2, #3
 800246c:	0092      	lsls	r2, r2, #2
 800246e:	4093      	lsls	r3, r2
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002476:	4938      	ldr	r1, [pc, #224]	; (8002558 <HAL_GPIO_Init+0x2c8>)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	089b      	lsrs	r3, r3, #2
 800247c:	3302      	adds	r3, #2
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002484:	4b39      	ldr	r3, [pc, #228]	; (800256c <HAL_GPIO_Init+0x2dc>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	43db      	mvns	r3, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024a8:	4a30      	ldr	r2, [pc, #192]	; (800256c <HAL_GPIO_Init+0x2dc>)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024ae:	4b2f      	ldr	r3, [pc, #188]	; (800256c <HAL_GPIO_Init+0x2dc>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024d2:	4a26      	ldr	r2, [pc, #152]	; (800256c <HAL_GPIO_Init+0x2dc>)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024d8:	4b24      	ldr	r3, [pc, #144]	; (800256c <HAL_GPIO_Init+0x2dc>)
 80024da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	43db      	mvns	r3, r3
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4013      	ands	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024fe:	4a1b      	ldr	r2, [pc, #108]	; (800256c <HAL_GPIO_Init+0x2dc>)
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002506:	4b19      	ldr	r3, [pc, #100]	; (800256c <HAL_GPIO_Init+0x2dc>)
 8002508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	43db      	mvns	r3, r3
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4013      	ands	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800252c:	4a0f      	ldr	r2, [pc, #60]	; (800256c <HAL_GPIO_Init+0x2dc>)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	3301      	adds	r3, #1
 8002538:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	fa22 f303 	lsr.w	r3, r2, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	f47f aeab 	bne.w	80022a0 <HAL_GPIO_Init+0x10>
  }
}
 800254a:	bf00      	nop
 800254c:	bf00      	nop
 800254e:	371c      	adds	r7, #28
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	40010000 	.word	0x40010000
 800255c:	48000400 	.word	0x48000400
 8002560:	48000800 	.word	0x48000800
 8002564:	48000c00 	.word	0x48000c00
 8002568:	48001000 	.word	0x48001000
 800256c:	58000800 	.word	0x58000800

08002570 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	887b      	ldrh	r3, [r7, #2]
 8002582:	4013      	ands	r3, r2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002588:	2301      	movs	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
 800258c:	e001      	b.n	8002592 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800258e:	2300      	movs	r3, #0
 8002590:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002592:	7bfb      	ldrb	r3, [r7, #15]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	807b      	strh	r3, [r7, #2]
 80025ac:	4613      	mov	r3, r2
 80025ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025b0:	787b      	ldrb	r3, [r7, #1]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025b6:	887a      	ldrh	r2, [r7, #2]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025bc:	e002      	b.n	80025c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025be:	887a      	ldrh	r2, [r7, #2]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80025da:	4b08      	ldr	r3, [pc, #32]	; (80025fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	4013      	ands	r3, r2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d006      	beq.n	80025f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025e6:	4a05      	ldr	r2, [pc, #20]	; (80025fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025e8:	88fb      	ldrh	r3, [r7, #6]
 80025ea:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025ec:	88fb      	ldrh	r3, [r7, #6]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe ff88 	bl	8001504 <HAL_GPIO_EXTI_Callback>
  }
}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	58000800 	.word	0x58000800

08002600 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e0c0      	b.n	8002794 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d106      	bne.n	800262c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff fabe 	bl	8001ba8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2203      	movs	r2, #3
 8002630:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f002 fdcb 	bl	80051d4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800263e:	2300      	movs	r3, #0
 8002640:	73fb      	strb	r3, [r7, #15]
 8002642:	e03e      	b.n	80026c2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002644:	7bfa      	ldrb	r2, [r7, #15]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	440b      	add	r3, r1
 8002652:	3311      	adds	r3, #17
 8002654:	2201      	movs	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002658:	7bfa      	ldrb	r2, [r7, #15]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	440b      	add	r3, r1
 8002666:	3310      	adds	r3, #16
 8002668:	7bfa      	ldrb	r2, [r7, #15]
 800266a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800266c:	7bfa      	ldrb	r2, [r7, #15]
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	440b      	add	r3, r1
 800267a:	3313      	adds	r3, #19
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002680:	7bfa      	ldrb	r2, [r7, #15]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	4413      	add	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	440b      	add	r3, r1
 800268e:	3320      	adds	r3, #32
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002694:	7bfa      	ldrb	r2, [r7, #15]
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	440b      	add	r3, r1
 80026a2:	3324      	adds	r3, #36	; 0x24
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80026a8:	7bfb      	ldrb	r3, [r7, #15]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	440b      	add	r3, r1
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
 80026be:	3301      	adds	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	791b      	ldrb	r3, [r3, #4]
 80026c6:	7bfa      	ldrb	r2, [r7, #15]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d3bb      	bcc.n	8002644 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026cc:	2300      	movs	r3, #0
 80026ce:	73fb      	strb	r3, [r7, #15]
 80026d0:	e044      	b.n	800275c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80026d2:	7bfa      	ldrb	r2, [r7, #15]
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	440b      	add	r3, r1
 80026e0:	f203 1351 	addw	r3, r3, #337	; 0x151
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026e8:	7bfa      	ldrb	r2, [r7, #15]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	440b      	add	r3, r1
 80026f6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80026fa:	7bfa      	ldrb	r2, [r7, #15]
 80026fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026fe:	7bfa      	ldrb	r2, [r7, #15]
 8002700:	6879      	ldr	r1, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	440b      	add	r3, r1
 800270c:	f203 1353 	addw	r3, r3, #339	; 0x153
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002714:	7bfa      	ldrb	r2, [r7, #15]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	440b      	add	r3, r1
 8002722:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800272a:	7bfa      	ldrb	r2, [r7, #15]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	440b      	add	r3, r1
 8002738:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002740:	7bfa      	ldrb	r2, [r7, #15]
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	440b      	add	r3, r1
 800274e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	3301      	adds	r3, #1
 800275a:	73fb      	strb	r3, [r7, #15]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	791b      	ldrb	r3, [r3, #4]
 8002760:	7bfa      	ldrb	r2, [r7, #15]
 8002762:	429a      	cmp	r2, r3
 8002764:	d3b5      	bcc.n	80026d2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6818      	ldr	r0, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3304      	adds	r3, #4
 800276e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002772:	f002 fd4a 	bl	800520a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	7a9b      	ldrb	r3, [r3, #10]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d102      	bne.n	8002792 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f805 	bl	800279c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	f043 0302 	orr.w	r3, r3, #2
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a04      	ldr	r2, [pc, #16]	; (800280c <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027fe:	6013      	str	r3, [r2, #0]
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	58000400 	.word	0x58000400

08002810 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002814:	4b04      	ldr	r3, [pc, #16]	; (8002828 <HAL_PWREx_GetVoltageRange+0x18>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800281c:	4618      	mov	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	58000400 	.word	0x58000400

0800282c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800283a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800283e:	d101      	bne.n	8002844 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002840:	2301      	movs	r3, #1
 8002842:	e000      	b.n	8002846 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <LL_RCC_HSE_Enable>:
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800285e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002862:	6013      	str	r3, [r2, #0]
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <LL_RCC_HSE_Disable>:
{
 800286e:	b480      	push	{r7}
 8002870:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800287c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002880:	6013      	str	r3, [r2, #0]
}
 8002882:	bf00      	nop
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <LL_RCC_HSE_IsReady>:
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002890:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800289e:	d101      	bne.n	80028a4 <LL_RCC_HSE_IsReady+0x18>
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <LL_RCC_HSE_IsReady+0x1a>
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <LL_RCC_HSI_Enable>:
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80028b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c2:	6013      	str	r3, [r2, #0]
}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <LL_RCC_HSI_Disable>:
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80028d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028e0:	6013      	str	r3, [r2, #0]
}
 80028e2:	bf00      	nop
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <LL_RCC_HSI_IsReady>:
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80028f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028fe:	d101      	bne.n	8002904 <LL_RCC_HSI_IsReady+0x18>
 8002900:	2301      	movs	r3, #1
 8002902:	e000      	b.n	8002906 <LL_RCC_HSI_IsReady+0x1a>
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	061b      	lsls	r3, r3, #24
 8002926:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800292a:	4313      	orrs	r3, r2
 800292c:	604b      	str	r3, [r1, #4]
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <LL_RCC_HSI48_Enable>:
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800293e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002942:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002946:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002952:	bf00      	nop
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <LL_RCC_HSI48_Disable>:
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002960:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002964:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002968:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800296c:	f023 0301 	bic.w	r3, r3, #1
 8002970:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <LL_RCC_HSI48_IsReady>:
{
 800297e:	b480      	push	{r7}
 8002980:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002982:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002986:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b02      	cmp	r3, #2
 8002990:	d101      	bne.n	8002996 <LL_RCC_HSI48_IsReady+0x18>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <LL_RCC_HSI48_IsReady+0x1a>
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <LL_RCC_LSE_Enable>:
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80029a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80029ba:	bf00      	nop
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <LL_RCC_LSE_Disable>:
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80029c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029d4:	f023 0301 	bic.w	r3, r3, #1
 80029d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <LL_RCC_LSE_EnableBypass>:
{
 80029e6:	b480      	push	{r7}
 80029e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80029ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029f6:	f043 0304 	orr.w	r3, r3, #4
 80029fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80029fe:	bf00      	nop
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_RCC_LSE_DisableBypass>:
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a18:	f023 0304 	bic.w	r3, r3, #4
 8002a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002a2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d101      	bne.n	8002a42 <LL_RCC_LSE_IsReady+0x18>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <LL_RCC_LSE_IsReady+0x1a>
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002a66:	bf00      	nop
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a80:	f023 0301 	bic.w	r3, r3, #1
 8002a84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002a92:	b480      	push	{r7}
 8002a94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d101      	bne.n	8002aaa <LL_RCC_LSI1_IsReady+0x18>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <LL_RCC_LSI1_IsReady+0x1a>
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ac2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ac6:	f043 0304 	orr.w	r3, r3, #4
 8002aca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002ace:	bf00      	nop
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ae8:	f023 0304 	bic.w	r3, r3, #4
 8002aec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002afa:	b480      	push	{r7}
 8002afc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d101      	bne.n	8002b12 <LL_RCC_LSI2_IsReady+0x18>
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e000      	b.n	8002b14 <LL_RCC_LSI2_IsReady+0x1a>
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b2e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	021b      	lsls	r3, r3, #8
 8002b36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	6013      	str	r3, [r2, #0]
}
 8002b60:	bf00      	nop
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b78:	f023 0301 	bic.w	r3, r3, #1
 8002b7c:	6013      	str	r3, [r2, #0]
}
 8002b7e:	bf00      	nop
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d101      	bne.n	8002b9e <LL_RCC_MSI_IsReady+0x16>
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e000      	b.n	8002ba0 <LL_RCC_MSI_IsReady+0x18>
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002bb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	600b      	str	r3, [r1, #0]
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002be2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2bb0      	cmp	r3, #176	; 0xb0
 8002be8:	d901      	bls.n	8002bee <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8002bea:	23b0      	movs	r3, #176	; 0xb0
 8002bec:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8002bee:	687b      	ldr	r3, [r7, #4]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002c04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c16:	4313      	orrs	r3, r2
 8002c18:	604b      	str	r3, [r1, #4]
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002c2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f023 0203 	bic.w	r2, r3, #3
 8002c38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002c52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 030c 	and.w	r3, r3, #12
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002c96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ca2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002cca:	f023 020f 	bic.w	r2, r3, #15
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	091b      	lsrs	r3, r3, #4
 8002cd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	608b      	str	r3, [r1, #8]
}
 8002d04:	bf00      	nop
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	608b      	str	r3, [r1, #8]
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002d54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d58:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dae:	6013      	str	r3, [r2, #0]
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dcc:	6013      	str	r3, [r2, #0]
}
 8002dce:	bf00      	nop
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dea:	d101      	bne.n	8002df0 <LL_RCC_PLL_IsReady+0x18>
 8002dec:	2301      	movs	r3, #1
 8002dee:	e000      	b.n	8002df2 <LL_RCC_PLL_IsReady+0x1a>
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	0a1b      	lsrs	r3, r3, #8
 8002e08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002e16:	b480      	push	{r7}
 8002e18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr

08002e2e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002e46:	b480      	push	{r7}
 8002e48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f003 0303 	and.w	r3, r3, #3
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e70:	d101      	bne.n	8002e76 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002e72:	2301      	movs	r3, #1
 8002e74:	e000      	b.n	8002e78 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002e82:	b480      	push	{r7}
 8002e84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002e86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e96:	d101      	bne.n	8002e9c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e000      	b.n	8002e9e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002eac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ebc:	d101      	bne.n	8002ec2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e000      	b.n	8002ec4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002edc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ee0:	d101      	bne.n	8002ee6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f04:	d101      	bne.n	8002f0a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
	...

08002f18 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f18:	b590      	push	{r4, r7, lr}
 8002f1a:	b08d      	sub	sp, #52	; 0x34
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e363      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 808d 	beq.w	8003052 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f38:	f7ff fe89 	bl	8002c4e <LL_RCC_GetSysClkSource>
 8002f3c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f3e:	f7ff ff82 	bl	8002e46 <LL_RCC_PLL_GetMainSource>
 8002f42:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <HAL_RCC_OscConfig+0x3e>
 8002f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4c:	2b0c      	cmp	r3, #12
 8002f4e:	d147      	bne.n	8002fe0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d144      	bne.n	8002fe0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e347      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002f66:	f7ff fe34 	bl	8002bd2 <LL_RCC_MSI_GetRange>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	429c      	cmp	r4, r3
 8002f6e:	d914      	bls.n	8002f9a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 fd2f 	bl	80039d8 <RCC_SetFlashLatencyFromMSIRange>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e336      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff fe0e 	bl	8002baa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7ff fe32 	bl	8002bfc <LL_RCC_MSI_SetCalibTrimming>
 8002f98:	e013      	b.n	8002fc2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff fe03 	bl	8002baa <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff fe27 	bl	8002bfc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 fd10 	bl	80039d8 <RCC_SetFlashLatencyFromMSIRange>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d001      	beq.n	8002fc2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e317      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002fc2:	f000 fcc9 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	4aa4      	ldr	r2, [pc, #656]	; (800325c <HAL_RCC_OscConfig+0x344>)
 8002fca:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002fcc:	4ba4      	ldr	r3, [pc, #656]	; (8003260 <HAL_RCC_OscConfig+0x348>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fe ffc3 	bl	8001f5c <HAL_InitTick>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d039      	beq.n	8003050 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e308      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d01e      	beq.n	8003026 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fe8:	f7ff fdb0 	bl	8002b4c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fec:	f7ff f804 	bl	8001ff8 <HAL_GetTick>
 8002ff0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ff4:	f7ff f800 	bl	8001ff8 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e2f5      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003006:	f7ff fdbf 	bl	8002b88 <LL_RCC_MSI_IsReady>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f1      	beq.n	8002ff4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff fdc8 	bl	8002baa <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff fdec 	bl	8002bfc <LL_RCC_MSI_SetCalibTrimming>
 8003024:	e015      	b.n	8003052 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003026:	f7ff fda0 	bl	8002b6a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800302a:	f7fe ffe5 	bl	8001ff8 <HAL_GetTick>
 800302e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003030:	e008      	b.n	8003044 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003032:	f7fe ffe1 	bl	8001ff8 <HAL_GetTick>
 8003036:	4602      	mov	r2, r0
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e2d6      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003044:	f7ff fda0 	bl	8002b88 <LL_RCC_MSI_IsReady>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1f1      	bne.n	8003032 <HAL_RCC_OscConfig+0x11a>
 800304e:	e000      	b.n	8003052 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003050:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d047      	beq.n	80030ee <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800305e:	f7ff fdf6 	bl	8002c4e <LL_RCC_GetSysClkSource>
 8003062:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003064:	f7ff feef 	bl	8002e46 <LL_RCC_PLL_GetMainSource>
 8003068:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	2b08      	cmp	r3, #8
 800306e:	d005      	beq.n	800307c <HAL_RCC_OscConfig+0x164>
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	2b0c      	cmp	r3, #12
 8003074:	d108      	bne.n	8003088 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	2b03      	cmp	r3, #3
 800307a:	d105      	bne.n	8003088 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d134      	bne.n	80030ee <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e2b4      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003090:	d102      	bne.n	8003098 <HAL_RCC_OscConfig+0x180>
 8003092:	f7ff fbdd 	bl	8002850 <LL_RCC_HSE_Enable>
 8003096:	e001      	b.n	800309c <HAL_RCC_OscConfig+0x184>
 8003098:	f7ff fbe9 	bl	800286e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d012      	beq.n	80030ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a4:	f7fe ffa8 	bl	8001ff8 <HAL_GetTick>
 80030a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ac:	f7fe ffa4 	bl	8001ff8 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b64      	cmp	r3, #100	; 0x64
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e299      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80030be:	f7ff fbe5 	bl	800288c <LL_RCC_HSE_IsReady>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0f1      	beq.n	80030ac <HAL_RCC_OscConfig+0x194>
 80030c8:	e011      	b.n	80030ee <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ca:	f7fe ff95 	bl	8001ff8 <HAL_GetTick>
 80030ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030d2:	f7fe ff91 	bl	8001ff8 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b64      	cmp	r3, #100	; 0x64
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e286      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80030e4:	f7ff fbd2 	bl	800288c <LL_RCC_HSE_IsReady>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f1      	bne.n	80030d2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d04c      	beq.n	8003194 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030fa:	f7ff fda8 	bl	8002c4e <LL_RCC_GetSysClkSource>
 80030fe:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003100:	f7ff fea1 	bl	8002e46 <LL_RCC_PLL_GetMainSource>
 8003104:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	2b04      	cmp	r3, #4
 800310a:	d005      	beq.n	8003118 <HAL_RCC_OscConfig+0x200>
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	2b0c      	cmp	r3, #12
 8003110:	d10e      	bne.n	8003130 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2b02      	cmp	r3, #2
 8003116:	d10b      	bne.n	8003130 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e266      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff fbf1 	bl	8002910 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800312e:	e031      	b.n	8003194 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d019      	beq.n	800316c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003138:	f7ff fbba 	bl	80028b0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313c:	f7fe ff5c 	bl	8001ff8 <HAL_GetTick>
 8003140:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003144:	f7fe ff58 	bl	8001ff8 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e24d      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003156:	f7ff fbc9 	bl	80028ec <LL_RCC_HSI_IsReady>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0f1      	beq.n	8003144 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	691b      	ldr	r3, [r3, #16]
 8003164:	4618      	mov	r0, r3
 8003166:	f7ff fbd3 	bl	8002910 <LL_RCC_HSI_SetCalibTrimming>
 800316a:	e013      	b.n	8003194 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800316c:	f7ff fbaf 	bl	80028ce <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003170:	f7fe ff42 	bl	8001ff8 <HAL_GetTick>
 8003174:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003178:	f7fe ff3e 	bl	8001ff8 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e233      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800318a:	f7ff fbaf 	bl	80028ec <LL_RCC_HSI_IsReady>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1f1      	bne.n	8003178 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0308 	and.w	r3, r3, #8
 800319c:	2b00      	cmp	r3, #0
 800319e:	d106      	bne.n	80031ae <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 80a3 	beq.w	80032f4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d076      	beq.n	80032a4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0310 	and.w	r3, r3, #16
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d046      	beq.n	8003250 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80031c2:	f7ff fc66 	bl	8002a92 <LL_RCC_LSI1_IsReady>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d113      	bne.n	80031f4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80031cc:	f7ff fc3f 	bl	8002a4e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031d0:	f7fe ff12 	bl	8001ff8 <HAL_GetTick>
 80031d4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80031d6:	e008      	b.n	80031ea <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80031d8:	f7fe ff0e 	bl	8001ff8 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e203      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80031ea:	f7ff fc52 	bl	8002a92 <LL_RCC_LSI1_IsReady>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0f1      	beq.n	80031d8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80031f4:	f7ff fc5f 	bl	8002ab6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7fe fefe 	bl	8001ff8 <HAL_GetTick>
 80031fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003200:	f7fe fefa 	bl	8001ff8 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b03      	cmp	r3, #3
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e1ef      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003212:	f7ff fc72 	bl	8002afa <LL_RCC_LSI2_IsReady>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0f1      	beq.n	8003200 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff fc7c 	bl	8002b1e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003226:	f7ff fc23 	bl	8002a70 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800322a:	f7fe fee5 	bl	8001ff8 <HAL_GetTick>
 800322e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003230:	e008      	b.n	8003244 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003232:	f7fe fee1 	bl	8001ff8 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b02      	cmp	r3, #2
 800323e:	d901      	bls.n	8003244 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e1d6      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003244:	f7ff fc25 	bl	8002a92 <LL_RCC_LSI1_IsReady>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f1      	bne.n	8003232 <HAL_RCC_OscConfig+0x31a>
 800324e:	e051      	b.n	80032f4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003250:	f7ff fbfd 	bl	8002a4e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003254:	f7fe fed0 	bl	8001ff8 <HAL_GetTick>
 8003258:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800325a:	e00c      	b.n	8003276 <HAL_RCC_OscConfig+0x35e>
 800325c:	20000014 	.word	0x20000014
 8003260:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003264:	f7fe fec8 	bl	8001ff8 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e1bd      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003276:	f7ff fc0c 	bl	8002a92 <LL_RCC_LSI1_IsReady>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f1      	beq.n	8003264 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003280:	f7ff fc2a 	bl	8002ad8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003286:	f7fe feb7 	bl	8001ff8 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b03      	cmp	r3, #3
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e1ac      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003298:	f7ff fc2f 	bl	8002afa <LL_RCC_LSI2_IsReady>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1f1      	bne.n	8003286 <HAL_RCC_OscConfig+0x36e>
 80032a2:	e027      	b.n	80032f4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80032a4:	f7ff fc18 	bl	8002ad8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a8:	f7fe fea6 	bl	8001ff8 <HAL_GetTick>
 80032ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80032b0:	f7fe fea2 	bl	8001ff8 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e197      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80032c2:	f7ff fc1a 	bl	8002afa <LL_RCC_LSI2_IsReady>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f1      	bne.n	80032b0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80032cc:	f7ff fbd0 	bl	8002a70 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d0:	f7fe fe92 	bl	8001ff8 <HAL_GetTick>
 80032d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80032d8:	f7fe fe8e 	bl	8001ff8 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e183      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80032ea:	f7ff fbd2 	bl	8002a92 <LL_RCC_LSI1_IsReady>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f1      	bne.n	80032d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d05b      	beq.n	80033b8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003300:	4ba7      	ldr	r3, [pc, #668]	; (80035a0 <HAL_RCC_OscConfig+0x688>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003308:	2b00      	cmp	r3, #0
 800330a:	d114      	bne.n	8003336 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800330c:	f7ff fa70 	bl	80027f0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003310:	f7fe fe72 	bl	8001ff8 <HAL_GetTick>
 8003314:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003318:	f7fe fe6e 	bl	8001ff8 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e163      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800332a:	4b9d      	ldr	r3, [pc, #628]	; (80035a0 <HAL_RCC_OscConfig+0x688>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d102      	bne.n	8003344 <HAL_RCC_OscConfig+0x42c>
 800333e:	f7ff fb30 	bl	80029a2 <LL_RCC_LSE_Enable>
 8003342:	e00c      	b.n	800335e <HAL_RCC_OscConfig+0x446>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b05      	cmp	r3, #5
 800334a:	d104      	bne.n	8003356 <HAL_RCC_OscConfig+0x43e>
 800334c:	f7ff fb4b 	bl	80029e6 <LL_RCC_LSE_EnableBypass>
 8003350:	f7ff fb27 	bl	80029a2 <LL_RCC_LSE_Enable>
 8003354:	e003      	b.n	800335e <HAL_RCC_OscConfig+0x446>
 8003356:	f7ff fb35 	bl	80029c4 <LL_RCC_LSE_Disable>
 800335a:	f7ff fb55 	bl	8002a08 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d014      	beq.n	8003390 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003366:	f7fe fe47 	bl	8001ff8 <HAL_GetTick>
 800336a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800336c:	e00a      	b.n	8003384 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336e:	f7fe fe43 	bl	8001ff8 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f241 3288 	movw	r2, #5000	; 0x1388
 800337c:	4293      	cmp	r3, r2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e136      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003384:	f7ff fb51 	bl	8002a2a <LL_RCC_LSE_IsReady>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0ef      	beq.n	800336e <HAL_RCC_OscConfig+0x456>
 800338e:	e013      	b.n	80033b8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003390:	f7fe fe32 	bl	8001ff8 <HAL_GetTick>
 8003394:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003396:	e00a      	b.n	80033ae <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003398:	f7fe fe2e 	bl	8001ff8 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e121      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80033ae:	f7ff fb3c 	bl	8002a2a <LL_RCC_LSE_IsReady>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1ef      	bne.n	8003398 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d02c      	beq.n	800341e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d014      	beq.n	80033f6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033cc:	f7ff fab5 	bl	800293a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d0:	f7fe fe12 	bl	8001ff8 <HAL_GetTick>
 80033d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033d8:	f7fe fe0e 	bl	8001ff8 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e103      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80033ea:	f7ff fac8 	bl	800297e <LL_RCC_HSI48_IsReady>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f1      	beq.n	80033d8 <HAL_RCC_OscConfig+0x4c0>
 80033f4:	e013      	b.n	800341e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033f6:	f7ff fab1 	bl	800295c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fa:	f7fe fdfd 	bl	8001ff8 <HAL_GetTick>
 80033fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003402:	f7fe fdf9 	bl	8001ff8 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e0ee      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003414:	f7ff fab3 	bl	800297e <LL_RCC_HSI48_IsReady>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f1      	bne.n	8003402 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 80e4 	beq.w	80035f0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003428:	f7ff fc11 	bl	8002c4e <LL_RCC_GetSysClkSource>
 800342c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800342e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343a:	2b02      	cmp	r3, #2
 800343c:	f040 80b4 	bne.w	80035a8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f003 0203 	and.w	r2, r3, #3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	429a      	cmp	r2, r3
 800344c:	d123      	bne.n	8003496 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003458:	429a      	cmp	r2, r3
 800345a:	d11c      	bne.n	8003496 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	0a1b      	lsrs	r3, r3, #8
 8003460:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003468:	429a      	cmp	r2, r3
 800346a:	d114      	bne.n	8003496 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003476:	429a      	cmp	r2, r3
 8003478:	d10d      	bne.n	8003496 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d106      	bne.n	8003496 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003492:	429a      	cmp	r2, r3
 8003494:	d05d      	beq.n	8003552 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	2b0c      	cmp	r3, #12
 800349a:	d058      	beq.n	800354e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800349c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e0a1      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80034ae:	f7ff fc84 	bl	8002dba <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80034b2:	f7fe fda1 	bl	8001ff8 <HAL_GetTick>
 80034b6:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ba:	f7fe fd9d 	bl	8001ff8 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e092      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1ef      	bne.n	80034ba <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	4b30      	ldr	r3, [pc, #192]	; (80035a4 <HAL_RCC_OscConfig+0x68c>)
 80034e2:	4013      	ands	r3, r2
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034ec:	4311      	orrs	r1, r2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034f2:	0212      	lsls	r2, r2, #8
 80034f4:	4311      	orrs	r1, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034fa:	4311      	orrs	r1, r2
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003500:	4311      	orrs	r1, r2
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003506:	430a      	orrs	r2, r1
 8003508:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800350c:	4313      	orrs	r3, r2
 800350e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003510:	f7ff fc44 	bl	8002d9c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800351e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003522:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003524:	f7fe fd68 	bl	8001ff8 <HAL_GetTick>
 8003528:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800352c:	f7fe fd64 	bl	8001ff8 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e059      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800353e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0ef      	beq.n	800352c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800354c:	e050      	b.n	80035f0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e04f      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d147      	bne.n	80035f0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003560:	f7ff fc1c 	bl	8002d9c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800356e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003572:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003574:	f7fe fd40 	bl	8001ff8 <HAL_GetTick>
 8003578:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800357c:	f7fe fd3c 	bl	8001ff8 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e031      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800358e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0ef      	beq.n	800357c <HAL_RCC_OscConfig+0x664>
 800359c:	e028      	b.n	80035f0 <HAL_RCC_OscConfig+0x6d8>
 800359e:	bf00      	nop
 80035a0:	58000400 	.word	0x58000400
 80035a4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	2b0c      	cmp	r3, #12
 80035ac:	d01e      	beq.n	80035ec <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ae:	f7ff fc04 	bl	8002dba <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b2:	f7fe fd21 	bl	8001ff8 <HAL_GetTick>
 80035b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035b8:	e008      	b.n	80035cc <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ba:	f7fe fd1d 	bl	8001ff8 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d901      	bls.n	80035cc <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e012      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1ef      	bne.n	80035ba <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80035da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035e4:	4b05      	ldr	r3, [pc, #20]	; (80035fc <HAL_RCC_OscConfig+0x6e4>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	60cb      	str	r3, [r1, #12]
 80035ea:	e001      	b.n	80035f0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e000      	b.n	80035f2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3734      	adds	r7, #52	; 0x34
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd90      	pop	{r4, r7, pc}
 80035fa:	bf00      	nop
 80035fc:	eefefffc 	.word	0xeefefffc

08003600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e12d      	b.n	8003870 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003614:	4b98      	ldr	r3, [pc, #608]	; (8003878 <HAL_RCC_ClockConfig+0x278>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d91b      	bls.n	800365a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003622:	4b95      	ldr	r3, [pc, #596]	; (8003878 <HAL_RCC_ClockConfig+0x278>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f023 0207 	bic.w	r2, r3, #7
 800362a:	4993      	ldr	r1, [pc, #588]	; (8003878 <HAL_RCC_ClockConfig+0x278>)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	4313      	orrs	r3, r2
 8003630:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003632:	f7fe fce1 	bl	8001ff8 <HAL_GetTick>
 8003636:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003638:	e008      	b.n	800364c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800363a:	f7fe fcdd 	bl	8001ff8 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e111      	b.n	8003870 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800364c:	4b8a      	ldr	r3, [pc, #552]	; (8003878 <HAL_RCC_ClockConfig+0x278>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d1ef      	bne.n	800363a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d016      	beq.n	8003694 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff fafb 	bl	8002c66 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003670:	f7fe fcc2 	bl	8001ff8 <HAL_GetTick>
 8003674:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003676:	e008      	b.n	800368a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003678:	f7fe fcbe 	bl	8001ff8 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e0f2      	b.n	8003870 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800368a:	f7ff fbe8 	bl	8002e5e <LL_RCC_IsActiveFlag_HPRE>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0f1      	beq.n	8003678 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d016      	beq.n	80036ce <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff faf2 	bl	8002c8e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80036aa:	f7fe fca5 	bl	8001ff8 <HAL_GetTick>
 80036ae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80036b2:	f7fe fca1 	bl	8001ff8 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e0d5      	b.n	8003870 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80036c4:	f7ff fbdd 	bl	8002e82 <LL_RCC_IsActiveFlag_C2HPRE>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0f1      	beq.n	80036b2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d016      	beq.n	8003708 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff faeb 	bl	8002cba <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80036e4:	f7fe fc88 	bl	8001ff8 <HAL_GetTick>
 80036e8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80036ec:	f7fe fc84 	bl	8001ff8 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e0b8      	b.n	8003870 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80036fe:	f7ff fbd3 	bl	8002ea8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0f1      	beq.n	80036ec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	d016      	beq.n	8003742 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff fae5 	bl	8002ce8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800371e:	f7fe fc6b 	bl	8001ff8 <HAL_GetTick>
 8003722:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003724:	e008      	b.n	8003738 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003726:	f7fe fc67 	bl	8001ff8 <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d901      	bls.n	8003738 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e09b      	b.n	8003870 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003738:	f7ff fbc9 	bl	8002ece <LL_RCC_IsActiveFlag_PPRE1>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f1      	beq.n	8003726 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b00      	cmp	r3, #0
 800374c:	d017      	beq.n	800377e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff fadb 	bl	8002d10 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800375a:	f7fe fc4d 	bl	8001ff8 <HAL_GetTick>
 800375e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003760:	e008      	b.n	8003774 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003762:	f7fe fc49 	bl	8001ff8 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e07d      	b.n	8003870 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003774:	f7ff fbbd 	bl	8002ef2 <LL_RCC_IsActiveFlag_PPRE2>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f1      	beq.n	8003762 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d043      	beq.n	8003812 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b02      	cmp	r3, #2
 8003790:	d106      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003792:	f7ff f87b 	bl	800288c <LL_RCC_HSE_IsReady>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d11e      	bne.n	80037da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e067      	b.n	8003870 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d106      	bne.n	80037b6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80037a8:	f7ff fb16 	bl	8002dd8 <LL_RCC_PLL_IsReady>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d113      	bne.n	80037da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e05c      	b.n	8003870 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80037be:	f7ff f9e3 	bl	8002b88 <LL_RCC_MSI_IsReady>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d108      	bne.n	80037da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e051      	b.n	8003870 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80037cc:	f7ff f88e 	bl	80028ec <LL_RCC_HSI_IsReady>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e04a      	b.n	8003870 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff fa21 	bl	8002c26 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e4:	f7fe fc08 	bl	8001ff8 <HAL_GetTick>
 80037e8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ea:	e00a      	b.n	8003802 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ec:	f7fe fc04 	bl	8001ff8 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e036      	b.n	8003870 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003802:	f7ff fa24 	bl	8002c4e <LL_RCC_GetSysClkSource>
 8003806:	4602      	mov	r2, r0
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	429a      	cmp	r2, r3
 8003810:	d1ec      	bne.n	80037ec <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003812:	4b19      	ldr	r3, [pc, #100]	; (8003878 <HAL_RCC_ClockConfig+0x278>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	429a      	cmp	r2, r3
 800381e:	d21b      	bcs.n	8003858 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003820:	4b15      	ldr	r3, [pc, #84]	; (8003878 <HAL_RCC_ClockConfig+0x278>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f023 0207 	bic.w	r2, r3, #7
 8003828:	4913      	ldr	r1, [pc, #76]	; (8003878 <HAL_RCC_ClockConfig+0x278>)
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	4313      	orrs	r3, r2
 800382e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003830:	f7fe fbe2 	bl	8001ff8 <HAL_GetTick>
 8003834:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003836:	e008      	b.n	800384a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003838:	f7fe fbde 	bl	8001ff8 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e012      	b.n	8003870 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800384a:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <HAL_RCC_ClockConfig+0x278>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d1ef      	bne.n	8003838 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003858:	f000 f87e 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 800385c:	4603      	mov	r3, r0
 800385e:	4a07      	ldr	r2, [pc, #28]	; (800387c <HAL_RCC_ClockConfig+0x27c>)
 8003860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003862:	f7fe fbd5 	bl	8002010 <HAL_GetTickPrio>
 8003866:	4603      	mov	r3, r0
 8003868:	4618      	mov	r0, r3
 800386a:	f7fe fb77 	bl	8001f5c <HAL_InitTick>
 800386e:	4603      	mov	r3, r0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	58004000 	.word	0x58004000
 800387c:	20000014 	.word	0x20000014

08003880 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003880:	b590      	push	{r4, r7, lr}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003886:	f7ff f9e2 	bl	8002c4e <LL_RCC_GetSysClkSource>
 800388a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10a      	bne.n	80038a8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003892:	f7ff f99e 	bl	8002bd2 <LL_RCC_MSI_GetRange>
 8003896:	4603      	mov	r3, r0
 8003898:	091b      	lsrs	r3, r3, #4
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	4a2b      	ldr	r2, [pc, #172]	; (800394c <HAL_RCC_GetSysClockFreq+0xcc>)
 80038a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	e04b      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d102      	bne.n	80038b4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038ae:	4b28      	ldr	r3, [pc, #160]	; (8003950 <HAL_RCC_GetSysClockFreq+0xd0>)
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	e045      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b08      	cmp	r3, #8
 80038b8:	d10a      	bne.n	80038d0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80038ba:	f7fe ffb7 	bl	800282c <LL_RCC_HSE_IsEnabledDiv2>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d102      	bne.n	80038ca <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80038c4:	4b22      	ldr	r3, [pc, #136]	; (8003950 <HAL_RCC_GetSysClockFreq+0xd0>)
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	e03a      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80038ca:	4b22      	ldr	r3, [pc, #136]	; (8003954 <HAL_RCC_GetSysClockFreq+0xd4>)
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	e037      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80038d0:	f7ff fab9 	bl	8002e46 <LL_RCC_PLL_GetMainSource>
 80038d4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d003      	beq.n	80038e4 <HAL_RCC_GetSysClockFreq+0x64>
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d003      	beq.n	80038ea <HAL_RCC_GetSysClockFreq+0x6a>
 80038e2:	e00d      	b.n	8003900 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80038e4:	4b1a      	ldr	r3, [pc, #104]	; (8003950 <HAL_RCC_GetSysClockFreq+0xd0>)
 80038e6:	60bb      	str	r3, [r7, #8]
        break;
 80038e8:	e015      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80038ea:	f7fe ff9f 	bl	800282c <LL_RCC_HSE_IsEnabledDiv2>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d102      	bne.n	80038fa <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80038f4:	4b16      	ldr	r3, [pc, #88]	; (8003950 <HAL_RCC_GetSysClockFreq+0xd0>)
 80038f6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80038f8:	e00d      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80038fa:	4b16      	ldr	r3, [pc, #88]	; (8003954 <HAL_RCC_GetSysClockFreq+0xd4>)
 80038fc:	60bb      	str	r3, [r7, #8]
        break;
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003900:	f7ff f967 	bl	8002bd2 <LL_RCC_MSI_GetRange>
 8003904:	4603      	mov	r3, r0
 8003906:	091b      	lsrs	r3, r3, #4
 8003908:	f003 030f 	and.w	r3, r3, #15
 800390c:	4a0f      	ldr	r2, [pc, #60]	; (800394c <HAL_RCC_GetSysClockFreq+0xcc>)
 800390e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003912:	60bb      	str	r3, [r7, #8]
        break;
 8003914:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003916:	f7ff fa71 	bl	8002dfc <LL_RCC_PLL_GetN>
 800391a:	4602      	mov	r2, r0
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	fb03 f402 	mul.w	r4, r3, r2
 8003922:	f7ff fa84 	bl	8002e2e <LL_RCC_PLL_GetDivider>
 8003926:	4603      	mov	r3, r0
 8003928:	091b      	lsrs	r3, r3, #4
 800392a:	3301      	adds	r3, #1
 800392c:	fbb4 f4f3 	udiv	r4, r4, r3
 8003930:	f7ff fa71 	bl	8002e16 <LL_RCC_PLL_GetR>
 8003934:	4603      	mov	r3, r0
 8003936:	0f5b      	lsrs	r3, r3, #29
 8003938:	3301      	adds	r3, #1
 800393a:	fbb4 f3f3 	udiv	r3, r4, r3
 800393e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003940:	68fb      	ldr	r3, [r7, #12]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	bd90      	pop	{r4, r7, pc}
 800394a:	bf00      	nop
 800394c:	08006038 	.word	0x08006038
 8003950:	00f42400 	.word	0x00f42400
 8003954:	01e84800 	.word	0x01e84800

08003958 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003958:	b598      	push	{r3, r4, r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800395c:	f7ff ff90 	bl	8003880 <HAL_RCC_GetSysClockFreq>
 8003960:	4604      	mov	r4, r0
 8003962:	f7ff f9e9 	bl	8002d38 <LL_RCC_GetAHBPrescaler>
 8003966:	4603      	mov	r3, r0
 8003968:	091b      	lsrs	r3, r3, #4
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	4a03      	ldr	r2, [pc, #12]	; (800397c <HAL_RCC_GetHCLKFreq+0x24>)
 8003970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003974:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003978:	4618      	mov	r0, r3
 800397a:	bd98      	pop	{r3, r4, r7, pc}
 800397c:	08005fd8 	.word	0x08005fd8

08003980 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003980:	b598      	push	{r3, r4, r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003984:	f7ff ffe8 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 8003988:	4604      	mov	r4, r0
 800398a:	f7ff f9ef 	bl	8002d6c <LL_RCC_GetAPB1Prescaler>
 800398e:	4603      	mov	r3, r0
 8003990:	0a1b      	lsrs	r3, r3, #8
 8003992:	f003 0307 	and.w	r3, r3, #7
 8003996:	4a04      	ldr	r2, [pc, #16]	; (80039a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800399c:	f003 031f 	and.w	r3, r3, #31
 80039a0:	fa24 f303 	lsr.w	r3, r4, r3
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	bd98      	pop	{r3, r4, r7, pc}
 80039a8:	08006018 	.word	0x08006018

080039ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039ac:	b598      	push	{r3, r4, r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80039b0:	f7ff ffd2 	bl	8003958 <HAL_RCC_GetHCLKFreq>
 80039b4:	4604      	mov	r4, r0
 80039b6:	f7ff f9e5 	bl	8002d84 <LL_RCC_GetAPB2Prescaler>
 80039ba:	4603      	mov	r3, r0
 80039bc:	0adb      	lsrs	r3, r3, #11
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	4a04      	ldr	r2, [pc, #16]	; (80039d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80039c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c8:	f003 031f 	and.w	r3, r3, #31
 80039cc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	bd98      	pop	{r3, r4, r7, pc}
 80039d4:	08006018 	.word	0x08006018

080039d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80039d8:	b590      	push	{r4, r7, lr}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2bb0      	cmp	r3, #176	; 0xb0
 80039e4:	d903      	bls.n	80039ee <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80039e6:	4b15      	ldr	r3, [pc, #84]	; (8003a3c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	e007      	b.n	80039fe <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	091b      	lsrs	r3, r3, #4
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	4a11      	ldr	r2, [pc, #68]	; (8003a3c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80039f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039fc:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80039fe:	f7ff f9a7 	bl	8002d50 <LL_RCC_GetAHB4Prescaler>
 8003a02:	4603      	mov	r3, r0
 8003a04:	091b      	lsrs	r3, r3, #4
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	4a0d      	ldr	r2, [pc, #52]	; (8003a40 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a16:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	4a0a      	ldr	r2, [pc, #40]	; (8003a44 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a20:	0c9c      	lsrs	r4, r3, #18
 8003a22:	f7fe fef5 	bl	8002810 <HAL_PWREx_GetVoltageRange>
 8003a26:	4603      	mov	r3, r0
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	f000 f80c 	bl	8003a48 <RCC_SetFlashLatency>
 8003a30:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd90      	pop	{r4, r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	08006038 	.word	0x08006038
 8003a40:	08005fd8 	.word	0x08005fd8
 8003a44:	431bde83 	.word	0x431bde83

08003a48 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b093      	sub	sp, #76	; 0x4c
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003a52:	4b37      	ldr	r3, [pc, #220]	; (8003b30 <RCC_SetFlashLatency+0xe8>)
 8003a54:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003a58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003a5e:	4a35      	ldr	r2, [pc, #212]	; (8003b34 <RCC_SetFlashLatency+0xec>)
 8003a60:	f107 031c 	add.w	r3, r7, #28
 8003a64:	ca07      	ldmia	r2, {r0, r1, r2}
 8003a66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003a6a:	4b33      	ldr	r3, [pc, #204]	; (8003b38 <RCC_SetFlashLatency+0xf0>)
 8003a6c:	f107 040c 	add.w	r4, r7, #12
 8003a70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003a76:	2300      	movs	r3, #0
 8003a78:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a80:	d11a      	bne.n	8003ab8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003a82:	2300      	movs	r3, #0
 8003a84:	643b      	str	r3, [r7, #64]	; 0x40
 8003a86:	e013      	b.n	8003ab0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003a88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	3348      	adds	r3, #72	; 0x48
 8003a8e:	443b      	add	r3, r7
 8003a90:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d807      	bhi.n	8003aaa <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	3348      	adds	r3, #72	; 0x48
 8003aa0:	443b      	add	r3, r7
 8003aa2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003aa6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003aa8:	e020      	b.n	8003aec <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aac:	3301      	adds	r3, #1
 8003aae:	643b      	str	r3, [r7, #64]	; 0x40
 8003ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d9e8      	bls.n	8003a88 <RCC_SetFlashLatency+0x40>
 8003ab6:	e019      	b.n	8003aec <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003ab8:	2300      	movs	r3, #0
 8003aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003abc:	e013      	b.n	8003ae6 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	3348      	adds	r3, #72	; 0x48
 8003ac4:	443b      	add	r3, r7
 8003ac6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d807      	bhi.n	8003ae0 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	3348      	adds	r3, #72	; 0x48
 8003ad6:	443b      	add	r3, r7
 8003ad8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003adc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003ade:	e005      	b.n	8003aec <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d9e8      	bls.n	8003abe <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003aec:	4b13      	ldr	r3, [pc, #76]	; (8003b3c <RCC_SetFlashLatency+0xf4>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f023 0207 	bic.w	r2, r3, #7
 8003af4:	4911      	ldr	r1, [pc, #68]	; (8003b3c <RCC_SetFlashLatency+0xf4>)
 8003af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003af8:	4313      	orrs	r3, r2
 8003afa:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003afc:	f7fe fa7c 	bl	8001ff8 <HAL_GetTick>
 8003b00:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003b02:	e008      	b.n	8003b16 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003b04:	f7fe fa78 	bl	8001ff8 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e007      	b.n	8003b26 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003b16:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <RCC_SetFlashLatency+0xf4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d1ef      	bne.n	8003b04 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	374c      	adds	r7, #76	; 0x4c
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd90      	pop	{r4, r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	08005fa0 	.word	0x08005fa0
 8003b34:	08005fb0 	.word	0x08005fb0
 8003b38:	08005fbc 	.word	0x08005fbc
 8003b3c:	58004000 	.word	0x58004000

08003b40 <LL_RCC_LSE_IsEnabled>:
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <LL_RCC_LSE_IsEnabled+0x18>
 8003b54:	2301      	movs	r3, #1
 8003b56:	e000      	b.n	8003b5a <LL_RCC_LSE_IsEnabled+0x1a>
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <LL_RCC_LSE_IsReady>:
{
 8003b64:	b480      	push	{r7}
 8003b66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b70:	f003 0302 	and.w	r3, r3, #2
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d101      	bne.n	8003b7c <LL_RCC_LSE_IsReady+0x18>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <LL_RCC_LSE_IsReady+0x1a>
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <LL_RCC_MSI_EnablePLLMode>:
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8003b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b96:	f043 0304 	orr.w	r3, r3, #4
 8003b9a:	6013      	str	r3, [r2, #0]
}
 8003b9c:	bf00      	nop
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <LL_RCC_SetRFWKPClockSource>:
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bb6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <LL_RCC_SetSMPSClockSource>:
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	f023 0203 	bic.w	r2, r3, #3
 8003be4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr

08003bfa <LL_RCC_SetSMPSPrescaler>:
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	b083      	sub	sp, #12
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8003c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <LL_RCC_SetUSARTClockSource>:
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c32:	f023 0203 	bic.w	r2, r3, #3
 8003c36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <LL_RCC_SetLPUARTClockSource>:
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <LL_RCC_SetI2CClockSource>:
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003c82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	091b      	lsrs	r3, r3, #4
 8003c8e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003c92:	43db      	mvns	r3, r3
 8003c94:	401a      	ands	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003c9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <LL_RCC_SetLPTIMClockSource>:
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cc0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	0c1b      	lsrs	r3, r3, #16
 8003cc8:	041b      	lsls	r3, r3, #16
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	401a      	ands	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	041b      	lsls	r3, r3, #16
 8003cd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <LL_RCC_SetSAIClockSource>:
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <LL_RCC_SetRNGClockSource>:
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d24:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003d28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <LL_RCC_SetCLK48ClockSource>:
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d50:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <LL_RCC_SetUSBClockSource>:
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff ffe3 	bl	8003d40 <LL_RCC_SetCLK48ClockSource>
}
 8003d7a:	bf00      	nop
 8003d7c:	3708      	adds	r7, #8
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <LL_RCC_SetADCClockSource>:
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <LL_RCC_SetRTCClockSource>:
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003db6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <LL_RCC_GetRTCClockSource>:
{
 8003dda:	b480      	push	{r7}
 8003ddc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003dde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <LL_RCC_ForceBackupDomainReset>:
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e0c:	bf00      	nop
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003e16:	b480      	push	{r7}
 8003e18:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e2e:	bf00      	nop
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <LL_RCC_PLLSAI1_Enable>:
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003e3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e4a:	6013      	str	r3, [r2, #0]
}
 8003e4c:	bf00      	nop
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <LL_RCC_PLLSAI1_Disable>:
{
 8003e56:	b480      	push	{r7}
 8003e58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e68:	6013      	str	r3, [r2, #0]
}
 8003e6a:	bf00      	nop
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <LL_RCC_PLLSAI1_IsReady>:
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003e78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e86:	d101      	bne.n	8003e8c <LL_RCC_PLLSAI1_IsReady+0x18>
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d034      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ebc:	d021      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003ebe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ec2:	d81b      	bhi.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ec4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ec8:	d01d      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003eca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ece:	d815      	bhi.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00b      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003ed4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ed8:	d110      	bne.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003eea:	e00d      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3304      	adds	r3, #4
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 f94d 	bl	8004190 <RCCEx_PLLSAI1_ConfigNP>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003efa:	e005      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	77fb      	strb	r3, [r7, #31]
        break;
 8003f00:	e002      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003f02:	bf00      	nop
 8003f04:	e000      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f08:	7ffb      	ldrb	r3, [r7, #31]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d105      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff fee8 	bl	8003ce8 <LL_RCC_SetSAIClockSource>
 8003f18:	e001      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1a:	7ffb      	ldrb	r3, [r7, #31]
 8003f1c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d046      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003f2a:	f7ff ff56 	bl	8003dda <LL_RCC_GetRTCClockSource>
 8003f2e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d03c      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003f3a:	f7fe fc59 	bl	80027f0 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d105      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff ff30 	bl	8003dae <LL_RCC_SetRTCClockSource>
 8003f4e:	e02e      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003f50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f58:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003f5a:	f7ff ff4b 	bl	8003df4 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003f5e:	f7ff ff5a 	bl	8003e16 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003f70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003f7a:	f7ff fde1 	bl	8003b40 <LL_RCC_LSE_IsEnabled>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d114      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f84:	f7fe f838 	bl	8001ff8 <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003f8a:	e00b      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f8c:	f7fe f834 	bl	8001ff8 <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d902      	bls.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	77fb      	strb	r3, [r7, #31]
              break;
 8003fa2:	e004      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003fa4:	f7ff fdde 	bl	8003b64 <LL_RCC_LSE_IsReady>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d1ee      	bne.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003fae:	7ffb      	ldrb	r3, [r7, #31]
 8003fb0:	77bb      	strb	r3, [r7, #30]
 8003fb2:	e001      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb4:	7ffb      	ldrb	r3, [r7, #31]
 8003fb6:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d004      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff fe2a 	bl	8003c22 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d004      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f7ff fe35 	bl	8003c4e <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0310 	and.w	r3, r3, #16
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d004      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff fe5d 	bl	8003cb4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0320 	and.w	r3, r3, #32
 8004002:	2b00      	cmp	r3, #0
 8004004:	d004      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff fe52 	bl	8003cb4 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	d004      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff fe2a 	bl	8003c7a <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b00      	cmp	r3, #0
 8004030:	d004      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	4618      	mov	r0, r3
 8004038:	f7ff fe1f 	bl	8003c7a <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004044:	2b00      	cmp	r3, #0
 8004046:	d022      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff fe8d 	bl	8003d6c <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004056:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800405a:	d107      	bne.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800405c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004066:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800406a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004070:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004074:	d10b      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3304      	adds	r3, #4
 800407a:	4618      	mov	r0, r3
 800407c:	f000 f8e3 	bl	8004246 <RCCEx_PLLSAI1_ConfigNQ>
 8004080:	4603      	mov	r3, r0
 8004082:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004084:	7ffb      	ldrb	r3, [r7, #31]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800408a:	7ffb      	ldrb	r3, [r7, #31]
 800408c:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004096:	2b00      	cmp	r3, #0
 8004098:	d02b      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a2:	d008      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040ac:	d003      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d105      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff fe2a 	bl	8003d14 <LL_RCC_SetRNGClockSource>
 80040c0:	e00a      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	2000      	movs	r0, #0
 80040ce:	f7ff fe21 	bl	8003d14 <LL_RCC_SetRNGClockSource>
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f7ff fe34 	bl	8003d40 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040dc:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80040e0:	d107      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80040e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040f0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d022      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004102:	4618      	mov	r0, r3
 8004104:	f7ff fe3d 	bl	8003d82 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004110:	d107      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800411c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004120:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004126:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800412a:	d10b      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3304      	adds	r3, #4
 8004130:	4618      	mov	r0, r3
 8004132:	f000 f8e3 	bl	80042fc <RCCEx_PLLSAI1_ConfigNR>
 8004136:	4603      	mov	r3, r0
 8004138:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800413a:	7ffb      	ldrb	r3, [r7, #31]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004140:	7ffb      	ldrb	r3, [r7, #31]
 8004142:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d004      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff fd26 	bl	8003ba6 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d009      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff fd45 	bl	8003bfa <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff fd2c 	bl	8003bd2 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800417a:	7fbb      	ldrb	r3, [r7, #30]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3720      	adds	r7, #32
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8004188:	f7ff fcfe 	bl	8003b88 <LL_RCC_MSI_EnablePLLMode>
}
 800418c:	bf00      	nop
 800418e:	bd80      	pop	{r7, pc}

08004190 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800419c:	f7ff fe5b 	bl	8003e56 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80041a0:	f7fd ff2a 	bl	8001ff8 <HAL_GetTick>
 80041a4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80041a6:	e009      	b.n	80041bc <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041a8:	f7fd ff26 	bl	8001ff8 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d902      	bls.n	80041bc <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	73fb      	strb	r3, [r7, #15]
      break;
 80041ba:	e004      	b.n	80041c6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80041bc:	f7ff fe5a 	bl	8003e74 <LL_RCC_PLLSAI1_IsReady>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f0      	bne.n	80041a8 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d137      	bne.n	800423c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80041cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	021b      	lsls	r3, r3, #8
 80041dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041e0:	4313      	orrs	r3, r2
 80041e2:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80041e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041f6:	4313      	orrs	r3, r2
 80041f8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80041fa:	f7ff fe1d 	bl	8003e38 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041fe:	f7fd fefb 	bl	8001ff8 <HAL_GetTick>
 8004202:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004204:	e009      	b.n	800421a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004206:	f7fd fef7 	bl	8001ff8 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d902      	bls.n	800421a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	73fb      	strb	r3, [r7, #15]
        break;
 8004218:	e004      	b.n	8004224 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800421a:	f7ff fe2b 	bl	8003e74 <LL_RCC_PLLSAI1_IsReady>
 800421e:	4603      	mov	r3, r0
 8004220:	2b01      	cmp	r3, #1
 8004222:	d1f0      	bne.n	8004206 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d108      	bne.n	800423c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800422a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800422e:	691a      	ldr	r2, [r3, #16]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004238:	4313      	orrs	r3, r2
 800423a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800423c:	7bfb      	ldrb	r3, [r7, #15]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b084      	sub	sp, #16
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800424e:	2300      	movs	r3, #0
 8004250:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004252:	f7ff fe00 	bl	8003e56 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004256:	f7fd fecf 	bl	8001ff8 <HAL_GetTick>
 800425a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800425c:	e009      	b.n	8004272 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800425e:	f7fd fecb 	bl	8001ff8 <HAL_GetTick>
 8004262:	4602      	mov	r2, r0
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d902      	bls.n	8004272 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	73fb      	strb	r3, [r7, #15]
      break;
 8004270:	e004      	b.n	800427c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004272:	f7ff fdff 	bl	8003e74 <LL_RCC_PLLSAI1_IsReady>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1f0      	bne.n	800425e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800427c:	7bfb      	ldrb	r3, [r7, #15]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d137      	bne.n	80042f2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	021b      	lsls	r3, r3, #8
 8004292:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004296:	4313      	orrs	r3, r2
 8004298:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800429a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042ac:	4313      	orrs	r3, r2
 80042ae:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80042b0:	f7ff fdc2 	bl	8003e38 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b4:	f7fd fea0 	bl	8001ff8 <HAL_GetTick>
 80042b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80042ba:	e009      	b.n	80042d0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80042bc:	f7fd fe9c 	bl	8001ff8 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d902      	bls.n	80042d0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	73fb      	strb	r3, [r7, #15]
        break;
 80042ce:	e004      	b.n	80042da <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80042d0:	f7ff fdd0 	bl	8003e74 <LL_RCC_PLLSAI1_IsReady>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d1f0      	bne.n	80042bc <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80042da:	7bfb      	ldrb	r3, [r7, #15]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d108      	bne.n	80042f2 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80042e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e4:	691a      	ldr	r2, [r3, #16]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042ee:	4313      	orrs	r3, r2
 80042f0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80042f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004304:	2300      	movs	r3, #0
 8004306:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004308:	f7ff fda5 	bl	8003e56 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800430c:	f7fd fe74 	bl	8001ff8 <HAL_GetTick>
 8004310:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004312:	e009      	b.n	8004328 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004314:	f7fd fe70 	bl	8001ff8 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d902      	bls.n	8004328 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	73fb      	strb	r3, [r7, #15]
      break;
 8004326:	e004      	b.n	8004332 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004328:	f7ff fda4 	bl	8003e74 <LL_RCC_PLLSAI1_IsReady>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f0      	bne.n	8004314 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004332:	7bfb      	ldrb	r3, [r7, #15]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d137      	bne.n	80043a8 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004338:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	021b      	lsls	r3, r3, #8
 8004348:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800434c:	4313      	orrs	r3, r2
 800434e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004362:	4313      	orrs	r3, r2
 8004364:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004366:	f7ff fd67 	bl	8003e38 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800436a:	f7fd fe45 	bl	8001ff8 <HAL_GetTick>
 800436e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004370:	e009      	b.n	8004386 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004372:	f7fd fe41 	bl	8001ff8 <HAL_GetTick>
 8004376:	4602      	mov	r2, r0
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b02      	cmp	r3, #2
 800437e:	d902      	bls.n	8004386 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004380:	2303      	movs	r3, #3
 8004382:	73fb      	strb	r3, [r7, #15]
        break;
 8004384:	e004      	b.n	8004390 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004386:	f7ff fd75 	bl	8003e74 <LL_RCC_PLLSAI1_IsReady>
 800438a:	4603      	mov	r3, r0
 800438c:	2b01      	cmp	r3, #1
 800438e:	d1f0      	bne.n	8004372 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004390:	7bfb      	ldrb	r3, [r7, #15]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d108      	bne.n	80043a8 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043a4:	4313      	orrs	r3, r2
 80043a6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <LL_RCC_GetUSARTClockSource>:
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80043ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4013      	ands	r3, r2
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <LL_RCC_GetLPUARTClockSource>:
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80043da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4013      	ands	r3, r2
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	370c      	adds	r7, #12
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr

080043f2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b082      	sub	sp, #8
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e042      	b.n	800448a <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440a:	2b00      	cmp	r3, #0
 800440c:	d106      	bne.n	800441c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fd fb54 	bl	8001ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2224      	movs	r2, #36	; 0x24
 8004420:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0201 	bic.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 fba7 	bl	8004b90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f97c 	bl	8004740 <UART_SetConfig>
 8004448:	4603      	mov	r3, r0
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e01b      	b.n	800448a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004460:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004470:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 0201 	orr.w	r2, r2, #1
 8004480:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fc26 	bl	8004cd4 <UART_CheckIdleState>
 8004488:	4603      	mov	r3, r0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b08a      	sub	sp, #40	; 0x28
 8004496:	af02      	add	r7, sp, #8
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	603b      	str	r3, [r7, #0]
 800449e:	4613      	mov	r3, r2
 80044a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d17b      	bne.n	80045a4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d002      	beq.n	80044b8 <HAL_UART_Transmit+0x26>
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e074      	b.n	80045a6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2221      	movs	r2, #33	; 0x21
 80044c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044cc:	f7fd fd94 	bl	8001ff8 <HAL_GetTick>
 80044d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	88fa      	ldrh	r2, [r7, #6]
 80044d6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	88fa      	ldrh	r2, [r7, #6]
 80044de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044ea:	d108      	bne.n	80044fe <HAL_UART_Transmit+0x6c>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d104      	bne.n	80044fe <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80044f4:	2300      	movs	r3, #0
 80044f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	61bb      	str	r3, [r7, #24]
 80044fc:	e003      	b.n	8004506 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004502:	2300      	movs	r3, #0
 8004504:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004506:	e030      	b.n	800456a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	2200      	movs	r2, #0
 8004510:	2180      	movs	r1, #128	; 0x80
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 fc88 	bl	8004e28 <UART_WaitOnFlagUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d005      	beq.n	800452a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2220      	movs	r2, #32
 8004522:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e03d      	b.n	80045a6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10b      	bne.n	8004548 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	461a      	mov	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800453e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	3302      	adds	r3, #2
 8004544:	61bb      	str	r3, [r7, #24]
 8004546:	e007      	b.n	8004558 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	781a      	ldrb	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	3301      	adds	r3, #1
 8004556:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800455e:	b29b      	uxth	r3, r3
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004570:	b29b      	uxth	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1c8      	bne.n	8004508 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	9300      	str	r3, [sp, #0]
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2200      	movs	r2, #0
 800457e:	2140      	movs	r1, #64	; 0x40
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f000 fc51 	bl	8004e28 <UART_WaitOnFlagUntilTimeout>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d005      	beq.n	8004598 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e006      	b.n	80045a6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2220      	movs	r2, #32
 800459c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80045a0:	2300      	movs	r3, #0
 80045a2:	e000      	b.n	80045a6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80045a4:	2302      	movs	r3, #2
  }
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3720      	adds	r7, #32
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b08a      	sub	sp, #40	; 0x28
 80045b2:	af02      	add	r7, sp, #8
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	603b      	str	r3, [r7, #0]
 80045ba:	4613      	mov	r3, r2
 80045bc:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045c4:	2b20      	cmp	r3, #32
 80045c6:	f040 80b5 	bne.w	8004734 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <HAL_UART_Receive+0x28>
 80045d0:	88fb      	ldrh	r3, [r7, #6]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e0ad      	b.n	8004736 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2222      	movs	r2, #34	; 0x22
 80045e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045f0:	f7fd fd02 	bl	8001ff8 <HAL_GetTick>
 80045f4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	88fa      	ldrh	r2, [r7, #6]
 80045fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	88fa      	ldrh	r2, [r7, #6]
 8004602:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800460e:	d10e      	bne.n	800462e <HAL_UART_Receive+0x80>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d105      	bne.n	8004624 <HAL_UART_Receive+0x76>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800461e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004622:	e02d      	b.n	8004680 <HAL_UART_Receive+0xd2>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	22ff      	movs	r2, #255	; 0xff
 8004628:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800462c:	e028      	b.n	8004680 <HAL_UART_Receive+0xd2>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10d      	bne.n	8004652 <HAL_UART_Receive+0xa4>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d104      	bne.n	8004648 <HAL_UART_Receive+0x9a>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	22ff      	movs	r2, #255	; 0xff
 8004642:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004646:	e01b      	b.n	8004680 <HAL_UART_Receive+0xd2>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	227f      	movs	r2, #127	; 0x7f
 800464c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004650:	e016      	b.n	8004680 <HAL_UART_Receive+0xd2>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800465a:	d10d      	bne.n	8004678 <HAL_UART_Receive+0xca>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d104      	bne.n	800466e <HAL_UART_Receive+0xc0>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	227f      	movs	r2, #127	; 0x7f
 8004668:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800466c:	e008      	b.n	8004680 <HAL_UART_Receive+0xd2>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	223f      	movs	r2, #63	; 0x3f
 8004672:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004676:	e003      	b.n	8004680 <HAL_UART_Receive+0xd2>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004686:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004690:	d108      	bne.n	80046a4 <HAL_UART_Receive+0xf6>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d104      	bne.n	80046a4 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800469a:	2300      	movs	r3, #0
 800469c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	e003      	b.n	80046ac <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80046ac:	e036      	b.n	800471c <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2200      	movs	r2, #0
 80046b6:	2120      	movs	r1, #32
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 fbb5 	bl	8004e28 <UART_WaitOnFlagUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d005      	beq.n	80046d0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e032      	b.n	8004736 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10c      	bne.n	80046f0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046dc:	b29a      	uxth	r2, r3
 80046de:	8a7b      	ldrh	r3, [r7, #18]
 80046e0:	4013      	ands	r3, r2
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	3302      	adds	r3, #2
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	e00c      	b.n	800470a <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	b2da      	uxtb	r2, r3
 80046f8:	8a7b      	ldrh	r3, [r7, #18]
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	4013      	ands	r3, r2
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	3301      	adds	r3, #1
 8004708:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004722:	b29b      	uxth	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1c2      	bne.n	80046ae <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8004730:	2300      	movs	r3, #0
 8004732:	e000      	b.n	8004736 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004734:	2302      	movs	r3, #2
  }
}
 8004736:	4618      	mov	r0, r3
 8004738:	3720      	adds	r7, #32
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004744:	b08c      	sub	sp, #48	; 0x30
 8004746:	af00      	add	r7, sp, #0
 8004748:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800474a:	2300      	movs	r3, #0
 800474c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	431a      	orrs	r2, r3
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	431a      	orrs	r2, r3
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	4313      	orrs	r3, r2
 8004766:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4baf      	ldr	r3, [pc, #700]	; (8004a2c <UART_SetConfig+0x2ec>)
 8004770:	4013      	ands	r3, r2
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	6812      	ldr	r2, [r2, #0]
 8004776:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004778:	430b      	orrs	r3, r1
 800477a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4aa4      	ldr	r2, [pc, #656]	; (8004a30 <UART_SetConfig+0x2f0>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d004      	beq.n	80047ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047a8:	4313      	orrs	r3, r2
 80047aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80047b6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	6812      	ldr	r2, [r2, #0]
 80047be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047c0:	430b      	orrs	r3, r1
 80047c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	f023 010f 	bic.w	r1, r3, #15
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a95      	ldr	r2, [pc, #596]	; (8004a34 <UART_SetConfig+0x2f4>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d125      	bne.n	8004830 <UART_SetConfig+0xf0>
 80047e4:	2003      	movs	r0, #3
 80047e6:	f7ff fde4 	bl	80043b2 <LL_RCC_GetUSARTClockSource>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d81b      	bhi.n	8004828 <UART_SetConfig+0xe8>
 80047f0:	a201      	add	r2, pc, #4	; (adr r2, 80047f8 <UART_SetConfig+0xb8>)
 80047f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f6:	bf00      	nop
 80047f8:	08004809 	.word	0x08004809
 80047fc:	08004819 	.word	0x08004819
 8004800:	08004811 	.word	0x08004811
 8004804:	08004821 	.word	0x08004821
 8004808:	2301      	movs	r3, #1
 800480a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800480e:	e042      	b.n	8004896 <UART_SetConfig+0x156>
 8004810:	2302      	movs	r3, #2
 8004812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004816:	e03e      	b.n	8004896 <UART_SetConfig+0x156>
 8004818:	2304      	movs	r3, #4
 800481a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800481e:	e03a      	b.n	8004896 <UART_SetConfig+0x156>
 8004820:	2308      	movs	r3, #8
 8004822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004826:	e036      	b.n	8004896 <UART_SetConfig+0x156>
 8004828:	2310      	movs	r3, #16
 800482a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800482e:	e032      	b.n	8004896 <UART_SetConfig+0x156>
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a7e      	ldr	r2, [pc, #504]	; (8004a30 <UART_SetConfig+0x2f0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d12a      	bne.n	8004890 <UART_SetConfig+0x150>
 800483a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800483e:	f7ff fdc8 	bl	80043d2 <LL_RCC_GetLPUARTClockSource>
 8004842:	4603      	mov	r3, r0
 8004844:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004848:	d01a      	beq.n	8004880 <UART_SetConfig+0x140>
 800484a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800484e:	d81b      	bhi.n	8004888 <UART_SetConfig+0x148>
 8004850:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004854:	d00c      	beq.n	8004870 <UART_SetConfig+0x130>
 8004856:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800485a:	d815      	bhi.n	8004888 <UART_SetConfig+0x148>
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <UART_SetConfig+0x128>
 8004860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004864:	d008      	beq.n	8004878 <UART_SetConfig+0x138>
 8004866:	e00f      	b.n	8004888 <UART_SetConfig+0x148>
 8004868:	2300      	movs	r3, #0
 800486a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800486e:	e012      	b.n	8004896 <UART_SetConfig+0x156>
 8004870:	2302      	movs	r3, #2
 8004872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004876:	e00e      	b.n	8004896 <UART_SetConfig+0x156>
 8004878:	2304      	movs	r3, #4
 800487a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800487e:	e00a      	b.n	8004896 <UART_SetConfig+0x156>
 8004880:	2308      	movs	r3, #8
 8004882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004886:	e006      	b.n	8004896 <UART_SetConfig+0x156>
 8004888:	2310      	movs	r3, #16
 800488a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800488e:	e002      	b.n	8004896 <UART_SetConfig+0x156>
 8004890:	2310      	movs	r3, #16
 8004892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a65      	ldr	r2, [pc, #404]	; (8004a30 <UART_SetConfig+0x2f0>)
 800489c:	4293      	cmp	r3, r2
 800489e:	f040 8097 	bne.w	80049d0 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d823      	bhi.n	80048f2 <UART_SetConfig+0x1b2>
 80048aa:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <UART_SetConfig+0x170>)
 80048ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b0:	080048d5 	.word	0x080048d5
 80048b4:	080048f3 	.word	0x080048f3
 80048b8:	080048dd 	.word	0x080048dd
 80048bc:	080048f3 	.word	0x080048f3
 80048c0:	080048e3 	.word	0x080048e3
 80048c4:	080048f3 	.word	0x080048f3
 80048c8:	080048f3 	.word	0x080048f3
 80048cc:	080048f3 	.word	0x080048f3
 80048d0:	080048eb 	.word	0x080048eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048d4:	f7ff f854 	bl	8003980 <HAL_RCC_GetPCLK1Freq>
 80048d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048da:	e010      	b.n	80048fe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048dc:	4b56      	ldr	r3, [pc, #344]	; (8004a38 <UART_SetConfig+0x2f8>)
 80048de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048e0:	e00d      	b.n	80048fe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048e2:	f7fe ffcd 	bl	8003880 <HAL_RCC_GetSysClockFreq>
 80048e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80048e8:	e009      	b.n	80048fe <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80048f0:	e005      	b.n	80048fe <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80048fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 812b 	beq.w	8004b5c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	4a4c      	ldr	r2, [pc, #304]	; (8004a3c <UART_SetConfig+0x2fc>)
 800490c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004910:	461a      	mov	r2, r3
 8004912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004914:	fbb3 f3f2 	udiv	r3, r3, r2
 8004918:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	4613      	mov	r3, r2
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	4413      	add	r3, r2
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	429a      	cmp	r2, r3
 8004928:	d305      	bcc.n	8004936 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	429a      	cmp	r2, r3
 8004934:	d903      	bls.n	800493e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800493c:	e10e      	b.n	8004b5c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	2200      	movs	r2, #0
 8004942:	60bb      	str	r3, [r7, #8]
 8004944:	60fa      	str	r2, [r7, #12]
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	4a3c      	ldr	r2, [pc, #240]	; (8004a3c <UART_SetConfig+0x2fc>)
 800494c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004950:	b29b      	uxth	r3, r3
 8004952:	2200      	movs	r2, #0
 8004954:	603b      	str	r3, [r7, #0]
 8004956:	607a      	str	r2, [r7, #4]
 8004958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800495c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004960:	f7fc f854 	bl	8000a0c <__aeabi_uldivmod>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4610      	mov	r0, r2
 800496a:	4619      	mov	r1, r3
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	f04f 0300 	mov.w	r3, #0
 8004974:	020b      	lsls	r3, r1, #8
 8004976:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800497a:	0202      	lsls	r2, r0, #8
 800497c:	6979      	ldr	r1, [r7, #20]
 800497e:	6849      	ldr	r1, [r1, #4]
 8004980:	0849      	lsrs	r1, r1, #1
 8004982:	2000      	movs	r0, #0
 8004984:	460c      	mov	r4, r1
 8004986:	4605      	mov	r5, r0
 8004988:	eb12 0804 	adds.w	r8, r2, r4
 800498c:	eb43 0905 	adc.w	r9, r3, r5
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	469a      	mov	sl, r3
 8004998:	4693      	mov	fp, r2
 800499a:	4652      	mov	r2, sl
 800499c:	465b      	mov	r3, fp
 800499e:	4640      	mov	r0, r8
 80049a0:	4649      	mov	r1, r9
 80049a2:	f7fc f833 	bl	8000a0c <__aeabi_uldivmod>
 80049a6:	4602      	mov	r2, r0
 80049a8:	460b      	mov	r3, r1
 80049aa:	4613      	mov	r3, r2
 80049ac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049b4:	d308      	bcc.n	80049c8 <UART_SetConfig+0x288>
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049bc:	d204      	bcs.n	80049c8 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6a3a      	ldr	r2, [r7, #32]
 80049c4:	60da      	str	r2, [r3, #12]
 80049c6:	e0c9      	b.n	8004b5c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80049ce:	e0c5      	b.n	8004b5c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049d8:	d16d      	bne.n	8004ab6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 80049da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80049de:	3b01      	subs	r3, #1
 80049e0:	2b07      	cmp	r3, #7
 80049e2:	d82d      	bhi.n	8004a40 <UART_SetConfig+0x300>
 80049e4:	a201      	add	r2, pc, #4	; (adr r2, 80049ec <UART_SetConfig+0x2ac>)
 80049e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ea:	bf00      	nop
 80049ec:	08004a0d 	.word	0x08004a0d
 80049f0:	08004a15 	.word	0x08004a15
 80049f4:	08004a41 	.word	0x08004a41
 80049f8:	08004a1b 	.word	0x08004a1b
 80049fc:	08004a41 	.word	0x08004a41
 8004a00:	08004a41 	.word	0x08004a41
 8004a04:	08004a41 	.word	0x08004a41
 8004a08:	08004a23 	.word	0x08004a23
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a0c:	f7fe ffce 	bl	80039ac <HAL_RCC_GetPCLK2Freq>
 8004a10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a12:	e01b      	b.n	8004a4c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a14:	4b08      	ldr	r3, [pc, #32]	; (8004a38 <UART_SetConfig+0x2f8>)
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a18:	e018      	b.n	8004a4c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a1a:	f7fe ff31 	bl	8003880 <HAL_RCC_GetSysClockFreq>
 8004a1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a20:	e014      	b.n	8004a4c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a28:	e010      	b.n	8004a4c <UART_SetConfig+0x30c>
 8004a2a:	bf00      	nop
 8004a2c:	cfff69f3 	.word	0xcfff69f3
 8004a30:	40008000 	.word	0x40008000
 8004a34:	40013800 	.word	0x40013800
 8004a38:	00f42400 	.word	0x00f42400
 8004a3c:	08006078 	.word	0x08006078
      default:
        pclk = 0U;
 8004a40:	2300      	movs	r3, #0
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 8084 	beq.w	8004b5c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a58:	4a4b      	ldr	r2, [pc, #300]	; (8004b88 <UART_SetConfig+0x448>)
 8004a5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a66:	005a      	lsls	r2, r3, #1
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	085b      	lsrs	r3, r3, #1
 8004a6e:	441a      	add	r2, r3
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a78:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	2b0f      	cmp	r3, #15
 8004a7e:	d916      	bls.n	8004aae <UART_SetConfig+0x36e>
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a86:	d212      	bcs.n	8004aae <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a88:	6a3b      	ldr	r3, [r7, #32]
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	f023 030f 	bic.w	r3, r3, #15
 8004a90:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	085b      	lsrs	r3, r3, #1
 8004a96:	b29b      	uxth	r3, r3
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	8bfb      	ldrh	r3, [r7, #30]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	8bfa      	ldrh	r2, [r7, #30]
 8004aaa:	60da      	str	r2, [r3, #12]
 8004aac:	e056      	b.n	8004b5c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ab4:	e052      	b.n	8004b5c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ab6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004aba:	3b01      	subs	r3, #1
 8004abc:	2b07      	cmp	r3, #7
 8004abe:	d822      	bhi.n	8004b06 <UART_SetConfig+0x3c6>
 8004ac0:	a201      	add	r2, pc, #4	; (adr r2, 8004ac8 <UART_SetConfig+0x388>)
 8004ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac6:	bf00      	nop
 8004ac8:	08004ae9 	.word	0x08004ae9
 8004acc:	08004af1 	.word	0x08004af1
 8004ad0:	08004b07 	.word	0x08004b07
 8004ad4:	08004af7 	.word	0x08004af7
 8004ad8:	08004b07 	.word	0x08004b07
 8004adc:	08004b07 	.word	0x08004b07
 8004ae0:	08004b07 	.word	0x08004b07
 8004ae4:	08004aff 	.word	0x08004aff
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ae8:	f7fe ff60 	bl	80039ac <HAL_RCC_GetPCLK2Freq>
 8004aec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004aee:	e010      	b.n	8004b12 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004af0:	4b26      	ldr	r3, [pc, #152]	; (8004b8c <UART_SetConfig+0x44c>)
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004af4:	e00d      	b.n	8004b12 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004af6:	f7fe fec3 	bl	8003880 <HAL_RCC_GetSysClockFreq>
 8004afa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004afc:	e009      	b.n	8004b12 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b04:	e005      	b.n	8004b12 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b10:	bf00      	nop
    }

    if (pclk != 0U)
 8004b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d021      	beq.n	8004b5c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b1c:	4a1a      	ldr	r2, [pc, #104]	; (8004b88 <UART_SetConfig+0x448>)
 8004b1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b22:	461a      	mov	r2, r3
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	441a      	add	r2, r3
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	2b0f      	cmp	r3, #15
 8004b40:	d909      	bls.n	8004b56 <UART_SetConfig+0x416>
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b48:	d205      	bcs.n	8004b56 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60da      	str	r2, [r3, #12]
 8004b54:	e002      	b.n	8004b5c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	2200      	movs	r2, #0
 8004b76:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004b78:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3730      	adds	r7, #48	; 0x30
 8004b80:	46bd      	mov	sp, r7
 8004b82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b86:	bf00      	nop
 8004b88:	08006078 	.word	0x08006078
 8004b8c:	00f42400 	.word	0x00f42400

08004b90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9c:	f003 0308 	and.w	r3, r3, #8
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00a      	beq.n	8004bba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00a      	beq.n	8004bdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00a      	beq.n	8004bfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c02:	f003 0304 	and.w	r3, r3, #4
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00a      	beq.n	8004c20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c24:	f003 0310 	and.w	r3, r3, #16
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00a      	beq.n	8004c42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c46:	f003 0320 	and.w	r3, r3, #32
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00a      	beq.n	8004c64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d01a      	beq.n	8004ca6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c8e:	d10a      	bne.n	8004ca6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004caa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00a      	beq.n	8004cc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	605a      	str	r2, [r3, #4]
  }
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b098      	sub	sp, #96	; 0x60
 8004cd8:	af02      	add	r7, sp, #8
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ce4:	f7fd f988 	bl	8001ff8 <HAL_GetTick>
 8004ce8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0308 	and.w	r3, r3, #8
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d12f      	bne.n	8004d58 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d00:	2200      	movs	r2, #0
 8004d02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f88e 	bl	8004e28 <UART_WaitOnFlagUntilTimeout>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d022      	beq.n	8004d58 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1a:	e853 3f00 	ldrex	r3, [r3]
 8004d1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d26:	653b      	str	r3, [r7, #80]	; 0x50
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d30:	647b      	str	r3, [r7, #68]	; 0x44
 8004d32:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d38:	e841 2300 	strex	r3, r2, [r1]
 8004d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1e6      	bne.n	8004d12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e063      	b.n	8004e20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0304 	and.w	r3, r3, #4
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d149      	bne.n	8004dfa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 f857 	bl	8004e28 <UART_WaitOnFlagUntilTimeout>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d03c      	beq.n	8004dfa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	e853 3f00 	ldrex	r3, [r3]
 8004d8c:	623b      	str	r3, [r7, #32]
   return(result);
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d9e:	633b      	str	r3, [r7, #48]	; 0x30
 8004da0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004da6:	e841 2300 	strex	r3, r2, [r1]
 8004daa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1e6      	bne.n	8004d80 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3308      	adds	r3, #8
 8004db8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	e853 3f00 	ldrex	r3, [r3]
 8004dc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f023 0301 	bic.w	r3, r3, #1
 8004dc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	3308      	adds	r3, #8
 8004dd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dd2:	61fa      	str	r2, [r7, #28]
 8004dd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd6:	69b9      	ldr	r1, [r7, #24]
 8004dd8:	69fa      	ldr	r2, [r7, #28]
 8004dda:	e841 2300 	strex	r3, r2, [r1]
 8004dde:	617b      	str	r3, [r7, #20]
   return(result);
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d1e5      	bne.n	8004db2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e012      	b.n	8004e20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3758      	adds	r7, #88	; 0x58
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	603b      	str	r3, [r7, #0]
 8004e34:	4613      	mov	r3, r2
 8004e36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e38:	e04f      	b.n	8004eda <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e40:	d04b      	beq.n	8004eda <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e42:	f7fd f8d9 	bl	8001ff8 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d302      	bcc.n	8004e58 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e04e      	b.n	8004efa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0304 	and.w	r3, r3, #4
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d037      	beq.n	8004eda <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	2b80      	cmp	r3, #128	; 0x80
 8004e6e:	d034      	beq.n	8004eda <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	2b40      	cmp	r3, #64	; 0x40
 8004e74:	d031      	beq.n	8004eda <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	f003 0308 	and.w	r3, r3, #8
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d110      	bne.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2208      	movs	r2, #8
 8004e8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 f838 	bl	8004f02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2208      	movs	r2, #8
 8004e96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e029      	b.n	8004efa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69db      	ldr	r3, [r3, #28]
 8004eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb4:	d111      	bne.n	8004eda <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ebe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f000 f81e 	bl	8004f02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e00f      	b.n	8004efa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	69da      	ldr	r2, [r3, #28]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	bf0c      	ite	eq
 8004eea:	2301      	moveq	r3, #1
 8004eec:	2300      	movne	r3, #0
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	79fb      	ldrb	r3, [r7, #7]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d0a0      	beq.n	8004e3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b095      	sub	sp, #84	; 0x54
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f12:	e853 3f00 	ldrex	r3, [r3]
 8004f16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	461a      	mov	r2, r3
 8004f26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f28:	643b      	str	r3, [r7, #64]	; 0x40
 8004f2a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f2e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f30:	e841 2300 	strex	r3, r2, [r1]
 8004f34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1e6      	bne.n	8004f0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	3308      	adds	r3, #8
 8004f42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	e853 3f00 	ldrex	r3, [r3]
 8004f4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f52:	f023 0301 	bic.w	r3, r3, #1
 8004f56:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3308      	adds	r3, #8
 8004f5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f68:	e841 2300 	strex	r3, r2, [r1]
 8004f6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e3      	bne.n	8004f3c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d118      	bne.n	8004fae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	e853 3f00 	ldrex	r3, [r3]
 8004f88:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f023 0310 	bic.w	r3, r3, #16
 8004f90:	647b      	str	r3, [r7, #68]	; 0x44
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	461a      	mov	r2, r3
 8004f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f9a:	61bb      	str	r3, [r7, #24]
 8004f9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9e:	6979      	ldr	r1, [r7, #20]
 8004fa0:	69ba      	ldr	r2, [r7, #24]
 8004fa2:	e841 2300 	strex	r3, r2, [r1]
 8004fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1e6      	bne.n	8004f7c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004fc2:	bf00      	nop
 8004fc4:	3754      	adds	r7, #84	; 0x54
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004fce:	b480      	push	{r7}
 8004fd0:	b085      	sub	sp, #20
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d101      	bne.n	8004fe4 <HAL_UARTEx_DisableFifoMode+0x16>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	e027      	b.n	8005034 <HAL_UARTEx_DisableFifoMode+0x66>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2224      	movs	r2, #36	; 0x24
 8004ff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0201 	bic.w	r2, r2, #1
 800500a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005012:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2220      	movs	r2, #32
 8005026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005050:	2b01      	cmp	r3, #1
 8005052:	d101      	bne.n	8005058 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005054:	2302      	movs	r3, #2
 8005056:	e02d      	b.n	80050b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2224      	movs	r2, #36	; 0x24
 8005064:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0201 	bic.w	r2, r2, #1
 800507e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f84f 	bl	8005138 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2220      	movs	r2, #32
 80050a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d101      	bne.n	80050d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80050d0:	2302      	movs	r3, #2
 80050d2:	e02d      	b.n	8005130 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2224      	movs	r2, #36	; 0x24
 80050e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 0201 	bic.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	430a      	orrs	r2, r1
 800510e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f811 	bl	8005138 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2220      	movs	r2, #32
 8005122:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005144:	2b00      	cmp	r3, #0
 8005146:	d108      	bne.n	800515a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005158:	e031      	b.n	80051be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800515a:	2308      	movs	r3, #8
 800515c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800515e:	2308      	movs	r3, #8
 8005160:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	0e5b      	lsrs	r3, r3, #25
 800516a:	b2db      	uxtb	r3, r3
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	0f5b      	lsrs	r3, r3, #29
 800517a:	b2db      	uxtb	r3, r3
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005182:	7bbb      	ldrb	r3, [r7, #14]
 8005184:	7b3a      	ldrb	r2, [r7, #12]
 8005186:	4911      	ldr	r1, [pc, #68]	; (80051cc <UARTEx_SetNbDataToProcess+0x94>)
 8005188:	5c8a      	ldrb	r2, [r1, r2]
 800518a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800518e:	7b3a      	ldrb	r2, [r7, #12]
 8005190:	490f      	ldr	r1, [pc, #60]	; (80051d0 <UARTEx_SetNbDataToProcess+0x98>)
 8005192:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005194:	fb93 f3f2 	sdiv	r3, r3, r2
 8005198:	b29a      	uxth	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051a0:	7bfb      	ldrb	r3, [r7, #15]
 80051a2:	7b7a      	ldrb	r2, [r7, #13]
 80051a4:	4909      	ldr	r1, [pc, #36]	; (80051cc <UARTEx_SetNbDataToProcess+0x94>)
 80051a6:	5c8a      	ldrb	r2, [r1, r2]
 80051a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80051ac:	7b7a      	ldrb	r2, [r7, #13]
 80051ae:	4908      	ldr	r1, [pc, #32]	; (80051d0 <UARTEx_SetNbDataToProcess+0x98>)
 80051b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80051be:	bf00      	nop
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	08006090 	.word	0x08006090
 80051d0:	08006098 	.word	0x08006098

080051d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80051dc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80051e0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	43db      	mvns	r3, r3
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	4013      	ands	r3, r2
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800520a:	b480      	push	{r7}
 800520c:	b085      	sub	sp, #20
 800520e:	af00      	add	r7, sp, #0
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	1d3b      	adds	r3, r7, #4
 8005214:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2201      	movs	r2, #1
 800521c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2200      	movs	r2, #0
 800522c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
	...

08005248 <siscanf>:
 8005248:	b40e      	push	{r1, r2, r3}
 800524a:	b510      	push	{r4, lr}
 800524c:	b09f      	sub	sp, #124	; 0x7c
 800524e:	ac21      	add	r4, sp, #132	; 0x84
 8005250:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005254:	f854 2b04 	ldr.w	r2, [r4], #4
 8005258:	9201      	str	r2, [sp, #4]
 800525a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800525e:	9004      	str	r0, [sp, #16]
 8005260:	9008      	str	r0, [sp, #32]
 8005262:	f7fa ff8d 	bl	8000180 <strlen>
 8005266:	4b0c      	ldr	r3, [pc, #48]	; (8005298 <siscanf+0x50>)
 8005268:	9005      	str	r0, [sp, #20]
 800526a:	9009      	str	r0, [sp, #36]	; 0x24
 800526c:	930d      	str	r3, [sp, #52]	; 0x34
 800526e:	480b      	ldr	r0, [pc, #44]	; (800529c <siscanf+0x54>)
 8005270:	9a01      	ldr	r2, [sp, #4]
 8005272:	6800      	ldr	r0, [r0, #0]
 8005274:	9403      	str	r4, [sp, #12]
 8005276:	2300      	movs	r3, #0
 8005278:	9311      	str	r3, [sp, #68]	; 0x44
 800527a:	9316      	str	r3, [sp, #88]	; 0x58
 800527c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005280:	f8ad 301e 	strh.w	r3, [sp, #30]
 8005284:	a904      	add	r1, sp, #16
 8005286:	4623      	mov	r3, r4
 8005288:	f000 f9a0 	bl	80055cc <__ssvfiscanf_r>
 800528c:	b01f      	add	sp, #124	; 0x7c
 800528e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005292:	b003      	add	sp, #12
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	080052a1 	.word	0x080052a1
 800529c:	2000006c 	.word	0x2000006c

080052a0 <__seofread>:
 80052a0:	2000      	movs	r0, #0
 80052a2:	4770      	bx	lr

080052a4 <memset>:
 80052a4:	4402      	add	r2, r0
 80052a6:	4603      	mov	r3, r0
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d100      	bne.n	80052ae <memset+0xa>
 80052ac:	4770      	bx	lr
 80052ae:	f803 1b01 	strb.w	r1, [r3], #1
 80052b2:	e7f9      	b.n	80052a8 <memset+0x4>

080052b4 <__errno>:
 80052b4:	4b01      	ldr	r3, [pc, #4]	; (80052bc <__errno+0x8>)
 80052b6:	6818      	ldr	r0, [r3, #0]
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	2000006c 	.word	0x2000006c

080052c0 <__libc_init_array>:
 80052c0:	b570      	push	{r4, r5, r6, lr}
 80052c2:	4d0d      	ldr	r5, [pc, #52]	; (80052f8 <__libc_init_array+0x38>)
 80052c4:	4c0d      	ldr	r4, [pc, #52]	; (80052fc <__libc_init_array+0x3c>)
 80052c6:	1b64      	subs	r4, r4, r5
 80052c8:	10a4      	asrs	r4, r4, #2
 80052ca:	2600      	movs	r6, #0
 80052cc:	42a6      	cmp	r6, r4
 80052ce:	d109      	bne.n	80052e4 <__libc_init_array+0x24>
 80052d0:	4d0b      	ldr	r5, [pc, #44]	; (8005300 <__libc_init_array+0x40>)
 80052d2:	4c0c      	ldr	r4, [pc, #48]	; (8005304 <__libc_init_array+0x44>)
 80052d4:	f000 fdf4 	bl	8005ec0 <_init>
 80052d8:	1b64      	subs	r4, r4, r5
 80052da:	10a4      	asrs	r4, r4, #2
 80052dc:	2600      	movs	r6, #0
 80052de:	42a6      	cmp	r6, r4
 80052e0:	d105      	bne.n	80052ee <__libc_init_array+0x2e>
 80052e2:	bd70      	pop	{r4, r5, r6, pc}
 80052e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052e8:	4798      	blx	r3
 80052ea:	3601      	adds	r6, #1
 80052ec:	e7ee      	b.n	80052cc <__libc_init_array+0xc>
 80052ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80052f2:	4798      	blx	r3
 80052f4:	3601      	adds	r6, #1
 80052f6:	e7f2      	b.n	80052de <__libc_init_array+0x1e>
 80052f8:	080061c8 	.word	0x080061c8
 80052fc:	080061c8 	.word	0x080061c8
 8005300:	080061c8 	.word	0x080061c8
 8005304:	080061cc 	.word	0x080061cc

08005308 <__retarget_lock_acquire_recursive>:
 8005308:	4770      	bx	lr

0800530a <__retarget_lock_release_recursive>:
 800530a:	4770      	bx	lr

0800530c <memcpy>:
 800530c:	440a      	add	r2, r1
 800530e:	4291      	cmp	r1, r2
 8005310:	f100 33ff 	add.w	r3, r0, #4294967295
 8005314:	d100      	bne.n	8005318 <memcpy+0xc>
 8005316:	4770      	bx	lr
 8005318:	b510      	push	{r4, lr}
 800531a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800531e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005322:	4291      	cmp	r1, r2
 8005324:	d1f9      	bne.n	800531a <memcpy+0xe>
 8005326:	bd10      	pop	{r4, pc}

08005328 <_free_r>:
 8005328:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800532a:	2900      	cmp	r1, #0
 800532c:	d044      	beq.n	80053b8 <_free_r+0x90>
 800532e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005332:	9001      	str	r0, [sp, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	f1a1 0404 	sub.w	r4, r1, #4
 800533a:	bfb8      	it	lt
 800533c:	18e4      	addlt	r4, r4, r3
 800533e:	f000 f8df 	bl	8005500 <__malloc_lock>
 8005342:	4a1e      	ldr	r2, [pc, #120]	; (80053bc <_free_r+0x94>)
 8005344:	9801      	ldr	r0, [sp, #4]
 8005346:	6813      	ldr	r3, [r2, #0]
 8005348:	b933      	cbnz	r3, 8005358 <_free_r+0x30>
 800534a:	6063      	str	r3, [r4, #4]
 800534c:	6014      	str	r4, [r2, #0]
 800534e:	b003      	add	sp, #12
 8005350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005354:	f000 b8da 	b.w	800550c <__malloc_unlock>
 8005358:	42a3      	cmp	r3, r4
 800535a:	d908      	bls.n	800536e <_free_r+0x46>
 800535c:	6825      	ldr	r5, [r4, #0]
 800535e:	1961      	adds	r1, r4, r5
 8005360:	428b      	cmp	r3, r1
 8005362:	bf01      	itttt	eq
 8005364:	6819      	ldreq	r1, [r3, #0]
 8005366:	685b      	ldreq	r3, [r3, #4]
 8005368:	1949      	addeq	r1, r1, r5
 800536a:	6021      	streq	r1, [r4, #0]
 800536c:	e7ed      	b.n	800534a <_free_r+0x22>
 800536e:	461a      	mov	r2, r3
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	b10b      	cbz	r3, 8005378 <_free_r+0x50>
 8005374:	42a3      	cmp	r3, r4
 8005376:	d9fa      	bls.n	800536e <_free_r+0x46>
 8005378:	6811      	ldr	r1, [r2, #0]
 800537a:	1855      	adds	r5, r2, r1
 800537c:	42a5      	cmp	r5, r4
 800537e:	d10b      	bne.n	8005398 <_free_r+0x70>
 8005380:	6824      	ldr	r4, [r4, #0]
 8005382:	4421      	add	r1, r4
 8005384:	1854      	adds	r4, r2, r1
 8005386:	42a3      	cmp	r3, r4
 8005388:	6011      	str	r1, [r2, #0]
 800538a:	d1e0      	bne.n	800534e <_free_r+0x26>
 800538c:	681c      	ldr	r4, [r3, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	6053      	str	r3, [r2, #4]
 8005392:	440c      	add	r4, r1
 8005394:	6014      	str	r4, [r2, #0]
 8005396:	e7da      	b.n	800534e <_free_r+0x26>
 8005398:	d902      	bls.n	80053a0 <_free_r+0x78>
 800539a:	230c      	movs	r3, #12
 800539c:	6003      	str	r3, [r0, #0]
 800539e:	e7d6      	b.n	800534e <_free_r+0x26>
 80053a0:	6825      	ldr	r5, [r4, #0]
 80053a2:	1961      	adds	r1, r4, r5
 80053a4:	428b      	cmp	r3, r1
 80053a6:	bf04      	itt	eq
 80053a8:	6819      	ldreq	r1, [r3, #0]
 80053aa:	685b      	ldreq	r3, [r3, #4]
 80053ac:	6063      	str	r3, [r4, #4]
 80053ae:	bf04      	itt	eq
 80053b0:	1949      	addeq	r1, r1, r5
 80053b2:	6021      	streq	r1, [r4, #0]
 80053b4:	6054      	str	r4, [r2, #4]
 80053b6:	e7ca      	b.n	800534e <_free_r+0x26>
 80053b8:	b003      	add	sp, #12
 80053ba:	bd30      	pop	{r4, r5, pc}
 80053bc:	200005e8 	.word	0x200005e8

080053c0 <sbrk_aligned>:
 80053c0:	b570      	push	{r4, r5, r6, lr}
 80053c2:	4e0e      	ldr	r6, [pc, #56]	; (80053fc <sbrk_aligned+0x3c>)
 80053c4:	460c      	mov	r4, r1
 80053c6:	6831      	ldr	r1, [r6, #0]
 80053c8:	4605      	mov	r5, r0
 80053ca:	b911      	cbnz	r1, 80053d2 <sbrk_aligned+0x12>
 80053cc:	f000 fc38 	bl	8005c40 <_sbrk_r>
 80053d0:	6030      	str	r0, [r6, #0]
 80053d2:	4621      	mov	r1, r4
 80053d4:	4628      	mov	r0, r5
 80053d6:	f000 fc33 	bl	8005c40 <_sbrk_r>
 80053da:	1c43      	adds	r3, r0, #1
 80053dc:	d00a      	beq.n	80053f4 <sbrk_aligned+0x34>
 80053de:	1cc4      	adds	r4, r0, #3
 80053e0:	f024 0403 	bic.w	r4, r4, #3
 80053e4:	42a0      	cmp	r0, r4
 80053e6:	d007      	beq.n	80053f8 <sbrk_aligned+0x38>
 80053e8:	1a21      	subs	r1, r4, r0
 80053ea:	4628      	mov	r0, r5
 80053ec:	f000 fc28 	bl	8005c40 <_sbrk_r>
 80053f0:	3001      	adds	r0, #1
 80053f2:	d101      	bne.n	80053f8 <sbrk_aligned+0x38>
 80053f4:	f04f 34ff 	mov.w	r4, #4294967295
 80053f8:	4620      	mov	r0, r4
 80053fa:	bd70      	pop	{r4, r5, r6, pc}
 80053fc:	200005ec 	.word	0x200005ec

08005400 <_malloc_r>:
 8005400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005404:	1ccd      	adds	r5, r1, #3
 8005406:	f025 0503 	bic.w	r5, r5, #3
 800540a:	3508      	adds	r5, #8
 800540c:	2d0c      	cmp	r5, #12
 800540e:	bf38      	it	cc
 8005410:	250c      	movcc	r5, #12
 8005412:	2d00      	cmp	r5, #0
 8005414:	4607      	mov	r7, r0
 8005416:	db01      	blt.n	800541c <_malloc_r+0x1c>
 8005418:	42a9      	cmp	r1, r5
 800541a:	d905      	bls.n	8005428 <_malloc_r+0x28>
 800541c:	230c      	movs	r3, #12
 800541e:	603b      	str	r3, [r7, #0]
 8005420:	2600      	movs	r6, #0
 8005422:	4630      	mov	r0, r6
 8005424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005428:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80054fc <_malloc_r+0xfc>
 800542c:	f000 f868 	bl	8005500 <__malloc_lock>
 8005430:	f8d8 3000 	ldr.w	r3, [r8]
 8005434:	461c      	mov	r4, r3
 8005436:	bb5c      	cbnz	r4, 8005490 <_malloc_r+0x90>
 8005438:	4629      	mov	r1, r5
 800543a:	4638      	mov	r0, r7
 800543c:	f7ff ffc0 	bl	80053c0 <sbrk_aligned>
 8005440:	1c43      	adds	r3, r0, #1
 8005442:	4604      	mov	r4, r0
 8005444:	d155      	bne.n	80054f2 <_malloc_r+0xf2>
 8005446:	f8d8 4000 	ldr.w	r4, [r8]
 800544a:	4626      	mov	r6, r4
 800544c:	2e00      	cmp	r6, #0
 800544e:	d145      	bne.n	80054dc <_malloc_r+0xdc>
 8005450:	2c00      	cmp	r4, #0
 8005452:	d048      	beq.n	80054e6 <_malloc_r+0xe6>
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	4631      	mov	r1, r6
 8005458:	4638      	mov	r0, r7
 800545a:	eb04 0903 	add.w	r9, r4, r3
 800545e:	f000 fbef 	bl	8005c40 <_sbrk_r>
 8005462:	4581      	cmp	r9, r0
 8005464:	d13f      	bne.n	80054e6 <_malloc_r+0xe6>
 8005466:	6821      	ldr	r1, [r4, #0]
 8005468:	1a6d      	subs	r5, r5, r1
 800546a:	4629      	mov	r1, r5
 800546c:	4638      	mov	r0, r7
 800546e:	f7ff ffa7 	bl	80053c0 <sbrk_aligned>
 8005472:	3001      	adds	r0, #1
 8005474:	d037      	beq.n	80054e6 <_malloc_r+0xe6>
 8005476:	6823      	ldr	r3, [r4, #0]
 8005478:	442b      	add	r3, r5
 800547a:	6023      	str	r3, [r4, #0]
 800547c:	f8d8 3000 	ldr.w	r3, [r8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d038      	beq.n	80054f6 <_malloc_r+0xf6>
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	42a2      	cmp	r2, r4
 8005488:	d12b      	bne.n	80054e2 <_malloc_r+0xe2>
 800548a:	2200      	movs	r2, #0
 800548c:	605a      	str	r2, [r3, #4]
 800548e:	e00f      	b.n	80054b0 <_malloc_r+0xb0>
 8005490:	6822      	ldr	r2, [r4, #0]
 8005492:	1b52      	subs	r2, r2, r5
 8005494:	d41f      	bmi.n	80054d6 <_malloc_r+0xd6>
 8005496:	2a0b      	cmp	r2, #11
 8005498:	d917      	bls.n	80054ca <_malloc_r+0xca>
 800549a:	1961      	adds	r1, r4, r5
 800549c:	42a3      	cmp	r3, r4
 800549e:	6025      	str	r5, [r4, #0]
 80054a0:	bf18      	it	ne
 80054a2:	6059      	strne	r1, [r3, #4]
 80054a4:	6863      	ldr	r3, [r4, #4]
 80054a6:	bf08      	it	eq
 80054a8:	f8c8 1000 	streq.w	r1, [r8]
 80054ac:	5162      	str	r2, [r4, r5]
 80054ae:	604b      	str	r3, [r1, #4]
 80054b0:	4638      	mov	r0, r7
 80054b2:	f104 060b 	add.w	r6, r4, #11
 80054b6:	f000 f829 	bl	800550c <__malloc_unlock>
 80054ba:	f026 0607 	bic.w	r6, r6, #7
 80054be:	1d23      	adds	r3, r4, #4
 80054c0:	1af2      	subs	r2, r6, r3
 80054c2:	d0ae      	beq.n	8005422 <_malloc_r+0x22>
 80054c4:	1b9b      	subs	r3, r3, r6
 80054c6:	50a3      	str	r3, [r4, r2]
 80054c8:	e7ab      	b.n	8005422 <_malloc_r+0x22>
 80054ca:	42a3      	cmp	r3, r4
 80054cc:	6862      	ldr	r2, [r4, #4]
 80054ce:	d1dd      	bne.n	800548c <_malloc_r+0x8c>
 80054d0:	f8c8 2000 	str.w	r2, [r8]
 80054d4:	e7ec      	b.n	80054b0 <_malloc_r+0xb0>
 80054d6:	4623      	mov	r3, r4
 80054d8:	6864      	ldr	r4, [r4, #4]
 80054da:	e7ac      	b.n	8005436 <_malloc_r+0x36>
 80054dc:	4634      	mov	r4, r6
 80054de:	6876      	ldr	r6, [r6, #4]
 80054e0:	e7b4      	b.n	800544c <_malloc_r+0x4c>
 80054e2:	4613      	mov	r3, r2
 80054e4:	e7cc      	b.n	8005480 <_malloc_r+0x80>
 80054e6:	230c      	movs	r3, #12
 80054e8:	603b      	str	r3, [r7, #0]
 80054ea:	4638      	mov	r0, r7
 80054ec:	f000 f80e 	bl	800550c <__malloc_unlock>
 80054f0:	e797      	b.n	8005422 <_malloc_r+0x22>
 80054f2:	6025      	str	r5, [r4, #0]
 80054f4:	e7dc      	b.n	80054b0 <_malloc_r+0xb0>
 80054f6:	605b      	str	r3, [r3, #4]
 80054f8:	deff      	udf	#255	; 0xff
 80054fa:	bf00      	nop
 80054fc:	200005e8 	.word	0x200005e8

08005500 <__malloc_lock>:
 8005500:	4801      	ldr	r0, [pc, #4]	; (8005508 <__malloc_lock+0x8>)
 8005502:	f7ff bf01 	b.w	8005308 <__retarget_lock_acquire_recursive>
 8005506:	bf00      	nop
 8005508:	200005e4 	.word	0x200005e4

0800550c <__malloc_unlock>:
 800550c:	4801      	ldr	r0, [pc, #4]	; (8005514 <__malloc_unlock+0x8>)
 800550e:	f7ff befc 	b.w	800530a <__retarget_lock_release_recursive>
 8005512:	bf00      	nop
 8005514:	200005e4 	.word	0x200005e4

08005518 <_sungetc_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	1c4b      	adds	r3, r1, #1
 800551c:	4614      	mov	r4, r2
 800551e:	d103      	bne.n	8005528 <_sungetc_r+0x10>
 8005520:	f04f 35ff 	mov.w	r5, #4294967295
 8005524:	4628      	mov	r0, r5
 8005526:	bd38      	pop	{r3, r4, r5, pc}
 8005528:	8993      	ldrh	r3, [r2, #12]
 800552a:	f023 0320 	bic.w	r3, r3, #32
 800552e:	8193      	strh	r3, [r2, #12]
 8005530:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005532:	6852      	ldr	r2, [r2, #4]
 8005534:	b2cd      	uxtb	r5, r1
 8005536:	b18b      	cbz	r3, 800555c <_sungetc_r+0x44>
 8005538:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800553a:	4293      	cmp	r3, r2
 800553c:	dd08      	ble.n	8005550 <_sungetc_r+0x38>
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	1e5a      	subs	r2, r3, #1
 8005542:	6022      	str	r2, [r4, #0]
 8005544:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005548:	6863      	ldr	r3, [r4, #4]
 800554a:	3301      	adds	r3, #1
 800554c:	6063      	str	r3, [r4, #4]
 800554e:	e7e9      	b.n	8005524 <_sungetc_r+0xc>
 8005550:	4621      	mov	r1, r4
 8005552:	f000 fb3a 	bl	8005bca <__submore>
 8005556:	2800      	cmp	r0, #0
 8005558:	d0f1      	beq.n	800553e <_sungetc_r+0x26>
 800555a:	e7e1      	b.n	8005520 <_sungetc_r+0x8>
 800555c:	6921      	ldr	r1, [r4, #16]
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	b151      	cbz	r1, 8005578 <_sungetc_r+0x60>
 8005562:	4299      	cmp	r1, r3
 8005564:	d208      	bcs.n	8005578 <_sungetc_r+0x60>
 8005566:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800556a:	42a9      	cmp	r1, r5
 800556c:	d104      	bne.n	8005578 <_sungetc_r+0x60>
 800556e:	3b01      	subs	r3, #1
 8005570:	3201      	adds	r2, #1
 8005572:	6023      	str	r3, [r4, #0]
 8005574:	6062      	str	r2, [r4, #4]
 8005576:	e7d5      	b.n	8005524 <_sungetc_r+0xc>
 8005578:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800557c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005580:	6363      	str	r3, [r4, #52]	; 0x34
 8005582:	2303      	movs	r3, #3
 8005584:	63a3      	str	r3, [r4, #56]	; 0x38
 8005586:	4623      	mov	r3, r4
 8005588:	f803 5f46 	strb.w	r5, [r3, #70]!
 800558c:	6023      	str	r3, [r4, #0]
 800558e:	2301      	movs	r3, #1
 8005590:	e7dc      	b.n	800554c <_sungetc_r+0x34>

08005592 <__ssrefill_r>:
 8005592:	b510      	push	{r4, lr}
 8005594:	460c      	mov	r4, r1
 8005596:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005598:	b169      	cbz	r1, 80055b6 <__ssrefill_r+0x24>
 800559a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800559e:	4299      	cmp	r1, r3
 80055a0:	d001      	beq.n	80055a6 <__ssrefill_r+0x14>
 80055a2:	f7ff fec1 	bl	8005328 <_free_r>
 80055a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80055a8:	6063      	str	r3, [r4, #4]
 80055aa:	2000      	movs	r0, #0
 80055ac:	6360      	str	r0, [r4, #52]	; 0x34
 80055ae:	b113      	cbz	r3, 80055b6 <__ssrefill_r+0x24>
 80055b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80055b2:	6023      	str	r3, [r4, #0]
 80055b4:	bd10      	pop	{r4, pc}
 80055b6:	6923      	ldr	r3, [r4, #16]
 80055b8:	6023      	str	r3, [r4, #0]
 80055ba:	2300      	movs	r3, #0
 80055bc:	6063      	str	r3, [r4, #4]
 80055be:	89a3      	ldrh	r3, [r4, #12]
 80055c0:	f043 0320 	orr.w	r3, r3, #32
 80055c4:	81a3      	strh	r3, [r4, #12]
 80055c6:	f04f 30ff 	mov.w	r0, #4294967295
 80055ca:	e7f3      	b.n	80055b4 <__ssrefill_r+0x22>

080055cc <__ssvfiscanf_r>:
 80055cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055d0:	460c      	mov	r4, r1
 80055d2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80055d6:	2100      	movs	r1, #0
 80055d8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80055dc:	49a6      	ldr	r1, [pc, #664]	; (8005878 <__ssvfiscanf_r+0x2ac>)
 80055de:	91a0      	str	r1, [sp, #640]	; 0x280
 80055e0:	f10d 0804 	add.w	r8, sp, #4
 80055e4:	49a5      	ldr	r1, [pc, #660]	; (800587c <__ssvfiscanf_r+0x2b0>)
 80055e6:	4fa6      	ldr	r7, [pc, #664]	; (8005880 <__ssvfiscanf_r+0x2b4>)
 80055e8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8005884 <__ssvfiscanf_r+0x2b8>
 80055ec:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80055f0:	4606      	mov	r6, r0
 80055f2:	91a1      	str	r1, [sp, #644]	; 0x284
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	7813      	ldrb	r3, [r2, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f000 815a 	beq.w	80058b2 <__ssvfiscanf_r+0x2e6>
 80055fe:	5cf9      	ldrb	r1, [r7, r3]
 8005600:	f011 0108 	ands.w	r1, r1, #8
 8005604:	f102 0501 	add.w	r5, r2, #1
 8005608:	d019      	beq.n	800563e <__ssvfiscanf_r+0x72>
 800560a:	6863      	ldr	r3, [r4, #4]
 800560c:	2b00      	cmp	r3, #0
 800560e:	dd0f      	ble.n	8005630 <__ssvfiscanf_r+0x64>
 8005610:	6823      	ldr	r3, [r4, #0]
 8005612:	781a      	ldrb	r2, [r3, #0]
 8005614:	5cba      	ldrb	r2, [r7, r2]
 8005616:	0712      	lsls	r2, r2, #28
 8005618:	d401      	bmi.n	800561e <__ssvfiscanf_r+0x52>
 800561a:	462a      	mov	r2, r5
 800561c:	e7eb      	b.n	80055f6 <__ssvfiscanf_r+0x2a>
 800561e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005620:	3201      	adds	r2, #1
 8005622:	9245      	str	r2, [sp, #276]	; 0x114
 8005624:	6862      	ldr	r2, [r4, #4]
 8005626:	3301      	adds	r3, #1
 8005628:	3a01      	subs	r2, #1
 800562a:	6062      	str	r2, [r4, #4]
 800562c:	6023      	str	r3, [r4, #0]
 800562e:	e7ec      	b.n	800560a <__ssvfiscanf_r+0x3e>
 8005630:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005632:	4621      	mov	r1, r4
 8005634:	4630      	mov	r0, r6
 8005636:	4798      	blx	r3
 8005638:	2800      	cmp	r0, #0
 800563a:	d0e9      	beq.n	8005610 <__ssvfiscanf_r+0x44>
 800563c:	e7ed      	b.n	800561a <__ssvfiscanf_r+0x4e>
 800563e:	2b25      	cmp	r3, #37	; 0x25
 8005640:	d012      	beq.n	8005668 <__ssvfiscanf_r+0x9c>
 8005642:	469a      	mov	sl, r3
 8005644:	6863      	ldr	r3, [r4, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	f340 8091 	ble.w	800576e <__ssvfiscanf_r+0x1a2>
 800564c:	6822      	ldr	r2, [r4, #0]
 800564e:	7813      	ldrb	r3, [r2, #0]
 8005650:	4553      	cmp	r3, sl
 8005652:	f040 812e 	bne.w	80058b2 <__ssvfiscanf_r+0x2e6>
 8005656:	6863      	ldr	r3, [r4, #4]
 8005658:	3b01      	subs	r3, #1
 800565a:	6063      	str	r3, [r4, #4]
 800565c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800565e:	3201      	adds	r2, #1
 8005660:	3301      	adds	r3, #1
 8005662:	6022      	str	r2, [r4, #0]
 8005664:	9345      	str	r3, [sp, #276]	; 0x114
 8005666:	e7d8      	b.n	800561a <__ssvfiscanf_r+0x4e>
 8005668:	9141      	str	r1, [sp, #260]	; 0x104
 800566a:	9143      	str	r1, [sp, #268]	; 0x10c
 800566c:	7853      	ldrb	r3, [r2, #1]
 800566e:	2b2a      	cmp	r3, #42	; 0x2a
 8005670:	bf02      	ittt	eq
 8005672:	2310      	moveq	r3, #16
 8005674:	1c95      	addeq	r5, r2, #2
 8005676:	9341      	streq	r3, [sp, #260]	; 0x104
 8005678:	220a      	movs	r2, #10
 800567a:	46aa      	mov	sl, r5
 800567c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005680:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005684:	2b09      	cmp	r3, #9
 8005686:	d91c      	bls.n	80056c2 <__ssvfiscanf_r+0xf6>
 8005688:	487e      	ldr	r0, [pc, #504]	; (8005884 <__ssvfiscanf_r+0x2b8>)
 800568a:	2203      	movs	r2, #3
 800568c:	f7fa fd80 	bl	8000190 <memchr>
 8005690:	b138      	cbz	r0, 80056a2 <__ssvfiscanf_r+0xd6>
 8005692:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005694:	eba0 0009 	sub.w	r0, r0, r9
 8005698:	2301      	movs	r3, #1
 800569a:	4083      	lsls	r3, r0
 800569c:	4313      	orrs	r3, r2
 800569e:	9341      	str	r3, [sp, #260]	; 0x104
 80056a0:	4655      	mov	r5, sl
 80056a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80056a6:	2b78      	cmp	r3, #120	; 0x78
 80056a8:	d806      	bhi.n	80056b8 <__ssvfiscanf_r+0xec>
 80056aa:	2b57      	cmp	r3, #87	; 0x57
 80056ac:	d810      	bhi.n	80056d0 <__ssvfiscanf_r+0x104>
 80056ae:	2b25      	cmp	r3, #37	; 0x25
 80056b0:	d0c7      	beq.n	8005642 <__ssvfiscanf_r+0x76>
 80056b2:	d857      	bhi.n	8005764 <__ssvfiscanf_r+0x198>
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d065      	beq.n	8005784 <__ssvfiscanf_r+0x1b8>
 80056b8:	2303      	movs	r3, #3
 80056ba:	9347      	str	r3, [sp, #284]	; 0x11c
 80056bc:	230a      	movs	r3, #10
 80056be:	9342      	str	r3, [sp, #264]	; 0x108
 80056c0:	e076      	b.n	80057b0 <__ssvfiscanf_r+0x1e4>
 80056c2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80056c4:	fb02 1103 	mla	r1, r2, r3, r1
 80056c8:	3930      	subs	r1, #48	; 0x30
 80056ca:	9143      	str	r1, [sp, #268]	; 0x10c
 80056cc:	4655      	mov	r5, sl
 80056ce:	e7d4      	b.n	800567a <__ssvfiscanf_r+0xae>
 80056d0:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80056d4:	2a20      	cmp	r2, #32
 80056d6:	d8ef      	bhi.n	80056b8 <__ssvfiscanf_r+0xec>
 80056d8:	a101      	add	r1, pc, #4	; (adr r1, 80056e0 <__ssvfiscanf_r+0x114>)
 80056da:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80056de:	bf00      	nop
 80056e0:	08005793 	.word	0x08005793
 80056e4:	080056b9 	.word	0x080056b9
 80056e8:	080056b9 	.word	0x080056b9
 80056ec:	080057f1 	.word	0x080057f1
 80056f0:	080056b9 	.word	0x080056b9
 80056f4:	080056b9 	.word	0x080056b9
 80056f8:	080056b9 	.word	0x080056b9
 80056fc:	080056b9 	.word	0x080056b9
 8005700:	080056b9 	.word	0x080056b9
 8005704:	080056b9 	.word	0x080056b9
 8005708:	080056b9 	.word	0x080056b9
 800570c:	08005807 	.word	0x08005807
 8005710:	080057ed 	.word	0x080057ed
 8005714:	0800576b 	.word	0x0800576b
 8005718:	0800576b 	.word	0x0800576b
 800571c:	0800576b 	.word	0x0800576b
 8005720:	080056b9 	.word	0x080056b9
 8005724:	080057a9 	.word	0x080057a9
 8005728:	080056b9 	.word	0x080056b9
 800572c:	080056b9 	.word	0x080056b9
 8005730:	080056b9 	.word	0x080056b9
 8005734:	080056b9 	.word	0x080056b9
 8005738:	08005817 	.word	0x08005817
 800573c:	080057e5 	.word	0x080057e5
 8005740:	0800578b 	.word	0x0800578b
 8005744:	080056b9 	.word	0x080056b9
 8005748:	080056b9 	.word	0x080056b9
 800574c:	08005813 	.word	0x08005813
 8005750:	080056b9 	.word	0x080056b9
 8005754:	080057ed 	.word	0x080057ed
 8005758:	080056b9 	.word	0x080056b9
 800575c:	080056b9 	.word	0x080056b9
 8005760:	08005793 	.word	0x08005793
 8005764:	3b45      	subs	r3, #69	; 0x45
 8005766:	2b02      	cmp	r3, #2
 8005768:	d8a6      	bhi.n	80056b8 <__ssvfiscanf_r+0xec>
 800576a:	2305      	movs	r3, #5
 800576c:	e01f      	b.n	80057ae <__ssvfiscanf_r+0x1e2>
 800576e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005770:	4621      	mov	r1, r4
 8005772:	4630      	mov	r0, r6
 8005774:	4798      	blx	r3
 8005776:	2800      	cmp	r0, #0
 8005778:	f43f af68 	beq.w	800564c <__ssvfiscanf_r+0x80>
 800577c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800577e:	2800      	cmp	r0, #0
 8005780:	f040 808d 	bne.w	800589e <__ssvfiscanf_r+0x2d2>
 8005784:	f04f 30ff 	mov.w	r0, #4294967295
 8005788:	e08f      	b.n	80058aa <__ssvfiscanf_r+0x2de>
 800578a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800578c:	f042 0220 	orr.w	r2, r2, #32
 8005790:	9241      	str	r2, [sp, #260]	; 0x104
 8005792:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005794:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005798:	9241      	str	r2, [sp, #260]	; 0x104
 800579a:	2210      	movs	r2, #16
 800579c:	2b6f      	cmp	r3, #111	; 0x6f
 800579e:	9242      	str	r2, [sp, #264]	; 0x108
 80057a0:	bf34      	ite	cc
 80057a2:	2303      	movcc	r3, #3
 80057a4:	2304      	movcs	r3, #4
 80057a6:	e002      	b.n	80057ae <__ssvfiscanf_r+0x1e2>
 80057a8:	2300      	movs	r3, #0
 80057aa:	9342      	str	r3, [sp, #264]	; 0x108
 80057ac:	2303      	movs	r3, #3
 80057ae:	9347      	str	r3, [sp, #284]	; 0x11c
 80057b0:	6863      	ldr	r3, [r4, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	dd3d      	ble.n	8005832 <__ssvfiscanf_r+0x266>
 80057b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80057b8:	0659      	lsls	r1, r3, #25
 80057ba:	d404      	bmi.n	80057c6 <__ssvfiscanf_r+0x1fa>
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	781a      	ldrb	r2, [r3, #0]
 80057c0:	5cba      	ldrb	r2, [r7, r2]
 80057c2:	0712      	lsls	r2, r2, #28
 80057c4:	d43c      	bmi.n	8005840 <__ssvfiscanf_r+0x274>
 80057c6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	dc4b      	bgt.n	8005864 <__ssvfiscanf_r+0x298>
 80057cc:	466b      	mov	r3, sp
 80057ce:	4622      	mov	r2, r4
 80057d0:	a941      	add	r1, sp, #260	; 0x104
 80057d2:	4630      	mov	r0, r6
 80057d4:	f000 f872 	bl	80058bc <_scanf_chars>
 80057d8:	2801      	cmp	r0, #1
 80057da:	d06a      	beq.n	80058b2 <__ssvfiscanf_r+0x2e6>
 80057dc:	2802      	cmp	r0, #2
 80057de:	f47f af1c 	bne.w	800561a <__ssvfiscanf_r+0x4e>
 80057e2:	e7cb      	b.n	800577c <__ssvfiscanf_r+0x1b0>
 80057e4:	2308      	movs	r3, #8
 80057e6:	9342      	str	r3, [sp, #264]	; 0x108
 80057e8:	2304      	movs	r3, #4
 80057ea:	e7e0      	b.n	80057ae <__ssvfiscanf_r+0x1e2>
 80057ec:	220a      	movs	r2, #10
 80057ee:	e7d5      	b.n	800579c <__ssvfiscanf_r+0x1d0>
 80057f0:	4629      	mov	r1, r5
 80057f2:	4640      	mov	r0, r8
 80057f4:	f000 f9b0 	bl	8005b58 <__sccl>
 80057f8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80057fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057fe:	9341      	str	r3, [sp, #260]	; 0x104
 8005800:	4605      	mov	r5, r0
 8005802:	2301      	movs	r3, #1
 8005804:	e7d3      	b.n	80057ae <__ssvfiscanf_r+0x1e2>
 8005806:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005808:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800580c:	9341      	str	r3, [sp, #260]	; 0x104
 800580e:	2300      	movs	r3, #0
 8005810:	e7cd      	b.n	80057ae <__ssvfiscanf_r+0x1e2>
 8005812:	2302      	movs	r3, #2
 8005814:	e7cb      	b.n	80057ae <__ssvfiscanf_r+0x1e2>
 8005816:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005818:	06c3      	lsls	r3, r0, #27
 800581a:	f53f aefe 	bmi.w	800561a <__ssvfiscanf_r+0x4e>
 800581e:	9b00      	ldr	r3, [sp, #0]
 8005820:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005822:	1d19      	adds	r1, r3, #4
 8005824:	9100      	str	r1, [sp, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	07c0      	lsls	r0, r0, #31
 800582a:	bf4c      	ite	mi
 800582c:	801a      	strhmi	r2, [r3, #0]
 800582e:	601a      	strpl	r2, [r3, #0]
 8005830:	e6f3      	b.n	800561a <__ssvfiscanf_r+0x4e>
 8005832:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005834:	4621      	mov	r1, r4
 8005836:	4630      	mov	r0, r6
 8005838:	4798      	blx	r3
 800583a:	2800      	cmp	r0, #0
 800583c:	d0bb      	beq.n	80057b6 <__ssvfiscanf_r+0x1ea>
 800583e:	e79d      	b.n	800577c <__ssvfiscanf_r+0x1b0>
 8005840:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005842:	3201      	adds	r2, #1
 8005844:	9245      	str	r2, [sp, #276]	; 0x114
 8005846:	6862      	ldr	r2, [r4, #4]
 8005848:	3a01      	subs	r2, #1
 800584a:	2a00      	cmp	r2, #0
 800584c:	6062      	str	r2, [r4, #4]
 800584e:	dd02      	ble.n	8005856 <__ssvfiscanf_r+0x28a>
 8005850:	3301      	adds	r3, #1
 8005852:	6023      	str	r3, [r4, #0]
 8005854:	e7b2      	b.n	80057bc <__ssvfiscanf_r+0x1f0>
 8005856:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005858:	4621      	mov	r1, r4
 800585a:	4630      	mov	r0, r6
 800585c:	4798      	blx	r3
 800585e:	2800      	cmp	r0, #0
 8005860:	d0ac      	beq.n	80057bc <__ssvfiscanf_r+0x1f0>
 8005862:	e78b      	b.n	800577c <__ssvfiscanf_r+0x1b0>
 8005864:	2b04      	cmp	r3, #4
 8005866:	dc0f      	bgt.n	8005888 <__ssvfiscanf_r+0x2bc>
 8005868:	466b      	mov	r3, sp
 800586a:	4622      	mov	r2, r4
 800586c:	a941      	add	r1, sp, #260	; 0x104
 800586e:	4630      	mov	r0, r6
 8005870:	f000 f87e 	bl	8005970 <_scanf_i>
 8005874:	e7b0      	b.n	80057d8 <__ssvfiscanf_r+0x20c>
 8005876:	bf00      	nop
 8005878:	08005519 	.word	0x08005519
 800587c:	08005593 	.word	0x08005593
 8005880:	080060c0 	.word	0x080060c0
 8005884:	080060a0 	.word	0x080060a0
 8005888:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <__ssvfiscanf_r+0x2ec>)
 800588a:	2b00      	cmp	r3, #0
 800588c:	f43f aec5 	beq.w	800561a <__ssvfiscanf_r+0x4e>
 8005890:	466b      	mov	r3, sp
 8005892:	4622      	mov	r2, r4
 8005894:	a941      	add	r1, sp, #260	; 0x104
 8005896:	4630      	mov	r0, r6
 8005898:	f3af 8000 	nop.w
 800589c:	e79c      	b.n	80057d8 <__ssvfiscanf_r+0x20c>
 800589e:	89a3      	ldrh	r3, [r4, #12]
 80058a0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80058a4:	bf18      	it	ne
 80058a6:	f04f 30ff 	movne.w	r0, #4294967295
 80058aa:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80058ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80058b4:	e7f9      	b.n	80058aa <__ssvfiscanf_r+0x2de>
 80058b6:	bf00      	nop
 80058b8:	00000000 	.word	0x00000000

080058bc <_scanf_chars>:
 80058bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058c0:	4615      	mov	r5, r2
 80058c2:	688a      	ldr	r2, [r1, #8]
 80058c4:	4680      	mov	r8, r0
 80058c6:	460c      	mov	r4, r1
 80058c8:	b932      	cbnz	r2, 80058d8 <_scanf_chars+0x1c>
 80058ca:	698a      	ldr	r2, [r1, #24]
 80058cc:	2a00      	cmp	r2, #0
 80058ce:	bf0c      	ite	eq
 80058d0:	2201      	moveq	r2, #1
 80058d2:	f04f 32ff 	movne.w	r2, #4294967295
 80058d6:	608a      	str	r2, [r1, #8]
 80058d8:	6822      	ldr	r2, [r4, #0]
 80058da:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800596c <_scanf_chars+0xb0>
 80058de:	06d1      	lsls	r1, r2, #27
 80058e0:	bf5f      	itttt	pl
 80058e2:	681a      	ldrpl	r2, [r3, #0]
 80058e4:	1d11      	addpl	r1, r2, #4
 80058e6:	6019      	strpl	r1, [r3, #0]
 80058e8:	6816      	ldrpl	r6, [r2, #0]
 80058ea:	2700      	movs	r7, #0
 80058ec:	69a0      	ldr	r0, [r4, #24]
 80058ee:	b188      	cbz	r0, 8005914 <_scanf_chars+0x58>
 80058f0:	2801      	cmp	r0, #1
 80058f2:	d107      	bne.n	8005904 <_scanf_chars+0x48>
 80058f4:	682a      	ldr	r2, [r5, #0]
 80058f6:	7811      	ldrb	r1, [r2, #0]
 80058f8:	6962      	ldr	r2, [r4, #20]
 80058fa:	5c52      	ldrb	r2, [r2, r1]
 80058fc:	b952      	cbnz	r2, 8005914 <_scanf_chars+0x58>
 80058fe:	2f00      	cmp	r7, #0
 8005900:	d031      	beq.n	8005966 <_scanf_chars+0xaa>
 8005902:	e022      	b.n	800594a <_scanf_chars+0x8e>
 8005904:	2802      	cmp	r0, #2
 8005906:	d120      	bne.n	800594a <_scanf_chars+0x8e>
 8005908:	682b      	ldr	r3, [r5, #0]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005910:	071b      	lsls	r3, r3, #28
 8005912:	d41a      	bmi.n	800594a <_scanf_chars+0x8e>
 8005914:	6823      	ldr	r3, [r4, #0]
 8005916:	06da      	lsls	r2, r3, #27
 8005918:	bf5e      	ittt	pl
 800591a:	682b      	ldrpl	r3, [r5, #0]
 800591c:	781b      	ldrbpl	r3, [r3, #0]
 800591e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005922:	682a      	ldr	r2, [r5, #0]
 8005924:	686b      	ldr	r3, [r5, #4]
 8005926:	3201      	adds	r2, #1
 8005928:	602a      	str	r2, [r5, #0]
 800592a:	68a2      	ldr	r2, [r4, #8]
 800592c:	3b01      	subs	r3, #1
 800592e:	3a01      	subs	r2, #1
 8005930:	606b      	str	r3, [r5, #4]
 8005932:	3701      	adds	r7, #1
 8005934:	60a2      	str	r2, [r4, #8]
 8005936:	b142      	cbz	r2, 800594a <_scanf_chars+0x8e>
 8005938:	2b00      	cmp	r3, #0
 800593a:	dcd7      	bgt.n	80058ec <_scanf_chars+0x30>
 800593c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005940:	4629      	mov	r1, r5
 8005942:	4640      	mov	r0, r8
 8005944:	4798      	blx	r3
 8005946:	2800      	cmp	r0, #0
 8005948:	d0d0      	beq.n	80058ec <_scanf_chars+0x30>
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	f013 0310 	ands.w	r3, r3, #16
 8005950:	d105      	bne.n	800595e <_scanf_chars+0xa2>
 8005952:	68e2      	ldr	r2, [r4, #12]
 8005954:	3201      	adds	r2, #1
 8005956:	60e2      	str	r2, [r4, #12]
 8005958:	69a2      	ldr	r2, [r4, #24]
 800595a:	b102      	cbz	r2, 800595e <_scanf_chars+0xa2>
 800595c:	7033      	strb	r3, [r6, #0]
 800595e:	6923      	ldr	r3, [r4, #16]
 8005960:	443b      	add	r3, r7
 8005962:	6123      	str	r3, [r4, #16]
 8005964:	2000      	movs	r0, #0
 8005966:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800596a:	bf00      	nop
 800596c:	080060c0 	.word	0x080060c0

08005970 <_scanf_i>:
 8005970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005974:	4698      	mov	r8, r3
 8005976:	4b74      	ldr	r3, [pc, #464]	; (8005b48 <_scanf_i+0x1d8>)
 8005978:	460c      	mov	r4, r1
 800597a:	4682      	mov	sl, r0
 800597c:	4616      	mov	r6, r2
 800597e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005982:	b087      	sub	sp, #28
 8005984:	ab03      	add	r3, sp, #12
 8005986:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800598a:	4b70      	ldr	r3, [pc, #448]	; (8005b4c <_scanf_i+0x1dc>)
 800598c:	69a1      	ldr	r1, [r4, #24]
 800598e:	4a70      	ldr	r2, [pc, #448]	; (8005b50 <_scanf_i+0x1e0>)
 8005990:	2903      	cmp	r1, #3
 8005992:	bf18      	it	ne
 8005994:	461a      	movne	r2, r3
 8005996:	68a3      	ldr	r3, [r4, #8]
 8005998:	9201      	str	r2, [sp, #4]
 800599a:	1e5a      	subs	r2, r3, #1
 800599c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80059a0:	bf88      	it	hi
 80059a2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80059a6:	4627      	mov	r7, r4
 80059a8:	bf82      	ittt	hi
 80059aa:	eb03 0905 	addhi.w	r9, r3, r5
 80059ae:	f240 135d 	movwhi	r3, #349	; 0x15d
 80059b2:	60a3      	strhi	r3, [r4, #8]
 80059b4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80059b8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80059bc:	bf98      	it	ls
 80059be:	f04f 0900 	movls.w	r9, #0
 80059c2:	6023      	str	r3, [r4, #0]
 80059c4:	463d      	mov	r5, r7
 80059c6:	f04f 0b00 	mov.w	fp, #0
 80059ca:	6831      	ldr	r1, [r6, #0]
 80059cc:	ab03      	add	r3, sp, #12
 80059ce:	7809      	ldrb	r1, [r1, #0]
 80059d0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80059d4:	2202      	movs	r2, #2
 80059d6:	f7fa fbdb 	bl	8000190 <memchr>
 80059da:	b328      	cbz	r0, 8005a28 <_scanf_i+0xb8>
 80059dc:	f1bb 0f01 	cmp.w	fp, #1
 80059e0:	d159      	bne.n	8005a96 <_scanf_i+0x126>
 80059e2:	6862      	ldr	r2, [r4, #4]
 80059e4:	b92a      	cbnz	r2, 80059f2 <_scanf_i+0x82>
 80059e6:	6822      	ldr	r2, [r4, #0]
 80059e8:	2308      	movs	r3, #8
 80059ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ee:	6063      	str	r3, [r4, #4]
 80059f0:	6022      	str	r2, [r4, #0]
 80059f2:	6822      	ldr	r2, [r4, #0]
 80059f4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80059f8:	6022      	str	r2, [r4, #0]
 80059fa:	68a2      	ldr	r2, [r4, #8]
 80059fc:	1e51      	subs	r1, r2, #1
 80059fe:	60a1      	str	r1, [r4, #8]
 8005a00:	b192      	cbz	r2, 8005a28 <_scanf_i+0xb8>
 8005a02:	6832      	ldr	r2, [r6, #0]
 8005a04:	1c51      	adds	r1, r2, #1
 8005a06:	6031      	str	r1, [r6, #0]
 8005a08:	7812      	ldrb	r2, [r2, #0]
 8005a0a:	f805 2b01 	strb.w	r2, [r5], #1
 8005a0e:	6872      	ldr	r2, [r6, #4]
 8005a10:	3a01      	subs	r2, #1
 8005a12:	2a00      	cmp	r2, #0
 8005a14:	6072      	str	r2, [r6, #4]
 8005a16:	dc07      	bgt.n	8005a28 <_scanf_i+0xb8>
 8005a18:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005a1c:	4631      	mov	r1, r6
 8005a1e:	4650      	mov	r0, sl
 8005a20:	4790      	blx	r2
 8005a22:	2800      	cmp	r0, #0
 8005a24:	f040 8085 	bne.w	8005b32 <_scanf_i+0x1c2>
 8005a28:	f10b 0b01 	add.w	fp, fp, #1
 8005a2c:	f1bb 0f03 	cmp.w	fp, #3
 8005a30:	d1cb      	bne.n	80059ca <_scanf_i+0x5a>
 8005a32:	6863      	ldr	r3, [r4, #4]
 8005a34:	b90b      	cbnz	r3, 8005a3a <_scanf_i+0xca>
 8005a36:	230a      	movs	r3, #10
 8005a38:	6063      	str	r3, [r4, #4]
 8005a3a:	6863      	ldr	r3, [r4, #4]
 8005a3c:	4945      	ldr	r1, [pc, #276]	; (8005b54 <_scanf_i+0x1e4>)
 8005a3e:	6960      	ldr	r0, [r4, #20]
 8005a40:	1ac9      	subs	r1, r1, r3
 8005a42:	f000 f889 	bl	8005b58 <__sccl>
 8005a46:	f04f 0b00 	mov.w	fp, #0
 8005a4a:	68a3      	ldr	r3, [r4, #8]
 8005a4c:	6822      	ldr	r2, [r4, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d03d      	beq.n	8005ace <_scanf_i+0x15e>
 8005a52:	6831      	ldr	r1, [r6, #0]
 8005a54:	6960      	ldr	r0, [r4, #20]
 8005a56:	f891 c000 	ldrb.w	ip, [r1]
 8005a5a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	d035      	beq.n	8005ace <_scanf_i+0x15e>
 8005a62:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005a66:	d124      	bne.n	8005ab2 <_scanf_i+0x142>
 8005a68:	0510      	lsls	r0, r2, #20
 8005a6a:	d522      	bpl.n	8005ab2 <_scanf_i+0x142>
 8005a6c:	f10b 0b01 	add.w	fp, fp, #1
 8005a70:	f1b9 0f00 	cmp.w	r9, #0
 8005a74:	d003      	beq.n	8005a7e <_scanf_i+0x10e>
 8005a76:	3301      	adds	r3, #1
 8005a78:	f109 39ff 	add.w	r9, r9, #4294967295
 8005a7c:	60a3      	str	r3, [r4, #8]
 8005a7e:	6873      	ldr	r3, [r6, #4]
 8005a80:	3b01      	subs	r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	6073      	str	r3, [r6, #4]
 8005a86:	dd1b      	ble.n	8005ac0 <_scanf_i+0x150>
 8005a88:	6833      	ldr	r3, [r6, #0]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	6033      	str	r3, [r6, #0]
 8005a8e:	68a3      	ldr	r3, [r4, #8]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	60a3      	str	r3, [r4, #8]
 8005a94:	e7d9      	b.n	8005a4a <_scanf_i+0xda>
 8005a96:	f1bb 0f02 	cmp.w	fp, #2
 8005a9a:	d1ae      	bne.n	80059fa <_scanf_i+0x8a>
 8005a9c:	6822      	ldr	r2, [r4, #0]
 8005a9e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005aa2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005aa6:	d1bf      	bne.n	8005a28 <_scanf_i+0xb8>
 8005aa8:	2310      	movs	r3, #16
 8005aaa:	6063      	str	r3, [r4, #4]
 8005aac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ab0:	e7a2      	b.n	80059f8 <_scanf_i+0x88>
 8005ab2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005ab6:	6022      	str	r2, [r4, #0]
 8005ab8:	780b      	ldrb	r3, [r1, #0]
 8005aba:	f805 3b01 	strb.w	r3, [r5], #1
 8005abe:	e7de      	b.n	8005a7e <_scanf_i+0x10e>
 8005ac0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005ac4:	4631      	mov	r1, r6
 8005ac6:	4650      	mov	r0, sl
 8005ac8:	4798      	blx	r3
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d0df      	beq.n	8005a8e <_scanf_i+0x11e>
 8005ace:	6823      	ldr	r3, [r4, #0]
 8005ad0:	05d9      	lsls	r1, r3, #23
 8005ad2:	d50d      	bpl.n	8005af0 <_scanf_i+0x180>
 8005ad4:	42bd      	cmp	r5, r7
 8005ad6:	d909      	bls.n	8005aec <_scanf_i+0x17c>
 8005ad8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005adc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ae0:	4632      	mov	r2, r6
 8005ae2:	4650      	mov	r0, sl
 8005ae4:	4798      	blx	r3
 8005ae6:	f105 39ff 	add.w	r9, r5, #4294967295
 8005aea:	464d      	mov	r5, r9
 8005aec:	42bd      	cmp	r5, r7
 8005aee:	d028      	beq.n	8005b42 <_scanf_i+0x1d2>
 8005af0:	6822      	ldr	r2, [r4, #0]
 8005af2:	f012 0210 	ands.w	r2, r2, #16
 8005af6:	d113      	bne.n	8005b20 <_scanf_i+0x1b0>
 8005af8:	702a      	strb	r2, [r5, #0]
 8005afa:	6863      	ldr	r3, [r4, #4]
 8005afc:	9e01      	ldr	r6, [sp, #4]
 8005afe:	4639      	mov	r1, r7
 8005b00:	4650      	mov	r0, sl
 8005b02:	47b0      	blx	r6
 8005b04:	f8d8 3000 	ldr.w	r3, [r8]
 8005b08:	6821      	ldr	r1, [r4, #0]
 8005b0a:	1d1a      	adds	r2, r3, #4
 8005b0c:	f8c8 2000 	str.w	r2, [r8]
 8005b10:	f011 0f20 	tst.w	r1, #32
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	d00f      	beq.n	8005b38 <_scanf_i+0x1c8>
 8005b18:	6018      	str	r0, [r3, #0]
 8005b1a:	68e3      	ldr	r3, [r4, #12]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	60e3      	str	r3, [r4, #12]
 8005b20:	6923      	ldr	r3, [r4, #16]
 8005b22:	1bed      	subs	r5, r5, r7
 8005b24:	445d      	add	r5, fp
 8005b26:	442b      	add	r3, r5
 8005b28:	6123      	str	r3, [r4, #16]
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	b007      	add	sp, #28
 8005b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b32:	f04f 0b00 	mov.w	fp, #0
 8005b36:	e7ca      	b.n	8005ace <_scanf_i+0x15e>
 8005b38:	07ca      	lsls	r2, r1, #31
 8005b3a:	bf4c      	ite	mi
 8005b3c:	8018      	strhmi	r0, [r3, #0]
 8005b3e:	6018      	strpl	r0, [r3, #0]
 8005b40:	e7eb      	b.n	8005b1a <_scanf_i+0x1aa>
 8005b42:	2001      	movs	r0, #1
 8005b44:	e7f2      	b.n	8005b2c <_scanf_i+0x1bc>
 8005b46:	bf00      	nop
 8005b48:	08005fcc 	.word	0x08005fcc
 8005b4c:	08005ead 	.word	0x08005ead
 8005b50:	08005dc5 	.word	0x08005dc5
 8005b54:	080060b4 	.word	0x080060b4

08005b58 <__sccl>:
 8005b58:	b570      	push	{r4, r5, r6, lr}
 8005b5a:	780b      	ldrb	r3, [r1, #0]
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	2b5e      	cmp	r3, #94	; 0x5e
 8005b60:	bf0b      	itete	eq
 8005b62:	784b      	ldrbeq	r3, [r1, #1]
 8005b64:	1c4a      	addne	r2, r1, #1
 8005b66:	1c8a      	addeq	r2, r1, #2
 8005b68:	2100      	movne	r1, #0
 8005b6a:	bf08      	it	eq
 8005b6c:	2101      	moveq	r1, #1
 8005b6e:	3801      	subs	r0, #1
 8005b70:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005b74:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005b78:	42a8      	cmp	r0, r5
 8005b7a:	d1fb      	bne.n	8005b74 <__sccl+0x1c>
 8005b7c:	b90b      	cbnz	r3, 8005b82 <__sccl+0x2a>
 8005b7e:	1e50      	subs	r0, r2, #1
 8005b80:	bd70      	pop	{r4, r5, r6, pc}
 8005b82:	f081 0101 	eor.w	r1, r1, #1
 8005b86:	54e1      	strb	r1, [r4, r3]
 8005b88:	4610      	mov	r0, r2
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005b90:	2d2d      	cmp	r5, #45	; 0x2d
 8005b92:	d005      	beq.n	8005ba0 <__sccl+0x48>
 8005b94:	2d5d      	cmp	r5, #93	; 0x5d
 8005b96:	d016      	beq.n	8005bc6 <__sccl+0x6e>
 8005b98:	2d00      	cmp	r5, #0
 8005b9a:	d0f1      	beq.n	8005b80 <__sccl+0x28>
 8005b9c:	462b      	mov	r3, r5
 8005b9e:	e7f2      	b.n	8005b86 <__sccl+0x2e>
 8005ba0:	7846      	ldrb	r6, [r0, #1]
 8005ba2:	2e5d      	cmp	r6, #93	; 0x5d
 8005ba4:	d0fa      	beq.n	8005b9c <__sccl+0x44>
 8005ba6:	42b3      	cmp	r3, r6
 8005ba8:	dcf8      	bgt.n	8005b9c <__sccl+0x44>
 8005baa:	3002      	adds	r0, #2
 8005bac:	461a      	mov	r2, r3
 8005bae:	3201      	adds	r2, #1
 8005bb0:	4296      	cmp	r6, r2
 8005bb2:	54a1      	strb	r1, [r4, r2]
 8005bb4:	dcfb      	bgt.n	8005bae <__sccl+0x56>
 8005bb6:	1af2      	subs	r2, r6, r3
 8005bb8:	3a01      	subs	r2, #1
 8005bba:	1c5d      	adds	r5, r3, #1
 8005bbc:	42b3      	cmp	r3, r6
 8005bbe:	bfa8      	it	ge
 8005bc0:	2200      	movge	r2, #0
 8005bc2:	18ab      	adds	r3, r5, r2
 8005bc4:	e7e1      	b.n	8005b8a <__sccl+0x32>
 8005bc6:	4610      	mov	r0, r2
 8005bc8:	e7da      	b.n	8005b80 <__sccl+0x28>

08005bca <__submore>:
 8005bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bce:	460c      	mov	r4, r1
 8005bd0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005bd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bd6:	4299      	cmp	r1, r3
 8005bd8:	d11d      	bne.n	8005c16 <__submore+0x4c>
 8005bda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005bde:	f7ff fc0f 	bl	8005400 <_malloc_r>
 8005be2:	b918      	cbnz	r0, 8005bec <__submore+0x22>
 8005be4:	f04f 30ff 	mov.w	r0, #4294967295
 8005be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005bf0:	63a3      	str	r3, [r4, #56]	; 0x38
 8005bf2:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005bf6:	6360      	str	r0, [r4, #52]	; 0x34
 8005bf8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005bfc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005c00:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8005c04:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005c08:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8005c0c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005c10:	6020      	str	r0, [r4, #0]
 8005c12:	2000      	movs	r0, #0
 8005c14:	e7e8      	b.n	8005be8 <__submore+0x1e>
 8005c16:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005c18:	0077      	lsls	r7, r6, #1
 8005c1a:	463a      	mov	r2, r7
 8005c1c:	f000 f820 	bl	8005c60 <_realloc_r>
 8005c20:	4605      	mov	r5, r0
 8005c22:	2800      	cmp	r0, #0
 8005c24:	d0de      	beq.n	8005be4 <__submore+0x1a>
 8005c26:	eb00 0806 	add.w	r8, r0, r6
 8005c2a:	4601      	mov	r1, r0
 8005c2c:	4632      	mov	r2, r6
 8005c2e:	4640      	mov	r0, r8
 8005c30:	f7ff fb6c 	bl	800530c <memcpy>
 8005c34:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005c38:	f8c4 8000 	str.w	r8, [r4]
 8005c3c:	e7e9      	b.n	8005c12 <__submore+0x48>
	...

08005c40 <_sbrk_r>:
 8005c40:	b538      	push	{r3, r4, r5, lr}
 8005c42:	4d06      	ldr	r5, [pc, #24]	; (8005c5c <_sbrk_r+0x1c>)
 8005c44:	2300      	movs	r3, #0
 8005c46:	4604      	mov	r4, r0
 8005c48:	4608      	mov	r0, r1
 8005c4a:	602b      	str	r3, [r5, #0]
 8005c4c:	f7fc f84a 	bl	8001ce4 <_sbrk>
 8005c50:	1c43      	adds	r3, r0, #1
 8005c52:	d102      	bne.n	8005c5a <_sbrk_r+0x1a>
 8005c54:	682b      	ldr	r3, [r5, #0]
 8005c56:	b103      	cbz	r3, 8005c5a <_sbrk_r+0x1a>
 8005c58:	6023      	str	r3, [r4, #0]
 8005c5a:	bd38      	pop	{r3, r4, r5, pc}
 8005c5c:	200005e0 	.word	0x200005e0

08005c60 <_realloc_r>:
 8005c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c64:	4680      	mov	r8, r0
 8005c66:	4614      	mov	r4, r2
 8005c68:	460e      	mov	r6, r1
 8005c6a:	b921      	cbnz	r1, 8005c76 <_realloc_r+0x16>
 8005c6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c70:	4611      	mov	r1, r2
 8005c72:	f7ff bbc5 	b.w	8005400 <_malloc_r>
 8005c76:	b92a      	cbnz	r2, 8005c84 <_realloc_r+0x24>
 8005c78:	f7ff fb56 	bl	8005328 <_free_r>
 8005c7c:	4625      	mov	r5, r4
 8005c7e:	4628      	mov	r0, r5
 8005c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c84:	f000 f914 	bl	8005eb0 <_malloc_usable_size_r>
 8005c88:	4284      	cmp	r4, r0
 8005c8a:	4607      	mov	r7, r0
 8005c8c:	d802      	bhi.n	8005c94 <_realloc_r+0x34>
 8005c8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c92:	d812      	bhi.n	8005cba <_realloc_r+0x5a>
 8005c94:	4621      	mov	r1, r4
 8005c96:	4640      	mov	r0, r8
 8005c98:	f7ff fbb2 	bl	8005400 <_malloc_r>
 8005c9c:	4605      	mov	r5, r0
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	d0ed      	beq.n	8005c7e <_realloc_r+0x1e>
 8005ca2:	42bc      	cmp	r4, r7
 8005ca4:	4622      	mov	r2, r4
 8005ca6:	4631      	mov	r1, r6
 8005ca8:	bf28      	it	cs
 8005caa:	463a      	movcs	r2, r7
 8005cac:	f7ff fb2e 	bl	800530c <memcpy>
 8005cb0:	4631      	mov	r1, r6
 8005cb2:	4640      	mov	r0, r8
 8005cb4:	f7ff fb38 	bl	8005328 <_free_r>
 8005cb8:	e7e1      	b.n	8005c7e <_realloc_r+0x1e>
 8005cba:	4635      	mov	r5, r6
 8005cbc:	e7df      	b.n	8005c7e <_realloc_r+0x1e>
	...

08005cc0 <_strtol_l.constprop.0>:
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc6:	d001      	beq.n	8005ccc <_strtol_l.constprop.0+0xc>
 8005cc8:	2b24      	cmp	r3, #36	; 0x24
 8005cca:	d906      	bls.n	8005cda <_strtol_l.constprop.0+0x1a>
 8005ccc:	f7ff faf2 	bl	80052b4 <__errno>
 8005cd0:	2316      	movs	r3, #22
 8005cd2:	6003      	str	r3, [r0, #0]
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cda:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005dc0 <_strtol_l.constprop.0+0x100>
 8005cde:	460d      	mov	r5, r1
 8005ce0:	462e      	mov	r6, r5
 8005ce2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ce6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005cea:	f017 0708 	ands.w	r7, r7, #8
 8005cee:	d1f7      	bne.n	8005ce0 <_strtol_l.constprop.0+0x20>
 8005cf0:	2c2d      	cmp	r4, #45	; 0x2d
 8005cf2:	d132      	bne.n	8005d5a <_strtol_l.constprop.0+0x9a>
 8005cf4:	782c      	ldrb	r4, [r5, #0]
 8005cf6:	2701      	movs	r7, #1
 8005cf8:	1cb5      	adds	r5, r6, #2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d05b      	beq.n	8005db6 <_strtol_l.constprop.0+0xf6>
 8005cfe:	2b10      	cmp	r3, #16
 8005d00:	d109      	bne.n	8005d16 <_strtol_l.constprop.0+0x56>
 8005d02:	2c30      	cmp	r4, #48	; 0x30
 8005d04:	d107      	bne.n	8005d16 <_strtol_l.constprop.0+0x56>
 8005d06:	782c      	ldrb	r4, [r5, #0]
 8005d08:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005d0c:	2c58      	cmp	r4, #88	; 0x58
 8005d0e:	d14d      	bne.n	8005dac <_strtol_l.constprop.0+0xec>
 8005d10:	786c      	ldrb	r4, [r5, #1]
 8005d12:	2310      	movs	r3, #16
 8005d14:	3502      	adds	r5, #2
 8005d16:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005d1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005d1e:	f04f 0e00 	mov.w	lr, #0
 8005d22:	fbb8 f9f3 	udiv	r9, r8, r3
 8005d26:	4676      	mov	r6, lr
 8005d28:	fb03 8a19 	mls	sl, r3, r9, r8
 8005d2c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005d30:	f1bc 0f09 	cmp.w	ip, #9
 8005d34:	d816      	bhi.n	8005d64 <_strtol_l.constprop.0+0xa4>
 8005d36:	4664      	mov	r4, ip
 8005d38:	42a3      	cmp	r3, r4
 8005d3a:	dd24      	ble.n	8005d86 <_strtol_l.constprop.0+0xc6>
 8005d3c:	f1be 3fff 	cmp.w	lr, #4294967295
 8005d40:	d008      	beq.n	8005d54 <_strtol_l.constprop.0+0x94>
 8005d42:	45b1      	cmp	r9, r6
 8005d44:	d31c      	bcc.n	8005d80 <_strtol_l.constprop.0+0xc0>
 8005d46:	d101      	bne.n	8005d4c <_strtol_l.constprop.0+0x8c>
 8005d48:	45a2      	cmp	sl, r4
 8005d4a:	db19      	blt.n	8005d80 <_strtol_l.constprop.0+0xc0>
 8005d4c:	fb06 4603 	mla	r6, r6, r3, r4
 8005d50:	f04f 0e01 	mov.w	lr, #1
 8005d54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d58:	e7e8      	b.n	8005d2c <_strtol_l.constprop.0+0x6c>
 8005d5a:	2c2b      	cmp	r4, #43	; 0x2b
 8005d5c:	bf04      	itt	eq
 8005d5e:	782c      	ldrbeq	r4, [r5, #0]
 8005d60:	1cb5      	addeq	r5, r6, #2
 8005d62:	e7ca      	b.n	8005cfa <_strtol_l.constprop.0+0x3a>
 8005d64:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005d68:	f1bc 0f19 	cmp.w	ip, #25
 8005d6c:	d801      	bhi.n	8005d72 <_strtol_l.constprop.0+0xb2>
 8005d6e:	3c37      	subs	r4, #55	; 0x37
 8005d70:	e7e2      	b.n	8005d38 <_strtol_l.constprop.0+0x78>
 8005d72:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005d76:	f1bc 0f19 	cmp.w	ip, #25
 8005d7a:	d804      	bhi.n	8005d86 <_strtol_l.constprop.0+0xc6>
 8005d7c:	3c57      	subs	r4, #87	; 0x57
 8005d7e:	e7db      	b.n	8005d38 <_strtol_l.constprop.0+0x78>
 8005d80:	f04f 3eff 	mov.w	lr, #4294967295
 8005d84:	e7e6      	b.n	8005d54 <_strtol_l.constprop.0+0x94>
 8005d86:	f1be 3fff 	cmp.w	lr, #4294967295
 8005d8a:	d105      	bne.n	8005d98 <_strtol_l.constprop.0+0xd8>
 8005d8c:	2322      	movs	r3, #34	; 0x22
 8005d8e:	6003      	str	r3, [r0, #0]
 8005d90:	4646      	mov	r6, r8
 8005d92:	b942      	cbnz	r2, 8005da6 <_strtol_l.constprop.0+0xe6>
 8005d94:	4630      	mov	r0, r6
 8005d96:	e79e      	b.n	8005cd6 <_strtol_l.constprop.0+0x16>
 8005d98:	b107      	cbz	r7, 8005d9c <_strtol_l.constprop.0+0xdc>
 8005d9a:	4276      	negs	r6, r6
 8005d9c:	2a00      	cmp	r2, #0
 8005d9e:	d0f9      	beq.n	8005d94 <_strtol_l.constprop.0+0xd4>
 8005da0:	f1be 0f00 	cmp.w	lr, #0
 8005da4:	d000      	beq.n	8005da8 <_strtol_l.constprop.0+0xe8>
 8005da6:	1e69      	subs	r1, r5, #1
 8005da8:	6011      	str	r1, [r2, #0]
 8005daa:	e7f3      	b.n	8005d94 <_strtol_l.constprop.0+0xd4>
 8005dac:	2430      	movs	r4, #48	; 0x30
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1b1      	bne.n	8005d16 <_strtol_l.constprop.0+0x56>
 8005db2:	2308      	movs	r3, #8
 8005db4:	e7af      	b.n	8005d16 <_strtol_l.constprop.0+0x56>
 8005db6:	2c30      	cmp	r4, #48	; 0x30
 8005db8:	d0a5      	beq.n	8005d06 <_strtol_l.constprop.0+0x46>
 8005dba:	230a      	movs	r3, #10
 8005dbc:	e7ab      	b.n	8005d16 <_strtol_l.constprop.0+0x56>
 8005dbe:	bf00      	nop
 8005dc0:	080060c0 	.word	0x080060c0

08005dc4 <_strtol_r>:
 8005dc4:	f7ff bf7c 	b.w	8005cc0 <_strtol_l.constprop.0>

08005dc8 <_strtoul_l.constprop.0>:
 8005dc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005dcc:	4f36      	ldr	r7, [pc, #216]	; (8005ea8 <_strtoul_l.constprop.0+0xe0>)
 8005dce:	4686      	mov	lr, r0
 8005dd0:	460d      	mov	r5, r1
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005dd8:	5d3e      	ldrb	r6, [r7, r4]
 8005dda:	f016 0608 	ands.w	r6, r6, #8
 8005dde:	d1f8      	bne.n	8005dd2 <_strtoul_l.constprop.0+0xa>
 8005de0:	2c2d      	cmp	r4, #45	; 0x2d
 8005de2:	d130      	bne.n	8005e46 <_strtoul_l.constprop.0+0x7e>
 8005de4:	782c      	ldrb	r4, [r5, #0]
 8005de6:	2601      	movs	r6, #1
 8005de8:	1c85      	adds	r5, r0, #2
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d057      	beq.n	8005e9e <_strtoul_l.constprop.0+0xd6>
 8005dee:	2b10      	cmp	r3, #16
 8005df0:	d109      	bne.n	8005e06 <_strtoul_l.constprop.0+0x3e>
 8005df2:	2c30      	cmp	r4, #48	; 0x30
 8005df4:	d107      	bne.n	8005e06 <_strtoul_l.constprop.0+0x3e>
 8005df6:	7828      	ldrb	r0, [r5, #0]
 8005df8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005dfc:	2858      	cmp	r0, #88	; 0x58
 8005dfe:	d149      	bne.n	8005e94 <_strtoul_l.constprop.0+0xcc>
 8005e00:	786c      	ldrb	r4, [r5, #1]
 8005e02:	2310      	movs	r3, #16
 8005e04:	3502      	adds	r5, #2
 8005e06:	f04f 38ff 	mov.w	r8, #4294967295
 8005e0a:	2700      	movs	r7, #0
 8005e0c:	fbb8 f8f3 	udiv	r8, r8, r3
 8005e10:	fb03 f908 	mul.w	r9, r3, r8
 8005e14:	ea6f 0909 	mvn.w	r9, r9
 8005e18:	4638      	mov	r0, r7
 8005e1a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005e1e:	f1bc 0f09 	cmp.w	ip, #9
 8005e22:	d815      	bhi.n	8005e50 <_strtoul_l.constprop.0+0x88>
 8005e24:	4664      	mov	r4, ip
 8005e26:	42a3      	cmp	r3, r4
 8005e28:	dd23      	ble.n	8005e72 <_strtoul_l.constprop.0+0xaa>
 8005e2a:	f1b7 3fff 	cmp.w	r7, #4294967295
 8005e2e:	d007      	beq.n	8005e40 <_strtoul_l.constprop.0+0x78>
 8005e30:	4580      	cmp	r8, r0
 8005e32:	d31b      	bcc.n	8005e6c <_strtoul_l.constprop.0+0xa4>
 8005e34:	d101      	bne.n	8005e3a <_strtoul_l.constprop.0+0x72>
 8005e36:	45a1      	cmp	r9, r4
 8005e38:	db18      	blt.n	8005e6c <_strtoul_l.constprop.0+0xa4>
 8005e3a:	fb00 4003 	mla	r0, r0, r3, r4
 8005e3e:	2701      	movs	r7, #1
 8005e40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e44:	e7e9      	b.n	8005e1a <_strtoul_l.constprop.0+0x52>
 8005e46:	2c2b      	cmp	r4, #43	; 0x2b
 8005e48:	bf04      	itt	eq
 8005e4a:	782c      	ldrbeq	r4, [r5, #0]
 8005e4c:	1c85      	addeq	r5, r0, #2
 8005e4e:	e7cc      	b.n	8005dea <_strtoul_l.constprop.0+0x22>
 8005e50:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005e54:	f1bc 0f19 	cmp.w	ip, #25
 8005e58:	d801      	bhi.n	8005e5e <_strtoul_l.constprop.0+0x96>
 8005e5a:	3c37      	subs	r4, #55	; 0x37
 8005e5c:	e7e3      	b.n	8005e26 <_strtoul_l.constprop.0+0x5e>
 8005e5e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005e62:	f1bc 0f19 	cmp.w	ip, #25
 8005e66:	d804      	bhi.n	8005e72 <_strtoul_l.constprop.0+0xaa>
 8005e68:	3c57      	subs	r4, #87	; 0x57
 8005e6a:	e7dc      	b.n	8005e26 <_strtoul_l.constprop.0+0x5e>
 8005e6c:	f04f 37ff 	mov.w	r7, #4294967295
 8005e70:	e7e6      	b.n	8005e40 <_strtoul_l.constprop.0+0x78>
 8005e72:	1c7b      	adds	r3, r7, #1
 8005e74:	d106      	bne.n	8005e84 <_strtoul_l.constprop.0+0xbc>
 8005e76:	2322      	movs	r3, #34	; 0x22
 8005e78:	f8ce 3000 	str.w	r3, [lr]
 8005e7c:	4638      	mov	r0, r7
 8005e7e:	b932      	cbnz	r2, 8005e8e <_strtoul_l.constprop.0+0xc6>
 8005e80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e84:	b106      	cbz	r6, 8005e88 <_strtoul_l.constprop.0+0xc0>
 8005e86:	4240      	negs	r0, r0
 8005e88:	2a00      	cmp	r2, #0
 8005e8a:	d0f9      	beq.n	8005e80 <_strtoul_l.constprop.0+0xb8>
 8005e8c:	b107      	cbz	r7, 8005e90 <_strtoul_l.constprop.0+0xc8>
 8005e8e:	1e69      	subs	r1, r5, #1
 8005e90:	6011      	str	r1, [r2, #0]
 8005e92:	e7f5      	b.n	8005e80 <_strtoul_l.constprop.0+0xb8>
 8005e94:	2430      	movs	r4, #48	; 0x30
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1b5      	bne.n	8005e06 <_strtoul_l.constprop.0+0x3e>
 8005e9a:	2308      	movs	r3, #8
 8005e9c:	e7b3      	b.n	8005e06 <_strtoul_l.constprop.0+0x3e>
 8005e9e:	2c30      	cmp	r4, #48	; 0x30
 8005ea0:	d0a9      	beq.n	8005df6 <_strtoul_l.constprop.0+0x2e>
 8005ea2:	230a      	movs	r3, #10
 8005ea4:	e7af      	b.n	8005e06 <_strtoul_l.constprop.0+0x3e>
 8005ea6:	bf00      	nop
 8005ea8:	080060c0 	.word	0x080060c0

08005eac <_strtoul_r>:
 8005eac:	f7ff bf8c 	b.w	8005dc8 <_strtoul_l.constprop.0>

08005eb0 <_malloc_usable_size_r>:
 8005eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005eb4:	1f18      	subs	r0, r3, #4
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	bfbc      	itt	lt
 8005eba:	580b      	ldrlt	r3, [r1, r0]
 8005ebc:	18c0      	addlt	r0, r0, r3
 8005ebe:	4770      	bx	lr

08005ec0 <_init>:
 8005ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec2:	bf00      	nop
 8005ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ec6:	bc08      	pop	{r3}
 8005ec8:	469e      	mov	lr, r3
 8005eca:	4770      	bx	lr

08005ecc <_fini>:
 8005ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ece:	bf00      	nop
 8005ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed2:	bc08      	pop	{r3}
 8005ed4:	469e      	mov	lr, r3
 8005ed6:	4770      	bx	lr
