
Server_Arm_Toolbox2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e7e8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001874  0800e928  0800e928  0001e928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801019c  0801019c  0002019c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080101a4  080101a4  000201a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080101a8  080101a8  000201a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000008c  20000008  080101ac  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000094  08010238  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200000cc  0801026d  000300cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019b0  200000e0  0801027e  000300e0  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  20001a90  0801027e  00031a90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00040000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0801027e  000301e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .comment      00000043  00000000  00000000  00030a97  2**0
                  CONTENTS, READONLY
 16 .debug_info   00036847  00000000  00000000  00030ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000741e  00000000  00000000  00067321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00003180  00000000  00000000  0006e740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002611  00000000  00000000  000718c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002f233  00000000  00000000  00073ed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00038d29  00000000  00000000  000a3104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00107bf0  00000000  00000000  000dbe2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000d970  00000000  00000000  001e3a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000007f  00000000  00000000  001f1390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000e0 	.word	0x200000e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e910 	.word	0x0800e910

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000e4 	.word	0x200000e4
 800017c:	0800e910 	.word	0x0800e910

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2uiz>:
 80009cc:	004a      	lsls	r2, r1, #1
 80009ce:	d211      	bcs.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009d4:	d211      	bcs.n	80009fa <__aeabi_d2uiz+0x2e>
 80009d6:	d50d      	bpl.n	80009f4 <__aeabi_d2uiz+0x28>
 80009d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e0:	d40e      	bmi.n	8000a00 <__aeabi_d2uiz+0x34>
 80009e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ee:	fa23 f002 	lsr.w	r0, r3, r2
 80009f2:	4770      	bx	lr
 80009f4:	f04f 0000 	mov.w	r0, #0
 80009f8:	4770      	bx	lr
 80009fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009fe:	d102      	bne.n	8000a06 <__aeabi_d2uiz+0x3a>
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	4770      	bx	lr
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	4770      	bx	lr

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b970 	b.w	8000d04 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9e08      	ldr	r6, [sp, #32]
 8000a42:	460d      	mov	r5, r1
 8000a44:	4604      	mov	r4, r0
 8000a46:	460f      	mov	r7, r1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d14a      	bne.n	8000ae2 <__udivmoddi4+0xa6>
 8000a4c:	428a      	cmp	r2, r1
 8000a4e:	4694      	mov	ip, r2
 8000a50:	d965      	bls.n	8000b1e <__udivmoddi4+0xe2>
 8000a52:	fab2 f382 	clz	r3, r2
 8000a56:	b143      	cbz	r3, 8000a6a <__udivmoddi4+0x2e>
 8000a58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a5c:	f1c3 0220 	rsb	r2, r3, #32
 8000a60:	409f      	lsls	r7, r3
 8000a62:	fa20 f202 	lsr.w	r2, r0, r2
 8000a66:	4317      	orrs	r7, r2
 8000a68:	409c      	lsls	r4, r3
 8000a6a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a6e:	fa1f f58c 	uxth.w	r5, ip
 8000a72:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a76:	0c22      	lsrs	r2, r4, #16
 8000a78:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a7c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a80:	fb01 f005 	mul.w	r0, r1, r5
 8000a84:	4290      	cmp	r0, r2
 8000a86:	d90a      	bls.n	8000a9e <__udivmoddi4+0x62>
 8000a88:	eb1c 0202 	adds.w	r2, ip, r2
 8000a8c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a90:	f080 811c 	bcs.w	8000ccc <__udivmoddi4+0x290>
 8000a94:	4290      	cmp	r0, r2
 8000a96:	f240 8119 	bls.w	8000ccc <__udivmoddi4+0x290>
 8000a9a:	3902      	subs	r1, #2
 8000a9c:	4462      	add	r2, ip
 8000a9e:	1a12      	subs	r2, r2, r0
 8000aa0:	b2a4      	uxth	r4, r4
 8000aa2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aa6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aaa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aae:	fb00 f505 	mul.w	r5, r0, r5
 8000ab2:	42a5      	cmp	r5, r4
 8000ab4:	d90a      	bls.n	8000acc <__udivmoddi4+0x90>
 8000ab6:	eb1c 0404 	adds.w	r4, ip, r4
 8000aba:	f100 32ff 	add.w	r2, r0, #4294967295
 8000abe:	f080 8107 	bcs.w	8000cd0 <__udivmoddi4+0x294>
 8000ac2:	42a5      	cmp	r5, r4
 8000ac4:	f240 8104 	bls.w	8000cd0 <__udivmoddi4+0x294>
 8000ac8:	4464      	add	r4, ip
 8000aca:	3802      	subs	r0, #2
 8000acc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ad0:	1b64      	subs	r4, r4, r5
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	b11e      	cbz	r6, 8000ade <__udivmoddi4+0xa2>
 8000ad6:	40dc      	lsrs	r4, r3
 8000ad8:	2300      	movs	r3, #0
 8000ada:	e9c6 4300 	strd	r4, r3, [r6]
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	428b      	cmp	r3, r1
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0xbc>
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	f000 80ed 	beq.w	8000cc6 <__udivmoddi4+0x28a>
 8000aec:	2100      	movs	r1, #0
 8000aee:	e9c6 0500 	strd	r0, r5, [r6]
 8000af2:	4608      	mov	r0, r1
 8000af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af8:	fab3 f183 	clz	r1, r3
 8000afc:	2900      	cmp	r1, #0
 8000afe:	d149      	bne.n	8000b94 <__udivmoddi4+0x158>
 8000b00:	42ab      	cmp	r3, r5
 8000b02:	d302      	bcc.n	8000b0a <__udivmoddi4+0xce>
 8000b04:	4282      	cmp	r2, r0
 8000b06:	f200 80f8 	bhi.w	8000cfa <__udivmoddi4+0x2be>
 8000b0a:	1a84      	subs	r4, r0, r2
 8000b0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b10:	2001      	movs	r0, #1
 8000b12:	4617      	mov	r7, r2
 8000b14:	2e00      	cmp	r6, #0
 8000b16:	d0e2      	beq.n	8000ade <__udivmoddi4+0xa2>
 8000b18:	e9c6 4700 	strd	r4, r7, [r6]
 8000b1c:	e7df      	b.n	8000ade <__udivmoddi4+0xa2>
 8000b1e:	b902      	cbnz	r2, 8000b22 <__udivmoddi4+0xe6>
 8000b20:	deff      	udf	#255	; 0xff
 8000b22:	fab2 f382 	clz	r3, r2
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8090 	bne.w	8000c4c <__udivmoddi4+0x210>
 8000b2c:	1a8a      	subs	r2, r1, r2
 8000b2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b32:	fa1f fe8c 	uxth.w	lr, ip
 8000b36:	2101      	movs	r1, #1
 8000b38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b40:	0c22      	lsrs	r2, r4, #16
 8000b42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b46:	fb0e f005 	mul.w	r0, lr, r5
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x124>
 8000b4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b52:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x122>
 8000b58:	4290      	cmp	r0, r2
 8000b5a:	f200 80cb 	bhi.w	8000cf4 <__udivmoddi4+0x2b8>
 8000b5e:	4645      	mov	r5, r8
 8000b60:	1a12      	subs	r2, r2, r0
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b68:	fb07 2210 	mls	r2, r7, r0, r2
 8000b6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b70:	fb0e fe00 	mul.w	lr, lr, r0
 8000b74:	45a6      	cmp	lr, r4
 8000b76:	d908      	bls.n	8000b8a <__udivmoddi4+0x14e>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b80:	d202      	bcs.n	8000b88 <__udivmoddi4+0x14c>
 8000b82:	45a6      	cmp	lr, r4
 8000b84:	f200 80bb 	bhi.w	8000cfe <__udivmoddi4+0x2c2>
 8000b88:	4610      	mov	r0, r2
 8000b8a:	eba4 040e 	sub.w	r4, r4, lr
 8000b8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b92:	e79f      	b.n	8000ad4 <__udivmoddi4+0x98>
 8000b94:	f1c1 0720 	rsb	r7, r1, #32
 8000b98:	408b      	lsls	r3, r1
 8000b9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ba2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ba6:	fa20 f307 	lsr.w	r3, r0, r7
 8000baa:	40fd      	lsrs	r5, r7
 8000bac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb0:	4323      	orrs	r3, r4
 8000bb2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bb6:	fa1f fe8c 	uxth.w	lr, ip
 8000bba:	fb09 5518 	mls	r5, r9, r8, r5
 8000bbe:	0c1c      	lsrs	r4, r3, #16
 8000bc0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bc4:	fb08 f50e 	mul.w	r5, r8, lr
 8000bc8:	42a5      	cmp	r5, r4
 8000bca:	fa02 f201 	lsl.w	r2, r2, r1
 8000bce:	fa00 f001 	lsl.w	r0, r0, r1
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b0>
 8000bd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bdc:	f080 8088 	bcs.w	8000cf0 <__udivmoddi4+0x2b4>
 8000be0:	42a5      	cmp	r5, r4
 8000be2:	f240 8085 	bls.w	8000cf0 <__udivmoddi4+0x2b4>
 8000be6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bea:	4464      	add	r4, ip
 8000bec:	1b64      	subs	r4, r4, r5
 8000bee:	b29d      	uxth	r5, r3
 8000bf0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bf4:	fb09 4413 	mls	r4, r9, r3, r4
 8000bf8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bfc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c00:	45a6      	cmp	lr, r4
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1da>
 8000c04:	eb1c 0404 	adds.w	r4, ip, r4
 8000c08:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c0c:	d26c      	bcs.n	8000ce8 <__udivmoddi4+0x2ac>
 8000c0e:	45a6      	cmp	lr, r4
 8000c10:	d96a      	bls.n	8000ce8 <__udivmoddi4+0x2ac>
 8000c12:	3b02      	subs	r3, #2
 8000c14:	4464      	add	r4, ip
 8000c16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c1e:	eba4 040e 	sub.w	r4, r4, lr
 8000c22:	42ac      	cmp	r4, r5
 8000c24:	46c8      	mov	r8, r9
 8000c26:	46ae      	mov	lr, r5
 8000c28:	d356      	bcc.n	8000cd8 <__udivmoddi4+0x29c>
 8000c2a:	d053      	beq.n	8000cd4 <__udivmoddi4+0x298>
 8000c2c:	b156      	cbz	r6, 8000c44 <__udivmoddi4+0x208>
 8000c2e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c32:	eb64 040e 	sbc.w	r4, r4, lr
 8000c36:	fa04 f707 	lsl.w	r7, r4, r7
 8000c3a:	40ca      	lsrs	r2, r1
 8000c3c:	40cc      	lsrs	r4, r1
 8000c3e:	4317      	orrs	r7, r2
 8000c40:	e9c6 7400 	strd	r7, r4, [r6]
 8000c44:	4618      	mov	r0, r3
 8000c46:	2100      	movs	r1, #0
 8000c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4c:	f1c3 0120 	rsb	r1, r3, #32
 8000c50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c54:	fa20 f201 	lsr.w	r2, r0, r1
 8000c58:	fa25 f101 	lsr.w	r1, r5, r1
 8000c5c:	409d      	lsls	r5, r3
 8000c5e:	432a      	orrs	r2, r5
 8000c60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c70:	0c11      	lsrs	r1, r2, #16
 8000c72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c76:	fb00 f50e 	mul.w	r5, r0, lr
 8000c7a:	428d      	cmp	r5, r1
 8000c7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x258>
 8000c82:	eb1c 0101 	adds.w	r1, ip, r1
 8000c86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c8a:	d22f      	bcs.n	8000cec <__udivmoddi4+0x2b0>
 8000c8c:	428d      	cmp	r5, r1
 8000c8e:	d92d      	bls.n	8000cec <__udivmoddi4+0x2b0>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4461      	add	r1, ip
 8000c94:	1b49      	subs	r1, r1, r5
 8000c96:	b292      	uxth	r2, r2
 8000c98:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c9c:	fb07 1115 	mls	r1, r7, r5, r1
 8000ca0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ca4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ca8:	4291      	cmp	r1, r2
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x282>
 8000cac:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cb4:	d216      	bcs.n	8000ce4 <__udivmoddi4+0x2a8>
 8000cb6:	4291      	cmp	r1, r2
 8000cb8:	d914      	bls.n	8000ce4 <__udivmoddi4+0x2a8>
 8000cba:	3d02      	subs	r5, #2
 8000cbc:	4462      	add	r2, ip
 8000cbe:	1a52      	subs	r2, r2, r1
 8000cc0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cc4:	e738      	b.n	8000b38 <__udivmoddi4+0xfc>
 8000cc6:	4631      	mov	r1, r6
 8000cc8:	4630      	mov	r0, r6
 8000cca:	e708      	b.n	8000ade <__udivmoddi4+0xa2>
 8000ccc:	4639      	mov	r1, r7
 8000cce:	e6e6      	b.n	8000a9e <__udivmoddi4+0x62>
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	e6fb      	b.n	8000acc <__udivmoddi4+0x90>
 8000cd4:	4548      	cmp	r0, r9
 8000cd6:	d2a9      	bcs.n	8000c2c <__udivmoddi4+0x1f0>
 8000cd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cdc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	e7a3      	b.n	8000c2c <__udivmoddi4+0x1f0>
 8000ce4:	4645      	mov	r5, r8
 8000ce6:	e7ea      	b.n	8000cbe <__udivmoddi4+0x282>
 8000ce8:	462b      	mov	r3, r5
 8000cea:	e794      	b.n	8000c16 <__udivmoddi4+0x1da>
 8000cec:	4640      	mov	r0, r8
 8000cee:	e7d1      	b.n	8000c94 <__udivmoddi4+0x258>
 8000cf0:	46d0      	mov	r8, sl
 8000cf2:	e77b      	b.n	8000bec <__udivmoddi4+0x1b0>
 8000cf4:	3d02      	subs	r5, #2
 8000cf6:	4462      	add	r2, ip
 8000cf8:	e732      	b.n	8000b60 <__udivmoddi4+0x124>
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	e70a      	b.n	8000b14 <__udivmoddi4+0xd8>
 8000cfe:	4464      	add	r4, ip
 8000d00:	3802      	subs	r0, #2
 8000d02:	e742      	b.n	8000b8a <__udivmoddi4+0x14e>

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <LL_EXTI_EnableIT_32_63+0x24>)
 8000d12:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000d16:	4905      	ldr	r1, [pc, #20]	; (8000d2c <LL_EXTI_EnableIT_32_63+0x24>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4313      	orrs	r3, r2
 8000d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	58000800 	.word	0x58000800

08000d30 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4013      	ands	r3, r2
 8000d52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d54:	68fb      	ldr	r3, [r7, #12]
}
 8000d56:	bf00      	nop
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d62:	b480      	push	{r7}
 8000d64:	b085      	sub	sp, #20
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d6e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000d72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d82:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
}
 8000d8e:	bf00      	nop
 8000d90:	3714      	adds	r7, #20
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000d9e:	f002 fd11 	bl	80037c4 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000da2:	f002 fd15 	bl	80037d0 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000da6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000daa:	f7ff ffad 	bl	8000d08 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000dae:	f009 ffdf 	bl	800ad70 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000db2:	f000 f821 	bl	8000df8 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000db6:	f000 f8c1 	bl	8000f3c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000dba:	bf00      	nop
}
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000dc0:	b5b0      	push	{r4, r5, r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <APPD_EnableCPU2+0x34>)
 8000dc8:	1d3c      	adds	r4, r7, #4
 8000dca:	461d      	mov	r5, r3
 8000dcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dd4:	c403      	stmia	r4!, {r0, r1}
 8000dd6:	8022      	strh	r2, [r4, #0]
 8000dd8:	3402      	adds	r4, #2
 8000dda:	0c13      	lsrs	r3, r2, #16
 8000ddc:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000dde:	f009 fedb 	bl	800ab98 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	4618      	mov	r0, r3
 8000de6:	f009 f96c 	bl	800a0c2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000dea:	bf00      	nop
}
 8000dec:	3720      	adds	r7, #32
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bdb0      	pop	{r4, r5, r7, pc}
 8000df2:	bf00      	nop
 8000df4:	0800e928 	.word	0x0800e928

08000df8 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;
  gpioa_pin_list = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000e18:	2300      	movs	r3, #0
 8000e1a:	77fb      	strb	r3, [r7, #31]
 8000e1c:	e036      	b.n	8000e8c <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000e1e:	7ffb      	ldrb	r3, [r7, #31]
 8000e20:	4a43      	ldr	r2, [pc, #268]	; (8000f30 <APPD_SetCPU2GpioConfig+0x138>)
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	4413      	add	r3, r2
 8000e26:	799b      	ldrb	r3, [r3, #6]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d02c      	beq.n	8000e86 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000e2c:	7ffb      	ldrb	r3, [r7, #31]
 8000e2e:	4a40      	ldr	r2, [pc, #256]	; (8000f30 <APPD_SetCPU2GpioConfig+0x138>)
 8000e30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000e34:	4a3f      	ldr	r2, [pc, #252]	; (8000f34 <APPD_SetCPU2GpioConfig+0x13c>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d01b      	beq.n	8000e72 <APPD_SetCPU2GpioConfig+0x7a>
 8000e3a:	4a3e      	ldr	r2, [pc, #248]	; (8000f34 <APPD_SetCPU2GpioConfig+0x13c>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d821      	bhi.n	8000e84 <APPD_SetCPU2GpioConfig+0x8c>
 8000e40:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e44:	d003      	beq.n	8000e4e <APPD_SetCPU2GpioConfig+0x56>
 8000e46:	4a3c      	ldr	r2, [pc, #240]	; (8000f38 <APPD_SetCPU2GpioConfig+0x140>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d009      	beq.n	8000e60 <APPD_SetCPU2GpioConfig+0x68>
          break;
        case (uint32_t)GPIOC:
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;
        default:
          break;
 8000e4c:	e01a      	b.n	8000e84 <APPD_SetCPU2GpioConfig+0x8c>
          gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000e4e:	7ffb      	ldrb	r3, [r7, #31]
 8000e50:	4a37      	ldr	r2, [pc, #220]	; (8000f30 <APPD_SetCPU2GpioConfig+0x138>)
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	4413      	add	r3, r2
 8000e56:	889a      	ldrh	r2, [r3, #4]
 8000e58:	8bbb      	ldrh	r3, [r7, #28]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	83bb      	strh	r3, [r7, #28]
          break;
 8000e5e:	e012      	b.n	8000e86 <APPD_SetCPU2GpioConfig+0x8e>
          gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000e60:	7ffb      	ldrb	r3, [r7, #31]
 8000e62:	4a33      	ldr	r2, [pc, #204]	; (8000f30 <APPD_SetCPU2GpioConfig+0x138>)
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	4413      	add	r3, r2
 8000e68:	889a      	ldrh	r2, [r3, #4]
 8000e6a:	8b7b      	ldrh	r3, [r7, #26]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	837b      	strh	r3, [r7, #26]
          break;
 8000e70:	e009      	b.n	8000e86 <APPD_SetCPU2GpioConfig+0x8e>
          gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000e72:	7ffb      	ldrb	r3, [r7, #31]
 8000e74:	4a2e      	ldr	r2, [pc, #184]	; (8000f30 <APPD_SetCPU2GpioConfig+0x138>)
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	4413      	add	r3, r2
 8000e7a:	889a      	ldrh	r2, [r3, #4]
 8000e7c:	8b3b      	ldrh	r3, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	833b      	strh	r3, [r7, #24]
          break;
 8000e82:	e000      	b.n	8000e86 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000e84:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000e86:	7ffb      	ldrb	r3, [r7, #31]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	77fb      	strb	r3, [r7, #31]
 8000e8c:	7ffb      	ldrb	r3, [r7, #31]
 8000e8e:	2b25      	cmp	r3, #37	; 0x25
 8000e90:	d9c5      	bls.n	8000e1e <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8000e9e:	8bbb      	ldrh	r3, [r7, #28]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d014      	beq.n	8000ece <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8000ea4:	8bbb      	ldrh	r3, [r7, #28]
 8000ea6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f7ff ff41 	bl	8000d30 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8000eae:	2001      	movs	r0, #1
 8000eb0:	f7ff ff57 	bl	8000d62 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebc:	f003 f95a 	bl	8004174 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8000ec0:	8bbb      	ldrh	r3, [r7, #28]
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eca:	f003 fac3 	bl	8004454 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8000ece:	8b7b      	ldrh	r3, [r7, #26]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d012      	beq.n	8000efa <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8000ed4:	8b7b      	ldrh	r3, [r7, #26]
 8000ed6:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed8:	2002      	movs	r0, #2
 8000eda:	f7ff ff29 	bl	8000d30 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000ede:	2002      	movs	r0, #2
 8000ee0:	f7ff ff3f 	bl	8000d62 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4813      	ldr	r0, [pc, #76]	; (8000f38 <APPD_SetCPU2GpioConfig+0x140>)
 8000eea:	f003 f943 	bl	8004174 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000eee:	8b7b      	ldrh	r3, [r7, #26]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4810      	ldr	r0, [pc, #64]	; (8000f38 <APPD_SetCPU2GpioConfig+0x140>)
 8000ef6:	f003 faad 	bl	8004454 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8000efa:	8b3b      	ldrh	r3, [r7, #24]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d013      	beq.n	8000f28 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000f00:	8b3b      	ldrh	r3, [r7, #24]
 8000f02:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f04:	2004      	movs	r0, #4
 8000f06:	f7ff ff13 	bl	8000d30 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8000f0a:	2004      	movs	r0, #4
 8000f0c:	f7ff ff29 	bl	8000d62 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	4619      	mov	r1, r3
 8000f14:	4807      	ldr	r0, [pc, #28]	; (8000f34 <APPD_SetCPU2GpioConfig+0x13c>)
 8000f16:	f003 f92d 	bl	8004174 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8000f1a:	8b3b      	ldrh	r3, [r7, #24]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4804      	ldr	r0, [pc, #16]	; (8000f34 <APPD_SetCPU2GpioConfig+0x13c>)
 8000f22:	f003 fa97 	bl	8004454 <HAL_GPIO_WritePin>
  }

/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000f26:	bf00      	nop
 8000f28:	bf00      	nop
}
 8000f2a:	3720      	adds	r7, #32
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	0800fe1c 	.word	0x0800fe1c
 8000f34:	48000800 	.word	0x48000800
 8000f38:	48000400 	.word	0x48000400

08000f3c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000f40:	bf00      	nop
}
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000f4e:	f001 feb9 	bl	8002cc4 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000f52:	bf00      	nop
}
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b084      	sub	sp, #16
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	60f8      	str	r0, [r7, #12]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000f64:	897a      	ldrh	r2, [r7, #10]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68f9      	ldr	r1, [r7, #12]
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f001 fbf4 	bl	8002758 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000f70:	bf00      	nop
}
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000f80:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <LL_C2_PWR_SetPowerMode+0x28>)
 8000f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f86:	f023 0207 	bic.w	r2, r3, #7
 8000f8a:	4905      	ldr	r1, [pc, #20]	; (8000fa0 <LL_C2_PWR_SetPowerMode+0x28>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	58000400 	.word	0x58000400

08000fa4 <LL_EXTI_EnableIT_32_63>:
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000fae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000fb2:	4905      	ldr	r1, [pc, #20]	; (8000fc8 <LL_EXTI_EnableIT_32_63+0x24>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	58000800 	.word	0x58000800

08000fcc <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000fda:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8000fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000fe6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	cafecafe 	.word	0xcafecafe

08001008 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800101a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4313      	orrs	r3, r2
 8001022:	608b      	str	r3, [r1, #8]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <LL_DBGMCU_GetDeviceID+0x18>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	e0042000 	.word	0xe0042000

0800104c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001050:	4b04      	ldr	r3, [pc, #16]	; (8001064 <LL_DBGMCU_GetRevisionID+0x18>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	0c1b      	lsrs	r3, r3, #16
 8001056:	b29b      	uxth	r3, r3
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e0042000 	.word	0xe0042000

08001068 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <LL_LPM_EnableSleep+0x1c>)
 800106e:	691b      	ldr	r3, [r3, #16]
 8001070:	4a04      	ldr	r2, [pc, #16]	; (8001084 <LL_LPM_EnableSleep+0x1c>)
 8001072:	f023 0304 	bic.w	r3, r3, #4
 8001076:	6113      	str	r3, [r2, #16]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	22ff      	movs	r2, #255	; 0xff
 8001094:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	22ca      	movs	r2, #202	; 0xca
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2253      	movs	r2, #83	; 0x53
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f023 0207 	bic.w	r2, r3, #7
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	431a      	orrs	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	609a      	str	r2, [r3, #8]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <MX_APPE_Config+0x18>)
 80010ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010f2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80010f4:	f000 f826 	bl	8001144 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80010f8:	f000 f82b 	bl	8001152 <Config_HSE>

  return;
 80010fc:	bf00      	nop
}
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	58004000 	.word	0x58004000

08001104 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001108:	f000 f837 	bl	800117a <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800110c:	f000 f850 	bl	80011b0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001110:	4904      	ldr	r1, [pc, #16]	; (8001124 <MX_APPE_Init+0x20>)
 8001112:	2000      	movs	r0, #0
 8001114:	f001 f92e 	bl	8002374 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8001118:	f7ff fe3f 	bl	8000d9a <APPD_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800111c:	f000 f856 	bl	80011cc <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8001120:	bf00      	nop
}
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200001dc 	.word	0x200001dc

08001128 <Init_Smps>:

void Init_Smps(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800112c:	bf00      	nop
}
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <Init_Exti>:

void Init_Exti(void)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800113a:	2050      	movs	r0, #80	; 0x50
 800113c:	f7ff ff32 	bl	8000fa4 <LL_EXTI_EnableIT_32_63>

  return;
 8001140:	bf00      	nop
}
 8001142:	bd80      	pop	{r7, pc}

08001144 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001148:	bf00      	nop
}
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr

08001152 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001158:	2000      	movs	r0, #0
 800115a:	f009 fe87 	bl	800ae6c <OTP_Read>
 800115e:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d005      	beq.n	8001172 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	799b      	ldrb	r3, [r3, #6]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ff2e 	bl	8000fcc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001170:	bf00      	nop
 8001172:	bf00      	nop
}
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <System_Init>:

static void System_Init(void)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	af00      	add	r7, sp, #0
  Init_Smps();
 800117e:	f7ff ffd3 	bl	8001128 <Init_Smps>

  Init_Exti();
 8001182:	f7ff ffd8 	bl	8001136 <Init_Exti>

  Init_Rtc();
 8001186:	f000 f803 	bl	8001190 <Init_Rtc>

  return;
 800118a:	bf00      	nop
}
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001194:	4805      	ldr	r0, [pc, #20]	; (80011ac <Init_Rtc+0x1c>)
 8001196:	f7ff ff84 	bl	80010a2 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800119a:	2100      	movs	r1, #0
 800119c:	4803      	ldr	r0, [pc, #12]	; (80011ac <Init_Rtc+0x1c>)
 800119e:	f7ff ff90 	bl	80010c2 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80011a2:	4802      	ldr	r0, [pc, #8]	; (80011ac <Init_Rtc+0x1c>)
 80011a4:	f7ff ff70 	bl	8001088 <LL_RTC_EnableWriteProtection>

  return;
 80011a8:	bf00      	nop
}
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40002800 	.word	0x40002800

080011b0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80011b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80011b8:	f7ff ff26 	bl	8001008 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80011bc:	f00c f926 	bl	800d40c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80011c0:	2004      	movs	r0, #4
 80011c2:	f7ff fed9 	bl	8000f78 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80011c6:	bf00      	nop
}
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;

  /**< Reference table initialization */
  TL_Init();
 80011d2:	f009 fb2b 	bl	800a82c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80011d6:	4a11      	ldr	r2, [pc, #68]	; (800121c <appe_Tl_Init+0x50>)
 80011d8:	2100      	movs	r1, #0
 80011da:	f44f 7080 	mov.w	r0, #256	; 0x100
 80011de:	f00c fa53 	bl	800d688 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <appe_Tl_Init+0x54>)
 80011e4:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80011e6:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <appe_Tl_Init+0x58>)
 80011e8:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80011ea:	463b      	mov	r3, r7
 80011ec:	4619      	mov	r1, r3
 80011ee:	480e      	ldr	r0, [pc, #56]	; (8001228 <appe_Tl_Init+0x5c>)
 80011f0:	f009 f9de 	bl	800a5b0 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80011f4:	4b0d      	ldr	r3, [pc, #52]	; (800122c <appe_Tl_Init+0x60>)
 80011f6:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80011f8:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <appe_Tl_Init+0x64>)
 80011fa:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80011fc:	4b0d      	ldr	r3, [pc, #52]	; (8001234 <appe_Tl_Init+0x68>)
 80011fe:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001200:	f240 533c 	movw	r3, #1340	; 0x53c
 8001204:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	4618      	mov	r0, r3
 800120c:	f009 fc50 	bl	800aab0 <TL_MM_Init>

  TL_Enable();
 8001210:	f009 fb06 	bl	800a820 <TL_Enable>

  return;
 8001214:	bf00      	nop
}
 8001216:	3720      	adds	r7, #32
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	0800a5e9 	.word	0x0800a5e9
 8001220:	20030734 	.word	0x20030734
 8001224:	08001239 	.word	0x08001239
 8001228:	08001251 	.word	0x08001251
 800122c:	2003094c 	.word	0x2003094c
 8001230:	20030840 	.word	0x20030840
 8001234:	200301f8 	.word	0x200301f8

08001238 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001242:	bf00      	nop
}
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
	...

08001250 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	330b      	adds	r3, #11
 800125e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	b29b      	uxth	r3, r3
 8001266:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 800126a:	2b07      	cmp	r3, #7
 800126c:	f200 80d0 	bhi.w	8001410 <APPE_SysUserEvtRx+0x1c0>
 8001270:	a201      	add	r2, pc, #4	; (adr r2, 8001278 <APPE_SysUserEvtRx+0x28>)
 8001272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001276:	bf00      	nop
 8001278:	08001299 	.word	0x08001299
 800127c:	0800132b 	.word	0x0800132b
 8001280:	0800134d 	.word	0x0800134d
 8001284:	08001411 	.word	0x08001411
 8001288:	08001391 	.word	0x08001391
 800128c:	080013b5 	.word	0x080013b5
 8001290:	080013d1 	.word	0x080013d1
 8001294:	080013f5 	.word	0x080013f5
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4618      	mov	r0, r3
 800129e:	f008 ff3d 	bl	800a11c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 80012a2:	485e      	ldr	r0, [pc, #376]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 80012a4:	f009 fd04 	bl	800acb0 <DbgTraceGetFileName>
 80012a8:	4601      	mov	r1, r0
 80012aa:	f240 136b 	movw	r3, #363	; 0x16b
 80012ae:	4a5c      	ldr	r2, [pc, #368]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 80012b0:	485c      	ldr	r0, [pc, #368]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 80012b2:	f00c fbed 	bl	800da90 <iprintf>
 80012b6:	7b3b      	ldrb	r3, [r7, #12]
 80012b8:	4619      	mov	r1, r3
 80012ba:	7b7b      	ldrb	r3, [r7, #13]
 80012bc:	461a      	mov	r2, r3
 80012be:	7bbb      	ldrb	r3, [r7, #14]
 80012c0:	4859      	ldr	r0, [pc, #356]	; (8001428 <APPE_SysUserEvtRx+0x1d8>)
 80012c2:	f00c fbe5 	bl	800da90 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 80012c6:	4855      	ldr	r0, [pc, #340]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 80012c8:	f009 fcf2 	bl	800acb0 <DbgTraceGetFileName>
 80012cc:	4601      	mov	r1, r0
 80012ce:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80012d2:	4a53      	ldr	r2, [pc, #332]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 80012d4:	4853      	ldr	r0, [pc, #332]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 80012d6:	f00c fbdb 	bl	800da90 <iprintf>
 80012da:	7c3b      	ldrb	r3, [r7, #16]
 80012dc:	4619      	mov	r1, r3
 80012de:	4853      	ldr	r0, [pc, #332]	; (800142c <APPE_SysUserEvtRx+0x1dc>)
 80012e0:	f00c fbd6 	bl	800da90 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80012e4:	484d      	ldr	r0, [pc, #308]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 80012e6:	f009 fce3 	bl	800acb0 <DbgTraceGetFileName>
 80012ea:	4601      	mov	r1, r0
 80012ec:	f240 136d 	movw	r3, #365	; 0x16d
 80012f0:	4a4b      	ldr	r2, [pc, #300]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 80012f2:	484c      	ldr	r0, [pc, #304]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 80012f4:	f00c fbcc 	bl	800da90 <iprintf>
 80012f8:	7dbb      	ldrb	r3, [r7, #22]
 80012fa:	4619      	mov	r1, r3
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
 80012fe:	461a      	mov	r2, r3
 8001300:	7e3b      	ldrb	r3, [r7, #24]
 8001302:	484b      	ldr	r0, [pc, #300]	; (8001430 <APPE_SysUserEvtRx+0x1e0>)
 8001304:	f00c fbc4 	bl	800da90 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8001308:	4844      	ldr	r0, [pc, #272]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 800130a:	f009 fcd1 	bl	800acb0 <DbgTraceGetFileName>
 800130e:	4601      	mov	r1, r0
 8001310:	f240 136f 	movw	r3, #367	; 0x16f
 8001314:	4a42      	ldr	r2, [pc, #264]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 8001316:	4843      	ldr	r0, [pc, #268]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 8001318:	f00c fbba 	bl	800da90 <iprintf>
 800131c:	4845      	ldr	r0, [pc, #276]	; (8001434 <APPE_SysUserEvtRx+0x1e4>)
 800131e:	f00c fbb7 	bl	800da90 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 f8e0 	bl	80014e8 <APPE_SysEvtReadyProcessing>
    break;
 8001328:	e073      	b.n	8001412 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 800132a:	483c      	ldr	r0, [pc, #240]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 800132c:	f009 fcc0 	bl	800acb0 <DbgTraceGetFileName>
 8001330:	4601      	mov	r1, r0
 8001332:	f44f 73ba 	mov.w	r3, #372	; 0x174
 8001336:	4a3a      	ldr	r2, [pc, #232]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 8001338:	483a      	ldr	r0, [pc, #232]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 800133a:	f00c fba9 	bl	800da90 <iprintf>
 800133e:	483e      	ldr	r0, [pc, #248]	; (8001438 <APPE_SysUserEvtRx+0x1e8>)
 8001340:	f00c fba6 	bl	800da90 <iprintf>
    APPE_SysEvtError(pPayload);
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 f885 	bl	8001454 <APPE_SysEvtError>
    break;
 800134a:	e062      	b.n	8001412 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 800134c:	4833      	ldr	r0, [pc, #204]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 800134e:	f009 fcaf 	bl	800acb0 <DbgTraceGetFileName>
 8001352:	4601      	mov	r1, r0
 8001354:	f240 1379 	movw	r3, #377	; 0x179
 8001358:	4a31      	ldr	r2, [pc, #196]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 800135a:	4832      	ldr	r0, [pc, #200]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 800135c:	f00c fb98 	bl	800da90 <iprintf>
 8001360:	4836      	ldr	r0, [pc, #216]	; (800143c <APPE_SysUserEvtRx+0x1ec>)
 8001362:	f00c fc03 	bl	800db6c <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001366:	482d      	ldr	r0, [pc, #180]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 8001368:	f009 fca2 	bl	800acb0 <DbgTraceGetFileName>
 800136c:	4601      	mov	r1, r0
 800136e:	f44f 73bd 	mov.w	r3, #378	; 0x17a
 8001372:	4a2b      	ldr	r2, [pc, #172]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 8001374:	482b      	ldr	r0, [pc, #172]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 8001376:	f00c fb8b 	bl	800da90 <iprintf>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3302      	adds	r3, #2
 800137e:	6819      	ldr	r1, [r3, #0]
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	3302      	adds	r3, #2
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	461a      	mov	r2, r3
 8001388:	482d      	ldr	r0, [pc, #180]	; (8001440 <APPE_SysUserEvtRx+0x1f0>)
 800138a:	f00c fb81 	bl	800da90 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 800138e:	e040      	b.n	8001412 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001390:	4822      	ldr	r0, [pc, #136]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 8001392:	f009 fc8d 	bl	800acb0 <DbgTraceGetFileName>
 8001396:	4601      	mov	r1, r0
 8001398:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800139c:	4a20      	ldr	r2, [pc, #128]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 800139e:	4821      	ldr	r0, [pc, #132]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 80013a0:	f00c fb76 	bl	800da90 <iprintf>
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	3302      	adds	r3, #2
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4619      	mov	r1, r3
 80013ac:	4825      	ldr	r0, [pc, #148]	; (8001444 <APPE_SysUserEvtRx+0x1f4>)
 80013ae:	f00c fb6f 	bl	800da90 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 80013b2:	e02e      	b.n	8001412 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 80013b4:	4819      	ldr	r0, [pc, #100]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 80013b6:	f009 fc7b 	bl	800acb0 <DbgTraceGetFileName>
 80013ba:	4601      	mov	r1, r0
 80013bc:	f240 1385 	movw	r3, #389	; 0x185
 80013c0:	4a17      	ldr	r2, [pc, #92]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 80013c2:	4818      	ldr	r0, [pc, #96]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 80013c4:	f00c fb64 	bl	800da90 <iprintf>
 80013c8:	481f      	ldr	r0, [pc, #124]	; (8001448 <APPE_SysUserEvtRx+0x1f8>)
 80013ca:	f00c fb61 	bl	800da90 <iprintf>
    break;
 80013ce:	e020      	b.n	8001412 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 80013d0:	4812      	ldr	r0, [pc, #72]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 80013d2:	f009 fc6d 	bl	800acb0 <DbgTraceGetFileName>
 80013d6:	4601      	mov	r1, r0
 80013d8:	f240 1389 	movw	r3, #393	; 0x189
 80013dc:	4a10      	ldr	r2, [pc, #64]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 80013de:	4811      	ldr	r0, [pc, #68]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 80013e0:	f00c fb56 	bl	800da90 <iprintf>
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	3302      	adds	r3, #2
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4619      	mov	r1, r3
 80013ec:	4817      	ldr	r0, [pc, #92]	; (800144c <APPE_SysUserEvtRx+0x1fc>)
 80013ee:	f00c fb4f 	bl	800da90 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 80013f2:	e00e      	b.n	8001412 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80013f4:	4809      	ldr	r0, [pc, #36]	; (800141c <APPE_SysUserEvtRx+0x1cc>)
 80013f6:	f009 fc5b 	bl	800acb0 <DbgTraceGetFileName>
 80013fa:	4601      	mov	r1, r0
 80013fc:	f44f 73c7 	mov.w	r3, #398	; 0x18e
 8001400:	4a07      	ldr	r2, [pc, #28]	; (8001420 <APPE_SysUserEvtRx+0x1d0>)
 8001402:	4808      	ldr	r0, [pc, #32]	; (8001424 <APPE_SysUserEvtRx+0x1d4>)
 8001404:	f00c fb44 	bl	800da90 <iprintf>
 8001408:	4811      	ldr	r0, [pc, #68]	; (8001450 <APPE_SysUserEvtRx+0x200>)
 800140a:	f00c fb41 	bl	800da90 <iprintf>
    break;
 800140e:	e000      	b.n	8001412 <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 8001410:	bf00      	nop
  }

  return;
 8001412:	bf00      	nop
}
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	0800e944 	.word	0x0800e944
 8001420:	0800ff4c 	.word	0x0800ff4c
 8001424:	0800e95c 	.word	0x0800e95c
 8001428:	0800e970 	.word	0x0800e970
 800142c:	0800e994 	.word	0x0800e994
 8001430:	0800e9b0 	.word	0x0800e9b0
 8001434:	0800e9c8 	.word	0x0800e9c8
 8001438:	0800e9e8 	.word	0x0800e9e8
 800143c:	0800ea0c 	.word	0x0800ea0c
 8001440:	0800ea5c 	.word	0x0800ea5c
 8001444:	0800ea84 	.word	0x0800ea84
 8001448:	0800eac0 	.word	0x0800eac0
 800144c:	0800eae4 	.word	0x0800eae4
 8001450:	0800eb20 	.word	0x0800eb20

08001454 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	330b      	adds	r3, #11
 8001462:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	3302      	adds	r3, #2
 8001468:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 800146a:	4819      	ldr	r0, [pc, #100]	; (80014d0 <APPE_SysEvtError+0x7c>)
 800146c:	f009 fc20 	bl	800acb0 <DbgTraceGetFileName>
 8001470:	4601      	mov	r1, r0
 8001472:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
 8001476:	4a17      	ldr	r2, [pc, #92]	; (80014d4 <APPE_SysEvtError+0x80>)
 8001478:	4817      	ldr	r0, [pc, #92]	; (80014d8 <APPE_SysEvtError+0x84>)
 800147a:	f00c fb09 	bl	800da90 <iprintf>
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	4619      	mov	r1, r3
 8001484:	4815      	ldr	r0, [pc, #84]	; (80014dc <APPE_SysEvtError+0x88>)
 8001486:	f00c fb03 	bl	800da90 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10d      	bne.n	80014ae <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8001492:	480f      	ldr	r0, [pc, #60]	; (80014d0 <APPE_SysEvtError+0x7c>)
 8001494:	f009 fc0c 	bl	800acb0 <DbgTraceGetFileName>
 8001498:	4601      	mov	r1, r0
 800149a:	f240 13ab 	movw	r3, #427	; 0x1ab
 800149e:	4a0d      	ldr	r2, [pc, #52]	; (80014d4 <APPE_SysEvtError+0x80>)
 80014a0:	480d      	ldr	r0, [pc, #52]	; (80014d8 <APPE_SysEvtError+0x84>)
 80014a2:	f00c faf5 	bl	800da90 <iprintf>
 80014a6:	480e      	ldr	r0, [pc, #56]	; (80014e0 <APPE_SysEvtError+0x8c>)
 80014a8:	f00c fb60 	bl	800db6c <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80014ac:	e00d      	b.n	80014ca <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80014ae:	4808      	ldr	r0, [pc, #32]	; (80014d0 <APPE_SysEvtError+0x7c>)
 80014b0:	f009 fbfe 	bl	800acb0 <DbgTraceGetFileName>
 80014b4:	4601      	mov	r1, r0
 80014b6:	f240 13af 	movw	r3, #431	; 0x1af
 80014ba:	4a06      	ldr	r2, [pc, #24]	; (80014d4 <APPE_SysEvtError+0x80>)
 80014bc:	4806      	ldr	r0, [pc, #24]	; (80014d8 <APPE_SysEvtError+0x84>)
 80014be:	f00c fae7 	bl	800da90 <iprintf>
 80014c2:	4808      	ldr	r0, [pc, #32]	; (80014e4 <APPE_SysEvtError+0x90>)
 80014c4:	f00c fb52 	bl	800db6c <puts>
  return;
 80014c8:	bf00      	nop
}
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	0800e944 	.word	0x0800e944
 80014d4:	0800ff60 	.word	0x0800ff60
 80014d8:	0800e95c 	.word	0x0800e95c
 80014dc:	0800eb44 	.word	0x0800eb44
 80014e0:	0800eb74 	.word	0x0800eb74
 80014e4:	0800ebb0 	.word	0x0800ebb0

080014e8 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80014f0:	f107 0308 	add.w	r3, r7, #8
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80014fe:	2300      	movs	r3, #0
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	330b      	adds	r3, #11
 800150c:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3302      	adds	r3, #2
 8001512:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d146      	bne.n	80015aa <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 800151c:	4836      	ldr	r0, [pc, #216]	; (80015f8 <APPE_SysEvtReadyProcessing+0x110>)
 800151e:	f009 fbc7 	bl	800acb0 <DbgTraceGetFileName>
 8001522:	4601      	mov	r1, r0
 8001524:	f240 13c5 	movw	r3, #453	; 0x1c5
 8001528:	4a34      	ldr	r2, [pc, #208]	; (80015fc <APPE_SysEvtReadyProcessing+0x114>)
 800152a:	4835      	ldr	r0, [pc, #212]	; (8001600 <APPE_SysEvtReadyProcessing+0x118>)
 800152c:	f00c fab0 	bl	800da90 <iprintf>
 8001530:	4834      	ldr	r0, [pc, #208]	; (8001604 <APPE_SysEvtReadyProcessing+0x11c>)
 8001532:	f00c fb1b 	bl	800db6c <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001536:	f7ff fc43 	bl	8000dc0 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800153a:	230f      	movs	r3, #15
 800153c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800153e:	237f      	movs	r3, #127	; 0x7f
 8001540:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001542:	f7ff fd83 	bl	800104c <LL_DBGMCU_GetRevisionID>
 8001546:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001548:	482b      	ldr	r0, [pc, #172]	; (80015f8 <APPE_SysEvtReadyProcessing+0x110>)
 800154a:	f009 fbb1 	bl	800acb0 <DbgTraceGetFileName>
 800154e:	4601      	mov	r1, r0
 8001550:	f240 13dd 	movw	r3, #477	; 0x1dd
 8001554:	4a29      	ldr	r2, [pc, #164]	; (80015fc <APPE_SysEvtReadyProcessing+0x114>)
 8001556:	482a      	ldr	r0, [pc, #168]	; (8001600 <APPE_SysEvtReadyProcessing+0x118>)
 8001558:	f00c fa9a 	bl	800da90 <iprintf>
 800155c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800155e:	482a      	ldr	r0, [pc, #168]	; (8001608 <APPE_SysEvtReadyProcessing+0x120>)
 8001560:	f00c fa96 	bl	800da90 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	b29b      	uxth	r3, r3
 8001568:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800156a:	f7ff fd61 	bl	8001030 <LL_DBGMCU_GetDeviceID>
 800156e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001570:	4821      	ldr	r0, [pc, #132]	; (80015f8 <APPE_SysEvtReadyProcessing+0x110>)
 8001572:	f009 fb9d 	bl	800acb0 <DbgTraceGetFileName>
 8001576:	4601      	mov	r1, r0
 8001578:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 800157c:	4a1f      	ldr	r2, [pc, #124]	; (80015fc <APPE_SysEvtReadyProcessing+0x114>)
 800157e:	4820      	ldr	r0, [pc, #128]	; (8001600 <APPE_SysEvtReadyProcessing+0x118>)
 8001580:	f00c fa86 	bl	800da90 <iprintf>
 8001584:	6a39      	ldr	r1, [r7, #32]
 8001586:	4821      	ldr	r0, [pc, #132]	; (800160c <APPE_SysEvtReadyProcessing+0x124>)
 8001588:	f00c fa82 	bl	800da90 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 800158c:	6a3b      	ldr	r3, [r7, #32]
 800158e:	b29b      	uxth	r3, r3
 8001590:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001592:	f107 0308 	add.w	r3, r7, #8
 8001596:	4618      	mov	r0, r3
 8001598:	f008 fdaa 	bl	800a0f0 <SHCI_C2_Config>

    APP_BLE_Init();
 800159c:	f00a f972 	bl	800b884 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80015a0:	2100      	movs	r1, #0
 80015a2:	2001      	movs	r0, #1
 80015a4:	f00b ff44 	bl	800d430 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80015a8:	e022      	b.n	80015f0 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d110      	bne.n	80015d4 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 80015b2:	4811      	ldr	r0, [pc, #68]	; (80015f8 <APPE_SysEvtReadyProcessing+0x110>)
 80015b4:	f009 fb7c 	bl	800acb0 <DbgTraceGetFileName>
 80015b8:	4601      	mov	r1, r0
 80015ba:	f240 13ef 	movw	r3, #495	; 0x1ef
 80015be:	4a0f      	ldr	r2, [pc, #60]	; (80015fc <APPE_SysEvtReadyProcessing+0x114>)
 80015c0:	480f      	ldr	r0, [pc, #60]	; (8001600 <APPE_SysEvtReadyProcessing+0x118>)
 80015c2:	f00c fa65 	bl	800da90 <iprintf>
 80015c6:	4812      	ldr	r0, [pc, #72]	; (8001610 <APPE_SysEvtReadyProcessing+0x128>)
 80015c8:	f00c fa62 	bl	800da90 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
  return;
 80015d2:	e00d      	b.n	80015f0 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 80015d4:	4808      	ldr	r0, [pc, #32]	; (80015f8 <APPE_SysEvtReadyProcessing+0x110>)
 80015d6:	f009 fb6b 	bl	800acb0 <DbgTraceGetFileName>
 80015da:	4601      	mov	r1, r0
 80015dc:	f44f 73fb 	mov.w	r3, #502	; 0x1f6
 80015e0:	4a06      	ldr	r2, [pc, #24]	; (80015fc <APPE_SysEvtReadyProcessing+0x114>)
 80015e2:	4807      	ldr	r0, [pc, #28]	; (8001600 <APPE_SysEvtReadyProcessing+0x118>)
 80015e4:	f00c fa54 	bl	800da90 <iprintf>
 80015e8:	480a      	ldr	r0, [pc, #40]	; (8001614 <APPE_SysEvtReadyProcessing+0x12c>)
 80015ea:	f00c fa51 	bl	800da90 <iprintf>
  return;
 80015ee:	bf00      	nop
}
 80015f0:	3728      	adds	r7, #40	; 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	0800e944 	.word	0x0800e944
 80015fc:	0800ff74 	.word	0x0800ff74
 8001600:	0800e95c 	.word	0x0800e95c
 8001604:	0800ebe8 	.word	0x0800ebe8
 8001608:	0800ec04 	.word	0x0800ec04
 800160c:	0800ec28 	.word	0x0800ec28
 8001610:	0800ec48 	.word	0x0800ec48
 8001614:	0800ec7c 	.word	0x0800ec7c

08001618 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001620:	f002 f8ac 	bl	800377c <HAL_GetTick>
 8001624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001630:	d00a      	beq.n	8001648 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001632:	f002 f8bb 	bl	80037ac <HAL_GetTickFreq>
 8001636:	4603      	mov	r3, r0
 8001638:	461a      	mov	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4413      	add	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001640:	e002      	b.n	8001648 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001642:	f7ff fd11 	bl	8001068 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 8001646:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001648:	f002 f898 	bl	800377c <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	429a      	cmp	r2, r3
 8001656:	d8f4      	bhi.n	8001642 <HAL_Delay+0x2a>
  }
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001666:	f04f 30ff 	mov.w	r0, #4294967295
 800166a:	f00b ff11 	bl	800d490 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}

08001672 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001676:	bf00      	nop
}
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800168a:	f04f 30ff 	mov.w	r0, #4294967295
 800168e:	f00b feff 	bl	800d490 <UTIL_SEQ_Run>
  return;
 8001692:	bf00      	nop
}
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b082      	sub	sp, #8
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80016a2:	2100      	movs	r1, #0
 80016a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016a8:	f00c f810 	bl	800d6cc <UTIL_SEQ_SetTask>
  return;
 80016ac:	bf00      	nop
}
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80016bc:	2002      	movs	r0, #2
 80016be:	f00c f871 	bl	800d7a4 <UTIL_SEQ_SetEvt>
  return;
 80016c2:	bf00      	nop
}
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80016ca:	b580      	push	{r7, lr}
 80016cc:	b082      	sub	sp, #8
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80016d2:	2002      	movs	r0, #2
 80016d4:	f00c f886 	bl	800d7e4 <UTIL_SEQ_WaitEvt>
  return;
 80016d8:	bf00      	nop
}
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	2b10      	cmp	r3, #16
 80016ee:	d006      	beq.n	80016fe <HAL_GPIO_EXTI_Callback+0x1e>
 80016f0:	2b10      	cmp	r3, #16
 80016f2:	dc0d      	bgt.n	8001710 <HAL_GPIO_EXTI_Callback+0x30>
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d005      	beq.n	8001704 <HAL_GPIO_EXTI_Callback+0x24>
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d006      	beq.n	800170a <HAL_GPIO_EXTI_Callback+0x2a>
        break;
    case B3_Pin:
        APP_BLE_Key_Button3_Action();
        break;
    default:
      break;
 80016fc:	e008      	b.n	8001710 <HAL_GPIO_EXTI_Callback+0x30>
        APP_BLE_Key_Button1_Action();
 80016fe:	f00a ffc9 	bl	800c694 <APP_BLE_Key_Button1_Action>
        break;
 8001702:	e006      	b.n	8001712 <HAL_GPIO_EXTI_Callback+0x32>
        APP_BLE_Key_Button2_Action();
 8001704:	f00a ffcc 	bl	800c6a0 <APP_BLE_Key_Button2_Action>
        break;
 8001708:	e003      	b.n	8001712 <HAL_GPIO_EXTI_Callback+0x32>
        APP_BLE_Key_Button3_Action();
 800170a:	f00a ffcf 	bl	800c6ac <APP_BLE_Key_Button3_Action>
        break;
 800170e:	e000      	b.n	8001712 <HAL_GPIO_EXTI_Callback+0x32>
      break;
 8001710:	bf00      	nop
  }
  return;
 8001712:	bf00      	nop
}
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <Stop_Motor>:
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
	HAL_Delay(500);
}

void Stop_Motor()
{
 800171a:	b580      	push	{r7, lr}
 800171c:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
	Update_PWM(0);
 800171e:	2000      	movs	r0, #0
 8001720:	f000 f994 	bl	8001a4c <Update_PWM>
	Motor_Stopped_Complete();
 8001724:	f000 f9be 	bl	8001aa4 <Motor_Stopped_Complete>
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}

0800172c <Get_Speed>:

uint16_t Get_Speed() // does not look at direction
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
	uint32_t total = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
	uint16_t avg = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	80fb      	strh	r3, [r7, #6]
	uint8_t readings = 4;
 800173a:	2304      	movs	r3, #4
 800173c:	717b      	strb	r3, [r7, #5]
	for (int i = 0; i < readings; i++)
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	e00c      	b.n	800175e <Get_Speed+0x32>
	{
		total += Read_Speed();
 8001744:	f000 f81c 	bl	8001780 <Read_Speed>
 8001748:	4603      	mov	r3, r0
 800174a:	461a      	mov	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4413      	add	r3, r2
 8001750:	60fb      	str	r3, [r7, #12]
		HAL_Delay(2); //Offset
 8001752:	2002      	movs	r0, #2
 8001754:	f7ff ff60 	bl	8001618 <HAL_Delay>
	for (int i = 0; i < readings; i++)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	3301      	adds	r3, #1
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	797b      	ldrb	r3, [r7, #5]
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	429a      	cmp	r2, r3
 8001764:	dbee      	blt.n	8001744 <Get_Speed+0x18>
	}

	avg = total/readings;
 8001766:	797b      	ldrb	r3, [r7, #5]
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	80fb      	strh	r3, [r7, #6]
	return avg;
 8001770:	88fb      	ldrh	r3, [r7, #6]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	0000      	movs	r0, r0
 800177c:	0000      	movs	r0, r0
	...

08001780 <Read_Speed>:

uint16_t Read_Speed() //rpm
{
 8001780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
	//return 5;
	//TIM1->CR1 = 1;
	//uint8_t Test[] = "Starting speed reading\r\n";
	//HAL_UART_Transmit(&huart1,Test, sizeof(Test),10);

	uint32_t period = 100;
 8001788:	2364      	movs	r3, #100	; 0x64
 800178a:	613b      	str	r3, [r7, #16]
	uint16_t speed = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	82fb      	strh	r3, [r7, #22]
	uint32_t start_counter = Get_Counter();
 8001790:	f001 fbac 	bl	8002eec <Get_Counter>
 8001794:	60f8      	str	r0, [r7, #12]

	//char Test3[50];
	//int size3 = sprintf(Test3, "start counter= %lu\r\n", start_counter);
	//HAL_UART_Transmit(&huart1,(uint8_t*)Test3, size3,10);

	HAL_Delay(period);
 8001796:	6938      	ldr	r0, [r7, #16]
 8001798:	f7ff ff3e 	bl	8001618 <HAL_Delay>
	uint32_t end_counter = Get_Counter();
 800179c:	f001 fba6 	bl	8002eec <Get_Counter>
 80017a0:	60b8      	str	r0, [r7, #8]

	//char Test2[50];
	//int size2 = sprintf(Test2, "end counter=   %lu\r\n", end_counter);
	//HAL_UART_Transmit(&huart1,(uint8_t*)Test2, size2,10);

	if (start_counter == end_counter)
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d102      	bne.n	80017b0 <Read_Speed+0x30>
	{
		speed = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	82fb      	strh	r3, [r7, #22]
 80017ae:	e09d      	b.n	80018ec <Read_Speed+0x16c>
	}
	else if (start_counter > end_counter)
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d944      	bls.n	8001842 <Read_Speed+0xc2>
	{
		speed = (start_counter - end_counter)*(1000.0/period)*60.0/4/PPR/GEAR_RATIO;
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fe78 	bl	80004b4 <__aeabi_ui2d>
 80017c4:	4604      	mov	r4, r0
 80017c6:	460d      	mov	r5, r1
 80017c8:	6938      	ldr	r0, [r7, #16]
 80017ca:	f7fe fe73 	bl	80004b4 <__aeabi_ui2d>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	f04f 0000 	mov.w	r0, #0
 80017d6:	494a      	ldr	r1, [pc, #296]	; (8001900 <Read_Speed+0x180>)
 80017d8:	f7ff f810 	bl	80007fc <__aeabi_ddiv>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4620      	mov	r0, r4
 80017e2:	4629      	mov	r1, r5
 80017e4:	f7fe fee0 	bl	80005a8 <__aeabi_dmul>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f04f 0200 	mov.w	r2, #0
 80017f4:	4b43      	ldr	r3, [pc, #268]	; (8001904 <Read_Speed+0x184>)
 80017f6:	f7fe fed7 	bl	80005a8 <__aeabi_dmul>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4610      	mov	r0, r2
 8001800:	4619      	mov	r1, r3
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	4b40      	ldr	r3, [pc, #256]	; (8001908 <Read_Speed+0x188>)
 8001808:	f7fe fff8 	bl	80007fc <__aeabi_ddiv>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4610      	mov	r0, r2
 8001812:	4619      	mov	r1, r3
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	4b3c      	ldr	r3, [pc, #240]	; (800190c <Read_Speed+0x18c>)
 800181a:	f7fe ffef 	bl	80007fc <__aeabi_ddiv>
 800181e:	4602      	mov	r2, r0
 8001820:	460b      	mov	r3, r1
 8001822:	4610      	mov	r0, r2
 8001824:	4619      	mov	r1, r3
 8001826:	a334      	add	r3, pc, #208	; (adr r3, 80018f8 <Read_Speed+0x178>)
 8001828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800182c:	f7fe ffe6 	bl	80007fc <__aeabi_ddiv>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4610      	mov	r0, r2
 8001836:	4619      	mov	r1, r3
 8001838:	f7ff f8c8 	bl	80009cc <__aeabi_d2uiz>
 800183c:	4603      	mov	r3, r0
 800183e:	82fb      	strh	r3, [r7, #22]
 8001840:	e054      	b.n	80018ec <Read_Speed+0x16c>
	}
	else //overflow occurred
	{
		speed = (4294967295 - end_counter + start_counter)*(1000.0/period)*60.0/4/PPR/GEAR_RATIO;
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	2200      	movs	r2, #0
 8001846:	469a      	mov	sl, r3
 8001848:	4693      	mov	fp, r2
 800184a:	2300      	movs	r3, #0
 800184c:	f1da 34ff 	rsbs	r4, sl, #4294967295
 8001850:	eb63 050b 	sbc.w	r5, r3, fp
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2200      	movs	r2, #0
 8001858:	4698      	mov	r8, r3
 800185a:	4691      	mov	r9, r2
 800185c:	eb14 0308 	adds.w	r3, r4, r8
 8001860:	603b      	str	r3, [r7, #0]
 8001862:	eb45 0309 	adc.w	r3, r5, r9
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	e9d7 0100 	ldrd	r0, r1, [r7]
 800186c:	f7fe fe6e 	bl	800054c <__aeabi_l2d>
 8001870:	4604      	mov	r4, r0
 8001872:	460d      	mov	r5, r1
 8001874:	6938      	ldr	r0, [r7, #16]
 8001876:	f7fe fe1d 	bl	80004b4 <__aeabi_ui2d>
 800187a:	4602      	mov	r2, r0
 800187c:	460b      	mov	r3, r1
 800187e:	f04f 0000 	mov.w	r0, #0
 8001882:	491f      	ldr	r1, [pc, #124]	; (8001900 <Read_Speed+0x180>)
 8001884:	f7fe ffba 	bl	80007fc <__aeabi_ddiv>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4620      	mov	r0, r4
 800188e:	4629      	mov	r1, r5
 8001890:	f7fe fe8a 	bl	80005a8 <__aeabi_dmul>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	4b18      	ldr	r3, [pc, #96]	; (8001904 <Read_Speed+0x184>)
 80018a2:	f7fe fe81 	bl	80005a8 <__aeabi_dmul>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4610      	mov	r0, r2
 80018ac:	4619      	mov	r1, r3
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <Read_Speed+0x188>)
 80018b4:	f7fe ffa2 	bl	80007fc <__aeabi_ddiv>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4610      	mov	r0, r2
 80018be:	4619      	mov	r1, r3
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <Read_Speed+0x18c>)
 80018c6:	f7fe ff99 	bl	80007fc <__aeabi_ddiv>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4610      	mov	r0, r2
 80018d0:	4619      	mov	r1, r3
 80018d2:	a309      	add	r3, pc, #36	; (adr r3, 80018f8 <Read_Speed+0x178>)
 80018d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d8:	f7fe ff90 	bl	80007fc <__aeabi_ddiv>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	f7ff f872 	bl	80009cc <__aeabi_d2uiz>
 80018e8:	4603      	mov	r3, r0
 80018ea:	82fb      	strh	r3, [r7, #22]
	}
	return speed;
 80018ec:	8afb      	ldrh	r3, [r7, #22]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018f8:	9999999a 	.word	0x9999999a
 80018fc:	400d9999 	.word	0x400d9999
 8001900:	408f4000 	.word	0x408f4000
 8001904:	404e0000 	.word	0x404e0000
 8001908:	40100000 	.word	0x40100000
 800190c:	401c0000 	.word	0x401c0000

08001910 <Set_Speed>:

void Set_Speed(uint16_t goal) //TODO detect failure
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08e      	sub	sp, #56	; 0x38
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	80fb      	strh	r3, [r7, #6]
	float Kp = 0.03;
 800191a:	4b45      	ldr	r3, [pc, #276]	; (8001a30 <Set_Speed+0x120>)
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
	float Ki = 0.04;
 800191e:	4b45      	ldr	r3, [pc, #276]	; (8001a34 <Set_Speed+0x124>)
 8001920:	623b      	str	r3, [r7, #32]
	int period = 100;
 8001922:	2364      	movs	r3, #100	; 0x64
 8001924:	61fb      	str	r3, [r7, #28]
	int stable = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	637b      	str	r3, [r7, #52]	; 0x34
	int stable_threshold = 5;
 800192a:	2305      	movs	r3, #5
 800192c:	61bb      	str	r3, [r7, #24]
	int failures = 0; //to check if it never converges
 800192e:	2300      	movs	r3, #0
 8001930:	633b      	str	r3, [r7, #48]	; 0x30
	int failure_threshold = 50;
 8001932:	2332      	movs	r3, #50	; 0x32
 8001934:	617b      	str	r3, [r7, #20]
	int I = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c

	APP_DBG_MSG("\r\n\r** in Set_Speed at start \n");
 800193a:	483f      	ldr	r0, [pc, #252]	; (8001a38 <Set_Speed+0x128>)
 800193c:	f009 f9b8 	bl	800acb0 <DbgTraceGetFileName>
 8001940:	4601      	mov	r1, r0
 8001942:	238d      	movs	r3, #141	; 0x8d
 8001944:	4a3d      	ldr	r2, [pc, #244]	; (8001a3c <Set_Speed+0x12c>)
 8001946:	483e      	ldr	r0, [pc, #248]	; (8001a40 <Set_Speed+0x130>)
 8001948:	f00c f8a2 	bl	800da90 <iprintf>
 800194c:	483d      	ldr	r0, [pc, #244]	; (8001a44 <Set_Speed+0x134>)
 800194e:	f00c f90d 	bl	800db6c <puts>

	do
	{
		uint16_t current = Get_Speed();
 8001952:	f7ff feeb 	bl	800172c <Get_Speed>
 8001956:	4603      	mov	r3, r0
 8001958:	827b      	strh	r3, [r7, #18]

		APP_DBG_MSG("\r\n\r** Current Speed: %d \n", current);
 800195a:	4837      	ldr	r0, [pc, #220]	; (8001a38 <Set_Speed+0x128>)
 800195c:	f009 f9a8 	bl	800acb0 <DbgTraceGetFileName>
 8001960:	4601      	mov	r1, r0
 8001962:	2393      	movs	r3, #147	; 0x93
 8001964:	4a35      	ldr	r2, [pc, #212]	; (8001a3c <Set_Speed+0x12c>)
 8001966:	4836      	ldr	r0, [pc, #216]	; (8001a40 <Set_Speed+0x130>)
 8001968:	f00c f892 	bl	800da90 <iprintf>
 800196c:	8a7b      	ldrh	r3, [r7, #18]
 800196e:	4619      	mov	r1, r3
 8001970:	4835      	ldr	r0, [pc, #212]	; (8001a48 <Set_Speed+0x138>)
 8001972:	f00c f88d 	bl	800da90 <iprintf>

		  //char Test[50];
		  //int size = sprintf(Test, "cur speed: %d\r\nfailures: %d\r\n", current, failures);
		  //UART_Transmit(Test);

		int error = goal - current;
 8001976:	88fa      	ldrh	r2, [r7, #6]
 8001978:	8a7b      	ldrh	r3, [r7, #18]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	60fb      	str	r3, [r7, #12]

		int P = error*Kp;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	ee07 3a90 	vmov	s15, r3
 8001984:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001988:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800198c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001994:	ee17 3a90 	vmov	r3, s15
 8001998:	60bb      	str	r3, [r7, #8]
		I = I + error*Ki;
 800199a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800199c:	ee07 3a90 	vmov	s15, r3
 80019a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	ee07 3a90 	vmov	s15, r3
 80019aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80019b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019be:	ee17 3a90 	vmov	r3, s15
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
		int duty = P + I;
 80019c4:	68ba      	ldr	r2, [r7, #8]
 80019c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c8:	4413      	add	r3, r2
 80019ca:	62bb      	str	r3, [r7, #40]	; 0x28
		if (duty < 0)
 80019cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	da02      	bge.n	80019d8 <Set_Speed+0xc8>
		{
			duty = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80019d6:	e004      	b.n	80019e2 <Set_Speed+0xd2>
		}
		else if (duty > 100)
 80019d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019da:	2b64      	cmp	r3, #100	; 0x64
 80019dc:	dd01      	ble.n	80019e2 <Set_Speed+0xd2>
		{
			duty = 100;
 80019de:	2364      	movs	r3, #100	; 0x64
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		Update_PWM(duty);
 80019e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 f831 	bl	8001a4c <Update_PWM>
		HAL_Delay(period);
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fe13 	bl	8001618 <HAL_Delay>
		if (error < 10 && error > -10)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2b09      	cmp	r3, #9
 80019f6:	dc07      	bgt.n	8001a08 <Set_Speed+0xf8>
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f113 0f09 	cmn.w	r3, #9
 80019fe:	db03      	blt.n	8001a08 <Set_Speed+0xf8>
		{
			stable++;
 8001a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a02:	3301      	adds	r3, #1
 8001a04:	637b      	str	r3, [r7, #52]	; 0x34
 8001a06:	e001      	b.n	8001a0c <Set_Speed+0xfc>
		}
		else
		{
			stable = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	637b      	str	r3, [r7, #52]	; 0x34
		}
		failures++;
 8001a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a0e:	3301      	adds	r3, #1
 8001a10:	633b      	str	r3, [r7, #48]	; 0x30

	} while(stable < stable_threshold && failures < failure_threshold);
 8001a12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	da03      	bge.n	8001a22 <Set_Speed+0x112>
 8001a1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	db97      	blt.n	8001952 <Set_Speed+0x42>
	Motor_Done_Complete();
 8001a22:	f000 f845 	bl	8001ab0 <Motor_Done_Complete>
}
 8001a26:	bf00      	nop
 8001a28:	3738      	adds	r7, #56	; 0x38
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	3cf5c28f 	.word	0x3cf5c28f
 8001a34:	3d23d70a 	.word	0x3d23d70a
 8001a38:	0800ecb0 	.word	0x0800ecb0
 8001a3c:	0800ff90 	.word	0x0800ff90
 8001a40:	0800eccc 	.word	0x0800eccc
 8001a44:	0800ece0 	.word	0x0800ece0
 8001a48:	0800ed00 	.word	0x0800ed00

08001a4c <Update_PWM>:

void Update_PWM(uint32_t duty)
{
 8001a4c:	b5b0      	push	{r4, r5, r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	//APP_DBG_MSG("\r\n\r** in Update_PWM, duty: %lu\n", duty);
	uint32_t CCR = (TIM1->ARR)*(duty/100.0);
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <Update_PWM+0x50>)
 8001a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fd2b 	bl	80004b4 <__aeabi_ui2d>
 8001a5e:	4604      	mov	r4, r0
 8001a60:	460d      	mov	r5, r1
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7fe fd26 	bl	80004b4 <__aeabi_ui2d>
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <Update_PWM+0x54>)
 8001a6e:	f7fe fec5 	bl	80007fc <__aeabi_ddiv>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4620      	mov	r0, r4
 8001a78:	4629      	mov	r1, r5
 8001a7a:	f7fe fd95 	bl	80005a8 <__aeabi_dmul>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4610      	mov	r0, r2
 8001a84:	4619      	mov	r1, r3
 8001a86:	f7fe ffa1 	bl	80009cc <__aeabi_d2uiz>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	60fb      	str	r3, [r7, #12]
	//APP_DBG_MSG("\r\n\r** in Update_PWM, CCR: %lu\n", CCR);
	Set_CCR(CCR);
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f001 fa38 	bl	8002f04 <Set_CCR>
}
 8001a94:	bf00      	nop
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a9c:	40012c00 	.word	0x40012c00
 8001aa0:	40590000 	.word	0x40590000

08001aa4 <Motor_Stopped_Complete>:

void Motor_Stopped_Complete()
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
	APP_BLE_Key_Motor_Stopped_Action();
 8001aa8:	f00a fe06 	bl	800c6b8 <APP_BLE_Key_Motor_Stopped_Action>
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <Motor_Done_Complete>:
{
	APP_BLE_Key_Motor_Pending_Action();
}

void Motor_Done_Complete()
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
	APP_BLE_Key_Motor_Done_Action();
 8001ab4:	f00a fe06 	bl	800c6c4 <APP_BLE_Key_Motor_Done_Action>
}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}

08001abc <Red_On>:

void Red_On()
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	2102      	movs	r1, #2
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <Red_On+0x14>)
 8001ac6:	f002 fcc5 	bl	8004454 <HAL_GPIO_WritePin>
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	48000400 	.word	0x48000400

08001ad4 <Red_Off>:

void Red_Off()
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2102      	movs	r1, #2
 8001adc:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <Red_Off+0x14>)
 8001ade:	f002 fcb9 	bl	8004454 <HAL_GPIO_WritePin>
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	48000400 	.word	0x48000400

08001aec <Green_On>:

void Green_On()
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001af0:	2201      	movs	r2, #1
 8001af2:	2101      	movs	r1, #1
 8001af4:	4802      	ldr	r0, [pc, #8]	; (8001b00 <Green_On+0x14>)
 8001af6:	f002 fcad 	bl	8004454 <HAL_GPIO_WritePin>
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	48000400 	.word	0x48000400

08001b04 <Green_Off>:

void Green_Off()
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	4802      	ldr	r0, [pc, #8]	; (8001b18 <Green_Off+0x14>)
 8001b0e:	f002 fca1 	bl	8004454 <HAL_GPIO_WritePin>
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	48000400 	.word	0x48000400

08001b1c <Blue_On>:

void Blue_On()
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001b20:	2201      	movs	r2, #1
 8001b22:	2120      	movs	r1, #32
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <Blue_On+0x14>)
 8001b26:	f002 fc95 	bl	8004454 <HAL_GPIO_WritePin>
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	48000400 	.word	0x48000400

08001b34 <Blue_Off>:

void Blue_Off()
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2120      	movs	r1, #32
 8001b3c:	4802      	ldr	r0, [pc, #8]	; (8001b48 <Blue_Off+0x14>)
 8001b3e:	f002 fc89 	bl	8004454 <HAL_GPIO_WritePin>
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	48000400 	.word	0x48000400

08001b4c <LL_EXTI_EnableIT_0_31>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <LL_EXTI_EnableIT_0_31+0x24>)
 8001b56:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001b5a:	4905      	ldr	r1, [pc, #20]	; (8001b70 <LL_EXTI_EnableIT_0_31+0x24>)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	58000800 	.word	0x58000800

08001b74 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4904      	ldr	r1, [pc, #16]	; (8001b94 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	600b      	str	r3, [r1, #0]

}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	58000800 	.word	0x58000800

08001b98 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001b9e:	4b0d      	ldr	r3, [pc, #52]	; (8001bd4 <ReadRtcSsrValue+0x3c>)
 8001ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <ReadRtcSsrValue+0x3c>)
 8001ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001bae:	e005      	b.n	8001bbc <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001bb4:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <ReadRtcSsrValue+0x3c>)
 8001bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d1f5      	bne.n	8001bb0 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001bc4:	683b      	ldr	r3, [r7, #0]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	40002800 	.word	0x40002800

08001bd8 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	460a      	mov	r2, r1
 8001be2:	71fb      	strb	r3, [r7, #7]
 8001be4:	4613      	mov	r3, r2
 8001be6:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001be8:	79ba      	ldrb	r2, [r7, #6]
 8001bea:	491d      	ldr	r1, [pc, #116]	; (8001c60 <LinkTimerAfter+0x88>)
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	440b      	add	r3, r1
 8001bf6:	3315      	adds	r3, #21
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d009      	beq.n	8001c16 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001c02:	7bfa      	ldrb	r2, [r7, #15]
 8001c04:	4916      	ldr	r1, [pc, #88]	; (8001c60 <LinkTimerAfter+0x88>)
 8001c06:	4613      	mov	r3, r2
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	4413      	add	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	440b      	add	r3, r1
 8001c10:	3314      	adds	r3, #20
 8001c12:	79fa      	ldrb	r2, [r7, #7]
 8001c14:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001c16:	79fa      	ldrb	r2, [r7, #7]
 8001c18:	4911      	ldr	r1, [pc, #68]	; (8001c60 <LinkTimerAfter+0x88>)
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4413      	add	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	440b      	add	r3, r1
 8001c24:	3315      	adds	r3, #21
 8001c26:	7bfa      	ldrb	r2, [r7, #15]
 8001c28:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001c2a:	79fa      	ldrb	r2, [r7, #7]
 8001c2c:	490c      	ldr	r1, [pc, #48]	; (8001c60 <LinkTimerAfter+0x88>)
 8001c2e:	4613      	mov	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	4413      	add	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	440b      	add	r3, r1
 8001c38:	3314      	adds	r3, #20
 8001c3a:	79ba      	ldrb	r2, [r7, #6]
 8001c3c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001c3e:	79ba      	ldrb	r2, [r7, #6]
 8001c40:	4907      	ldr	r1, [pc, #28]	; (8001c60 <LinkTimerAfter+0x88>)
 8001c42:	4613      	mov	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	4413      	add	r3, r2
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	440b      	add	r3, r1
 8001c4c:	3315      	adds	r3, #21
 8001c4e:	79fa      	ldrb	r2, [r7, #7]
 8001c50:	701a      	strb	r2, [r3, #0]

  return;
 8001c52:	bf00      	nop
}
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	200000fc 	.word	0x200000fc

08001c64 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	460a      	mov	r2, r1
 8001c6e:	71fb      	strb	r3, [r7, #7]
 8001c70:	4613      	mov	r3, r2
 8001c72:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001c74:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <LinkTimerBefore+0xb8>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	79ba      	ldrb	r2, [r7, #6]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d032      	beq.n	8001ce6 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001c80:	79ba      	ldrb	r2, [r7, #6]
 8001c82:	4927      	ldr	r1, [pc, #156]	; (8001d20 <LinkTimerBefore+0xbc>)
 8001c84:	4613      	mov	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	440b      	add	r3, r1
 8001c8e:	3314      	adds	r3, #20
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001c94:	7bfa      	ldrb	r2, [r7, #15]
 8001c96:	4922      	ldr	r1, [pc, #136]	; (8001d20 <LinkTimerBefore+0xbc>)
 8001c98:	4613      	mov	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4413      	add	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	440b      	add	r3, r1
 8001ca2:	3315      	adds	r3, #21
 8001ca4:	79fa      	ldrb	r2, [r7, #7]
 8001ca6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001ca8:	79fa      	ldrb	r2, [r7, #7]
 8001caa:	491d      	ldr	r1, [pc, #116]	; (8001d20 <LinkTimerBefore+0xbc>)
 8001cac:	4613      	mov	r3, r2
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4413      	add	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	440b      	add	r3, r1
 8001cb6:	3315      	adds	r3, #21
 8001cb8:	79ba      	ldrb	r2, [r7, #6]
 8001cba:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001cbc:	79fa      	ldrb	r2, [r7, #7]
 8001cbe:	4918      	ldr	r1, [pc, #96]	; (8001d20 <LinkTimerBefore+0xbc>)
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	440b      	add	r3, r1
 8001cca:	3314      	adds	r3, #20
 8001ccc:	7bfa      	ldrb	r2, [r7, #15]
 8001cce:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001cd0:	79ba      	ldrb	r2, [r7, #6]
 8001cd2:	4913      	ldr	r1, [pc, #76]	; (8001d20 <LinkTimerBefore+0xbc>)
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4413      	add	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	440b      	add	r3, r1
 8001cde:	3314      	adds	r3, #20
 8001ce0:	79fa      	ldrb	r2, [r7, #7]
 8001ce2:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001ce4:	e014      	b.n	8001d10 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001ce6:	79fa      	ldrb	r2, [r7, #7]
 8001ce8:	490d      	ldr	r1, [pc, #52]	; (8001d20 <LinkTimerBefore+0xbc>)
 8001cea:	4613      	mov	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3315      	adds	r3, #21
 8001cf6:	79ba      	ldrb	r2, [r7, #6]
 8001cf8:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001cfa:	79ba      	ldrb	r2, [r7, #6]
 8001cfc:	4908      	ldr	r1, [pc, #32]	; (8001d20 <LinkTimerBefore+0xbc>)
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	440b      	add	r3, r1
 8001d08:	3314      	adds	r3, #20
 8001d0a:	79fa      	ldrb	r2, [r7, #7]
 8001d0c:	701a      	strb	r2, [r3, #0]
  return;
 8001d0e:	bf00      	nop
}
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	2000018c 	.word	0x2000018c
 8001d20:	200000fc 	.word	0x200000fc

08001d24 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d2e:	4b4e      	ldr	r3, [pc, #312]	; (8001e68 <linkTimer+0x144>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b06      	cmp	r3, #6
 8001d36:	d118      	bne.n	8001d6a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001d38:	4b4b      	ldr	r3, [pc, #300]	; (8001e68 <linkTimer+0x144>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4b4b      	ldr	r3, [pc, #300]	; (8001e6c <linkTimer+0x148>)
 8001d40:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001d42:	4a49      	ldr	r2, [pc, #292]	; (8001e68 <linkTimer+0x144>)
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001d48:	79fa      	ldrb	r2, [r7, #7]
 8001d4a:	4949      	ldr	r1, [pc, #292]	; (8001e70 <linkTimer+0x14c>)
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4413      	add	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	440b      	add	r3, r1
 8001d56:	3315      	adds	r3, #21
 8001d58:	2206      	movs	r2, #6
 8001d5a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001d5c:	4b45      	ldr	r3, [pc, #276]	; (8001e74 <linkTimer+0x150>)
 8001d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d62:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	81fb      	strh	r3, [r7, #14]
 8001d68:	e078      	b.n	8001e5c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001d6a:	f000 f909 	bl	8001f80 <ReturnTimeElapsed>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001d72:	79fa      	ldrb	r2, [r7, #7]
 8001d74:	493e      	ldr	r1, [pc, #248]	; (8001e70 <linkTimer+0x14c>)
 8001d76:	4613      	mov	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	440b      	add	r3, r1
 8001d80:	3308      	adds	r3, #8
 8001d82:	6819      	ldr	r1, [r3, #0]
 8001d84:	89fb      	ldrh	r3, [r7, #14]
 8001d86:	79fa      	ldrb	r2, [r7, #7]
 8001d88:	4419      	add	r1, r3
 8001d8a:	4839      	ldr	r0, [pc, #228]	; (8001e70 <linkTimer+0x14c>)
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4403      	add	r3, r0
 8001d96:	3308      	adds	r3, #8
 8001d98:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001d9a:	79fa      	ldrb	r2, [r7, #7]
 8001d9c:	4934      	ldr	r1, [pc, #208]	; (8001e70 <linkTimer+0x14c>)
 8001d9e:	4613      	mov	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4413      	add	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	440b      	add	r3, r1
 8001da8:	3308      	adds	r3, #8
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001dae:	4b2e      	ldr	r3, [pc, #184]	; (8001e68 <linkTimer+0x144>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	4619      	mov	r1, r3
 8001db6:	4a2e      	ldr	r2, [pc, #184]	; (8001e70 <linkTimer+0x14c>)
 8001db8:	460b      	mov	r3, r1
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	440b      	add	r3, r1
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3308      	adds	r3, #8
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d337      	bcc.n	8001e3c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001dcc:	4b26      	ldr	r3, [pc, #152]	; (8001e68 <linkTimer+0x144>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001dd2:	7b7a      	ldrb	r2, [r7, #13]
 8001dd4:	4926      	ldr	r1, [pc, #152]	; (8001e70 <linkTimer+0x14c>)
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4413      	add	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	440b      	add	r3, r1
 8001de0:	3315      	adds	r3, #21
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001de6:	e013      	b.n	8001e10 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001de8:	7b7a      	ldrb	r2, [r7, #13]
 8001dea:	4921      	ldr	r1, [pc, #132]	; (8001e70 <linkTimer+0x14c>)
 8001dec:	4613      	mov	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4413      	add	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	440b      	add	r3, r1
 8001df6:	3315      	adds	r3, #21
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001dfc:	7b7a      	ldrb	r2, [r7, #13]
 8001dfe:	491c      	ldr	r1, [pc, #112]	; (8001e70 <linkTimer+0x14c>)
 8001e00:	4613      	mov	r3, r2
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	4413      	add	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	440b      	add	r3, r1
 8001e0a:	3315      	adds	r3, #21
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001e10:	7b3b      	ldrb	r3, [r7, #12]
 8001e12:	2b06      	cmp	r3, #6
 8001e14:	d00b      	beq.n	8001e2e <linkTimer+0x10a>
 8001e16:	7b3a      	ldrb	r2, [r7, #12]
 8001e18:	4915      	ldr	r1, [pc, #84]	; (8001e70 <linkTimer+0x14c>)
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	4413      	add	r3, r2
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	440b      	add	r3, r1
 8001e24:	3308      	adds	r3, #8
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d2dc      	bcs.n	8001de8 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001e2e:	7b7a      	ldrb	r2, [r7, #13]
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	4611      	mov	r1, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fecf 	bl	8001bd8 <LinkTimerAfter>
 8001e3a:	e00f      	b.n	8001e5c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001e3c:	4b0a      	ldr	r3, [pc, #40]	; (8001e68 <linkTimer+0x144>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	b2da      	uxtb	r2, r3
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	4611      	mov	r1, r2
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff ff0c 	bl	8001c64 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <linkTimer+0x144>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <linkTimer+0x148>)
 8001e54:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001e56:	4a04      	ldr	r2, [pc, #16]	; (8001e68 <linkTimer+0x144>)
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001e5c:	89fb      	ldrh	r3, [r7, #14]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	2000018c 	.word	0x2000018c
 8001e6c:	2000018d 	.word	0x2000018d
 8001e70:	200000fc 	.word	0x200000fc
 8001e74:	20000190 	.word	0x20000190

08001e78 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	460a      	mov	r2, r1
 8001e82:	71fb      	strb	r3, [r7, #7]
 8001e84:	4613      	mov	r3, r2
 8001e86:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001e88:	4b39      	ldr	r3, [pc, #228]	; (8001f70 <UnlinkTimer+0xf8>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	79fa      	ldrb	r2, [r7, #7]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d111      	bne.n	8001eb8 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001e94:	4b36      	ldr	r3, [pc, #216]	; (8001f70 <UnlinkTimer+0xf8>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <UnlinkTimer+0xfc>)
 8001e9c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001e9e:	79fa      	ldrb	r2, [r7, #7]
 8001ea0:	4935      	ldr	r1, [pc, #212]	; (8001f78 <UnlinkTimer+0x100>)
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4413      	add	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	440b      	add	r3, r1
 8001eac:	3315      	adds	r3, #21
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	4b2f      	ldr	r3, [pc, #188]	; (8001f70 <UnlinkTimer+0xf8>)
 8001eb4:	701a      	strb	r2, [r3, #0]
 8001eb6:	e03e      	b.n	8001f36 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001eb8:	79fa      	ldrb	r2, [r7, #7]
 8001eba:	492f      	ldr	r1, [pc, #188]	; (8001f78 <UnlinkTimer+0x100>)
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4413      	add	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	440b      	add	r3, r1
 8001ec6:	3314      	adds	r3, #20
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001ecc:	79fa      	ldrb	r2, [r7, #7]
 8001ece:	492a      	ldr	r1, [pc, #168]	; (8001f78 <UnlinkTimer+0x100>)
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	4413      	add	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	440b      	add	r3, r1
 8001eda:	3315      	adds	r3, #21
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001ee0:	79f9      	ldrb	r1, [r7, #7]
 8001ee2:	7bfa      	ldrb	r2, [r7, #15]
 8001ee4:	4824      	ldr	r0, [pc, #144]	; (8001f78 <UnlinkTimer+0x100>)
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	440b      	add	r3, r1
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4403      	add	r3, r0
 8001ef0:	3315      	adds	r3, #21
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	b2d8      	uxtb	r0, r3
 8001ef6:	4920      	ldr	r1, [pc, #128]	; (8001f78 <UnlinkTimer+0x100>)
 8001ef8:	4613      	mov	r3, r2
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4413      	add	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	440b      	add	r3, r1
 8001f02:	3315      	adds	r3, #21
 8001f04:	4602      	mov	r2, r0
 8001f06:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f08:	7bbb      	ldrb	r3, [r7, #14]
 8001f0a:	2b06      	cmp	r3, #6
 8001f0c:	d013      	beq.n	8001f36 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001f0e:	79f9      	ldrb	r1, [r7, #7]
 8001f10:	7bba      	ldrb	r2, [r7, #14]
 8001f12:	4819      	ldr	r0, [pc, #100]	; (8001f78 <UnlinkTimer+0x100>)
 8001f14:	460b      	mov	r3, r1
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	440b      	add	r3, r1
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4403      	add	r3, r0
 8001f1e:	3314      	adds	r3, #20
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	b2d8      	uxtb	r0, r3
 8001f24:	4914      	ldr	r1, [pc, #80]	; (8001f78 <UnlinkTimer+0x100>)
 8001f26:	4613      	mov	r3, r2
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4413      	add	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	440b      	add	r3, r1
 8001f30:	3314      	adds	r3, #20
 8001f32:	4602      	mov	r2, r0
 8001f34:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001f36:	79fa      	ldrb	r2, [r7, #7]
 8001f38:	490f      	ldr	r1, [pc, #60]	; (8001f78 <UnlinkTimer+0x100>)
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4413      	add	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	440b      	add	r3, r1
 8001f44:	330c      	adds	r3, #12
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <UnlinkTimer+0xf8>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b06      	cmp	r3, #6
 8001f52:	d107      	bne.n	8001f64 <UnlinkTimer+0xec>
 8001f54:	79bb      	ldrb	r3, [r7, #6]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d104      	bne.n	8001f64 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001f5a:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <UnlinkTimer+0x104>)
 8001f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f60:	601a      	str	r2, [r3, #0]
  }

  return;
 8001f62:	bf00      	nop
 8001f64:	bf00      	nop
}
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	2000018c 	.word	0x2000018c
 8001f74:	2000018d 	.word	0x2000018d
 8001f78:	200000fc 	.word	0x200000fc
 8001f7c:	20000190 	.word	0x20000190

08001f80 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001f86:	4b1a      	ldr	r3, [pc, #104]	; (8001ff0 <ReturnTimeElapsed+0x70>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8e:	d026      	beq.n	8001fde <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001f90:	f7ff fe02 	bl	8001b98 <ReadRtcSsrValue>
 8001f94:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001f96:	4b16      	ldr	r3, [pc, #88]	; (8001ff0 <ReturnTimeElapsed+0x70>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d805      	bhi.n	8001fac <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001fa0:	4b13      	ldr	r3, [pc, #76]	; (8001ff0 <ReturnTimeElapsed+0x70>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	607b      	str	r3, [r7, #4]
 8001faa:	e00a      	b.n	8001fc2 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001fac:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <ReturnTimeElapsed+0x74>)
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <ReturnTimeElapsed+0x70>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <ReturnTimeElapsed+0x78>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	fb02 f303 	mul.w	r3, r2, r3
 8001fce:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001fd0:	4b0a      	ldr	r3, [pc, #40]	; (8001ffc <ReturnTimeElapsed+0x7c>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	40d3      	lsrs	r3, r2
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	e001      	b.n	8001fe2 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	b29b      	uxth	r3, r3
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000190 	.word	0x20000190
 8001ff4:	20000198 	.word	0x20000198
 8001ff8:	20000196 	.word	0x20000196
 8001ffc:	20000195 	.word	0x20000195

08002000 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d108      	bne.n	8002022 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002010:	f7ff fdc2 	bl	8001b98 <ReadRtcSsrValue>
 8002014:	4603      	mov	r3, r0
 8002016:	4a21      	ldr	r2, [pc, #132]	; (800209c <RestartWakeupCounter+0x9c>)
 8002018:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800201a:	2003      	movs	r0, #3
 800201c:	f001 fd5b 	bl	8003ad6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002020:	e039      	b.n	8002096 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d803      	bhi.n	8002030 <RestartWakeupCounter+0x30>
 8002028:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <RestartWakeupCounter+0xa0>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d002      	beq.n	8002036 <RestartWakeupCounter+0x36>
      Value -= 1;
 8002030:	88fb      	ldrh	r3, [r7, #6]
 8002032:	3b01      	subs	r3, #1
 8002034:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002036:	bf00      	nop
 8002038:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <RestartWakeupCounter+0xa4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f8      	beq.n	8002038 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002046:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <RestartWakeupCounter+0xa4>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <RestartWakeupCounter+0xa4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002056:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002058:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <RestartWakeupCounter+0xa8>)
 800205a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800205e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002060:	2003      	movs	r0, #3
 8002062:	f001 fd46 	bl	8003af2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002066:	4b11      	ldr	r3, [pc, #68]	; (80020ac <RestartWakeupCounter+0xac>)
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	0c1b      	lsrs	r3, r3, #16
 800206c:	041b      	lsls	r3, r3, #16
 800206e:	88fa      	ldrh	r2, [r7, #6]
 8002070:	490e      	ldr	r1, [pc, #56]	; (80020ac <RestartWakeupCounter+0xac>)
 8002072:	4313      	orrs	r3, r2
 8002074:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002076:	f7ff fd8f 	bl	8001b98 <ReadRtcSsrValue>
 800207a:	4603      	mov	r3, r0
 800207c:	4a07      	ldr	r2, [pc, #28]	; (800209c <RestartWakeupCounter+0x9c>)
 800207e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <RestartWakeupCounter+0xa4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <RestartWakeupCounter+0xa4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800208e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002090:	f3af 8000 	nop.w
  return ;
 8002094:	bf00      	nop
}
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20000190 	.word	0x20000190
 80020a0:	20000195 	.word	0x20000195
 80020a4:	200001dc 	.word	0x200001dc
 80020a8:	58000800 	.word	0x58000800
 80020ac:	40002800 	.word	0x40002800

080020b0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80020b6:	4b45      	ldr	r3, [pc, #276]	; (80021cc <RescheduleTimerList+0x11c>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c2:	d107      	bne.n	80020d4 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80020c4:	bf00      	nop
 80020c6:	4b42      	ldr	r3, [pc, #264]	; (80021d0 <RescheduleTimerList+0x120>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1f8      	bne.n	80020c6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80020d4:	4b3e      	ldr	r3, [pc, #248]	; (80021d0 <RescheduleTimerList+0x120>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	4b3d      	ldr	r3, [pc, #244]	; (80021d0 <RescheduleTimerList+0x120>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020e2:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80020e4:	4b3b      	ldr	r3, [pc, #236]	; (80021d4 <RescheduleTimerList+0x124>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	493a      	ldr	r1, [pc, #232]	; (80021d8 <RescheduleTimerList+0x128>)
 80020ee:	4613      	mov	r3, r2
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4413      	add	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	440b      	add	r3, r1
 80020f8:	3308      	adds	r3, #8
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80020fe:	f7ff ff3f 	bl	8001f80 <ReturnTimeElapsed>
 8002102:	4603      	mov	r3, r0
 8002104:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	429a      	cmp	r2, r3
 800210c:	d205      	bcs.n	800211a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002112:	4b32      	ldr	r3, [pc, #200]	; (80021dc <RescheduleTimerList+0x12c>)
 8002114:	2201      	movs	r2, #1
 8002116:	701a      	strb	r2, [r3, #0]
 8002118:	e04d      	b.n	80021b6 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	4a30      	ldr	r2, [pc, #192]	; (80021e0 <RescheduleTimerList+0x130>)
 800211e:	8812      	ldrh	r2, [r2, #0]
 8002120:	b292      	uxth	r2, r2
 8002122:	4413      	add	r3, r2
 8002124:	461a      	mov	r2, r3
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	4293      	cmp	r3, r2
 800212a:	d906      	bls.n	800213a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800212c:	4b2c      	ldr	r3, [pc, #176]	; (80021e0 <RescheduleTimerList+0x130>)
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002132:	4b2a      	ldr	r3, [pc, #168]	; (80021dc <RescheduleTimerList+0x12c>)
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
 8002138:	e03d      	b.n	80021b6 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	b29a      	uxth	r2, r3
 800213e:	88fb      	ldrh	r3, [r7, #6]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002144:	4b25      	ldr	r3, [pc, #148]	; (80021dc <RescheduleTimerList+0x12c>)
 8002146:	2201      	movs	r2, #1
 8002148:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800214a:	e034      	b.n	80021b6 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800214c:	7bfa      	ldrb	r2, [r7, #15]
 800214e:	4922      	ldr	r1, [pc, #136]	; (80021d8 <RescheduleTimerList+0x128>)
 8002150:	4613      	mov	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4413      	add	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	440b      	add	r3, r1
 800215a:	3308      	adds	r3, #8
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	429a      	cmp	r2, r3
 8002162:	d20a      	bcs.n	800217a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002164:	7bfa      	ldrb	r2, [r7, #15]
 8002166:	491c      	ldr	r1, [pc, #112]	; (80021d8 <RescheduleTimerList+0x128>)
 8002168:	4613      	mov	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	440b      	add	r3, r1
 8002172:	3308      	adds	r3, #8
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	e013      	b.n	80021a2 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800217a:	7bfa      	ldrb	r2, [r7, #15]
 800217c:	4916      	ldr	r1, [pc, #88]	; (80021d8 <RescheduleTimerList+0x128>)
 800217e:	4613      	mov	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4413      	add	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	440b      	add	r3, r1
 8002188:	3308      	adds	r3, #8
 800218a:	6819      	ldr	r1, [r3, #0]
 800218c:	88fb      	ldrh	r3, [r7, #6]
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	1ac9      	subs	r1, r1, r3
 8002192:	4811      	ldr	r0, [pc, #68]	; (80021d8 <RescheduleTimerList+0x128>)
 8002194:	4613      	mov	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	4403      	add	r3, r0
 800219e:	3308      	adds	r3, #8
 80021a0:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80021a2:	7bfa      	ldrb	r2, [r7, #15]
 80021a4:	490c      	ldr	r1, [pc, #48]	; (80021d8 <RescheduleTimerList+0x128>)
 80021a6:	4613      	mov	r3, r2
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	440b      	add	r3, r1
 80021b0:	3315      	adds	r3, #21
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	2b06      	cmp	r3, #6
 80021ba:	d1c7      	bne.n	800214c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80021bc:	89bb      	ldrh	r3, [r7, #12]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff ff1e 	bl	8002000 <RestartWakeupCounter>

  return ;
 80021c4:	bf00      	nop
}
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40002800 	.word	0x40002800
 80021d0:	200001dc 	.word	0x200001dc
 80021d4:	2000018c 	.word	0x2000018c
 80021d8:	200000fc 	.word	0x200000fc
 80021dc:	20000194 	.word	0x20000194
 80021e0:	2000019a 	.word	0x2000019a

080021e4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08a      	sub	sp, #40	; 0x28
 80021e8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021ea:	f3ef 8310 	mrs	r3, PRIMASK
 80021ee:	617b      	str	r3, [r7, #20]
  return(result);
 80021f0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80021f4:	b672      	cpsid	i
}
 80021f6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80021f8:	4b59      	ldr	r3, [pc, #356]	; (8002360 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	22ca      	movs	r2, #202	; 0xca
 80021fe:	625a      	str	r2, [r3, #36]	; 0x24
 8002200:	4b57      	ldr	r3, [pc, #348]	; (8002360 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2253      	movs	r2, #83	; 0x53
 8002206:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002208:	4b55      	ldr	r3, [pc, #340]	; (8002360 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	4b54      	ldr	r3, [pc, #336]	; (8002360 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002216:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002218:	4b52      	ldr	r3, [pc, #328]	; (8002364 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002220:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002224:	4950      	ldr	r1, [pc, #320]	; (8002368 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002226:	4613      	mov	r3, r2
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	4413      	add	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	440b      	add	r3, r1
 8002230:	330c      	adds	r3, #12
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d16e      	bne.n	8002318 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800223a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800223e:	494a      	ldr	r1, [pc, #296]	; (8002368 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002240:	4613      	mov	r3, r2
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4413      	add	r3, r2
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	440b      	add	r3, r1
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800224e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002252:	4945      	ldr	r1, [pc, #276]	; (8002368 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002254:	4613      	mov	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	440b      	add	r3, r1
 800225e:	3310      	adds	r3, #16
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002264:	4b41      	ldr	r3, [pc, #260]	; (800236c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d04c      	beq.n	8002308 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800226e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002272:	493d      	ldr	r1, [pc, #244]	; (8002368 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002274:	4613      	mov	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	440b      	add	r3, r1
 800227e:	330d      	adds	r3, #13
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b01      	cmp	r3, #1
 8002286:	d124      	bne.n	80022d2 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002288:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800228c:	2101      	movs	r1, #1
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fdf2 	bl	8001e78 <UnlinkTimer>
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	f383 8810 	msr	PRIMASK, r3
}
 800229e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80022a0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80022a4:	4930      	ldr	r1, [pc, #192]	; (8002368 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80022a6:	4613      	mov	r3, r2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	4413      	add	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	440b      	add	r3, r1
 80022b0:	3304      	adds	r3, #4
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022b8:	4611      	mov	r1, r2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f9b8 	bl	8002630 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80022c0:	4b27      	ldr	r3, [pc, #156]	; (8002360 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	22ca      	movs	r2, #202	; 0xca
 80022c6:	625a      	str	r2, [r3, #36]	; 0x24
 80022c8:	4b25      	ldr	r3, [pc, #148]	; (8002360 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2253      	movs	r2, #83	; 0x53
 80022ce:	625a      	str	r2, [r3, #36]	; 0x24
 80022d0:	e012      	b.n	80022f8 <HW_TS_RTC_Wakeup_Handler+0x114>
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f383 8810 	msr	PRIMASK, r3
}
 80022dc:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80022de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 f920 	bl	8002528 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80022e8:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	22ca      	movs	r2, #202	; 0xca
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24
 80022f0:	4b1b      	ldr	r3, [pc, #108]	; (8002360 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2253      	movs	r2, #83	; 0x53
 80022f6:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80022f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	4619      	mov	r1, r3
 8002300:	69b8      	ldr	r0, [r7, #24]
 8002302:	f000 fa1b 	bl	800273c <HW_TS_RTC_Int_AppNot>
 8002306:	e022      	b.n	800234e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002308:	f7ff fed2 	bl	80020b0 <RescheduleTimerList>
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f383 8810 	msr	PRIMASK, r3
}
 8002316:	e01a      	b.n	800234e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002318:	bf00      	nop
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f8      	beq.n	800231a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002328:	4b0d      	ldr	r3, [pc, #52]	; (8002360 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	b2da      	uxtb	r2, r3
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002338:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800233a:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800233c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f383 8810 	msr	PRIMASK, r3
}
 800234c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800234e:	4b04      	ldr	r3, [pc, #16]	; (8002360 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	22ff      	movs	r2, #255	; 0xff
 8002354:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8002356:	bf00      	nop
}
 8002358:	3728      	adds	r7, #40	; 0x28
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200001dc 	.word	0x200001dc
 8002364:	2000018c 	.word	0x2000018c
 8002368:	200000fc 	.word	0x200000fc
 800236c:	20000194 	.word	0x20000194
 8002370:	58000800 	.word	0x58000800

08002374 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	6039      	str	r1, [r7, #0]
 800237e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002380:	4b5e      	ldr	r3, [pc, #376]	; (80024fc <HW_TS_Init+0x188>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	22ca      	movs	r2, #202	; 0xca
 8002386:	625a      	str	r2, [r3, #36]	; 0x24
 8002388:	4b5c      	ldr	r3, [pc, #368]	; (80024fc <HW_TS_Init+0x188>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2253      	movs	r2, #83	; 0x53
 800238e:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002390:	4b5b      	ldr	r3, [pc, #364]	; (8002500 <HW_TS_Init+0x18c>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	4a5a      	ldr	r2, [pc, #360]	; (8002500 <HW_TS_Init+0x18c>)
 8002396:	f043 0320 	orr.w	r3, r3, #32
 800239a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800239c:	4b58      	ldr	r3, [pc, #352]	; (8002500 <HW_TS_Init+0x18c>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	f1c3 0304 	rsb	r3, r3, #4
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4b55      	ldr	r3, [pc, #340]	; (8002504 <HW_TS_Init+0x190>)
 80023b0:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80023b2:	4b53      	ldr	r3, [pc, #332]	; (8002500 <HW_TS_Init+0x18c>)
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80023ba:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80023be:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	fa92 f2a2 	rbit	r2, r2
 80023c6:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	2a00      	cmp	r2, #0
 80023d0:	d101      	bne.n	80023d6 <HW_TS_Init+0x62>
  {
    return 32U;
 80023d2:	2220      	movs	r2, #32
 80023d4:	e003      	b.n	80023de <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	fab2 f282 	clz	r2, r2
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	40d3      	lsrs	r3, r2
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	3301      	adds	r3, #1
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	4b48      	ldr	r3, [pc, #288]	; (8002508 <HW_TS_Init+0x194>)
 80023e8:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80023ea:	4b45      	ldr	r3, [pc, #276]	; (8002500 <HW_TS_Init+0x18c>)
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	3301      	adds	r3, #1
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	4b44      	ldr	r3, [pc, #272]	; (800250c <HW_TS_Init+0x198>)
 80023fc:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80023fe:	4b43      	ldr	r3, [pc, #268]	; (800250c <HW_TS_Init+0x198>)
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	3b01      	subs	r3, #1
 8002404:	4a40      	ldr	r2, [pc, #256]	; (8002508 <HW_TS_Init+0x194>)
 8002406:	7812      	ldrb	r2, [r2, #0]
 8002408:	fb02 f303 	mul.w	r3, r2, r3
 800240c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002410:	4a3c      	ldr	r2, [pc, #240]	; (8002504 <HW_TS_Init+0x190>)
 8002412:	7812      	ldrb	r2, [r2, #0]
 8002414:	40d3      	lsrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800241e:	4293      	cmp	r3, r2
 8002420:	d904      	bls.n	800242c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002422:	4b3b      	ldr	r3, [pc, #236]	; (8002510 <HW_TS_Init+0x19c>)
 8002424:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002428:	801a      	strh	r2, [r3, #0]
 800242a:	e003      	b.n	8002434 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	b29a      	uxth	r2, r3
 8002430:	4b37      	ldr	r3, [pc, #220]	; (8002510 <HW_TS_Init+0x19c>)
 8002432:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002434:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002438:	f7ff fb9c 	bl	8001b74 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800243c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002440:	f7ff fb84 	bl	8001b4c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002444:	79fb      	ldrb	r3, [r7, #7]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d13d      	bne.n	80024c6 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800244a:	4b32      	ldr	r3, [pc, #200]	; (8002514 <HW_TS_Init+0x1a0>)
 800244c:	2201      	movs	r2, #1
 800244e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002450:	4b31      	ldr	r3, [pc, #196]	; (8002518 <HW_TS_Init+0x1a4>)
 8002452:	f04f 32ff 	mov.w	r2, #4294967295
 8002456:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002458:	2300      	movs	r3, #0
 800245a:	77fb      	strb	r3, [r7, #31]
 800245c:	e00c      	b.n	8002478 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800245e:	7ffa      	ldrb	r2, [r7, #31]
 8002460:	492e      	ldr	r1, [pc, #184]	; (800251c <HW_TS_Init+0x1a8>)
 8002462:	4613      	mov	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	4413      	add	r3, r2
 8002468:	00db      	lsls	r3, r3, #3
 800246a:	440b      	add	r3, r1
 800246c:	330c      	adds	r3, #12
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002472:	7ffb      	ldrb	r3, [r7, #31]
 8002474:	3301      	adds	r3, #1
 8002476:	77fb      	strb	r3, [r7, #31]
 8002478:	7ffb      	ldrb	r3, [r7, #31]
 800247a:	2b05      	cmp	r3, #5
 800247c:	d9ef      	bls.n	800245e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800247e:	4b28      	ldr	r3, [pc, #160]	; (8002520 <HW_TS_Init+0x1ac>)
 8002480:	2206      	movs	r2, #6
 8002482:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002484:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <HW_TS_Init+0x188>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	4b1c      	ldr	r3, [pc, #112]	; (80024fc <HW_TS_Init+0x188>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002492:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002494:	4b19      	ldr	r3, [pc, #100]	; (80024fc <HW_TS_Init+0x188>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	b2da      	uxtb	r2, r3
 800249c:	4b17      	ldr	r3, [pc, #92]	; (80024fc <HW_TS_Init+0x188>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80024a4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80024a6:	4b1f      	ldr	r3, [pc, #124]	; (8002524 <HW_TS_Init+0x1b0>)
 80024a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80024ac:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80024ae:	2003      	movs	r0, #3
 80024b0:	f001 fb1f 	bl	8003af2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <HW_TS_Init+0x188>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	4b10      	ldr	r3, [pc, #64]	; (80024fc <HW_TS_Init+0x188>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	e009      	b.n	80024da <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80024c6:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <HW_TS_Init+0x188>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d002      	beq.n	80024da <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80024d4:	2003      	movs	r0, #3
 80024d6:	f001 fafe 	bl	8003ad6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80024da:	4b08      	ldr	r3, [pc, #32]	; (80024fc <HW_TS_Init+0x188>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	22ff      	movs	r2, #255	; 0xff
 80024e0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80024e2:	2200      	movs	r2, #0
 80024e4:	2103      	movs	r1, #3
 80024e6:	2003      	movs	r0, #3
 80024e8:	f001 fab3 	bl	8003a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80024ec:	2003      	movs	r0, #3
 80024ee:	f001 faca 	bl	8003a86 <HAL_NVIC_EnableIRQ>

  return;
 80024f2:	bf00      	nop
}
 80024f4:	3720      	adds	r7, #32
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	200001dc 	.word	0x200001dc
 8002500:	40002800 	.word	0x40002800
 8002504:	20000195 	.word	0x20000195
 8002508:	20000196 	.word	0x20000196
 800250c:	20000198 	.word	0x20000198
 8002510:	2000019a 	.word	0x2000019a
 8002514:	20000194 	.word	0x20000194
 8002518:	20000190 	.word	0x20000190
 800251c:	200000fc 	.word	0x200000fc
 8002520:	2000018c 	.word	0x2000018c
 8002524:	58000800 	.word	0x58000800

08002528 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002532:	f3ef 8310 	mrs	r3, PRIMASK
 8002536:	60fb      	str	r3, [r7, #12]
  return(result);
 8002538:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800253a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800253c:	b672      	cpsid	i
}
 800253e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002540:	2003      	movs	r0, #3
 8002542:	f001 faae 	bl	8003aa2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002546:	4b34      	ldr	r3, [pc, #208]	; (8002618 <HW_TS_Stop+0xf0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	22ca      	movs	r2, #202	; 0xca
 800254c:	625a      	str	r2, [r3, #36]	; 0x24
 800254e:	4b32      	ldr	r3, [pc, #200]	; (8002618 <HW_TS_Stop+0xf0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2253      	movs	r2, #83	; 0x53
 8002554:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002556:	79fa      	ldrb	r2, [r7, #7]
 8002558:	4930      	ldr	r1, [pc, #192]	; (800261c <HW_TS_Stop+0xf4>)
 800255a:	4613      	mov	r3, r2
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	4413      	add	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	440b      	add	r3, r1
 8002564:	330c      	adds	r3, #12
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d142      	bne.n	80025f4 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	2100      	movs	r1, #0
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff fc80 	bl	8001e78 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002578:	4b29      	ldr	r3, [pc, #164]	; (8002620 <HW_TS_Stop+0xf8>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800257e:	7cfb      	ldrb	r3, [r7, #19]
 8002580:	2b06      	cmp	r3, #6
 8002582:	d12f      	bne.n	80025e4 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002584:	4b27      	ldr	r3, [pc, #156]	; (8002624 <HW_TS_Stop+0xfc>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800258c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002590:	d107      	bne.n	80025a2 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002592:	bf00      	nop
 8002594:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HW_TS_Stop+0xf0>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f8      	bne.n	8002594 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80025a2:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <HW_TS_Stop+0xf0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <HW_TS_Stop+0xf0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80025b2:	bf00      	nop
 80025b4:	4b18      	ldr	r3, [pc, #96]	; (8002618 <HW_TS_Stop+0xf0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f8      	beq.n	80025b4 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80025c2:	4b15      	ldr	r3, [pc, #84]	; (8002618 <HW_TS_Stop+0xf0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	4b13      	ldr	r3, [pc, #76]	; (8002618 <HW_TS_Stop+0xf0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80025d2:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80025d4:	4b14      	ldr	r3, [pc, #80]	; (8002628 <HW_TS_Stop+0x100>)
 80025d6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80025da:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80025dc:	2003      	movs	r0, #3
 80025de:	f001 fa88 	bl	8003af2 <HAL_NVIC_ClearPendingIRQ>
 80025e2:	e007      	b.n	80025f4 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80025e4:	4b11      	ldr	r3, [pc, #68]	; (800262c <HW_TS_Stop+0x104>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	7cfa      	ldrb	r2, [r7, #19]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80025f0:	f7ff fd5e 	bl	80020b0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80025f4:	4b08      	ldr	r3, [pc, #32]	; (8002618 <HW_TS_Stop+0xf0>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	22ff      	movs	r2, #255	; 0xff
 80025fa:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80025fc:	2003      	movs	r0, #3
 80025fe:	f001 fa42 	bl	8003a86 <HAL_NVIC_EnableIRQ>
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	f383 8810 	msr	PRIMASK, r3
}
 800260c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800260e:	bf00      	nop
}
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	200001dc 	.word	0x200001dc
 800261c:	200000fc 	.word	0x200000fc
 8002620:	2000018c 	.word	0x2000018c
 8002624:	40002800 	.word	0x40002800
 8002628:	58000800 	.word	0x58000800
 800262c:	2000018d 	.word	0x2000018d

08002630 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	6039      	str	r1, [r7, #0]
 800263a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800263c:	79fa      	ldrb	r2, [r7, #7]
 800263e:	493b      	ldr	r1, [pc, #236]	; (800272c <HW_TS_Start+0xfc>)
 8002640:	4613      	mov	r3, r2
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	4413      	add	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	440b      	add	r3, r1
 800264a:	330c      	adds	r3, #12
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d103      	bne.n	800265c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff ff66 	bl	8002528 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800265c:	f3ef 8310 	mrs	r3, PRIMASK
 8002660:	60fb      	str	r3, [r7, #12]
  return(result);
 8002662:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002664:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002666:	b672      	cpsid	i
}
 8002668:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800266a:	2003      	movs	r0, #3
 800266c:	f001 fa19 	bl	8003aa2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002670:	4b2f      	ldr	r3, [pc, #188]	; (8002730 <HW_TS_Start+0x100>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	22ca      	movs	r2, #202	; 0xca
 8002676:	625a      	str	r2, [r3, #36]	; 0x24
 8002678:	4b2d      	ldr	r3, [pc, #180]	; (8002730 <HW_TS_Start+0x100>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2253      	movs	r2, #83	; 0x53
 800267e:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002680:	79fa      	ldrb	r2, [r7, #7]
 8002682:	492a      	ldr	r1, [pc, #168]	; (800272c <HW_TS_Start+0xfc>)
 8002684:	4613      	mov	r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4413      	add	r3, r2
 800268a:	00db      	lsls	r3, r3, #3
 800268c:	440b      	add	r3, r1
 800268e:	330c      	adds	r3, #12
 8002690:	2202      	movs	r2, #2
 8002692:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002694:	79fa      	ldrb	r2, [r7, #7]
 8002696:	4925      	ldr	r1, [pc, #148]	; (800272c <HW_TS_Start+0xfc>)
 8002698:	4613      	mov	r3, r2
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	4413      	add	r3, r2
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	440b      	add	r3, r1
 80026a2:	3308      	adds	r3, #8
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80026a8:	79fa      	ldrb	r2, [r7, #7]
 80026aa:	4920      	ldr	r1, [pc, #128]	; (800272c <HW_TS_Start+0xfc>)
 80026ac:	4613      	mov	r3, r2
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4413      	add	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	440b      	add	r3, r1
 80026b6:	3304      	adds	r3, #4
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fb30 	bl	8001d24 <linkTimer>
 80026c4:	4603      	mov	r3, r0
 80026c6:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80026c8:	4b1a      	ldr	r3, [pc, #104]	; (8002734 <HW_TS_Start+0x104>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80026ce:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <HW_TS_Start+0x108>)
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	7c7a      	ldrb	r2, [r7, #17]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d002      	beq.n	80026e0 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80026da:	f7ff fce9 	bl	80020b0 <RescheduleTimerList>
 80026de:	e013      	b.n	8002708 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80026e0:	79fa      	ldrb	r2, [r7, #7]
 80026e2:	4912      	ldr	r1, [pc, #72]	; (800272c <HW_TS_Start+0xfc>)
 80026e4:	4613      	mov	r3, r2
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	4413      	add	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	440b      	add	r3, r1
 80026ee:	3308      	adds	r3, #8
 80026f0:	6819      	ldr	r1, [r3, #0]
 80026f2:	8a7b      	ldrh	r3, [r7, #18]
 80026f4:	79fa      	ldrb	r2, [r7, #7]
 80026f6:	1ac9      	subs	r1, r1, r3
 80026f8:	480c      	ldr	r0, [pc, #48]	; (800272c <HW_TS_Start+0xfc>)
 80026fa:	4613      	mov	r3, r2
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	4413      	add	r3, r2
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4403      	add	r3, r0
 8002704:	3308      	adds	r3, #8
 8002706:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002708:	4b09      	ldr	r3, [pc, #36]	; (8002730 <HW_TS_Start+0x100>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	22ff      	movs	r2, #255	; 0xff
 800270e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002710:	2003      	movs	r0, #3
 8002712:	f001 f9b8 	bl	8003a86 <HAL_NVIC_EnableIRQ>
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	f383 8810 	msr	PRIMASK, r3
}
 8002720:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002722:	bf00      	nop
}
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	200000fc 	.word	0x200000fc
 8002730:	200001dc 	.word	0x200001dc
 8002734:	2000018c 	.word	0x2000018c
 8002738:	2000018d 	.word	0x2000018d

0800273c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	460b      	mov	r3, r1
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4798      	blx	r3

  return;
 800274e:	bf00      	nop
}
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	4603      	mov	r3, r0
 8002764:	73fb      	strb	r3, [r7, #15]
 8002766:	4613      	mov	r3, r2
 8002768:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800276e:	2300      	movs	r3, #0
 8002770:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10e      	bne.n	8002796 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8002778:	4a17      	ldr	r2, [pc, #92]	; (80027d8 <HW_UART_Transmit_DMA+0x80>)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 800277e:	4b17      	ldr	r3, [pc, #92]	; (80027dc <HW_UART_Transmit_DMA+0x84>)
 8002780:	4a17      	ldr	r2, [pc, #92]	; (80027e0 <HW_UART_Transmit_DMA+0x88>)
 8002782:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002784:	89bb      	ldrh	r3, [r7, #12]
 8002786:	461a      	mov	r2, r3
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	4814      	ldr	r0, [pc, #80]	; (80027dc <HW_UART_Transmit_DMA+0x84>)
 800278c:	f004 ffee 	bl	800776c <HAL_UART_Transmit_DMA>
 8002790:	4603      	mov	r3, r0
 8002792:	75fb      	strb	r3, [r7, #23]
            break;
 8002794:	e000      	b.n	8002798 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8002796:	bf00      	nop
    }

    switch (hal_status)
 8002798:	7dfb      	ldrb	r3, [r7, #23]
 800279a:	2b03      	cmp	r3, #3
 800279c:	d816      	bhi.n	80027cc <HW_UART_Transmit_DMA+0x74>
 800279e:	a201      	add	r2, pc, #4	; (adr r2, 80027a4 <HW_UART_Transmit_DMA+0x4c>)
 80027a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a4:	080027b5 	.word	0x080027b5
 80027a8:	080027bb 	.word	0x080027bb
 80027ac:	080027c1 	.word	0x080027c1
 80027b0:	080027c7 	.word	0x080027c7
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80027b4:	2300      	movs	r3, #0
 80027b6:	75bb      	strb	r3, [r7, #22]
            break;
 80027b8:	e009      	b.n	80027ce <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80027ba:	2301      	movs	r3, #1
 80027bc:	75bb      	strb	r3, [r7, #22]
            break;
 80027be:	e006      	b.n	80027ce <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80027c0:	2302      	movs	r3, #2
 80027c2:	75bb      	strb	r3, [r7, #22]
            break;
 80027c4:	e003      	b.n	80027ce <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80027c6:	2303      	movs	r3, #3
 80027c8:	75bb      	strb	r3, [r7, #22]
            break;
 80027ca:	e000      	b.n	80027ce <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 80027cc:	bf00      	nop
    }

    return hw_status;
 80027ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	2000019c 	.word	0x2000019c
 80027dc:	20000298 	.word	0x20000298
 80027e0:	40013800 	.word	0x40013800

080027e4 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <HAL_UART_TxCpltCallback+0x34>)
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d107      	bne.n	8002808 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <HAL_UART_TxCpltCallback+0x38>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_UART_TxCpltCallback+0x38>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4798      	blx	r3
            }
            break;
 8002806:	e001      	b.n	800280c <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002808:	bf00      	nop
 800280a:	e000      	b.n	800280e <HAL_UART_TxCpltCallback+0x2a>
            break;
 800280c:	bf00      	nop
    }

    return;
 800280e:	bf00      	nop
}
 8002810:	3708      	adds	r7, #8
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40013800 	.word	0x40013800
 800281c:	2000019c 	.word	0x2000019c

08002820 <LL_RCC_LSE_SetDriveCapability>:
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800282c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002830:	f023 0218 	bic.w	r2, r3, #24
 8002834:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4313      	orrs	r3, r2
 800283c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <LL_AHB1_GRP1_EnableClock>:
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002858:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800285a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4313      	orrs	r3, r2
 8002862:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002868:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4013      	ands	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002870:	68fb      	ldr	r3, [r7, #12]
}
 8002872:	bf00      	nop
 8002874:	3714      	adds	r7, #20
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <LL_AHB2_GRP1_EnableClock>:
{
 800287e:	b480      	push	{r7}
 8002880:	b085      	sub	sp, #20
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800288c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4313      	orrs	r3, r2
 8002894:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4013      	ands	r3, r2
 80028a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028a2:	68fb      	ldr	r3, [r7, #12]
}
 80028a4:	bf00      	nop
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028b4:	f000 fef4 	bl	80036a0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80028b8:	f7fe fc16 	bl	80010e8 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028bc:	f000 f818 	bl	80028f0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80028c0:	f000 f88c 	bl	80029dc <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80028c4:	f000 f8aa 	bl	8002a1c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028c8:	f000 fa84 	bl	8002dd4 <MX_GPIO_Init>
  MX_DMA_Init();
 80028cc:	f000 fa70 	bl	8002db0 <MX_DMA_Init>
  MX_RTC_Init();
 80028d0:	f000 f8c0 	bl	8002a54 <MX_RTC_Init>
  MX_USB_PCD_Init();
 80028d4:	f000 fa44 	bl	8002d60 <MX_USB_PCD_Init>
  MX_TIM1_Init();
 80028d8:	f000 f8f0 	bl	8002abc <MX_TIM1_Init>
  MX_TIM2_Init();
 80028dc:	f000 f99e 	bl	8002c1c <MX_TIM2_Init>
  MX_RF_Init();
 80028e0:	f000 f8b0 	bl	8002a44 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80028e4:	f7fe fc0e 	bl	8001104 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80028e8:	f7fe febb 	bl	8001662 <MX_APPE_Process>
 80028ec:	e7fc      	b.n	80028e8 <main+0x38>
	...

080028f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b09a      	sub	sp, #104	; 0x68
 80028f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028f6:	f107 0320 	add.w	r3, r7, #32
 80028fa:	2248      	movs	r2, #72	; 0x48
 80028fc:	2100      	movs	r1, #0
 80028fe:	4618      	mov	r0, r3
 8002900:	f00b fa14 	bl	800dd2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002904:	1d3b      	adds	r3, r7, #4
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	605a      	str	r2, [r3, #4]
 800290c:	609a      	str	r2, [r3, #8]
 800290e:	60da      	str	r2, [r3, #12]
 8002910:	611a      	str	r2, [r3, #16]
 8002912:	615a      	str	r2, [r3, #20]
 8002914:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8002916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002924:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8002926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f023 0303 	bic.w	r3, r3, #3
 8002930:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800293a:	f001 ff5d 	bl	80047f8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800293e:	2000      	movs	r0, #0
 8002940:	f7ff ff6e 	bl	8002820 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002944:	4b24      	ldr	r3, [pc, #144]	; (80029d8 <SystemClock_Config+0xe8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800294c:	4a22      	ldr	r2, [pc, #136]	; (80029d8 <SystemClock_Config+0xe8>)
 800294e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002952:	6013      	str	r3, [r2, #0]
 8002954:	4b20      	ldr	r3, [pc, #128]	; (80029d8 <SystemClock_Config+0xe8>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800295c:	603b      	str	r3, [r7, #0]
 800295e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8002960:	2327      	movs	r3, #39	; 0x27
 8002962:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002964:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800296a:	2301      	movs	r3, #1
 800296c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800296e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002974:	2301      	movs	r3, #1
 8002976:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002978:	2340      	movs	r3, #64	; 0x40
 800297a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800297c:	2300      	movs	r3, #0
 800297e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002980:	2360      	movs	r3, #96	; 0x60
 8002982:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002984:	2300      	movs	r3, #0
 8002986:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002988:	f107 0320 	add.w	r3, r7, #32
 800298c:	4618      	mov	r0, r3
 800298e:	f002 fac7 	bl	8004f20 <HAL_RCC_OscConfig>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8002998:	f000 fac4 	bl	8002f24 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800299c:	236f      	movs	r3, #111	; 0x6f
 800299e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80029a0:	2302      	movs	r3, #2
 80029a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029a8:	2300      	movs	r3, #0
 80029aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80029b4:	2300      	movs	r3, #0
 80029b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80029b8:	1d3b      	adds	r3, r7, #4
 80029ba:	2101      	movs	r1, #1
 80029bc:	4618      	mov	r0, r3
 80029be:	f002 fe23 	bl	8005608 <HAL_RCC_ClockConfig>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <SystemClock_Config+0xdc>
  {
    Error_Handler();
 80029c8:	f000 faac 	bl	8002f24 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80029cc:	f003 fbde 	bl	800618c <HAL_RCCEx_EnableMSIPLLMode>
}
 80029d0:	bf00      	nop
 80029d2:	3768      	adds	r7, #104	; 0x68
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	58000400 	.word	0x58000400

080029dc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b094      	sub	sp, #80	; 0x50
 80029e0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029e2:	463b      	mov	r3, r7
 80029e4:	2250      	movs	r2, #80	; 0x50
 80029e6:	2100      	movs	r1, #0
 80029e8:	4618      	mov	r0, r3
 80029ea:	f00b f99f 	bl	800dd2c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80029ee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80029f2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80029f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029f8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80029fa:	2302      	movs	r3, #2
 80029fc:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80029fe:	2310      	movs	r3, #16
 8002a00:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a02:	463b      	mov	r3, r7
 8002a04:	4618      	mov	r0, r3
 8002a06:	f003 fa4b 	bl	8005ea0 <HAL_RCCEx_PeriphCLKConfig>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002a10:	f000 fa88 	bl	8002f24 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002a14:	bf00      	nop
 8002a16:	3750      	adds	r7, #80	; 0x50
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002a20:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <MX_IPCC_Init+0x20>)
 8002a22:	4a07      	ldr	r2, [pc, #28]	; (8002a40 <MX_IPCC_Init+0x24>)
 8002a24:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002a26:	4805      	ldr	r0, [pc, #20]	; (8002a3c <MX_IPCC_Init+0x20>)
 8002a28:	f001 fd68 	bl	80044fc <HAL_IPCC_Init>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002a32:	f000 fa77 	bl	8002f24 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	200001a0 	.word	0x200001a0
 8002a40:	58000c00 	.word	0x58000c00

08002a44 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
	...

08002a54 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a58:	4b16      	ldr	r3, [pc, #88]	; (8002ab4 <MX_RTC_Init+0x60>)
 8002a5a:	4a17      	ldr	r2, [pc, #92]	; (8002ab8 <MX_RTC_Init+0x64>)
 8002a5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a5e:	4b15      	ldr	r3, [pc, #84]	; (8002ab4 <MX_RTC_Init+0x60>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002a64:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <MX_RTC_Init+0x60>)
 8002a66:	220f      	movs	r2, #15
 8002a68:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002a6a:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <MX_RTC_Init+0x60>)
 8002a6c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002a70:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a72:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <MX_RTC_Init+0x60>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002a78:	4b0e      	ldr	r3, [pc, #56]	; (8002ab4 <MX_RTC_Init+0x60>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002a7e:	4b0d      	ldr	r3, [pc, #52]	; (8002ab4 <MX_RTC_Init+0x60>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <MX_RTC_Init+0x60>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a8a:	480a      	ldr	r0, [pc, #40]	; (8002ab4 <MX_RTC_Init+0x60>)
 8002a8c:	f003 fc96 	bl	80063bc <HAL_RTC_Init>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002a96:	f000 fa45 	bl	8002f24 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	4805      	ldr	r0, [pc, #20]	; (8002ab4 <MX_RTC_Init+0x60>)
 8002aa0:	f003 fd8c 	bl	80065bc <HAL_RTCEx_SetWakeUpTimer_IT>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002aaa:	f000 fa3b 	bl	8002f24 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200001dc 	.word	0x200001dc
 8002ab8:	40002800 	.word	0x40002800

08002abc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b09c      	sub	sp, #112	; 0x70
 8002ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ac2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	605a      	str	r2, [r3, #4]
 8002acc:	609a      	str	r2, [r3, #8]
 8002ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ad0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	605a      	str	r2, [r3, #4]
 8002ada:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002adc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	611a      	str	r2, [r3, #16]
 8002aec:	615a      	str	r2, [r3, #20]
 8002aee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002af0:	1d3b      	adds	r3, r7, #4
 8002af2:	2234      	movs	r2, #52	; 0x34
 8002af4:	2100      	movs	r1, #0
 8002af6:	4618      	mov	r0, r3
 8002af8:	f00b f918 	bl	800dd2c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002afc:	4b45      	ldr	r3, [pc, #276]	; (8002c14 <MX_TIM1_Init+0x158>)
 8002afe:	4a46      	ldr	r2, [pc, #280]	; (8002c18 <MX_TIM1_Init+0x15c>)
 8002b00:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b02:	4b44      	ldr	r3, [pc, #272]	; (8002c14 <MX_TIM1_Init+0x158>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b08:	4b42      	ldr	r3, [pc, #264]	; (8002c14 <MX_TIM1_Init+0x158>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8002b0e:	4b41      	ldr	r3, [pc, #260]	; (8002c14 <MX_TIM1_Init+0x158>)
 8002b10:	22ff      	movs	r2, #255	; 0xff
 8002b12:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b14:	4b3f      	ldr	r3, [pc, #252]	; (8002c14 <MX_TIM1_Init+0x158>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b1a:	4b3e      	ldr	r3, [pc, #248]	; (8002c14 <MX_TIM1_Init+0x158>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002b20:	4b3c      	ldr	r3, [pc, #240]	; (8002c14 <MX_TIM1_Init+0x158>)
 8002b22:	2280      	movs	r2, #128	; 0x80
 8002b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b26:	483b      	ldr	r0, [pc, #236]	; (8002c14 <MX_TIM1_Init+0x158>)
 8002b28:	f003 fe04 	bl	8006734 <HAL_TIM_Base_Init>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002b32:	f000 f9f7 	bl	8002f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b3a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002b3c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002b40:	4619      	mov	r1, r3
 8002b42:	4834      	ldr	r0, [pc, #208]	; (8002c14 <MX_TIM1_Init+0x158>)
 8002b44:	f004 f868 	bl	8006c18 <HAL_TIM_ConfigClockSource>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002b4e:	f000 f9e9 	bl	8002f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002b52:	4830      	ldr	r0, [pc, #192]	; (8002c14 <MX_TIM1_Init+0x158>)
 8002b54:	f003 fe45 	bl	80067e2 <HAL_TIM_PWM_Init>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002b5e:	f000 f9e1 	bl	8002f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b62:	2300      	movs	r3, #0
 8002b64:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002b66:	2300      	movs	r3, #0
 8002b68:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b6e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b72:	4619      	mov	r1, r3
 8002b74:	4827      	ldr	r0, [pc, #156]	; (8002c14 <MX_TIM1_Init+0x158>)
 8002b76:	f004 fca3 	bl	80074c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8002b80:	f000 f9d0 	bl	8002f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b84:	2360      	movs	r3, #96	; 0x60
 8002b86:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002b90:	2300      	movs	r3, #0
 8002b92:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b94:	2300      	movs	r3, #0
 8002b96:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ba0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	481a      	ldr	r0, [pc, #104]	; (8002c14 <MX_TIM1_Init+0x158>)
 8002baa:	f003 ff21 	bl	80069f0 <HAL_TIM_PWM_ConfigChannel>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002bb4:	f000 f9b6 	bl	8002f24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002bcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bd0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002bde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002be2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002be4:	2300      	movs	r3, #0
 8002be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002be8:	2300      	movs	r3, #0
 8002bea:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002bec:	2300      	movs	r3, #0
 8002bee:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002bf0:	1d3b      	adds	r3, r7, #4
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4807      	ldr	r0, [pc, #28]	; (8002c14 <MX_TIM1_Init+0x158>)
 8002bf6:	f004 fcc3 	bl	8007580 <HAL_TIMEx_ConfigBreakDeadTime>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8002c00:	f000 f990 	bl	8002f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002c04:	4803      	ldr	r0, [pc, #12]	; (8002c14 <MX_TIM1_Init+0x158>)
 8002c06:	f000 faaf 	bl	8003168 <HAL_TIM_MspPostInit>

}
 8002c0a:	bf00      	nop
 8002c0c:	3770      	adds	r7, #112	; 0x70
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000200 	.word	0x20000200
 8002c18:	40012c00 	.word	0x40012c00

08002c1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08c      	sub	sp, #48	; 0x30
 8002c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c22:	f107 030c 	add.w	r3, r7, #12
 8002c26:	2224      	movs	r2, #36	; 0x24
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f00b f87e 	bl	800dd2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c30:	463b      	mov	r3, r7
 8002c32:	2200      	movs	r2, #0
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	605a      	str	r2, [r3, #4]
 8002c38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002c3a:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <MX_TIM2_Init+0xa4>)
 8002c3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002c42:	4b1f      	ldr	r3, [pc, #124]	; (8002cc0 <MX_TIM2_Init+0xa4>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c48:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <MX_TIM2_Init+0xa4>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002c4e:	4b1c      	ldr	r3, [pc, #112]	; (8002cc0 <MX_TIM2_Init+0xa4>)
 8002c50:	f04f 32ff 	mov.w	r2, #4294967295
 8002c54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c56:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <MX_TIM2_Init+0xa4>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c5c:	4b18      	ldr	r3, [pc, #96]	; (8002cc0 <MX_TIM2_Init+0xa4>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c62:	2303      	movs	r3, #3
 8002c64:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c66:	2300      	movs	r3, #0
 8002c68:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c76:	2300      	movs	r3, #0
 8002c78:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002c86:	f107 030c 	add.w	r3, r7, #12
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	480c      	ldr	r0, [pc, #48]	; (8002cc0 <MX_TIM2_Init+0xa4>)
 8002c8e:	f003 fe09 	bl	80068a4 <HAL_TIM_Encoder_Init>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8002c98:	f000 f944 	bl	8002f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ca4:	463b      	mov	r3, r7
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4805      	ldr	r0, [pc, #20]	; (8002cc0 <MX_TIM2_Init+0xa4>)
 8002caa:	f004 fc09 	bl	80074c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002cb4:	f000 f936 	bl	8002f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002cb8:	bf00      	nop
 8002cba:	3730      	adds	r7, #48	; 0x30
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	2000024c 	.word	0x2000024c

08002cc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002cc8:	4b23      	ldr	r3, [pc, #140]	; (8002d58 <MX_USART1_UART_Init+0x94>)
 8002cca:	4a24      	ldr	r2, [pc, #144]	; (8002d5c <MX_USART1_UART_Init+0x98>)
 8002ccc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002cce:	4b22      	ldr	r3, [pc, #136]	; (8002d58 <MX_USART1_UART_Init+0x94>)
 8002cd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002cd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cd6:	4b20      	ldr	r3, [pc, #128]	; (8002d58 <MX_USART1_UART_Init+0x94>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cdc:	4b1e      	ldr	r3, [pc, #120]	; (8002d58 <MX_USART1_UART_Init+0x94>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ce2:	4b1d      	ldr	r3, [pc, #116]	; (8002d58 <MX_USART1_UART_Init+0x94>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ce8:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <MX_USART1_UART_Init+0x94>)
 8002cea:	220c      	movs	r2, #12
 8002cec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cee:	4b1a      	ldr	r3, [pc, #104]	; (8002d58 <MX_USART1_UART_Init+0x94>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002cf4:	4b18      	ldr	r3, [pc, #96]	; (8002d58 <MX_USART1_UART_Init+0x94>)
 8002cf6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002cfa:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cfc:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <MX_USART1_UART_Init+0x94>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d02:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <MX_USART1_UART_Init+0x94>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d08:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <MX_USART1_UART_Init+0x94>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d0e:	4812      	ldr	r0, [pc, #72]	; (8002d58 <MX_USART1_UART_Init+0x94>)
 8002d10:	f004 fcdc 	bl	80076cc <HAL_UART_Init>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002d1a:	f000 f903 	bl	8002f24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d1e:	2100      	movs	r1, #0
 8002d20:	480d      	ldr	r0, [pc, #52]	; (8002d58 <MX_USART1_UART_Init+0x94>)
 8002d22:	f005 fea2 	bl	8008a6a <HAL_UARTEx_SetTxFifoThreshold>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002d2c:	f000 f8fa 	bl	8002f24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d30:	2100      	movs	r1, #0
 8002d32:	4809      	ldr	r0, [pc, #36]	; (8002d58 <MX_USART1_UART_Init+0x94>)
 8002d34:	f005 fed7 	bl	8008ae6 <HAL_UARTEx_SetRxFifoThreshold>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002d3e:	f000 f8f1 	bl	8002f24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d42:	4805      	ldr	r0, [pc, #20]	; (8002d58 <MX_USART1_UART_Init+0x94>)
 8002d44:	f005 fe58 	bl	80089f8 <HAL_UARTEx_DisableFifoMode>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002d4e:	f000 f8e9 	bl	8002f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d52:	bf00      	nop
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000298 	.word	0x20000298
 8002d5c:	40013800 	.word	0x40013800

08002d60 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002d64:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <MX_USB_PCD_Init+0x48>)
 8002d66:	4a11      	ldr	r2, [pc, #68]	; (8002dac <MX_USB_PCD_Init+0x4c>)
 8002d68:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002d6a:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <MX_USB_PCD_Init+0x48>)
 8002d6c:	2208      	movs	r2, #8
 8002d6e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002d70:	4b0d      	ldr	r3, [pc, #52]	; (8002da8 <MX_USB_PCD_Init+0x48>)
 8002d72:	2202      	movs	r2, #2
 8002d74:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002d76:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <MX_USB_PCD_Init+0x48>)
 8002d78:	2202      	movs	r2, #2
 8002d7a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002d7c:	4b0a      	ldr	r3, [pc, #40]	; (8002da8 <MX_USB_PCD_Init+0x48>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002d82:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <MX_USB_PCD_Init+0x48>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002d88:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <MX_USB_PCD_Init+0x48>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <MX_USB_PCD_Init+0x48>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002d94:	4804      	ldr	r0, [pc, #16]	; (8002da8 <MX_USB_PCD_Init+0x48>)
 8002d96:	f001 fc37 	bl	8004608 <HAL_PCD_Init>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002da0:	f000 f8c0 	bl	8002f24 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002da4:	bf00      	nop
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	2000038c 	.word	0x2000038c
 8002dac:	40006800 	.word	0x40006800

08002db0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002db4:	2004      	movs	r0, #4
 8002db6:	f7ff fd49 	bl	800284c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002dba:	2001      	movs	r0, #1
 8002dbc:	f7ff fd46 	bl	800284c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 15, 0);
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	210f      	movs	r1, #15
 8002dc4:	200b      	movs	r0, #11
 8002dc6:	f000 fe44 	bl	8003a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002dca:	200b      	movs	r0, #11
 8002dcc:	f000 fe5b 	bl	8003a86 <HAL_NVIC_EnableIRQ>

}
 8002dd0:	bf00      	nop
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dda:	1d3b      	adds	r3, r7, #4
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	605a      	str	r2, [r3, #4]
 8002de2:	609a      	str	r2, [r3, #8]
 8002de4:	60da      	str	r2, [r3, #12]
 8002de6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002de8:	2004      	movs	r0, #4
 8002dea:	f7ff fd48 	bl	800287e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dee:	2001      	movs	r0, #1
 8002df0:	f7ff fd45 	bl	800287e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df4:	2002      	movs	r0, #2
 8002df6:	f7ff fd42 	bl	800287e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dfa:	2008      	movs	r0, #8
 8002dfc:	f7ff fd3f 	bl	800287e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SYS_ENABLE_Pin|DIR_A_Pin, GPIO_PIN_RESET);
 8002e00:	2200      	movs	r2, #0
 8002e02:	f44f 4101 	mov.w	r1, #33024	; 0x8100
 8002e06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e0a:	f001 fb23 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Green_Led_Pin|Red_Led_Pin|Blue_Led_Pin, GPIO_PIN_RESET);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2123      	movs	r1, #35	; 0x23
 8002e12:	4833      	ldr	r0, [pc, #204]	; (8002ee0 <MX_GPIO_Init+0x10c>)
 8002e14:	f001 fb1e 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_B_GPIO_Port, DIR_B_Pin, GPIO_PIN_RESET);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e1e:	4831      	ldr	r0, [pc, #196]	; (8002ee4 <MX_GPIO_Init+0x110>)
 8002e20:	f001 fb18 	bl	8004454 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SYS_ENABLE_Pin DIR_A_Pin */
  GPIO_InitStruct.Pin = SYS_ENABLE_Pin|DIR_A_Pin;
 8002e24:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8002e28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e36:	1d3b      	adds	r3, r7, #4
 8002e38:	4619      	mov	r1, r3
 8002e3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e3e:	f001 f999 	bl	8004174 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e42:	2310      	movs	r3, #16
 8002e44:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002e4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e50:	1d3b      	adds	r3, r7, #4
 8002e52:	4619      	mov	r1, r3
 8002e54:	4823      	ldr	r0, [pc, #140]	; (8002ee4 <MX_GPIO_Init+0x110>)
 8002e56:	f001 f98d 	bl	8004174 <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_Led_Pin Red_Led_Pin Blue_Led_Pin */
  GPIO_InitStruct.Pin = Green_Led_Pin|Red_Led_Pin|Blue_Led_Pin;
 8002e5a:	2323      	movs	r3, #35	; 0x23
 8002e5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e66:	2302      	movs	r3, #2
 8002e68:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e6a:	1d3b      	adds	r3, r7, #4
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	481c      	ldr	r0, [pc, #112]	; (8002ee0 <MX_GPIO_Init+0x10c>)
 8002e70:	f001 f980 	bl	8004174 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_B_Pin */
  GPIO_InitStruct.Pin = DIR_B_Pin;
 8002e74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(DIR_B_GPIO_Port, &GPIO_InitStruct);
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4816      	ldr	r0, [pc, #88]	; (8002ee4 <MX_GPIO_Init+0x110>)
 8002e8c:	f001 f972 	bl	8004174 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8002e90:	2303      	movs	r3, #3
 8002e92:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e94:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002e98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e9e:	1d3b      	adds	r3, r7, #4
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4811      	ldr	r0, [pc, #68]	; (8002ee8 <MX_GPIO_Init+0x114>)
 8002ea4:	f001 f966 	bl	8004174 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	2100      	movs	r1, #0
 8002eac:	2006      	movs	r0, #6
 8002eae:	f000 fdd0 	bl	8003a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002eb2:	2006      	movs	r0, #6
 8002eb4:	f000 fde7 	bl	8003a86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2100      	movs	r1, #0
 8002ebc:	2007      	movs	r0, #7
 8002ebe:	f000 fdc8 	bl	8003a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002ec2:	2007      	movs	r0, #7
 8002ec4:	f000 fddf 	bl	8003a86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2100      	movs	r1, #0
 8002ecc:	200a      	movs	r0, #10
 8002ece:	f000 fdc0 	bl	8003a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002ed2:	200a      	movs	r0, #10
 8002ed4:	f000 fdd7 	bl	8003a86 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002ed8:	bf00      	nop
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	48000400 	.word	0x48000400
 8002ee4:	48000800 	.word	0x48000800
 8002ee8:	48000c00 	.word	0x48000c00

08002eec <Get_Counter>:

/* USER CODE BEGIN 4 */
uint32_t Get_Counter(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim2);
 8002ef0:	4b03      	ldr	r3, [pc, #12]	; (8002f00 <Get_Counter+0x14>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	2000024c 	.word	0x2000024c

08002f04 <Set_CCR>:
{
	HAL_UART_Transmit(&huart1,(uint8_t*)message, sizeof(char)*50,10);
}

void Set_CCR(uint32_t CCR)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, CCR);
 8002f0c:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <Set_CCR+0x1c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	20000200 	.word	0x20000200

08002f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002f28:	b672      	cpsid	i
}
 8002f2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f2c:	e7fe      	b.n	8002f2c <Error_Handler+0x8>

08002f2e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f46:	bf00      	nop
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_AHB2_GRP1_EnableClock>:
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4013      	ands	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f74:	68fb      	ldr	r3, [r7, #12]
}
 8002f76:	bf00      	nop
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <LL_AHB3_GRP1_EnableClock>:
{
 8002f82:	b480      	push	{r7}
 8002f84:	b085      	sub	sp, #20
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
}
 8002fa8:	bf00      	nop
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <LL_APB1_GRP1_EnableClock>:
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
}
 8002fda:	bf00      	nop
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <LL_APB2_GRP1_EnableClock>:
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b085      	sub	sp, #20
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ff4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003002:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4013      	ands	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800300a:	68fb      	ldr	r3, [r7, #12]
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800301c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003020:	f7ff ffaf 	bl	8002f82 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003024:	2200      	movs	r2, #0
 8003026:	2100      	movs	r1, #0
 8003028:	202e      	movs	r0, #46	; 0x2e
 800302a:	f000 fd12 	bl	8003a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800302e:	202e      	movs	r0, #46	; 0x2e
 8003030:	f000 fd29 	bl	8003a86 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003034:	bf00      	nop
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a0d      	ldr	r2, [pc, #52]	; (800307c <HAL_IPCC_MspInit+0x44>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d113      	bne.n	8003072 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800304a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800304e:	f7ff ff98 	bl	8002f82 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8003052:	2200      	movs	r2, #0
 8003054:	2100      	movs	r1, #0
 8003056:	202c      	movs	r0, #44	; 0x2c
 8003058:	f000 fcfb 	bl	8003a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800305c:	202c      	movs	r0, #44	; 0x2c
 800305e:	f000 fd12 	bl	8003a86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8003062:	2200      	movs	r2, #0
 8003064:	2100      	movs	r1, #0
 8003066:	202d      	movs	r0, #45	; 0x2d
 8003068:	f000 fcf3 	bl	8003a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800306c:	202d      	movs	r0, #45	; 0x2d
 800306e:	f000 fd0a 	bl	8003a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	58000c00 	.word	0x58000c00

08003080 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b096      	sub	sp, #88	; 0x58
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003088:	f107 0308 	add.w	r3, r7, #8
 800308c:	2250      	movs	r2, #80	; 0x50
 800308e:	2100      	movs	r1, #0
 8003090:	4618      	mov	r0, r3
 8003092:	f00a fe4b 	bl	800dd2c <memset>
  if(hrtc->Instance==RTC)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a12      	ldr	r2, [pc, #72]	; (80030e4 <HAL_RTC_MspInit+0x64>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d11d      	bne.n	80030dc <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80030a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030a4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80030a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030aa:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030ac:	f107 0308 	add.w	r3, r7, #8
 80030b0:	4618      	mov	r0, r3
 80030b2:	f002 fef5 	bl	8005ea0 <HAL_RCCEx_PeriphCLKConfig>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80030bc:	f7ff ff32 	bl	8002f24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80030c0:	f7ff ff35 	bl	8002f2e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80030c4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80030c8:	f7ff ff74 	bl	8002fb4 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80030cc:	2200      	movs	r2, #0
 80030ce:	2100      	movs	r1, #0
 80030d0:	2003      	movs	r0, #3
 80030d2:	f000 fcbe 	bl	8003a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80030d6:	2003      	movs	r0, #3
 80030d8:	f000 fcd5 	bl	8003a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80030dc:	bf00      	nop
 80030de:	3758      	adds	r7, #88	; 0x58
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40002800 	.word	0x40002800

080030e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a05      	ldr	r2, [pc, #20]	; (800310c <HAL_TIM_Base_MspInit+0x24>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d103      	bne.n	8003102 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030fa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80030fe:	f7ff ff72 	bl	8002fe6 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003102:	bf00      	nop
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40012c00 	.word	0x40012c00

08003110 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003118:	f107 030c 	add.w	r3, r7, #12
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003130:	d116      	bne.n	8003160 <HAL_TIM_Encoder_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003132:	2001      	movs	r0, #1
 8003134:	f7ff ff3e 	bl	8002fb4 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003138:	2001      	movs	r0, #1
 800313a:	f7ff ff09 	bl	8002f50 <LL_AHB2_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 800313e:	2303      	movs	r3, #3
 8003140:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003142:	2302      	movs	r3, #2
 8003144:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314a:	2300      	movs	r3, #0
 800314c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800314e:	2301      	movs	r3, #1
 8003150:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003152:	f107 030c 	add.w	r3, r7, #12
 8003156:	4619      	mov	r1, r3
 8003158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800315c:	f001 f80a 	bl	8004174 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003160:	bf00      	nop
 8003162:	3720      	adds	r7, #32
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003170:	f107 030c 	add.w	r3, r7, #12
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	605a      	str	r2, [r3, #4]
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	60da      	str	r2, [r3, #12]
 800317e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a0d      	ldr	r2, [pc, #52]	; (80031bc <HAL_TIM_MspPostInit+0x54>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d114      	bne.n	80031b4 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800318a:	2001      	movs	r0, #1
 800318c:	f7ff fee0 	bl	8002f50 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_SPEED_Pin;
 8003190:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003194:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003196:	2302      	movs	r3, #2
 8003198:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319a:	2300      	movs	r3, #0
 800319c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319e:	2300      	movs	r3, #0
 80031a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80031a2:	2301      	movs	r3, #1
 80031a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_SPEED_GPIO_Port, &GPIO_InitStruct);
 80031a6:	f107 030c 	add.w	r3, r7, #12
 80031aa:	4619      	mov	r1, r3
 80031ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031b0:	f000 ffe0 	bl	8004174 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80031b4:	bf00      	nop
 80031b6:	3720      	adds	r7, #32
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	40012c00 	.word	0x40012c00

080031c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b09c      	sub	sp, #112	; 0x70
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	605a      	str	r2, [r3, #4]
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	60da      	str	r2, [r3, #12]
 80031d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031d8:	f107 030c 	add.w	r3, r7, #12
 80031dc:	2250      	movs	r2, #80	; 0x50
 80031de:	2100      	movs	r1, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f00a fda3 	bl	800dd2c <memset>
  if(huart->Instance==USART1)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a2e      	ldr	r2, [pc, #184]	; (80032a4 <HAL_UART_MspInit+0xe4>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d155      	bne.n	800329c <HAL_UART_MspInit+0xdc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80031f0:	2301      	movs	r3, #1
 80031f2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80031f4:	2300      	movs	r3, #0
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031f8:	f107 030c 	add.w	r3, r7, #12
 80031fc:	4618      	mov	r0, r3
 80031fe:	f002 fe4f 	bl	8005ea0 <HAL_RCCEx_PeriphCLKConfig>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003208:	f7ff fe8c 	bl	8002f24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800320c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003210:	f7ff fee9 	bl	8002fe6 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003214:	2002      	movs	r0, #2
 8003216:	f7ff fe9b 	bl	8002f50 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800321a:	23c0      	movs	r3, #192	; 0xc0
 800321c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321e:	2302      	movs	r3, #2
 8003220:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003222:	2301      	movs	r3, #1
 8003224:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003226:	2300      	movs	r3, #0
 8003228:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800322a:	2307      	movs	r3, #7
 800322c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800322e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003232:	4619      	mov	r1, r3
 8003234:	481c      	ldr	r0, [pc, #112]	; (80032a8 <HAL_UART_MspInit+0xe8>)
 8003236:	f000 ff9d 	bl	8004174 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 800323a:	4b1c      	ldr	r3, [pc, #112]	; (80032ac <HAL_UART_MspInit+0xec>)
 800323c:	4a1c      	ldr	r2, [pc, #112]	; (80032b0 <HAL_UART_MspInit+0xf0>)
 800323e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003240:	4b1a      	ldr	r3, [pc, #104]	; (80032ac <HAL_UART_MspInit+0xec>)
 8003242:	220f      	movs	r2, #15
 8003244:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003246:	4b19      	ldr	r3, [pc, #100]	; (80032ac <HAL_UART_MspInit+0xec>)
 8003248:	2210      	movs	r2, #16
 800324a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800324c:	4b17      	ldr	r3, [pc, #92]	; (80032ac <HAL_UART_MspInit+0xec>)
 800324e:	2200      	movs	r2, #0
 8003250:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003252:	4b16      	ldr	r3, [pc, #88]	; (80032ac <HAL_UART_MspInit+0xec>)
 8003254:	2280      	movs	r2, #128	; 0x80
 8003256:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003258:	4b14      	ldr	r3, [pc, #80]	; (80032ac <HAL_UART_MspInit+0xec>)
 800325a:	2200      	movs	r2, #0
 800325c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800325e:	4b13      	ldr	r3, [pc, #76]	; (80032ac <HAL_UART_MspInit+0xec>)
 8003260:	2200      	movs	r2, #0
 8003262:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003264:	4b11      	ldr	r3, [pc, #68]	; (80032ac <HAL_UART_MspInit+0xec>)
 8003266:	2200      	movs	r2, #0
 8003268:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800326a:	4b10      	ldr	r3, [pc, #64]	; (80032ac <HAL_UART_MspInit+0xec>)
 800326c:	2200      	movs	r2, #0
 800326e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003270:	480e      	ldr	r0, [pc, #56]	; (80032ac <HAL_UART_MspInit+0xec>)
 8003272:	f000 fc4d 	bl	8003b10 <HAL_DMA_Init>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 800327c:	f7ff fe52 	bl	8002f24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <HAL_UART_MspInit+0xec>)
 8003284:	67da      	str	r2, [r3, #124]	; 0x7c
 8003286:	4a09      	ldr	r2, [pc, #36]	; (80032ac <HAL_UART_MspInit+0xec>)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800328c:	2200      	movs	r2, #0
 800328e:	2100      	movs	r1, #0
 8003290:	2024      	movs	r0, #36	; 0x24
 8003292:	f000 fbde 	bl	8003a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003296:	2024      	movs	r0, #36	; 0x24
 8003298:	f000 fbf5 	bl	8003a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800329c:	bf00      	nop
 800329e:	3770      	adds	r7, #112	; 0x70
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40013800 	.word	0x40013800
 80032a8:	48000400 	.word	0x48000400
 80032ac:	2000032c 	.word	0x2000032c
 80032b0:	40020008 	.word	0x40020008

080032b4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b09c      	sub	sp, #112	; 0x70
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	609a      	str	r2, [r3, #8]
 80032c8:	60da      	str	r2, [r3, #12]
 80032ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032cc:	f107 030c 	add.w	r3, r7, #12
 80032d0:	2250      	movs	r2, #80	; 0x50
 80032d2:	2100      	movs	r1, #0
 80032d4:	4618      	mov	r0, r3
 80032d6:	f00a fd29 	bl	800dd2c <memset>
  if(hpcd->Instance==USB)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a1f      	ldr	r2, [pc, #124]	; (800335c <HAL_PCD_MspInit+0xa8>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d136      	bne.n	8003352 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80032e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032e8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80032ea:	2318      	movs	r3, #24
 80032ec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80032ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032f2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80032f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80032fa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80032fe:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8003300:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003304:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003306:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800330a:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800330c:	f107 030c 	add.w	r3, r7, #12
 8003310:	4618      	mov	r0, r3
 8003312:	f002 fdc5 	bl	8005ea0 <HAL_RCCEx_PeriphCLKConfig>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800331c:	f7ff fe02 	bl	8002f24 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003320:	2001      	movs	r0, #1
 8003322:	f7ff fe15 	bl	8002f50 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003326:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800332a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332c:	2302      	movs	r3, #2
 800332e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003330:	2300      	movs	r3, #0
 8003332:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003334:	2300      	movs	r3, #0
 8003336:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8003338:	230a      	movs	r3, #10
 800333a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800333c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003340:	4619      	mov	r1, r3
 8003342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003346:	f000 ff15 	bl	8004174 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800334a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800334e:	f7ff fe31 	bl	8002fb4 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8003352:	bf00      	nop
 8003354:	3770      	adds	r7, #112	; 0x70
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	40006800 	.word	0x40006800

08003360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003364:	e7fe      	b.n	8003364 <NMI_Handler+0x4>

08003366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003366:	b480      	push	{r7}
 8003368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800336a:	e7fe      	b.n	800336a <HardFault_Handler+0x4>

0800336c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003370:	e7fe      	b.n	8003370 <MemManage_Handler+0x4>

08003372 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003372:	b480      	push	{r7}
 8003374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003376:	e7fe      	b.n	8003376 <BusFault_Handler+0x4>

08003378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800337c:	e7fe      	b.n	800337c <UsageFault_Handler+0x4>

0800337e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800337e:	b480      	push	{r7}
 8003380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003390:	bf00      	nop
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800339a:	b480      	push	{r7}
 800339c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033ac:	f000 f9d2 	bl	8003754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033b0:	bf00      	nop
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80033b8:	f7fe ff14 	bl	80021e4 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80033bc:	bf00      	nop
 80033be:	bd80      	pop	{r7, pc}

080033c0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B2_Pin);
 80033c4:	2001      	movs	r0, #1
 80033c6:	f001 f85d 	bl	8004484 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}

080033ce <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B3_Pin);
 80033d2:	2002      	movs	r0, #2
 80033d4:	f001 f856 	bl	8004484 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80033d8:	bf00      	nop
 80033da:	bd80      	pop	{r7, pc}

080033dc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80033e0:	2010      	movs	r0, #16
 80033e2:	f001 f84f 	bl	8004484 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80033f0:	4802      	ldr	r0, [pc, #8]	; (80033fc <DMA1_Channel1_IRQHandler+0x10>)
 80033f2:	f000 fd6e 	bl	8003ed2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	2000032c 	.word	0x2000032c

08003400 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003404:	4802      	ldr	r0, [pc, #8]	; (8003410 <USART1_IRQHandler+0x10>)
 8003406:	f004 fa31 	bl	800786c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800340a:	bf00      	nop
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20000298 	.word	0x20000298

08003414 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003418:	f009 feba 	bl	800d190 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800341c:	bf00      	nop
 800341e:	bd80      	pop	{r7, pc}

08003420 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003424:	f009 feea 	bl	800d1fc <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003428:	bf00      	nop
 800342a:	bd80      	pop	{r7, pc}

0800342c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003430:	f001 f840 	bl	80044b4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003434:	bf00      	nop
 8003436:	bd80      	pop	{r7, pc}

08003438 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003444:	2300      	movs	r3, #0
 8003446:	617b      	str	r3, [r7, #20]
 8003448:	e00a      	b.n	8003460 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800344a:	f3af 8000 	nop.w
 800344e:	4601      	mov	r1, r0
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	1c5a      	adds	r2, r3, #1
 8003454:	60ba      	str	r2, [r7, #8]
 8003456:	b2ca      	uxtb	r2, r1
 8003458:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	3301      	adds	r3, #1
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	429a      	cmp	r2, r3
 8003466:	dbf0      	blt.n	800344a <_read+0x12>
  }

  return len;
 8003468:	687b      	ldr	r3, [r7, #4]
}
 800346a:	4618      	mov	r0, r3
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800347a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800347e:	4618      	mov	r0, r3
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
 8003492:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800349a:	605a      	str	r2, [r3, #4]
  return 0;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <_isatty>:

int _isatty(int file)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80034b2:	2301      	movs	r3, #1
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
	...

080034dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034e4:	4a14      	ldr	r2, [pc, #80]	; (8003538 <_sbrk+0x5c>)
 80034e6:	4b15      	ldr	r3, [pc, #84]	; (800353c <_sbrk+0x60>)
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034f0:	4b13      	ldr	r3, [pc, #76]	; (8003540 <_sbrk+0x64>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d102      	bne.n	80034fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034f8:	4b11      	ldr	r3, [pc, #68]	; (8003540 <_sbrk+0x64>)
 80034fa:	4a12      	ldr	r2, [pc, #72]	; (8003544 <_sbrk+0x68>)
 80034fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034fe:	4b10      	ldr	r3, [pc, #64]	; (8003540 <_sbrk+0x64>)
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4413      	add	r3, r2
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	429a      	cmp	r2, r3
 800350a:	d207      	bcs.n	800351c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800350c:	f00a fc74 	bl	800ddf8 <__errno>
 8003510:	4603      	mov	r3, r0
 8003512:	220c      	movs	r2, #12
 8003514:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003516:	f04f 33ff 	mov.w	r3, #4294967295
 800351a:	e009      	b.n	8003530 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800351c:	4b08      	ldr	r3, [pc, #32]	; (8003540 <_sbrk+0x64>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003522:	4b07      	ldr	r3, [pc, #28]	; (8003540 <_sbrk+0x64>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4413      	add	r3, r2
 800352a:	4a05      	ldr	r2, [pc, #20]	; (8003540 <_sbrk+0x64>)
 800352c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800352e:	68fb      	ldr	r3, [r7, #12]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	20030000 	.word	0x20030000
 800353c:	00001000 	.word	0x00001000
 8003540:	20000668 	.word	0x20000668
 8003544:	20001a90 	.word	0x20001a90

08003548 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800354c:	4b24      	ldr	r3, [pc, #144]	; (80035e0 <SystemInit+0x98>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003552:	4a23      	ldr	r2, [pc, #140]	; (80035e0 <SystemInit+0x98>)
 8003554:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003558:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800355c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800356c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003570:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003574:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003576:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003580:	4b18      	ldr	r3, [pc, #96]	; (80035e4 <SystemInit+0x9c>)
 8003582:	4013      	ands	r3, r2
 8003584:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800358a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800358e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003592:	f023 0305 	bic.w	r3, r3, #5
 8003596:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800359a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800359e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035a6:	f023 0301 	bic.w	r3, r3, #1
 80035aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80035ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b2:	4a0d      	ldr	r2, [pc, #52]	; (80035e8 <SystemInit+0xa0>)
 80035b4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80035b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ba:	4a0b      	ldr	r2, [pc, #44]	; (80035e8 <SystemInit+0xa0>)
 80035bc:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80035be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035cc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80035ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d2:	2200      	movs	r2, #0
 80035d4:	619a      	str	r2, [r3, #24]
}
 80035d6:	bf00      	nop
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr
 80035e0:	e000ed00 	.word	0xe000ed00
 80035e4:	faf6fefb 	.word	0xfaf6fefb
 80035e8:	22041000 	.word	0x22041000

080035ec <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80035ec:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035ee:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035f0:	3304      	adds	r3, #4

080035f2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035f2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035f4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80035f6:	d3f9      	bcc.n	80035ec <CopyDataInit>
  bx lr
 80035f8:	4770      	bx	lr

080035fa <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80035fa:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80035fc:	3004      	adds	r0, #4

080035fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80035fe:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003600:	d3fb      	bcc.n	80035fa <FillZerobss>
  bx lr
 8003602:	4770      	bx	lr

08003604 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003604:	480c      	ldr	r0, [pc, #48]	; (8003638 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003606:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003608:	f7ff ff9e 	bl	8003548 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800360c:	480b      	ldr	r0, [pc, #44]	; (800363c <LoopForever+0x6>)
 800360e:	490c      	ldr	r1, [pc, #48]	; (8003640 <LoopForever+0xa>)
 8003610:	4a0c      	ldr	r2, [pc, #48]	; (8003644 <LoopForever+0xe>)
 8003612:	2300      	movs	r3, #0
 8003614:	f7ff ffed 	bl	80035f2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003618:	480b      	ldr	r0, [pc, #44]	; (8003648 <LoopForever+0x12>)
 800361a:	490c      	ldr	r1, [pc, #48]	; (800364c <LoopForever+0x16>)
 800361c:	4a0c      	ldr	r2, [pc, #48]	; (8003650 <LoopForever+0x1a>)
 800361e:	2300      	movs	r3, #0
 8003620:	f7ff ffe7 	bl	80035f2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003624:	480b      	ldr	r0, [pc, #44]	; (8003654 <LoopForever+0x1e>)
 8003626:	490c      	ldr	r1, [pc, #48]	; (8003658 <LoopForever+0x22>)
 8003628:	2300      	movs	r3, #0
 800362a:	f7ff ffe8 	bl	80035fe <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800362e:	f00a fbe9 	bl	800de04 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003632:	f7ff f93d 	bl	80028b0 <main>

08003636 <LoopForever>:

LoopForever:
  b LoopForever
 8003636:	e7fe      	b.n	8003636 <LoopForever>
  ldr   r0, =_estack
 8003638:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800363c:	20000008 	.word	0x20000008
 8003640:	20000094 	.word	0x20000094
 8003644:	080101ac 	.word	0x080101ac
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003648:	200301e4 	.word	0x200301e4
 800364c:	20030a67 	.word	0x20030a67
 8003650:	0801027e 	.word	0x0801027e
  INIT_BSS _sbss, _ebss
 8003654:	200000e0 	.word	0x200000e0
 8003658:	20001a90 	.word	0x20001a90

0800365c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800365c:	e7fe      	b.n	800365c <ADC1_IRQHandler>
	...

08003660 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003664:	4b05      	ldr	r3, [pc, #20]	; (800367c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	4a04      	ldr	r2, [pc, #16]	; (800367c <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	6053      	str	r3, [r2, #4]
}
 8003670:	bf00      	nop
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	e0042000 	.word	0xe0042000

08003680 <LL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003684:	4b05      	ldr	r3, [pc, #20]	; (800369c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	4a04      	ldr	r2, [pc, #16]	; (800369c <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800368a:	f043 0302 	orr.w	r3, r3, #2
 800368e:	6053      	str	r3, [r2, #4]
}
 8003690:	bf00      	nop
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	e0042000 	.word	0xe0042000

080036a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036aa:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <HAL_Init+0x3c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a0b      	ldr	r2, [pc, #44]	; (80036dc <HAL_Init+0x3c>)
 80036b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036b6:	2003      	movs	r0, #3
 80036b8:	f000 f9c0 	bl	8003a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036bc:	2000      	movs	r0, #0
 80036be:	f000 f80f 	bl	80036e0 <HAL_InitTick>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	71fb      	strb	r3, [r7, #7]
 80036cc:	e001      	b.n	80036d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80036ce:	f7ff fca3 	bl	8003018 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80036d2:	79fb      	ldrb	r3, [r7, #7]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	58004000 	.word	0x58004000

080036e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80036e8:	2300      	movs	r3, #0
 80036ea:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80036ec:	4b17      	ldr	r3, [pc, #92]	; (800374c <HAL_InitTick+0x6c>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d024      	beq.n	800373e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80036f4:	f002 f934 	bl	8005960 <HAL_RCC_GetHCLKFreq>
 80036f8:	4602      	mov	r2, r0
 80036fa:	4b14      	ldr	r3, [pc, #80]	; (800374c <HAL_InitTick+0x6c>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	4619      	mov	r1, r3
 8003700:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003704:	fbb3 f3f1 	udiv	r3, r3, r1
 8003708:	fbb2 f3f3 	udiv	r3, r2, r3
 800370c:	4618      	mov	r0, r3
 800370e:	f000 f9d6 	bl	8003abe <HAL_SYSTICK_Config>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10f      	bne.n	8003738 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b0f      	cmp	r3, #15
 800371c:	d809      	bhi.n	8003732 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800371e:	2200      	movs	r2, #0
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	f04f 30ff 	mov.w	r0, #4294967295
 8003726:	f000 f994 	bl	8003a52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800372a:	4a09      	ldr	r2, [pc, #36]	; (8003750 <HAL_InitTick+0x70>)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6013      	str	r3, [r2, #0]
 8003730:	e007      	b.n	8003742 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	73fb      	strb	r3, [r7, #15]
 8003736:	e004      	b.n	8003742 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
 800373c:	e001      	b.n	8003742 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003742:	7bfb      	ldrb	r3, [r7, #15]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20000010 	.word	0x20000010
 8003750:	2000000c 	.word	0x2000000c

08003754 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003758:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_IncTick+0x20>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	461a      	mov	r2, r3
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_IncTick+0x24>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4413      	add	r3, r2
 8003764:	4a04      	ldr	r2, [pc, #16]	; (8003778 <HAL_IncTick+0x24>)
 8003766:	6013      	str	r3, [r2, #0]
}
 8003768:	bf00      	nop
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	20000010 	.word	0x20000010
 8003778:	2000066c 	.word	0x2000066c

0800377c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return uwTick;
 8003780:	4b03      	ldr	r3, [pc, #12]	; (8003790 <HAL_GetTick+0x14>)
 8003782:	681b      	ldr	r3, [r3, #0]
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	2000066c 	.word	0x2000066c

08003794 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003798:	4b03      	ldr	r3, [pc, #12]	; (80037a8 <HAL_GetTickPrio+0x14>)
 800379a:	681b      	ldr	r3, [r3, #0]
}
 800379c:	4618      	mov	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	2000000c 	.word	0x2000000c

080037ac <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80037b0:	4b03      	ldr	r3, [pc, #12]	; (80037c0 <HAL_GetTickFreq+0x14>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	20000010 	.word	0x20000010

080037c4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80037c8:	f7ff ff4a 	bl	8003660 <LL_DBGMCU_EnableDBGSleepMode>
}
 80037cc:	bf00      	nop
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80037d4:	f7ff ff54 	bl	8003680 <LL_DBGMCU_EnableDBGStopMode>
}
 80037d8:	bf00      	nop
 80037da:	bd80      	pop	{r7, pc}

080037dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037ec:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <__NVIC_SetPriorityGrouping+0x44>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037f8:	4013      	ands	r3, r2
 80037fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003804:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800380c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800380e:	4a04      	ldr	r2, [pc, #16]	; (8003820 <__NVIC_SetPriorityGrouping+0x44>)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	60d3      	str	r3, [r2, #12]
}
 8003814:	bf00      	nop
 8003816:	3714      	adds	r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003828:	4b04      	ldr	r3, [pc, #16]	; (800383c <__NVIC_GetPriorityGrouping+0x18>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	0a1b      	lsrs	r3, r3, #8
 800382e:	f003 0307 	and.w	r3, r3, #7
}
 8003832:	4618      	mov	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	e000ed00 	.word	0xe000ed00

08003840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	4603      	mov	r3, r0
 8003848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800384a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384e:	2b00      	cmp	r3, #0
 8003850:	db0b      	blt.n	800386a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	f003 021f 	and.w	r2, r3, #31
 8003858:	4907      	ldr	r1, [pc, #28]	; (8003878 <__NVIC_EnableIRQ+0x38>)
 800385a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385e:	095b      	lsrs	r3, r3, #5
 8003860:	2001      	movs	r0, #1
 8003862:	fa00 f202 	lsl.w	r2, r0, r2
 8003866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	e000e100 	.word	0xe000e100

0800387c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388a:	2b00      	cmp	r3, #0
 800388c:	db12      	blt.n	80038b4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	f003 021f 	and.w	r2, r3, #31
 8003894:	490a      	ldr	r1, [pc, #40]	; (80038c0 <__NVIC_DisableIRQ+0x44>)
 8003896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	2001      	movs	r0, #1
 800389e:	fa00 f202 	lsl.w	r2, r0, r2
 80038a2:	3320      	adds	r3, #32
 80038a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80038a8:	f3bf 8f4f 	dsb	sy
}
 80038ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80038ae:	f3bf 8f6f 	isb	sy
}
 80038b2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	e000e100 	.word	0xe000e100

080038c4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	db0c      	blt.n	80038f0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038d6:	79fb      	ldrb	r3, [r7, #7]
 80038d8:	f003 021f 	and.w	r2, r3, #31
 80038dc:	4907      	ldr	r1, [pc, #28]	; (80038fc <__NVIC_SetPendingIRQ+0x38>)
 80038de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e2:	095b      	lsrs	r3, r3, #5
 80038e4:	2001      	movs	r0, #1
 80038e6:	fa00 f202 	lsl.w	r2, r0, r2
 80038ea:	3340      	adds	r3, #64	; 0x40
 80038ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	e000e100 	.word	0xe000e100

08003900 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	4603      	mov	r3, r0
 8003908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800390a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390e:	2b00      	cmp	r3, #0
 8003910:	db0c      	blt.n	800392c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003912:	79fb      	ldrb	r3, [r7, #7]
 8003914:	f003 021f 	and.w	r2, r3, #31
 8003918:	4907      	ldr	r1, [pc, #28]	; (8003938 <__NVIC_ClearPendingIRQ+0x38>)
 800391a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391e:	095b      	lsrs	r3, r3, #5
 8003920:	2001      	movs	r0, #1
 8003922:	fa00 f202 	lsl.w	r2, r0, r2
 8003926:	3360      	adds	r3, #96	; 0x60
 8003928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	e000e100 	.word	0xe000e100

0800393c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	4603      	mov	r3, r0
 8003944:	6039      	str	r1, [r7, #0]
 8003946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394c:	2b00      	cmp	r3, #0
 800394e:	db0a      	blt.n	8003966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	b2da      	uxtb	r2, r3
 8003954:	490c      	ldr	r1, [pc, #48]	; (8003988 <__NVIC_SetPriority+0x4c>)
 8003956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800395a:	0112      	lsls	r2, r2, #4
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	440b      	add	r3, r1
 8003960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003964:	e00a      	b.n	800397c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	b2da      	uxtb	r2, r3
 800396a:	4908      	ldr	r1, [pc, #32]	; (800398c <__NVIC_SetPriority+0x50>)
 800396c:	79fb      	ldrb	r3, [r7, #7]
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	3b04      	subs	r3, #4
 8003974:	0112      	lsls	r2, r2, #4
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	440b      	add	r3, r1
 800397a:	761a      	strb	r2, [r3, #24]
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	e000e100 	.word	0xe000e100
 800398c:	e000ed00 	.word	0xe000ed00

08003990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003990:	b480      	push	{r7}
 8003992:	b089      	sub	sp, #36	; 0x24
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f1c3 0307 	rsb	r3, r3, #7
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	bf28      	it	cs
 80039ae:	2304      	movcs	r3, #4
 80039b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	3304      	adds	r3, #4
 80039b6:	2b06      	cmp	r3, #6
 80039b8:	d902      	bls.n	80039c0 <NVIC_EncodePriority+0x30>
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	3b03      	subs	r3, #3
 80039be:	e000      	b.n	80039c2 <NVIC_EncodePriority+0x32>
 80039c0:	2300      	movs	r3, #0
 80039c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c4:	f04f 32ff 	mov.w	r2, #4294967295
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	43da      	mvns	r2, r3
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	401a      	ands	r2, r3
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039d8:	f04f 31ff 	mov.w	r1, #4294967295
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	fa01 f303 	lsl.w	r3, r1, r3
 80039e2:	43d9      	mvns	r1, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e8:	4313      	orrs	r3, r2
         );
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3724      	adds	r7, #36	; 0x24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a08:	d301      	bcc.n	8003a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e00f      	b.n	8003a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a0e:	4a0a      	ldr	r2, [pc, #40]	; (8003a38 <SysTick_Config+0x40>)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a16:	210f      	movs	r1, #15
 8003a18:	f04f 30ff 	mov.w	r0, #4294967295
 8003a1c:	f7ff ff8e 	bl	800393c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a20:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <SysTick_Config+0x40>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a26:	4b04      	ldr	r3, [pc, #16]	; (8003a38 <SysTick_Config+0x40>)
 8003a28:	2207      	movs	r2, #7
 8003a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	e000e010 	.word	0xe000e010

08003a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff fec9 	bl	80037dc <__NVIC_SetPriorityGrouping>
}
 8003a4a:	bf00      	nop
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b086      	sub	sp, #24
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	4603      	mov	r3, r0
 8003a5a:	60b9      	str	r1, [r7, #8]
 8003a5c:	607a      	str	r2, [r7, #4]
 8003a5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a60:	f7ff fee0 	bl	8003824 <__NVIC_GetPriorityGrouping>
 8003a64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	68b9      	ldr	r1, [r7, #8]
 8003a6a:	6978      	ldr	r0, [r7, #20]
 8003a6c:	f7ff ff90 	bl	8003990 <NVIC_EncodePriority>
 8003a70:	4602      	mov	r2, r0
 8003a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a76:	4611      	mov	r1, r2
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ff5f 	bl	800393c <__NVIC_SetPriority>
}
 8003a7e:	bf00      	nop
 8003a80:	3718      	adds	r7, #24
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b082      	sub	sp, #8
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff fed3 	bl	8003840 <__NVIC_EnableIRQ>
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff fee3 	bl	800387c <__NVIC_DisableIRQ>
}
 8003ab6:	bf00      	nop
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b082      	sub	sp, #8
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7ff ff96 	bl	80039f8 <SysTick_Config>
 8003acc:	4603      	mov	r3, r0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	4603      	mov	r3, r0
 8003ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff feed 	bl	80038c4 <__NVIC_SetPendingIRQ>
}
 8003aea:	bf00      	nop
 8003aec:	3708      	adds	r7, #8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	4603      	mov	r3, r0
 8003afa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7ff fefd 	bl	8003900 <__NVIC_ClearPendingIRQ>
}
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
	...

08003b10 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e08e      	b.n	8003c40 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	461a      	mov	r2, r3
 8003b28:	4b47      	ldr	r3, [pc, #284]	; (8003c48 <HAL_DMA_Init+0x138>)
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d80f      	bhi.n	8003b4e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	4b45      	ldr	r3, [pc, #276]	; (8003c4c <HAL_DMA_Init+0x13c>)
 8003b36:	4413      	add	r3, r2
 8003b38:	4a45      	ldr	r2, [pc, #276]	; (8003c50 <HAL_DMA_Init+0x140>)
 8003b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b3e:	091b      	lsrs	r3, r3, #4
 8003b40:	009a      	lsls	r2, r3, #2
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a42      	ldr	r2, [pc, #264]	; (8003c54 <HAL_DMA_Init+0x144>)
 8003b4a:	641a      	str	r2, [r3, #64]	; 0x40
 8003b4c:	e00e      	b.n	8003b6c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	461a      	mov	r2, r3
 8003b54:	4b40      	ldr	r3, [pc, #256]	; (8003c58 <HAL_DMA_Init+0x148>)
 8003b56:	4413      	add	r3, r2
 8003b58:	4a3d      	ldr	r2, [pc, #244]	; (8003c50 <HAL_DMA_Init+0x140>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	091b      	lsrs	r3, r3, #4
 8003b60:	009a      	lsls	r2, r3, #2
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a3c      	ldr	r2, [pc, #240]	; (8003c5c <HAL_DMA_Init+0x14c>)
 8003b6a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b86:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003b90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ba8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fa74 	bl	80040ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bcc:	d102      	bne.n	8003bd4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bdc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003be0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003bea:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d010      	beq.n	8003c16 <HAL_DMA_Init+0x106>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d80c      	bhi.n	8003c16 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fa93 	bl	8004128 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c06:	2200      	movs	r2, #0
 8003c08:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c12:	605a      	str	r2, [r3, #4]
 8003c14:	e008      	b.n	8003c28 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40020407 	.word	0x40020407
 8003c4c:	bffdfff8 	.word	0xbffdfff8
 8003c50:	cccccccd 	.word	0xcccccccd
 8003c54:	40020000 	.word	0x40020000
 8003c58:	bffdfbf8 	.word	0xbffdfbf8
 8003c5c:	40020400 	.word	0x40020400

08003c60 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_DMA_Start_IT+0x20>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e066      	b.n	8003d4e <HAL_DMA_Start_IT+0xee>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d155      	bne.n	8003d40 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 0201 	bic.w	r2, r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	68b9      	ldr	r1, [r7, #8]
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f9b9 	bl	8004030 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d008      	beq.n	8003cd8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f042 020e 	orr.w	r2, r2, #14
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	e00f      	b.n	8003cf8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0204 	bic.w	r2, r2, #4
 8003ce6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 020a 	orr.w	r2, r2, #10
 8003cf6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d007      	beq.n	8003d16 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d14:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d007      	beq.n	8003d2e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d2c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0201 	orr.w	r2, r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	e005      	b.n	8003d4c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d48:	2302      	movs	r3, #2
 8003d4a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003d4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b083      	sub	sp, #12
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d101      	bne.n	8003d68 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e04f      	b.n	8003e08 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d008      	beq.n	8003d86 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2204      	movs	r2, #4
 8003d78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e040      	b.n	8003e08 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 020e 	bic.w	r2, r2, #14
 8003d94:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003da4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0201 	bic.w	r2, r2, #1
 8003db4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dba:	f003 021c 	and.w	r2, r3, #28
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003dd2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00c      	beq.n	8003df6 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003df4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d005      	beq.n	8003e38 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2204      	movs	r2, #4
 8003e30:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	73fb      	strb	r3, [r7, #15]
 8003e36:	e047      	b.n	8003ec8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 020e 	bic.w	r2, r2, #14
 8003e46:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f022 0201 	bic.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6c:	f003 021c 	and.w	r2, r3, #28
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e74:	2101      	movs	r1, #1
 8003e76:	fa01 f202 	lsl.w	r2, r1, r2
 8003e7a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e84:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00c      	beq.n	8003ea8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e9c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ea6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	4798      	blx	r3
    }
  }
  return status;
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b084      	sub	sp, #16
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eee:	f003 031c 	and.w	r3, r3, #28
 8003ef2:	2204      	movs	r2, #4
 8003ef4:	409a      	lsls	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d026      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x7a>
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d021      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0320 	and.w	r3, r3, #32
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d107      	bne.n	8003f26 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0204 	bic.w	r2, r2, #4
 8003f24:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2a:	f003 021c 	and.w	r2, r3, #28
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	2104      	movs	r1, #4
 8003f34:	fa01 f202 	lsl.w	r2, r1, r2
 8003f38:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d071      	beq.n	8004026 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003f4a:	e06c      	b.n	8004026 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f50:	f003 031c 	and.w	r3, r3, #28
 8003f54:	2202      	movs	r2, #2
 8003f56:	409a      	lsls	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d02e      	beq.n	8003fbe <HAL_DMA_IRQHandler+0xec>
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d029      	beq.n	8003fbe <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0320 	and.w	r3, r3, #32
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10b      	bne.n	8003f90 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 020a 	bic.w	r2, r2, #10
 8003f86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f94:	f003 021c 	and.w	r2, r3, #28
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	2102      	movs	r1, #2
 8003f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d038      	beq.n	8004026 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003fbc:	e033      	b.n	8004026 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc2:	f003 031c 	and.w	r3, r3, #28
 8003fc6:	2208      	movs	r2, #8
 8003fc8:	409a      	lsls	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d02a      	beq.n	8004028 <HAL_DMA_IRQHandler+0x156>
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d025      	beq.n	8004028 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f022 020e 	bic.w	r2, r2, #14
 8003fea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff0:	f003 021c 	and.w	r2, r3, #28
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8003ffe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401a:	2b00      	cmp	r3, #0
 800401c:	d004      	beq.n	8004028 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004026:	bf00      	nop
 8004028:	bf00      	nop
}
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004046:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404c:	2b00      	cmp	r3, #0
 800404e:	d004      	beq.n	800405a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004058:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405e:	f003 021c 	and.w	r2, r3, #28
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	2101      	movs	r1, #1
 8004068:	fa01 f202 	lsl.w	r2, r1, r2
 800406c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	2b10      	cmp	r3, #16
 800407c:	d108      	bne.n	8004090 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68ba      	ldr	r2, [r7, #8]
 800408c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800408e:	e007      	b.n	80040a0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	60da      	str	r2, [r3, #12]
}
 80040a0:	bf00      	nop
 80040a2:	3714      	adds	r7, #20
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	461a      	mov	r2, r3
 80040ba:	4b17      	ldr	r3, [pc, #92]	; (8004118 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80040bc:	429a      	cmp	r2, r3
 80040be:	d80a      	bhi.n	80040d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c4:	089b      	lsrs	r3, r3, #2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80040cc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6493      	str	r3, [r2, #72]	; 0x48
 80040d4:	e007      	b.n	80040e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040da:	089b      	lsrs	r3, r3, #2
 80040dc:	009a      	lsls	r2, r3, #2
 80040de:	4b0f      	ldr	r3, [pc, #60]	; (800411c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80040e0:	4413      	add	r3, r2
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	3b08      	subs	r3, #8
 80040ee:	4a0c      	ldr	r2, [pc, #48]	; (8004120 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80040f0:	fba2 2303 	umull	r2, r3, r2, r3
 80040f4:	091b      	lsrs	r3, r3, #4
 80040f6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a0a      	ldr	r2, [pc, #40]	; (8004124 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80040fc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	2201      	movs	r2, #1
 8004106:	409a      	lsls	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800410c:	bf00      	nop
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	40020407 	.word	0x40020407
 800411c:	4002081c 	.word	0x4002081c
 8004120:	cccccccd 	.word	0xcccccccd
 8004124:	40020880 	.word	0x40020880

08004128 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004138:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4b0b      	ldr	r3, [pc, #44]	; (800416c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800413e:	4413      	add	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	461a      	mov	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a09      	ldr	r2, [pc, #36]	; (8004170 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800414c:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	3b01      	subs	r3, #1
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	2201      	movs	r2, #1
 8004158:	409a      	lsls	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800415e:	bf00      	nop
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	1000823f 	.word	0x1000823f
 8004170:	40020940 	.word	0x40020940

08004174 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800417e:	2300      	movs	r3, #0
 8004180:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004182:	e14c      	b.n	800441e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	2101      	movs	r1, #1
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	fa01 f303 	lsl.w	r3, r1, r3
 8004190:	4013      	ands	r3, r2
 8004192:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 813e 	beq.w	8004418 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f003 0303 	and.w	r3, r3, #3
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d005      	beq.n	80041b4 <HAL_GPIO_Init+0x40>
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f003 0303 	and.w	r3, r3, #3
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d130      	bne.n	8004216 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	2203      	movs	r2, #3
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	43db      	mvns	r3, r3
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4013      	ands	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	68da      	ldr	r2, [r3, #12]
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041ea:	2201      	movs	r2, #1
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	fa02 f303 	lsl.w	r3, r2, r3
 80041f2:	43db      	mvns	r3, r3
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4013      	ands	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	091b      	lsrs	r3, r3, #4
 8004200:	f003 0201 	and.w	r2, r3, #1
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	693a      	ldr	r2, [r7, #16]
 8004214:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	2b03      	cmp	r3, #3
 8004220:	d017      	beq.n	8004252 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	2203      	movs	r2, #3
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	43db      	mvns	r3, r3
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	4013      	ands	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	689a      	ldr	r2, [r3, #8]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	fa02 f303 	lsl.w	r3, r2, r3
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f003 0303 	and.w	r3, r3, #3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d123      	bne.n	80042a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	08da      	lsrs	r2, r3, #3
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	3208      	adds	r2, #8
 8004266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800426a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	220f      	movs	r2, #15
 8004276:	fa02 f303 	lsl.w	r3, r2, r3
 800427a:	43db      	mvns	r3, r3
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4013      	ands	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	691a      	ldr	r2, [r3, #16]
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	08da      	lsrs	r2, r3, #3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3208      	adds	r2, #8
 80042a0:	6939      	ldr	r1, [r7, #16]
 80042a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	2203      	movs	r2, #3
 80042b2:	fa02 f303 	lsl.w	r3, r2, r3
 80042b6:	43db      	mvns	r3, r3
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4013      	ands	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f003 0203 	and.w	r2, r3, #3
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f000 8098 	beq.w	8004418 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80042e8:	4a54      	ldr	r2, [pc, #336]	; (800443c <HAL_GPIO_Init+0x2c8>)
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	089b      	lsrs	r3, r3, #2
 80042ee:	3302      	adds	r3, #2
 80042f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f003 0303 	and.w	r3, r3, #3
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	220f      	movs	r2, #15
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	43db      	mvns	r3, r3
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	4013      	ands	r3, r2
 800430a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004312:	d019      	beq.n	8004348 <HAL_GPIO_Init+0x1d4>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a4a      	ldr	r2, [pc, #296]	; (8004440 <HAL_GPIO_Init+0x2cc>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d013      	beq.n	8004344 <HAL_GPIO_Init+0x1d0>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a49      	ldr	r2, [pc, #292]	; (8004444 <HAL_GPIO_Init+0x2d0>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d00d      	beq.n	8004340 <HAL_GPIO_Init+0x1cc>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a48      	ldr	r2, [pc, #288]	; (8004448 <HAL_GPIO_Init+0x2d4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d007      	beq.n	800433c <HAL_GPIO_Init+0x1c8>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a47      	ldr	r2, [pc, #284]	; (800444c <HAL_GPIO_Init+0x2d8>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d101      	bne.n	8004338 <HAL_GPIO_Init+0x1c4>
 8004334:	2304      	movs	r3, #4
 8004336:	e008      	b.n	800434a <HAL_GPIO_Init+0x1d6>
 8004338:	2307      	movs	r3, #7
 800433a:	e006      	b.n	800434a <HAL_GPIO_Init+0x1d6>
 800433c:	2303      	movs	r3, #3
 800433e:	e004      	b.n	800434a <HAL_GPIO_Init+0x1d6>
 8004340:	2302      	movs	r3, #2
 8004342:	e002      	b.n	800434a <HAL_GPIO_Init+0x1d6>
 8004344:	2301      	movs	r3, #1
 8004346:	e000      	b.n	800434a <HAL_GPIO_Init+0x1d6>
 8004348:	2300      	movs	r3, #0
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	f002 0203 	and.w	r2, r2, #3
 8004350:	0092      	lsls	r2, r2, #2
 8004352:	4093      	lsls	r3, r2
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800435a:	4938      	ldr	r1, [pc, #224]	; (800443c <HAL_GPIO_Init+0x2c8>)
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	089b      	lsrs	r3, r3, #2
 8004360:	3302      	adds	r3, #2
 8004362:	693a      	ldr	r2, [r7, #16]
 8004364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004368:	4b39      	ldr	r3, [pc, #228]	; (8004450 <HAL_GPIO_Init+0x2dc>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	43db      	mvns	r3, r3
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	4013      	ands	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800438c:	4a30      	ldr	r2, [pc, #192]	; (8004450 <HAL_GPIO_Init+0x2dc>)
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004392:	4b2f      	ldr	r3, [pc, #188]	; (8004450 <HAL_GPIO_Init+0x2dc>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	43db      	mvns	r3, r3
 800439c:	693a      	ldr	r2, [r7, #16]
 800439e:	4013      	ands	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d003      	beq.n	80043b6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043b6:	4a26      	ldr	r2, [pc, #152]	; (8004450 <HAL_GPIO_Init+0x2dc>)
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80043bc:	4b24      	ldr	r3, [pc, #144]	; (8004450 <HAL_GPIO_Init+0x2dc>)
 80043be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	43db      	mvns	r3, r3
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	4013      	ands	r3, r2
 80043cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4313      	orrs	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80043e2:	4a1b      	ldr	r2, [pc, #108]	; (8004450 <HAL_GPIO_Init+0x2dc>)
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80043ea:	4b19      	ldr	r3, [pc, #100]	; (8004450 <HAL_GPIO_Init+0x2dc>)
 80043ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	43db      	mvns	r3, r3
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4013      	ands	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d003      	beq.n	8004410 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4313      	orrs	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004410:	4a0f      	ldr	r2, [pc, #60]	; (8004450 <HAL_GPIO_Init+0x2dc>)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	3301      	adds	r3, #1
 800441c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	fa22 f303 	lsr.w	r3, r2, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	f47f aeab 	bne.w	8004184 <HAL_GPIO_Init+0x10>
  }
}
 800442e:	bf00      	nop
 8004430:	bf00      	nop
 8004432:	371c      	adds	r7, #28
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr
 800443c:	40010000 	.word	0x40010000
 8004440:	48000400 	.word	0x48000400
 8004444:	48000800 	.word	0x48000800
 8004448:	48000c00 	.word	0x48000c00
 800444c:	48001000 	.word	0x48001000
 8004450:	58000800 	.word	0x58000800

08004454 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	460b      	mov	r3, r1
 800445e:	807b      	strh	r3, [r7, #2]
 8004460:	4613      	mov	r3, r2
 8004462:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004464:	787b      	ldrb	r3, [r7, #1]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800446a:	887a      	ldrh	r2, [r7, #2]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004470:	e002      	b.n	8004478 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004472:	887a      	ldrh	r2, [r7, #2]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
 800448a:	4603      	mov	r3, r0
 800448c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800448e:	4b08      	ldr	r3, [pc, #32]	; (80044b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	88fb      	ldrh	r3, [r7, #6]
 8004494:	4013      	ands	r3, r2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d006      	beq.n	80044a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800449a:	4a05      	ldr	r2, [pc, #20]	; (80044b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800449c:	88fb      	ldrh	r3, [r7, #6]
 800449e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044a0:	88fb      	ldrh	r3, [r7, #6]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fd f91c 	bl	80016e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80044a8:	bf00      	nop
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	58000800 	.word	0x58000800

080044b4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80044ba:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <HAL_HSEM_IRQHandler+0x30>)
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80044c0:	4b08      	ldr	r3, [pc, #32]	; (80044e4 <HAL_HSEM_IRQHandler+0x30>)
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	43db      	mvns	r3, r3
 80044c8:	4906      	ldr	r1, [pc, #24]	; (80044e4 <HAL_HSEM_IRQHandler+0x30>)
 80044ca:	4013      	ands	r3, r2
 80044cc:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80044ce:	4a05      	ldr	r2, [pc, #20]	; (80044e4 <HAL_HSEM_IRQHandler+0x30>)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f807 	bl	80044e8 <HAL_HSEM_FreeCallback>
}
 80044da:	bf00      	nop
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	58001500 	.word	0x58001500

080044e8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80044f0:	bf00      	nop
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d01e      	beq.n	800454c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800450e:	4b13      	ldr	r3, [pc, #76]	; (800455c <HAL_IPCC_Init+0x60>)
 8004510:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d102      	bne.n	8004524 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fe fd8a 	bl	8003038 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8004524:	68b8      	ldr	r0, [r7, #8]
 8004526:	f000 f85b 	bl	80045e0 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f82c 	bl	8004594 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800454a:	e001      	b.n	8004550 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8004550:	7bfb      	ldrb	r3, [r7, #15]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	58000c00 	.word	0x58000c00

08004560 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	4613      	mov	r3, r2
 800456c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800456e:	bf00      	nop
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800457a:	b480      	push	{r7}
 800457c:	b085      	sub	sp, #20
 800457e:	af00      	add	r7, sp, #0
 8004580:	60f8      	str	r0, [r7, #12]
 8004582:	60b9      	str	r1, [r7, #8]
 8004584:	4613      	mov	r3, r2
 8004586:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004588:	bf00      	nop
 800458a:	3714      	adds	r7, #20
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800459c:	2300      	movs	r3, #0
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	e00f      	b.n	80045c2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	4413      	add	r3, r2
 80045aa:	4a0b      	ldr	r2, [pc, #44]	; (80045d8 <IPCC_SetDefaultCallbacks+0x44>)
 80045ac:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	3306      	adds	r3, #6
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	4413      	add	r3, r2
 80045b8:	4a08      	ldr	r2, [pc, #32]	; (80045dc <IPCC_SetDefaultCallbacks+0x48>)
 80045ba:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	3301      	adds	r3, #1
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2b05      	cmp	r3, #5
 80045c6:	d9ec      	bls.n	80045a2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	08004561 	.word	0x08004561
 80045dc:	0800457b 	.word	0x0800457b

080045e0 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80045f4:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	223f      	movs	r2, #63	; 0x3f
 80045fa:	609a      	str	r2, [r3, #8]
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e0c0      	b.n	800479c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fe fe40 	bl	80032b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2203      	movs	r2, #3
 8004638:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4618      	mov	r0, r3
 8004642:	f004 fadd 	bl	8008c00 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004646:	2300      	movs	r3, #0
 8004648:	73fb      	strb	r3, [r7, #15]
 800464a:	e03e      	b.n	80046ca <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800464c:	7bfa      	ldrb	r2, [r7, #15]
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	440b      	add	r3, r1
 800465a:	3311      	adds	r3, #17
 800465c:	2201      	movs	r2, #1
 800465e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004660:	7bfa      	ldrb	r2, [r7, #15]
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	440b      	add	r3, r1
 800466e:	3310      	adds	r3, #16
 8004670:	7bfa      	ldrb	r2, [r7, #15]
 8004672:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004674:	7bfa      	ldrb	r2, [r7, #15]
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	440b      	add	r3, r1
 8004682:	3313      	adds	r3, #19
 8004684:	2200      	movs	r2, #0
 8004686:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004688:	7bfa      	ldrb	r2, [r7, #15]
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	4613      	mov	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	440b      	add	r3, r1
 8004696:	3320      	adds	r3, #32
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800469c:	7bfa      	ldrb	r2, [r7, #15]
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	440b      	add	r3, r1
 80046aa:	3324      	adds	r3, #36	; 0x24
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	1c5a      	adds	r2, r3, #1
 80046b6:	4613      	mov	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	4413      	add	r3, r2
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	440b      	add	r3, r1
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
 80046c6:	3301      	adds	r3, #1
 80046c8:	73fb      	strb	r3, [r7, #15]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	791b      	ldrb	r3, [r3, #4]
 80046ce:	7bfa      	ldrb	r2, [r7, #15]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d3bb      	bcc.n	800464c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046d4:	2300      	movs	r3, #0
 80046d6:	73fb      	strb	r3, [r7, #15]
 80046d8:	e044      	b.n	8004764 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046da:	7bfa      	ldrb	r2, [r7, #15]
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	4613      	mov	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	440b      	add	r3, r1
 80046e8:	f203 1351 	addw	r3, r3, #337	; 0x151
 80046ec:	2200      	movs	r2, #0
 80046ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80046f0:	7bfa      	ldrb	r2, [r7, #15]
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	4613      	mov	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	440b      	add	r3, r1
 80046fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004702:	7bfa      	ldrb	r2, [r7, #15]
 8004704:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004706:	7bfa      	ldrb	r2, [r7, #15]
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	4613      	mov	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	440b      	add	r3, r1
 8004714:	f203 1353 	addw	r3, r3, #339	; 0x153
 8004718:	2200      	movs	r2, #0
 800471a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800471c:	7bfa      	ldrb	r2, [r7, #15]
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	4613      	mov	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	440b      	add	r3, r1
 800472a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800472e:	2200      	movs	r2, #0
 8004730:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004732:	7bfa      	ldrb	r2, [r7, #15]
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	4613      	mov	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	440b      	add	r3, r1
 8004740:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004748:	7bfa      	ldrb	r2, [r7, #15]
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	4613      	mov	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4413      	add	r3, r2
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	440b      	add	r3, r1
 8004756:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800475a:	2200      	movs	r2, #0
 800475c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800475e:	7bfb      	ldrb	r3, [r7, #15]
 8004760:	3301      	adds	r3, #1
 8004762:	73fb      	strb	r3, [r7, #15]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	791b      	ldrb	r3, [r3, #4]
 8004768:	7bfa      	ldrb	r2, [r7, #15]
 800476a:	429a      	cmp	r2, r3
 800476c:	d3b5      	bcc.n	80046da <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	3304      	adds	r3, #4
 8004776:	e893 0006 	ldmia.w	r3, {r1, r2}
 800477a:	f004 fa5c 	bl	8008c36 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	7a9b      	ldrb	r3, [r3, #10]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d102      	bne.n	800479a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f805 	bl	80047a4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3710      	adds	r7, #16
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	f043 0301 	orr.w	r3, r3, #1
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80047dc:	b29b      	uxth	r3, r3
 80047de:	f043 0302 	orr.w	r3, r3, #2
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047fc:	4b05      	ldr	r3, [pc, #20]	; (8004814 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a04      	ldr	r2, [pc, #16]	; (8004814 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004806:	6013      	str	r3, [r2, #0]
}
 8004808:	bf00      	nop
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	58000400 	.word	0x58000400

08004818 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800481c:	4b04      	ldr	r3, [pc, #16]	; (8004830 <HAL_PWREx_GetVoltageRange+0x18>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004824:	4618      	mov	r0, r3
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	58000400 	.word	0x58000400

08004834 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004834:	b480      	push	{r7}
 8004836:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004842:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004846:	d101      	bne.n	800484c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004848:	2301      	movs	r3, #1
 800484a:	e000      	b.n	800484e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <LL_RCC_HSE_Enable>:
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800485c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004866:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800486a:	6013      	str	r3, [r2, #0]
}
 800486c:	bf00      	nop
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <LL_RCC_HSE_Disable>:
{
 8004876:	b480      	push	{r7}
 8004878:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800487a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004884:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004888:	6013      	str	r3, [r2, #0]
}
 800488a:	bf00      	nop
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <LL_RCC_HSE_IsReady>:
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048a6:	d101      	bne.n	80048ac <LL_RCC_HSE_IsReady+0x18>
 80048a8:	2301      	movs	r3, #1
 80048aa:	e000      	b.n	80048ae <LL_RCC_HSE_IsReady+0x1a>
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <LL_RCC_HSI_Enable>:
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80048bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ca:	6013      	str	r3, [r2, #0]
}
 80048cc:	bf00      	nop
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <LL_RCC_HSI_Disable>:
{
 80048d6:	b480      	push	{r7}
 80048d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80048da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048e8:	6013      	str	r3, [r2, #0]
}
 80048ea:	bf00      	nop
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <LL_RCC_HSI_IsReady>:
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80048f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004906:	d101      	bne.n	800490c <LL_RCC_HSI_IsReady+0x18>
 8004908:	2301      	movs	r3, #1
 800490a:	e000      	b.n	800490e <LL_RCC_HSI_IsReady+0x1a>
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	061b      	lsls	r3, r3, #24
 800492e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004932:	4313      	orrs	r3, r2
 8004934:	604b      	str	r3, [r1, #4]
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <LL_RCC_HSI48_Enable>:
{
 8004942:	b480      	push	{r7}
 8004944:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800494e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004952:	f043 0301 	orr.w	r3, r3, #1
 8004956:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800495a:	bf00      	nop
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <LL_RCC_HSI48_Disable>:
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8004968:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800496c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004970:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004974:	f023 0301 	bic.w	r3, r3, #1
 8004978:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800497c:	bf00      	nop
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <LL_RCC_HSI48_IsReady>:
{
 8004986:	b480      	push	{r7}
 8004988:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800498a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800498e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b02      	cmp	r3, #2
 8004998:	d101      	bne.n	800499e <LL_RCC_HSI48_IsReady+0x18>
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <LL_RCC_HSI48_IsReady+0x1a>
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <LL_RCC_LSE_Enable>:
{
 80049aa:	b480      	push	{r7}
 80049ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80049ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049ba:	f043 0301 	orr.w	r3, r3, #1
 80049be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80049c2:	bf00      	nop
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <LL_RCC_LSE_Disable>:
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80049d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049dc:	f023 0301 	bic.w	r3, r3, #1
 80049e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80049e4:	bf00      	nop
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <LL_RCC_LSE_EnableBypass>:
{
 80049ee:	b480      	push	{r7}
 80049f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80049f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049fe:	f043 0304 	orr.w	r3, r3, #4
 8004a02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004a06:	bf00      	nop
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <LL_RCC_LSE_DisableBypass>:
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a20:	f023 0304 	bic.w	r3, r3, #4
 8004a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004a28:	bf00      	nop
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <LL_RCC_LSE_IsReady>:
{
 8004a32:	b480      	push	{r7}
 8004a34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004a36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d101      	bne.n	8004a4a <LL_RCC_LSE_IsReady+0x18>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <LL_RCC_LSE_IsReady+0x1a>
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <LL_RCC_LSI1_Enable>:
{
 8004a56:	b480      	push	{r7}
 8004a58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004a5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a66:	f043 0301 	orr.w	r3, r3, #1
 8004a6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004a6e:	bf00      	nop
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <LL_RCC_LSI1_Disable>:
{
 8004a78:	b480      	push	{r7}
 8004a7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a88:	f023 0301 	bic.w	r3, r3, #1
 8004a8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004a90:	bf00      	nop
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr

08004a9a <LL_RCC_LSI1_IsReady>:
{
 8004a9a:	b480      	push	{r7}
 8004a9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d101      	bne.n	8004ab2 <LL_RCC_LSI1_IsReady+0x18>
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e000      	b.n	8004ab4 <LL_RCC_LSI1_IsReady+0x1a>
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr

08004abe <LL_RCC_LSI2_Enable>:
{
 8004abe:	b480      	push	{r7}
 8004ac0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004ac2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ace:	f043 0304 	orr.w	r3, r3, #4
 8004ad2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004ad6:	bf00      	nop
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <LL_RCC_LSI2_Disable>:
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004aec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004af0:	f023 0304 	bic.w	r3, r3, #4
 8004af4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004af8:	bf00      	nop
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <LL_RCC_LSI2_IsReady>:
{
 8004b02:	b480      	push	{r7}
 8004b04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b08      	cmp	r3, #8
 8004b14:	d101      	bne.n	8004b1a <LL_RCC_LSI2_IsReady+0x18>
 8004b16:	2301      	movs	r3, #1
 8004b18:	e000      	b.n	8004b1c <LL_RCC_LSI2_IsReady+0x1a>
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <LL_RCC_LSI2_SetTrimming>:
{
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004b2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b36:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	021b      	lsls	r3, r3, #8
 8004b3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b42:	4313      	orrs	r3, r2
 8004b44:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004b48:	bf00      	nop
 8004b4a:	370c      	adds	r7, #12
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <LL_RCC_MSI_Enable>:
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b62:	f043 0301 	orr.w	r3, r3, #1
 8004b66:	6013      	str	r3, [r2, #0]
}
 8004b68:	bf00      	nop
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <LL_RCC_MSI_Disable>:
{
 8004b72:	b480      	push	{r7}
 8004b74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004b76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b80:	f023 0301 	bic.w	r3, r3, #1
 8004b84:	6013      	str	r3, [r2, #0]
}
 8004b86:	bf00      	nop
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <LL_RCC_MSI_IsReady>:
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0302 	and.w	r3, r3, #2
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d101      	bne.n	8004ba6 <LL_RCC_MSI_IsReady+0x16>
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e000      	b.n	8004ba8 <LL_RCC_MSI_IsReady+0x18>
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <LL_RCC_MSI_SetRange>:
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b083      	sub	sp, #12
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	600b      	str	r3, [r1, #0]
}
 8004bce:	bf00      	nop
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <LL_RCC_MSI_GetRange>:
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b083      	sub	sp, #12
 8004bde:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bea:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2bb0      	cmp	r3, #176	; 0xb0
 8004bf0:	d901      	bls.n	8004bf6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004bf2:	23b0      	movs	r3, #176	; 0xb0
 8004bf4:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004bf6:	687b      	ldr	r3, [r7, #4]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	021b      	lsls	r3, r3, #8
 8004c1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	604b      	str	r3, [r1, #4]
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <LL_RCC_SetSysClkSource>:
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004c36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f023 0203 	bic.w	r2, r3, #3
 8004c40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	608b      	str	r3, [r1, #8]
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <LL_RCC_GetSysClkSource>:
{
 8004c56:	b480      	push	{r7}
 8004c58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f003 030c 	and.w	r3, r3, #12
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <LL_RCC_SetAHBPrescaler>:
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	608b      	str	r3, [r1, #8]
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <LL_C2_RCC_SetAHBPrescaler>:
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ca6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004caa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <LL_RCC_SetAHB4Prescaler>:
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004cd2:	f023 020f 	bic.w	r2, r3, #15
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	091b      	lsrs	r3, r3, #4
 8004cda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <LL_RCC_SetAPB1Prescaler>:
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	608b      	str	r3, [r1, #8]
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <LL_RCC_SetAPB2Prescaler>:
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	608b      	str	r3, [r1, #8]
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <LL_RCC_GetAHBPrescaler>:
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <LL_RCC_GetAHB4Prescaler>:
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d60:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d64:	011b      	lsls	r3, r3, #4
 8004d66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <LL_RCC_GetAPB1Prescaler>:
{
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <LL_RCC_GetAPB2Prescaler>:
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004d90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004db2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004db6:	6013      	str	r3, [r2, #0]
}
 8004db8:	bf00      	nop
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dd4:	6013      	str	r3, [r2, #0]
}
 8004dd6:	bf00      	nop
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004df2:	d101      	bne.n	8004df8 <LL_RCC_PLL_IsReady+0x18>
 8004df4:	2301      	movs	r3, #1
 8004df6:	e000      	b.n	8004dfa <LL_RCC_PLL_IsReady+0x1a>
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	0a1b      	lsrs	r3, r3, #8
 8004e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr

08004e36 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004e36:	b480      	push	{r7}
 8004e38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004e3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004e52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f003 0303 	and.w	r3, r3, #3
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004e66:	b480      	push	{r7}
 8004e68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004e6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e78:	d101      	bne.n	8004e7e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e92:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e9e:	d101      	bne.n	8004ea4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e000      	b.n	8004ea6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eb8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec4:	d101      	bne.n	8004eca <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e000      	b.n	8004ecc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr

08004ed6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004eda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ee4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ee8:	d101      	bne.n	8004eee <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004eea:	2301      	movs	r3, #1
 8004eec:	e000      	b.n	8004ef0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004efa:	b480      	push	{r7}
 8004efc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f0c:	d101      	bne.n	8004f12 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e000      	b.n	8004f14 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
	...

08004f20 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f20:	b590      	push	{r4, r7, lr}
 8004f22:	b08d      	sub	sp, #52	; 0x34
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e363      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	f000 808d 	beq.w	800505a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f40:	f7ff fe89 	bl	8004c56 <LL_RCC_GetSysClkSource>
 8004f44:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f46:	f7ff ff82 	bl	8004e4e <LL_RCC_PLL_GetMainSource>
 8004f4a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d005      	beq.n	8004f5e <HAL_RCC_OscConfig+0x3e>
 8004f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f54:	2b0c      	cmp	r3, #12
 8004f56:	d147      	bne.n	8004fe8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d144      	bne.n	8004fe8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d101      	bne.n	8004f6a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e347      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004f6e:	f7ff fe34 	bl	8004bda <LL_RCC_MSI_GetRange>
 8004f72:	4603      	mov	r3, r0
 8004f74:	429c      	cmp	r4, r3
 8004f76:	d914      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 fd2f 	bl	80059e0 <RCC_SetFlashLatencyFromMSIRange>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d001      	beq.n	8004f8c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e336      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7ff fe0e 	bl	8004bb2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7ff fe32 	bl	8004c04 <LL_RCC_MSI_SetCalibTrimming>
 8004fa0:	e013      	b.n	8004fca <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7ff fe03 	bl	8004bb2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a1b      	ldr	r3, [r3, #32]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7ff fe27 	bl	8004c04 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fd10 	bl	80059e0 <RCC_SetFlashLatencyFromMSIRange>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e317      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004fca:	f000 fcc9 	bl	8005960 <HAL_RCC_GetHCLKFreq>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	4aa4      	ldr	r2, [pc, #656]	; (8005264 <HAL_RCC_OscConfig+0x344>)
 8004fd2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004fd4:	4ba4      	ldr	r3, [pc, #656]	; (8005268 <HAL_RCC_OscConfig+0x348>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7fe fb81 	bl	80036e0 <HAL_InitTick>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d039      	beq.n	8005058 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e308      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	69db      	ldr	r3, [r3, #28]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d01e      	beq.n	800502e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ff0:	f7ff fdb0 	bl	8004b54 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ff4:	f7fe fbc2 	bl	800377c <HAL_GetTick>
 8004ff8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ffc:	f7fe fbbe 	bl	800377c <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e2f5      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800500e:	f7ff fdbf 	bl	8004b90 <LL_RCC_MSI_IsReady>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0f1      	beq.n	8004ffc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	4618      	mov	r0, r3
 800501e:	f7ff fdc8 	bl	8004bb2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff fdec 	bl	8004c04 <LL_RCC_MSI_SetCalibTrimming>
 800502c:	e015      	b.n	800505a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800502e:	f7ff fda0 	bl	8004b72 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005032:	f7fe fba3 	bl	800377c <HAL_GetTick>
 8005036:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8005038:	e008      	b.n	800504c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800503a:	f7fe fb9f 	bl	800377c <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	2b02      	cmp	r3, #2
 8005046:	d901      	bls.n	800504c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e2d6      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800504c:	f7ff fda0 	bl	8004b90 <LL_RCC_MSI_IsReady>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1f1      	bne.n	800503a <HAL_RCC_OscConfig+0x11a>
 8005056:	e000      	b.n	800505a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005058:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	d047      	beq.n	80050f6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005066:	f7ff fdf6 	bl	8004c56 <LL_RCC_GetSysClkSource>
 800506a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800506c:	f7ff feef 	bl	8004e4e <LL_RCC_PLL_GetMainSource>
 8005070:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005072:	6a3b      	ldr	r3, [r7, #32]
 8005074:	2b08      	cmp	r3, #8
 8005076:	d005      	beq.n	8005084 <HAL_RCC_OscConfig+0x164>
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	2b0c      	cmp	r3, #12
 800507c:	d108      	bne.n	8005090 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	2b03      	cmp	r3, #3
 8005082:	d105      	bne.n	8005090 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d134      	bne.n	80050f6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e2b4      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005098:	d102      	bne.n	80050a0 <HAL_RCC_OscConfig+0x180>
 800509a:	f7ff fbdd 	bl	8004858 <LL_RCC_HSE_Enable>
 800509e:	e001      	b.n	80050a4 <HAL_RCC_OscConfig+0x184>
 80050a0:	f7ff fbe9 	bl	8004876 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d012      	beq.n	80050d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ac:	f7fe fb66 	bl	800377c <HAL_GetTick>
 80050b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050b4:	f7fe fb62 	bl	800377c <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b64      	cmp	r3, #100	; 0x64
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e299      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80050c6:	f7ff fbe5 	bl	8004894 <LL_RCC_HSE_IsReady>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0f1      	beq.n	80050b4 <HAL_RCC_OscConfig+0x194>
 80050d0:	e011      	b.n	80050f6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d2:	f7fe fb53 	bl	800377c <HAL_GetTick>
 80050d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80050d8:	e008      	b.n	80050ec <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050da:	f7fe fb4f 	bl	800377c <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b64      	cmp	r3, #100	; 0x64
 80050e6:	d901      	bls.n	80050ec <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e286      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 80050ec:	f7ff fbd2 	bl	8004894 <LL_RCC_HSE_IsReady>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f1      	bne.n	80050da <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d04c      	beq.n	800519c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005102:	f7ff fda8 	bl	8004c56 <LL_RCC_GetSysClkSource>
 8005106:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005108:	f7ff fea1 	bl	8004e4e <LL_RCC_PLL_GetMainSource>
 800510c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	2b04      	cmp	r3, #4
 8005112:	d005      	beq.n	8005120 <HAL_RCC_OscConfig+0x200>
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	2b0c      	cmp	r3, #12
 8005118:	d10e      	bne.n	8005138 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	2b02      	cmp	r3, #2
 800511e:	d10b      	bne.n	8005138 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e266      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	4618      	mov	r0, r3
 8005132:	f7ff fbf1 	bl	8004918 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005136:	e031      	b.n	800519c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d019      	beq.n	8005174 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005140:	f7ff fbba 	bl	80048b8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005144:	f7fe fb1a 	bl	800377c <HAL_GetTick>
 8005148:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800514c:	f7fe fb16 	bl	800377c <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e24d      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800515e:	f7ff fbc9 	bl	80048f4 <LL_RCC_HSI_IsReady>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d0f1      	beq.n	800514c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	691b      	ldr	r3, [r3, #16]
 800516c:	4618      	mov	r0, r3
 800516e:	f7ff fbd3 	bl	8004918 <LL_RCC_HSI_SetCalibTrimming>
 8005172:	e013      	b.n	800519c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005174:	f7ff fbaf 	bl	80048d6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005178:	f7fe fb00 	bl	800377c <HAL_GetTick>
 800517c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005180:	f7fe fafc 	bl	800377c <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e233      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005192:	f7ff fbaf 	bl	80048f4 <LL_RCC_HSI_IsReady>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1f1      	bne.n	8005180 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0308 	and.w	r3, r3, #8
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d106      	bne.n	80051b6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 80a3 	beq.w	80052fc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d076      	beq.n	80052ac <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0310 	and.w	r3, r3, #16
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d046      	beq.n	8005258 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80051ca:	f7ff fc66 	bl	8004a9a <LL_RCC_LSI1_IsReady>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d113      	bne.n	80051fc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80051d4:	f7ff fc3f 	bl	8004a56 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80051d8:	f7fe fad0 	bl	800377c <HAL_GetTick>
 80051dc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80051e0:	f7fe facc 	bl	800377c <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e203      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 80051f2:	f7ff fc52 	bl	8004a9a <LL_RCC_LSI1_IsReady>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0f1      	beq.n	80051e0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80051fc:	f7ff fc5f 	bl	8004abe <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005200:	f7fe fabc 	bl	800377c <HAL_GetTick>
 8005204:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005208:	f7fe fab8 	bl	800377c <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b03      	cmp	r3, #3
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e1ef      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800521a:	f7ff fc72 	bl	8004b02 <LL_RCC_LSI2_IsReady>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d0f1      	beq.n	8005208 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	4618      	mov	r0, r3
 800522a:	f7ff fc7c 	bl	8004b26 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800522e:	f7ff fc23 	bl	8004a78 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005232:	f7fe faa3 	bl	800377c <HAL_GetTick>
 8005236:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800523a:	f7fe fa9f 	bl	800377c <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e1d6      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800524c:	f7ff fc25 	bl	8004a9a <LL_RCC_LSI1_IsReady>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1f1      	bne.n	800523a <HAL_RCC_OscConfig+0x31a>
 8005256:	e051      	b.n	80052fc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005258:	f7ff fbfd 	bl	8004a56 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800525c:	f7fe fa8e 	bl	800377c <HAL_GetTick>
 8005260:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005262:	e00c      	b.n	800527e <HAL_RCC_OscConfig+0x35e>
 8005264:	20000008 	.word	0x20000008
 8005268:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800526c:	f7fe fa86 	bl	800377c <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e1bd      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800527e:	f7ff fc0c 	bl	8004a9a <LL_RCC_LSI1_IsReady>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d0f1      	beq.n	800526c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005288:	f7ff fc2a 	bl	8004ae0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800528c:	e008      	b.n	80052a0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800528e:	f7fe fa75 	bl	800377c <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b03      	cmp	r3, #3
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e1ac      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80052a0:	f7ff fc2f 	bl	8004b02 <LL_RCC_LSI2_IsReady>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1f1      	bne.n	800528e <HAL_RCC_OscConfig+0x36e>
 80052aa:	e027      	b.n	80052fc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80052ac:	f7ff fc18 	bl	8004ae0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b0:	f7fe fa64 	bl	800377c <HAL_GetTick>
 80052b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80052b8:	f7fe fa60 	bl	800377c <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b03      	cmp	r3, #3
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e197      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80052ca:	f7ff fc1a 	bl	8004b02 <LL_RCC_LSI2_IsReady>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1f1      	bne.n	80052b8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80052d4:	f7ff fbd0 	bl	8004a78 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d8:	f7fe fa50 	bl	800377c <HAL_GetTick>
 80052dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80052de:	e008      	b.n	80052f2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80052e0:	f7fe fa4c 	bl	800377c <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e183      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80052f2:	f7ff fbd2 	bl	8004a9a <LL_RCC_LSI1_IsReady>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1f1      	bne.n	80052e0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b00      	cmp	r3, #0
 8005306:	d05b      	beq.n	80053c0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005308:	4ba7      	ldr	r3, [pc, #668]	; (80055a8 <HAL_RCC_OscConfig+0x688>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005310:	2b00      	cmp	r3, #0
 8005312:	d114      	bne.n	800533e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005314:	f7ff fa70 	bl	80047f8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005318:	f7fe fa30 	bl	800377c <HAL_GetTick>
 800531c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005320:	f7fe fa2c 	bl	800377c <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e163      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005332:	4b9d      	ldr	r3, [pc, #628]	; (80055a8 <HAL_RCC_OscConfig+0x688>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800533a:	2b00      	cmp	r3, #0
 800533c:	d0f0      	beq.n	8005320 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d102      	bne.n	800534c <HAL_RCC_OscConfig+0x42c>
 8005346:	f7ff fb30 	bl	80049aa <LL_RCC_LSE_Enable>
 800534a:	e00c      	b.n	8005366 <HAL_RCC_OscConfig+0x446>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	2b05      	cmp	r3, #5
 8005352:	d104      	bne.n	800535e <HAL_RCC_OscConfig+0x43e>
 8005354:	f7ff fb4b 	bl	80049ee <LL_RCC_LSE_EnableBypass>
 8005358:	f7ff fb27 	bl	80049aa <LL_RCC_LSE_Enable>
 800535c:	e003      	b.n	8005366 <HAL_RCC_OscConfig+0x446>
 800535e:	f7ff fb35 	bl	80049cc <LL_RCC_LSE_Disable>
 8005362:	f7ff fb55 	bl	8004a10 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d014      	beq.n	8005398 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800536e:	f7fe fa05 	bl	800377c <HAL_GetTick>
 8005372:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005374:	e00a      	b.n	800538c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005376:	f7fe fa01 	bl	800377c <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	f241 3288 	movw	r2, #5000	; 0x1388
 8005384:	4293      	cmp	r3, r2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e136      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800538c:	f7ff fb51 	bl	8004a32 <LL_RCC_LSE_IsReady>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0ef      	beq.n	8005376 <HAL_RCC_OscConfig+0x456>
 8005396:	e013      	b.n	80053c0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005398:	f7fe f9f0 	bl	800377c <HAL_GetTick>
 800539c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800539e:	e00a      	b.n	80053b6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053a0:	f7fe f9ec 	bl	800377c <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e121      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80053b6:	f7ff fb3c 	bl	8004a32 <LL_RCC_LSE_IsReady>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1ef      	bne.n	80053a0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d02c      	beq.n	8005426 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d014      	beq.n	80053fe <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80053d4:	f7ff fab5 	bl	8004942 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d8:	f7fe f9d0 	bl	800377c <HAL_GetTick>
 80053dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80053de:	e008      	b.n	80053f2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053e0:	f7fe f9cc 	bl	800377c <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e103      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80053f2:	f7ff fac8 	bl	8004986 <LL_RCC_HSI48_IsReady>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d0f1      	beq.n	80053e0 <HAL_RCC_OscConfig+0x4c0>
 80053fc:	e013      	b.n	8005426 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80053fe:	f7ff fab1 	bl	8004964 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005402:	f7fe f9bb 	bl	800377c <HAL_GetTick>
 8005406:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005408:	e008      	b.n	800541c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800540a:	f7fe f9b7 	bl	800377c <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e0ee      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800541c:	f7ff fab3 	bl	8004986 <LL_RCC_HSI48_IsReady>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1f1      	bne.n	800540a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 80e4 	beq.w	80055f8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005430:	f7ff fc11 	bl	8004c56 <LL_RCC_GetSysClkSource>
 8005434:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005442:	2b02      	cmp	r3, #2
 8005444:	f040 80b4 	bne.w	80055b0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f003 0203 	and.w	r2, r3, #3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005452:	429a      	cmp	r2, r3
 8005454:	d123      	bne.n	800549e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005460:	429a      	cmp	r2, r3
 8005462:	d11c      	bne.n	800549e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	0a1b      	lsrs	r3, r3, #8
 8005468:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005470:	429a      	cmp	r2, r3
 8005472:	d114      	bne.n	800549e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800547e:	429a      	cmp	r2, r3
 8005480:	d10d      	bne.n	800549e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800548c:	429a      	cmp	r2, r3
 800548e:	d106      	bne.n	800549e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800549a:	429a      	cmp	r2, r3
 800549c:	d05d      	beq.n	800555a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	2b0c      	cmp	r3, #12
 80054a2:	d058      	beq.n	8005556 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80054a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e0a1      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80054b6:	f7ff fc84 	bl	8004dc2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80054ba:	f7fe f95f 	bl	800377c <HAL_GetTick>
 80054be:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054c0:	e008      	b.n	80054d4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054c2:	f7fe f95b 	bl	800377c <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e092      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1ef      	bne.n	80054c2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e6:	68da      	ldr	r2, [r3, #12]
 80054e8:	4b30      	ldr	r3, [pc, #192]	; (80055ac <HAL_RCC_OscConfig+0x68c>)
 80054ea:	4013      	ands	r3, r2
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80054f4:	4311      	orrs	r1, r2
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054fa:	0212      	lsls	r2, r2, #8
 80054fc:	4311      	orrs	r1, r2
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005502:	4311      	orrs	r1, r2
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005508:	4311      	orrs	r1, r2
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800550e:	430a      	orrs	r2, r1
 8005510:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005514:	4313      	orrs	r3, r2
 8005516:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005518:	f7ff fc44 	bl	8004da4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800551c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800552a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800552c:	f7fe f926 	bl	800377c <HAL_GetTick>
 8005530:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005532:	e008      	b.n	8005546 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005534:	f7fe f922 	bl	800377c <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e059      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0ef      	beq.n	8005534 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005554:	e050      	b.n	80055f8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e04f      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800555a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d147      	bne.n	80055f8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005568:	f7ff fc1c 	bl	8004da4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800556c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800557a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800557c:	f7fe f8fe 	bl	800377c <HAL_GetTick>
 8005580:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005584:	f7fe f8fa 	bl	800377c <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e031      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d0ef      	beq.n	8005584 <HAL_RCC_OscConfig+0x664>
 80055a4:	e028      	b.n	80055f8 <HAL_RCC_OscConfig+0x6d8>
 80055a6:	bf00      	nop
 80055a8:	58000400 	.word	0x58000400
 80055ac:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	2b0c      	cmp	r3, #12
 80055b4:	d01e      	beq.n	80055f4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055b6:	f7ff fc04 	bl	8004dc2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055ba:	f7fe f8df 	bl	800377c <HAL_GetTick>
 80055be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055c0:	e008      	b.n	80055d4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055c2:	f7fe f8db 	bl	800377c <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e012      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80055d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1ef      	bne.n	80055c2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80055e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055e6:	68da      	ldr	r2, [r3, #12]
 80055e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055ec:	4b05      	ldr	r3, [pc, #20]	; (8005604 <HAL_RCC_OscConfig+0x6e4>)
 80055ee:	4013      	ands	r3, r2
 80055f0:	60cb      	str	r3, [r1, #12]
 80055f2:	e001      	b.n	80055f8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e000      	b.n	80055fa <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3734      	adds	r7, #52	; 0x34
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd90      	pop	{r4, r7, pc}
 8005602:	bf00      	nop
 8005604:	eefefffc 	.word	0xeefefffc

08005608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e12d      	b.n	8005878 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800561c:	4b98      	ldr	r3, [pc, #608]	; (8005880 <HAL_RCC_ClockConfig+0x278>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0307 	and.w	r3, r3, #7
 8005624:	683a      	ldr	r2, [r7, #0]
 8005626:	429a      	cmp	r2, r3
 8005628:	d91b      	bls.n	8005662 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800562a:	4b95      	ldr	r3, [pc, #596]	; (8005880 <HAL_RCC_ClockConfig+0x278>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f023 0207 	bic.w	r2, r3, #7
 8005632:	4993      	ldr	r1, [pc, #588]	; (8005880 <HAL_RCC_ClockConfig+0x278>)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	4313      	orrs	r3, r2
 8005638:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800563a:	f7fe f89f 	bl	800377c <HAL_GetTick>
 800563e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005640:	e008      	b.n	8005654 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005642:	f7fe f89b 	bl	800377c <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d901      	bls.n	8005654 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e111      	b.n	8005878 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005654:	4b8a      	ldr	r3, [pc, #552]	; (8005880 <HAL_RCC_ClockConfig+0x278>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d1ef      	bne.n	8005642 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d016      	beq.n	800569c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	4618      	mov	r0, r3
 8005674:	f7ff fafb 	bl	8004c6e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005678:	f7fe f880 	bl	800377c <HAL_GetTick>
 800567c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800567e:	e008      	b.n	8005692 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005680:	f7fe f87c 	bl	800377c <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e0f2      	b.n	8005878 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005692:	f7ff fbe8 	bl	8004e66 <LL_RCC_IsActiveFlag_HPRE>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0f1      	beq.n	8005680 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0320 	and.w	r3, r3, #32
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d016      	beq.n	80056d6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7ff faf2 	bl	8004c96 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80056b2:	f7fe f863 	bl	800377c <HAL_GetTick>
 80056b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80056b8:	e008      	b.n	80056cc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80056ba:	f7fe f85f 	bl	800377c <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e0d5      	b.n	8005878 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80056cc:	f7ff fbdd 	bl	8004e8a <LL_RCC_IsActiveFlag_C2HPRE>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0f1      	beq.n	80056ba <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d016      	beq.n	8005710 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7ff faeb 	bl	8004cc2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80056ec:	f7fe f846 	bl	800377c <HAL_GetTick>
 80056f0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80056f2:	e008      	b.n	8005706 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80056f4:	f7fe f842 	bl	800377c <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d901      	bls.n	8005706 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e0b8      	b.n	8005878 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005706:	f7ff fbd3 	bl	8004eb0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0f1      	beq.n	80056f4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0304 	and.w	r3, r3, #4
 8005718:	2b00      	cmp	r3, #0
 800571a:	d016      	beq.n	800574a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff fae5 	bl	8004cf0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005726:	f7fe f829 	bl	800377c <HAL_GetTick>
 800572a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800572c:	e008      	b.n	8005740 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800572e:	f7fe f825 	bl	800377c <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e09b      	b.n	8005878 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005740:	f7ff fbc9 	bl	8004ed6 <LL_RCC_IsActiveFlag_PPRE1>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0f1      	beq.n	800572e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0308 	and.w	r3, r3, #8
 8005752:	2b00      	cmp	r3, #0
 8005754:	d017      	beq.n	8005786 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	00db      	lsls	r3, r3, #3
 800575c:	4618      	mov	r0, r3
 800575e:	f7ff fadb 	bl	8004d18 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005762:	f7fe f80b 	bl	800377c <HAL_GetTick>
 8005766:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005768:	e008      	b.n	800577c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800576a:	f7fe f807 	bl	800377c <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d901      	bls.n	800577c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e07d      	b.n	8005878 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800577c:	f7ff fbbd 	bl	8004efa <LL_RCC_IsActiveFlag_PPRE2>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0f1      	beq.n	800576a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	d043      	beq.n	800581a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	2b02      	cmp	r3, #2
 8005798:	d106      	bne.n	80057a8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800579a:	f7ff f87b 	bl	8004894 <LL_RCC_HSE_IsReady>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d11e      	bne.n	80057e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e067      	b.n	8005878 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	2b03      	cmp	r3, #3
 80057ae:	d106      	bne.n	80057be <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80057b0:	f7ff fb16 	bl	8004de0 <LL_RCC_PLL_IsReady>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d113      	bne.n	80057e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e05c      	b.n	8005878 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d106      	bne.n	80057d4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80057c6:	f7ff f9e3 	bl	8004b90 <LL_RCC_MSI_IsReady>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d108      	bne.n	80057e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e051      	b.n	8005878 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80057d4:	f7ff f88e 	bl	80048f4 <LL_RCC_HSI_IsReady>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e04a      	b.n	8005878 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7ff fa21 	bl	8004c2e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057ec:	f7fd ffc6 	bl	800377c <HAL_GetTick>
 80057f0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057f2:	e00a      	b.n	800580a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057f4:	f7fd ffc2 	bl	800377c <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005802:	4293      	cmp	r3, r2
 8005804:	d901      	bls.n	800580a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e036      	b.n	8005878 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800580a:	f7ff fa24 	bl	8004c56 <LL_RCC_GetSysClkSource>
 800580e:	4602      	mov	r2, r0
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	429a      	cmp	r2, r3
 8005818:	d1ec      	bne.n	80057f4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800581a:	4b19      	ldr	r3, [pc, #100]	; (8005880 <HAL_RCC_ClockConfig+0x278>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0307 	and.w	r3, r3, #7
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	429a      	cmp	r2, r3
 8005826:	d21b      	bcs.n	8005860 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005828:	4b15      	ldr	r3, [pc, #84]	; (8005880 <HAL_RCC_ClockConfig+0x278>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f023 0207 	bic.w	r2, r3, #7
 8005830:	4913      	ldr	r1, [pc, #76]	; (8005880 <HAL_RCC_ClockConfig+0x278>)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	4313      	orrs	r3, r2
 8005836:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005838:	f7fd ffa0 	bl	800377c <HAL_GetTick>
 800583c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800583e:	e008      	b.n	8005852 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005840:	f7fd ff9c 	bl	800377c <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d901      	bls.n	8005852 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e012      	b.n	8005878 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005852:	4b0b      	ldr	r3, [pc, #44]	; (8005880 <HAL_RCC_ClockConfig+0x278>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	429a      	cmp	r2, r3
 800585e:	d1ef      	bne.n	8005840 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005860:	f000 f87e 	bl	8005960 <HAL_RCC_GetHCLKFreq>
 8005864:	4603      	mov	r3, r0
 8005866:	4a07      	ldr	r2, [pc, #28]	; (8005884 <HAL_RCC_ClockConfig+0x27c>)
 8005868:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800586a:	f7fd ff93 	bl	8003794 <HAL_GetTickPrio>
 800586e:	4603      	mov	r3, r0
 8005870:	4618      	mov	r0, r3
 8005872:	f7fd ff35 	bl	80036e0 <HAL_InitTick>
 8005876:	4603      	mov	r3, r0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	58004000 	.word	0x58004000
 8005884:	20000008 	.word	0x20000008

08005888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005888:	b590      	push	{r4, r7, lr}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800588e:	f7ff f9e2 	bl	8004c56 <LL_RCC_GetSysClkSource>
 8005892:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10a      	bne.n	80058b0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800589a:	f7ff f99e 	bl	8004bda <LL_RCC_MSI_GetRange>
 800589e:	4603      	mov	r3, r0
 80058a0:	091b      	lsrs	r3, r3, #4
 80058a2:	f003 030f 	and.w	r3, r3, #15
 80058a6:	4a2b      	ldr	r2, [pc, #172]	; (8005954 <HAL_RCC_GetSysClockFreq+0xcc>)
 80058a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ac:	60fb      	str	r3, [r7, #12]
 80058ae:	e04b      	b.n	8005948 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b04      	cmp	r3, #4
 80058b4:	d102      	bne.n	80058bc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058b6:	4b28      	ldr	r3, [pc, #160]	; (8005958 <HAL_RCC_GetSysClockFreq+0xd0>)
 80058b8:	60fb      	str	r3, [r7, #12]
 80058ba:	e045      	b.n	8005948 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b08      	cmp	r3, #8
 80058c0:	d10a      	bne.n	80058d8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80058c2:	f7fe ffb7 	bl	8004834 <LL_RCC_HSE_IsEnabledDiv2>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d102      	bne.n	80058d2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80058cc:	4b22      	ldr	r3, [pc, #136]	; (8005958 <HAL_RCC_GetSysClockFreq+0xd0>)
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	e03a      	b.n	8005948 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80058d2:	4b22      	ldr	r3, [pc, #136]	; (800595c <HAL_RCC_GetSysClockFreq+0xd4>)
 80058d4:	60fb      	str	r3, [r7, #12]
 80058d6:	e037      	b.n	8005948 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80058d8:	f7ff fab9 	bl	8004e4e <LL_RCC_PLL_GetMainSource>
 80058dc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d003      	beq.n	80058ec <HAL_RCC_GetSysClockFreq+0x64>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	d003      	beq.n	80058f2 <HAL_RCC_GetSysClockFreq+0x6a>
 80058ea:	e00d      	b.n	8005908 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80058ec:	4b1a      	ldr	r3, [pc, #104]	; (8005958 <HAL_RCC_GetSysClockFreq+0xd0>)
 80058ee:	60bb      	str	r3, [r7, #8]
        break;
 80058f0:	e015      	b.n	800591e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80058f2:	f7fe ff9f 	bl	8004834 <LL_RCC_HSE_IsEnabledDiv2>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d102      	bne.n	8005902 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80058fc:	4b16      	ldr	r3, [pc, #88]	; (8005958 <HAL_RCC_GetSysClockFreq+0xd0>)
 80058fe:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005900:	e00d      	b.n	800591e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8005902:	4b16      	ldr	r3, [pc, #88]	; (800595c <HAL_RCC_GetSysClockFreq+0xd4>)
 8005904:	60bb      	str	r3, [r7, #8]
        break;
 8005906:	e00a      	b.n	800591e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005908:	f7ff f967 	bl	8004bda <LL_RCC_MSI_GetRange>
 800590c:	4603      	mov	r3, r0
 800590e:	091b      	lsrs	r3, r3, #4
 8005910:	f003 030f 	and.w	r3, r3, #15
 8005914:	4a0f      	ldr	r2, [pc, #60]	; (8005954 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800591a:	60bb      	str	r3, [r7, #8]
        break;
 800591c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800591e:	f7ff fa71 	bl	8004e04 <LL_RCC_PLL_GetN>
 8005922:	4602      	mov	r2, r0
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	fb03 f402 	mul.w	r4, r3, r2
 800592a:	f7ff fa84 	bl	8004e36 <LL_RCC_PLL_GetDivider>
 800592e:	4603      	mov	r3, r0
 8005930:	091b      	lsrs	r3, r3, #4
 8005932:	3301      	adds	r3, #1
 8005934:	fbb4 f4f3 	udiv	r4, r4, r3
 8005938:	f7ff fa71 	bl	8004e1e <LL_RCC_PLL_GetR>
 800593c:	4603      	mov	r3, r0
 800593e:	0f5b      	lsrs	r3, r3, #29
 8005940:	3301      	adds	r3, #1
 8005942:	fbb4 f3f3 	udiv	r3, r4, r3
 8005946:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005948:	68fb      	ldr	r3, [r7, #12]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	bd90      	pop	{r4, r7, pc}
 8005952:	bf00      	nop
 8005954:	0800fffc 	.word	0x0800fffc
 8005958:	00f42400 	.word	0x00f42400
 800595c:	01e84800 	.word	0x01e84800

08005960 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005960:	b598      	push	{r3, r4, r7, lr}
 8005962:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005964:	f7ff ff90 	bl	8005888 <HAL_RCC_GetSysClockFreq>
 8005968:	4604      	mov	r4, r0
 800596a:	f7ff f9e9 	bl	8004d40 <LL_RCC_GetAHBPrescaler>
 800596e:	4603      	mov	r3, r0
 8005970:	091b      	lsrs	r3, r3, #4
 8005972:	f003 030f 	and.w	r3, r3, #15
 8005976:	4a03      	ldr	r2, [pc, #12]	; (8005984 <HAL_RCC_GetHCLKFreq+0x24>)
 8005978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800597c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005980:	4618      	mov	r0, r3
 8005982:	bd98      	pop	{r3, r4, r7, pc}
 8005984:	0800ff9c 	.word	0x0800ff9c

08005988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005988:	b598      	push	{r3, r4, r7, lr}
 800598a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800598c:	f7ff ffe8 	bl	8005960 <HAL_RCC_GetHCLKFreq>
 8005990:	4604      	mov	r4, r0
 8005992:	f7ff f9ef 	bl	8004d74 <LL_RCC_GetAPB1Prescaler>
 8005996:	4603      	mov	r3, r0
 8005998:	0a1b      	lsrs	r3, r3, #8
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	4a04      	ldr	r2, [pc, #16]	; (80059b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059a4:	f003 031f 	and.w	r3, r3, #31
 80059a8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	bd98      	pop	{r3, r4, r7, pc}
 80059b0:	0800ffdc 	.word	0x0800ffdc

080059b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059b4:	b598      	push	{r3, r4, r7, lr}
 80059b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80059b8:	f7ff ffd2 	bl	8005960 <HAL_RCC_GetHCLKFreq>
 80059bc:	4604      	mov	r4, r0
 80059be:	f7ff f9e5 	bl	8004d8c <LL_RCC_GetAPB2Prescaler>
 80059c2:	4603      	mov	r3, r0
 80059c4:	0adb      	lsrs	r3, r3, #11
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	4a04      	ldr	r2, [pc, #16]	; (80059dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80059cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059d0:	f003 031f 	and.w	r3, r3, #31
 80059d4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80059d8:	4618      	mov	r0, r3
 80059da:	bd98      	pop	{r3, r4, r7, pc}
 80059dc:	0800ffdc 	.word	0x0800ffdc

080059e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80059e0:	b590      	push	{r4, r7, lr}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2bb0      	cmp	r3, #176	; 0xb0
 80059ec:	d903      	bls.n	80059f6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80059ee:	4b15      	ldr	r3, [pc, #84]	; (8005a44 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80059f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f2:	60fb      	str	r3, [r7, #12]
 80059f4:	e007      	b.n	8005a06 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	091b      	lsrs	r3, r3, #4
 80059fa:	f003 030f 	and.w	r3, r3, #15
 80059fe:	4a11      	ldr	r2, [pc, #68]	; (8005a44 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a04:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005a06:	f7ff f9a7 	bl	8004d58 <LL_RCC_GetAHB4Prescaler>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	091b      	lsrs	r3, r3, #4
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	4a0d      	ldr	r2, [pc, #52]	; (8005a48 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a1e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	4a0a      	ldr	r2, [pc, #40]	; (8005a4c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005a24:	fba2 2303 	umull	r2, r3, r2, r3
 8005a28:	0c9c      	lsrs	r4, r3, #18
 8005a2a:	f7fe fef5 	bl	8004818 <HAL_PWREx_GetVoltageRange>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	4619      	mov	r1, r3
 8005a32:	4620      	mov	r0, r4
 8005a34:	f000 f80c 	bl	8005a50 <RCC_SetFlashLatency>
 8005a38:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd90      	pop	{r4, r7, pc}
 8005a42:	bf00      	nop
 8005a44:	0800fffc 	.word	0x0800fffc
 8005a48:	0800ff9c 	.word	0x0800ff9c
 8005a4c:	431bde83 	.word	0x431bde83

08005a50 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005a50:	b590      	push	{r4, r7, lr}
 8005a52:	b093      	sub	sp, #76	; 0x4c
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005a5a:	4b37      	ldr	r3, [pc, #220]	; (8005b38 <RCC_SetFlashLatency+0xe8>)
 8005a5c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8005a60:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005a66:	4a35      	ldr	r2, [pc, #212]	; (8005b3c <RCC_SetFlashLatency+0xec>)
 8005a68:	f107 031c 	add.w	r3, r7, #28
 8005a6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005a6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005a72:	4b33      	ldr	r3, [pc, #204]	; (8005b40 <RCC_SetFlashLatency+0xf0>)
 8005a74:	f107 040c 	add.w	r4, r7, #12
 8005a78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005a7e:	2300      	movs	r3, #0
 8005a80:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a88:	d11a      	bne.n	8005ac0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	643b      	str	r3, [r7, #64]	; 0x40
 8005a8e:	e013      	b.n	8005ab8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	3348      	adds	r3, #72	; 0x48
 8005a96:	443b      	add	r3, r7
 8005a98:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d807      	bhi.n	8005ab2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	3348      	adds	r3, #72	; 0x48
 8005aa8:	443b      	add	r3, r7
 8005aaa:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005aae:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005ab0:	e020      	b.n	8005af4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aba:	2b03      	cmp	r3, #3
 8005abc:	d9e8      	bls.n	8005a90 <RCC_SetFlashLatency+0x40>
 8005abe:	e019      	b.n	8005af4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ac4:	e013      	b.n	8005aee <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	3348      	adds	r3, #72	; 0x48
 8005acc:	443b      	add	r3, r7
 8005ace:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d807      	bhi.n	8005ae8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	3348      	adds	r3, #72	; 0x48
 8005ade:	443b      	add	r3, r7
 8005ae0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005ae4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005ae6:	e005      	b.n	8005af4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aea:	3301      	adds	r3, #1
 8005aec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d9e8      	bls.n	8005ac6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005af4:	4b13      	ldr	r3, [pc, #76]	; (8005b44 <RCC_SetFlashLatency+0xf4>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f023 0207 	bic.w	r2, r3, #7
 8005afc:	4911      	ldr	r1, [pc, #68]	; (8005b44 <RCC_SetFlashLatency+0xf4>)
 8005afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b00:	4313      	orrs	r3, r2
 8005b02:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b04:	f7fd fe3a 	bl	800377c <HAL_GetTick>
 8005b08:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005b0a:	e008      	b.n	8005b1e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b0c:	f7fd fe36 	bl	800377c <HAL_GetTick>
 8005b10:	4602      	mov	r2, r0
 8005b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d901      	bls.n	8005b1e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e007      	b.n	8005b2e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005b1e:	4b09      	ldr	r3, [pc, #36]	; (8005b44 <RCC_SetFlashLatency+0xf4>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0307 	and.w	r3, r3, #7
 8005b26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d1ef      	bne.n	8005b0c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	374c      	adds	r7, #76	; 0x4c
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd90      	pop	{r4, r7, pc}
 8005b36:	bf00      	nop
 8005b38:	0800ed1c 	.word	0x0800ed1c
 8005b3c:	0800ed2c 	.word	0x0800ed2c
 8005b40:	0800ed38 	.word	0x0800ed38
 8005b44:	58004000 	.word	0x58004000

08005b48 <LL_RCC_LSE_IsEnabled>:
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d101      	bne.n	8005b60 <LL_RCC_LSE_IsEnabled+0x18>
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e000      	b.n	8005b62 <LL_RCC_LSE_IsEnabled+0x1a>
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <LL_RCC_LSE_IsReady>:
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d101      	bne.n	8005b84 <LL_RCC_LSE_IsReady+0x18>
 8005b80:	2301      	movs	r3, #1
 8005b82:	e000      	b.n	8005b86 <LL_RCC_LSE_IsReady+0x1a>
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <LL_RCC_MSI_EnablePLLMode>:
{
 8005b90:	b480      	push	{r7}
 8005b92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8005b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005b9e:	f043 0304 	orr.w	r3, r3, #4
 8005ba2:	6013      	str	r3, [r2, #0]
}
 8005ba4:	bf00      	nop
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <LL_RCC_SetRFWKPClockSource>:
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bbe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005bc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <LL_RCC_SetSMPSClockSource>:
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	f023 0203 	bic.w	r2, r3, #3
 8005bec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <LL_RCC_SetSMPSPrescaler>:
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005c1e:	bf00      	nop
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <LL_RCC_SetUSARTClockSource>:
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b083      	sub	sp, #12
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3a:	f023 0203 	bic.w	r2, r3, #3
 8005c3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c4a:	bf00      	nop
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <LL_RCC_SetLPUARTClockSource>:
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005c5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c76:	bf00      	nop
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <LL_RCC_SetI2CClockSource>:
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	091b      	lsrs	r3, r3, #4
 8005c96:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005c9a:	43db      	mvns	r3, r3
 8005c9c:	401a      	ands	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	011b      	lsls	r3, r3, #4
 8005ca2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005ca6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005caa:	4313      	orrs	r3, r2
 8005cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <LL_RCC_SetLPTIMClockSource>:
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cc8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	0c1b      	lsrs	r3, r3, #16
 8005cd0:	041b      	lsls	r3, r3, #16
 8005cd2:	43db      	mvns	r3, r3
 8005cd4:	401a      	ands	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	041b      	lsls	r3, r3, #16
 8005cda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <LL_RCC_SetSAIClockSource>:
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <LL_RCC_SetRNGClockSource>:
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005d30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <LL_RCC_SetCLK48ClockSource>:
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <LL_RCC_SetUSBClockSource>:
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b082      	sub	sp, #8
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f7ff ffe3 	bl	8005d48 <LL_RCC_SetCLK48ClockSource>
}
 8005d82:	bf00      	nop
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <LL_RCC_SetADCClockSource>:
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005daa:	bf00      	nop
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <LL_RCC_SetRTCClockSource>:
{
 8005db6:	b480      	push	{r7}
 8005db8:	b083      	sub	sp, #12
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <LL_RCC_GetRTCClockSource>:
{
 8005de2:	b480      	push	{r7}
 8005de4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <LL_RCC_ForceBackupDomainReset>:
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005e14:	bf00      	nop
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <LL_RCC_ReleaseBackupDomainReset>:
{
 8005e1e:	b480      	push	{r7}
 8005e20:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005e36:	bf00      	nop
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <LL_RCC_PLLSAI1_Enable>:
{
 8005e40:	b480      	push	{r7}
 8005e42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e52:	6013      	str	r3, [r2, #0]
}
 8005e54:	bf00      	nop
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <LL_RCC_PLLSAI1_Disable>:
{
 8005e5e:	b480      	push	{r7}
 8005e60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e70:	6013      	str	r3, [r2, #0]
}
 8005e72:	bf00      	nop
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <LL_RCC_PLLSAI1_IsReady>:
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e8e:	d101      	bne.n	8005e94 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005e90:	2301      	movs	r3, #1
 8005e92:	e000      	b.n	8005e96 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005eac:	2300      	movs	r3, #0
 8005eae:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d034      	beq.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ec4:	d021      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8005ec6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005eca:	d81b      	bhi.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ecc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ed0:	d01d      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005ed2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ed6:	d815      	bhi.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00b      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005edc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ee0:	d110      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ef0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005ef2:	e00d      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f000 f94d 	bl	8006198 <RCCEx_PLLSAI1_ConfigNP>
 8005efe:	4603      	mov	r3, r0
 8005f00:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005f02:	e005      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	77fb      	strb	r3, [r7, #31]
        break;
 8005f08:	e002      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005f0a:	bf00      	nop
 8005f0c:	e000      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005f0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f10:	7ffb      	ldrb	r3, [r7, #31]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d105      	bne.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7ff fee8 	bl	8005cf0 <LL_RCC_SetSAIClockSource>
 8005f20:	e001      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f22:	7ffb      	ldrb	r3, [r7, #31]
 8005f24:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d046      	beq.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005f32:	f7ff ff56 	bl	8005de2 <LL_RCC_GetRTCClockSource>
 8005f36:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d03c      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005f42:	f7fe fc59 	bl	80047f8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005f46:	69bb      	ldr	r3, [r7, #24]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d105      	bne.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff ff30 	bl	8005db6 <LL_RCC_SetRTCClockSource>
 8005f56:	e02e      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f60:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005f62:	f7ff ff4b 	bl	8005dfc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005f66:	f7ff ff5a 	bl	8005e1e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f74:	4313      	orrs	r3, r2
 8005f76:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005f78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005f82:	f7ff fde1 	bl	8005b48 <LL_RCC_LSE_IsEnabled>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d114      	bne.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f8c:	f7fd fbf6 	bl	800377c <HAL_GetTick>
 8005f90:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005f92:	e00b      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f94:	f7fd fbf2 	bl	800377c <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d902      	bls.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8005fa6:	2303      	movs	r3, #3
 8005fa8:	77fb      	strb	r3, [r7, #31]
              break;
 8005faa:	e004      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005fac:	f7ff fdde 	bl	8005b6c <LL_RCC_LSE_IsReady>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d1ee      	bne.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005fb6:	7ffb      	ldrb	r3, [r7, #31]
 8005fb8:	77bb      	strb	r3, [r7, #30]
 8005fba:	e001      	b.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fbc:	7ffb      	ldrb	r3, [r7, #31]
 8005fbe:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d004      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7ff fe2a 	bl	8005c2a <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d004      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7ff fe35 	bl	8005c56 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 0310 	and.w	r3, r3, #16
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d004      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff fe5d 	bl	8005cbc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0320 	and.w	r3, r3, #32
 800600a:	2b00      	cmp	r3, #0
 800600c:	d004      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006012:	4618      	mov	r0, r3
 8006014:	f7ff fe52 	bl	8005cbc <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0304 	and.w	r3, r3, #4
 8006020:	2b00      	cmp	r3, #0
 8006022:	d004      	beq.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	4618      	mov	r0, r3
 800602a:	f7ff fe2a 	bl	8005c82 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f003 0308 	and.w	r3, r3, #8
 8006036:	2b00      	cmp	r3, #0
 8006038:	d004      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603e:	4618      	mov	r0, r3
 8006040:	f7ff fe1f 	bl	8005c82 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604c:	2b00      	cmp	r3, #0
 800604e:	d022      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff fe8d 	bl	8005d74 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006062:	d107      	bne.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8006064:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800606e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006072:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006078:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800607c:	d10b      	bne.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	3304      	adds	r3, #4
 8006082:	4618      	mov	r0, r3
 8006084:	f000 f8e3 	bl	800624e <RCCEx_PLLSAI1_ConfigNQ>
 8006088:	4603      	mov	r3, r0
 800608a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800608c:	7ffb      	ldrb	r3, [r7, #31]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8006092:	7ffb      	ldrb	r3, [r7, #31]
 8006094:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d02b      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060aa:	d008      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060b4:	d003      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d105      	bne.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7ff fe2a 	bl	8005d1c <LL_RCC_SetRNGClockSource>
 80060c8:	e00a      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	2000      	movs	r0, #0
 80060d6:	f7ff fe21 	bl	8005d1c <LL_RCC_SetRNGClockSource>
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f7ff fe34 	bl	8005d48 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80060e8:	d107      	bne.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80060ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80060f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060f8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006102:	2b00      	cmp	r3, #0
 8006104:	d022      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610a:	4618      	mov	r0, r3
 800610c:	f7ff fe3d 	bl	8005d8a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006114:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006118:	d107      	bne.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800611a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006128:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006132:	d10b      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	3304      	adds	r3, #4
 8006138:	4618      	mov	r0, r3
 800613a:	f000 f8e3 	bl	8006304 <RCCEx_PLLSAI1_ConfigNR>
 800613e:	4603      	mov	r3, r0
 8006140:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006142:	7ffb      	ldrb	r3, [r7, #31]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d001      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8006148:	7ffb      	ldrb	r3, [r7, #31]
 800614a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006154:	2b00      	cmp	r3, #0
 8006156:	d004      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800615c:	4618      	mov	r0, r3
 800615e:	f7ff fd26 	bl	8005bae <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d009      	beq.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006172:	4618      	mov	r0, r3
 8006174:	f7ff fd45 	bl	8005c02 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800617c:	4618      	mov	r0, r3
 800617e:	f7ff fd2c 	bl	8005bda <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8006182:	7fbb      	ldrb	r3, [r7, #30]
}
 8006184:	4618      	mov	r0, r3
 8006186:	3720      	adds	r7, #32
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8006190:	f7ff fcfe 	bl	8005b90 <LL_RCC_MSI_EnablePLLMode>
}
 8006194:	bf00      	nop
 8006196:	bd80      	pop	{r7, pc}

08006198 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80061a4:	f7ff fe5b 	bl	8005e5e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80061a8:	f7fd fae8 	bl	800377c <HAL_GetTick>
 80061ac:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80061ae:	e009      	b.n	80061c4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061b0:	f7fd fae4 	bl	800377c <HAL_GetTick>
 80061b4:	4602      	mov	r2, r0
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	1ad3      	subs	r3, r2, r3
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d902      	bls.n	80061c4 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	73fb      	strb	r3, [r7, #15]
      break;
 80061c2:	e004      	b.n	80061ce <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80061c4:	f7ff fe5a 	bl	8005e7c <LL_RCC_PLLSAI1_IsReady>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1f0      	bne.n	80061b0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d137      	bne.n	8006244 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80061d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	021b      	lsls	r3, r3, #8
 80061e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061e8:	4313      	orrs	r3, r2
 80061ea:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80061ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061fe:	4313      	orrs	r3, r2
 8006200:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006202:	f7ff fe1d 	bl	8005e40 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006206:	f7fd fab9 	bl	800377c <HAL_GetTick>
 800620a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800620c:	e009      	b.n	8006222 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800620e:	f7fd fab5 	bl	800377c <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	2b02      	cmp	r3, #2
 800621a:	d902      	bls.n	8006222 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	73fb      	strb	r3, [r7, #15]
        break;
 8006220:	e004      	b.n	800622c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006222:	f7ff fe2b 	bl	8005e7c <LL_RCC_PLLSAI1_IsReady>
 8006226:	4603      	mov	r3, r0
 8006228:	2b01      	cmp	r3, #1
 800622a:	d1f0      	bne.n	800620e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800622c:	7bfb      	ldrb	r3, [r7, #15]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d108      	bne.n	8006244 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006236:	691a      	ldr	r2, [r3, #16]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006240:	4313      	orrs	r3, r2
 8006242:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006244:	7bfb      	ldrb	r3, [r7, #15]
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b084      	sub	sp, #16
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006256:	2300      	movs	r3, #0
 8006258:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800625a:	f7ff fe00 	bl	8005e5e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800625e:	f7fd fa8d 	bl	800377c <HAL_GetTick>
 8006262:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006264:	e009      	b.n	800627a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006266:	f7fd fa89 	bl	800377c <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	2b02      	cmp	r3, #2
 8006272:	d902      	bls.n	800627a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8006274:	2303      	movs	r3, #3
 8006276:	73fb      	strb	r3, [r7, #15]
      break;
 8006278:	e004      	b.n	8006284 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800627a:	f7ff fdff 	bl	8005e7c <LL_RCC_PLLSAI1_IsReady>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1f0      	bne.n	8006266 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d137      	bne.n	80062fa <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800628a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	021b      	lsls	r3, r3, #8
 800629a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800629e:	4313      	orrs	r3, r2
 80062a0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80062a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062b4:	4313      	orrs	r3, r2
 80062b6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80062b8:	f7ff fdc2 	bl	8005e40 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062bc:	f7fd fa5e 	bl	800377c <HAL_GetTick>
 80062c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80062c2:	e009      	b.n	80062d8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062c4:	f7fd fa5a 	bl	800377c <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d902      	bls.n	80062d8 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	73fb      	strb	r3, [r7, #15]
        break;
 80062d6:	e004      	b.n	80062e2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80062d8:	f7ff fdd0 	bl	8005e7c <LL_RCC_PLLSAI1_IsReady>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d1f0      	bne.n	80062c4 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80062e2:	7bfb      	ldrb	r3, [r7, #15]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d108      	bne.n	80062fa <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80062e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062ec:	691a      	ldr	r2, [r3, #16]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062f6:	4313      	orrs	r3, r2
 80062f8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800630c:	2300      	movs	r3, #0
 800630e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006310:	f7ff fda5 	bl	8005e5e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006314:	f7fd fa32 	bl	800377c <HAL_GetTick>
 8006318:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800631a:	e009      	b.n	8006330 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800631c:	f7fd fa2e 	bl	800377c <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	2b02      	cmp	r3, #2
 8006328:	d902      	bls.n	8006330 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	73fb      	strb	r3, [r7, #15]
      break;
 800632e:	e004      	b.n	800633a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006330:	f7ff fda4 	bl	8005e7c <LL_RCC_PLLSAI1_IsReady>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1f0      	bne.n	800631c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d137      	bne.n	80063b0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	021b      	lsls	r3, r3, #8
 8006350:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006354:	4313      	orrs	r3, r2
 8006356:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800636a:	4313      	orrs	r3, r2
 800636c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800636e:	f7ff fd67 	bl	8005e40 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006372:	f7fd fa03 	bl	800377c <HAL_GetTick>
 8006376:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006378:	e009      	b.n	800638e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800637a:	f7fd f9ff 	bl	800377c <HAL_GetTick>
 800637e:	4602      	mov	r2, r0
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	2b02      	cmp	r3, #2
 8006386:	d902      	bls.n	800638e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	73fb      	strb	r3, [r7, #15]
        break;
 800638c:	e004      	b.n	8006398 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800638e:	f7ff fd75 	bl	8005e7c <LL_RCC_PLLSAI1_IsReady>
 8006392:	4603      	mov	r3, r0
 8006394:	2b01      	cmp	r3, #1
 8006396:	d1f0      	bne.n	800637a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d108      	bne.n	80063b0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800639e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063a2:	691a      	ldr	r2, [r3, #16]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80063ac:	4313      	orrs	r3, r2
 80063ae:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
	...

080063bc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e09f      	b.n	800650e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d106      	bne.n	80063e8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f7fc fe4c 	bl	8003080 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80063f0:	4b49      	ldr	r3, [pc, #292]	; (8006518 <HAL_RTC_Init+0x15c>)
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	f003 0310 	and.w	r3, r3, #16
 80063f8:	2b10      	cmp	r3, #16
 80063fa:	d07e      	beq.n	80064fa <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	22ca      	movs	r2, #202	; 0xca
 8006402:	625a      	str	r2, [r3, #36]	; 0x24
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2253      	movs	r2, #83	; 0x53
 800640a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 f8ab 	bl	8006568 <RTC_EnterInitMode>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	22ff      	movs	r2, #255	; 0xff
 800641e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2204      	movs	r2, #4
 8006424:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	73fb      	strb	r3, [r7, #15]
 800642c:	e067      	b.n	80064fe <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	6812      	ldr	r2, [r2, #0]
 8006438:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800643c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006440:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	6899      	ldr	r1, [r3, #8]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	431a      	orrs	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	431a      	orrs	r2, r3
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	68d2      	ldr	r2, [r2, #12]
 8006468:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6919      	ldr	r1, [r3, #16]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	041a      	lsls	r2, r3, #16
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68da      	ldr	r2, [r3, #12]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800648c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f022 0203 	bic.w	r2, r2, #3
 800649c:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	69da      	ldr	r2, [r3, #28]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	431a      	orrs	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f003 0320 	and.w	r3, r3, #32
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d113      	bne.n	80064ec <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 f829 	bl	800651c <HAL_RTC_WaitForSynchro>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00d      	beq.n	80064ec <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	22ff      	movs	r2, #255	; 0xff
 80064d6:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2204      	movs	r2, #4
 80064dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e010      	b.n	800650e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	22ff      	movs	r2, #255	; 0xff
 80064f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	73fb      	strb	r3, [r7, #15]
 80064f8:	e001      	b.n	80064fe <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 80064fa:	2300      	movs	r3, #0
 80064fc:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80064fe:	7bfb      	ldrb	r3, [r7, #15]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d103      	bne.n	800650c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800650c:	7bfb      	ldrb	r3, [r7, #15]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	40002800 	.word	0x40002800

0800651c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68da      	ldr	r2, [r3, #12]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006532:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006534:	f7fd f922 	bl	800377c <HAL_GetTick>
 8006538:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800653a:	e009      	b.n	8006550 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800653c:	f7fd f91e 	bl	800377c <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800654a:	d901      	bls.n	8006550 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e007      	b.n	8006560 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	f003 0320 	and.w	r3, r3, #32
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0ee      	beq.n	800653c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657a:	2b00      	cmp	r3, #0
 800657c:	d119      	bne.n	80065b2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f04f 32ff 	mov.w	r2, #4294967295
 8006586:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006588:	f7fd f8f8 	bl	800377c <HAL_GetTick>
 800658c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800658e:	e009      	b.n	80065a4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006590:	f7fd f8f4 	bl	800377c <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800659e:	d901      	bls.n	80065a4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e007      	b.n	80065b4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d0ee      	beq.n	8006590 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d101      	bne.n	80065d6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80065d2:	2302      	movs	r3, #2
 80065d4:	e0a8      	b.n	8006728 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2202      	movs	r2, #2
 80065e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	22ca      	movs	r2, #202	; 0xca
 80065ec:	625a      	str	r2, [r3, #36]	; 0x24
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2253      	movs	r2, #83	; 0x53
 80065f4:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006600:	2b00      	cmp	r3, #0
 8006602:	d020      	beq.n	8006646 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8006604:	f7fd f8ba 	bl	800377c <HAL_GetTick>
 8006608:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800660a:	e015      	b.n	8006638 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800660c:	f7fd f8b6 	bl	800377c <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800661a:	d90d      	bls.n	8006638 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	22ff      	movs	r2, #255	; 0xff
 8006622:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2203      	movs	r2, #3
 8006628:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e077      	b.n	8006728 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68db      	ldr	r3, [r3, #12]
 800663e:	f003 0304 	and.w	r3, r3, #4
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1e2      	bne.n	800660c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006654:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	b2da      	uxtb	r2, r3
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8006666:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8006668:	f7fd f888 	bl	800377c <HAL_GetTick>
 800666c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800666e:	e015      	b.n	800669c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006670:	f7fd f884 	bl	800377c <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800667e:	d90d      	bls.n	800669c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	22ff      	movs	r2, #255	; 0xff
 8006686:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2203      	movs	r2, #3
 800668c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e045      	b.n	8006728 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	f003 0304 	and.w	r3, r3, #4
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d0e2      	beq.n	8006670 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0207 	bic.w	r2, r2, #7
 80066c0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6899      	ldr	r1, [r3, #8]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80066d2:	4b17      	ldr	r3, [pc, #92]	; (8006730 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80066d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066d8:	4a15      	ldr	r2, [pc, #84]	; (8006730 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80066da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066de:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80066e2:	4b13      	ldr	r3, [pc, #76]	; (8006730 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a12      	ldr	r2, [pc, #72]	; (8006730 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80066e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066ec:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	689a      	ldr	r2, [r3, #8]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066fc:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	689a      	ldr	r2, [r3, #8]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800670c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	22ff      	movs	r2, #255	; 0xff
 8006714:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3718      	adds	r7, #24
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	58000800 	.word	0x58000800

08006734 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d101      	bne.n	8006746 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006742:	2301      	movs	r3, #1
 8006744:	e049      	b.n	80067da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d106      	bne.n	8006760 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f7fc fcc4 	bl	80030e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2202      	movs	r2, #2
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	3304      	adds	r3, #4
 8006770:	4619      	mov	r1, r3
 8006772:	4610      	mov	r0, r2
 8006774:	f000 fb1a 	bl	8006dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b082      	sub	sp, #8
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e049      	b.n	8006888 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d106      	bne.n	800680e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f841 	bl	8006890 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2202      	movs	r2, #2
 8006812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	3304      	adds	r3, #4
 800681e:	4619      	mov	r1, r3
 8006820:	4610      	mov	r0, r2
 8006822:	f000 fac3 	bl	8006dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e097      	b.n	80069e8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d106      	bne.n	80068d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f7fc fc1f 	bl	8003110 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2202      	movs	r2, #2
 80068d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	6812      	ldr	r2, [r2, #0]
 80068e4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80068e8:	f023 0307 	bic.w	r3, r3, #7
 80068ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	3304      	adds	r3, #4
 80068f6:	4619      	mov	r1, r3
 80068f8:	4610      	mov	r0, r2
 80068fa:	f000 fa57 	bl	8006dac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	697a      	ldr	r2, [r7, #20]
 800691c:	4313      	orrs	r3, r2
 800691e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006926:	f023 0303 	bic.w	r3, r3, #3
 800692a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	699b      	ldr	r3, [r3, #24]
 8006934:	021b      	lsls	r3, r3, #8
 8006936:	4313      	orrs	r3, r2
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	4313      	orrs	r3, r2
 800693c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006944:	f023 030c 	bic.w	r3, r3, #12
 8006948:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006950:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006954:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68da      	ldr	r2, [r3, #12]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	021b      	lsls	r3, r3, #8
 8006960:	4313      	orrs	r3, r2
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	4313      	orrs	r3, r2
 8006966:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	011a      	lsls	r2, r3, #4
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	031b      	lsls	r3, r3, #12
 8006974:	4313      	orrs	r3, r2
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	4313      	orrs	r3, r2
 800697a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006982:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800698a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	011b      	lsls	r3, r3, #4
 8006996:	4313      	orrs	r3, r2
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	4313      	orrs	r3, r2
 800699c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3718      	adds	r7, #24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069fc:	2300      	movs	r3, #0
 80069fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d101      	bne.n	8006a0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	e0ff      	b.n	8006c0e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2b14      	cmp	r3, #20
 8006a1a:	f200 80f0 	bhi.w	8006bfe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006a1e:	a201      	add	r2, pc, #4	; (adr r2, 8006a24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a24:	08006a79 	.word	0x08006a79
 8006a28:	08006bff 	.word	0x08006bff
 8006a2c:	08006bff 	.word	0x08006bff
 8006a30:	08006bff 	.word	0x08006bff
 8006a34:	08006ab9 	.word	0x08006ab9
 8006a38:	08006bff 	.word	0x08006bff
 8006a3c:	08006bff 	.word	0x08006bff
 8006a40:	08006bff 	.word	0x08006bff
 8006a44:	08006afb 	.word	0x08006afb
 8006a48:	08006bff 	.word	0x08006bff
 8006a4c:	08006bff 	.word	0x08006bff
 8006a50:	08006bff 	.word	0x08006bff
 8006a54:	08006b3b 	.word	0x08006b3b
 8006a58:	08006bff 	.word	0x08006bff
 8006a5c:	08006bff 	.word	0x08006bff
 8006a60:	08006bff 	.word	0x08006bff
 8006a64:	08006b7d 	.word	0x08006b7d
 8006a68:	08006bff 	.word	0x08006bff
 8006a6c:	08006bff 	.word	0x08006bff
 8006a70:	08006bff 	.word	0x08006bff
 8006a74:	08006bbd 	.word	0x08006bbd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68b9      	ldr	r1, [r7, #8]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f000 fa04 	bl	8006e8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	699a      	ldr	r2, [r3, #24]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 0208 	orr.w	r2, r2, #8
 8006a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	699a      	ldr	r2, [r3, #24]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f022 0204 	bic.w	r2, r2, #4
 8006aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6999      	ldr	r1, [r3, #24]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	691a      	ldr	r2, [r3, #16]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	619a      	str	r2, [r3, #24]
      break;
 8006ab6:	e0a5      	b.n	8006c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68b9      	ldr	r1, [r7, #8]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 fa60 	bl	8006f84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	699a      	ldr	r2, [r3, #24]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	699a      	ldr	r2, [r3, #24]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6999      	ldr	r1, [r3, #24]
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	021a      	lsls	r2, r3, #8
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	430a      	orrs	r2, r1
 8006af6:	619a      	str	r2, [r3, #24]
      break;
 8006af8:	e084      	b.n	8006c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68b9      	ldr	r1, [r7, #8]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f000 fab9 	bl	8007078 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	69da      	ldr	r2, [r3, #28]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f042 0208 	orr.w	r2, r2, #8
 8006b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	69da      	ldr	r2, [r3, #28]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f022 0204 	bic.w	r2, r2, #4
 8006b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	69d9      	ldr	r1, [r3, #28]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	691a      	ldr	r2, [r3, #16]
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	430a      	orrs	r2, r1
 8006b36:	61da      	str	r2, [r3, #28]
      break;
 8006b38:	e064      	b.n	8006c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68b9      	ldr	r1, [r7, #8]
 8006b40:	4618      	mov	r0, r3
 8006b42:	f000 fb11 	bl	8007168 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	69da      	ldr	r2, [r3, #28]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	69da      	ldr	r2, [r3, #28]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	69d9      	ldr	r1, [r3, #28]
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	021a      	lsls	r2, r3, #8
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	61da      	str	r2, [r3, #28]
      break;
 8006b7a:	e043      	b.n	8006c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68b9      	ldr	r1, [r7, #8]
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 fb4e 	bl	8007224 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f042 0208 	orr.w	r2, r2, #8
 8006b96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f022 0204 	bic.w	r2, r2, #4
 8006ba6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	691a      	ldr	r2, [r3, #16]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	430a      	orrs	r2, r1
 8006bb8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006bba:	e023      	b.n	8006c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68b9      	ldr	r1, [r7, #8]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f000 fb86 	bl	80072d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bd6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006be6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	021a      	lsls	r2, r3, #8
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006bfc:	e002      	b.n	8006c04 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	75fb      	strb	r3, [r7, #23]
      break;
 8006c02:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop

08006c18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c22:	2300      	movs	r3, #0
 8006c24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d101      	bne.n	8006c34 <HAL_TIM_ConfigClockSource+0x1c>
 8006c30:	2302      	movs	r3, #2
 8006c32:	e0b6      	b.n	8006da2 <HAL_TIM_ConfigClockSource+0x18a>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006c52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68ba      	ldr	r2, [r7, #8]
 8006c66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c70:	d03e      	beq.n	8006cf0 <HAL_TIM_ConfigClockSource+0xd8>
 8006c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c76:	f200 8087 	bhi.w	8006d88 <HAL_TIM_ConfigClockSource+0x170>
 8006c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c7e:	f000 8086 	beq.w	8006d8e <HAL_TIM_ConfigClockSource+0x176>
 8006c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c86:	d87f      	bhi.n	8006d88 <HAL_TIM_ConfigClockSource+0x170>
 8006c88:	2b70      	cmp	r3, #112	; 0x70
 8006c8a:	d01a      	beq.n	8006cc2 <HAL_TIM_ConfigClockSource+0xaa>
 8006c8c:	2b70      	cmp	r3, #112	; 0x70
 8006c8e:	d87b      	bhi.n	8006d88 <HAL_TIM_ConfigClockSource+0x170>
 8006c90:	2b60      	cmp	r3, #96	; 0x60
 8006c92:	d050      	beq.n	8006d36 <HAL_TIM_ConfigClockSource+0x11e>
 8006c94:	2b60      	cmp	r3, #96	; 0x60
 8006c96:	d877      	bhi.n	8006d88 <HAL_TIM_ConfigClockSource+0x170>
 8006c98:	2b50      	cmp	r3, #80	; 0x50
 8006c9a:	d03c      	beq.n	8006d16 <HAL_TIM_ConfigClockSource+0xfe>
 8006c9c:	2b50      	cmp	r3, #80	; 0x50
 8006c9e:	d873      	bhi.n	8006d88 <HAL_TIM_ConfigClockSource+0x170>
 8006ca0:	2b40      	cmp	r3, #64	; 0x40
 8006ca2:	d058      	beq.n	8006d56 <HAL_TIM_ConfigClockSource+0x13e>
 8006ca4:	2b40      	cmp	r3, #64	; 0x40
 8006ca6:	d86f      	bhi.n	8006d88 <HAL_TIM_ConfigClockSource+0x170>
 8006ca8:	2b30      	cmp	r3, #48	; 0x30
 8006caa:	d064      	beq.n	8006d76 <HAL_TIM_ConfigClockSource+0x15e>
 8006cac:	2b30      	cmp	r3, #48	; 0x30
 8006cae:	d86b      	bhi.n	8006d88 <HAL_TIM_ConfigClockSource+0x170>
 8006cb0:	2b20      	cmp	r3, #32
 8006cb2:	d060      	beq.n	8006d76 <HAL_TIM_ConfigClockSource+0x15e>
 8006cb4:	2b20      	cmp	r3, #32
 8006cb6:	d867      	bhi.n	8006d88 <HAL_TIM_ConfigClockSource+0x170>
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d05c      	beq.n	8006d76 <HAL_TIM_ConfigClockSource+0x15e>
 8006cbc:	2b10      	cmp	r3, #16
 8006cbe:	d05a      	beq.n	8006d76 <HAL_TIM_ConfigClockSource+0x15e>
 8006cc0:	e062      	b.n	8006d88 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006cd2:	f000 fbd5 	bl	8007480 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006ce4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	609a      	str	r2, [r3, #8]
      break;
 8006cee:	e04f      	b.n	8006d90 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006d00:	f000 fbbe 	bl	8007480 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689a      	ldr	r2, [r3, #8]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d12:	609a      	str	r2, [r3, #8]
      break;
 8006d14:	e03c      	b.n	8006d90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d22:	461a      	mov	r2, r3
 8006d24:	f000 fb30 	bl	8007388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2150      	movs	r1, #80	; 0x50
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f000 fb89 	bl	8007446 <TIM_ITRx_SetConfig>
      break;
 8006d34:	e02c      	b.n	8006d90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d42:	461a      	mov	r2, r3
 8006d44:	f000 fb4f 	bl	80073e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2160      	movs	r1, #96	; 0x60
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 fb79 	bl	8007446 <TIM_ITRx_SetConfig>
      break;
 8006d54:	e01c      	b.n	8006d90 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d62:	461a      	mov	r2, r3
 8006d64:	f000 fb10 	bl	8007388 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2140      	movs	r1, #64	; 0x40
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f000 fb69 	bl	8007446 <TIM_ITRx_SetConfig>
      break;
 8006d74:	e00c      	b.n	8006d90 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	4610      	mov	r0, r2
 8006d82:	f000 fb60 	bl	8007446 <TIM_ITRx_SetConfig>
      break;
 8006d86:	e003      	b.n	8006d90 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d8c:	e000      	b.n	8006d90 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006d8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
	...

08006dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	4a30      	ldr	r2, [pc, #192]	; (8006e80 <TIM_Base_SetConfig+0xd4>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d003      	beq.n	8006dcc <TIM_Base_SetConfig+0x20>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dca:	d108      	bne.n	8006dde <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a27      	ldr	r2, [pc, #156]	; (8006e80 <TIM_Base_SetConfig+0xd4>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d00b      	beq.n	8006dfe <TIM_Base_SetConfig+0x52>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dec:	d007      	beq.n	8006dfe <TIM_Base_SetConfig+0x52>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a24      	ldr	r2, [pc, #144]	; (8006e84 <TIM_Base_SetConfig+0xd8>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d003      	beq.n	8006dfe <TIM_Base_SetConfig+0x52>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a23      	ldr	r2, [pc, #140]	; (8006e88 <TIM_Base_SetConfig+0xdc>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d108      	bne.n	8006e10 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a12      	ldr	r2, [pc, #72]	; (8006e80 <TIM_Base_SetConfig+0xd4>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d007      	beq.n	8006e4c <TIM_Base_SetConfig+0xa0>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a11      	ldr	r2, [pc, #68]	; (8006e84 <TIM_Base_SetConfig+0xd8>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d003      	beq.n	8006e4c <TIM_Base_SetConfig+0xa0>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a10      	ldr	r2, [pc, #64]	; (8006e88 <TIM_Base_SetConfig+0xdc>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d103      	bne.n	8006e54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	691a      	ldr	r2, [r3, #16]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d105      	bne.n	8006e72 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	f023 0201 	bic.w	r2, r3, #1
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	611a      	str	r2, [r3, #16]
  }
}
 8006e72:	bf00      	nop
 8006e74:	3714      	adds	r7, #20
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	40012c00 	.word	0x40012c00
 8006e84:	40014400 	.word	0x40014400
 8006e88:	40014800 	.word	0x40014800

08006e8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a1b      	ldr	r3, [r3, #32]
 8006ea0:	f023 0201 	bic.w	r2, r3, #1
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f023 0303 	bic.w	r3, r3, #3
 8006ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f023 0302 	bic.w	r3, r3, #2
 8006ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a24      	ldr	r2, [pc, #144]	; (8006f78 <TIM_OC1_SetConfig+0xec>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d007      	beq.n	8006efc <TIM_OC1_SetConfig+0x70>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a23      	ldr	r2, [pc, #140]	; (8006f7c <TIM_OC1_SetConfig+0xf0>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d003      	beq.n	8006efc <TIM_OC1_SetConfig+0x70>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a22      	ldr	r2, [pc, #136]	; (8006f80 <TIM_OC1_SetConfig+0xf4>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d10c      	bne.n	8006f16 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	f023 0308 	bic.w	r3, r3, #8
 8006f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f023 0304 	bic.w	r3, r3, #4
 8006f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a17      	ldr	r2, [pc, #92]	; (8006f78 <TIM_OC1_SetConfig+0xec>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d007      	beq.n	8006f2e <TIM_OC1_SetConfig+0xa2>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a17      	ldr	r2, [pc, #92]	; (8006f80 <TIM_OC1_SetConfig+0xf4>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d003      	beq.n	8006f2e <TIM_OC1_SetConfig+0xa2>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a14      	ldr	r2, [pc, #80]	; (8006f7c <TIM_OC1_SetConfig+0xf0>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d111      	bne.n	8006f52 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	621a      	str	r2, [r3, #32]
}
 8006f6c:	bf00      	nop
 8006f6e:	371c      	adds	r7, #28
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	40012c00 	.word	0x40012c00
 8006f7c:	40014800 	.word	0x40014800
 8006f80:	40014400 	.word	0x40014400

08006f84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a1b      	ldr	r3, [r3, #32]
 8006f98:	f023 0210 	bic.w	r2, r3, #16
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	021b      	lsls	r3, r3, #8
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f023 0320 	bic.w	r3, r3, #32
 8006fd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	011b      	lsls	r3, r3, #4
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a22      	ldr	r2, [pc, #136]	; (800706c <TIM_OC2_SetConfig+0xe8>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d10d      	bne.n	8007004 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	011b      	lsls	r3, r3, #4
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007002:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a19      	ldr	r2, [pc, #100]	; (800706c <TIM_OC2_SetConfig+0xe8>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d007      	beq.n	800701c <TIM_OC2_SetConfig+0x98>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a18      	ldr	r2, [pc, #96]	; (8007070 <TIM_OC2_SetConfig+0xec>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d003      	beq.n	800701c <TIM_OC2_SetConfig+0x98>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a17      	ldr	r2, [pc, #92]	; (8007074 <TIM_OC2_SetConfig+0xf0>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d113      	bne.n	8007044 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007022:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800702a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	4313      	orrs	r3, r2
 8007036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	4313      	orrs	r3, r2
 8007042:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	621a      	str	r2, [r3, #32]
}
 800705e:	bf00      	nop
 8007060:	371c      	adds	r7, #28
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	40012c00 	.word	0x40012c00
 8007070:	40014400 	.word	0x40014400
 8007074:	40014800 	.word	0x40014800

08007078 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007078:	b480      	push	{r7}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f023 0303 	bic.w	r3, r3, #3
 80070b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	021b      	lsls	r3, r3, #8
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a21      	ldr	r2, [pc, #132]	; (800715c <TIM_OC3_SetConfig+0xe4>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d10d      	bne.n	80070f6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	021b      	lsls	r3, r3, #8
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a18      	ldr	r2, [pc, #96]	; (800715c <TIM_OC3_SetConfig+0xe4>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d007      	beq.n	800710e <TIM_OC3_SetConfig+0x96>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a17      	ldr	r2, [pc, #92]	; (8007160 <TIM_OC3_SetConfig+0xe8>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d003      	beq.n	800710e <TIM_OC3_SetConfig+0x96>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a16      	ldr	r2, [pc, #88]	; (8007164 <TIM_OC3_SetConfig+0xec>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d113      	bne.n	8007136 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800711c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	011b      	lsls	r3, r3, #4
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	4313      	orrs	r3, r2
 8007128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	011b      	lsls	r3, r3, #4
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	4313      	orrs	r3, r2
 8007134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	621a      	str	r2, [r3, #32]
}
 8007150:	bf00      	nop
 8007152:	371c      	adds	r7, #28
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	40012c00 	.word	0x40012c00
 8007160:	40014400 	.word	0x40014400
 8007164:	40014800 	.word	0x40014800

08007168 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007168:	b480      	push	{r7}
 800716a:	b087      	sub	sp, #28
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6a1b      	ldr	r3, [r3, #32]
 800717c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800719a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	021b      	lsls	r3, r3, #8
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	031b      	lsls	r3, r3, #12
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a14      	ldr	r2, [pc, #80]	; (8007218 <TIM_OC4_SetConfig+0xb0>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d007      	beq.n	80071dc <TIM_OC4_SetConfig+0x74>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a13      	ldr	r2, [pc, #76]	; (800721c <TIM_OC4_SetConfig+0xb4>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d003      	beq.n	80071dc <TIM_OC4_SetConfig+0x74>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a12      	ldr	r2, [pc, #72]	; (8007220 <TIM_OC4_SetConfig+0xb8>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d109      	bne.n	80071f0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	019b      	lsls	r3, r3, #6
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	621a      	str	r2, [r3, #32]
}
 800720a:	bf00      	nop
 800720c:	371c      	adds	r7, #28
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	40012c00 	.word	0x40012c00
 800721c:	40014400 	.word	0x40014400
 8007220:	40014800 	.word	0x40014800

08007224 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a1b      	ldr	r3, [r3, #32]
 8007238:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800724a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	4313      	orrs	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007268:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	041b      	lsls	r3, r3, #16
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	4313      	orrs	r3, r2
 8007274:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a13      	ldr	r2, [pc, #76]	; (80072c8 <TIM_OC5_SetConfig+0xa4>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d007      	beq.n	800728e <TIM_OC5_SetConfig+0x6a>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a12      	ldr	r2, [pc, #72]	; (80072cc <TIM_OC5_SetConfig+0xa8>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d003      	beq.n	800728e <TIM_OC5_SetConfig+0x6a>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a11      	ldr	r2, [pc, #68]	; (80072d0 <TIM_OC5_SetConfig+0xac>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d109      	bne.n	80072a2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007294:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	021b      	lsls	r3, r3, #8
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	4313      	orrs	r3, r2
 80072a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	685a      	ldr	r2, [r3, #4]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	621a      	str	r2, [r3, #32]
}
 80072bc:	bf00      	nop
 80072be:	371c      	adds	r7, #28
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr
 80072c8:	40012c00 	.word	0x40012c00
 80072cc:	40014400 	.word	0x40014400
 80072d0:	40014800 	.word	0x40014800

080072d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b087      	sub	sp, #28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	021b      	lsls	r3, r3, #8
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	4313      	orrs	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800731a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	051b      	lsls	r3, r3, #20
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	4313      	orrs	r3, r2
 8007326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a14      	ldr	r2, [pc, #80]	; (800737c <TIM_OC6_SetConfig+0xa8>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d007      	beq.n	8007340 <TIM_OC6_SetConfig+0x6c>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a13      	ldr	r2, [pc, #76]	; (8007380 <TIM_OC6_SetConfig+0xac>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d003      	beq.n	8007340 <TIM_OC6_SetConfig+0x6c>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a12      	ldr	r2, [pc, #72]	; (8007384 <TIM_OC6_SetConfig+0xb0>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d109      	bne.n	8007354 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007346:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	695b      	ldr	r3, [r3, #20]
 800734c:	029b      	lsls	r3, r3, #10
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	4313      	orrs	r3, r2
 8007352:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	621a      	str	r2, [r3, #32]
}
 800736e:	bf00      	nop
 8007370:	371c      	adds	r7, #28
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	40012c00 	.word	0x40012c00
 8007380:	40014400 	.word	0x40014400
 8007384:	40014800 	.word	0x40014800

08007388 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	f023 0201 	bic.w	r2, r3, #1
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	011b      	lsls	r3, r3, #4
 80073b8:	693a      	ldr	r2, [r7, #16]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f023 030a 	bic.w	r3, r3, #10
 80073c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	621a      	str	r2, [r3, #32]
}
 80073da:	bf00      	nop
 80073dc:	371c      	adds	r7, #28
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b087      	sub	sp, #28
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	60f8      	str	r0, [r7, #12]
 80073ee:	60b9      	str	r1, [r7, #8]
 80073f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6a1b      	ldr	r3, [r3, #32]
 80073fc:	f023 0210 	bic.w	r2, r3, #16
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	699b      	ldr	r3, [r3, #24]
 8007408:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007410:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	031b      	lsls	r3, r3, #12
 8007416:	693a      	ldr	r2, [r7, #16]
 8007418:	4313      	orrs	r3, r2
 800741a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007422:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	011b      	lsls	r3, r3, #4
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	4313      	orrs	r3, r2
 800742c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	621a      	str	r2, [r3, #32]
}
 800743a:	bf00      	nop
 800743c:	371c      	adds	r7, #28
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007446:	b480      	push	{r7}
 8007448:	b085      	sub	sp, #20
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
 800744e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800745c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007460:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007462:	683a      	ldr	r2, [r7, #0]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	4313      	orrs	r3, r2
 8007468:	f043 0307 	orr.w	r3, r3, #7
 800746c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	609a      	str	r2, [r3, #8]
}
 8007474:	bf00      	nop
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007480:	b480      	push	{r7}
 8007482:	b087      	sub	sp, #28
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
 800748c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800749a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	021a      	lsls	r2, r3, #8
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	431a      	orrs	r2, r3
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	609a      	str	r2, [r3, #8]
}
 80074b4:	bf00      	nop
 80074b6:	371c      	adds	r7, #28
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b085      	sub	sp, #20
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d101      	bne.n	80074d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074d4:	2302      	movs	r3, #2
 80074d6:	e04a      	b.n	800756e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2201      	movs	r2, #1
 80074dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2202      	movs	r2, #2
 80074e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a1f      	ldr	r2, [pc, #124]	; (800757c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d108      	bne.n	8007514 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007508:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	4313      	orrs	r3, r2
 8007512:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800751a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	4313      	orrs	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a12      	ldr	r2, [pc, #72]	; (800757c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d004      	beq.n	8007542 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007540:	d10c      	bne.n	800755c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007548:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	4313      	orrs	r3, r2
 8007552:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3714      	adds	r7, #20
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	40012c00 	.word	0x40012c00

08007580 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800758a:	2300      	movs	r3, #0
 800758c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007594:	2b01      	cmp	r3, #1
 8007596:	d101      	bne.n	800759c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007598:	2302      	movs	r3, #2
 800759a:	e06e      	b.n	800767a <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	4313      	orrs	r3, r2
 80075be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4313      	orrs	r3, r2
 80075da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	695b      	ldr	r3, [r3, #20]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007602:	4313      	orrs	r3, r2
 8007604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	041b      	lsls	r3, r3, #16
 8007612:	4313      	orrs	r3, r2
 8007614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	69db      	ldr	r3, [r3, #28]
 8007620:	4313      	orrs	r3, r2
 8007622:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a17      	ldr	r2, [pc, #92]	; (8007688 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d11c      	bne.n	8007668 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007638:	051b      	lsls	r3, r3, #20
 800763a:	4313      	orrs	r3, r2
 800763c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	6a1b      	ldr	r3, [r3, #32]
 8007648:	4313      	orrs	r3, r2
 800764a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007656:	4313      	orrs	r3, r2
 8007658:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007664:	4313      	orrs	r3, r2
 8007666:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	40012c00 	.word	0x40012c00

0800768c <LL_RCC_GetUSARTClockSource>:
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8007694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007698:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4013      	ands	r3, r2
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <LL_RCC_GetLPUARTClockSource>:
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80076b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	4013      	ands	r3, r2
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d101      	bne.n	80076de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e042      	b.n	8007764 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d106      	bne.n	80076f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f7fb fd65 	bl	80031c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2224      	movs	r2, #36	; 0x24
 80076fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f022 0201 	bic.w	r2, r2, #1
 800770c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007712:	2b00      	cmp	r3, #0
 8007714:	d002      	beq.n	800771c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fe14 	bl	8008344 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fbe9 	bl	8007ef4 <UART_SetConfig>
 8007722:	4603      	mov	r3, r0
 8007724:	2b01      	cmp	r3, #1
 8007726:	d101      	bne.n	800772c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e01b      	b.n	8007764 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	685a      	ldr	r2, [r3, #4]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800773a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689a      	ldr	r2, [r3, #8]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800774a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f042 0201 	orr.w	r2, r2, #1
 800775a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fe93 	bl	8008488 <UART_CheckIdleState>
 8007762:	4603      	mov	r3, r0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b08a      	sub	sp, #40	; 0x28
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	4613      	mov	r3, r2
 8007778:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007780:	2b20      	cmp	r3, #32
 8007782:	d167      	bne.n	8007854 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d002      	beq.n	8007790 <HAL_UART_Transmit_DMA+0x24>
 800778a:	88fb      	ldrh	r3, [r7, #6]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d101      	bne.n	8007794 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e060      	b.n	8007856 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	88fa      	ldrh	r2, [r7, #6]
 800779e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	88fa      	ldrh	r2, [r7, #6]
 80077a6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2221      	movs	r2, #33	; 0x21
 80077b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d028      	beq.n	8007814 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077c6:	4a26      	ldr	r2, [pc, #152]	; (8007860 <HAL_UART_Transmit_DMA+0xf4>)
 80077c8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077ce:	4a25      	ldr	r2, [pc, #148]	; (8007864 <HAL_UART_Transmit_DMA+0xf8>)
 80077d0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077d6:	4a24      	ldr	r2, [pc, #144]	; (8007868 <HAL_UART_Transmit_DMA+0xfc>)
 80077d8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077de:	2200      	movs	r2, #0
 80077e0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ea:	4619      	mov	r1, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3328      	adds	r3, #40	; 0x28
 80077f2:	461a      	mov	r2, r3
 80077f4:	88fb      	ldrh	r3, [r7, #6]
 80077f6:	f7fc fa33 	bl	8003c60 <HAL_DMA_Start_IT>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d009      	beq.n	8007814 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2210      	movs	r2, #16
 8007804:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2220      	movs	r2, #32
 800780c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e020      	b.n	8007856 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	2240      	movs	r2, #64	; 0x40
 800781a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	3308      	adds	r3, #8
 8007822:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	e853 3f00 	ldrex	r3, [r3]
 800782a:	613b      	str	r3, [r7, #16]
   return(result);
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007832:	627b      	str	r3, [r7, #36]	; 0x24
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	3308      	adds	r3, #8
 800783a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800783c:	623a      	str	r2, [r7, #32]
 800783e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007840:	69f9      	ldr	r1, [r7, #28]
 8007842:	6a3a      	ldr	r2, [r7, #32]
 8007844:	e841 2300 	strex	r3, r2, [r1]
 8007848:	61bb      	str	r3, [r7, #24]
   return(result);
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d1e5      	bne.n	800781c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007850:	2300      	movs	r3, #0
 8007852:	e000      	b.n	8007856 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007854:	2302      	movs	r3, #2
  }
}
 8007856:	4618      	mov	r0, r3
 8007858:	3728      	adds	r7, #40	; 0x28
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	08008805 	.word	0x08008805
 8007864:	0800889f 	.word	0x0800889f
 8007868:	080088bb 	.word	0x080088bb

0800786c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b0ba      	sub	sp, #232	; 0xe8
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	69db      	ldr	r3, [r3, #28]
 800787a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007892:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007896:	f640 030f 	movw	r3, #2063	; 0x80f
 800789a:	4013      	ands	r3, r2
 800789c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80078a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d11b      	bne.n	80078e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80078a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ac:	f003 0320 	and.w	r3, r3, #32
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d015      	beq.n	80078e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80078b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078b8:	f003 0320 	and.w	r3, r3, #32
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d105      	bne.n	80078cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80078c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d009      	beq.n	80078e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 82e3 	beq.w	8007e9c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	4798      	blx	r3
      }
      return;
 80078de:	e2dd      	b.n	8007e9c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80078e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f000 8123 	beq.w	8007b30 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80078ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80078ee:	4b8d      	ldr	r3, [pc, #564]	; (8007b24 <HAL_UART_IRQHandler+0x2b8>)
 80078f0:	4013      	ands	r3, r2
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d106      	bne.n	8007904 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80078f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80078fa:	4b8b      	ldr	r3, [pc, #556]	; (8007b28 <HAL_UART_IRQHandler+0x2bc>)
 80078fc:	4013      	ands	r3, r2
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f000 8116 	beq.w	8007b30 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007908:	f003 0301 	and.w	r3, r3, #1
 800790c:	2b00      	cmp	r3, #0
 800790e:	d011      	beq.n	8007934 <HAL_UART_IRQHandler+0xc8>
 8007910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00b      	beq.n	8007934 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2201      	movs	r2, #1
 8007922:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800792a:	f043 0201 	orr.w	r2, r3, #1
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007938:	f003 0302 	and.w	r3, r3, #2
 800793c:	2b00      	cmp	r3, #0
 800793e:	d011      	beq.n	8007964 <HAL_UART_IRQHandler+0xf8>
 8007940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007944:	f003 0301 	and.w	r3, r3, #1
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00b      	beq.n	8007964 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2202      	movs	r2, #2
 8007952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800795a:	f043 0204 	orr.w	r2, r3, #4
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007968:	f003 0304 	and.w	r3, r3, #4
 800796c:	2b00      	cmp	r3, #0
 800796e:	d011      	beq.n	8007994 <HAL_UART_IRQHandler+0x128>
 8007970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007974:	f003 0301 	and.w	r3, r3, #1
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00b      	beq.n	8007994 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2204      	movs	r2, #4
 8007982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800798a:	f043 0202 	orr.w	r2, r3, #2
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007998:	f003 0308 	and.w	r3, r3, #8
 800799c:	2b00      	cmp	r3, #0
 800799e:	d017      	beq.n	80079d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80079a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079a4:	f003 0320 	and.w	r3, r3, #32
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d105      	bne.n	80079b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80079ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80079b0:	4b5c      	ldr	r3, [pc, #368]	; (8007b24 <HAL_UART_IRQHandler+0x2b8>)
 80079b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00b      	beq.n	80079d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2208      	movs	r2, #8
 80079be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079c6:	f043 0208 	orr.w	r2, r3, #8
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80079d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d012      	beq.n	8007a02 <HAL_UART_IRQHandler+0x196>
 80079dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00c      	beq.n	8007a02 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079f8:	f043 0220 	orr.w	r2, r3, #32
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 8249 	beq.w	8007ea0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a12:	f003 0320 	and.w	r3, r3, #32
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d013      	beq.n	8007a42 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a1e:	f003 0320 	and.w	r3, r3, #32
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d105      	bne.n	8007a32 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d007      	beq.n	8007a42 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a56:	2b40      	cmp	r3, #64	; 0x40
 8007a58:	d005      	beq.n	8007a66 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d054      	beq.n	8007b10 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fe66 	bl	8008738 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a76:	2b40      	cmp	r3, #64	; 0x40
 8007a78:	d146      	bne.n	8007b08 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	3308      	adds	r3, #8
 8007a80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a88:	e853 3f00 	ldrex	r3, [r3]
 8007a8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007a90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3308      	adds	r3, #8
 8007aa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007aa6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007aaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007ab2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007ab6:	e841 2300 	strex	r3, r2, [r1]
 8007aba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007abe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1d9      	bne.n	8007a7a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d017      	beq.n	8007b00 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ad6:	4a15      	ldr	r2, [pc, #84]	; (8007b2c <HAL_UART_IRQHandler+0x2c0>)
 8007ad8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7fc f997 	bl	8003e14 <HAL_DMA_Abort_IT>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d019      	beq.n	8007b20 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007afa:	4610      	mov	r0, r2
 8007afc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007afe:	e00f      	b.n	8007b20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f9e1 	bl	8007ec8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b06:	e00b      	b.n	8007b20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 f9dd 	bl	8007ec8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b0e:	e007      	b.n	8007b20 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f9d9 	bl	8007ec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007b1e:	e1bf      	b.n	8007ea0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b20:	bf00      	nop
    return;
 8007b22:	e1bd      	b.n	8007ea0 <HAL_UART_IRQHandler+0x634>
 8007b24:	10000001 	.word	0x10000001
 8007b28:	04000120 	.word	0x04000120
 8007b2c:	0800893b 	.word	0x0800893b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	f040 8153 	bne.w	8007de0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b3e:	f003 0310 	and.w	r3, r3, #16
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f000 814c 	beq.w	8007de0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b4c:	f003 0310 	and.w	r3, r3, #16
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f000 8145 	beq.w	8007de0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2210      	movs	r2, #16
 8007b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b68:	2b40      	cmp	r3, #64	; 0x40
 8007b6a:	f040 80bb 	bne.w	8007ce4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 818f 	beq.w	8007ea4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b8c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b90:	429a      	cmp	r2, r3
 8007b92:	f080 8187 	bcs.w	8007ea4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 0320 	and.w	r3, r3, #32
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f040 8087 	bne.w	8007cc2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007bc0:	e853 3f00 	ldrex	r3, [r3]
 8007bc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007bc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	461a      	mov	r2, r3
 8007bda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007be2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007bea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007bee:	e841 2300 	strex	r3, r2, [r1]
 8007bf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1da      	bne.n	8007bb4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	3308      	adds	r3, #8
 8007c04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c08:	e853 3f00 	ldrex	r3, [r3]
 8007c0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c10:	f023 0301 	bic.w	r3, r3, #1
 8007c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	3308      	adds	r3, #8
 8007c1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c2e:	e841 2300 	strex	r3, r2, [r1]
 8007c32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1e1      	bne.n	8007bfe <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	3308      	adds	r3, #8
 8007c40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c44:	e853 3f00 	ldrex	r3, [r3]
 8007c48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	3308      	adds	r3, #8
 8007c5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007c5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007c64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c66:	e841 2300 	strex	r3, r2, [r1]
 8007c6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007c6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1e3      	bne.n	8007c3a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2220      	movs	r2, #32
 8007c76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c88:	e853 3f00 	ldrex	r3, [r3]
 8007c8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c90:	f023 0310 	bic.w	r3, r3, #16
 8007c94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ca2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ca4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ca8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007caa:	e841 2300 	strex	r3, r2, [r1]
 8007cae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1e4      	bne.n	8007c80 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fc f84a 	bl	8003d56 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2202      	movs	r2, #2
 8007cc6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	4619      	mov	r1, r3
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f8fd 	bl	8007edc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ce2:	e0df      	b.n	8007ea4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 80d1 	beq.w	8007ea8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007d06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f000 80cc 	beq.w	8007ea8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d18:	e853 3f00 	ldrex	r3, [r3]
 8007d1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d32:	647b      	str	r3, [r7, #68]	; 0x44
 8007d34:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d3a:	e841 2300 	strex	r3, r2, [r1]
 8007d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1e4      	bne.n	8007d10 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	3308      	adds	r3, #8
 8007d4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	e853 3f00 	ldrex	r3, [r3]
 8007d54:	623b      	str	r3, [r7, #32]
   return(result);
 8007d56:	6a3b      	ldr	r3, [r7, #32]
 8007d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d5c:	f023 0301 	bic.w	r3, r3, #1
 8007d60:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	3308      	adds	r3, #8
 8007d6a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007d6e:	633a      	str	r2, [r7, #48]	; 0x30
 8007d70:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d76:	e841 2300 	strex	r3, r2, [r1]
 8007d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1e1      	bne.n	8007d46 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2220      	movs	r2, #32
 8007d86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	e853 3f00 	ldrex	r3, [r3]
 8007da2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f023 0310 	bic.w	r3, r3, #16
 8007daa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	461a      	mov	r2, r3
 8007db4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007db8:	61fb      	str	r3, [r7, #28]
 8007dba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbc:	69b9      	ldr	r1, [r7, #24]
 8007dbe:	69fa      	ldr	r2, [r7, #28]
 8007dc0:	e841 2300 	strex	r3, r2, [r1]
 8007dc4:	617b      	str	r3, [r7, #20]
   return(result);
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1e4      	bne.n	8007d96 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2202      	movs	r2, #2
 8007dd0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007dd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f87f 	bl	8007edc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007dde:	e063      	b.n	8007ea8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007de4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00e      	beq.n	8007e0a <HAL_UART_IRQHandler+0x59e>
 8007dec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007df0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d008      	beq.n	8007e0a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007e00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 fdda 	bl	80089bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e08:	e051      	b.n	8007eae <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d014      	beq.n	8007e40 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d105      	bne.n	8007e2e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d008      	beq.n	8007e40 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d03a      	beq.n	8007eac <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	4798      	blx	r3
    }
    return;
 8007e3e:	e035      	b.n	8007eac <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d009      	beq.n	8007e60 <HAL_UART_IRQHandler+0x5f4>
 8007e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d003      	beq.n	8007e60 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 fd84 	bl	8008966 <UART_EndTransmit_IT>
    return;
 8007e5e:	e026      	b.n	8007eae <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d009      	beq.n	8007e80 <HAL_UART_IRQHandler+0x614>
 8007e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d003      	beq.n	8007e80 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fdb3 	bl	80089e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e7e:	e016      	b.n	8007eae <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d010      	beq.n	8007eae <HAL_UART_IRQHandler+0x642>
 8007e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	da0c      	bge.n	8007eae <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 fd9b 	bl	80089d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e9a:	e008      	b.n	8007eae <HAL_UART_IRQHandler+0x642>
      return;
 8007e9c:	bf00      	nop
 8007e9e:	e006      	b.n	8007eae <HAL_UART_IRQHandler+0x642>
    return;
 8007ea0:	bf00      	nop
 8007ea2:	e004      	b.n	8007eae <HAL_UART_IRQHandler+0x642>
      return;
 8007ea4:	bf00      	nop
 8007ea6:	e002      	b.n	8007eae <HAL_UART_IRQHandler+0x642>
      return;
 8007ea8:	bf00      	nop
 8007eaa:	e000      	b.n	8007eae <HAL_UART_IRQHandler+0x642>
    return;
 8007eac:	bf00      	nop
  }
}
 8007eae:	37e8      	adds	r7, #232	; 0xe8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ee8:	bf00      	nop
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr

08007ef4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ef8:	b08c      	sub	sp, #48	; 0x30
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	689a      	ldr	r2, [r3, #8]
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	691b      	ldr	r3, [r3, #16]
 8007f0c:	431a      	orrs	r2, r3
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	695b      	ldr	r3, [r3, #20]
 8007f12:	431a      	orrs	r2, r3
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	69db      	ldr	r3, [r3, #28]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	4baf      	ldr	r3, [pc, #700]	; (80081e0 <UART_SetConfig+0x2ec>)
 8007f24:	4013      	ands	r3, r2
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	6812      	ldr	r2, [r2, #0]
 8007f2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f2c:	430b      	orrs	r3, r1
 8007f2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	68da      	ldr	r2, [r3, #12]
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	430a      	orrs	r2, r1
 8007f44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4aa4      	ldr	r2, [pc, #656]	; (80081e4 <UART_SetConfig+0x2f0>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d004      	beq.n	8007f60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689b      	ldr	r3, [r3, #8]
 8007f66:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007f6a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	6812      	ldr	r2, [r2, #0]
 8007f72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f74:	430b      	orrs	r3, r1
 8007f76:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7e:	f023 010f 	bic.w	r1, r3, #15
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	430a      	orrs	r2, r1
 8007f8c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a95      	ldr	r2, [pc, #596]	; (80081e8 <UART_SetConfig+0x2f4>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d125      	bne.n	8007fe4 <UART_SetConfig+0xf0>
 8007f98:	2003      	movs	r0, #3
 8007f9a:	f7ff fb77 	bl	800768c <LL_RCC_GetUSARTClockSource>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b03      	cmp	r3, #3
 8007fa2:	d81b      	bhi.n	8007fdc <UART_SetConfig+0xe8>
 8007fa4:	a201      	add	r2, pc, #4	; (adr r2, 8007fac <UART_SetConfig+0xb8>)
 8007fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007faa:	bf00      	nop
 8007fac:	08007fbd 	.word	0x08007fbd
 8007fb0:	08007fcd 	.word	0x08007fcd
 8007fb4:	08007fc5 	.word	0x08007fc5
 8007fb8:	08007fd5 	.word	0x08007fd5
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fc2:	e042      	b.n	800804a <UART_SetConfig+0x156>
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fca:	e03e      	b.n	800804a <UART_SetConfig+0x156>
 8007fcc:	2304      	movs	r3, #4
 8007fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fd2:	e03a      	b.n	800804a <UART_SetConfig+0x156>
 8007fd4:	2308      	movs	r3, #8
 8007fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fda:	e036      	b.n	800804a <UART_SetConfig+0x156>
 8007fdc:	2310      	movs	r3, #16
 8007fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fe2:	e032      	b.n	800804a <UART_SetConfig+0x156>
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a7e      	ldr	r2, [pc, #504]	; (80081e4 <UART_SetConfig+0x2f0>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d12a      	bne.n	8008044 <UART_SetConfig+0x150>
 8007fee:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8007ff2:	f7ff fb5b 	bl	80076ac <LL_RCC_GetLPUARTClockSource>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ffc:	d01a      	beq.n	8008034 <UART_SetConfig+0x140>
 8007ffe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008002:	d81b      	bhi.n	800803c <UART_SetConfig+0x148>
 8008004:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008008:	d00c      	beq.n	8008024 <UART_SetConfig+0x130>
 800800a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800800e:	d815      	bhi.n	800803c <UART_SetConfig+0x148>
 8008010:	2b00      	cmp	r3, #0
 8008012:	d003      	beq.n	800801c <UART_SetConfig+0x128>
 8008014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008018:	d008      	beq.n	800802c <UART_SetConfig+0x138>
 800801a:	e00f      	b.n	800803c <UART_SetConfig+0x148>
 800801c:	2300      	movs	r3, #0
 800801e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008022:	e012      	b.n	800804a <UART_SetConfig+0x156>
 8008024:	2302      	movs	r3, #2
 8008026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800802a:	e00e      	b.n	800804a <UART_SetConfig+0x156>
 800802c:	2304      	movs	r3, #4
 800802e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008032:	e00a      	b.n	800804a <UART_SetConfig+0x156>
 8008034:	2308      	movs	r3, #8
 8008036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800803a:	e006      	b.n	800804a <UART_SetConfig+0x156>
 800803c:	2310      	movs	r3, #16
 800803e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008042:	e002      	b.n	800804a <UART_SetConfig+0x156>
 8008044:	2310      	movs	r3, #16
 8008046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a65      	ldr	r2, [pc, #404]	; (80081e4 <UART_SetConfig+0x2f0>)
 8008050:	4293      	cmp	r3, r2
 8008052:	f040 8097 	bne.w	8008184 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008056:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800805a:	2b08      	cmp	r3, #8
 800805c:	d823      	bhi.n	80080a6 <UART_SetConfig+0x1b2>
 800805e:	a201      	add	r2, pc, #4	; (adr r2, 8008064 <UART_SetConfig+0x170>)
 8008060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008064:	08008089 	.word	0x08008089
 8008068:	080080a7 	.word	0x080080a7
 800806c:	08008091 	.word	0x08008091
 8008070:	080080a7 	.word	0x080080a7
 8008074:	08008097 	.word	0x08008097
 8008078:	080080a7 	.word	0x080080a7
 800807c:	080080a7 	.word	0x080080a7
 8008080:	080080a7 	.word	0x080080a7
 8008084:	0800809f 	.word	0x0800809f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008088:	f7fd fc7e 	bl	8005988 <HAL_RCC_GetPCLK1Freq>
 800808c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800808e:	e010      	b.n	80080b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008090:	4b56      	ldr	r3, [pc, #344]	; (80081ec <UART_SetConfig+0x2f8>)
 8008092:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008094:	e00d      	b.n	80080b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008096:	f7fd fbf7 	bl	8005888 <HAL_RCC_GetSysClockFreq>
 800809a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800809c:	e009      	b.n	80080b2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800809e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80080a4:	e005      	b.n	80080b2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 80080a6:	2300      	movs	r3, #0
 80080a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80080b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f000 812b 	beq.w	8008310 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080be:	4a4c      	ldr	r2, [pc, #304]	; (80081f0 <UART_SetConfig+0x2fc>)
 80080c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080c4:	461a      	mov	r2, r3
 80080c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80080cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	685a      	ldr	r2, [r3, #4]
 80080d2:	4613      	mov	r3, r2
 80080d4:	005b      	lsls	r3, r3, #1
 80080d6:	4413      	add	r3, r2
 80080d8:	69ba      	ldr	r2, [r7, #24]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d305      	bcc.n	80080ea <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80080e4:	69ba      	ldr	r2, [r7, #24]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d903      	bls.n	80080f2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80080f0:	e10e      	b.n	8008310 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f4:	2200      	movs	r2, #0
 80080f6:	60bb      	str	r3, [r7, #8]
 80080f8:	60fa      	str	r2, [r7, #12]
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fe:	4a3c      	ldr	r2, [pc, #240]	; (80081f0 <UART_SetConfig+0x2fc>)
 8008100:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008104:	b29b      	uxth	r3, r3
 8008106:	2200      	movs	r2, #0
 8008108:	603b      	str	r3, [r7, #0]
 800810a:	607a      	str	r2, [r7, #4]
 800810c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008110:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008114:	f7f8 fc7a 	bl	8000a0c <__aeabi_uldivmod>
 8008118:	4602      	mov	r2, r0
 800811a:	460b      	mov	r3, r1
 800811c:	4610      	mov	r0, r2
 800811e:	4619      	mov	r1, r3
 8008120:	f04f 0200 	mov.w	r2, #0
 8008124:	f04f 0300 	mov.w	r3, #0
 8008128:	020b      	lsls	r3, r1, #8
 800812a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800812e:	0202      	lsls	r2, r0, #8
 8008130:	6979      	ldr	r1, [r7, #20]
 8008132:	6849      	ldr	r1, [r1, #4]
 8008134:	0849      	lsrs	r1, r1, #1
 8008136:	2000      	movs	r0, #0
 8008138:	460c      	mov	r4, r1
 800813a:	4605      	mov	r5, r0
 800813c:	eb12 0804 	adds.w	r8, r2, r4
 8008140:	eb43 0905 	adc.w	r9, r3, r5
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	469a      	mov	sl, r3
 800814c:	4693      	mov	fp, r2
 800814e:	4652      	mov	r2, sl
 8008150:	465b      	mov	r3, fp
 8008152:	4640      	mov	r0, r8
 8008154:	4649      	mov	r1, r9
 8008156:	f7f8 fc59 	bl	8000a0c <__aeabi_uldivmod>
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	4613      	mov	r3, r2
 8008160:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008162:	6a3b      	ldr	r3, [r7, #32]
 8008164:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008168:	d308      	bcc.n	800817c <UART_SetConfig+0x288>
 800816a:	6a3b      	ldr	r3, [r7, #32]
 800816c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008170:	d204      	bcs.n	800817c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	6a3a      	ldr	r2, [r7, #32]
 8008178:	60da      	str	r2, [r3, #12]
 800817a:	e0c9      	b.n	8008310 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008182:	e0c5      	b.n	8008310 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	69db      	ldr	r3, [r3, #28]
 8008188:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800818c:	d16d      	bne.n	800826a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800818e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008192:	3b01      	subs	r3, #1
 8008194:	2b07      	cmp	r3, #7
 8008196:	d82d      	bhi.n	80081f4 <UART_SetConfig+0x300>
 8008198:	a201      	add	r2, pc, #4	; (adr r2, 80081a0 <UART_SetConfig+0x2ac>)
 800819a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819e:	bf00      	nop
 80081a0:	080081c1 	.word	0x080081c1
 80081a4:	080081c9 	.word	0x080081c9
 80081a8:	080081f5 	.word	0x080081f5
 80081ac:	080081cf 	.word	0x080081cf
 80081b0:	080081f5 	.word	0x080081f5
 80081b4:	080081f5 	.word	0x080081f5
 80081b8:	080081f5 	.word	0x080081f5
 80081bc:	080081d7 	.word	0x080081d7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081c0:	f7fd fbf8 	bl	80059b4 <HAL_RCC_GetPCLK2Freq>
 80081c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081c6:	e01b      	b.n	8008200 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081c8:	4b08      	ldr	r3, [pc, #32]	; (80081ec <UART_SetConfig+0x2f8>)
 80081ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081cc:	e018      	b.n	8008200 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081ce:	f7fd fb5b 	bl	8005888 <HAL_RCC_GetSysClockFreq>
 80081d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081d4:	e014      	b.n	8008200 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081dc:	e010      	b.n	8008200 <UART_SetConfig+0x30c>
 80081de:	bf00      	nop
 80081e0:	cfff69f3 	.word	0xcfff69f3
 80081e4:	40008000 	.word	0x40008000
 80081e8:	40013800 	.word	0x40013800
 80081ec:	00f42400 	.word	0x00f42400
 80081f0:	0801003c 	.word	0x0801003c
      default:
        pclk = 0U;
 80081f4:	2300      	movs	r3, #0
 80081f6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80081fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008202:	2b00      	cmp	r3, #0
 8008204:	f000 8084 	beq.w	8008310 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820c:	4a4b      	ldr	r2, [pc, #300]	; (800833c <UART_SetConfig+0x448>)
 800820e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008212:	461a      	mov	r2, r3
 8008214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008216:	fbb3 f3f2 	udiv	r3, r3, r2
 800821a:	005a      	lsls	r2, r3, #1
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	085b      	lsrs	r3, r3, #1
 8008222:	441a      	add	r2, r3
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	fbb2 f3f3 	udiv	r3, r2, r3
 800822c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	2b0f      	cmp	r3, #15
 8008232:	d916      	bls.n	8008262 <UART_SetConfig+0x36e>
 8008234:	6a3b      	ldr	r3, [r7, #32]
 8008236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800823a:	d212      	bcs.n	8008262 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800823c:	6a3b      	ldr	r3, [r7, #32]
 800823e:	b29b      	uxth	r3, r3
 8008240:	f023 030f 	bic.w	r3, r3, #15
 8008244:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008246:	6a3b      	ldr	r3, [r7, #32]
 8008248:	085b      	lsrs	r3, r3, #1
 800824a:	b29b      	uxth	r3, r3
 800824c:	f003 0307 	and.w	r3, r3, #7
 8008250:	b29a      	uxth	r2, r3
 8008252:	8bfb      	ldrh	r3, [r7, #30]
 8008254:	4313      	orrs	r3, r2
 8008256:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	8bfa      	ldrh	r2, [r7, #30]
 800825e:	60da      	str	r2, [r3, #12]
 8008260:	e056      	b.n	8008310 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008268:	e052      	b.n	8008310 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800826a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800826e:	3b01      	subs	r3, #1
 8008270:	2b07      	cmp	r3, #7
 8008272:	d822      	bhi.n	80082ba <UART_SetConfig+0x3c6>
 8008274:	a201      	add	r2, pc, #4	; (adr r2, 800827c <UART_SetConfig+0x388>)
 8008276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827a:	bf00      	nop
 800827c:	0800829d 	.word	0x0800829d
 8008280:	080082a5 	.word	0x080082a5
 8008284:	080082bb 	.word	0x080082bb
 8008288:	080082ab 	.word	0x080082ab
 800828c:	080082bb 	.word	0x080082bb
 8008290:	080082bb 	.word	0x080082bb
 8008294:	080082bb 	.word	0x080082bb
 8008298:	080082b3 	.word	0x080082b3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800829c:	f7fd fb8a 	bl	80059b4 <HAL_RCC_GetPCLK2Freq>
 80082a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082a2:	e010      	b.n	80082c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082a4:	4b26      	ldr	r3, [pc, #152]	; (8008340 <UART_SetConfig+0x44c>)
 80082a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082a8:	e00d      	b.n	80082c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082aa:	f7fd faed 	bl	8005888 <HAL_RCC_GetSysClockFreq>
 80082ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082b0:	e009      	b.n	80082c6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082b8:	e005      	b.n	80082c6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80082c4:	bf00      	nop
    }

    if (pclk != 0U)
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d021      	beq.n	8008310 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d0:	4a1a      	ldr	r2, [pc, #104]	; (800833c <UART_SetConfig+0x448>)
 80082d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082d6:	461a      	mov	r2, r3
 80082d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082da:	fbb3 f2f2 	udiv	r2, r3, r2
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	085b      	lsrs	r3, r3, #1
 80082e4:	441a      	add	r2, r3
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082f0:	6a3b      	ldr	r3, [r7, #32]
 80082f2:	2b0f      	cmp	r3, #15
 80082f4:	d909      	bls.n	800830a <UART_SetConfig+0x416>
 80082f6:	6a3b      	ldr	r3, [r7, #32]
 80082f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082fc:	d205      	bcs.n	800830a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80082fe:	6a3b      	ldr	r3, [r7, #32]
 8008300:	b29a      	uxth	r2, r3
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	60da      	str	r2, [r3, #12]
 8008308:	e002      	b.n	8008310 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	2201      	movs	r2, #1
 8008314:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	2201      	movs	r2, #1
 800831c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	2200      	movs	r2, #0
 8008324:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	2200      	movs	r2, #0
 800832a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800832c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008330:	4618      	mov	r0, r3
 8008332:	3730      	adds	r7, #48	; 0x30
 8008334:	46bd      	mov	sp, r7
 8008336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800833a:	bf00      	nop
 800833c:	0801003c 	.word	0x0801003c
 8008340:	00f42400 	.word	0x00f42400

08008344 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008350:	f003 0308 	and.w	r3, r3, #8
 8008354:	2b00      	cmp	r3, #0
 8008356:	d00a      	beq.n	800836e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	430a      	orrs	r2, r1
 800836c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008372:	f003 0301 	and.w	r3, r3, #1
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00a      	beq.n	8008390 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	430a      	orrs	r2, r1
 800838e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008394:	f003 0302 	and.w	r3, r3, #2
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00a      	beq.n	80083b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	430a      	orrs	r2, r1
 80083b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b6:	f003 0304 	and.w	r3, r3, #4
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00a      	beq.n	80083d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	430a      	orrs	r2, r1
 80083d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d8:	f003 0310 	and.w	r3, r3, #16
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00a      	beq.n	80083f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	430a      	orrs	r2, r1
 80083f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083fa:	f003 0320 	and.w	r3, r3, #32
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00a      	beq.n	8008418 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	430a      	orrs	r2, r1
 8008416:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800841c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008420:	2b00      	cmp	r3, #0
 8008422:	d01a      	beq.n	800845a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	430a      	orrs	r2, r1
 8008438:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800843e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008442:	d10a      	bne.n	800845a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	430a      	orrs	r2, r1
 8008458:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800845e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00a      	beq.n	800847c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	430a      	orrs	r2, r1
 800847a:	605a      	str	r2, [r3, #4]
  }
}
 800847c:	bf00      	nop
 800847e:	370c      	adds	r7, #12
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b098      	sub	sp, #96	; 0x60
 800848c:	af02      	add	r7, sp, #8
 800848e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008498:	f7fb f970 	bl	800377c <HAL_GetTick>
 800849c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 0308 	and.w	r3, r3, #8
 80084a8:	2b08      	cmp	r3, #8
 80084aa:	d12f      	bne.n	800850c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084b0:	9300      	str	r3, [sp, #0]
 80084b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084b4:	2200      	movs	r2, #0
 80084b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 f88e 	bl	80085dc <UART_WaitOnFlagUntilTimeout>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d022      	beq.n	800850c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ce:	e853 3f00 	ldrex	r3, [r3]
 80084d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084da:	653b      	str	r3, [r7, #80]	; 0x50
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	461a      	mov	r2, r3
 80084e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084e4:	647b      	str	r3, [r7, #68]	; 0x44
 80084e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084ec:	e841 2300 	strex	r3, r2, [r1]
 80084f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1e6      	bne.n	80084c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2220      	movs	r2, #32
 80084fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008508:	2303      	movs	r3, #3
 800850a:	e063      	b.n	80085d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 0304 	and.w	r3, r3, #4
 8008516:	2b04      	cmp	r3, #4
 8008518:	d149      	bne.n	80085ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800851a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008522:	2200      	movs	r2, #0
 8008524:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 f857 	bl	80085dc <UART_WaitOnFlagUntilTimeout>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d03c      	beq.n	80085ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	e853 3f00 	ldrex	r3, [r3]
 8008540:	623b      	str	r3, [r7, #32]
   return(result);
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008548:	64fb      	str	r3, [r7, #76]	; 0x4c
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	461a      	mov	r2, r3
 8008550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008552:	633b      	str	r3, [r7, #48]	; 0x30
 8008554:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008556:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800855a:	e841 2300 	strex	r3, r2, [r1]
 800855e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008562:	2b00      	cmp	r3, #0
 8008564:	d1e6      	bne.n	8008534 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	3308      	adds	r3, #8
 800856c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	e853 3f00 	ldrex	r3, [r3]
 8008574:	60fb      	str	r3, [r7, #12]
   return(result);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f023 0301 	bic.w	r3, r3, #1
 800857c:	64bb      	str	r3, [r7, #72]	; 0x48
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	3308      	adds	r3, #8
 8008584:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008586:	61fa      	str	r2, [r7, #28]
 8008588:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800858a:	69b9      	ldr	r1, [r7, #24]
 800858c:	69fa      	ldr	r2, [r7, #28]
 800858e:	e841 2300 	strex	r3, r2, [r1]
 8008592:	617b      	str	r3, [r7, #20]
   return(result);
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d1e5      	bne.n	8008566 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2220      	movs	r2, #32
 800859e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085aa:	2303      	movs	r3, #3
 80085ac:	e012      	b.n	80085d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2220      	movs	r2, #32
 80085b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2220      	movs	r2, #32
 80085ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2200      	movs	r2, #0
 80085c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3758      	adds	r7, #88	; 0x58
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	603b      	str	r3, [r7, #0]
 80085e8:	4613      	mov	r3, r2
 80085ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085ec:	e04f      	b.n	800868e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f4:	d04b      	beq.n	800868e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085f6:	f7fb f8c1 	bl	800377c <HAL_GetTick>
 80085fa:	4602      	mov	r2, r0
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	69ba      	ldr	r2, [r7, #24]
 8008602:	429a      	cmp	r2, r3
 8008604:	d302      	bcc.n	800860c <UART_WaitOnFlagUntilTimeout+0x30>
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d101      	bne.n	8008610 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800860c:	2303      	movs	r3, #3
 800860e:	e04e      	b.n	80086ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f003 0304 	and.w	r3, r3, #4
 800861a:	2b00      	cmp	r3, #0
 800861c:	d037      	beq.n	800868e <UART_WaitOnFlagUntilTimeout+0xb2>
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	2b80      	cmp	r3, #128	; 0x80
 8008622:	d034      	beq.n	800868e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	2b40      	cmp	r3, #64	; 0x40
 8008628:	d031      	beq.n	800868e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	69db      	ldr	r3, [r3, #28]
 8008630:	f003 0308 	and.w	r3, r3, #8
 8008634:	2b08      	cmp	r3, #8
 8008636:	d110      	bne.n	800865a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2208      	movs	r2, #8
 800863e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f000 f879 	bl	8008738 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2208      	movs	r2, #8
 800864a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2200      	movs	r2, #0
 8008652:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008656:	2301      	movs	r3, #1
 8008658:	e029      	b.n	80086ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	69db      	ldr	r3, [r3, #28]
 8008660:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008668:	d111      	bne.n	800868e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008672:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f000 f85f 	bl	8008738 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2220      	movs	r2, #32
 800867e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800868a:	2303      	movs	r3, #3
 800868c:	e00f      	b.n	80086ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	69da      	ldr	r2, [r3, #28]
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	4013      	ands	r3, r2
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	429a      	cmp	r2, r3
 800869c:	bf0c      	ite	eq
 800869e:	2301      	moveq	r3, #1
 80086a0:	2300      	movne	r3, #0
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	461a      	mov	r2, r3
 80086a6:	79fb      	ldrb	r3, [r7, #7]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d0a0      	beq.n	80085ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80086b6:	b480      	push	{r7}
 80086b8:	b08f      	sub	sp, #60	; 0x3c
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c4:	6a3b      	ldr	r3, [r7, #32]
 80086c6:	e853 3f00 	ldrex	r3, [r3]
 80086ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80086d2:	637b      	str	r3, [r7, #52]	; 0x34
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	461a      	mov	r2, r3
 80086da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086de:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086e4:	e841 2300 	strex	r3, r2, [r1]
 80086e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d1e6      	bne.n	80086be <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	3308      	adds	r3, #8
 80086f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	e853 3f00 	ldrex	r3, [r3]
 80086fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008706:	633b      	str	r3, [r7, #48]	; 0x30
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	3308      	adds	r3, #8
 800870e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008710:	61ba      	str	r2, [r7, #24]
 8008712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008714:	6979      	ldr	r1, [r7, #20]
 8008716:	69ba      	ldr	r2, [r7, #24]
 8008718:	e841 2300 	strex	r3, r2, [r1]
 800871c:	613b      	str	r3, [r7, #16]
   return(result);
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d1e5      	bne.n	80086f0 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2220      	movs	r2, #32
 8008728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800872c:	bf00      	nop
 800872e:	373c      	adds	r7, #60	; 0x3c
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008738:	b480      	push	{r7}
 800873a:	b095      	sub	sp, #84	; 0x54
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008748:	e853 3f00 	ldrex	r3, [r3]
 800874c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800874e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008750:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008754:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	461a      	mov	r2, r3
 800875c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800875e:	643b      	str	r3, [r7, #64]	; 0x40
 8008760:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008762:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008764:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008766:	e841 2300 	strex	r3, r2, [r1]
 800876a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800876c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876e:	2b00      	cmp	r3, #0
 8008770:	d1e6      	bne.n	8008740 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3308      	adds	r3, #8
 8008778:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877a:	6a3b      	ldr	r3, [r7, #32]
 800877c:	e853 3f00 	ldrex	r3, [r3]
 8008780:	61fb      	str	r3, [r7, #28]
   return(result);
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008788:	f023 0301 	bic.w	r3, r3, #1
 800878c:	64bb      	str	r3, [r7, #72]	; 0x48
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3308      	adds	r3, #8
 8008794:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008796:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008798:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800879c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800879e:	e841 2300 	strex	r3, r2, [r1]
 80087a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1e3      	bne.n	8008772 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ae:	2b01      	cmp	r3, #1
 80087b0:	d118      	bne.n	80087e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	e853 3f00 	ldrex	r3, [r3]
 80087be:	60bb      	str	r3, [r7, #8]
   return(result);
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	f023 0310 	bic.w	r3, r3, #16
 80087c6:	647b      	str	r3, [r7, #68]	; 0x44
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	461a      	mov	r2, r3
 80087ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087d0:	61bb      	str	r3, [r7, #24]
 80087d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d4:	6979      	ldr	r1, [r7, #20]
 80087d6:	69ba      	ldr	r2, [r7, #24]
 80087d8:	e841 2300 	strex	r3, r2, [r1]
 80087dc:	613b      	str	r3, [r7, #16]
   return(result);
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1e6      	bne.n	80087b2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2220      	movs	r2, #32
 80087e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80087f8:	bf00      	nop
 80087fa:	3754      	adds	r7, #84	; 0x54
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b090      	sub	sp, #64	; 0x40
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008810:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0320 	and.w	r3, r3, #32
 800881c:	2b00      	cmp	r3, #0
 800881e:	d137      	bne.n	8008890 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008822:	2200      	movs	r2, #0
 8008824:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	3308      	adds	r3, #8
 800882e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008832:	e853 3f00 	ldrex	r3, [r3]
 8008836:	623b      	str	r3, [r7, #32]
   return(result);
 8008838:	6a3b      	ldr	r3, [r7, #32]
 800883a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800883e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	3308      	adds	r3, #8
 8008846:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008848:	633a      	str	r2, [r7, #48]	; 0x30
 800884a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800884c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800884e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008850:	e841 2300 	strex	r3, r2, [r1]
 8008854:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1e5      	bne.n	8008828 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800885c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	e853 3f00 	ldrex	r3, [r3]
 8008868:	60fb      	str	r3, [r7, #12]
   return(result);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008870:	637b      	str	r3, [r7, #52]	; 0x34
 8008872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	461a      	mov	r2, r3
 8008878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800887a:	61fb      	str	r3, [r7, #28]
 800887c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887e:	69b9      	ldr	r1, [r7, #24]
 8008880:	69fa      	ldr	r2, [r7, #28]
 8008882:	e841 2300 	strex	r3, r2, [r1]
 8008886:	617b      	str	r3, [r7, #20]
   return(result);
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1e6      	bne.n	800885c <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800888e:	e002      	b.n	8008896 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008890:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008892:	f7f9 ffa7 	bl	80027e4 <HAL_UART_TxCpltCallback>
}
 8008896:	bf00      	nop
 8008898:	3740      	adds	r7, #64	; 0x40
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800889e:	b580      	push	{r7, lr}
 80088a0:	b084      	sub	sp, #16
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088aa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f7ff fb01 	bl	8007eb4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088b2:	bf00      	nop
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b086      	sub	sp, #24
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ce:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088d6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088e2:	2b80      	cmp	r3, #128	; 0x80
 80088e4:	d109      	bne.n	80088fa <UART_DMAError+0x40>
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	2b21      	cmp	r3, #33	; 0x21
 80088ea:	d106      	bne.n	80088fa <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80088f4:	6978      	ldr	r0, [r7, #20]
 80088f6:	f7ff fede 	bl	80086b6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008904:	2b40      	cmp	r3, #64	; 0x40
 8008906:	d109      	bne.n	800891c <UART_DMAError+0x62>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2b22      	cmp	r3, #34	; 0x22
 800890c:	d106      	bne.n	800891c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	2200      	movs	r2, #0
 8008912:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008916:	6978      	ldr	r0, [r7, #20]
 8008918:	f7ff ff0e 	bl	8008738 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008922:	f043 0210 	orr.w	r2, r3, #16
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800892c:	6978      	ldr	r0, [r7, #20]
 800892e:	f7ff facb 	bl	8007ec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008932:	bf00      	nop
 8008934:	3718      	adds	r7, #24
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}

0800893a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800893a:	b580      	push	{r7, lr}
 800893c:	b084      	sub	sp, #16
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008946:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2200      	movs	r2, #0
 8008954:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f7ff fab5 	bl	8007ec8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800895e:	bf00      	nop
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b088      	sub	sp, #32
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	e853 3f00 	ldrex	r3, [r3]
 800897a:	60bb      	str	r3, [r7, #8]
   return(result);
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008982:	61fb      	str	r3, [r7, #28]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	461a      	mov	r2, r3
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	61bb      	str	r3, [r7, #24]
 800898e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008990:	6979      	ldr	r1, [r7, #20]
 8008992:	69ba      	ldr	r2, [r7, #24]
 8008994:	e841 2300 	strex	r3, r2, [r1]
 8008998:	613b      	str	r3, [r7, #16]
   return(result);
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d1e6      	bne.n	800896e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2220      	movs	r2, #32
 80089a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f7f9 ff18 	bl	80027e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089b4:	bf00      	nop
 80089b6:	3720      	adds	r7, #32
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80089ec:	bf00      	nop
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d101      	bne.n	8008a0e <HAL_UARTEx_DisableFifoMode+0x16>
 8008a0a:	2302      	movs	r3, #2
 8008a0c:	e027      	b.n	8008a5e <HAL_UARTEx_DisableFifoMode+0x66>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2201      	movs	r2, #1
 8008a12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2224      	movs	r2, #36	; 0x24
 8008a1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f022 0201 	bic.w	r2, r2, #1
 8008a34:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a3c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2220      	movs	r2, #32
 8008a50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3714      	adds	r7, #20
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr

08008a6a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a6a:	b580      	push	{r7, lr}
 8008a6c:	b084      	sub	sp, #16
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
 8008a72:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d101      	bne.n	8008a82 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008a7e:	2302      	movs	r3, #2
 8008a80:	e02d      	b.n	8008ade <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2201      	movs	r2, #1
 8008a86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2224      	movs	r2, #36	; 0x24
 8008a8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f022 0201 	bic.w	r2, r2, #1
 8008aa8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	683a      	ldr	r2, [r7, #0]
 8008aba:	430a      	orrs	r2, r1
 8008abc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 f850 	bl	8008b64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	68fa      	ldr	r2, [r7, #12]
 8008aca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2220      	movs	r2, #32
 8008ad0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b084      	sub	sp, #16
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
 8008aee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d101      	bne.n	8008afe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008afa:	2302      	movs	r3, #2
 8008afc:	e02d      	b.n	8008b5a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2201      	movs	r2, #1
 8008b02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2224      	movs	r2, #36	; 0x24
 8008b0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f022 0201 	bic.w	r2, r2, #1
 8008b24:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	683a      	ldr	r2, [r7, #0]
 8008b36:	430a      	orrs	r2, r1
 8008b38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f812 	bl	8008b64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	68fa      	ldr	r2, [r7, #12]
 8008b46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2220      	movs	r2, #32
 8008b4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
	...

08008b64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d108      	bne.n	8008b86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b84:	e031      	b.n	8008bea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b86:	2308      	movs	r3, #8
 8008b88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b8a:	2308      	movs	r3, #8
 8008b8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	0e5b      	lsrs	r3, r3, #25
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	f003 0307 	and.w	r3, r3, #7
 8008b9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	0f5b      	lsrs	r3, r3, #29
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	f003 0307 	and.w	r3, r3, #7
 8008bac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bae:	7bbb      	ldrb	r3, [r7, #14]
 8008bb0:	7b3a      	ldrb	r2, [r7, #12]
 8008bb2:	4911      	ldr	r1, [pc, #68]	; (8008bf8 <UARTEx_SetNbDataToProcess+0x94>)
 8008bb4:	5c8a      	ldrb	r2, [r1, r2]
 8008bb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008bba:	7b3a      	ldrb	r2, [r7, #12]
 8008bbc:	490f      	ldr	r1, [pc, #60]	; (8008bfc <UARTEx_SetNbDataToProcess+0x98>)
 8008bbe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008bc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bcc:	7bfb      	ldrb	r3, [r7, #15]
 8008bce:	7b7a      	ldrb	r2, [r7, #13]
 8008bd0:	4909      	ldr	r1, [pc, #36]	; (8008bf8 <UARTEx_SetNbDataToProcess+0x94>)
 8008bd2:	5c8a      	ldrb	r2, [r1, r2]
 8008bd4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008bd8:	7b7a      	ldrb	r2, [r7, #13]
 8008bda:	4908      	ldr	r1, [pc, #32]	; (8008bfc <UARTEx_SetNbDataToProcess+0x98>)
 8008bdc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008bde:	fb93 f3f2 	sdiv	r3, r3, r2
 8008be2:	b29a      	uxth	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008bea:	bf00      	nop
 8008bec:	3714      	adds	r7, #20
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr
 8008bf6:	bf00      	nop
 8008bf8:	08010054 	.word	0x08010054
 8008bfc:	0801005c 	.word	0x0801005c

08008c00 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008c08:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008c0c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	43db      	mvns	r3, r3
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	4013      	ands	r3, r2
 8008c20:	b29a      	uxth	r2, r3
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3714      	adds	r7, #20
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008c36:	b480      	push	{r7}
 8008c38:	b085      	sub	sp, #20
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	60f8      	str	r0, [r7, #12]
 8008c3e:	1d3b      	adds	r3, r7, #4
 8008c40:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3714      	adds	r7, #20
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8008c72:	b580      	push	{r7, lr}
 8008c74:	b088      	sub	sp, #32
 8008c76:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008c7c:	f107 0308 	add.w	r3, r7, #8
 8008c80:	2218      	movs	r2, #24
 8008c82:	2100      	movs	r1, #0
 8008c84:	4618      	mov	r0, r3
 8008c86:	f001 f8d8 	bl	8009e3a <Osal_MemSet>
  rq.ogf = 0x3f;
 8008c8a:	233f      	movs	r3, #63	; 0x3f
 8008c8c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8008c8e:	2381      	movs	r3, #129	; 0x81
 8008c90:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008c92:	1dfb      	adds	r3, r7, #7
 8008c94:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008c96:	2301      	movs	r3, #1
 8008c98:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008c9a:	f107 0308 	add.w	r3, r7, #8
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f001 fb53 	bl	800a34c <hci_send_req>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	da01      	bge.n	8008cb0 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8008cac:	23ff      	movs	r3, #255	; 0xff
 8008cae:	e000      	b.n	8008cb2 <aci_gap_set_non_discoverable+0x40>
  return status;
 8008cb0:	79fb      	ldrb	r3, [r7, #7]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3720      	adds	r7, #32
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8008cba:	b5b0      	push	{r4, r5, r7, lr}
 8008cbc:	b0ce      	sub	sp, #312	; 0x138
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	4605      	mov	r5, r0
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008ccc:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8008cd0:	462a      	mov	r2, r5
 8008cd2:	701a      	strb	r2, [r3, #0]
 8008cd4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008cd8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8008cdc:	4622      	mov	r2, r4
 8008cde:	801a      	strh	r2, [r3, #0]
 8008ce0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008ce4:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 8008ce8:	4602      	mov	r2, r0
 8008cea:	801a      	strh	r2, [r3, #0]
 8008cec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008cf0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8008cf4:	460a      	mov	r2, r1
 8008cf6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8008cf8:	f107 0310 	add.w	r3, r7, #16
 8008cfc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8008d00:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008d04:	3308      	adds	r3, #8
 8008d06:	f107 0210 	add.w	r2, r7, #16
 8008d0a:	4413      	add	r3, r2
 8008d0c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8008d10:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008d14:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008d18:	4413      	add	r3, r2
 8008d1a:	3309      	adds	r3, #9
 8008d1c:	f107 0210 	add.w	r2, r7, #16
 8008d20:	4413      	add	r3, r2
 8008d22:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008d26:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008d2a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008d2e:	2200      	movs	r2, #0
 8008d30:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008d32:	2300      	movs	r3, #0
 8008d34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 8008d38:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d3c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008d40:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8008d44:	7812      	ldrb	r2, [r2, #0]
 8008d46:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008d48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8008d52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d56:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008d5a:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8008d5e:	8812      	ldrh	r2, [r2, #0]
 8008d60:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8008d64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d68:	3302      	adds	r3, #2
 8008d6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8008d6e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d72:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008d76:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 8008d7a:	8812      	ldrh	r2, [r2, #0]
 8008d7c:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8008d80:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d84:	3302      	adds	r3, #2
 8008d86:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8008d8a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008d8e:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8008d92:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8008d96:	7812      	ldrb	r2, [r2, #0]
 8008d98:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8008d9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008d9e:	3301      	adds	r3, #1
 8008da0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8008da4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008da8:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8008dac:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8008dae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008db2:	3301      	adds	r3, #1
 8008db4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8008db8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008dbc:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008dc0:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8008dc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8008dcc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8008dd0:	3308      	adds	r3, #8
 8008dd2:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8008dd6:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f001 f81d 	bl	8009e1a <Osal_MemCpy>
    index_input += Local_Name_Length;
 8008de0:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8008de4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008de8:	4413      	add	r3, r2
 8008dea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8008dee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008df2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008df6:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8008df8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8008e02:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008e06:	3301      	adds	r3, #1
 8008e08:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8008e0c:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8008e10:	4618      	mov	r0, r3
 8008e12:	f001 f802 	bl	8009e1a <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8008e16:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8008e1a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8008e1e:	4413      	add	r3, r2
 8008e20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8008e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e28:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8008e2c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8008e2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e32:	3302      	adds	r3, #2
 8008e34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8008e38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008e3c:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8008e40:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8008e42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e46:	3302      	adds	r3, #2
 8008e48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008e4c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e50:	2218      	movs	r2, #24
 8008e52:	2100      	movs	r1, #0
 8008e54:	4618      	mov	r0, r3
 8008e56:	f000 fff0 	bl	8009e3a <Osal_MemSet>
  rq.ogf = 0x3f;
 8008e5a:	233f      	movs	r3, #63	; 0x3f
 8008e5c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8008e60:	2383      	movs	r3, #131	; 0x83
 8008e62:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008e66:	f107 0310 	add.w	r3, r7, #16
 8008e6a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008e6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008e72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008e76:	f107 030f 	add.w	r3, r7, #15
 8008e7a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008e84:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008e88:	2100      	movs	r1, #0
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f001 fa5e 	bl	800a34c <hci_send_req>
 8008e90:	4603      	mov	r3, r0
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	da01      	bge.n	8008e9a <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8008e96:	23ff      	movs	r3, #255	; 0xff
 8008e98:	e004      	b.n	8008ea4 <aci_gap_set_discoverable+0x1ea>
  return status;
 8008e9a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8008e9e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008ea2:	781b      	ldrb	r3, [r3, #0]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bdb0      	pop	{r4, r5, r7, pc}

08008eae <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b0cc      	sub	sp, #304	; 0x130
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008eba:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008ebe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8008ec0:	f107 0310 	add.w	r3, r7, #16
 8008ec4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008ec8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008ecc:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 8008eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008ede:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008ee2:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008ee6:	7812      	ldrb	r2, [r2, #0]
 8008ee8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008eea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008eee:	3301      	adds	r3, #1
 8008ef0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008ef4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008ef8:	2218      	movs	r2, #24
 8008efa:	2100      	movs	r1, #0
 8008efc:	4618      	mov	r0, r3
 8008efe:	f000 ff9c 	bl	8009e3a <Osal_MemSet>
  rq.ogf = 0x3f;
 8008f02:	233f      	movs	r3, #63	; 0x3f
 8008f04:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 8008f08:	2385      	movs	r3, #133	; 0x85
 8008f0a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008f0e:	f107 0310 	add.w	r3, r7, #16
 8008f12:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008f16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008f1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008f1e:	f107 030f 	add.w	r3, r7, #15
 8008f22:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008f26:	2301      	movs	r3, #1
 8008f28:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008f2c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008f30:	2100      	movs	r1, #0
 8008f32:	4618      	mov	r0, r3
 8008f34:	f001 fa0a 	bl	800a34c <hci_send_req>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	da01      	bge.n	8008f42 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8008f3e:	23ff      	movs	r3, #255	; 0xff
 8008f40:	e004      	b.n	8008f4c <aci_gap_set_io_capability+0x9e>
  return status;
 8008f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f46:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008f4a:	781b      	ldrb	r3, [r3, #0]
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8008f56:	b5b0      	push	{r4, r5, r7, lr}
 8008f58:	b0cc      	sub	sp, #304	; 0x130
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	4605      	mov	r5, r0
 8008f5e:	460c      	mov	r4, r1
 8008f60:	4610      	mov	r0, r2
 8008f62:	4619      	mov	r1, r3
 8008f64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f68:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8008f6c:	462a      	mov	r2, r5
 8008f6e:	701a      	strb	r2, [r3, #0]
 8008f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f74:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8008f78:	4622      	mov	r2, r4
 8008f7a:	701a      	strb	r2, [r3, #0]
 8008f7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f80:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8008f84:	4602      	mov	r2, r0
 8008f86:	701a      	strb	r2, [r3, #0]
 8008f88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008f8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8008f90:	460a      	mov	r2, r1
 8008f92:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8008f94:	f107 0310 	add.w	r3, r7, #16
 8008f98:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008fa0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8008fae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fb2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008fb6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8008fba:	7812      	ldrb	r2, [r2, #0]
 8008fbc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008fbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 8008fc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fcc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008fd0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8008fd4:	7812      	ldrb	r2, [r2, #0]
 8008fd6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008fd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008fdc:	3301      	adds	r3, #1
 8008fde:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8008fe2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008fe6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8008fea:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8008fee:	7812      	ldrb	r2, [r2, #0]
 8008ff0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8008ff2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8008ffc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009000:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009004:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009008:	7812      	ldrb	r2, [r2, #0]
 800900a:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800900c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009010:	3301      	adds	r3, #1
 8009012:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8009016:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800901a:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800901e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8009020:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009024:	3301      	adds	r3, #1
 8009026:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800902a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800902e:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8009032:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8009034:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009038:	3301      	adds	r3, #1
 800903a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800903e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009042:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8009046:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8009048:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800904c:	3301      	adds	r3, #1
 800904e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8009052:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009056:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800905a:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800905e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009062:	3304      	adds	r3, #4
 8009064:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8009068:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800906c:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009070:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8009072:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009076:	3301      	adds	r3, #1
 8009078:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800907c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009080:	2218      	movs	r2, #24
 8009082:	2100      	movs	r1, #0
 8009084:	4618      	mov	r0, r3
 8009086:	f000 fed8 	bl	8009e3a <Osal_MemSet>
  rq.ogf = 0x3f;
 800908a:	233f      	movs	r3, #63	; 0x3f
 800908c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8009090:	2386      	movs	r3, #134	; 0x86
 8009092:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009096:	f107 0310 	add.w	r3, r7, #16
 800909a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800909e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80090a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80090a6:	f107 030f 	add.w	r3, r7, #15
 80090aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80090ae:	2301      	movs	r3, #1
 80090b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80090b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80090b8:	2100      	movs	r1, #0
 80090ba:	4618      	mov	r0, r3
 80090bc:	f001 f946 	bl	800a34c <hci_send_req>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	da01      	bge.n	80090ca <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80090c6:	23ff      	movs	r3, #255	; 0xff
 80090c8:	e004      	b.n	80090d4 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80090ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80090d2:	781b      	ldrb	r3, [r3, #0]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80090da:	46bd      	mov	sp, r7
 80090dc:	bdb0      	pop	{r4, r5, r7, pc}

080090de <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b0cc      	sub	sp, #304	; 0x130
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	4602      	mov	r2, r0
 80090e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80090ee:	6019      	str	r1, [r3, #0]
 80090f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80090f4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80090f8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 80090fa:	f107 0310 	add.w	r3, r7, #16
 80090fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009102:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009106:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800910a:	2200      	movs	r2, #0
 800910c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800910e:	2300      	movs	r3, #0
 8009110:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8009114:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009118:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800911c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009120:	8812      	ldrh	r2, [r2, #0]
 8009122:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009124:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009128:	3302      	adds	r3, #2
 800912a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800912e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009132:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009136:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800913a:	6812      	ldr	r2, [r2, #0]
 800913c:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8009140:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009144:	3304      	adds	r3, #4
 8009146:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800914a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800914e:	2218      	movs	r2, #24
 8009150:	2100      	movs	r1, #0
 8009152:	4618      	mov	r0, r3
 8009154:	f000 fe71 	bl	8009e3a <Osal_MemSet>
  rq.ogf = 0x3f;
 8009158:	233f      	movs	r3, #63	; 0x3f
 800915a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800915e:	2388      	movs	r3, #136	; 0x88
 8009160:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009164:	f107 0310 	add.w	r3, r7, #16
 8009168:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800916c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009170:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009174:	f107 030f 	add.w	r3, r7, #15
 8009178:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800917c:	2301      	movs	r3, #1
 800917e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009182:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009186:	2100      	movs	r1, #0
 8009188:	4618      	mov	r0, r3
 800918a:	f001 f8df 	bl	800a34c <hci_send_req>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	da01      	bge.n	8009198 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 8009194:	23ff      	movs	r3, #255	; 0xff
 8009196:	e004      	b.n	80091a2 <aci_gap_pass_key_resp+0xc4>
  return status;
 8009198:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800919c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80091a0:	781b      	ldrb	r3, [r3, #0]
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80091ac:	b590      	push	{r4, r7, lr}
 80091ae:	b0cd      	sub	sp, #308	; 0x134
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	4604      	mov	r4, r0
 80091b4:	4608      	mov	r0, r1
 80091b6:	4611      	mov	r1, r2
 80091b8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80091bc:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80091c0:	6013      	str	r3, [r2, #0]
 80091c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091c6:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80091ca:	4622      	mov	r2, r4
 80091cc:	701a      	strb	r2, [r3, #0]
 80091ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091d2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80091d6:	4602      	mov	r2, r0
 80091d8:	701a      	strb	r2, [r3, #0]
 80091da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80091de:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80091e2:	460a      	mov	r2, r1
 80091e4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80091e6:	f107 0310 	add.w	r3, r7, #16
 80091ea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80091ee:	f107 0308 	add.w	r3, r7, #8
 80091f2:	2207      	movs	r2, #7
 80091f4:	2100      	movs	r1, #0
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 fe1f 	bl	8009e3a <Osal_MemSet>
  int index_input = 0;
 80091fc:	2300      	movs	r3, #0
 80091fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 8009202:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009206:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800920a:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800920e:	7812      	ldrb	r2, [r2, #0]
 8009210:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009212:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009216:	3301      	adds	r3, #1
 8009218:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800921c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009220:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009224:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009228:	7812      	ldrb	r2, [r2, #0]
 800922a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800922c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009230:	3301      	adds	r3, #1
 8009232:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 8009236:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800923a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800923e:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009242:	7812      	ldrb	r2, [r2, #0]
 8009244:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009246:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800924a:	3301      	adds	r3, #1
 800924c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009250:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009254:	2218      	movs	r2, #24
 8009256:	2100      	movs	r1, #0
 8009258:	4618      	mov	r0, r3
 800925a:	f000 fdee 	bl	8009e3a <Osal_MemSet>
  rq.ogf = 0x3f;
 800925e:	233f      	movs	r3, #63	; 0x3f
 8009260:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 8009264:	238a      	movs	r3, #138	; 0x8a
 8009266:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800926a:	f107 0310 	add.w	r3, r7, #16
 800926e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009272:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009276:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800927a:	f107 0308 	add.w	r3, r7, #8
 800927e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8009282:	2307      	movs	r3, #7
 8009284:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009288:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800928c:	2100      	movs	r1, #0
 800928e:	4618      	mov	r0, r3
 8009290:	f001 f85c 	bl	800a34c <hci_send_req>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	da01      	bge.n	800929e <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800929a:	23ff      	movs	r3, #255	; 0xff
 800929c:	e02e      	b.n	80092fc <aci_gap_init+0x150>
  if ( resp.Status )
 800929e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d005      	beq.n	80092b8 <aci_gap_init+0x10c>
    return resp.Status;
 80092ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092b0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	e021      	b.n	80092fc <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80092b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092bc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80092c0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80092c4:	b29a      	uxth	r2, r3
 80092c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80092d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80092da:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80092de:	b29a      	uxth	r2, r3
 80092e0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80092e4:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80092e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80092ea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80092ee:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80092f2:	b29a      	uxth	r2, r3
 80092f4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80092f8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80092fa:	2300      	movs	r3, #0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009302:	46bd      	mov	sp, r7
 8009304:	bd90      	pop	{r4, r7, pc}

08009306 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b0cc      	sub	sp, #304	; 0x130
 800930a:	af00      	add	r7, sp, #0
 800930c:	4602      	mov	r2, r0
 800930e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009312:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009316:	6019      	str	r1, [r3, #0]
 8009318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800931c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009320:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8009322:	f107 0310 	add.w	r3, r7, #16
 8009326:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800932a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800932e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009332:	2200      	movs	r2, #0
 8009334:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009336:	2300      	movs	r3, #0
 8009338:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800933c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009340:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009344:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009348:	7812      	ldrb	r2, [r2, #0]
 800934a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800934c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009350:	3301      	adds	r3, #1
 8009352:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8009356:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800935a:	1c58      	adds	r0, r3, #1
 800935c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009360:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009364:	781a      	ldrb	r2, [r3, #0]
 8009366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800936a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800936e:	6819      	ldr	r1, [r3, #0]
 8009370:	f000 fd53 	bl	8009e1a <Osal_MemCpy>
  index_input += AdvDataLen;
 8009374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009378:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009382:	4413      	add	r3, r2
 8009384:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009388:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800938c:	2218      	movs	r2, #24
 800938e:	2100      	movs	r1, #0
 8009390:	4618      	mov	r0, r3
 8009392:	f000 fd52 	bl	8009e3a <Osal_MemSet>
  rq.ogf = 0x3f;
 8009396:	233f      	movs	r3, #63	; 0x3f
 8009398:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800939c:	238e      	movs	r3, #142	; 0x8e
 800939e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80093a2:	f107 0310 	add.w	r3, r7, #16
 80093a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80093aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80093ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80093b2:	f107 030f 	add.w	r3, r7, #15
 80093b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80093ba:	2301      	movs	r3, #1
 80093bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80093c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80093c4:	2100      	movs	r1, #0
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 ffc0 	bl	800a34c <hci_send_req>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	da01      	bge.n	80093d6 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80093d2:	23ff      	movs	r3, #255	; 0xff
 80093d4:	e004      	b.n	80093e0 <aci_gap_update_adv_data+0xda>
  return status;
 80093d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80093da:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80093de:	781b      	ldrb	r3, [r3, #0]
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b088      	sub	sp, #32
 80093ee:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80093f0:	2300      	movs	r3, #0
 80093f2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80093f4:	f107 0308 	add.w	r3, r7, #8
 80093f8:	2218      	movs	r2, #24
 80093fa:	2100      	movs	r1, #0
 80093fc:	4618      	mov	r0, r3
 80093fe:	f000 fd1c 	bl	8009e3a <Osal_MemSet>
  rq.ogf = 0x3f;
 8009402:	233f      	movs	r3, #63	; 0x3f
 8009404:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8009406:	2392      	movs	r3, #146	; 0x92
 8009408:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800940a:	1dfb      	adds	r3, r7, #7
 800940c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800940e:	2301      	movs	r3, #1
 8009410:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009412:	f107 0308 	add.w	r3, r7, #8
 8009416:	2100      	movs	r1, #0
 8009418:	4618      	mov	r0, r3
 800941a:	f000 ff97 	bl	800a34c <hci_send_req>
 800941e:	4603      	mov	r3, r0
 8009420:	2b00      	cmp	r3, #0
 8009422:	da01      	bge.n	8009428 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009424:	23ff      	movs	r3, #255	; 0xff
 8009426:	e000      	b.n	800942a <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8009428:	79fb      	ldrb	r3, [r7, #7]
}
 800942a:	4618      	mov	r0, r3
 800942c:	3720      	adds	r7, #32
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b0cc      	sub	sp, #304	; 0x130
 8009436:	af00      	add	r7, sp, #0
 8009438:	4602      	mov	r2, r0
 800943a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800943e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009442:	801a      	strh	r2, [r3, #0]
 8009444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009448:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800944c:	460a      	mov	r2, r1
 800944e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8009450:	f107 0310 	add.w	r3, r7, #16
 8009454:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800945c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009460:	2200      	movs	r2, #0
 8009462:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009464:	2300      	movs	r3, #0
 8009466:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800946a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800946e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009472:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009476:	8812      	ldrh	r2, [r2, #0]
 8009478:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800947a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800947e:	3302      	adds	r3, #2
 8009480:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8009484:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009488:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800948c:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009490:	7812      	ldrb	r2, [r2, #0]
 8009492:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009494:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009498:	3301      	adds	r3, #1
 800949a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800949e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094a2:	2218      	movs	r2, #24
 80094a4:	2100      	movs	r1, #0
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 fcc7 	bl	8009e3a <Osal_MemSet>
  rq.ogf = 0x3f;
 80094ac:	233f      	movs	r3, #63	; 0x3f
 80094ae:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 80094b2:	23a5      	movs	r3, #165	; 0xa5
 80094b4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80094b8:	f107 0310 	add.w	r3, r7, #16
 80094bc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80094c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80094c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80094c8:	f107 030f 	add.w	r3, r7, #15
 80094cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80094d0:	2301      	movs	r3, #1
 80094d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80094d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80094da:	2100      	movs	r1, #0
 80094dc:	4618      	mov	r0, r3
 80094de:	f000 ff35 	bl	800a34c <hci_send_req>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	da01      	bge.n	80094ec <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80094e8:	23ff      	movs	r3, #255	; 0xff
 80094ea:	e004      	b.n	80094f6 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80094ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80094f0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80094f4:	781b      	ldrb	r3, [r3, #0]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b088      	sub	sp, #32
 8009504:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009506:	2300      	movs	r3, #0
 8009508:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800950a:	f107 0308 	add.w	r3, r7, #8
 800950e:	2218      	movs	r2, #24
 8009510:	2100      	movs	r1, #0
 8009512:	4618      	mov	r0, r3
 8009514:	f000 fc91 	bl	8009e3a <Osal_MemSet>
  rq.ogf = 0x3f;
 8009518:	233f      	movs	r3, #63	; 0x3f
 800951a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800951c:	f240 1301 	movw	r3, #257	; 0x101
 8009520:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009522:	1dfb      	adds	r3, r7, #7
 8009524:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009526:	2301      	movs	r3, #1
 8009528:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800952a:	f107 0308 	add.w	r3, r7, #8
 800952e:	2100      	movs	r1, #0
 8009530:	4618      	mov	r0, r3
 8009532:	f000 ff0b 	bl	800a34c <hci_send_req>
 8009536:	4603      	mov	r3, r0
 8009538:	2b00      	cmp	r3, #0
 800953a:	da01      	bge.n	8009540 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800953c:	23ff      	movs	r3, #255	; 0xff
 800953e:	e000      	b.n	8009542 <aci_gatt_init+0x42>
  return status;
 8009540:	79fb      	ldrb	r3, [r7, #7]
}
 8009542:	4618      	mov	r0, r3
 8009544:	3720      	adds	r7, #32
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800954a:	b590      	push	{r4, r7, lr}
 800954c:	b0cf      	sub	sp, #316	; 0x13c
 800954e:	af00      	add	r7, sp, #0
 8009550:	4604      	mov	r4, r0
 8009552:	f507 709c 	add.w	r0, r7, #312	; 0x138
 8009556:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800955a:	6001      	str	r1, [r0, #0]
 800955c:	4610      	mov	r0, r2
 800955e:	4619      	mov	r1, r3
 8009560:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009564:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009568:	4622      	mov	r2, r4
 800956a:	701a      	strb	r2, [r3, #0]
 800956c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009570:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009574:	4602      	mov	r2, r0
 8009576:	701a      	strb	r2, [r3, #0]
 8009578:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800957c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009580:	460a      	mov	r2, r1
 8009582:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8009584:	f107 0310 	add.w	r3, r7, #16
 8009588:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800958c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009590:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d00a      	beq.n	80095b0 <aci_gatt_add_service+0x66>
 800959a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800959e:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	2b02      	cmp	r3, #2
 80095a6:	d101      	bne.n	80095ac <aci_gatt_add_service+0x62>
 80095a8:	2311      	movs	r3, #17
 80095aa:	e002      	b.n	80095b2 <aci_gatt_add_service+0x68>
 80095ac:	2301      	movs	r3, #1
 80095ae:	e000      	b.n	80095b2 <aci_gatt_add_service+0x68>
 80095b0:	2303      	movs	r3, #3
 80095b2:	f107 0210 	add.w	r2, r7, #16
 80095b6:	4413      	add	r3, r2
 80095b8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80095bc:	f107 030c 	add.w	r3, r7, #12
 80095c0:	2203      	movs	r2, #3
 80095c2:	2100      	movs	r1, #0
 80095c4:	4618      	mov	r0, r3
 80095c6:	f000 fc38 	bl	8009e3a <Osal_MemSet>
  int index_input = 0;
 80095ca:	2300      	movs	r3, #0
 80095cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80095d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80095d4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 80095d8:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 80095dc:	7812      	ldrb	r2, [r2, #0]
 80095de:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80095e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80095e4:	3301      	adds	r3, #1
 80095e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80095ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80095ee:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80095f2:	781b      	ldrb	r3, [r3, #0]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d002      	beq.n	80095fe <aci_gatt_add_service+0xb4>
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	d004      	beq.n	8009606 <aci_gatt_add_service+0xbc>
 80095fc:	e007      	b.n	800960e <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80095fe:	2302      	movs	r3, #2
 8009600:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8009604:	e005      	b.n	8009612 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8009606:	2310      	movs	r3, #16
 8009608:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800960c:	e001      	b.n	8009612 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800960e:	2397      	movs	r3, #151	; 0x97
 8009610:	e06c      	b.n	80096ec <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8009612:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009616:	1c58      	adds	r0, r3, #1
 8009618:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800961c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8009620:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009624:	6819      	ldr	r1, [r3, #0]
 8009626:	f000 fbf8 	bl	8009e1a <Osal_MemCpy>
    index_input += size;
 800962a:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800962e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009632:	4413      	add	r3, r2
 8009634:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8009638:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800963c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8009640:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009644:	7812      	ldrb	r2, [r2, #0]
 8009646:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8009648:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800964c:	3301      	adds	r3, #1
 800964e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8009652:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009656:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800965a:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800965e:	7812      	ldrb	r2, [r2, #0]
 8009660:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8009662:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009666:	3301      	adds	r3, #1
 8009668:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800966c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009670:	2218      	movs	r2, #24
 8009672:	2100      	movs	r1, #0
 8009674:	4618      	mov	r0, r3
 8009676:	f000 fbe0 	bl	8009e3a <Osal_MemSet>
  rq.ogf = 0x3f;
 800967a:	233f      	movs	r3, #63	; 0x3f
 800967c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8009680:	f44f 7381 	mov.w	r3, #258	; 0x102
 8009684:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009688:	f107 0310 	add.w	r3, r7, #16
 800968c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009690:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009694:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8009698:	f107 030c 	add.w	r3, r7, #12
 800969c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 80096a0:	2303      	movs	r3, #3
 80096a2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80096a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80096aa:	2100      	movs	r1, #0
 80096ac:	4618      	mov	r0, r3
 80096ae:	f000 fe4d 	bl	800a34c <hci_send_req>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	da01      	bge.n	80096bc <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80096b8:	23ff      	movs	r3, #255	; 0xff
 80096ba:	e017      	b.n	80096ec <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80096bc:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80096c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d005      	beq.n	80096d6 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80096ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80096ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	e00a      	b.n	80096ec <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80096d6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80096da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80096de:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80096e8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80096ea:	2300      	movs	r3, #0
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd90      	pop	{r4, r7, pc}

080096f6 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80096f6:	b590      	push	{r4, r7, lr}
 80096f8:	b0d1      	sub	sp, #324	; 0x144
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	4604      	mov	r4, r0
 80096fe:	4608      	mov	r0, r1
 8009700:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8009704:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8009708:	600a      	str	r2, [r1, #0]
 800970a:	4619      	mov	r1, r3
 800970c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009710:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8009714:	4622      	mov	r2, r4
 8009716:	801a      	strh	r2, [r3, #0]
 8009718:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800971c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009720:	4602      	mov	r2, r0
 8009722:	701a      	strb	r2, [r3, #0]
 8009724:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8009728:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800972c:	460a      	mov	r2, r1
 800972e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8009730:	f107 0318 	add.w	r3, r7, #24
 8009734:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8009738:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800973c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	2b01      	cmp	r3, #1
 8009744:	d00a      	beq.n	800975c <aci_gatt_add_char+0x66>
 8009746:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800974a:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	2b02      	cmp	r3, #2
 8009752:	d101      	bne.n	8009758 <aci_gatt_add_char+0x62>
 8009754:	2313      	movs	r3, #19
 8009756:	e002      	b.n	800975e <aci_gatt_add_char+0x68>
 8009758:	2303      	movs	r3, #3
 800975a:	e000      	b.n	800975e <aci_gatt_add_char+0x68>
 800975c:	2305      	movs	r3, #5
 800975e:	f107 0218 	add.w	r2, r7, #24
 8009762:	4413      	add	r3, r2
 8009764:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8009768:	f107 0314 	add.w	r3, r7, #20
 800976c:	2203      	movs	r2, #3
 800976e:	2100      	movs	r1, #0
 8009770:	4618      	mov	r0, r3
 8009772:	f000 fb62 	bl	8009e3a <Osal_MemSet>
  int index_input = 0;
 8009776:	2300      	movs	r3, #0
 8009778:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800977c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8009780:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009784:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8009788:	8812      	ldrh	r2, [r2, #0]
 800978a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800978c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009790:	3302      	adds	r3, #2
 8009792:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8009796:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800979a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800979e:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 80097a2:	7812      	ldrb	r2, [r2, #0]
 80097a4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80097a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80097aa:	3301      	adds	r3, #1
 80097ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80097b0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80097b4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d002      	beq.n	80097c4 <aci_gatt_add_char+0xce>
 80097be:	2b02      	cmp	r3, #2
 80097c0:	d004      	beq.n	80097cc <aci_gatt_add_char+0xd6>
 80097c2:	e007      	b.n	80097d4 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80097c4:	2302      	movs	r3, #2
 80097c6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80097ca:	e005      	b.n	80097d8 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80097cc:	2310      	movs	r3, #16
 80097ce:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80097d2:	e001      	b.n	80097d8 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80097d4:	2397      	movs	r3, #151	; 0x97
 80097d6:	e091      	b.n	80098fc <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80097d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80097dc:	1cd8      	adds	r0, r3, #3
 80097de:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80097e2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80097e6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80097ea:	6819      	ldr	r1, [r3, #0]
 80097ec:	f000 fb15 	bl	8009e1a <Osal_MemCpy>
    index_input += size;
 80097f0:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80097f4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80097f8:	4413      	add	r3, r2
 80097fa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80097fe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009802:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8009806:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800980a:	8812      	ldrh	r2, [r2, #0]
 800980c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800980e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009812:	3302      	adds	r3, #2
 8009814:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8009818:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800981c:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8009820:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8009822:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009826:	3301      	adds	r3, #1
 8009828:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800982c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009830:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8009834:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8009836:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800983a:	3301      	adds	r3, #1
 800983c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8009840:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009844:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8009848:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800984a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800984e:	3301      	adds	r3, #1
 8009850:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8009854:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8009858:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800985c:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800985e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009862:	3301      	adds	r3, #1
 8009864:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8009868:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800986c:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8009870:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8009872:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8009876:	3301      	adds	r3, #1
 8009878:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800987c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8009880:	2218      	movs	r2, #24
 8009882:	2100      	movs	r1, #0
 8009884:	4618      	mov	r0, r3
 8009886:	f000 fad8 	bl	8009e3a <Osal_MemSet>
  rq.ogf = 0x3f;
 800988a:	233f      	movs	r3, #63	; 0x3f
 800988c:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8009890:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009894:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8009898:	f107 0318 	add.w	r3, r7, #24
 800989c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80098a0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80098a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 80098a8:	f107 0314 	add.w	r3, r7, #20
 80098ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 80098b0:	2303      	movs	r3, #3
 80098b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80098b6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80098ba:	2100      	movs	r1, #0
 80098bc:	4618      	mov	r0, r3
 80098be:	f000 fd45 	bl	800a34c <hci_send_req>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	da01      	bge.n	80098cc <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80098c8:	23ff      	movs	r3, #255	; 0xff
 80098ca:	e017      	b.n	80098fc <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80098cc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80098d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d005      	beq.n	80098e6 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80098da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80098de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	e00a      	b.n	80098fc <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80098e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80098ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80098ee:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80098f8:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80098fa:	2300      	movs	r3, #0
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8009902:	46bd      	mov	sp, r7
 8009904:	bd90      	pop	{r4, r7, pc}

08009906 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8009906:	b5b0      	push	{r4, r5, r7, lr}
 8009908:	b0cc      	sub	sp, #304	; 0x130
 800990a:	af00      	add	r7, sp, #0
 800990c:	4605      	mov	r5, r0
 800990e:	460c      	mov	r4, r1
 8009910:	4610      	mov	r0, r2
 8009912:	4619      	mov	r1, r3
 8009914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009918:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800991c:	462a      	mov	r2, r5
 800991e:	801a      	strh	r2, [r3, #0]
 8009920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009924:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009928:	4622      	mov	r2, r4
 800992a:	801a      	strh	r2, [r3, #0]
 800992c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009930:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8009934:	4602      	mov	r2, r0
 8009936:	701a      	strb	r2, [r3, #0]
 8009938:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800993c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8009940:	460a      	mov	r2, r1
 8009942:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8009944:	f107 0310 	add.w	r3, r7, #16
 8009948:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800994c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009950:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009954:	2200      	movs	r2, #0
 8009956:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009958:	2300      	movs	r3, #0
 800995a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800995e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009962:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009966:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800996a:	8812      	ldrh	r2, [r2, #0]
 800996c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800996e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009972:	3302      	adds	r3, #2
 8009974:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8009978:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800997c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009980:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009984:	8812      	ldrh	r2, [r2, #0]
 8009986:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8009988:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800998c:	3302      	adds	r3, #2
 800998e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8009992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009996:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800999a:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800999e:	7812      	ldrb	r2, [r2, #0]
 80099a0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80099a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80099a6:	3301      	adds	r3, #1
 80099a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80099ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099b0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80099b4:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80099b8:	7812      	ldrb	r2, [r2, #0]
 80099ba:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80099bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80099c0:	3301      	adds	r3, #1
 80099c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80099c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80099ca:	1d98      	adds	r0, r3, #6
 80099cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099d0:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	461a      	mov	r2, r3
 80099d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80099dc:	f000 fa1d 	bl	8009e1a <Osal_MemCpy>
  index_input += Char_Value_Length;
 80099e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80099e4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80099ee:	4413      	add	r3, r2
 80099f0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80099f4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80099f8:	2218      	movs	r2, #24
 80099fa:	2100      	movs	r1, #0
 80099fc:	4618      	mov	r0, r3
 80099fe:	f000 fa1c 	bl	8009e3a <Osal_MemSet>
  rq.ogf = 0x3f;
 8009a02:	233f      	movs	r3, #63	; 0x3f
 8009a04:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8009a08:	f44f 7383 	mov.w	r3, #262	; 0x106
 8009a0c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009a10:	f107 0310 	add.w	r3, r7, #16
 8009a14:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009a18:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009a1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009a20:	f107 030f 	add.w	r3, r7, #15
 8009a24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009a2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009a32:	2100      	movs	r1, #0
 8009a34:	4618      	mov	r0, r3
 8009a36:	f000 fc89 	bl	800a34c <hci_send_req>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	da01      	bge.n	8009a44 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8009a40:	23ff      	movs	r3, #255	; 0xff
 8009a42:	e004      	b.n	8009a4e <aci_gatt_update_char_value+0x148>
  return status;
 8009a44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a48:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009a4c:	781b      	ldrb	r3, [r3, #0]
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bdb0      	pop	{r4, r5, r7, pc}

08009a58 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b0cc      	sub	sp, #304	; 0x130
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009a66:	601a      	str	r2, [r3, #0]
 8009a68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a6c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009a70:	4602      	mov	r2, r0
 8009a72:	701a      	strb	r2, [r3, #0]
 8009a74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a78:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009a7c:	460a      	mov	r2, r1
 8009a7e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8009a80:	f107 0310 	add.w	r3, r7, #16
 8009a84:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009a88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009a8c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009a90:	2200      	movs	r2, #0
 8009a92:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009a94:	2300      	movs	r3, #0
 8009a96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 8009a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009a9e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009aa2:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009aa6:	7812      	ldrb	r2, [r2, #0]
 8009aa8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009aaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009aae:	3301      	adds	r3, #1
 8009ab0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8009ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ab8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009abc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009ac0:	7812      	ldrb	r2, [r2, #0]
 8009ac2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009ac4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009ac8:	3301      	adds	r3, #1
 8009aca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8009ace:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009ad2:	1c98      	adds	r0, r3, #2
 8009ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ad8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009adc:	781a      	ldrb	r2, [r3, #0]
 8009ade:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ae2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ae6:	6819      	ldr	r1, [r3, #0]
 8009ae8:	f000 f997 	bl	8009e1a <Osal_MemCpy>
  index_input += Length;
 8009aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009af0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8009afa:	4413      	add	r3, r2
 8009afc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009b00:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009b04:	2218      	movs	r2, #24
 8009b06:	2100      	movs	r1, #0
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f000 f996 	bl	8009e3a <Osal_MemSet>
  rq.ogf = 0x3f;
 8009b0e:	233f      	movs	r3, #63	; 0x3f
 8009b10:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8009b14:	230c      	movs	r3, #12
 8009b16:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009b1a:	f107 0310 	add.w	r3, r7, #16
 8009b1e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009b22:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009b26:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009b2a:	f107 030f 	add.w	r3, r7, #15
 8009b2e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009b32:	2301      	movs	r3, #1
 8009b34:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009b38:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f000 fc04 	bl	800a34c <hci_send_req>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	da01      	bge.n	8009b4e <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8009b4a:	23ff      	movs	r3, #255	; 0xff
 8009b4c:	e004      	b.n	8009b58 <aci_hal_write_config_data+0x100>
  return status;
 8009b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b52:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009b56:	781b      	ldrb	r3, [r3, #0]
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b0cc      	sub	sp, #304	; 0x130
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	4602      	mov	r2, r0
 8009b6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b6e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009b72:	701a      	strb	r2, [r3, #0]
 8009b74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b78:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009b7c:	460a      	mov	r2, r1
 8009b7e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8009b80:	f107 0310 	add.w	r3, r7, #16
 8009b84:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009b88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009b8c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009b90:	2200      	movs	r2, #0
 8009b92:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009b94:	2300      	movs	r3, #0
 8009b96:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8009b9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009b9e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009ba2:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009ba6:	7812      	ldrb	r2, [r2, #0]
 8009ba8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009baa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009bae:	3301      	adds	r3, #1
 8009bb0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8009bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009bb8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009bbc:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009bc0:	7812      	ldrb	r2, [r2, #0]
 8009bc2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009bc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009bc8:	3301      	adds	r3, #1
 8009bca:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009bce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009bd2:	2218      	movs	r2, #24
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f000 f92f 	bl	8009e3a <Osal_MemSet>
  rq.ogf = 0x3f;
 8009bdc:	233f      	movs	r3, #63	; 0x3f
 8009bde:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8009be2:	230f      	movs	r3, #15
 8009be4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009be8:	f107 0310 	add.w	r3, r7, #16
 8009bec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009bf0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009bf4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009bf8:	f107 030f 	add.w	r3, r7, #15
 8009bfc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009c00:	2301      	movs	r3, #1
 8009c02:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009c06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f000 fb9d 	bl	800a34c <hci_send_req>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	da01      	bge.n	8009c1c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8009c18:	23ff      	movs	r3, #255	; 0xff
 8009c1a:	e004      	b.n	8009c26 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8009c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c20:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009c24:	781b      	ldrb	r3, [r3, #0]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b0cc      	sub	sp, #304	; 0x130
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	4602      	mov	r2, r0
 8009c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c3c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009c40:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8009c42:	f107 0310 	add.w	r3, r7, #16
 8009c46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009c4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009c4e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009c52:	2200      	movs	r2, #0
 8009c54:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009c56:	2300      	movs	r3, #0
 8009c58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8009c5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009c60:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009c64:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009c68:	8812      	ldrh	r2, [r2, #0]
 8009c6a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8009c6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c70:	3302      	adds	r3, #2
 8009c72:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009c76:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009c7a:	2218      	movs	r2, #24
 8009c7c:	2100      	movs	r1, #0
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f000 f8db 	bl	8009e3a <Osal_MemSet>
  rq.ogf = 0x3f;
 8009c84:	233f      	movs	r3, #63	; 0x3f
 8009c86:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8009c8a:	2318      	movs	r3, #24
 8009c8c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009c90:	f107 0310 	add.w	r3, r7, #16
 8009c94:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009c98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009c9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009ca0:	f107 030f 	add.w	r3, r7, #15
 8009ca4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009cae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f000 fb49 	bl	800a34c <hci_send_req>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	da01      	bge.n	8009cc4 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8009cc0:	23ff      	movs	r3, #255	; 0xff
 8009cc2:	e004      	b.n	8009cce <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8009cc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009cc8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009ccc:	781b      	ldrb	r3, [r3, #0]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b088      	sub	sp, #32
 8009cdc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009ce2:	f107 0308 	add.w	r3, r7, #8
 8009ce6:	2218      	movs	r2, #24
 8009ce8:	2100      	movs	r1, #0
 8009cea:	4618      	mov	r0, r3
 8009cec:	f000 f8a5 	bl	8009e3a <Osal_MemSet>
  rq.ogf = 0x03;
 8009cf0:	2303      	movs	r3, #3
 8009cf2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8009cf4:	2303      	movs	r3, #3
 8009cf6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009cf8:	1dfb      	adds	r3, r7, #7
 8009cfa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009d00:	f107 0308 	add.w	r3, r7, #8
 8009d04:	2100      	movs	r1, #0
 8009d06:	4618      	mov	r0, r3
 8009d08:	f000 fb20 	bl	800a34c <hci_send_req>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	da01      	bge.n	8009d16 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8009d12:	23ff      	movs	r3, #255	; 0xff
 8009d14:	e000      	b.n	8009d18 <hci_reset+0x40>
  return status;
 8009d16:	79fb      	ldrb	r3, [r7, #7]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3720      	adds	r7, #32
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8009d20:	b590      	push	{r4, r7, lr}
 8009d22:	b0cd      	sub	sp, #308	; 0x134
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	4604      	mov	r4, r0
 8009d28:	4608      	mov	r0, r1
 8009d2a:	4611      	mov	r1, r2
 8009d2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d30:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8009d34:	4622      	mov	r2, r4
 8009d36:	701a      	strb	r2, [r3, #0]
 8009d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d3c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8009d40:	4602      	mov	r2, r0
 8009d42:	701a      	strb	r2, [r3, #0]
 8009d44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d48:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 8009d4c:	460a      	mov	r2, r1
 8009d4e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8009d50:	f107 0310 	add.w	r3, r7, #16
 8009d54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8009d58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009d5c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009d60:	2200      	movs	r2, #0
 8009d62:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8009d64:	2300      	movs	r3, #0
 8009d66:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8009d6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009d72:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8009d76:	7812      	ldrb	r2, [r2, #0]
 8009d78:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8009d7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d7e:	3301      	adds	r3, #1
 8009d80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 8009d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009d88:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009d8c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8009d90:	7812      	ldrb	r2, [r2, #0]
 8009d92:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8009d94:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009d98:	3301      	adds	r3, #1
 8009d9a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 8009d9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009da2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009da6:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8009daa:	7812      	ldrb	r2, [r2, #0]
 8009dac:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8009dae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009db2:	3301      	adds	r3, #1
 8009db4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8009db8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009dbc:	2218      	movs	r2, #24
 8009dbe:	2100      	movs	r1, #0
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f000 f83a 	bl	8009e3a <Osal_MemSet>
  rq.ogf = 0x08;
 8009dc6:	2308      	movs	r3, #8
 8009dc8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 8009dcc:	2331      	movs	r3, #49	; 0x31
 8009dce:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8009dd2:	f107 0310 	add.w	r3, r7, #16
 8009dd6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8009dda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8009dde:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8009de2:	f107 030f 	add.w	r3, r7, #15
 8009de6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8009dea:	2301      	movs	r3, #1
 8009dec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8009df0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8009df4:	2100      	movs	r1, #0
 8009df6:	4618      	mov	r0, r3
 8009df8:	f000 faa8 	bl	800a34c <hci_send_req>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	da01      	bge.n	8009e06 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8009e02:	23ff      	movs	r3, #255	; 0xff
 8009e04:	e004      	b.n	8009e10 <hci_le_set_default_phy+0xf0>
  return status;
 8009e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009e0a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8009e0e:	781b      	ldrb	r3, [r3, #0]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd90      	pop	{r4, r7, pc}

08009e1a <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b084      	sub	sp, #16
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	60f8      	str	r0, [r7, #12]
 8009e22:	60b9      	str	r1, [r7, #8]
 8009e24:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	68b9      	ldr	r1, [r7, #8]
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	f004 f811 	bl	800de52 <memcpy>
 8009e30:	4603      	mov	r3, r0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b084      	sub	sp, #16
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	60f8      	str	r0, [r7, #12]
 8009e42:	60b9      	str	r1, [r7, #8]
 8009e44:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	68b9      	ldr	r1, [r7, #8]
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	f003 ff6e 	bl	800dd2c <memset>
 8009e50:	4603      	mov	r3, r0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	af00      	add	r7, sp, #0
  return;
 8009e5e:	bf00      	nop
}
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8009e68:	b480      	push	{r7}
 8009e6a:	af00      	add	r7, sp, #0
  return;
 8009e6c:	bf00      	nop
}
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr

08009e76 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8009e76:	b480      	push	{r7}
 8009e78:	af00      	add	r7, sp, #0
  return;
 8009e7a:	bf00      	nop
}
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8009e84:	b480      	push	{r7}
 8009e86:	af00      	add	r7, sp, #0
  return;
 8009e88:	bf00      	nop
}
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr

08009e92 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8009e92:	b480      	push	{r7}
 8009e94:	af00      	add	r7, sp, #0
  return;
 8009e96:	bf00      	nop
}
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	af00      	add	r7, sp, #0
  return;
 8009ea4:	bf00      	nop
}
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr

08009eae <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8009eae:	b480      	push	{r7}
 8009eb0:	af00      	add	r7, sp, #0
  return;
 8009eb2:	bf00      	nop
}
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	af00      	add	r7, sp, #0
  return;
 8009ec0:	bf00      	nop
}
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr

08009eca <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8009eca:	b480      	push	{r7}
 8009ecc:	af00      	add	r7, sp, #0
  return;
 8009ece:	bf00      	nop
}
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8009ed8:	b480      	push	{r7}
 8009eda:	af00      	add	r7, sp, #0
  return;
 8009edc:	bf00      	nop
}
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr

08009ee6 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8009ee6:	b480      	push	{r7}
 8009ee8:	af00      	add	r7, sp, #0
  return;
 8009eea:	bf00      	nop
}
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	af00      	add	r7, sp, #0
  return;
 8009ef8:	bf00      	nop
}
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr

08009f02 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8009f02:	b480      	push	{r7}
 8009f04:	af00      	add	r7, sp, #0
  return;
 8009f06:	bf00      	nop
}
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr

08009f10 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8009f10:	b480      	push	{r7}
 8009f12:	af00      	add	r7, sp, #0
  return;
 8009f14:	bf00      	nop
}
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr

08009f1e <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8009f1e:	b480      	push	{r7}
 8009f20:	af00      	add	r7, sp, #0
  return;
 8009f22:	bf00      	nop
}
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	af00      	add	r7, sp, #0
  return;
 8009f30:	bf00      	nop
}
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8009f3a:	b480      	push	{r7}
 8009f3c:	af00      	add	r7, sp, #0
  return;
 8009f3e:	bf00      	nop
}
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8009f4c:	4b04      	ldr	r3, [pc, #16]	; (8009f60 <SVCCTL_Init+0x18>)
 8009f4e:	2200      	movs	r2, #0
 8009f50:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8009f52:	4b04      	ldr	r3, [pc, #16]	; (8009f64 <SVCCTL_Init+0x1c>)
 8009f54:	2200      	movs	r2, #0
 8009f56:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8009f58:	f000 f806 	bl	8009f68 <SVCCTL_SvcInit>

  return;
 8009f5c:	bf00      	nop
}
 8009f5e:	bd80      	pop	{r7, pc}
 8009f60:	20000094 	.word	0x20000094
 8009f64:	200000b4 	.word	0x200000b4

08009f68 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	af00      	add	r7, sp, #0
  BAS_Init();
 8009f6c:	f7ff ff75 	bl	8009e5a <BAS_Init>

  BLS_Init();
 8009f70:	f7ff ff7a 	bl	8009e68 <BLS_Init>

  CRS_STM_Init();
 8009f74:	f7ff ff7f 	bl	8009e76 <CRS_STM_Init>

  DIS_Init();
 8009f78:	f7ff ff84 	bl	8009e84 <DIS_Init>

  EDS_STM_Init();
 8009f7c:	f7ff ff89 	bl	8009e92 <EDS_STM_Init>

  HIDS_Init();
 8009f80:	f7ff ff8e 	bl	8009ea0 <HIDS_Init>

  HRS_Init();
 8009f84:	f7ff ff93 	bl	8009eae <HRS_Init>

  HTS_Init();
 8009f88:	f7ff ff98 	bl	8009ebc <HTS_Init>

  IAS_Init();
 8009f8c:	f7ff ff9d 	bl	8009eca <IAS_Init>

  LLS_Init();
 8009f90:	f7ff ffa2 	bl	8009ed8 <LLS_Init>

  TPS_Init();
 8009f94:	f7ff ffa7 	bl	8009ee6 <TPS_Init>

  MOTENV_STM_Init();
 8009f98:	f7ff ffac 	bl	8009ef4 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8009f9c:	f7ff ffb1 	bl	8009f02 <P2PS_STM_Init>

  ZDD_STM_Init();
 8009fa0:	f7ff ffb6 	bl	8009f10 <ZDD_STM_Init>

  OTAS_STM_Init();
 8009fa4:	f7ff ffbb 	bl	8009f1e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8009fa8:	f7ff ffc7 	bl	8009f3a <BVOPUS_STM_Init>

  MESH_Init();
 8009fac:	f7ff ffbe 	bl	8009f2c <MESH_Init>

  SVCCTL_InitCustomSvc();
 8009fb0:	f002 fe3a 	bl	800cc28 <SVCCTL_InitCustomSvc>
  
  return;
 8009fb4:	bf00      	nop
}
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8009fc0:	4b09      	ldr	r3, [pc, #36]	; (8009fe8 <SVCCTL_RegisterSvcHandler+0x30>)
 8009fc2:	7f1b      	ldrb	r3, [r3, #28]
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	4a08      	ldr	r2, [pc, #32]	; (8009fe8 <SVCCTL_RegisterSvcHandler+0x30>)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8009fce:	4b06      	ldr	r3, [pc, #24]	; (8009fe8 <SVCCTL_RegisterSvcHandler+0x30>)
 8009fd0:	7f1b      	ldrb	r3, [r3, #28]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	b2da      	uxtb	r2, r3
 8009fd6:	4b04      	ldr	r3, [pc, #16]	; (8009fe8 <SVCCTL_RegisterSvcHandler+0x30>)
 8009fd8:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8009fda:	bf00      	nop
}
 8009fdc:	370c      	adds	r7, #12
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr
 8009fe6:	bf00      	nop
 8009fe8:	20000094 	.word	0x20000094

08009fec <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b086      	sub	sp, #24
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	2bff      	cmp	r3, #255	; 0xff
 800a004:	d125      	bne.n	800a052 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	3302      	adds	r3, #2
 800a00a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	881b      	ldrh	r3, [r3, #0]
 800a010:	b29b      	uxth	r3, r3
 800a012:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a016:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a01a:	d118      	bne.n	800a04e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a01c:	2300      	movs	r3, #0
 800a01e:	757b      	strb	r3, [r7, #21]
 800a020:	e00d      	b.n	800a03e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800a022:	7d7b      	ldrb	r3, [r7, #21]
 800a024:	4a1a      	ldr	r2, [pc, #104]	; (800a090 <SVCCTL_UserEvtRx+0xa4>)
 800a026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	4798      	blx	r3
 800a02e:	4603      	mov	r3, r0
 800a030:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800a032:	7dfb      	ldrb	r3, [r7, #23]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d108      	bne.n	800a04a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800a038:	7d7b      	ldrb	r3, [r7, #21]
 800a03a:	3301      	adds	r3, #1
 800a03c:	757b      	strb	r3, [r7, #21]
 800a03e:	4b14      	ldr	r3, [pc, #80]	; (800a090 <SVCCTL_UserEvtRx+0xa4>)
 800a040:	7f1b      	ldrb	r3, [r3, #28]
 800a042:	7d7a      	ldrb	r2, [r7, #21]
 800a044:	429a      	cmp	r2, r3
 800a046:	d3ec      	bcc.n	800a022 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800a048:	e002      	b.n	800a050 <SVCCTL_UserEvtRx+0x64>
              break;
 800a04a:	bf00      	nop
          break;
 800a04c:	e000      	b.n	800a050 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800a04e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800a050:	e000      	b.n	800a054 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800a052:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800a054:	7dfb      	ldrb	r3, [r7, #23]
 800a056:	2b02      	cmp	r3, #2
 800a058:	d00f      	beq.n	800a07a <SVCCTL_UserEvtRx+0x8e>
 800a05a:	2b02      	cmp	r3, #2
 800a05c:	dc10      	bgt.n	800a080 <SVCCTL_UserEvtRx+0x94>
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d002      	beq.n	800a068 <SVCCTL_UserEvtRx+0x7c>
 800a062:	2b01      	cmp	r3, #1
 800a064:	d006      	beq.n	800a074 <SVCCTL_UserEvtRx+0x88>
 800a066:	e00b      	b.n	800a080 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f001 fcb3 	bl	800b9d4 <SVCCTL_App_Notification>
 800a06e:	4603      	mov	r3, r0
 800a070:	75bb      	strb	r3, [r7, #22]
      break;
 800a072:	e008      	b.n	800a086 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a074:	2301      	movs	r3, #1
 800a076:	75bb      	strb	r3, [r7, #22]
      break;
 800a078:	e005      	b.n	800a086 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800a07a:	2300      	movs	r3, #0
 800a07c:	75bb      	strb	r3, [r7, #22]
      break;
 800a07e:	e002      	b.n	800a086 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800a080:	2301      	movs	r3, #1
 800a082:	75bb      	strb	r3, [r7, #22]
      break;
 800a084:	bf00      	nop
  }

  return (return_status);
 800a086:	7dbb      	ldrb	r3, [r7, #22]
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3718      	adds	r7, #24
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	20000094 	.word	0x20000094

0800a094 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b088      	sub	sp, #32
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a09c:	f107 030c 	add.w	r3, r7, #12
 800a0a0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	212e      	movs	r1, #46	; 0x2e
 800a0ac:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800a0b0:	f000 fae8 	bl	800a684 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	330b      	adds	r3, #11
 800a0b8:	78db      	ldrb	r3, [r3, #3]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3720      	adds	r7, #32
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b088      	sub	sp, #32
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a0ca:	f107 030c 	add.w	r3, r7, #12
 800a0ce:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800a0d6:	69fb      	ldr	r3, [r7, #28]
 800a0d8:	210f      	movs	r1, #15
 800a0da:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800a0de:	f000 fad1 	bl	800a684 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a0e2:	69fb      	ldr	r3, [r7, #28]
 800a0e4:	330b      	adds	r3, #11
 800a0e6:	78db      	ldrb	r3, [r3, #3]
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3720      	adds	r7, #32
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b088      	sub	sp, #32
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800a0f8:	f107 030c 	add.w	r3, r7, #12
 800a0fc:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	2110      	movs	r1, #16
 800a104:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800a108:	f000 fabc 	bl	800a684 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	330b      	adds	r3, #11
 800a110:	78db      	ldrb	r3, [r3, #3]
}
 800a112:	4618      	mov	r0, r3
 800a114:	3720      	adds	r7, #32
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
	...

0800a11c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800a11c:	b480      	push	{r7}
 800a11e:	b08b      	sub	sp, #44	; 0x2c
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800a124:	2300      	movs	r3, #0
 800a126:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800a128:	2300      	movs	r3, #0
 800a12a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800a12c:	2300      	movs	r3, #0
 800a12e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800a130:	2300      	movs	r3, #0
 800a132:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800a134:	2300      	movs	r3, #0
 800a136:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800a138:	2300      	movs	r3, #0
 800a13a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800a13c:	2300      	movs	r3, #0
 800a13e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800a140:	2300      	movs	r3, #0
 800a142:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800a144:	4b4a      	ldr	r3, [pc, #296]	; (800a270 <SHCI_GetWirelessFwInfo+0x154>)
 800a146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a148:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a14c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	009b      	lsls	r3, r3, #2
 800a152:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a156:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a44      	ldr	r2, [pc, #272]	; (800a274 <SHCI_GetWirelessFwInfo+0x158>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d10f      	bne.n	800a188 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	695b      	ldr	r3, [r3, #20]
 800a16c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	699b      	ldr	r3, [r3, #24]
 800a172:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	69db      	ldr	r3, [r3, #28]
 800a178:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	617b      	str	r3, [r7, #20]
 800a186:	e01a      	b.n	800a1be <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800a190:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800a194:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	695b      	ldr	r3, [r3, #20]
 800a1a4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	699b      	ldr	r3, [r3, #24]
 800a1ac:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	0e1b      	lsrs	r3, r3, #24
 800a1c2:	b2da      	uxtb	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ca:	0c1b      	lsrs	r3, r3, #16
 800a1cc:	b2da      	uxtb	r2, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d4:	0a1b      	lsrs	r3, r3, #8
 800a1d6:	b2da      	uxtb	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800a1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1de:	091b      	lsrs	r3, r3, #4
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	f003 030f 	and.w	r3, r3, #15
 800a1e6:	b2da      	uxtb	r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800a1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	f003 030f 	and.w	r3, r3, #15
 800a1f4:	b2da      	uxtb	r2, r3
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a1fa:	6a3b      	ldr	r3, [r7, #32]
 800a1fc:	0e1b      	lsrs	r3, r3, #24
 800a1fe:	b2da      	uxtb	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a204:	6a3b      	ldr	r3, [r7, #32]
 800a206:	0c1b      	lsrs	r3, r3, #16
 800a208:	b2da      	uxtb	r2, r3
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800a20e:	6a3b      	ldr	r3, [r7, #32]
 800a210:	0a1b      	lsrs	r3, r3, #8
 800a212:	b2da      	uxtb	r2, r3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a218:	6a3b      	ldr	r3, [r7, #32]
 800a21a:	b2da      	uxtb	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800a220:	69fb      	ldr	r3, [r7, #28]
 800a222:	b2da      	uxtb	r2, r3
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	0e1b      	lsrs	r3, r3, #24
 800a22c:	b2da      	uxtb	r2, r3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800a232:	69bb      	ldr	r3, [r7, #24]
 800a234:	0c1b      	lsrs	r3, r3, #16
 800a236:	b2da      	uxtb	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	0a1b      	lsrs	r3, r3, #8
 800a240:	b2da      	uxtb	r2, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	0e1b      	lsrs	r3, r3, #24
 800a24a:	b2da      	uxtb	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	0c1b      	lsrs	r3, r3, #16
 800a254:	b2da      	uxtb	r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	b2da      	uxtb	r2, r3
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800a262:	2300      	movs	r3, #0
}
 800a264:	4618      	mov	r0, r3
 800a266:	372c      	adds	r7, #44	; 0x2c
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr
 800a270:	58004000 	.word	0x58004000
 800a274:	a94656b9 	.word	0xa94656b9

0800a278 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	4a08      	ldr	r2, [pc, #32]	; (800a2a8 <hci_init+0x30>)
 800a288:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800a28a:	4a08      	ldr	r2, [pc, #32]	; (800a2ac <hci_init+0x34>)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800a290:	4806      	ldr	r0, [pc, #24]	; (800a2ac <hci_init+0x34>)
 800a292:	f000 f979 	bl	800a588 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4618      	mov	r0, r3
 800a29c:	f000 f8da 	bl	800a454 <TlInit>

  return;
 800a2a0:	bf00      	nop
}
 800a2a2:	3708      	adds	r7, #8
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	20000698 	.word	0x20000698
 800a2ac:	20000670 	.word	0x20000670

0800a2b0 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a2b6:	4822      	ldr	r0, [pc, #136]	; (800a340 <hci_user_evt_proc+0x90>)
 800a2b8:	f000 fe10 	bl	800aedc <LST_is_empty>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d12b      	bne.n	800a31a <hci_user_evt_proc+0x6a>
 800a2c2:	4b20      	ldr	r3, [pc, #128]	; (800a344 <hci_user_evt_proc+0x94>)
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d027      	beq.n	800a31a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a2ca:	f107 030c 	add.w	r3, r7, #12
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	481b      	ldr	r0, [pc, #108]	; (800a340 <hci_user_evt_proc+0x90>)
 800a2d2:	f000 fe92 	bl	800affa <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800a2d6:	4b1c      	ldr	r3, [pc, #112]	; (800a348 <hci_user_evt_proc+0x98>)
 800a2d8:	69db      	ldr	r3, [r3, #28]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00c      	beq.n	800a2f8 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a2e6:	4b18      	ldr	r3, [pc, #96]	; (800a348 <hci_user_evt_proc+0x98>)
 800a2e8:	69db      	ldr	r3, [r3, #28]
 800a2ea:	1d3a      	adds	r2, r7, #4
 800a2ec:	4610      	mov	r0, r2
 800a2ee:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800a2f0:	793a      	ldrb	r2, [r7, #4]
 800a2f2:	4b14      	ldr	r3, [pc, #80]	; (800a344 <hci_user_evt_proc+0x94>)
 800a2f4:	701a      	strb	r2, [r3, #0]
 800a2f6:	e002      	b.n	800a2fe <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a2f8:	4b12      	ldr	r3, [pc, #72]	; (800a344 <hci_user_evt_proc+0x94>)
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800a2fe:	4b11      	ldr	r3, [pc, #68]	; (800a344 <hci_user_evt_proc+0x94>)
 800a300:	781b      	ldrb	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d004      	beq.n	800a310 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	4618      	mov	r0, r3
 800a30a:	f000 fc0d 	bl	800ab28 <TL_MM_EvtDone>
 800a30e:	e004      	b.n	800a31a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	4619      	mov	r1, r3
 800a314:	480a      	ldr	r0, [pc, #40]	; (800a340 <hci_user_evt_proc+0x90>)
 800a316:	f000 fe03 	bl	800af20 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800a31a:	4809      	ldr	r0, [pc, #36]	; (800a340 <hci_user_evt_proc+0x90>)
 800a31c:	f000 fdde 	bl	800aedc <LST_is_empty>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d107      	bne.n	800a336 <hci_user_evt_proc+0x86>
 800a326:	4b07      	ldr	r3, [pc, #28]	; (800a344 <hci_user_evt_proc+0x94>)
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d003      	beq.n	800a336 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800a32e:	4804      	ldr	r0, [pc, #16]	; (800a340 <hci_user_evt_proc+0x90>)
 800a330:	f002 f9ce 	bl	800c6d0 <hci_notify_asynch_evt>
  }


  return;
 800a334:	bf00      	nop
 800a336:	bf00      	nop
}
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	200000bc 	.word	0x200000bc
 800a344:	200000c8 	.word	0x200000c8
 800a348:	20000670 	.word	0x20000670

0800a34c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b088      	sub	sp, #32
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	460b      	mov	r3, r1
 800a356:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800a358:	2000      	movs	r0, #0
 800a35a:	f000 f8d1 	bl	800a500 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800a35e:	2300      	movs	r3, #0
 800a360:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	885b      	ldrh	r3, [r3, #2]
 800a366:	b21b      	sxth	r3, r3
 800a368:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a36c:	b21a      	sxth	r2, r3
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	881b      	ldrh	r3, [r3, #0]
 800a372:	029b      	lsls	r3, r3, #10
 800a374:	b21b      	sxth	r3, r3
 800a376:	4313      	orrs	r3, r2
 800a378:	b21b      	sxth	r3, r3
 800a37a:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800a37c:	4b33      	ldr	r3, [pc, #204]	; (800a44c <hci_send_req+0x100>)
 800a37e:	2201      	movs	r2, #1
 800a380:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	b2d9      	uxtb	r1, r3
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	689a      	ldr	r2, [r3, #8]
 800a38c:	8bbb      	ldrh	r3, [r7, #28]
 800a38e:	4618      	mov	r0, r3
 800a390:	f000 f890 	bl	800a4b4 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800a394:	e04e      	b.n	800a434 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800a396:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a39a:	f002 f9b0 	bl	800c6fe <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a39e:	e043      	b.n	800a428 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800a3a0:	f107 030c 	add.w	r3, r7, #12
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	482a      	ldr	r0, [pc, #168]	; (800a450 <hci_send_req+0x104>)
 800a3a8:	f000 fe27 	bl	800affa <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	7a5b      	ldrb	r3, [r3, #9]
 800a3b0:	2b0f      	cmp	r3, #15
 800a3b2:	d114      	bne.n	800a3de <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	330b      	adds	r3, #11
 800a3b8:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	885b      	ldrh	r3, [r3, #2]
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	8bba      	ldrh	r2, [r7, #28]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d104      	bne.n	800a3d0 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	693a      	ldr	r2, [r7, #16]
 800a3cc:	7812      	ldrb	r2, [r2, #0]
 800a3ce:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	785b      	ldrb	r3, [r3, #1]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d027      	beq.n	800a428 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	77fb      	strb	r3, [r7, #31]
 800a3dc:	e024      	b.n	800a428 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	330b      	adds	r3, #11
 800a3e2:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	8bba      	ldrh	r2, [r7, #28]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d114      	bne.n	800a41c <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	7a9b      	ldrb	r3, [r3, #10]
 800a3f6:	3b03      	subs	r3, #3
 800a3f8:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	695a      	ldr	r2, [r3, #20]
 800a3fe:	7dfb      	ldrb	r3, [r7, #23]
 800a400:	429a      	cmp	r2, r3
 800a402:	bfa8      	it	ge
 800a404:	461a      	movge	r2, r3
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6918      	ldr	r0, [r3, #16]
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	1cd9      	adds	r1, r3, #3
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	695b      	ldr	r3, [r3, #20]
 800a416:	461a      	mov	r2, r3
 800a418:	f003 fd1b 	bl	800de52 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d001      	beq.n	800a428 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800a424:	2301      	movs	r3, #1
 800a426:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800a428:	4809      	ldr	r0, [pc, #36]	; (800a450 <hci_send_req+0x104>)
 800a42a:	f000 fd57 	bl	800aedc <LST_is_empty>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d0b5      	beq.n	800a3a0 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800a434:	7ffb      	ldrb	r3, [r7, #31]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d0ad      	beq.n	800a396 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800a43a:	2001      	movs	r0, #1
 800a43c:	f000 f860 	bl	800a500 <NotifyCmdStatus>

  return 0;
 800a440:	2300      	movs	r3, #0
}
 800a442:	4618      	mov	r0, r3
 800a444:	3720      	adds	r7, #32
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}
 800a44a:	bf00      	nop
 800a44c:	2000069c 	.word	0x2000069c
 800a450:	20000690 	.word	0x20000690

0800a454 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b086      	sub	sp, #24
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800a45c:	480f      	ldr	r0, [pc, #60]	; (800a49c <TlInit+0x48>)
 800a45e:	f000 fd2d 	bl	800aebc <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800a462:	4a0f      	ldr	r2, [pc, #60]	; (800a4a0 <TlInit+0x4c>)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800a468:	480e      	ldr	r0, [pc, #56]	; (800a4a4 <TlInit+0x50>)
 800a46a:	f000 fd27 	bl	800aebc <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800a46e:	4b0e      	ldr	r3, [pc, #56]	; (800a4a8 <TlInit+0x54>)
 800a470:	2201      	movs	r2, #1
 800a472:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800a474:	4b0d      	ldr	r3, [pc, #52]	; (800a4ac <TlInit+0x58>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d00a      	beq.n	800a492 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800a480:	4b0b      	ldr	r3, [pc, #44]	; (800a4b0 <TlInit+0x5c>)
 800a482:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800a484:	4b09      	ldr	r3, [pc, #36]	; (800a4ac <TlInit+0x58>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f107 0208 	add.w	r2, r7, #8
 800a48c:	4610      	mov	r0, r2
 800a48e:	4798      	blx	r3
  }

  return;
 800a490:	bf00      	nop
 800a492:	bf00      	nop
}
 800a494:	3718      	adds	r7, #24
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	20000690 	.word	0x20000690
 800a4a0:	200000c4 	.word	0x200000c4
 800a4a4:	200000bc 	.word	0x200000bc
 800a4a8:	200000c8 	.word	0x200000c8
 800a4ac:	20000670 	.word	0x20000670
 800a4b0:	0800a541 	.word	0x0800a541

0800a4b4 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b082      	sub	sp, #8
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	603a      	str	r2, [r7, #0]
 800a4be:	80fb      	strh	r3, [r7, #6]
 800a4c0:	460b      	mov	r3, r1
 800a4c2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800a4c4:	4b0c      	ldr	r3, [pc, #48]	; (800a4f8 <SendCmd+0x44>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	88fa      	ldrh	r2, [r7, #6]
 800a4ca:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800a4ce:	4b0a      	ldr	r3, [pc, #40]	; (800a4f8 <SendCmd+0x44>)
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	797a      	ldrb	r2, [r7, #5]
 800a4d4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800a4d6:	4b08      	ldr	r3, [pc, #32]	; (800a4f8 <SendCmd+0x44>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	330c      	adds	r3, #12
 800a4dc:	797a      	ldrb	r2, [r7, #5]
 800a4de:	6839      	ldr	r1, [r7, #0]
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	f003 fcb6 	bl	800de52 <memcpy>

  hciContext.io.Send(0,0);
 800a4e6:	4b05      	ldr	r3, [pc, #20]	; (800a4fc <SendCmd+0x48>)
 800a4e8:	691b      	ldr	r3, [r3, #16]
 800a4ea:	2100      	movs	r1, #0
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	4798      	blx	r3

  return;
 800a4f0:	bf00      	nop
}
 800a4f2:	3708      	adds	r7, #8
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	200000c4 	.word	0x200000c4
 800a4fc:	20000670 	.word	0x20000670

0800a500 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	4603      	mov	r3, r0
 800a508:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800a50a:	79fb      	ldrb	r3, [r7, #7]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d108      	bne.n	800a522 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800a510:	4b0a      	ldr	r3, [pc, #40]	; (800a53c <NotifyCmdStatus+0x3c>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d00d      	beq.n	800a534 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800a518:	4b08      	ldr	r3, [pc, #32]	; (800a53c <NotifyCmdStatus+0x3c>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2000      	movs	r0, #0
 800a51e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800a520:	e008      	b.n	800a534 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800a522:	4b06      	ldr	r3, [pc, #24]	; (800a53c <NotifyCmdStatus+0x3c>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d004      	beq.n	800a534 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800a52a:	4b04      	ldr	r3, [pc, #16]	; (800a53c <NotifyCmdStatus+0x3c>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	2001      	movs	r0, #1
 800a530:	4798      	blx	r3
  return;
 800a532:	bf00      	nop
 800a534:	bf00      	nop
}
 800a536:	3708      	adds	r7, #8
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	20000698 	.word	0x20000698

0800a540 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	7a5b      	ldrb	r3, [r3, #9]
 800a54c:	2b0f      	cmp	r3, #15
 800a54e:	d003      	beq.n	800a558 <TlEvtReceived+0x18>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	7a5b      	ldrb	r3, [r3, #9]
 800a554:	2b0e      	cmp	r3, #14
 800a556:	d107      	bne.n	800a568 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800a558:	6879      	ldr	r1, [r7, #4]
 800a55a:	4809      	ldr	r0, [pc, #36]	; (800a580 <TlEvtReceived+0x40>)
 800a55c:	f000 fd06 	bl	800af6c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800a560:	2000      	movs	r0, #0
 800a562:	f002 f8c1 	bl	800c6e8 <hci_cmd_resp_release>
 800a566:	e006      	b.n	800a576 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800a568:	6879      	ldr	r1, [r7, #4]
 800a56a:	4806      	ldr	r0, [pc, #24]	; (800a584 <TlEvtReceived+0x44>)
 800a56c:	f000 fcfe 	bl	800af6c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a570:	4804      	ldr	r0, [pc, #16]	; (800a584 <TlEvtReceived+0x44>)
 800a572:	f002 f8ad 	bl	800c6d0 <hci_notify_asynch_evt>
  }

  return;
 800a576:	bf00      	nop
}
 800a578:	3708      	adds	r7, #8
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	20000690 	.word	0x20000690
 800a584:	200000bc 	.word	0x200000bc

0800a588 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800a588:	b480      	push	{r7}
 800a58a:	b083      	sub	sp, #12
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4a05      	ldr	r2, [pc, #20]	; (800a5a8 <hci_register_io_bus+0x20>)
 800a594:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4a04      	ldr	r2, [pc, #16]	; (800a5ac <hci_register_io_bus+0x24>)
 800a59a:	611a      	str	r2, [r3, #16]

  return;
 800a59c:	bf00      	nop
}
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr
 800a5a8:	0800a8a1 	.word	0x0800a8a1
 800a5ac:	0800a909 	.word	0x0800a909

0800a5b0 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b082      	sub	sp, #8
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	4a08      	ldr	r2, [pc, #32]	; (800a5e0 <shci_init+0x30>)
 800a5c0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800a5c2:	4a08      	ldr	r2, [pc, #32]	; (800a5e4 <shci_init+0x34>)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800a5c8:	4806      	ldr	r0, [pc, #24]	; (800a5e4 <shci_init+0x34>)
 800a5ca:	f000 f915 	bl	800a7f8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f000 f898 	bl	800a708 <TlInit>

  return;
 800a5d8:	bf00      	nop
}
 800a5da:	3708      	adds	r7, #8
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	200006c0 	.word	0x200006c0
 800a5e4:	200006a0 	.word	0x200006a0

0800a5e8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a5ee:	4822      	ldr	r0, [pc, #136]	; (800a678 <shci_user_evt_proc+0x90>)
 800a5f0:	f000 fc74 	bl	800aedc <LST_is_empty>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d12b      	bne.n	800a652 <shci_user_evt_proc+0x6a>
 800a5fa:	4b20      	ldr	r3, [pc, #128]	; (800a67c <shci_user_evt_proc+0x94>)
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d027      	beq.n	800a652 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800a602:	f107 030c 	add.w	r3, r7, #12
 800a606:	4619      	mov	r1, r3
 800a608:	481b      	ldr	r0, [pc, #108]	; (800a678 <shci_user_evt_proc+0x90>)
 800a60a:	f000 fcf6 	bl	800affa <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800a60e:	4b1c      	ldr	r3, [pc, #112]	; (800a680 <shci_user_evt_proc+0x98>)
 800a610:	69db      	ldr	r3, [r3, #28]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d00c      	beq.n	800a630 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800a61a:	2301      	movs	r3, #1
 800a61c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800a61e:	4b18      	ldr	r3, [pc, #96]	; (800a680 <shci_user_evt_proc+0x98>)
 800a620:	69db      	ldr	r3, [r3, #28]
 800a622:	1d3a      	adds	r2, r7, #4
 800a624:	4610      	mov	r0, r2
 800a626:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800a628:	793a      	ldrb	r2, [r7, #4]
 800a62a:	4b14      	ldr	r3, [pc, #80]	; (800a67c <shci_user_evt_proc+0x94>)
 800a62c:	701a      	strb	r2, [r3, #0]
 800a62e:	e002      	b.n	800a636 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a630:	4b12      	ldr	r3, [pc, #72]	; (800a67c <shci_user_evt_proc+0x94>)
 800a632:	2201      	movs	r2, #1
 800a634:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800a636:	4b11      	ldr	r3, [pc, #68]	; (800a67c <shci_user_evt_proc+0x94>)
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d004      	beq.n	800a648 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	4618      	mov	r0, r3
 800a642:	f000 fa71 	bl	800ab28 <TL_MM_EvtDone>
 800a646:	e004      	b.n	800a652 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	4619      	mov	r1, r3
 800a64c:	480a      	ldr	r0, [pc, #40]	; (800a678 <shci_user_evt_proc+0x90>)
 800a64e:	f000 fc67 	bl	800af20 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800a652:	4809      	ldr	r0, [pc, #36]	; (800a678 <shci_user_evt_proc+0x90>)
 800a654:	f000 fc42 	bl	800aedc <LST_is_empty>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d107      	bne.n	800a66e <shci_user_evt_proc+0x86>
 800a65e:	4b07      	ldr	r3, [pc, #28]	; (800a67c <shci_user_evt_proc+0x94>)
 800a660:	781b      	ldrb	r3, [r3, #0]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d003      	beq.n	800a66e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800a666:	4804      	ldr	r0, [pc, #16]	; (800a678 <shci_user_evt_proc+0x90>)
 800a668:	f7f7 f817 	bl	800169a <shci_notify_asynch_evt>
  }


  return;
 800a66c:	bf00      	nop
 800a66e:	bf00      	nop
}
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	200000cc 	.word	0x200000cc
 800a67c:	200000dc 	.word	0x200000dc
 800a680:	200006a0 	.word	0x200006a0

0800a684 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b084      	sub	sp, #16
 800a688:	af00      	add	r7, sp, #0
 800a68a:	60ba      	str	r2, [r7, #8]
 800a68c:	607b      	str	r3, [r7, #4]
 800a68e:	4603      	mov	r3, r0
 800a690:	81fb      	strh	r3, [r7, #14]
 800a692:	460b      	mov	r3, r1
 800a694:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800a696:	2000      	movs	r0, #0
 800a698:	f000 f868 	bl	800a76c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800a69c:	4b17      	ldr	r3, [pc, #92]	; (800a6fc <shci_send+0x78>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	89fa      	ldrh	r2, [r7, #14]
 800a6a2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800a6a6:	4b15      	ldr	r3, [pc, #84]	; (800a6fc <shci_send+0x78>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	7b7a      	ldrb	r2, [r7, #13]
 800a6ac:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800a6ae:	4b13      	ldr	r3, [pc, #76]	; (800a6fc <shci_send+0x78>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	330c      	adds	r3, #12
 800a6b4:	7b7a      	ldrb	r2, [r7, #13]
 800a6b6:	68b9      	ldr	r1, [r7, #8]
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f003 fbca 	bl	800de52 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800a6be:	4b10      	ldr	r3, [pc, #64]	; (800a700 <shci_send+0x7c>)
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800a6c4:	4b0f      	ldr	r3, [pc, #60]	; (800a704 <shci_send+0x80>)
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	2000      	movs	r0, #0
 800a6cc:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800a6ce:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800a6d2:	f7f6 fffa 	bl	80016ca <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f103 0008 	add.w	r0, r3, #8
 800a6dc:	4b07      	ldr	r3, [pc, #28]	; (800a6fc <shci_send+0x78>)
 800a6de:	6819      	ldr	r1, [r3, #0]
 800a6e0:	4b06      	ldr	r3, [pc, #24]	; (800a6fc <shci_send+0x78>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	789b      	ldrb	r3, [r3, #2]
 800a6e6:	3303      	adds	r3, #3
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	f003 fbb2 	bl	800de52 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a6ee:	2001      	movs	r0, #1
 800a6f0:	f000 f83c 	bl	800a76c <Cmd_SetStatus>

  return;
 800a6f4:	bf00      	nop
}
 800a6f6:	3710      	adds	r7, #16
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	200000d8 	.word	0x200000d8
 800a700:	200006c4 	.word	0x200006c4
 800a704:	200006a0 	.word	0x200006a0

0800a708 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b086      	sub	sp, #24
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800a710:	4a10      	ldr	r2, [pc, #64]	; (800a754 <TlInit+0x4c>)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800a716:	4810      	ldr	r0, [pc, #64]	; (800a758 <TlInit+0x50>)
 800a718:	f000 fbd0 	bl	800aebc <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800a71c:	2001      	movs	r0, #1
 800a71e:	f000 f825 	bl	800a76c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800a722:	4b0e      	ldr	r3, [pc, #56]	; (800a75c <TlInit+0x54>)
 800a724:	2201      	movs	r2, #1
 800a726:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800a728:	4b0d      	ldr	r3, [pc, #52]	; (800a760 <TlInit+0x58>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00c      	beq.n	800a74a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800a734:	4b0b      	ldr	r3, [pc, #44]	; (800a764 <TlInit+0x5c>)
 800a736:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800a738:	4b0b      	ldr	r3, [pc, #44]	; (800a768 <TlInit+0x60>)
 800a73a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800a73c:	4b08      	ldr	r3, [pc, #32]	; (800a760 <TlInit+0x58>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f107 020c 	add.w	r2, r7, #12
 800a744:	4610      	mov	r0, r2
 800a746:	4798      	blx	r3
  }

  return;
 800a748:	bf00      	nop
 800a74a:	bf00      	nop
}
 800a74c:	3718      	adds	r7, #24
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
 800a752:	bf00      	nop
 800a754:	200000d8 	.word	0x200000d8
 800a758:	200000cc 	.word	0x200000cc
 800a75c:	200000dc 	.word	0x200000dc
 800a760:	200006a0 	.word	0x200006a0
 800a764:	0800a7bd 	.word	0x0800a7bd
 800a768:	0800a7d5 	.word	0x0800a7d5

0800a76c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800a76c:	b580      	push	{r7, lr}
 800a76e:	b082      	sub	sp, #8
 800a770:	af00      	add	r7, sp, #0
 800a772:	4603      	mov	r3, r0
 800a774:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800a776:	79fb      	ldrb	r3, [r7, #7]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d10b      	bne.n	800a794 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800a77c:	4b0d      	ldr	r3, [pc, #52]	; (800a7b4 <Cmd_SetStatus+0x48>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d003      	beq.n	800a78c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800a784:	4b0b      	ldr	r3, [pc, #44]	; (800a7b4 <Cmd_SetStatus+0x48>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2000      	movs	r0, #0
 800a78a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800a78c:	4b0a      	ldr	r3, [pc, #40]	; (800a7b8 <Cmd_SetStatus+0x4c>)
 800a78e:	2200      	movs	r2, #0
 800a790:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800a792:	e00b      	b.n	800a7ac <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800a794:	4b08      	ldr	r3, [pc, #32]	; (800a7b8 <Cmd_SetStatus+0x4c>)
 800a796:	2201      	movs	r2, #1
 800a798:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800a79a:	4b06      	ldr	r3, [pc, #24]	; (800a7b4 <Cmd_SetStatus+0x48>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d004      	beq.n	800a7ac <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800a7a2:	4b04      	ldr	r3, [pc, #16]	; (800a7b4 <Cmd_SetStatus+0x48>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	2001      	movs	r0, #1
 800a7a8:	4798      	blx	r3
  return;
 800a7aa:	bf00      	nop
 800a7ac:	bf00      	nop
}
 800a7ae:	3708      	adds	r7, #8
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}
 800a7b4:	200006c0 	.word	0x200006c0
 800a7b8:	200000d4 	.word	0x200000d4

0800a7bc <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	f7f6 ff75 	bl	80016b4 <shci_cmd_resp_release>

  return;
 800a7ca:	bf00      	nop
}
 800a7cc:	3708      	adds	r7, #8
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
	...

0800a7d4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800a7dc:	6879      	ldr	r1, [r7, #4]
 800a7de:	4805      	ldr	r0, [pc, #20]	; (800a7f4 <TlUserEvtReceived+0x20>)
 800a7e0:	f000 fbc4 	bl	800af6c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800a7e4:	4803      	ldr	r0, [pc, #12]	; (800a7f4 <TlUserEvtReceived+0x20>)
 800a7e6:	f7f6 ff58 	bl	800169a <shci_notify_asynch_evt>

  return;
 800a7ea:	bf00      	nop
}
 800a7ec:	3708      	adds	r7, #8
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	200000cc 	.word	0x200000cc

0800a7f8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	4a05      	ldr	r2, [pc, #20]	; (800a818 <shci_register_io_bus+0x20>)
 800a804:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	4a04      	ldr	r2, [pc, #16]	; (800a81c <shci_register_io_bus+0x24>)
 800a80a:	611a      	str	r2, [r3, #16]

  return;
 800a80c:	bf00      	nop
}
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr
 800a818:	0800a9b5 	.word	0x0800a9b5
 800a81c:	0800aa09 	.word	0x0800aa09

0800a820 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800a820:	b580      	push	{r7, lr}
 800a822:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800a824:	f002 fd20 	bl	800d268 <HW_IPCC_Enable>

  return;
 800a828:	bf00      	nop
}
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <TL_Init>:


void TL_Init( void )
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800a830:	4b10      	ldr	r3, [pc, #64]	; (800a874 <TL_Init+0x48>)
 800a832:	4a11      	ldr	r2, [pc, #68]	; (800a878 <TL_Init+0x4c>)
 800a834:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800a836:	4b0f      	ldr	r3, [pc, #60]	; (800a874 <TL_Init+0x48>)
 800a838:	4a10      	ldr	r2, [pc, #64]	; (800a87c <TL_Init+0x50>)
 800a83a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800a83c:	4b0d      	ldr	r3, [pc, #52]	; (800a874 <TL_Init+0x48>)
 800a83e:	4a10      	ldr	r2, [pc, #64]	; (800a880 <TL_Init+0x54>)
 800a840:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800a842:	4b0c      	ldr	r3, [pc, #48]	; (800a874 <TL_Init+0x48>)
 800a844:	4a0f      	ldr	r2, [pc, #60]	; (800a884 <TL_Init+0x58>)
 800a846:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800a848:	4b0a      	ldr	r3, [pc, #40]	; (800a874 <TL_Init+0x48>)
 800a84a:	4a0f      	ldr	r2, [pc, #60]	; (800a888 <TL_Init+0x5c>)
 800a84c:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800a84e:	4b09      	ldr	r3, [pc, #36]	; (800a874 <TL_Init+0x48>)
 800a850:	4a0e      	ldr	r2, [pc, #56]	; (800a88c <TL_Init+0x60>)
 800a852:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800a854:	4b07      	ldr	r3, [pc, #28]	; (800a874 <TL_Init+0x48>)
 800a856:	4a0e      	ldr	r2, [pc, #56]	; (800a890 <TL_Init+0x64>)
 800a858:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800a85a:	4b06      	ldr	r3, [pc, #24]	; (800a874 <TL_Init+0x48>)
 800a85c:	4a0d      	ldr	r2, [pc, #52]	; (800a894 <TL_Init+0x68>)
 800a85e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800a860:	4b04      	ldr	r3, [pc, #16]	; (800a874 <TL_Init+0x48>)
 800a862:	4a0d      	ldr	r2, [pc, #52]	; (800a898 <TL_Init+0x6c>)
 800a864:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800a866:	4b03      	ldr	r3, [pc, #12]	; (800a874 <TL_Init+0x48>)
 800a868:	4a0c      	ldr	r2, [pc, #48]	; (800a89c <TL_Init+0x70>)
 800a86a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800a86c:	f002 fd10 	bl	800d290 <HW_IPCC_Init>

  return;
 800a870:	bf00      	nop
}
 800a872:	bd80      	pop	{r7, pc}
 800a874:	20030000 	.word	0x20030000
 800a878:	20030028 	.word	0x20030028
 800a87c:	20030048 	.word	0x20030048
 800a880:	20030058 	.word	0x20030058
 800a884:	20030068 	.word	0x20030068
 800a888:	20030070 	.word	0x20030070
 800a88c:	20030078 	.word	0x20030078
 800a890:	20030080 	.word	0x20030080
 800a894:	2003009c 	.word	0x2003009c
 800a898:	200300a0 	.word	0x200300a0
 800a89c:	200300ac 	.word	0x200300ac

0800a8a0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800a8ac:	4811      	ldr	r0, [pc, #68]	; (800a8f4 <TL_BLE_Init+0x54>)
 800a8ae:	f000 fb05 	bl	800aebc <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800a8b2:	4b11      	ldr	r3, [pc, #68]	; (800a8f8 <TL_BLE_Init+0x58>)
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	689a      	ldr	r2, [r3, #8]
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	68da      	ldr	r2, [r3, #12]
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	4a0c      	ldr	r2, [pc, #48]	; (800a8fc <TL_BLE_Init+0x5c>)
 800a8cc:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	4a08      	ldr	r2, [pc, #32]	; (800a8f4 <TL_BLE_Init+0x54>)
 800a8d2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800a8d4:	f002 fcf2 	bl	800d2bc <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a08      	ldr	r2, [pc, #32]	; (800a900 <TL_BLE_Init+0x60>)
 800a8de:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	4a07      	ldr	r2, [pc, #28]	; (800a904 <TL_BLE_Init+0x64>)
 800a8e6:	6013      	str	r3, [r2, #0]

  return 0;
 800a8e8:	2300      	movs	r3, #0
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	200300c8 	.word	0x200300c8
 800a8f8:	20030000 	.word	0x20030000
 800a8fc:	20030a58 	.word	0x20030a58
 800a900:	200006d0 	.word	0x200006d0
 800a904:	200006d4 	.word	0x200006d4

0800a908 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b082      	sub	sp, #8
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	460b      	mov	r3, r1
 800a912:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800a914:	4b09      	ldr	r3, [pc, #36]	; (800a93c <TL_BLE_SendCmd+0x34>)
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	2201      	movs	r2, #1
 800a91c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800a91e:	4b07      	ldr	r3, [pc, #28]	; (800a93c <TL_BLE_SendCmd+0x34>)
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4619      	mov	r1, r3
 800a926:	2001      	movs	r0, #1
 800a928:	f000 f96c 	bl	800ac04 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800a92c:	f002 fcd0 	bl	800d2d0 <HW_IPCC_BLE_SendCmd>

  return 0;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3708      	adds	r7, #8
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	20030000 	.word	0x20030000

0800a940 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b082      	sub	sp, #8
 800a944:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800a946:	e01c      	b.n	800a982 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800a948:	1d3b      	adds	r3, r7, #4
 800a94a:	4619      	mov	r1, r3
 800a94c:	4812      	ldr	r0, [pc, #72]	; (800a998 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a94e:	f000 fb54 	bl	800affa <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	7a5b      	ldrb	r3, [r3, #9]
 800a956:	2b0f      	cmp	r3, #15
 800a958:	d003      	beq.n	800a962 <HW_IPCC_BLE_RxEvtNot+0x22>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	7a5b      	ldrb	r3, [r3, #9]
 800a95e:	2b0e      	cmp	r3, #14
 800a960:	d105      	bne.n	800a96e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4619      	mov	r1, r3
 800a966:	2002      	movs	r0, #2
 800a968:	f000 f94c 	bl	800ac04 <OutputDbgTrace>
 800a96c:	e004      	b.n	800a978 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4619      	mov	r1, r3
 800a972:	2003      	movs	r0, #3
 800a974:	f000 f946 	bl	800ac04 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800a978:	4b08      	ldr	r3, [pc, #32]	; (800a99c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	4610      	mov	r0, r2
 800a980:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800a982:	4805      	ldr	r0, [pc, #20]	; (800a998 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800a984:	f000 faaa 	bl	800aedc <LST_is_empty>
 800a988:	4603      	mov	r3, r0
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d0dc      	beq.n	800a948 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800a98e:	bf00      	nop
}
 800a990:	3708      	adds	r7, #8
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	200300c8 	.word	0x200300c8
 800a99c:	200006d0 	.word	0x200006d0

0800a9a0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800a9a4:	4b02      	ldr	r3, [pc, #8]	; (800a9b0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4798      	blx	r3

  return;
 800a9aa:	bf00      	nop
}
 800a9ac:	bd80      	pop	{r7, pc}
 800a9ae:	bf00      	nop
 800a9b0:	200006d4 	.word	0x200006d4

0800a9b4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800a9c0:	480d      	ldr	r0, [pc, #52]	; (800a9f8 <TL_SYS_Init+0x44>)
 800a9c2:	f000 fa7b 	bl	800aebc <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800a9c6:	4b0d      	ldr	r3, [pc, #52]	; (800a9fc <TL_SYS_Init+0x48>)
 800a9c8:	68db      	ldr	r3, [r3, #12]
 800a9ca:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	689a      	ldr	r2, [r3, #8]
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	4a08      	ldr	r2, [pc, #32]	; (800a9f8 <TL_SYS_Init+0x44>)
 800a9d8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800a9da:	f002 fc9b 	bl	800d314 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a07      	ldr	r2, [pc, #28]	; (800aa00 <TL_SYS_Init+0x4c>)
 800a9e4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	4a06      	ldr	r2, [pc, #24]	; (800aa04 <TL_SYS_Init+0x50>)
 800a9ec:	6013      	str	r3, [r2, #0]

  return 0;
 800a9ee:	2300      	movs	r3, #0
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3710      	adds	r7, #16
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	200300d0 	.word	0x200300d0
 800a9fc:	20030000 	.word	0x20030000
 800aa00:	200006d8 	.word	0x200006d8
 800aa04:	200006dc 	.word	0x200006dc

0800aa08 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	460b      	mov	r3, r1
 800aa12:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800aa14:	4b09      	ldr	r3, [pc, #36]	; (800aa3c <TL_SYS_SendCmd+0x34>)
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	2210      	movs	r2, #16
 800aa1c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800aa1e:	4b07      	ldr	r3, [pc, #28]	; (800aa3c <TL_SYS_SendCmd+0x34>)
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4619      	mov	r1, r3
 800aa26:	2004      	movs	r0, #4
 800aa28:	f000 f8ec 	bl	800ac04 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800aa2c:	f002 fc7c 	bl	800d328 <HW_IPCC_SYS_SendCmd>

  return 0;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	20030000 	.word	0x20030000

0800aa40 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800aa44:	4b07      	ldr	r3, [pc, #28]	; (800aa64 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	4619      	mov	r1, r3
 800aa4c:	2005      	movs	r0, #5
 800aa4e:	f000 f8d9 	bl	800ac04 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800aa52:	4b05      	ldr	r3, [pc, #20]	; (800aa68 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a03      	ldr	r2, [pc, #12]	; (800aa64 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800aa58:	68d2      	ldr	r2, [r2, #12]
 800aa5a:	6812      	ldr	r2, [r2, #0]
 800aa5c:	4610      	mov	r0, r2
 800aa5e:	4798      	blx	r3

  return;
 800aa60:	bf00      	nop
}
 800aa62:	bd80      	pop	{r7, pc}
 800aa64:	20030000 	.word	0x20030000
 800aa68:	200006d8 	.word	0x200006d8

0800aa6c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800aa6c:	b580      	push	{r7, lr}
 800aa6e:	b082      	sub	sp, #8
 800aa70:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800aa72:	e00e      	b.n	800aa92 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800aa74:	1d3b      	adds	r3, r7, #4
 800aa76:	4619      	mov	r1, r3
 800aa78:	480b      	ldr	r0, [pc, #44]	; (800aaa8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800aa7a:	f000 fabe 	bl	800affa <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	4619      	mov	r1, r3
 800aa82:	2006      	movs	r0, #6
 800aa84:	f000 f8be 	bl	800ac04 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800aa88:	4b08      	ldr	r3, [pc, #32]	; (800aaac <HW_IPCC_SYS_EvtNot+0x40>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	4610      	mov	r0, r2
 800aa90:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800aa92:	4805      	ldr	r0, [pc, #20]	; (800aaa8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800aa94:	f000 fa22 	bl	800aedc <LST_is_empty>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d0ea      	beq.n	800aa74 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800aa9e:	bf00      	nop
}
 800aaa0:	3708      	adds	r7, #8
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}
 800aaa6:	bf00      	nop
 800aaa8:	200300d0 	.word	0x200300d0
 800aaac:	200006dc 	.word	0x200006dc

0800aab0 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b082      	sub	sp, #8
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800aab8:	4817      	ldr	r0, [pc, #92]	; (800ab18 <TL_MM_Init+0x68>)
 800aaba:	f000 f9ff 	bl	800aebc <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800aabe:	4817      	ldr	r0, [pc, #92]	; (800ab1c <TL_MM_Init+0x6c>)
 800aac0:	f000 f9fc 	bl	800aebc <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800aac4:	4b16      	ldr	r3, [pc, #88]	; (800ab20 <TL_MM_Init+0x70>)
 800aac6:	691b      	ldr	r3, [r3, #16]
 800aac8:	4a16      	ldr	r2, [pc, #88]	; (800ab24 <TL_MM_Init+0x74>)
 800aaca:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800aacc:	4b15      	ldr	r3, [pc, #84]	; (800ab24 <TL_MM_Init+0x74>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	6892      	ldr	r2, [r2, #8]
 800aad4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800aad6:	4b13      	ldr	r3, [pc, #76]	; (800ab24 <TL_MM_Init+0x74>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	68d2      	ldr	r2, [r2, #12]
 800aade:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800aae0:	4b10      	ldr	r3, [pc, #64]	; (800ab24 <TL_MM_Init+0x74>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a0c      	ldr	r2, [pc, #48]	; (800ab18 <TL_MM_Init+0x68>)
 800aae6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800aae8:	4b0e      	ldr	r3, [pc, #56]	; (800ab24 <TL_MM_Init+0x74>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	6812      	ldr	r2, [r2, #0]
 800aaf0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800aaf2:	4b0c      	ldr	r3, [pc, #48]	; (800ab24 <TL_MM_Init+0x74>)
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	687a      	ldr	r2, [r7, #4]
 800aaf8:	6852      	ldr	r2, [r2, #4]
 800aafa:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800aafc:	4b09      	ldr	r3, [pc, #36]	; (800ab24 <TL_MM_Init+0x74>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	6912      	ldr	r2, [r2, #16]
 800ab04:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800ab06:	4b07      	ldr	r3, [pc, #28]	; (800ab24 <TL_MM_Init+0x74>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	687a      	ldr	r2, [r7, #4]
 800ab0c:	6952      	ldr	r2, [r2, #20]
 800ab0e:	619a      	str	r2, [r3, #24]

  return;
 800ab10:	bf00      	nop
}
 800ab12:	3708      	adds	r7, #8
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	200300b8 	.word	0x200300b8
 800ab1c:	200006c8 	.word	0x200006c8
 800ab20:	20030000 	.word	0x20030000
 800ab24:	200006e0 	.word	0x200006e0

0800ab28 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b082      	sub	sp, #8
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800ab30:	6879      	ldr	r1, [r7, #4]
 800ab32:	4807      	ldr	r0, [pc, #28]	; (800ab50 <TL_MM_EvtDone+0x28>)
 800ab34:	f000 fa1a 	bl	800af6c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800ab38:	6879      	ldr	r1, [r7, #4]
 800ab3a:	2000      	movs	r0, #0
 800ab3c:	f000 f862 	bl	800ac04 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800ab40:	4804      	ldr	r0, [pc, #16]	; (800ab54 <TL_MM_EvtDone+0x2c>)
 800ab42:	f002 fc17 	bl	800d374 <HW_IPCC_MM_SendFreeBuf>

  return;
 800ab46:	bf00      	nop
}
 800ab48:	3708      	adds	r7, #8
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	200006c8 	.word	0x200006c8
 800ab54:	0800ab59 	.word	0x0800ab59

0800ab58 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ab5e:	e00c      	b.n	800ab7a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800ab60:	1d3b      	adds	r3, r7, #4
 800ab62:	4619      	mov	r1, r3
 800ab64:	480a      	ldr	r0, [pc, #40]	; (800ab90 <SendFreeBuf+0x38>)
 800ab66:	f000 fa48 	bl	800affa <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800ab6a:	4b0a      	ldr	r3, [pc, #40]	; (800ab94 <SendFreeBuf+0x3c>)
 800ab6c:	691b      	ldr	r3, [r3, #16]
 800ab6e:	691b      	ldr	r3, [r3, #16]
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	4611      	mov	r1, r2
 800ab74:	4618      	mov	r0, r3
 800ab76:	f000 f9f9 	bl	800af6c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ab7a:	4805      	ldr	r0, [pc, #20]	; (800ab90 <SendFreeBuf+0x38>)
 800ab7c:	f000 f9ae 	bl	800aedc <LST_is_empty>
 800ab80:	4603      	mov	r3, r0
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d0ec      	beq.n	800ab60 <SendFreeBuf+0x8>
  }

  return;
 800ab86:	bf00      	nop
}
 800ab88:	3708      	adds	r7, #8
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	200006c8 	.word	0x200006c8
 800ab94:	20030000 	.word	0x20030000

0800ab98 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800ab9c:	4805      	ldr	r0, [pc, #20]	; (800abb4 <TL_TRACES_Init+0x1c>)
 800ab9e:	f000 f98d 	bl	800aebc <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800aba2:	4b05      	ldr	r3, [pc, #20]	; (800abb8 <TL_TRACES_Init+0x20>)
 800aba4:	695b      	ldr	r3, [r3, #20]
 800aba6:	4a03      	ldr	r2, [pc, #12]	; (800abb4 <TL_TRACES_Init+0x1c>)
 800aba8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800abaa:	f002 fc19 	bl	800d3e0 <HW_IPCC_TRACES_Init>

  return;
 800abae:	bf00      	nop
}
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	200300c0 	.word	0x200300c0
 800abb8:	20030000 	.word	0x20030000

0800abbc <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b082      	sub	sp, #8
 800abc0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800abc2:	e008      	b.n	800abd6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800abc4:	1d3b      	adds	r3, r7, #4
 800abc6:	4619      	mov	r1, r3
 800abc8:	4808      	ldr	r0, [pc, #32]	; (800abec <HW_IPCC_TRACES_EvtNot+0x30>)
 800abca:	f000 fa16 	bl	800affa <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4618      	mov	r0, r3
 800abd2:	f000 f80d 	bl	800abf0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800abd6:	4805      	ldr	r0, [pc, #20]	; (800abec <HW_IPCC_TRACES_EvtNot+0x30>)
 800abd8:	f000 f980 	bl	800aedc <LST_is_empty>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d0f0      	beq.n	800abc4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800abe2:	bf00      	nop
}
 800abe4:	3708      	adds	r7, #8
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	200300c0 	.word	0x200300c0

0800abf0 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800abf8:	bf00      	nop
 800abfa:	370c      	adds	r7, #12
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b085      	sub	sp, #20
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	6039      	str	r1, [r7, #0]
 800ac0e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800ac10:	79fb      	ldrb	r3, [r7, #7]
 800ac12:	2b06      	cmp	r3, #6
 800ac14:	d845      	bhi.n	800aca2 <OutputDbgTrace+0x9e>
 800ac16:	a201      	add	r2, pc, #4	; (adr r2, 800ac1c <OutputDbgTrace+0x18>)
 800ac18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac1c:	0800ac39 	.word	0x0800ac39
 800ac20:	0800ac5d 	.word	0x0800ac5d
 800ac24:	0800ac63 	.word	0x0800ac63
 800ac28:	0800ac77 	.word	0x0800ac77
 800ac2c:	0800ac83 	.word	0x0800ac83
 800ac30:	0800ac89 	.word	0x0800ac89
 800ac34:	0800ac97 	.word	0x0800ac97
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	7a5b      	ldrb	r3, [r3, #9]
 800ac40:	2bff      	cmp	r3, #255	; 0xff
 800ac42:	d005      	beq.n	800ac50 <OutputDbgTrace+0x4c>
 800ac44:	2bff      	cmp	r3, #255	; 0xff
 800ac46:	dc05      	bgt.n	800ac54 <OutputDbgTrace+0x50>
 800ac48:	2b0e      	cmp	r3, #14
 800ac4a:	d005      	beq.n	800ac58 <OutputDbgTrace+0x54>
 800ac4c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800ac4e:	e001      	b.n	800ac54 <OutputDbgTrace+0x50>
          break;
 800ac50:	bf00      	nop
 800ac52:	e027      	b.n	800aca4 <OutputDbgTrace+0xa0>
          break;
 800ac54:	bf00      	nop
 800ac56:	e025      	b.n	800aca4 <OutputDbgTrace+0xa0>
          break;
 800ac58:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800ac5a:	e023      	b.n	800aca4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ac60:	e020      	b.n	800aca4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	7a5b      	ldrb	r3, [r3, #9]
 800ac6a:	2b0e      	cmp	r3, #14
 800ac6c:	d001      	beq.n	800ac72 <OutputDbgTrace+0x6e>
 800ac6e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ac70:	e000      	b.n	800ac74 <OutputDbgTrace+0x70>
          break;
 800ac72:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ac74:	e016      	b.n	800aca4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	7a5b      	ldrb	r3, [r3, #9]
 800ac7e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ac80:	e010      	b.n	800aca4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ac86:	e00d      	b.n	800aca4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	7a5b      	ldrb	r3, [r3, #9]
 800ac90:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ac92:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ac94:	e006      	b.n	800aca4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	7a5b      	ldrb	r3, [r3, #9]
 800ac9e:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800aca0:	e000      	b.n	800aca4 <OutputDbgTrace+0xa0>

    default:
      break;
 800aca2:	bf00      	nop
  }

  return;
 800aca4:	bf00      	nop
}
 800aca6:	3714      	adds	r7, #20
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800acbc:	215c      	movs	r1, #92	; 0x5c
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f003 f83c 	bl	800dd3c <strrchr>
 800acc4:	4603      	mov	r3, r0
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d007      	beq.n	800acda <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800acca:	215c      	movs	r1, #92	; 0x5c
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f003 f835 	bl	800dd3c <strrchr>
 800acd2:	4603      	mov	r3, r0
 800acd4:	3301      	adds	r3, #1
 800acd6:	60fb      	str	r3, [r7, #12]
 800acd8:	e00d      	b.n	800acf6 <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800acda:	212f      	movs	r1, #47	; 0x2f
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f003 f82d 	bl	800dd3c <strrchr>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d006      	beq.n	800acf6 <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800ace8:	212f      	movs	r1, #47	; 0x2f
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f003 f826 	bl	800dd3c <strrchr>
 800acf0:	4603      	mov	r3, r0
 800acf2:	3301      	adds	r3, #1
 800acf4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800acf6:	68fb      	ldr	r3, [r7, #12]
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3710      	adds	r7, #16
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b086      	sub	sp, #24
 800ad04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad06:	f3ef 8310 	mrs	r3, PRIMASK
 800ad0a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800ad0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad10:	b672      	cpsid	i
}
 800ad12:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800ad14:	1cbb      	adds	r3, r7, #2
 800ad16:	4619      	mov	r1, r3
 800ad18:	4812      	ldr	r0, [pc, #72]	; (800ad64 <DbgTrace_TxCpltCallback+0x64>)
 800ad1a:	f000 fbe6 	bl	800b4ea <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800ad1e:	1cbb      	adds	r3, r7, #2
 800ad20:	4619      	mov	r1, r3
 800ad22:	4810      	ldr	r0, [pc, #64]	; (800ad64 <DbgTrace_TxCpltCallback+0x64>)
 800ad24:	f000 fcd2 	bl	800b6cc <CircularQueue_Sense>
 800ad28:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d00c      	beq.n	800ad4a <DbgTrace_TxCpltCallback+0x4a>
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	f383 8810 	msr	PRIMASK, r3
}
 800ad3a:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800ad3c:	887b      	ldrh	r3, [r7, #2]
 800ad3e:	4a0a      	ldr	r2, [pc, #40]	; (800ad68 <DbgTrace_TxCpltCallback+0x68>)
 800ad40:	4619      	mov	r1, r3
 800ad42:	6938      	ldr	r0, [r7, #16]
 800ad44:	f7f6 f907 	bl	8000f56 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800ad48:	e008      	b.n	800ad5c <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800ad4a:	4b08      	ldr	r3, [pc, #32]	; (800ad6c <DbgTrace_TxCpltCallback+0x6c>)
 800ad4c:	2201      	movs	r2, #1
 800ad4e:	701a      	strb	r2, [r3, #0]
 800ad50:	697b      	ldr	r3, [r7, #20]
 800ad52:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f383 8810 	msr	PRIMASK, r3
}
 800ad5a:	bf00      	nop
}
 800ad5c:	bf00      	nop
 800ad5e:	3718      	adds	r7, #24
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	200006e4 	.word	0x200006e4
 800ad68:	0800ad01 	.word	0x0800ad01
 800ad6c:	20000011 	.word	0x20000011

0800ad70 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800ad76:	f7f6 f8e8 	bl	8000f4a <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800ad7a:	2302      	movs	r3, #2
 800ad7c:	9300      	str	r3, [sp, #0]
 800ad7e:	2300      	movs	r3, #0
 800ad80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ad84:	4903      	ldr	r1, [pc, #12]	; (800ad94 <DbgTraceInit+0x24>)
 800ad86:	4804      	ldr	r0, [pc, #16]	; (800ad98 <DbgTraceInit+0x28>)
 800ad88:	f000 f956 	bl	800b038 <CircularQueue_Init>
#endif 
#endif
  return;
 800ad8c:	bf00      	nop
}
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	20000704 	.word	0x20000704
 800ad98:	200006e4 	.word	0x200006e4

0800ad9c <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	68b9      	ldr	r1, [r7, #8]
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	f000 f805 	bl	800adbc <DbgTraceWrite>
 800adb2:	4603      	mov	r3, r0
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3710      	adds	r7, #16
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b08a      	sub	sp, #40	; 0x28
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800adc8:	2300      	movs	r3, #0
 800adca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800adcc:	f3ef 8310 	mrs	r3, PRIMASK
 800add0:	61bb      	str	r3, [r7, #24]
  return(result);
 800add2:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800add4:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800addc:	d102      	bne.n	800ade4 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800adde:	2300      	movs	r3, #0
 800ade0:	627b      	str	r3, [r7, #36]	; 0x24
 800ade2:	e037      	b.n	800ae54 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	d006      	beq.n	800adf8 <DbgTraceWrite+0x3c>
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2b02      	cmp	r3, #2
 800adee:	d003      	beq.n	800adf8 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800adf0:	f04f 33ff 	mov.w	r3, #4294967295
 800adf4:	627b      	str	r3, [r7, #36]	; 0x24
 800adf6:	e02d      	b.n	800ae54 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d02a      	beq.n	800ae54 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800ae02:	b672      	cpsid	i
}
 800ae04:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	b29a      	uxth	r2, r3
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	68b9      	ldr	r1, [r7, #8]
 800ae0e:	4814      	ldr	r0, [pc, #80]	; (800ae60 <DbgTraceWrite+0xa4>)
 800ae10:	f000 f944 	bl	800b09c <CircularQueue_Add>
 800ae14:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d015      	beq.n	800ae48 <DbgTraceWrite+0x8c>
 800ae1c:	4b11      	ldr	r3, [pc, #68]	; (800ae64 <DbgTraceWrite+0xa8>)
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d010      	beq.n	800ae48 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800ae26:	4b0f      	ldr	r3, [pc, #60]	; (800ae64 <DbgTraceWrite+0xa8>)
 800ae28:	2200      	movs	r2, #0
 800ae2a:	701a      	strb	r2, [r3, #0]
 800ae2c:	6a3b      	ldr	r3, [r7, #32]
 800ae2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	f383 8810 	msr	PRIMASK, r3
}
 800ae36:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	4a0a      	ldr	r2, [pc, #40]	; (800ae68 <DbgTraceWrite+0xac>)
 800ae3e:	4619      	mov	r1, r3
 800ae40:	69f8      	ldr	r0, [r7, #28]
 800ae42:	f7f6 f888 	bl	8000f56 <DbgOutputTraces>
 800ae46:	e005      	b.n	800ae54 <DbgTraceWrite+0x98>
 800ae48:	6a3b      	ldr	r3, [r7, #32]
 800ae4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	f383 8810 	msr	PRIMASK, r3
}
 800ae52:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800ae54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3728      	adds	r7, #40	; 0x28
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
 800ae5e:	bf00      	nop
 800ae60:	200006e4 	.word	0x200006e4
 800ae64:	20000011 	.word	0x20000011
 800ae68:	0800ad01 	.word	0x0800ad01

0800ae6c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	4603      	mov	r3, r0
 800ae74:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800ae76:	4b0f      	ldr	r3, [pc, #60]	; (800aeb4 <OTP_Read+0x48>)
 800ae78:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ae7a:	e002      	b.n	800ae82 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	3b08      	subs	r3, #8
 800ae80:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	3307      	adds	r3, #7
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	79fa      	ldrb	r2, [r7, #7]
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d003      	beq.n	800ae96 <OTP_Read+0x2a>
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	4a09      	ldr	r2, [pc, #36]	; (800aeb8 <OTP_Read+0x4c>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d1f2      	bne.n	800ae7c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	3307      	adds	r3, #7
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	79fa      	ldrb	r2, [r7, #7]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d001      	beq.n	800aea6 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800aea2:	2300      	movs	r3, #0
 800aea4:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800aea6:	68fb      	ldr	r3, [r7, #12]
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3714      	adds	r7, #20
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr
 800aeb4:	1fff73f8 	.word	0x1fff73f8
 800aeb8:	1fff7000 	.word	0x1fff7000

0800aebc <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b083      	sub	sp, #12
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	687a      	ldr	r2, [r7, #4]
 800aec8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	605a      	str	r2, [r3, #4]
}
 800aed0:	bf00      	nop
 800aed2:	370c      	adds	r7, #12
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr

0800aedc <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800aedc:	b480      	push	{r7}
 800aede:	b087      	sub	sp, #28
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aee4:	f3ef 8310 	mrs	r3, PRIMASK
 800aee8:	60fb      	str	r3, [r7, #12]
  return(result);
 800aeea:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800aeec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800aeee:	b672      	cpsid	i
}
 800aef0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d102      	bne.n	800af02 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800aefc:	2301      	movs	r3, #1
 800aefe:	75fb      	strb	r3, [r7, #23]
 800af00:	e001      	b.n	800af06 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800af02:	2300      	movs	r3, #0
 800af04:	75fb      	strb	r3, [r7, #23]
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	f383 8810 	msr	PRIMASK, r3
}
 800af10:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800af12:	7dfb      	ldrb	r3, [r7, #23]
}
 800af14:	4618      	mov	r0, r3
 800af16:	371c      	adds	r7, #28
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800af20:	b480      	push	{r7}
 800af22:	b087      	sub	sp, #28
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af2a:	f3ef 8310 	mrs	r3, PRIMASK
 800af2e:	60fb      	str	r3, [r7, #12]
  return(result);
 800af30:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800af32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800af34:	b672      	cpsid	i
}
 800af36:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	683a      	ldr	r2, [r7, #0]
 800af4a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	683a      	ldr	r2, [r7, #0]
 800af52:	605a      	str	r2, [r3, #4]
 800af54:	697b      	ldr	r3, [r7, #20]
 800af56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	f383 8810 	msr	PRIMASK, r3
}
 800af5e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800af60:	bf00      	nop
 800af62:	371c      	adds	r7, #28
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b087      	sub	sp, #28
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af76:	f3ef 8310 	mrs	r3, PRIMASK
 800af7a:	60fb      	str	r3, [r7, #12]
  return(result);
 800af7c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800af7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800af80:	b672      	cpsid	i
}
 800af82:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	687a      	ldr	r2, [r7, #4]
 800af88:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	685a      	ldr	r2, [r3, #4]
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	683a      	ldr	r2, [r7, #0]
 800af96:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	683a      	ldr	r2, [r7, #0]
 800af9e:	601a      	str	r2, [r3, #0]
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	f383 8810 	msr	PRIMASK, r3
}
 800afaa:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800afac:	bf00      	nop
 800afae:	371c      	adds	r7, #28
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800afb8:	b480      	push	{r7}
 800afba:	b087      	sub	sp, #28
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800afc0:	f3ef 8310 	mrs	r3, PRIMASK
 800afc4:	60fb      	str	r3, [r7, #12]
  return(result);
 800afc6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800afc8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800afca:	b672      	cpsid	i
}
 800afcc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	6812      	ldr	r2, [r2, #0]
 800afd6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	6852      	ldr	r2, [r2, #4]
 800afe0:	605a      	str	r2, [r3, #4]
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	f383 8810 	msr	PRIMASK, r3
}
 800afec:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800afee:	bf00      	nop
 800aff0:	371c      	adds	r7, #28
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr

0800affa <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b086      	sub	sp, #24
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
 800b002:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b004:	f3ef 8310 	mrs	r3, PRIMASK
 800b008:	60fb      	str	r3, [r7, #12]
  return(result);
 800b00a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800b00c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b00e:	b672      	cpsid	i
}
 800b010:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4618      	mov	r0, r3
 800b020:	f7ff ffca 	bl	800afb8 <LST_remove_node>
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	f383 8810 	msr	PRIMASK, r3
}
 800b02e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800b030:	bf00      	nop
 800b032:	3718      	adds	r7, #24
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800b038:	b480      	push	{r7}
 800b03a:	b085      	sub	sp, #20
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	60f8      	str	r0, [r7, #12]
 800b040:	60b9      	str	r1, [r7, #8]
 800b042:	607a      	str	r2, [r7, #4]
 800b044:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	68ba      	ldr	r2, [r7, #8]
 800b04a:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2200      	movs	r2, #0
 800b050:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2200      	movs	r2, #0
 800b056:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2200      	movs	r2, #0
 800b05c:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2200      	movs	r2, #0
 800b062:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	887a      	ldrh	r2, [r7, #2]
 800b06e:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	7e3a      	ldrb	r2, [r7, #24]
 800b074:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800b076:	7e3b      	ldrb	r3, [r7, #24]
 800b078:	f003 0302 	and.w	r3, r3, #2
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d006      	beq.n	800b08e <CircularQueue_Init+0x56>
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	891b      	ldrh	r3, [r3, #8]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d002      	beq.n	800b08e <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800b088:	f04f 33ff 	mov.w	r3, #4294967295
 800b08c:	e000      	b.n	800b090 <CircularQueue_Init+0x58>
  }
  return 0;
 800b08e:	2300      	movs	r3, #0
}
 800b090:	4618      	mov	r0, r3
 800b092:	3714      	adds	r7, #20
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr

0800b09c <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b08e      	sub	sp, #56	; 0x38
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	603b      	str	r3, [r7, #0]
 800b0a8:	4613      	mov	r3, r2
 800b0aa:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0bc:	2300      	movs	r3, #0
 800b0be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	891b      	ldrh	r3, [r3, #8]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d101      	bne.n	800b0d4 <CircularQueue_Add+0x38>
 800b0d0:	2302      	movs	r3, #2
 800b0d2:	e000      	b.n	800b0d6 <CircularQueue_Add+0x3a>
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	695b      	ldr	r3, [r3, #20]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d02a      	beq.n	800b136 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	891b      	ldrh	r3, [r3, #8]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d123      	bne.n	800b130 <CircularQueue_Add+0x94>
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	691b      	ldr	r3, [r3, #16]
 800b0f0:	4413      	add	r3, r2
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	b29a      	uxth	r2, r3
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	6819      	ldr	r1, [r3, #0]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	691b      	ldr	r3, [r3, #16]
 800b0fe:	1c58      	adds	r0, r3, #1
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	4298      	cmp	r0, r3
 800b106:	d306      	bcc.n	800b116 <CircularQueue_Add+0x7a>
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	6918      	ldr	r0, [r3, #16]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	685b      	ldr	r3, [r3, #4]
 800b110:	1ac3      	subs	r3, r0, r3
 800b112:	3301      	adds	r3, #1
 800b114:	e002      	b.n	800b11c <CircularQueue_Add+0x80>
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	691b      	ldr	r3, [r3, #16]
 800b11a:	3301      	adds	r3, #1
 800b11c:	440b      	add	r3, r1
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	b29b      	uxth	r3, r3
 800b122:	021b      	lsls	r3, r3, #8
 800b124:	b29b      	uxth	r3, r3
 800b126:	4413      	add	r3, r2
 800b128:	b29b      	uxth	r3, r3
 800b12a:	3302      	adds	r3, #2
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	e001      	b.n	800b134 <CircularQueue_Add+0x98>
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	891b      	ldrh	r3, [r3, #8]
 800b134:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	891b      	ldrh	r3, [r3, #8]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d002      	beq.n	800b144 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	891b      	ldrh	r3, [r3, #8]
 800b142:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	691a      	ldr	r2, [r3, #16]
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	68db      	ldr	r3, [r3, #12]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d307      	bcc.n	800b160 <CircularQueue_Add+0xc4>
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	685a      	ldr	r2, [r3, #4]
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	6919      	ldr	r1, [r3, #16]
 800b158:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b15a:	440b      	add	r3, r1
 800b15c:	1ad3      	subs	r3, r2, r3
 800b15e:	e000      	b.n	800b162 <CircularQueue_Add+0xc6>
 800b160:	2300      	movs	r3, #0
 800b162:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800b164:	88fa      	ldrh	r2, [r7, #6]
 800b166:	7ffb      	ldrb	r3, [r7, #31]
 800b168:	4413      	add	r3, r2
 800b16a:	461a      	mov	r2, r3
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	fb02 f303 	mul.w	r3, r2, r3
 800b172:	69ba      	ldr	r2, [r7, #24]
 800b174:	429a      	cmp	r2, r3
 800b176:	d80b      	bhi.n	800b190 <CircularQueue_Add+0xf4>
 800b178:	88fa      	ldrh	r2, [r7, #6]
 800b17a:	7ffb      	ldrb	r3, [r7, #31]
 800b17c:	4413      	add	r3, r2
 800b17e:	461a      	mov	r2, r3
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	fbb3 f1f2 	udiv	r1, r3, r2
 800b186:	fb01 f202 	mul.w	r2, r1, r2
 800b18a:	1a9b      	subs	r3, r3, r2
 800b18c:	b2db      	uxtb	r3, r3
 800b18e:	e000      	b.n	800b192 <CircularQueue_Add+0xf6>
 800b190:	2300      	movs	r3, #0
 800b192:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800b194:	7dfa      	ldrb	r2, [r7, #23]
 800b196:	7ffb      	ldrb	r3, [r7, #31]
 800b198:	429a      	cmp	r2, r3
 800b19a:	bf8c      	ite	hi
 800b19c:	2301      	movhi	r3, #1
 800b19e:	2300      	movls	r3, #0
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800b1a4:	7fbb      	ldrb	r3, [r7, #30]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d008      	beq.n	800b1bc <CircularQueue_Add+0x120>
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	7f1b      	ldrb	r3, [r3, #28]
 800b1ae:	f003 0301 	and.w	r3, r3, #1
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d002      	beq.n	800b1bc <CircularQueue_Add+0x120>
 800b1b6:	7dfb      	ldrb	r3, [r7, #23]
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	e000      	b.n	800b1be <CircularQueue_Add+0x122>
 800b1bc:	8bbb      	ldrh	r3, [r7, #28]
 800b1be:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800b1c0:	7fbb      	ldrb	r3, [r7, #30]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d008      	beq.n	800b1d8 <CircularQueue_Add+0x13c>
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	7f1b      	ldrb	r3, [r3, #28]
 800b1ca:	f003 0302 	and.w	r3, r3, #2
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d002      	beq.n	800b1d8 <CircularQueue_Add+0x13c>
 800b1d2:	7ffb      	ldrb	r3, [r7, #31]
 800b1d4:	b29b      	uxth	r3, r3
 800b1d6:	e000      	b.n	800b1da <CircularQueue_Add+0x13e>
 800b1d8:	8bbb      	ldrh	r3, [r7, #28]
 800b1da:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800b1dc:	88fb      	ldrh	r3, [r7, #6]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f000 817e 	beq.w	800b4e0 <CircularQueue_Add+0x444>
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	695a      	ldr	r2, [r3, #20]
 800b1e8:	88f9      	ldrh	r1, [r7, #6]
 800b1ea:	7ffb      	ldrb	r3, [r7, #31]
 800b1ec:	440b      	add	r3, r1
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	fb01 f303 	mul.w	r3, r1, r3
 800b1f6:	441a      	add	r2, r3
 800b1f8:	8bbb      	ldrh	r3, [r7, #28]
 800b1fa:	441a      	add	r2, r3
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	685b      	ldr	r3, [r3, #4]
 800b200:	429a      	cmp	r2, r3
 800b202:	f200 816d 	bhi.w	800b4e0 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800b206:	2300      	movs	r3, #0
 800b208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b20a:	e14a      	b.n	800b4a2 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	691a      	ldr	r2, [r3, #16]
 800b210:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b212:	441a      	add	r2, r3
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	429a      	cmp	r2, r3
 800b21a:	d307      	bcc.n	800b22c <CircularQueue_Add+0x190>
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	691a      	ldr	r2, [r3, #16]
 800b220:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b222:	441a      	add	r2, r3
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	1ad3      	subs	r3, r2, r3
 800b22a:	e003      	b.n	800b234 <CircularQueue_Add+0x198>
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	691a      	ldr	r2, [r3, #16]
 800b230:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b232:	4413      	add	r3, r2
 800b234:	68fa      	ldr	r2, [r7, #12]
 800b236:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	691b      	ldr	r3, [r3, #16]
 800b23c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	891b      	ldrh	r3, [r3, #8]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d130      	bne.n	800b2a8 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24c:	1c59      	adds	r1, r3, #1
 800b24e:	6339      	str	r1, [r7, #48]	; 0x30
 800b250:	4413      	add	r3, r2
 800b252:	88fa      	ldrh	r2, [r7, #6]
 800b254:	b2d2      	uxtb	r2, r2
 800b256:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b25e:	429a      	cmp	r2, r3
 800b260:	d304      	bcc.n	800b26c <CircularQueue_Add+0x1d0>
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b268:	1ad3      	subs	r3, r2, r3
 800b26a:	e000      	b.n	800b26e <CircularQueue_Add+0x1d2>
 800b26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b26e:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800b270:	88fb      	ldrh	r3, [r7, #6]
 800b272:	0a1b      	lsrs	r3, r3, #8
 800b274:	b298      	uxth	r0, r3
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681a      	ldr	r2, [r3, #0]
 800b27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b27c:	1c59      	adds	r1, r3, #1
 800b27e:	6339      	str	r1, [r7, #48]	; 0x30
 800b280:	4413      	add	r3, r2
 800b282:	b2c2      	uxtb	r2, r0
 800b284:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d304      	bcc.n	800b29a <CircularQueue_Add+0x1fe>
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b296:	1ad3      	subs	r3, r2, r3
 800b298:	e000      	b.n	800b29c <CircularQueue_Add+0x200>
 800b29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b29c:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	695b      	ldr	r3, [r3, #20]
 800b2a2:	1c9a      	adds	r2, r3, #2
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800b2a8:	88fa      	ldrh	r2, [r7, #6]
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	6859      	ldr	r1, [r3, #4]
 800b2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2b0:	1acb      	subs	r3, r1, r3
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	bf28      	it	cs
 800b2b6:	4613      	movcs	r3, r2
 800b2b8:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800b2ba:	88fb      	ldrh	r3, [r7, #6]
 800b2bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d007      	beq.n	800b2d2 <CircularQueue_Add+0x236>
 800b2c2:	88fb      	ldrh	r3, [r7, #6]
 800b2c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d225      	bcs.n	800b316 <CircularQueue_Add+0x27a>
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	7f1b      	ldrb	r3, [r3, #28]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d121      	bne.n	800b316 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d8:	18d0      	adds	r0, r2, r3
 800b2da:	88fb      	ldrh	r3, [r7, #6]
 800b2dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2de:	fb02 f303 	mul.w	r3, r2, r3
 800b2e2:	68ba      	ldr	r2, [r7, #8]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	f002 fdb2 	bl	800de52 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	695a      	ldr	r2, [r3, #20]
 800b2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f4:	441a      	add	r2, r3
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800b2fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b300:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800b302:	88fa      	ldrh	r2, [r7, #6]
 800b304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b306:	1ad3      	subs	r3, r2, r3
 800b308:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800b30a:	7ffb      	ldrb	r3, [r7, #31]
 800b30c:	b29a      	uxth	r2, r3
 800b30e:	88fb      	ldrh	r3, [r7, #6]
 800b310:	4413      	add	r3, r2
 800b312:	86fb      	strh	r3, [r7, #54]	; 0x36
 800b314:	e0a4      	b.n	800b460 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800b316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b318:	2b00      	cmp	r3, #0
 800b31a:	f000 80a1 	beq.w	800b460 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	7f1b      	ldrb	r3, [r3, #28]
 800b322:	f003 0301 	and.w	r3, r3, #1
 800b326:	2b00      	cmp	r3, #0
 800b328:	d03a      	beq.n	800b3a0 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	891b      	ldrh	r3, [r3, #8]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d10d      	bne.n	800b34e <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b338:	3b02      	subs	r3, #2
 800b33a:	4413      	add	r3, r2
 800b33c:	22ff      	movs	r2, #255	; 0xff
 800b33e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b346:	3b01      	subs	r3, #1
 800b348:	4413      	add	r3, r2
 800b34a:	22ff      	movs	r2, #255	; 0xff
 800b34c:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	695a      	ldr	r2, [r3, #20]
 800b352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b354:	441a      	add	r2, r3
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800b35a:	2300      	movs	r3, #0
 800b35c:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800b35e:	88fb      	ldrh	r3, [r7, #6]
 800b360:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800b362:	2300      	movs	r3, #0
 800b364:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	891b      	ldrh	r3, [r3, #8]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d16f      	bne.n	800b44e <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681a      	ldr	r2, [r3, #0]
 800b372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b374:	1c59      	adds	r1, r3, #1
 800b376:	6339      	str	r1, [r7, #48]	; 0x30
 800b378:	4413      	add	r3, r2
 800b37a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b37c:	b2d2      	uxtb	r2, r2
 800b37e:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b382:	0a18      	lsrs	r0, r3, #8
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38a:	1c59      	adds	r1, r3, #1
 800b38c:	6339      	str	r1, [r7, #48]	; 0x30
 800b38e:	4413      	add	r3, r2
 800b390:	b2c2      	uxtb	r2, r0
 800b392:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	695b      	ldr	r3, [r3, #20]
 800b398:	1c9a      	adds	r2, r3, #2
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	615a      	str	r2, [r3, #20]
 800b39e:	e056      	b.n	800b44e <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	7f1b      	ldrb	r3, [r3, #28]
 800b3a4:	f003 0302 	and.w	r3, r3, #2
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d050      	beq.n	800b44e <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	891b      	ldrh	r3, [r3, #8]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d14a      	bne.n	800b44a <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ba:	3b02      	subs	r3, #2
 800b3bc:	4413      	add	r3, r2
 800b3be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3c0:	b2d2      	uxtb	r2, r2
 800b3c2:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c6:	0a19      	lsrs	r1, r3, #8
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	4413      	add	r3, r2
 800b3d2:	b2ca      	uxtb	r2, r1
 800b3d4:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3dc:	18d0      	adds	r0, r2, r3
 800b3de:	88fb      	ldrh	r3, [r7, #6]
 800b3e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3e2:	fb02 f303 	mul.w	r3, r2, r3
 800b3e6:	68ba      	ldr	r2, [r7, #8]
 800b3e8:	4413      	add	r3, r2
 800b3ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	f002 fd30 	bl	800de52 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	695a      	ldr	r2, [r3, #20]
 800b3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3f8:	441a      	add	r2, r3
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800b3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b400:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800b402:	88fa      	ldrh	r2, [r7, #6]
 800b404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b406:	1ad3      	subs	r3, r2, r3
 800b408:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	699b      	ldr	r3, [r3, #24]
 800b40e:	1c5a      	adds	r2, r3, #1
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800b414:	2300      	movs	r3, #0
 800b416:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681a      	ldr	r2, [r3, #0]
 800b41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41e:	1c59      	adds	r1, r3, #1
 800b420:	6339      	str	r1, [r7, #48]	; 0x30
 800b422:	4413      	add	r3, r2
 800b424:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b426:	b2d2      	uxtb	r2, r2
 800b428:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800b42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b42c:	0a18      	lsrs	r0, r3, #8
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b434:	1c59      	adds	r1, r3, #1
 800b436:	6339      	str	r1, [r7, #48]	; 0x30
 800b438:	4413      	add	r3, r2
 800b43a:	b2c2      	uxtb	r2, r0
 800b43c:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	695b      	ldr	r3, [r3, #20]
 800b442:	1c9a      	adds	r2, r3, #2
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	615a      	str	r2, [r3, #20]
 800b448:	e001      	b.n	800b44e <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800b44a:	2300      	movs	r3, #0
 800b44c:	e049      	b.n	800b4e2 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800b44e:	7ffb      	ldrb	r3, [r7, #31]
 800b450:	b29a      	uxth	r2, r3
 800b452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b454:	b29b      	uxth	r3, r3
 800b456:	4413      	add	r3, r2
 800b458:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	2200      	movs	r2, #0
 800b45e:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800b460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b462:	2b00      	cmp	r3, #0
 800b464:	d015      	beq.n	800b492 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46c:	18d0      	adds	r0, r2, r3
 800b46e:	88fb      	ldrh	r3, [r7, #6]
 800b470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b472:	fb03 f202 	mul.w	r2, r3, r2
 800b476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b478:	4413      	add	r3, r2
 800b47a:	68ba      	ldr	r2, [r7, #8]
 800b47c:	4413      	add	r3, r2
 800b47e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b480:	4619      	mov	r1, r3
 800b482:	f002 fce6 	bl	800de52 <memcpy>
        q->byteCount += NbBytesToCopy;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	695a      	ldr	r2, [r3, #20]
 800b48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b48c:	441a      	add	r2, r3
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	699b      	ldr	r3, [r3, #24]
 800b496:	1c5a      	adds	r2, r3, #1
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800b49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b49e:	3301      	adds	r3, #1
 800b4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b4a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	f4ff aeb0 	bcc.w	800b20c <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	6919      	ldr	r1, [r3, #16]
 800b4b4:	7ffb      	ldrb	r3, [r7, #31]
 800b4b6:	4419      	add	r1, r3
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	4299      	cmp	r1, r3
 800b4be:	d307      	bcc.n	800b4d0 <CircularQueue_Add+0x434>
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	6919      	ldr	r1, [r3, #16]
 800b4c4:	7ffb      	ldrb	r3, [r7, #31]
 800b4c6:	4419      	add	r1, r3
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	1acb      	subs	r3, r1, r3
 800b4ce:	e003      	b.n	800b4d8 <CircularQueue_Add+0x43c>
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	6919      	ldr	r1, [r3, #16]
 800b4d4:	7ffb      	ldrb	r3, [r7, #31]
 800b4d6:	440b      	add	r3, r1
 800b4d8:	4413      	add	r3, r2
 800b4da:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800b4dc:	6a3b      	ldr	r3, [r7, #32]
 800b4de:	e000      	b.n	800b4e2 <CircularQueue_Add+0x446>
    return NULL;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3738      	adds	r7, #56	; 0x38
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800b4ea:	b480      	push	{r7}
 800b4ec:	b085      	sub	sp, #20
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
 800b4f2:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	891b      	ldrh	r3, [r3, #8]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d101      	bne.n	800b508 <CircularQueue_Remove+0x1e>
 800b504:	2302      	movs	r3, #2
 800b506:	e000      	b.n	800b50a <CircularQueue_Remove+0x20>
 800b508:	2300      	movs	r3, #0
 800b50a:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800b50c:	2300      	movs	r3, #0
 800b50e:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	695b      	ldr	r3, [r3, #20]
 800b514:	2b00      	cmp	r3, #0
 800b516:	f000 80cc 	beq.w	800b6b2 <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	891b      	ldrh	r3, [r3, #8]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d121      	bne.n	800b566 <CircularQueue_Remove+0x7c>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681a      	ldr	r2, [r3, #0]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	68db      	ldr	r3, [r3, #12]
 800b52a:	4413      	add	r3, r2
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	b29a      	uxth	r2, r3
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6819      	ldr	r1, [r3, #0]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	1c58      	adds	r0, r3, #1
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	4298      	cmp	r0, r3
 800b540:	d306      	bcc.n	800b550 <CircularQueue_Remove+0x66>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	68d8      	ldr	r0, [r3, #12]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	1ac3      	subs	r3, r0, r3
 800b54c:	3301      	adds	r3, #1
 800b54e:	e002      	b.n	800b556 <CircularQueue_Remove+0x6c>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	3301      	adds	r3, #1
 800b556:	440b      	add	r3, r1
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	021b      	lsls	r3, r3, #8
 800b55e:	b29b      	uxth	r3, r3
 800b560:	4413      	add	r3, r2
 800b562:	b29b      	uxth	r3, r3
 800b564:	e001      	b.n	800b56a <CircularQueue_Remove+0x80>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	891b      	ldrh	r3, [r3, #8]
 800b56a:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	7f1b      	ldrb	r3, [r3, #28]
 800b570:	f003 0301 	and.w	r3, r3, #1
 800b574:	2b00      	cmp	r3, #0
 800b576:	d057      	beq.n	800b628 <CircularQueue_Remove+0x13e>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	7f1b      	ldrb	r3, [r3, #28]
 800b57c:	f003 0302 	and.w	r3, r3, #2
 800b580:	2b00      	cmp	r3, #0
 800b582:	d151      	bne.n	800b628 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b584:	897b      	ldrh	r3, [r7, #10]
 800b586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d103      	bne.n	800b596 <CircularQueue_Remove+0xac>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	891b      	ldrh	r3, [r3, #8]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d012      	beq.n	800b5bc <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	68da      	ldr	r2, [r3, #12]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b59e:	429a      	cmp	r2, r3
 800b5a0:	d942      	bls.n	800b628 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	891b      	ldrh	r3, [r3, #8]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d03e      	beq.n	800b628 <CircularQueue_Remove+0x13e>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	685a      	ldr	r2, [r3, #4]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	1ad3      	subs	r3, r2, r3
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	8912      	ldrh	r2, [r2, #8]
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d235      	bcs.n	800b628 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	695a      	ldr	r2, [r3, #20]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	68d9      	ldr	r1, [r3, #12]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	1acb      	subs	r3, r1, r3
 800b5ca:	441a      	add	r2, r3
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	891b      	ldrh	r3, [r3, #8]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d121      	bne.n	800b622 <CircularQueue_Remove+0x138>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	4413      	add	r3, r2
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	b29a      	uxth	r2, r3
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	6819      	ldr	r1, [r3, #0]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	1c58      	adds	r0, r3, #1
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	4298      	cmp	r0, r3
 800b5fc:	d306      	bcc.n	800b60c <CircularQueue_Remove+0x122>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	68d8      	ldr	r0, [r3, #12]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	1ac3      	subs	r3, r0, r3
 800b608:	3301      	adds	r3, #1
 800b60a:	e002      	b.n	800b612 <CircularQueue_Remove+0x128>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	68db      	ldr	r3, [r3, #12]
 800b610:	3301      	adds	r3, #1
 800b612:	440b      	add	r3, r1
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	b29b      	uxth	r3, r3
 800b618:	021b      	lsls	r3, r3, #8
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	4413      	add	r3, r2
 800b61e:	b29b      	uxth	r3, r3
 800b620:	e001      	b.n	800b626 <CircularQueue_Remove+0x13c>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	891b      	ldrh	r3, [r3, #8]
 800b626:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	68d9      	ldr	r1, [r3, #12]
 800b630:	7a7b      	ldrb	r3, [r7, #9]
 800b632:	4419      	add	r1, r3
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	4299      	cmp	r1, r3
 800b63a:	d307      	bcc.n	800b64c <CircularQueue_Remove+0x162>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	68d9      	ldr	r1, [r3, #12]
 800b640:	7a7b      	ldrb	r3, [r7, #9]
 800b642:	4419      	add	r1, r3
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	1acb      	subs	r3, r1, r3
 800b64a:	e003      	b.n	800b654 <CircularQueue_Remove+0x16a>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	68d9      	ldr	r1, [r3, #12]
 800b650:	7a7b      	ldrb	r3, [r7, #9]
 800b652:	440b      	add	r3, r1
 800b654:	4413      	add	r3, r2
 800b656:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	695b      	ldr	r3, [r3, #20]
 800b65c:	8979      	ldrh	r1, [r7, #10]
 800b65e:	7a7a      	ldrb	r2, [r7, #9]
 800b660:	440a      	add	r2, r1
 800b662:	1a9a      	subs	r2, r3, r2
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	695b      	ldr	r3, [r3, #20]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d01b      	beq.n	800b6a8 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	68da      	ldr	r2, [r3, #12]
 800b674:	897b      	ldrh	r3, [r7, #10]
 800b676:	441a      	add	r2, r3
 800b678:	7a7b      	ldrb	r3, [r7, #9]
 800b67a:	441a      	add	r2, r3
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	429a      	cmp	r2, r3
 800b682:	d309      	bcc.n	800b698 <CircularQueue_Remove+0x1ae>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	68da      	ldr	r2, [r3, #12]
 800b688:	897b      	ldrh	r3, [r7, #10]
 800b68a:	441a      	add	r2, r3
 800b68c:	7a7b      	ldrb	r3, [r7, #9]
 800b68e:	441a      	add	r2, r3
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	1ad3      	subs	r3, r2, r3
 800b696:	e005      	b.n	800b6a4 <CircularQueue_Remove+0x1ba>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	68da      	ldr	r2, [r3, #12]
 800b69c:	897b      	ldrh	r3, [r7, #10]
 800b69e:	441a      	add	r2, r3
 800b6a0:	7a7b      	ldrb	r3, [r7, #9]
 800b6a2:	4413      	add	r3, r2
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	699b      	ldr	r3, [r3, #24]
 800b6ac:	1e5a      	subs	r2, r3, #1
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d002      	beq.n	800b6be <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	897a      	ldrh	r2, [r7, #10]
 800b6bc:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800b6be:	68fb      	ldr	r3, [r7, #12]
}
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	3714      	adds	r7, #20
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ca:	4770      	bx	lr

0800b6cc <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b087      	sub	sp, #28
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	891b      	ldrh	r3, [r3, #8]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d101      	bne.n	800b6ea <CircularQueue_Sense+0x1e>
 800b6e6:	2302      	movs	r3, #2
 800b6e8:	e000      	b.n	800b6ec <CircularQueue_Sense+0x20>
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	695b      	ldr	r3, [r3, #20]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	f000 8090 	beq.w	800b820 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	891b      	ldrh	r3, [r3, #8]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d121      	bne.n	800b752 <CircularQueue_Sense+0x86>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	4413      	add	r3, r2
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	b29a      	uxth	r2, r3
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6819      	ldr	r1, [r3, #0]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	68db      	ldr	r3, [r3, #12]
 800b724:	1c58      	adds	r0, r3, #1
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	4298      	cmp	r0, r3
 800b72c:	d306      	bcc.n	800b73c <CircularQueue_Sense+0x70>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	68d8      	ldr	r0, [r3, #12]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	1ac3      	subs	r3, r0, r3
 800b738:	3301      	adds	r3, #1
 800b73a:	e002      	b.n	800b742 <CircularQueue_Sense+0x76>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	68db      	ldr	r3, [r3, #12]
 800b740:	3301      	adds	r3, #1
 800b742:	440b      	add	r3, r1
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	b29b      	uxth	r3, r3
 800b748:	021b      	lsls	r3, r3, #8
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	4413      	add	r3, r2
 800b74e:	b29b      	uxth	r3, r3
 800b750:	e001      	b.n	800b756 <CircularQueue_Sense+0x8a>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	891b      	ldrh	r3, [r3, #8]
 800b756:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	7f1b      	ldrb	r3, [r3, #28]
 800b75c:	f003 0301 	and.w	r3, r3, #1
 800b760:	2b00      	cmp	r3, #0
 800b762:	d048      	beq.n	800b7f6 <CircularQueue_Sense+0x12a>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	7f1b      	ldrb	r3, [r3, #28]
 800b768:	f003 0302 	and.w	r3, r3, #2
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d142      	bne.n	800b7f6 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b770:	8a7b      	ldrh	r3, [r7, #18]
 800b772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b776:	4293      	cmp	r3, r2
 800b778:	d103      	bne.n	800b782 <CircularQueue_Sense+0xb6>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	891b      	ldrh	r3, [r3, #8]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d012      	beq.n	800b7a8 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	68da      	ldr	r2, [r3, #12]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d933      	bls.n	800b7f6 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	891b      	ldrh	r3, [r3, #8]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d02f      	beq.n	800b7f6 <CircularQueue_Sense+0x12a>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	685a      	ldr	r2, [r3, #4]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	1ad3      	subs	r3, r2, r3
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	8912      	ldrh	r2, [r2, #8]
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d226      	bcs.n	800b7f6 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	891b      	ldrh	r3, [r3, #8]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d11d      	bne.n	800b7f0 <CircularQueue_Sense+0x124>
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6819      	ldr	r1, [r3, #0]
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	1c58      	adds	r0, r3, #1
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	4298      	cmp	r0, r3
 800b7ce:	d305      	bcc.n	800b7dc <CircularQueue_Sense+0x110>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	68f8      	ldr	r0, [r7, #12]
 800b7d6:	1ac3      	subs	r3, r0, r3
 800b7d8:	3301      	adds	r3, #1
 800b7da:	e001      	b.n	800b7e0 <CircularQueue_Sense+0x114>
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	3301      	adds	r3, #1
 800b7e0:	440b      	add	r3, r1
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	021b      	lsls	r3, r3, #8
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	4413      	add	r3, r2
 800b7ec:	b29b      	uxth	r3, r3
 800b7ee:	e001      	b.n	800b7f4 <CircularQueue_Sense+0x128>
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	891b      	ldrh	r3, [r3, #8]
 800b7f4:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	7af9      	ldrb	r1, [r7, #11]
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	4419      	add	r1, r3
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	4299      	cmp	r1, r3
 800b806:	d306      	bcc.n	800b816 <CircularQueue_Sense+0x14a>
 800b808:	7af9      	ldrb	r1, [r7, #11]
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	4419      	add	r1, r3
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	685b      	ldr	r3, [r3, #4]
 800b812:	1acb      	subs	r3, r1, r3
 800b814:	e002      	b.n	800b81c <CircularQueue_Sense+0x150>
 800b816:	7af9      	ldrb	r1, [r7, #11]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	440b      	add	r3, r1
 800b81c:	4413      	add	r3, r2
 800b81e:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d002      	beq.n	800b82c <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	8a7a      	ldrh	r2, [r7, #18]
 800b82a:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800b82c:	697b      	ldr	r3, [r7, #20]
}
 800b82e:	4618      	mov	r0, r3
 800b830:	371c      	adds	r7, #28
 800b832:	46bd      	mov	sp, r7
 800b834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b838:	4770      	bx	lr
	...

0800b83c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800b83c:	b480      	push	{r7}
 800b83e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800b840:	4b03      	ldr	r3, [pc, #12]	; (800b850 <LL_FLASH_GetUDN+0x14>)
 800b842:	681b      	ldr	r3, [r3, #0]
}
 800b844:	4618      	mov	r0, r3
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr
 800b84e:	bf00      	nop
 800b850:	1fff7580 	.word	0x1fff7580

0800b854 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800b854:	b480      	push	{r7}
 800b856:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800b858:	4b03      	ldr	r3, [pc, #12]	; (800b868 <LL_FLASH_GetDeviceID+0x14>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	b2db      	uxtb	r3, r3
}
 800b85e:	4618      	mov	r0, r3
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr
 800b868:	1fff7584 	.word	0x1fff7584

0800b86c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800b86c:	b480      	push	{r7}
 800b86e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800b870:	4b03      	ldr	r3, [pc, #12]	; (800b880 <LL_FLASH_GetSTCompanyID+0x14>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	0a1b      	lsrs	r3, r3, #8
}
 800b876:	4618      	mov	r0, r3
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr
 800b880:	1fff7584 	.word	0x1fff7584

0800b884 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800b884:	b5b0      	push	{r4, r5, r7, lr}
 800b886:	b090      	sub	sp, #64	; 0x40
 800b888:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800b88a:	2392      	movs	r3, #146	; 0x92
 800b88c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800b890:	4b45      	ldr	r3, [pc, #276]	; (800b9a8 <APP_BLE_Init+0x124>)
 800b892:	1d3c      	adds	r4, r7, #4
 800b894:	461d      	mov	r5, r3
 800b896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b89a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b89c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b89e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b8a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b8a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b8a6:	c403      	stmia	r4!, {r0, r1}
 800b8a8:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800b8aa:	f000 fb37 	bl	800bf1c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800b8ae:	2101      	movs	r1, #1
 800b8b0:	2002      	movs	r0, #2
 800b8b2:	f001 fdbd 	bl	800d430 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800b8b6:	4a3d      	ldr	r2, [pc, #244]	; (800b9ac <APP_BLE_Init+0x128>)
 800b8b8:	2100      	movs	r1, #0
 800b8ba:	2002      	movs	r0, #2
 800b8bc:	f001 fee4 	bl	800d688 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800b8c0:	1d3b      	adds	r3, r7, #4
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7fe fbe6 	bl	800a094 <SHCI_C2_BLE_Init>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 800b8ce:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d012      	beq.n	800b8fc <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800b8d6:	4836      	ldr	r0, [pc, #216]	; (800b9b0 <APP_BLE_Init+0x12c>)
 800b8d8:	f7ff f9ea 	bl	800acb0 <DbgTraceGetFileName>
 800b8dc:	4601      	mov	r1, r0
 800b8de:	f240 1347 	movw	r3, #327	; 0x147
 800b8e2:	4a34      	ldr	r2, [pc, #208]	; (800b9b4 <APP_BLE_Init+0x130>)
 800b8e4:	4834      	ldr	r0, [pc, #208]	; (800b9b8 <APP_BLE_Init+0x134>)
 800b8e6:	f002 f8d3 	bl	800da90 <iprintf>
 800b8ea:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b8ee:	4619      	mov	r1, r3
 800b8f0:	4832      	ldr	r0, [pc, #200]	; (800b9bc <APP_BLE_Init+0x138>)
 800b8f2:	f002 f8cd 	bl	800da90 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800b8f6:	f7f7 fb15 	bl	8002f24 <Error_Handler>
 800b8fa:	e00c      	b.n	800b916 <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800b8fc:	482c      	ldr	r0, [pc, #176]	; (800b9b0 <APP_BLE_Init+0x12c>)
 800b8fe:	f7ff f9d7 	bl	800acb0 <DbgTraceGetFileName>
 800b902:	4601      	mov	r1, r0
 800b904:	f240 134d 	movw	r3, #333	; 0x14d
 800b908:	4a2a      	ldr	r2, [pc, #168]	; (800b9b4 <APP_BLE_Init+0x130>)
 800b90a:	482b      	ldr	r0, [pc, #172]	; (800b9b8 <APP_BLE_Init+0x134>)
 800b90c:	f002 f8c0 	bl	800da90 <iprintf>
 800b910:	482b      	ldr	r0, [pc, #172]	; (800b9c0 <APP_BLE_Init+0x13c>)
 800b912:	f002 f8bd 	bl	800da90 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800b916:	f000 fb17 	bl	800bf48 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800b91a:	f7fe fb15 	bl	8009f48 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800b91e:	4b29      	ldr	r3, [pc, #164]	; (800b9c4 <APP_BLE_Init+0x140>)
 800b920:	2200      	movs	r2, #0
 800b922:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800b926:	4b27      	ldr	r3, [pc, #156]	; (800b9c4 <APP_BLE_Init+0x140>)
 800b928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b92c:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800b92e:	4a26      	ldr	r2, [pc, #152]	; (800b9c8 <APP_BLE_Init+0x144>)
 800b930:	2100      	movs	r1, #0
 800b932:	2001      	movs	r0, #1
 800b934:	f001 fea8 	bl	800d688 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800b938:	2006      	movs	r0, #6
 800b93a:	f7fe f979 	bl	8009c30 <aci_hal_set_radio_activity_mask>
 800b93e:	4603      	mov	r3, r0
 800b940:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800b944:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d010      	beq.n	800b96e <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800b94c:	4818      	ldr	r0, [pc, #96]	; (800b9b0 <APP_BLE_Init+0x12c>)
 800b94e:	f7ff f9af 	bl	800acb0 <DbgTraceGetFileName>
 800b952:	4601      	mov	r1, r0
 800b954:	f240 1371 	movw	r3, #369	; 0x171
 800b958:	4a16      	ldr	r2, [pc, #88]	; (800b9b4 <APP_BLE_Init+0x130>)
 800b95a:	4817      	ldr	r0, [pc, #92]	; (800b9b8 <APP_BLE_Init+0x134>)
 800b95c:	f002 f898 	bl	800da90 <iprintf>
 800b960:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b964:	4619      	mov	r1, r3
 800b966:	4819      	ldr	r0, [pc, #100]	; (800b9cc <APP_BLE_Init+0x148>)
 800b968:	f002 f892 	bl	800da90 <iprintf>
 800b96c:	e00c      	b.n	800b988 <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800b96e:	4810      	ldr	r0, [pc, #64]	; (800b9b0 <APP_BLE_Init+0x12c>)
 800b970:	f7ff f99e 	bl	800acb0 <DbgTraceGetFileName>
 800b974:	4601      	mov	r1, r0
 800b976:	f240 1375 	movw	r3, #373	; 0x175
 800b97a:	4a0e      	ldr	r2, [pc, #56]	; (800b9b4 <APP_BLE_Init+0x130>)
 800b97c:	480e      	ldr	r0, [pc, #56]	; (800b9b8 <APP_BLE_Init+0x134>)
 800b97e:	f002 f887 	bl	800da90 <iprintf>
 800b982:	4813      	ldr	r0, [pc, #76]	; (800b9d0 <APP_BLE_Init+0x14c>)
 800b984:	f002 f884 	bl	800da90 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800b988:	f000 ffa4 	bl	800c8d4 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800b98c:	4b0d      	ldr	r3, [pc, #52]	; (800b9c4 <APP_BLE_Init+0x140>)
 800b98e:	2200      	movs	r2, #0
 800b990:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800b992:	4b0c      	ldr	r3, [pc, #48]	; (800b9c4 <APP_BLE_Init+0x140>)
 800b994:	2200      	movs	r2, #0
 800b996:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800b998:	2001      	movs	r0, #1
 800b99a:	f000 fd69 	bl	800c470 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800b99e:	bf00      	nop
}
 800b9a0:	3740      	adds	r7, #64	; 0x40
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bdb0      	pop	{r4, r5, r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	0800ee54 	.word	0x0800ee54
 800b9ac:	0800a2b1 	.word	0x0800a2b1
 800b9b0:	0800ed48 	.word	0x0800ed48
 800b9b4:	0801008c 	.word	0x0801008c
 800b9b8:	0800ed64 	.word	0x0800ed64
 800b9bc:	0800ed78 	.word	0x0800ed78
 800b9c0:	0800edb0 	.word	0x0800edb0
 800b9c4:	2000170c 	.word	0x2000170c
 800b9c8:	0800c5f5 	.word	0x0800c5f5
 800b9cc:	0800edd8 	.word	0x0800edd8
 800b9d0:	0800ee1c 	.word	0x0800ee1c

0800b9d4 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800b9d4:	b5b0      	push	{r4, r5, r7, lr}
 800b9d6:	b08e      	sub	sp, #56	; 0x38
 800b9d8:	af04      	add	r7, sp, #16
 800b9da:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800b9dc:	2392      	movs	r3, #146	; 0x92
 800b9de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800b9e8:	6a3b      	ldr	r3, [r7, #32]
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	2bff      	cmp	r3, #255	; 0xff
 800b9ee:	f000 811d 	beq.w	800bc2c <SVCCTL_App_Notification+0x258>
 800b9f2:	2bff      	cmp	r3, #255	; 0xff
 800b9f4:	f300 8269 	bgt.w	800beca <SVCCTL_App_Notification+0x4f6>
 800b9f8:	2b05      	cmp	r3, #5
 800b9fa:	d002      	beq.n	800ba02 <SVCCTL_App_Notification+0x2e>
 800b9fc:	2b3e      	cmp	r3, #62	; 0x3e
 800b9fe:	d042      	beq.n	800ba86 <SVCCTL_App_Notification+0xb2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800ba00:	e263      	b.n	800beca <SVCCTL_App_Notification+0x4f6>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800ba02:	6a3b      	ldr	r3, [r7, #32]
 800ba04:	3302      	adds	r3, #2
 800ba06:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ba0e:	b29a      	uxth	r2, r3
 800ba10:	4bb1      	ldr	r3, [pc, #708]	; (800bcd8 <SVCCTL_App_Notification+0x304>)
 800ba12:	8adb      	ldrh	r3, [r3, #22]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d128      	bne.n	800ba6a <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800ba18:	4baf      	ldr	r3, [pc, #700]	; (800bcd8 <SVCCTL_App_Notification+0x304>)
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ba1e:	4bae      	ldr	r3, [pc, #696]	; (800bcd8 <SVCCTL_App_Notification+0x304>)
 800ba20:	2200      	movs	r2, #0
 800ba22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800ba26:	48ad      	ldr	r0, [pc, #692]	; (800bcdc <SVCCTL_App_Notification+0x308>)
 800ba28:	f7ff f942 	bl	800acb0 <DbgTraceGetFileName>
 800ba2c:	4601      	mov	r1, r0
 800ba2e:	f240 13b9 	movw	r3, #441	; 0x1b9
 800ba32:	4aab      	ldr	r2, [pc, #684]	; (800bce0 <SVCCTL_App_Notification+0x30c>)
 800ba34:	48ab      	ldr	r0, [pc, #684]	; (800bce4 <SVCCTL_App_Notification+0x310>)
 800ba36:	f002 f82b 	bl	800da90 <iprintf>
 800ba3a:	48ab      	ldr	r0, [pc, #684]	; (800bce8 <SVCCTL_App_Notification+0x314>)
 800ba3c:	f002 f896 	bl	800db6c <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800ba40:	48a6      	ldr	r0, [pc, #664]	; (800bcdc <SVCCTL_App_Notification+0x308>)
 800ba42:	f7ff f935 	bl	800acb0 <DbgTraceGetFileName>
 800ba46:	4601      	mov	r1, r0
 800ba48:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
 800ba4c:	4aa4      	ldr	r2, [pc, #656]	; (800bce0 <SVCCTL_App_Notification+0x30c>)
 800ba4e:	48a5      	ldr	r0, [pc, #660]	; (800bce4 <SVCCTL_App_Notification+0x310>)
 800ba50:	f002 f81e 	bl	800da90 <iprintf>
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	78db      	ldrb	r3, [r3, #3]
 800ba62:	461a      	mov	r2, r3
 800ba64:	48a1      	ldr	r0, [pc, #644]	; (800bcec <SVCCTL_App_Notification+0x318>)
 800ba66:	f002 f813 	bl	800da90 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800ba6a:	2001      	movs	r0, #1
 800ba6c:	f000 fd00 	bl	800c470 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800ba70:	4b9f      	ldr	r3, [pc, #636]	; (800bcf0 <SVCCTL_App_Notification+0x31c>)
 800ba72:	2201      	movs	r2, #1
 800ba74:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800ba76:	4b98      	ldr	r3, [pc, #608]	; (800bcd8 <SVCCTL_App_Notification+0x304>)
 800ba78:	8ada      	ldrh	r2, [r3, #22]
 800ba7a:	4b9d      	ldr	r3, [pc, #628]	; (800bcf0 <SVCCTL_App_Notification+0x31c>)
 800ba7c:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800ba7e:	489c      	ldr	r0, [pc, #624]	; (800bcf0 <SVCCTL_App_Notification+0x31c>)
 800ba80:	f000 ff14 	bl	800c8ac <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800ba84:	e224      	b.n	800bed0 <SVCCTL_App_Notification+0x4fc>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800ba86:	6a3b      	ldr	r3, [r7, #32]
 800ba88:	3302      	adds	r3, #2
 800ba8a:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d042      	beq.n	800bb1a <SVCCTL_App_Notification+0x146>
 800ba94:	2b03      	cmp	r3, #3
 800ba96:	f040 80c7 	bne.w	800bc28 <SVCCTL_App_Notification+0x254>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800baa0:	488e      	ldr	r0, [pc, #568]	; (800bcdc <SVCCTL_App_Notification+0x308>)
 800baa2:	f7ff f905 	bl	800acb0 <DbgTraceGetFileName>
 800baa6:	4601      	mov	r1, r0
 800baa8:	f240 13e1 	movw	r3, #481	; 0x1e1
 800baac:	4a8c      	ldr	r2, [pc, #560]	; (800bce0 <SVCCTL_App_Notification+0x30c>)
 800baae:	488d      	ldr	r0, [pc, #564]	; (800bce4 <SVCCTL_App_Notification+0x310>)
 800bab0:	f001 ffee 	bl	800da90 <iprintf>
 800bab4:	488f      	ldr	r0, [pc, #572]	; (800bcf4 <SVCCTL_App_Notification+0x320>)
 800bab6:	f002 f859 	bl	800db6c <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800baba:	4888      	ldr	r0, [pc, #544]	; (800bcdc <SVCCTL_App_Notification+0x308>)
 800babc:	f7ff f8f8 	bl	800acb0 <DbgTraceGetFileName>
 800bac0:	4601      	mov	r1, r0
 800bac2:	f44f 73f1 	mov.w	r3, #482	; 0x1e2
 800bac6:	4a86      	ldr	r2, [pc, #536]	; (800bce0 <SVCCTL_App_Notification+0x30c>)
 800bac8:	4886      	ldr	r0, [pc, #536]	; (800bce4 <SVCCTL_App_Notification+0x310>)
 800baca:	f001 ffe1 	bl	800da90 <iprintf>
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7f4 fcfc 	bl	80004d4 <__aeabi_i2d>
 800badc:	f04f 0200 	mov.w	r2, #0
 800bae0:	4b85      	ldr	r3, [pc, #532]	; (800bcf8 <SVCCTL_App_Notification+0x324>)
 800bae2:	f7f4 fd61 	bl	80005a8 <__aeabi_dmul>
 800bae6:	4602      	mov	r2, r0
 800bae8:	460b      	mov	r3, r1
 800baea:	4610      	mov	r0, r2
 800baec:	4619      	mov	r1, r3
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800baf4:	b29b      	uxth	r3, r3
 800baf6:	461c      	mov	r4, r3
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800bafe:	b29b      	uxth	r3, r3
 800bb00:	461a      	mov	r2, r3
 800bb02:	4613      	mov	r3, r2
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	4413      	add	r3, r2
 800bb08:	005b      	lsls	r3, r3, #1
 800bb0a:	9301      	str	r3, [sp, #4]
 800bb0c:	9400      	str	r4, [sp, #0]
 800bb0e:	4602      	mov	r2, r0
 800bb10:	460b      	mov	r3, r1
 800bb12:	487a      	ldr	r0, [pc, #488]	; (800bcfc <SVCCTL_App_Notification+0x328>)
 800bb14:	f001 ffbc 	bl	800da90 <iprintf>
          break;
 800bb18:	e087      	b.n	800bc2a <SVCCTL_App_Notification+0x256>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	3301      	adds	r3, #1
 800bb1e:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800bb20:	486e      	ldr	r0, [pc, #440]	; (800bcdc <SVCCTL_App_Notification+0x308>)
 800bb22:	f7ff f8c5 	bl	800acb0 <DbgTraceGetFileName>
 800bb26:	4601      	mov	r1, r0
 800bb28:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800bb2c:	4a6c      	ldr	r2, [pc, #432]	; (800bce0 <SVCCTL_App_Notification+0x30c>)
 800bb2e:	486d      	ldr	r0, [pc, #436]	; (800bce4 <SVCCTL_App_Notification+0x310>)
 800bb30:	f001 ffae 	bl	800da90 <iprintf>
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bb3a:	b29b      	uxth	r3, r3
 800bb3c:	4619      	mov	r1, r3
 800bb3e:	4870      	ldr	r0, [pc, #448]	; (800bd00 <SVCCTL_App_Notification+0x32c>)
 800bb40:	f001 ffa6 	bl	800da90 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800bb44:	4865      	ldr	r0, [pc, #404]	; (800bcdc <SVCCTL_App_Notification+0x308>)
 800bb46:	f7ff f8b3 	bl	800acb0 <DbgTraceGetFileName>
 800bb4a:	4601      	mov	r1, r0
 800bb4c:	f240 13f5 	movw	r3, #501	; 0x1f5
 800bb50:	4a63      	ldr	r2, [pc, #396]	; (800bce0 <SVCCTL_App_Notification+0x30c>)
 800bb52:	4864      	ldr	r0, [pc, #400]	; (800bce4 <SVCCTL_App_Notification+0x310>)
 800bb54:	f001 ff9c 	bl	800da90 <iprintf>
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	7a9b      	ldrb	r3, [r3, #10]
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	7a5b      	ldrb	r3, [r3, #9]
 800bb62:	461c      	mov	r4, r3
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	7a1b      	ldrb	r3, [r3, #8]
 800bb68:	461d      	mov	r5, r3
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	79db      	ldrb	r3, [r3, #7]
 800bb6e:	461a      	mov	r2, r3
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	799b      	ldrb	r3, [r3, #6]
 800bb74:	4619      	mov	r1, r3
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	795b      	ldrb	r3, [r3, #5]
 800bb7a:	9302      	str	r3, [sp, #8]
 800bb7c:	9101      	str	r1, [sp, #4]
 800bb7e:	9200      	str	r2, [sp, #0]
 800bb80:	462b      	mov	r3, r5
 800bb82:	4622      	mov	r2, r4
 800bb84:	4601      	mov	r1, r0
 800bb86:	485f      	ldr	r0, [pc, #380]	; (800bd04 <SVCCTL_App_Notification+0x330>)
 800bb88:	f001 ff82 	bl	800da90 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800bb8c:	4853      	ldr	r0, [pc, #332]	; (800bcdc <SVCCTL_App_Notification+0x308>)
 800bb8e:	f7ff f88f 	bl	800acb0 <DbgTraceGetFileName>
 800bb92:	4601      	mov	r1, r0
 800bb94:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
 800bb98:	4a51      	ldr	r2, [pc, #324]	; (800bce0 <SVCCTL_App_Notification+0x30c>)
 800bb9a:	4852      	ldr	r0, [pc, #328]	; (800bce4 <SVCCTL_App_Notification+0x310>)
 800bb9c:	f001 ff78 	bl	800da90 <iprintf>
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f7f4 fc93 	bl	80004d4 <__aeabi_i2d>
 800bbae:	f04f 0200 	mov.w	r2, #0
 800bbb2:	4b51      	ldr	r3, [pc, #324]	; (800bcf8 <SVCCTL_App_Notification+0x324>)
 800bbb4:	f7f4 fcf8 	bl	80005a8 <__aeabi_dmul>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	460b      	mov	r3, r1
 800bbbc:	4610      	mov	r0, r2
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	461c      	mov	r4, r3
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	4613      	mov	r3, r2
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	4413      	add	r3, r2
 800bbda:	005b      	lsls	r3, r3, #1
 800bbdc:	9301      	str	r3, [sp, #4]
 800bbde:	9400      	str	r4, [sp, #0]
 800bbe0:	4602      	mov	r2, r0
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	4845      	ldr	r0, [pc, #276]	; (800bcfc <SVCCTL_App_Notification+0x328>)
 800bbe6:	f001 ff53 	bl	800da90 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800bbea:	4b3b      	ldr	r3, [pc, #236]	; (800bcd8 <SVCCTL_App_Notification+0x304>)
 800bbec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bbf0:	2b04      	cmp	r3, #4
 800bbf2:	d104      	bne.n	800bbfe <SVCCTL_App_Notification+0x22a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800bbf4:	4b38      	ldr	r3, [pc, #224]	; (800bcd8 <SVCCTL_App_Notification+0x304>)
 800bbf6:	2206      	movs	r2, #6
 800bbf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800bbfc:	e003      	b.n	800bc06 <SVCCTL_App_Notification+0x232>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800bbfe:	4b36      	ldr	r3, [pc, #216]	; (800bcd8 <SVCCTL_App_Notification+0x304>)
 800bc00:	2205      	movs	r2, #5
 800bc02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bc0c:	b29a      	uxth	r2, r3
 800bc0e:	4b32      	ldr	r3, [pc, #200]	; (800bcd8 <SVCCTL_App_Notification+0x304>)
 800bc10:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800bc12:	4b37      	ldr	r3, [pc, #220]	; (800bcf0 <SVCCTL_App_Notification+0x31c>)
 800bc14:	2200      	movs	r2, #0
 800bc16:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800bc18:	4b2f      	ldr	r3, [pc, #188]	; (800bcd8 <SVCCTL_App_Notification+0x304>)
 800bc1a:	8ada      	ldrh	r2, [r3, #22]
 800bc1c:	4b34      	ldr	r3, [pc, #208]	; (800bcf0 <SVCCTL_App_Notification+0x31c>)
 800bc1e:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800bc20:	4833      	ldr	r0, [pc, #204]	; (800bcf0 <SVCCTL_App_Notification+0x31c>)
 800bc22:	f000 fe43 	bl	800c8ac <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800bc26:	e000      	b.n	800bc2a <SVCCTL_App_Notification+0x256>
          break;
 800bc28:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800bc2a:	e151      	b.n	800bed0 <SVCCTL_App_Notification+0x4fc>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800bc2c:	6a3b      	ldr	r3, [r7, #32]
 800bc2e:	3302      	adds	r3, #2
 800bc30:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800bc32:	69fb      	ldr	r3, [r7, #28]
 800bc34:	881b      	ldrh	r3, [r3, #0]
 800bc36:	b29b      	uxth	r3, r3
 800bc38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc3c:	f000 8141 	beq.w	800bec2 <SVCCTL_App_Notification+0x4ee>
 800bc40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc44:	f300 8143 	bgt.w	800bece <SVCCTL_App_Notification+0x4fa>
 800bc48:	2b04      	cmp	r3, #4
 800bc4a:	f000 813c 	beq.w	800bec6 <SVCCTL_App_Notification+0x4f2>
 800bc4e:	2b04      	cmp	r3, #4
 800bc50:	f2c0 813d 	blt.w	800bece <SVCCTL_App_Notification+0x4fa>
 800bc54:	f240 420a 	movw	r2, #1034	; 0x40a
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	f300 8138 	bgt.w	800bece <SVCCTL_App_Notification+0x4fa>
 800bc5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc62:	f340 8134 	ble.w	800bece <SVCCTL_App_Notification+0x4fa>
 800bc66:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 800bc6a:	2b09      	cmp	r3, #9
 800bc6c:	f200 812f 	bhi.w	800bece <SVCCTL_App_Notification+0x4fa>
 800bc70:	a201      	add	r2, pc, #4	; (adr r2, 800bc78 <SVCCTL_App_Notification+0x2a4>)
 800bc72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc76:	bf00      	nop
 800bc78:	0800be3d 	.word	0x0800be3d
 800bc7c:	0800bd11 	.word	0x0800bd11
 800bc80:	0800becf 	.word	0x0800becf
 800bc84:	0800becf 	.word	0x0800becf
 800bc88:	0800becf 	.word	0x0800becf
 800bc8c:	0800becf 	.word	0x0800becf
 800bc90:	0800bca1 	.word	0x0800bca1
 800bc94:	0800becf 	.word	0x0800becf
 800bc98:	0800bd83 	.word	0x0800bd83
 800bc9c:	0800bcbd 	.word	0x0800bcbd
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800bca0:	480e      	ldr	r0, [pc, #56]	; (800bcdc <SVCCTL_App_Notification+0x308>)
 800bca2:	f7ff f805 	bl	800acb0 <DbgTraceGetFileName>
 800bca6:	4601      	mov	r1, r0
 800bca8:	f240 233e 	movw	r3, #574	; 0x23e
 800bcac:	4a0c      	ldr	r2, [pc, #48]	; (800bce0 <SVCCTL_App_Notification+0x30c>)
 800bcae:	480d      	ldr	r0, [pc, #52]	; (800bce4 <SVCCTL_App_Notification+0x310>)
 800bcb0:	f001 feee 	bl	800da90 <iprintf>
 800bcb4:	4814      	ldr	r0, [pc, #80]	; (800bd08 <SVCCTL_App_Notification+0x334>)
 800bcb6:	f001 feeb 	bl	800da90 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800bcba:	e105      	b.n	800bec8 <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800bcbc:	4807      	ldr	r0, [pc, #28]	; (800bcdc <SVCCTL_App_Notification+0x308>)
 800bcbe:	f7fe fff7 	bl	800acb0 <DbgTraceGetFileName>
 800bcc2:	4601      	mov	r1, r0
 800bcc4:	f240 234e 	movw	r3, #590	; 0x24e
 800bcc8:	4a05      	ldr	r2, [pc, #20]	; (800bce0 <SVCCTL_App_Notification+0x30c>)
 800bcca:	4806      	ldr	r0, [pc, #24]	; (800bce4 <SVCCTL_App_Notification+0x310>)
 800bccc:	f001 fee0 	bl	800da90 <iprintf>
 800bcd0:	480e      	ldr	r0, [pc, #56]	; (800bd0c <SVCCTL_App_Notification+0x338>)
 800bcd2:	f001 ff4b 	bl	800db6c <puts>
          break;
 800bcd6:	e0f7      	b.n	800bec8 <SVCCTL_App_Notification+0x4f4>
 800bcd8:	2000170c 	.word	0x2000170c
 800bcdc:	0800ed48 	.word	0x0800ed48
 800bce0:	0801009c 	.word	0x0801009c
 800bce4:	0800ed64 	.word	0x0800ed64
 800bce8:	0800ee90 	.word	0x0800ee90
 800bcec:	0800eebc 	.word	0x0800eebc
 800bcf0:	20001790 	.word	0x20001790
 800bcf4:	0800eef8 	.word	0x0800eef8
 800bcf8:	3ff40000 	.word	0x3ff40000
 800bcfc:	0800ef2c 	.word	0x0800ef2c
 800bd00:	0800ef98 	.word	0x0800ef98
 800bd04:	0800efe0 	.word	0x0800efe0
 800bd08:	0800f030 	.word	0x0800f030
 800bd0c:	0800f058 	.word	0x0800f058
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800bd10:	4872      	ldr	r0, [pc, #456]	; (800bedc <SVCCTL_App_Notification+0x508>)
 800bd12:	f7fe ffcd 	bl	800acb0 <DbgTraceGetFileName>
 800bd16:	4601      	mov	r1, r0
 800bd18:	f240 2355 	movw	r3, #597	; 0x255
 800bd1c:	4a70      	ldr	r2, [pc, #448]	; (800bee0 <SVCCTL_App_Notification+0x50c>)
 800bd1e:	4871      	ldr	r0, [pc, #452]	; (800bee4 <SVCCTL_App_Notification+0x510>)
 800bd20:	f001 feb6 	bl	800da90 <iprintf>
 800bd24:	4870      	ldr	r0, [pc, #448]	; (800bee8 <SVCCTL_App_Notification+0x514>)
 800bd26:	f001 ff21 	bl	800db6c <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800bd2a:	4b70      	ldr	r3, [pc, #448]	; (800beec <SVCCTL_App_Notification+0x518>)
 800bd2c:	8adb      	ldrh	r3, [r3, #22]
 800bd2e:	4970      	ldr	r1, [pc, #448]	; (800bef0 <SVCCTL_App_Notification+0x51c>)
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7fd f9d4 	bl	80090de <aci_gap_pass_key_resp>
 800bd36:	4603      	mov	r3, r0
 800bd38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800bd3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d010      	beq.n	800bd66 <SVCCTL_App_Notification+0x392>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800bd44:	4865      	ldr	r0, [pc, #404]	; (800bedc <SVCCTL_App_Notification+0x508>)
 800bd46:	f7fe ffb3 	bl	800acb0 <DbgTraceGetFileName>
 800bd4a:	4601      	mov	r1, r0
 800bd4c:	f240 235a 	movw	r3, #602	; 0x25a
 800bd50:	4a63      	ldr	r2, [pc, #396]	; (800bee0 <SVCCTL_App_Notification+0x50c>)
 800bd52:	4864      	ldr	r0, [pc, #400]	; (800bee4 <SVCCTL_App_Notification+0x510>)
 800bd54:	f001 fe9c 	bl	800da90 <iprintf>
 800bd58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	4865      	ldr	r0, [pc, #404]	; (800bef4 <SVCCTL_App_Notification+0x520>)
 800bd60:	f001 fe96 	bl	800da90 <iprintf>
          break;
 800bd64:	e0b0      	b.n	800bec8 <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800bd66:	485d      	ldr	r0, [pc, #372]	; (800bedc <SVCCTL_App_Notification+0x508>)
 800bd68:	f7fe ffa2 	bl	800acb0 <DbgTraceGetFileName>
 800bd6c:	4601      	mov	r1, r0
 800bd6e:	f240 235e 	movw	r3, #606	; 0x25e
 800bd72:	4a5b      	ldr	r2, [pc, #364]	; (800bee0 <SVCCTL_App_Notification+0x50c>)
 800bd74:	485b      	ldr	r0, [pc, #364]	; (800bee4 <SVCCTL_App_Notification+0x510>)
 800bd76:	f001 fe8b 	bl	800da90 <iprintf>
 800bd7a:	485f      	ldr	r0, [pc, #380]	; (800bef8 <SVCCTL_App_Notification+0x524>)
 800bd7c:	f001 fef6 	bl	800db6c <puts>
          break;
 800bd80:	e0a2      	b.n	800bec8 <SVCCTL_App_Notification+0x4f4>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800bd82:	4856      	ldr	r0, [pc, #344]	; (800bedc <SVCCTL_App_Notification+0x508>)
 800bd84:	f7fe ff94 	bl	800acb0 <DbgTraceGetFileName>
 800bd88:	4601      	mov	r1, r0
 800bd8a:	f240 2366 	movw	r3, #614	; 0x266
 800bd8e:	4a54      	ldr	r2, [pc, #336]	; (800bee0 <SVCCTL_App_Notification+0x50c>)
 800bd90:	4854      	ldr	r0, [pc, #336]	; (800bee4 <SVCCTL_App_Notification+0x510>)
 800bd92:	f001 fe7d 	bl	800da90 <iprintf>
 800bd96:	4859      	ldr	r0, [pc, #356]	; (800befc <SVCCTL_App_Notification+0x528>)
 800bd98:	f001 fee8 	bl	800db6c <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800bd9c:	484f      	ldr	r0, [pc, #316]	; (800bedc <SVCCTL_App_Notification+0x508>)
 800bd9e:	f7fe ff87 	bl	800acb0 <DbgTraceGetFileName>
 800bda2:	4601      	mov	r1, r0
 800bda4:	f240 2367 	movw	r3, #615	; 0x267
 800bda8:	4a4d      	ldr	r2, [pc, #308]	; (800bee0 <SVCCTL_App_Notification+0x50c>)
 800bdaa:	484e      	ldr	r0, [pc, #312]	; (800bee4 <SVCCTL_App_Notification+0x510>)
 800bdac:	f001 fe70 	bl	800da90 <iprintf>
 800bdb0:	69fb      	ldr	r3, [r7, #28]
 800bdb2:	3302      	adds	r3, #2
 800bdb4:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800bdb8:	4619      	mov	r1, r3
 800bdba:	4851      	ldr	r0, [pc, #324]	; (800bf00 <SVCCTL_App_Notification+0x52c>)
 800bdbc:	f001 fe68 	bl	800da90 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800bdc0:	4846      	ldr	r0, [pc, #280]	; (800bedc <SVCCTL_App_Notification+0x508>)
 800bdc2:	f7fe ff75 	bl	800acb0 <DbgTraceGetFileName>
 800bdc6:	4601      	mov	r1, r0
 800bdc8:	f240 2369 	movw	r3, #617	; 0x269
 800bdcc:	4a44      	ldr	r2, [pc, #272]	; (800bee0 <SVCCTL_App_Notification+0x50c>)
 800bdce:	4845      	ldr	r0, [pc, #276]	; (800bee4 <SVCCTL_App_Notification+0x510>)
 800bdd0:	f001 fe5e 	bl	800da90 <iprintf>
 800bdd4:	69fb      	ldr	r3, [r7, #28]
 800bdd6:	3302      	adds	r3, #2
 800bdd8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800bddc:	4619      	mov	r1, r3
 800bdde:	4849      	ldr	r0, [pc, #292]	; (800bf04 <SVCCTL_App_Notification+0x530>)
 800bde0:	f001 fe56 	bl	800da90 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800bde4:	4b41      	ldr	r3, [pc, #260]	; (800beec <SVCCTL_App_Notification+0x518>)
 800bde6:	8adb      	ldrh	r3, [r3, #22]
 800bde8:	2101      	movs	r1, #1
 800bdea:	4618      	mov	r0, r3
 800bdec:	f7fd fb21 	bl	8009432 <aci_gap_numeric_comparison_value_confirm_yesno>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800bdf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d010      	beq.n	800be20 <SVCCTL_App_Notification+0x44c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800bdfe:	4837      	ldr	r0, [pc, #220]	; (800bedc <SVCCTL_App_Notification+0x508>)
 800be00:	f7fe ff56 	bl	800acb0 <DbgTraceGetFileName>
 800be04:	4601      	mov	r1, r0
 800be06:	f240 236e 	movw	r3, #622	; 0x26e
 800be0a:	4a35      	ldr	r2, [pc, #212]	; (800bee0 <SVCCTL_App_Notification+0x50c>)
 800be0c:	4835      	ldr	r0, [pc, #212]	; (800bee4 <SVCCTL_App_Notification+0x510>)
 800be0e:	f001 fe3f 	bl	800da90 <iprintf>
 800be12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800be16:	4619      	mov	r1, r3
 800be18:	483b      	ldr	r0, [pc, #236]	; (800bf08 <SVCCTL_App_Notification+0x534>)
 800be1a:	f001 fe39 	bl	800da90 <iprintf>
          break;
 800be1e:	e053      	b.n	800bec8 <SVCCTL_App_Notification+0x4f4>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800be20:	482e      	ldr	r0, [pc, #184]	; (800bedc <SVCCTL_App_Notification+0x508>)
 800be22:	f7fe ff45 	bl	800acb0 <DbgTraceGetFileName>
 800be26:	4601      	mov	r1, r0
 800be28:	f240 2372 	movw	r3, #626	; 0x272
 800be2c:	4a2c      	ldr	r2, [pc, #176]	; (800bee0 <SVCCTL_App_Notification+0x50c>)
 800be2e:	482d      	ldr	r0, [pc, #180]	; (800bee4 <SVCCTL_App_Notification+0x510>)
 800be30:	f001 fe2e 	bl	800da90 <iprintf>
 800be34:	4835      	ldr	r0, [pc, #212]	; (800bf0c <SVCCTL_App_Notification+0x538>)
 800be36:	f001 fe99 	bl	800db6c <puts>
          break;
 800be3a:	e045      	b.n	800bec8 <SVCCTL_App_Notification+0x4f4>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800be3c:	69fb      	ldr	r3, [r7, #28]
 800be3e:	3302      	adds	r3, #2
 800be40:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800be42:	4826      	ldr	r0, [pc, #152]	; (800bedc <SVCCTL_App_Notification+0x508>)
 800be44:	f7fe ff34 	bl	800acb0 <DbgTraceGetFileName>
 800be48:	4601      	mov	r1, r0
 800be4a:	f44f 731f 	mov.w	r3, #636	; 0x27c
 800be4e:	4a24      	ldr	r2, [pc, #144]	; (800bee0 <SVCCTL_App_Notification+0x50c>)
 800be50:	4824      	ldr	r0, [pc, #144]	; (800bee4 <SVCCTL_App_Notification+0x510>)
 800be52:	f001 fe1d 	bl	800da90 <iprintf>
 800be56:	482e      	ldr	r0, [pc, #184]	; (800bf10 <SVCCTL_App_Notification+0x53c>)
 800be58:	f001 fe88 	bl	800db6c <puts>
          if (p_pairing_complete->Status != 0)
 800be5c:	69bb      	ldr	r3, [r7, #24]
 800be5e:	789b      	ldrb	r3, [r3, #2]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d013      	beq.n	800be8c <SVCCTL_App_Notification+0x4b8>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800be64:	481d      	ldr	r0, [pc, #116]	; (800bedc <SVCCTL_App_Notification+0x508>)
 800be66:	f7fe ff23 	bl	800acb0 <DbgTraceGetFileName>
 800be6a:	4601      	mov	r1, r0
 800be6c:	f240 237f 	movw	r3, #639	; 0x27f
 800be70:	4a1b      	ldr	r2, [pc, #108]	; (800bee0 <SVCCTL_App_Notification+0x50c>)
 800be72:	481c      	ldr	r0, [pc, #112]	; (800bee4 <SVCCTL_App_Notification+0x510>)
 800be74:	f001 fe0c 	bl	800da90 <iprintf>
 800be78:	69bb      	ldr	r3, [r7, #24]
 800be7a:	789b      	ldrb	r3, [r3, #2]
 800be7c:	4619      	mov	r1, r3
 800be7e:	69bb      	ldr	r3, [r7, #24]
 800be80:	78db      	ldrb	r3, [r3, #3]
 800be82:	461a      	mov	r2, r3
 800be84:	4823      	ldr	r0, [pc, #140]	; (800bf14 <SVCCTL_App_Notification+0x540>)
 800be86:	f001 fe03 	bl	800da90 <iprintf>
 800be8a:	e00c      	b.n	800bea6 <SVCCTL_App_Notification+0x4d2>
            APP_DBG_MSG("     - Pairing Success\n");
 800be8c:	4813      	ldr	r0, [pc, #76]	; (800bedc <SVCCTL_App_Notification+0x508>)
 800be8e:	f7fe ff0f 	bl	800acb0 <DbgTraceGetFileName>
 800be92:	4601      	mov	r1, r0
 800be94:	f240 2383 	movw	r3, #643	; 0x283
 800be98:	4a11      	ldr	r2, [pc, #68]	; (800bee0 <SVCCTL_App_Notification+0x50c>)
 800be9a:	4812      	ldr	r0, [pc, #72]	; (800bee4 <SVCCTL_App_Notification+0x510>)
 800be9c:	f001 fdf8 	bl	800da90 <iprintf>
 800bea0:	481d      	ldr	r0, [pc, #116]	; (800bf18 <SVCCTL_App_Notification+0x544>)
 800bea2:	f001 fe63 	bl	800db6c <puts>
          APP_DBG_MSG("\n");
 800bea6:	480d      	ldr	r0, [pc, #52]	; (800bedc <SVCCTL_App_Notification+0x508>)
 800bea8:	f7fe ff02 	bl	800acb0 <DbgTraceGetFileName>
 800beac:	4601      	mov	r1, r0
 800beae:	f240 2385 	movw	r3, #645	; 0x285
 800beb2:	4a0b      	ldr	r2, [pc, #44]	; (800bee0 <SVCCTL_App_Notification+0x50c>)
 800beb4:	480b      	ldr	r0, [pc, #44]	; (800bee4 <SVCCTL_App_Notification+0x510>)
 800beb6:	f001 fdeb 	bl	800da90 <iprintf>
 800beba:	200a      	movs	r0, #10
 800bebc:	f001 fdfa 	bl	800dab4 <putchar>
          break;
 800bec0:	e002      	b.n	800bec8 <SVCCTL_App_Notification+0x4f4>
          break;
 800bec2:	bf00      	nop
 800bec4:	e003      	b.n	800bece <SVCCTL_App_Notification+0x4fa>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800bec6:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800bec8:	e001      	b.n	800bece <SVCCTL_App_Notification+0x4fa>
      break;
 800beca:	bf00      	nop
 800becc:	e000      	b.n	800bed0 <SVCCTL_App_Notification+0x4fc>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800bece:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800bed0:	2301      	movs	r3, #1
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3728      	adds	r7, #40	; 0x28
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bdb0      	pop	{r4, r5, r7, pc}
 800beda:	bf00      	nop
 800bedc:	0800ed48 	.word	0x0800ed48
 800bee0:	0801009c 	.word	0x0801009c
 800bee4:	0800ed64 	.word	0x0800ed64
 800bee8:	0800f088 	.word	0x0800f088
 800beec:	2000170c 	.word	0x2000170c
 800bef0:	0001b207 	.word	0x0001b207
 800bef4:	0800f0b0 	.word	0x0800f0b0
 800bef8:	0800f0e4 	.word	0x0800f0e4
 800befc:	0800f10c 	.word	0x0800f10c
 800bf00:	0800f140 	.word	0x0800f140
 800bf04:	0800f15c 	.word	0x0800f15c
 800bf08:	0800f174 	.word	0x0800f174
 800bf0c:	0800f1c4 	.word	0x0800f1c4
 800bf10:	0800f20c 	.word	0x0800f20c
 800bf14:	0800f238 	.word	0x0800f238
 800bf18:	0800f274 	.word	0x0800f274

0800bf1c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b082      	sub	sp, #8
 800bf20:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800bf22:	4b06      	ldr	r3, [pc, #24]	; (800bf3c <Ble_Tl_Init+0x20>)
 800bf24:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800bf26:	4b06      	ldr	r3, [pc, #24]	; (800bf40 <Ble_Tl_Init+0x24>)
 800bf28:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800bf2a:	463b      	mov	r3, r7
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	4805      	ldr	r0, [pc, #20]	; (800bf44 <Ble_Tl_Init+0x28>)
 800bf30:	f7fe f9a2 	bl	800a278 <hci_init>

  return;
 800bf34:	bf00      	nop
}
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	200300d8 	.word	0x200300d8
 800bf40:	0800c74d 	.word	0x0800c74d
 800bf44:	0800c715 	.word	0x0800c715

0800bf48 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800bf48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf4a:	b08d      	sub	sp, #52	; 0x34
 800bf4c:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800bf4e:	2300      	movs	r3, #0
 800bf50:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800bf52:	2392      	movs	r3, #146	; 0x92
 800bf54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800bf56:	48a3      	ldr	r0, [pc, #652]	; (800c1e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800bf58:	f7fe feaa 	bl	800acb0 <DbgTraceGetFileName>
 800bf5c:	4601      	mov	r1, r0
 800bf5e:	f240 23c5 	movw	r3, #709	; 0x2c5
 800bf62:	4aa1      	ldr	r2, [pc, #644]	; (800c1e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800bf64:	48a1      	ldr	r0, [pc, #644]	; (800c1ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800bf66:	f001 fd93 	bl	800da90 <iprintf>
 800bf6a:	48a1      	ldr	r0, [pc, #644]	; (800c1f0 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800bf6c:	f001 fdfe 	bl	800db6c <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800bf70:	f7fd feb2 	bl	8009cd8 <hci_reset>
 800bf74:	4603      	mov	r3, r0
 800bf76:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800bf78:	7dfb      	ldrb	r3, [r7, #23]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d00f      	beq.n	800bf9e <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800bf7e:	4899      	ldr	r0, [pc, #612]	; (800c1e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800bf80:	f7fe fe96 	bl	800acb0 <DbgTraceGetFileName>
 800bf84:	4601      	mov	r1, r0
 800bf86:	f240 23ce 	movw	r3, #718	; 0x2ce
 800bf8a:	4a97      	ldr	r2, [pc, #604]	; (800c1e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800bf8c:	4897      	ldr	r0, [pc, #604]	; (800c1ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800bf8e:	f001 fd7f 	bl	800da90 <iprintf>
 800bf92:	7dfb      	ldrb	r3, [r7, #23]
 800bf94:	4619      	mov	r1, r3
 800bf96:	4897      	ldr	r0, [pc, #604]	; (800c1f4 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800bf98:	f001 fd7a 	bl	800da90 <iprintf>
 800bf9c:	e00c      	b.n	800bfb8 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800bf9e:	4891      	ldr	r0, [pc, #580]	; (800c1e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800bfa0:	f7fe fe86 	bl	800acb0 <DbgTraceGetFileName>
 800bfa4:	4601      	mov	r1, r0
 800bfa6:	f240 23d2 	movw	r3, #722	; 0x2d2
 800bfaa:	4a8f      	ldr	r2, [pc, #572]	; (800c1e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800bfac:	488f      	ldr	r0, [pc, #572]	; (800c1ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800bfae:	f001 fd6f 	bl	800da90 <iprintf>
 800bfb2:	4891      	ldr	r0, [pc, #580]	; (800c1f8 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800bfb4:	f001 fdda 	bl	800db6c <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800bfb8:	f000 fad8 	bl	800c56c <BleGetBdAddress>
 800bfbc:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800bfbe:	693a      	ldr	r2, [r7, #16]
 800bfc0:	2106      	movs	r1, #6
 800bfc2:	2000      	movs	r0, #0
 800bfc4:	f7fd fd48 	bl	8009a58 <aci_hal_write_config_data>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800bfcc:	7dfb      	ldrb	r3, [r7, #23]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d00f      	beq.n	800bff2 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800bfd2:	4884      	ldr	r0, [pc, #528]	; (800c1e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800bfd4:	f7fe fe6c 	bl	800acb0 <DbgTraceGetFileName>
 800bfd8:	4601      	mov	r1, r0
 800bfda:	f44f 7337 	mov.w	r3, #732	; 0x2dc
 800bfde:	4a82      	ldr	r2, [pc, #520]	; (800c1e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800bfe0:	4882      	ldr	r0, [pc, #520]	; (800c1ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800bfe2:	f001 fd55 	bl	800da90 <iprintf>
 800bfe6:	7dfb      	ldrb	r3, [r7, #23]
 800bfe8:	4619      	mov	r1, r3
 800bfea:	4884      	ldr	r0, [pc, #528]	; (800c1fc <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800bfec:	f001 fd50 	bl	800da90 <iprintf>
 800bff0:	e035      	b.n	800c05e <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800bff2:	487c      	ldr	r0, [pc, #496]	; (800c1e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800bff4:	f7fe fe5c 	bl	800acb0 <DbgTraceGetFileName>
 800bff8:	4601      	mov	r1, r0
 800bffa:	f44f 7338 	mov.w	r3, #736	; 0x2e0
 800bffe:	4a7a      	ldr	r2, [pc, #488]	; (800c1e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c000:	487a      	ldr	r0, [pc, #488]	; (800c1ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c002:	f001 fd45 	bl	800da90 <iprintf>
 800c006:	487e      	ldr	r0, [pc, #504]	; (800c200 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800c008:	f001 fdb0 	bl	800db6c <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800c00c:	4875      	ldr	r0, [pc, #468]	; (800c1e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c00e:	f7fe fe4f 	bl	800acb0 <DbgTraceGetFileName>
 800c012:	4601      	mov	r1, r0
 800c014:	f240 23e1 	movw	r3, #737	; 0x2e1
 800c018:	4a73      	ldr	r2, [pc, #460]	; (800c1e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c01a:	4874      	ldr	r0, [pc, #464]	; (800c1ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c01c:	f001 fd38 	bl	800da90 <iprintf>
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	3305      	adds	r3, #5
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	4618      	mov	r0, r3
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	3304      	adds	r3, #4
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	461c      	mov	r4, r3
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	3303      	adds	r3, #3
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	461d      	mov	r5, r3
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	3302      	adds	r3, #2
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	461a      	mov	r2, r3
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	3301      	adds	r3, #1
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	4619      	mov	r1, r3
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	781b      	ldrb	r3, [r3, #0]
 800c04c:	9302      	str	r3, [sp, #8]
 800c04e:	9101      	str	r1, [sp, #4]
 800c050:	9200      	str	r2, [sp, #0]
 800c052:	462b      	mov	r3, r5
 800c054:	4622      	mov	r2, r4
 800c056:	4601      	mov	r1, r0
 800c058:	486a      	ldr	r0, [pc, #424]	; (800c204 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800c05a:	f001 fd19 	bl	800da90 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800c05e:	4a6a      	ldr	r2, [pc, #424]	; (800c208 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800c060:	2110      	movs	r1, #16
 800c062:	2018      	movs	r0, #24
 800c064:	f7fd fcf8 	bl	8009a58 <aci_hal_write_config_data>
 800c068:	4603      	mov	r3, r0
 800c06a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c06c:	7dfb      	ldrb	r3, [r7, #23]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d00f      	beq.n	800c092 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800c072:	485c      	ldr	r0, [pc, #368]	; (800c1e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c074:	f7fe fe1c 	bl	800acb0 <DbgTraceGetFileName>
 800c078:	4601      	mov	r1, r0
 800c07a:	f240 332b 	movw	r3, #811	; 0x32b
 800c07e:	4a5a      	ldr	r2, [pc, #360]	; (800c1e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c080:	485a      	ldr	r0, [pc, #360]	; (800c1ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c082:	f001 fd05 	bl	800da90 <iprintf>
 800c086:	7dfb      	ldrb	r3, [r7, #23]
 800c088:	4619      	mov	r1, r3
 800c08a:	4860      	ldr	r0, [pc, #384]	; (800c20c <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800c08c:	f001 fd00 	bl	800da90 <iprintf>
 800c090:	e00c      	b.n	800c0ac <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800c092:	4854      	ldr	r0, [pc, #336]	; (800c1e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c094:	f7fe fe0c 	bl	800acb0 <DbgTraceGetFileName>
 800c098:	4601      	mov	r1, r0
 800c09a:	f240 332f 	movw	r3, #815	; 0x32f
 800c09e:	4a52      	ldr	r2, [pc, #328]	; (800c1e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c0a0:	4852      	ldr	r0, [pc, #328]	; (800c1ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c0a2:	f001 fcf5 	bl	800da90 <iprintf>
 800c0a6:	485a      	ldr	r0, [pc, #360]	; (800c210 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800c0a8:	f001 fd60 	bl	800db6c <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800c0ac:	4a59      	ldr	r2, [pc, #356]	; (800c214 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800c0ae:	2110      	movs	r1, #16
 800c0b0:	2008      	movs	r0, #8
 800c0b2:	f7fd fcd1 	bl	8009a58 <aci_hal_write_config_data>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c0ba:	7dfb      	ldrb	r3, [r7, #23]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d00f      	beq.n	800c0e0 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800c0c0:	4848      	ldr	r0, [pc, #288]	; (800c1e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c0c2:	f7fe fdf5 	bl	800acb0 <DbgTraceGetFileName>
 800c0c6:	4601      	mov	r1, r0
 800c0c8:	f44f 734e 	mov.w	r3, #824	; 0x338
 800c0cc:	4a46      	ldr	r2, [pc, #280]	; (800c1e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c0ce:	4847      	ldr	r0, [pc, #284]	; (800c1ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c0d0:	f001 fcde 	bl	800da90 <iprintf>
 800c0d4:	7dfb      	ldrb	r3, [r7, #23]
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	484f      	ldr	r0, [pc, #316]	; (800c218 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800c0da:	f001 fcd9 	bl	800da90 <iprintf>
 800c0de:	e00c      	b.n	800c0fa <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800c0e0:	4840      	ldr	r0, [pc, #256]	; (800c1e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c0e2:	f7fe fde5 	bl	800acb0 <DbgTraceGetFileName>
 800c0e6:	4601      	mov	r1, r0
 800c0e8:	f44f 734f 	mov.w	r3, #828	; 0x33c
 800c0ec:	4a3e      	ldr	r2, [pc, #248]	; (800c1e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c0ee:	483f      	ldr	r0, [pc, #252]	; (800c1ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c0f0:	f001 fcce 	bl	800da90 <iprintf>
 800c0f4:	4849      	ldr	r0, [pc, #292]	; (800c21c <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800c0f6:	f001 fd39 	bl	800db6c <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800c0fa:	2118      	movs	r1, #24
 800c0fc:	2001      	movs	r0, #1
 800c0fe:	f7fd fd30 	bl	8009b62 <aci_hal_set_tx_power_level>
 800c102:	4603      	mov	r3, r0
 800c104:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c106:	7dfb      	ldrb	r3, [r7, #23]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d00f      	beq.n	800c12c <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800c10c:	4835      	ldr	r0, [pc, #212]	; (800c1e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c10e:	f7fe fdcf 	bl	800acb0 <DbgTraceGetFileName>
 800c112:	4601      	mov	r1, r0
 800c114:	f240 3345 	movw	r3, #837	; 0x345
 800c118:	4a33      	ldr	r2, [pc, #204]	; (800c1e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c11a:	4834      	ldr	r0, [pc, #208]	; (800c1ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c11c:	f001 fcb8 	bl	800da90 <iprintf>
 800c120:	7dfb      	ldrb	r3, [r7, #23]
 800c122:	4619      	mov	r1, r3
 800c124:	483e      	ldr	r0, [pc, #248]	; (800c220 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800c126:	f001 fcb3 	bl	800da90 <iprintf>
 800c12a:	e00c      	b.n	800c146 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800c12c:	482d      	ldr	r0, [pc, #180]	; (800c1e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c12e:	f7fe fdbf 	bl	800acb0 <DbgTraceGetFileName>
 800c132:	4601      	mov	r1, r0
 800c134:	f240 3349 	movw	r3, #841	; 0x349
 800c138:	4a2b      	ldr	r2, [pc, #172]	; (800c1e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c13a:	482c      	ldr	r0, [pc, #176]	; (800c1ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c13c:	f001 fca8 	bl	800da90 <iprintf>
 800c140:	4838      	ldr	r0, [pc, #224]	; (800c224 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800c142:	f001 fd13 	bl	800db6c <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800c146:	f7fd f9db 	bl	8009500 <aci_gatt_init>
 800c14a:	4603      	mov	r3, r0
 800c14c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c14e:	7dfb      	ldrb	r3, [r7, #23]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00f      	beq.n	800c174 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800c154:	4823      	ldr	r0, [pc, #140]	; (800c1e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c156:	f7fe fdab 	bl	800acb0 <DbgTraceGetFileName>
 800c15a:	4601      	mov	r1, r0
 800c15c:	f240 3352 	movw	r3, #850	; 0x352
 800c160:	4a21      	ldr	r2, [pc, #132]	; (800c1e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c162:	4822      	ldr	r0, [pc, #136]	; (800c1ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c164:	f001 fc94 	bl	800da90 <iprintf>
 800c168:	7dfb      	ldrb	r3, [r7, #23]
 800c16a:	4619      	mov	r1, r3
 800c16c:	482e      	ldr	r0, [pc, #184]	; (800c228 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800c16e:	f001 fc8f 	bl	800da90 <iprintf>
 800c172:	e00c      	b.n	800c18e <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800c174:	481b      	ldr	r0, [pc, #108]	; (800c1e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c176:	f7fe fd9b 	bl	800acb0 <DbgTraceGetFileName>
 800c17a:	4601      	mov	r1, r0
 800c17c:	f240 3356 	movw	r3, #854	; 0x356
 800c180:	4a19      	ldr	r2, [pc, #100]	; (800c1e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c182:	481a      	ldr	r0, [pc, #104]	; (800c1ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c184:	f001 fc84 	bl	800da90 <iprintf>
 800c188:	4828      	ldr	r0, [pc, #160]	; (800c22c <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800c18a:	f001 fcef 	bl	800db6c <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800c18e:	2300      	movs	r3, #0
 800c190:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800c192:	7bfb      	ldrb	r3, [r7, #15]
 800c194:	f043 0301 	orr.w	r3, r3, #1
 800c198:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800c19a:	7bfb      	ldrb	r3, [r7, #15]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d069      	beq.n	800c274 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800c1a0:	4b23      	ldr	r3, [pc, #140]	; (800c230 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800c1a2:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800c1a4:	1dba      	adds	r2, r7, #6
 800c1a6:	7bf8      	ldrb	r0, [r7, #15]
 800c1a8:	1cbb      	adds	r3, r7, #2
 800c1aa:	9301      	str	r3, [sp, #4]
 800c1ac:	1d3b      	adds	r3, r7, #4
 800c1ae:	9300      	str	r3, [sp, #0]
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	2209      	movs	r2, #9
 800c1b4:	2100      	movs	r1, #0
 800c1b6:	f7fc fff9 	bl	80091ac <aci_gap_init>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800c1be:	7dfb      	ldrb	r3, [r7, #23]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d039      	beq.n	800c238 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800c1c4:	4807      	ldr	r0, [pc, #28]	; (800c1e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800c1c6:	f7fe fd73 	bl	800acb0 <DbgTraceGetFileName>
 800c1ca:	4601      	mov	r1, r0
 800c1cc:	f240 3376 	movw	r3, #886	; 0x376
 800c1d0:	4a05      	ldr	r2, [pc, #20]	; (800c1e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800c1d2:	4806      	ldr	r0, [pc, #24]	; (800c1ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800c1d4:	f001 fc5c 	bl	800da90 <iprintf>
 800c1d8:	7dfb      	ldrb	r3, [r7, #23]
 800c1da:	4619      	mov	r1, r3
 800c1dc:	4815      	ldr	r0, [pc, #84]	; (800c234 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800c1de:	f001 fc57 	bl	800da90 <iprintf>
 800c1e2:	e036      	b.n	800c252 <Ble_Hci_Gap_Gatt_Init+0x30a>
 800c1e4:	0800ed48 	.word	0x0800ed48
 800c1e8:	080100b4 	.word	0x080100b4
 800c1ec:	0800ed64 	.word	0x0800ed64
 800c1f0:	0800f28c 	.word	0x0800f28c
 800c1f4:	0800f2b8 	.word	0x0800f2b8
 800c1f8:	0800f2e8 	.word	0x0800f2e8
 800c1fc:	0800f308 	.word	0x0800f308
 800c200:	0800f364 	.word	0x0800f364
 800c204:	0800f3b0 	.word	0x0800f3b0
 800c208:	0801006c 	.word	0x0801006c
 800c20c:	0800f3ec 	.word	0x0800f3ec
 800c210:	0800f444 	.word	0x0800f444
 800c214:	0801007c 	.word	0x0801007c
 800c218:	0800f48c 	.word	0x0800f48c
 800c21c:	0800f4e4 	.word	0x0800f4e4
 800c220:	0800f52c 	.word	0x0800f52c
 800c224:	0800f56c 	.word	0x0800f56c
 800c228:	0800f59c 	.word	0x0800f59c
 800c22c:	0800f5d0 	.word	0x0800f5d0
 800c230:	0800f5f4 	.word	0x0800f5f4
 800c234:	0800f600 	.word	0x0800f600
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800c238:	487e      	ldr	r0, [pc, #504]	; (800c434 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c23a:	f7fe fd39 	bl	800acb0 <DbgTraceGetFileName>
 800c23e:	4601      	mov	r1, r0
 800c240:	f240 337a 	movw	r3, #890	; 0x37a
 800c244:	4a7c      	ldr	r2, [pc, #496]	; (800c438 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c246:	487d      	ldr	r0, [pc, #500]	; (800c43c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c248:	f001 fc22 	bl	800da90 <iprintf>
 800c24c:	487c      	ldr	r0, [pc, #496]	; (800c440 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 800c24e:	f001 fc8d 	bl	800db6c <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800c252:	88fc      	ldrh	r4, [r7, #6]
 800c254:	88bd      	ldrh	r5, [r7, #4]
 800c256:	68b8      	ldr	r0, [r7, #8]
 800c258:	f7f3 ff92 	bl	8000180 <strlen>
 800c25c:	4603      	mov	r3, r0
 800c25e:	b2da      	uxtb	r2, r3
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	9300      	str	r3, [sp, #0]
 800c264:	4613      	mov	r3, r2
 800c266:	2200      	movs	r2, #0
 800c268:	4629      	mov	r1, r5
 800c26a:	4620      	mov	r0, r4
 800c26c:	f7fd fb4b 	bl	8009906 <aci_gatt_update_char_value>
 800c270:	4603      	mov	r3, r0
 800c272:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800c274:	88f8      	ldrh	r0, [r7, #6]
 800c276:	8879      	ldrh	r1, [r7, #2]
 800c278:	463b      	mov	r3, r7
 800c27a:	9300      	str	r3, [sp, #0]
 800c27c:	2302      	movs	r3, #2
 800c27e:	2200      	movs	r2, #0
 800c280:	f7fd fb41 	bl	8009906 <aci_gatt_update_char_value>
 800c284:	4603      	mov	r3, r0
 800c286:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800c288:	2202      	movs	r2, #2
 800c28a:	2102      	movs	r1, #2
 800c28c:	2000      	movs	r0, #0
 800c28e:	f7fd fd47 	bl	8009d20 <hci_le_set_default_phy>
 800c292:	4603      	mov	r3, r0
 800c294:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c296:	7dfb      	ldrb	r3, [r7, #23]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d00f      	beq.n	800c2bc <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800c29c:	4865      	ldr	r0, [pc, #404]	; (800c434 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c29e:	f7fe fd07 	bl	800acb0 <DbgTraceGetFileName>
 800c2a2:	4601      	mov	r1, r0
 800c2a4:	f44f 7367 	mov.w	r3, #924	; 0x39c
 800c2a8:	4a63      	ldr	r2, [pc, #396]	; (800c438 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c2aa:	4864      	ldr	r0, [pc, #400]	; (800c43c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c2ac:	f001 fbf0 	bl	800da90 <iprintf>
 800c2b0:	7dfb      	ldrb	r3, [r7, #23]
 800c2b2:	4619      	mov	r1, r3
 800c2b4:	4863      	ldr	r0, [pc, #396]	; (800c444 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 800c2b6:	f001 fbeb 	bl	800da90 <iprintf>
 800c2ba:	e00c      	b.n	800c2d6 <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800c2bc:	485d      	ldr	r0, [pc, #372]	; (800c434 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c2be:	f7fe fcf7 	bl	800acb0 <DbgTraceGetFileName>
 800c2c2:	4601      	mov	r1, r0
 800c2c4:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 800c2c8:	4a5b      	ldr	r2, [pc, #364]	; (800c438 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c2ca:	485c      	ldr	r0, [pc, #368]	; (800c43c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c2cc:	f001 fbe0 	bl	800da90 <iprintf>
 800c2d0:	485d      	ldr	r0, [pc, #372]	; (800c448 <Ble_Hci_Gap_Gatt_Init+0x500>)
 800c2d2:	f001 fc4b 	bl	800db6c <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800c2d6:	4b5d      	ldr	r3, [pc, #372]	; (800c44c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c2d8:	2201      	movs	r2, #1
 800c2da:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800c2dc:	4b5b      	ldr	r3, [pc, #364]	; (800c44c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c2de:	781b      	ldrb	r3, [r3, #0]
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f7fc fde4 	bl	8008eae <aci_gap_set_io_capability>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800c2ea:	7dfb      	ldrb	r3, [r7, #23]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d00f      	beq.n	800c310 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800c2f0:	4850      	ldr	r0, [pc, #320]	; (800c434 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c2f2:	f7fe fcdd 	bl	800acb0 <DbgTraceGetFileName>
 800c2f6:	4601      	mov	r1, r0
 800c2f8:	f240 33aa 	movw	r3, #938	; 0x3aa
 800c2fc:	4a4e      	ldr	r2, [pc, #312]	; (800c438 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c2fe:	484f      	ldr	r0, [pc, #316]	; (800c43c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c300:	f001 fbc6 	bl	800da90 <iprintf>
 800c304:	7dfb      	ldrb	r3, [r7, #23]
 800c306:	4619      	mov	r1, r3
 800c308:	4851      	ldr	r0, [pc, #324]	; (800c450 <Ble_Hci_Gap_Gatt_Init+0x508>)
 800c30a:	f001 fbc1 	bl	800da90 <iprintf>
 800c30e:	e00c      	b.n	800c32a <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800c310:	4848      	ldr	r0, [pc, #288]	; (800c434 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c312:	f7fe fccd 	bl	800acb0 <DbgTraceGetFileName>
 800c316:	4601      	mov	r1, r0
 800c318:	f240 33ae 	movw	r3, #942	; 0x3ae
 800c31c:	4a46      	ldr	r2, [pc, #280]	; (800c438 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c31e:	4847      	ldr	r0, [pc, #284]	; (800c43c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c320:	f001 fbb6 	bl	800da90 <iprintf>
 800c324:	484b      	ldr	r0, [pc, #300]	; (800c454 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 800c326:	f001 fc21 	bl	800db6c <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800c32a:	4b48      	ldr	r3, [pc, #288]	; (800c44c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c32c:	2201      	movs	r2, #1
 800c32e:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800c330:	4b46      	ldr	r3, [pc, #280]	; (800c44c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c332:	2208      	movs	r2, #8
 800c334:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800c336:	4b45      	ldr	r3, [pc, #276]	; (800c44c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c338:	2210      	movs	r2, #16
 800c33a:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800c33c:	4b43      	ldr	r3, [pc, #268]	; (800c44c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c33e:	2200      	movs	r2, #0
 800c340:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800c342:	4b42      	ldr	r3, [pc, #264]	; (800c44c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c344:	4a44      	ldr	r2, [pc, #272]	; (800c458 <Ble_Hci_Gap_Gatt_Init+0x510>)
 800c346:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800c348:	4b40      	ldr	r3, [pc, #256]	; (800c44c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c34a:	2200      	movs	r2, #0
 800c34c:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800c34e:	4b3f      	ldr	r3, [pc, #252]	; (800c44c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c350:	789c      	ldrb	r4, [r3, #2]
 800c352:	4b3e      	ldr	r3, [pc, #248]	; (800c44c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c354:	785d      	ldrb	r5, [r3, #1]
 800c356:	4b3d      	ldr	r3, [pc, #244]	; (800c44c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c358:	791b      	ldrb	r3, [r3, #4]
 800c35a:	4a3c      	ldr	r2, [pc, #240]	; (800c44c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c35c:	7952      	ldrb	r2, [r2, #5]
 800c35e:	493b      	ldr	r1, [pc, #236]	; (800c44c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c360:	78c9      	ldrb	r1, [r1, #3]
 800c362:	483a      	ldr	r0, [pc, #232]	; (800c44c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c364:	6880      	ldr	r0, [r0, #8]
 800c366:	2600      	movs	r6, #0
 800c368:	9604      	str	r6, [sp, #16]
 800c36a:	9003      	str	r0, [sp, #12]
 800c36c:	9102      	str	r1, [sp, #8]
 800c36e:	9201      	str	r2, [sp, #4]
 800c370:	9300      	str	r3, [sp, #0]
 800c372:	2300      	movs	r3, #0
 800c374:	2201      	movs	r2, #1
 800c376:	4629      	mov	r1, r5
 800c378:	4620      	mov	r0, r4
 800c37a:	f7fc fdec 	bl	8008f56 <aci_gap_set_authentication_requirement>
 800c37e:	4603      	mov	r3, r0
 800c380:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800c382:	7dfb      	ldrb	r3, [r7, #23]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d00f      	beq.n	800c3a8 <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800c388:	482a      	ldr	r0, [pc, #168]	; (800c434 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c38a:	f7fe fc91 	bl	800acb0 <DbgTraceGetFileName>
 800c38e:	4601      	mov	r1, r0
 800c390:	f240 33c9 	movw	r3, #969	; 0x3c9
 800c394:	4a28      	ldr	r2, [pc, #160]	; (800c438 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c396:	4829      	ldr	r0, [pc, #164]	; (800c43c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c398:	f001 fb7a 	bl	800da90 <iprintf>
 800c39c:	7dfb      	ldrb	r3, [r7, #23]
 800c39e:	4619      	mov	r1, r3
 800c3a0:	482e      	ldr	r0, [pc, #184]	; (800c45c <Ble_Hci_Gap_Gatt_Init+0x514>)
 800c3a2:	f001 fb75 	bl	800da90 <iprintf>
 800c3a6:	e00c      	b.n	800c3c2 <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800c3a8:	4822      	ldr	r0, [pc, #136]	; (800c434 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c3aa:	f7fe fc81 	bl	800acb0 <DbgTraceGetFileName>
 800c3ae:	4601      	mov	r1, r0
 800c3b0:	f240 33cd 	movw	r3, #973	; 0x3cd
 800c3b4:	4a20      	ldr	r2, [pc, #128]	; (800c438 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c3b6:	4821      	ldr	r0, [pc, #132]	; (800c43c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c3b8:	f001 fb6a 	bl	800da90 <iprintf>
 800c3bc:	4828      	ldr	r0, [pc, #160]	; (800c460 <Ble_Hci_Gap_Gatt_Init+0x518>)
 800c3be:	f001 fbd5 	bl	800db6c <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800c3c2:	4b22      	ldr	r3, [pc, #136]	; (800c44c <Ble_Hci_Gap_Gatt_Init+0x504>)
 800c3c4:	789b      	ldrb	r3, [r3, #2]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d023      	beq.n	800c412 <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 800c3ca:	f7fd f80e 	bl	80093ea <aci_gap_configure_filter_accept_list>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800c3d2:	7dfb      	ldrb	r3, [r7, #23]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d00f      	beq.n	800c3f8 <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800c3d8:	4816      	ldr	r0, [pc, #88]	; (800c434 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c3da:	f7fe fc69 	bl	800acb0 <DbgTraceGetFileName>
 800c3de:	4601      	mov	r1, r0
 800c3e0:	f44f 7376 	mov.w	r3, #984	; 0x3d8
 800c3e4:	4a14      	ldr	r2, [pc, #80]	; (800c438 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c3e6:	4815      	ldr	r0, [pc, #84]	; (800c43c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c3e8:	f001 fb52 	bl	800da90 <iprintf>
 800c3ec:	7dfb      	ldrb	r3, [r7, #23]
 800c3ee:	4619      	mov	r1, r3
 800c3f0:	481c      	ldr	r0, [pc, #112]	; (800c464 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 800c3f2:	f001 fb4d 	bl	800da90 <iprintf>
 800c3f6:	e00c      	b.n	800c412 <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800c3f8:	480e      	ldr	r0, [pc, #56]	; (800c434 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c3fa:	f7fe fc59 	bl	800acb0 <DbgTraceGetFileName>
 800c3fe:	4601      	mov	r1, r0
 800c400:	f44f 7377 	mov.w	r3, #988	; 0x3dc
 800c404:	4a0c      	ldr	r2, [pc, #48]	; (800c438 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c406:	480d      	ldr	r0, [pc, #52]	; (800c43c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c408:	f001 fb42 	bl	800da90 <iprintf>
 800c40c:	4816      	ldr	r0, [pc, #88]	; (800c468 <Ble_Hci_Gap_Gatt_Init+0x520>)
 800c40e:	f001 fbad 	bl	800db6c <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800c412:	4808      	ldr	r0, [pc, #32]	; (800c434 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800c414:	f7fe fc4c 	bl	800acb0 <DbgTraceGetFileName>
 800c418:	4601      	mov	r1, r0
 800c41a:	f240 33df 	movw	r3, #991	; 0x3df
 800c41e:	4a06      	ldr	r2, [pc, #24]	; (800c438 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800c420:	4806      	ldr	r0, [pc, #24]	; (800c43c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800c422:	f001 fb35 	bl	800da90 <iprintf>
 800c426:	4811      	ldr	r0, [pc, #68]	; (800c46c <Ble_Hci_Gap_Gatt_Init+0x524>)
 800c428:	f001 fb32 	bl	800da90 <iprintf>
}
 800c42c:	bf00      	nop
 800c42e:	371c      	adds	r7, #28
 800c430:	46bd      	mov	sp, r7
 800c432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c434:	0800ed48 	.word	0x0800ed48
 800c438:	080100b4 	.word	0x080100b4
 800c43c:	0800ed64 	.word	0x0800ed64
 800c440:	0800f630 	.word	0x0800f630
 800c444:	0800f650 	.word	0x0800f650
 800c448:	0800f68c 	.word	0x0800f68c
 800c44c:	2000170c 	.word	0x2000170c
 800c450:	0800f6b8 	.word	0x0800f6b8
 800c454:	0800f6f8 	.word	0x0800f6f8
 800c458:	0001b207 	.word	0x0001b207
 800c45c:	0800f728 	.word	0x0800f728
 800c460:	0800f774 	.word	0x0800f774
 800c464:	0800f7b0 	.word	0x0800f7b0
 800c468:	0800f7f0 	.word	0x0800f7f0
 800c46c:	0800f820 	.word	0x0800f820

0800c470 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b08c      	sub	sp, #48	; 0x30
 800c474:	af08      	add	r7, sp, #32
 800c476:	4603      	mov	r3, r0
 800c478:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c47a:	2392      	movs	r3, #146	; 0x92
 800c47c:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800c47e:	4a32      	ldr	r2, [pc, #200]	; (800c548 <Adv_Request+0xd8>)
 800c480:	79fb      	ldrb	r3, [r7, #7]
 800c482:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800c486:	2300      	movs	r3, #0
 800c488:	9306      	str	r3, [sp, #24]
 800c48a:	2300      	movs	r3, #0
 800c48c:	9305      	str	r3, [sp, #20]
 800c48e:	2300      	movs	r3, #0
 800c490:	9304      	str	r3, [sp, #16]
 800c492:	2300      	movs	r3, #0
 800c494:	9303      	str	r3, [sp, #12]
 800c496:	2300      	movs	r3, #0
 800c498:	9302      	str	r3, [sp, #8]
 800c49a:	2300      	movs	r3, #0
 800c49c:	9301      	str	r3, [sp, #4]
 800c49e:	2300      	movs	r3, #0
 800c4a0:	9300      	str	r3, [sp, #0]
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	22a0      	movs	r2, #160	; 0xa0
 800c4a6:	2180      	movs	r1, #128	; 0x80
 800c4a8:	2000      	movs	r0, #0
 800c4aa:	f7fc fc06 	bl	8008cba <aci_gap_set_discoverable>
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800c4b2:	7bfb      	ldrb	r3, [r7, #15]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d00f      	beq.n	800c4d8 <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800c4b8:	4824      	ldr	r0, [pc, #144]	; (800c54c <Adv_Request+0xdc>)
 800c4ba:	f7fe fbf9 	bl	800acb0 <DbgTraceGetFileName>
 800c4be:	4601      	mov	r1, r0
 800c4c0:	f240 33f5 	movw	r3, #1013	; 0x3f5
 800c4c4:	4a22      	ldr	r2, [pc, #136]	; (800c550 <Adv_Request+0xe0>)
 800c4c6:	4823      	ldr	r0, [pc, #140]	; (800c554 <Adv_Request+0xe4>)
 800c4c8:	f001 fae2 	bl	800da90 <iprintf>
 800c4cc:	7bfb      	ldrb	r3, [r7, #15]
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	4821      	ldr	r0, [pc, #132]	; (800c558 <Adv_Request+0xe8>)
 800c4d2:	f001 fadd 	bl	800da90 <iprintf>
 800c4d6:	e00c      	b.n	800c4f2 <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800c4d8:	481c      	ldr	r0, [pc, #112]	; (800c54c <Adv_Request+0xdc>)
 800c4da:	f7fe fbe9 	bl	800acb0 <DbgTraceGetFileName>
 800c4de:	4601      	mov	r1, r0
 800c4e0:	f240 33f9 	movw	r3, #1017	; 0x3f9
 800c4e4:	4a1a      	ldr	r2, [pc, #104]	; (800c550 <Adv_Request+0xe0>)
 800c4e6:	481b      	ldr	r0, [pc, #108]	; (800c554 <Adv_Request+0xe4>)
 800c4e8:	f001 fad2 	bl	800da90 <iprintf>
 800c4ec:	481b      	ldr	r0, [pc, #108]	; (800c55c <Adv_Request+0xec>)
 800c4ee:	f001 fb3d 	bl	800db6c <puts>
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800c4f2:	491b      	ldr	r1, [pc, #108]	; (800c560 <Adv_Request+0xf0>)
 800c4f4:	2019      	movs	r0, #25
 800c4f6:	f7fc ff06 	bl	8009306 <aci_gap_update_adv_data>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800c4fe:	7bfb      	ldrb	r3, [r7, #15]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d00f      	beq.n	800c524 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800c504:	4811      	ldr	r0, [pc, #68]	; (800c54c <Adv_Request+0xdc>)
 800c506:	f7fe fbd3 	bl	800acb0 <DbgTraceGetFileName>
 800c50a:	4601      	mov	r1, r0
 800c50c:	f240 4304 	movw	r3, #1028	; 0x404
 800c510:	4a0f      	ldr	r2, [pc, #60]	; (800c550 <Adv_Request+0xe0>)
 800c512:	4810      	ldr	r0, [pc, #64]	; (800c554 <Adv_Request+0xe4>)
 800c514:	f001 fabc 	bl	800da90 <iprintf>
 800c518:	7bfb      	ldrb	r3, [r7, #15]
 800c51a:	4619      	mov	r1, r3
 800c51c:	4811      	ldr	r0, [pc, #68]	; (800c564 <Adv_Request+0xf4>)
 800c51e:	f001 fab7 	bl	800da90 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800c522:	e00d      	b.n	800c540 <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800c524:	4809      	ldr	r0, [pc, #36]	; (800c54c <Adv_Request+0xdc>)
 800c526:	f7fe fbc3 	bl	800acb0 <DbgTraceGetFileName>
 800c52a:	4601      	mov	r1, r0
 800c52c:	f44f 6381 	mov.w	r3, #1032	; 0x408
 800c530:	4a07      	ldr	r2, [pc, #28]	; (800c550 <Adv_Request+0xe0>)
 800c532:	4808      	ldr	r0, [pc, #32]	; (800c554 <Adv_Request+0xe4>)
 800c534:	f001 faac 	bl	800da90 <iprintf>
 800c538:	480b      	ldr	r0, [pc, #44]	; (800c568 <Adv_Request+0xf8>)
 800c53a:	f001 faa9 	bl	800da90 <iprintf>
  return;
 800c53e:	bf00      	nop
}
 800c540:	3710      	adds	r7, #16
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	2000170c 	.word	0x2000170c
 800c54c:	0800ed48 	.word	0x0800ed48
 800c550:	080100cc 	.word	0x080100cc
 800c554:	0800ed64 	.word	0x0800ed64
 800c558:	0800f84c 	.word	0x0800f84c
 800c55c:	0800f884 	.word	0x0800f884
 800c560:	20000014 	.word	0x20000014
 800c564:	0800f8ac 	.word	0x0800f8ac
 800c568:	0800f8e0 	.word	0x0800f8e0

0800c56c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b086      	sub	sp, #24
 800c570:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800c572:	f7ff f963 	bl	800b83c <LL_FLASH_GetUDN>
 800c576:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c57e:	d023      	beq.n	800c5c8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800c580:	f7ff f974 	bl	800b86c <LL_FLASH_GetSTCompanyID>
 800c584:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800c586:	f7ff f965 	bl	800b854 <LL_FLASH_GetDeviceID>
 800c58a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	b2da      	uxtb	r2, r3
 800c590:	4b16      	ldr	r3, [pc, #88]	; (800c5ec <BleGetBdAddress+0x80>)
 800c592:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	0a1b      	lsrs	r3, r3, #8
 800c598:	b2da      	uxtb	r2, r3
 800c59a:	4b14      	ldr	r3, [pc, #80]	; (800c5ec <BleGetBdAddress+0x80>)
 800c59c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	b2da      	uxtb	r2, r3
 800c5a2:	4b12      	ldr	r3, [pc, #72]	; (800c5ec <BleGetBdAddress+0x80>)
 800c5a4:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	b2da      	uxtb	r2, r3
 800c5aa:	4b10      	ldr	r3, [pc, #64]	; (800c5ec <BleGetBdAddress+0x80>)
 800c5ac:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	0a1b      	lsrs	r3, r3, #8
 800c5b2:	b2da      	uxtb	r2, r3
 800c5b4:	4b0d      	ldr	r3, [pc, #52]	; (800c5ec <BleGetBdAddress+0x80>)
 800c5b6:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	0c1b      	lsrs	r3, r3, #16
 800c5bc:	b2da      	uxtb	r2, r3
 800c5be:	4b0b      	ldr	r3, [pc, #44]	; (800c5ec <BleGetBdAddress+0x80>)
 800c5c0:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800c5c2:	4b0a      	ldr	r3, [pc, #40]	; (800c5ec <BleGetBdAddress+0x80>)
 800c5c4:	617b      	str	r3, [r7, #20]
 800c5c6:	e00b      	b.n	800c5e0 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800c5c8:	2000      	movs	r0, #0
 800c5ca:	f7fe fc4f 	bl	800ae6c <OTP_Read>
 800c5ce:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d002      	beq.n	800c5dc <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	617b      	str	r3, [r7, #20]
 800c5da:	e001      	b.n	800c5e0 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800c5dc:	4b04      	ldr	r3, [pc, #16]	; (800c5f0 <BleGetBdAddress+0x84>)
 800c5de:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800c5e0:	697b      	ldr	r3, [r7, #20]
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3718      	adds	r7, #24
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	20001704 	.word	0x20001704
 800c5f0:	08010064 	.word	0x08010064

0800c5f4 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800c5fa:	4b1f      	ldr	r3, [pc, #124]	; (800c678 <Adv_Cancel+0x84>)
 800c5fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c600:	2b05      	cmp	r3, #5
 800c602:	d035      	beq.n	800c670 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800c604:	2392      	movs	r3, #146	; 0x92
 800c606:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800c608:	f7fc fb33 	bl	8008c72 <aci_gap_set_non_discoverable>
 800c60c:	4603      	mov	r3, r0
 800c60e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800c610:	4b19      	ldr	r3, [pc, #100]	; (800c678 <Adv_Cancel+0x84>)
 800c612:	2200      	movs	r2, #0
 800c614:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800c618:	79fb      	ldrb	r3, [r7, #7]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d00d      	beq.n	800c63a <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800c61e:	4817      	ldr	r0, [pc, #92]	; (800c67c <Adv_Cancel+0x88>)
 800c620:	f7fe fb46 	bl	800acb0 <DbgTraceGetFileName>
 800c624:	4601      	mov	r1, r0
 800c626:	f240 4356 	movw	r3, #1110	; 0x456
 800c62a:	4a15      	ldr	r2, [pc, #84]	; (800c680 <Adv_Cancel+0x8c>)
 800c62c:	4815      	ldr	r0, [pc, #84]	; (800c684 <Adv_Cancel+0x90>)
 800c62e:	f001 fa2f 	bl	800da90 <iprintf>
 800c632:	4815      	ldr	r0, [pc, #84]	; (800c688 <Adv_Cancel+0x94>)
 800c634:	f001 fa2c 	bl	800da90 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800c638:	e01a      	b.n	800c670 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 800c63a:	4810      	ldr	r0, [pc, #64]	; (800c67c <Adv_Cancel+0x88>)
 800c63c:	f7fe fb38 	bl	800acb0 <DbgTraceGetFileName>
 800c640:	4601      	mov	r1, r0
 800c642:	f240 435a 	movw	r3, #1114	; 0x45a
 800c646:	4a0e      	ldr	r2, [pc, #56]	; (800c680 <Adv_Cancel+0x8c>)
 800c648:	480e      	ldr	r0, [pc, #56]	; (800c684 <Adv_Cancel+0x90>)
 800c64a:	f001 fa21 	bl	800da90 <iprintf>
 800c64e:	480f      	ldr	r0, [pc, #60]	; (800c68c <Adv_Cancel+0x98>)
 800c650:	f001 fa1e 	bl	800da90 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800c654:	4809      	ldr	r0, [pc, #36]	; (800c67c <Adv_Cancel+0x88>)
 800c656:	f7fe fb2b 	bl	800acb0 <DbgTraceGetFileName>
 800c65a:	4601      	mov	r1, r0
 800c65c:	f240 435b 	movw	r3, #1115	; 0x45b
 800c660:	4a07      	ldr	r2, [pc, #28]	; (800c680 <Adv_Cancel+0x8c>)
 800c662:	4808      	ldr	r0, [pc, #32]	; (800c684 <Adv_Cancel+0x90>)
 800c664:	f001 fa14 	bl	800da90 <iprintf>
 800c668:	4809      	ldr	r0, [pc, #36]	; (800c690 <Adv_Cancel+0x9c>)
 800c66a:	f001 fa11 	bl	800da90 <iprintf>
  return;
 800c66e:	bf00      	nop
 800c670:	bf00      	nop
}
 800c672:	3708      	adds	r7, #8
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	2000170c 	.word	0x2000170c
 800c67c:	0800ed48 	.word	0x0800ed48
 800c680:	080100d8 	.word	0x080100d8
 800c684:	0800ed64 	.word	0x0800ed64
 800c688:	0800f908 	.word	0x0800f908
 800c68c:	0800f92c 	.word	0x0800f92c
 800c690:	0800f934 	.word	0x0800f934

0800c694 <APP_BLE_Key_Button1_Action>:
}
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

/* USER CODE BEGIN FD_SPECIFIC_FUNCTIONS */
void APP_BLE_Key_Button1_Action(void)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	af00      	add	r7, sp, #0
  P2PS_APP_B1_Button_Action();
 800c698:	f000 fa06 	bl	800caa8 <P2PS_APP_B1_Button_Action>
}
 800c69c:	bf00      	nop
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	af00      	add	r7, sp, #0
  P2PS_APP_B2_Button_Action();
 800c6a4:	f000 fa07 	bl	800cab6 <P2PS_APP_B2_Button_Action>
}
 800c6a8:	bf00      	nop
 800c6aa:	bd80      	pop	{r7, pc}

0800c6ac <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	af00      	add	r7, sp, #0
  P2PS_APP_B3_Button_Action();
 800c6b0:	f000 fa08 	bl	800cac4 <P2PS_APP_B3_Button_Action>
}
 800c6b4:	bf00      	nop
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <APP_BLE_Key_Motor_Stopped_Action>:

void APP_BLE_Key_Motor_Stopped_Action(void)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	af00      	add	r7, sp, #0
  P2PS_APP_Motor_Stopped_Action();
 800c6bc:	f000 fa0a 	bl	800cad4 <P2PS_APP_Motor_Stopped_Action>
}
 800c6c0:	bf00      	nop
 800c6c2:	bd80      	pop	{r7, pc}

0800c6c4 <APP_BLE_Key_Motor_Done_Action>:
{
  P2PS_APP_Motor_Pending_Action();
}

void APP_BLE_Key_Motor_Done_Action(void)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	af00      	add	r7, sp, #0
  P2PS_APP_Motor_Done_Action();
 800c6c8:	f000 fa12 	bl	800caf0 <P2PS_APP_Motor_Done_Action>
}
 800c6cc:	bf00      	nop
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800c6d8:	2100      	movs	r1, #0
 800c6da:	2002      	movs	r0, #2
 800c6dc:	f000 fff6 	bl	800d6cc <UTIL_SEQ_SetTask>

  return;
 800c6e0:	bf00      	nop
}
 800c6e2:	3708      	adds	r7, #8
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b082      	sub	sp, #8
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c6f0:	2001      	movs	r0, #1
 800c6f2:	f001 f857 	bl	800d7a4 <UTIL_SEQ_SetEvt>

  return;
 800c6f6:	bf00      	nop
}
 800c6f8:	3708      	adds	r7, #8
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}

0800c6fe <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b082      	sub	sp, #8
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800c706:	2001      	movs	r0, #1
 800c708:	f001 f86c 	bl	800d7e4 <UTIL_SEQ_WaitEvt>

  return;
 800c70c:	bf00      	nop
}
 800c70e:	3708      	adds	r7, #8
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b084      	sub	sp, #16
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	3308      	adds	r3, #8
 800c726:	4618      	mov	r0, r3
 800c728:	f7fd fc60 	bl	8009fec <SVCCTL_UserEvtRx>
 800c72c:	4603      	mov	r3, r0
 800c72e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800c730:	7afb      	ldrb	r3, [r7, #11]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d003      	beq.n	800c73e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	2201      	movs	r2, #1
 800c73a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800c73c:	e003      	b.n	800c746 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	2200      	movs	r2, #0
 800c742:	701a      	strb	r2, [r3, #0]
  return;
 800c744:	bf00      	nop
}
 800c746:	3710      	adds	r7, #16
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}

0800c74c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b084      	sub	sp, #16
 800c750:	af00      	add	r7, sp, #0
 800c752:	4603      	mov	r3, r0
 800c754:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800c756:	79fb      	ldrb	r3, [r7, #7]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d002      	beq.n	800c762 <BLE_StatusNot+0x16>
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	d006      	beq.n	800c76e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800c760:	e00b      	b.n	800c77a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800c762:	23ff      	movs	r3, #255	; 0xff
 800c764:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800c766:	68f8      	ldr	r0, [r7, #12]
 800c768:	f000 ffdc 	bl	800d724 <UTIL_SEQ_PauseTask>
      break;
 800c76c:	e005      	b.n	800c77a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800c76e:	23ff      	movs	r3, #255	; 0xff
 800c770:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800c772:	68f8      	ldr	r0, [r7, #12]
 800c774:	f000 fff6 	bl	800d764 <UTIL_SEQ_ResumeTask>
      break;
 800c778:	bf00      	nop
  }

  return;
 800c77a:	bf00      	nop
}
 800c77c:	3710      	adds	r7, #16
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}
	...

0800c784 <Custom_STM_App_Notification>:
uint16_t Payload_To_Speed(uint8_t, uint8_t);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b084      	sub	sp, #16
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	2b03      	cmp	r3, #3
 800c792:	d876      	bhi.n	800c882 <Custom_STM_App_Notification+0xfe>
 800c794:	a201      	add	r2, pc, #4	; (adr r2, 800c79c <Custom_STM_App_Notification+0x18>)
 800c796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c79a:	bf00      	nop
 800c79c:	0800c883 	.word	0x0800c883
 800c7a0:	0800c7ad 	.word	0x0800c7ad
 800c7a4:	0800c843 	.word	0x0800c843
 800c7a8:	0800c863 	.word	0x0800c863
      /* USER CODE END CUSTOM_STM_GOAL_C_READ_EVT */
      break;

    case CUSTOM_STM_GOAL_C_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_GOAL_C_WRITE_NO_RESP_EVT */
        APP_DBG_MSG("\r\n\r** CUSTOM_STM_GOAL_C_WRITE_NO_RESP_EVT \n");
 800c7ac:	4837      	ldr	r0, [pc, #220]	; (800c88c <Custom_STM_App_Notification+0x108>)
 800c7ae:	f7fe fa7f 	bl	800acb0 <DbgTraceGetFileName>
 800c7b2:	4601      	mov	r1, r0
 800c7b4:	236d      	movs	r3, #109	; 0x6d
 800c7b6:	4a36      	ldr	r2, [pc, #216]	; (800c890 <Custom_STM_App_Notification+0x10c>)
 800c7b8:	4836      	ldr	r0, [pc, #216]	; (800c894 <Custom_STM_App_Notification+0x110>)
 800c7ba:	f001 f969 	bl	800da90 <iprintf>
 800c7be:	4836      	ldr	r0, [pc, #216]	; (800c898 <Custom_STM_App_Notification+0x114>)
 800c7c0:	f001 f9d4 	bl	800db6c <puts>
        APP_DBG_MSG("\r\n\r** Write Data: 0x%02X %02X \n", pNotification->DataTransfered.pPayload[0], pNotification->DataTransfered.pPayload[1]);
 800c7c4:	4831      	ldr	r0, [pc, #196]	; (800c88c <Custom_STM_App_Notification+0x108>)
 800c7c6:	f7fe fa73 	bl	800acb0 <DbgTraceGetFileName>
 800c7ca:	4601      	mov	r1, r0
 800c7cc:	236e      	movs	r3, #110	; 0x6e
 800c7ce:	4a30      	ldr	r2, [pc, #192]	; (800c890 <Custom_STM_App_Notification+0x10c>)
 800c7d0:	4830      	ldr	r0, [pc, #192]	; (800c894 <Custom_STM_App_Notification+0x110>)
 800c7d2:	f001 f95d 	bl	800da90 <iprintf>
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	685b      	ldr	r3, [r3, #4]
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	4619      	mov	r1, r3
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	482c      	ldr	r0, [pc, #176]	; (800c89c <Custom_STM_App_Notification+0x118>)
 800c7ea:	f001 f951 	bl	800da90 <iprintf>
        uint16_t goal_speed = Payload_To_Speed(pNotification->DataTransfered.pPayload[0], pNotification->DataTransfered.pPayload[1]);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	781a      	ldrb	r2, [r3, #0]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	4610      	mov	r0, r2
 800c800:	f000 f984 	bl	800cb0c <Payload_To_Speed>
 800c804:	4603      	mov	r3, r0
 800c806:	81fb      	strh	r3, [r7, #14]

        if(goal_speed == 0)
 800c808:	89fb      	ldrh	r3, [r7, #14]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d108      	bne.n	800c820 <Custom_STM_App_Notification+0x9c>
        {
        	//if pending action is put here the motor stops too fast before notification is sent, so STOPPED notification is sent twice
        	//APP_DBG_MSG("\r\n\r** Before stop \n");
        	Stop_Motor();
 800c80e:	f7f4 ff84 	bl	800171a <Stop_Motor>
        	//APP_DBG_MSG("\r\n\r** After stop \n");

        	Blue_On();
 800c812:	f7f5 f983 	bl	8001b1c <Blue_On>
        	Green_Off();
 800c816:	f7f5 f975 	bl	8001b04 <Green_Off>
        	Red_Off();
 800c81a:	f7f5 f95b 	bl	8001ad4 <Red_Off>
        	HAL_GPIO_WritePin(Blue_Led_GPIO_Port, Blue_Led_Pin, GPIO_PIN_RESET);
        	HAL_GPIO_WritePin(Green_Led_GPIO_Port, Green_Led_Pin, GPIO_PIN_RESET);
        	HAL_GPIO_WritePin(Red_Led_GPIO_Port, Red_Led_Pin, GPIO_PIN_SET);
        }*/
      /* USER CODE END CUSTOM_STM_GOAL_C_WRITE_NO_RESP_EVT */
      break;
 800c81e:	e031      	b.n	800c884 <Custom_STM_App_Notification+0x100>
        	Blue_Off();
 800c820:	f7f5 f988 	bl	8001b34 <Blue_Off>
        	Green_On();
 800c824:	f7f5 f962 	bl	8001aec <Green_On>
        	Red_Off();
 800c828:	f7f5 f954 	bl	8001ad4 <Red_Off>
        	Set_Speed(goal_speed);
 800c82c:	89fb      	ldrh	r3, [r7, #14]
 800c82e:	4618      	mov	r0, r3
 800c830:	f7f5 f86e 	bl	8001910 <Set_Speed>
        	Blue_Off();
 800c834:	f7f5 f97e 	bl	8001b34 <Blue_Off>
        	Green_Off();
 800c838:	f7f5 f964 	bl	8001b04 <Green_Off>
        	Red_On();
 800c83c:	f7f5 f93e 	bl	8001abc <Red_On>
      break;
 800c840:	e020      	b.n	800c884 <Custom_STM_App_Notification+0x100>

    case CUSTOM_STM_STATE_C_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_STATE_C_NOTIFY_ENABLED_EVT */
        APP_DBG_MSG("\r\n\r** CUSTOM_STM_STATE_C_NOTIFY_ENABLED_EVT \n");
 800c842:	4812      	ldr	r0, [pc, #72]	; (800c88c <Custom_STM_App_Notification+0x108>)
 800c844:	f7fe fa34 	bl	800acb0 <DbgTraceGetFileName>
 800c848:	4601      	mov	r1, r0
 800c84a:	23a4      	movs	r3, #164	; 0xa4
 800c84c:	4a10      	ldr	r2, [pc, #64]	; (800c890 <Custom_STM_App_Notification+0x10c>)
 800c84e:	4811      	ldr	r0, [pc, #68]	; (800c894 <Custom_STM_App_Notification+0x110>)
 800c850:	f001 f91e 	bl	800da90 <iprintf>
 800c854:	4812      	ldr	r0, [pc, #72]	; (800c8a0 <Custom_STM_App_Notification+0x11c>)
 800c856:	f001 f989 	bl	800db6c <puts>

        Custom_App_Context.State_c_Notification_Status = 1;
 800c85a:	4b12      	ldr	r3, [pc, #72]	; (800c8a4 <Custom_STM_App_Notification+0x120>)
 800c85c:	2201      	movs	r2, #1
 800c85e:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_STATE_C_NOTIFY_ENABLED_EVT */
      break;
 800c860:	e010      	b.n	800c884 <Custom_STM_App_Notification+0x100>

    case CUSTOM_STM_STATE_C_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_STATE_C_NOTIFY_DISABLED_EVT */
        APP_DBG_MSG("\r\n\r** CUSTOM_STM_STATE_C_NOTIFY_DISABLED_EVT \n");
 800c862:	480a      	ldr	r0, [pc, #40]	; (800c88c <Custom_STM_App_Notification+0x108>)
 800c864:	f7fe fa24 	bl	800acb0 <DbgTraceGetFileName>
 800c868:	4601      	mov	r1, r0
 800c86a:	23ac      	movs	r3, #172	; 0xac
 800c86c:	4a08      	ldr	r2, [pc, #32]	; (800c890 <Custom_STM_App_Notification+0x10c>)
 800c86e:	4809      	ldr	r0, [pc, #36]	; (800c894 <Custom_STM_App_Notification+0x110>)
 800c870:	f001 f90e 	bl	800da90 <iprintf>
 800c874:	480c      	ldr	r0, [pc, #48]	; (800c8a8 <Custom_STM_App_Notification+0x124>)
 800c876:	f001 f979 	bl	800db6c <puts>

        Custom_App_Context.State_c_Notification_Status = 0;
 800c87a:	4b0a      	ldr	r3, [pc, #40]	; (800c8a4 <Custom_STM_App_Notification+0x120>)
 800c87c:	2200      	movs	r2, #0
 800c87e:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_STATE_C_NOTIFY_DISABLED_EVT */
      break;
 800c880:	e000      	b.n	800c884 <Custom_STM_App_Notification+0x100>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800c882:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800c884:	bf00      	nop
}
 800c886:	3710      	adds	r7, #16
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd80      	pop	{r7, pc}
 800c88c:	0800f950 	.word	0x0800f950
 800c890:	080100e4 	.word	0x080100e4
 800c894:	0800f970 	.word	0x0800f970
 800c898:	0800f984 	.word	0x0800f984
 800c89c:	0800f9b0 	.word	0x0800f9b0
 800c8a0:	0800f9d0 	.word	0x0800f9d0
 800c8a4:	20001794 	.word	0x20001794
 800c8a8:	0800fa00 	.word	0x0800fa00

0800c8ac <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b083      	sub	sp, #12
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d002      	beq.n	800c8c2 <Custom_APP_Notification+0x16>
 800c8bc:	2b01      	cmp	r3, #1
 800c8be:	d002      	beq.n	800c8c6 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800c8c0:	e002      	b.n	800c8c8 <Custom_APP_Notification+0x1c>
      break;
 800c8c2:	bf00      	nop
 800c8c4:	e000      	b.n	800c8c8 <Custom_APP_Notification+0x1c>
      break;
 800c8c6:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800c8c8:	bf00      	nop
}
 800c8ca:	370c      	adds	r7, #12
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr

0800c8d4 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	  /*UTIL_SEQ_RegTask(1<< CFG_TASK_B1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Custom_State_c_Send_Notification);
	  UTIL_SEQ_RegTask(1<< CFG_TASK_B2_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Custom_State_c_Send_Notification);
	  UTIL_SEQ_RegTask(1<< CFG_TASK_B3_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Custom_State_c_Send_Notification);*/

	  UTIL_SEQ_RegTask(1<< CFG_TASK_MOTOR_STOPPED_ID, UTIL_SEQ_RFU, Custom_State_c_Send_Notification);
 800c8d8:	4a0b      	ldr	r2, [pc, #44]	; (800c908 <Custom_APP_Init+0x34>)
 800c8da:	2100      	movs	r1, #0
 800c8dc:	2020      	movs	r0, #32
 800c8de:	f000 fed3 	bl	800d688 <UTIL_SEQ_RegTask>
	  UTIL_SEQ_RegTask(1<< CFG_TASK_MOTOR_PENDING_ID, UTIL_SEQ_RFU, Custom_State_c_Send_Notification);
 800c8e2:	4a09      	ldr	r2, [pc, #36]	; (800c908 <Custom_APP_Init+0x34>)
 800c8e4:	2100      	movs	r1, #0
 800c8e6:	2040      	movs	r0, #64	; 0x40
 800c8e8:	f000 fece 	bl	800d688 <UTIL_SEQ_RegTask>
	  UTIL_SEQ_RegTask(1<< CFG_TASK_MOTOR_DONE_ID, UTIL_SEQ_RFU, Custom_State_c_Send_Notification);
 800c8ec:	4a06      	ldr	r2, [pc, #24]	; (800c908 <Custom_APP_Init+0x34>)
 800c8ee:	2100      	movs	r1, #0
 800c8f0:	2080      	movs	r0, #128	; 0x80
 800c8f2:	f000 fec9 	bl	800d688 <UTIL_SEQ_RegTask>

	  Custom_App_Context.State_c_Notification_Status = 0;
 800c8f6:	4b05      	ldr	r3, [pc, #20]	; (800c90c <Custom_APP_Init+0x38>)
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	701a      	strb	r2, [r3, #0]
	  Custom_App_Context.State_Status = STOPPED;
 800c8fc:	4b03      	ldr	r3, [pc, #12]	; (800c90c <Custom_APP_Init+0x38>)
 800c8fe:	2200      	movs	r2, #0
 800c900:	705a      	strb	r2, [r3, #1]
  /* USER CODE END CUSTOM_APP_Init */
  return;
 800c902:	bf00      	nop
}
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	0800c911 	.word	0x0800c911
 800c90c:	20001794 	.word	0x20001794

0800c910 <Custom_State_c_Send_Notification>:
  /* USER CODE END State_c_UC_Last*/
  return;
}

void Custom_State_c_Send_Notification(void) /* Property Notification */
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800c916:	2300      	movs	r3, #0
 800c918:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN State_c_NS_1*/
  if(Custom_App_Context.State_c_Notification_Status)
 800c91a:	4b58      	ldr	r3, [pc, #352]	; (800ca7c <Custom_State_c_Send_Notification+0x16c>)
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	f000 8092 	beq.w	800ca48 <Custom_State_c_Send_Notification+0x138>
  {
	  updateflag = 1;
 800c924:	2301      	movs	r3, #1
 800c926:	71fb      	strb	r3, [r7, #7]

	  if(Custom_App_Context.State_Status == STOPPED)
 800c928:	4b54      	ldr	r3, [pc, #336]	; (800ca7c <Custom_State_c_Send_Notification+0x16c>)
 800c92a:	785b      	ldrb	r3, [r3, #1]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d120      	bne.n	800c972 <Custom_State_c_Send_Notification+0x62>
	  {
		  NotifyCharData[0] = 0x00; //Big Endian
 800c930:	4b53      	ldr	r3, [pc, #332]	; (800ca80 <Custom_State_c_Send_Notification+0x170>)
 800c932:	2200      	movs	r2, #0
 800c934:	701a      	strb	r2, [r3, #0]
		  NotifyCharData[1] = 0x00;
 800c936:	4b52      	ldr	r3, [pc, #328]	; (800ca80 <Custom_State_c_Send_Notification+0x170>)
 800c938:	2200      	movs	r2, #0
 800c93a:	705a      	strb	r2, [r3, #1]
		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT MOTOR STOPPED \n");
 800c93c:	4851      	ldr	r0, [pc, #324]	; (800ca84 <Custom_State_c_Send_Notification+0x174>)
 800c93e:	f7fe f9b7 	bl	800acb0 <DbgTraceGetFileName>
 800c942:	4601      	mov	r1, r0
 800c944:	f240 131f 	movw	r3, #287	; 0x11f
 800c948:	4a4f      	ldr	r2, [pc, #316]	; (800ca88 <Custom_State_c_Send_Notification+0x178>)
 800c94a:	4850      	ldr	r0, [pc, #320]	; (800ca8c <Custom_State_c_Send_Notification+0x17c>)
 800c94c:	f001 f8a0 	bl	800da90 <iprintf>
 800c950:	484f      	ldr	r0, [pc, #316]	; (800ca90 <Custom_State_c_Send_Notification+0x180>)
 800c952:	f001 f90b 	bl	800db6c <puts>
		  APP_DBG_MSG(" \n\r");
 800c956:	484b      	ldr	r0, [pc, #300]	; (800ca84 <Custom_State_c_Send_Notification+0x174>)
 800c958:	f7fe f9aa 	bl	800acb0 <DbgTraceGetFileName>
 800c95c:	4601      	mov	r1, r0
 800c95e:	f44f 7390 	mov.w	r3, #288	; 0x120
 800c962:	4a49      	ldr	r2, [pc, #292]	; (800ca88 <Custom_State_c_Send_Notification+0x178>)
 800c964:	4849      	ldr	r0, [pc, #292]	; (800ca8c <Custom_State_c_Send_Notification+0x17c>)
 800c966:	f001 f893 	bl	800da90 <iprintf>
 800c96a:	484a      	ldr	r0, [pc, #296]	; (800ca94 <Custom_State_c_Send_Notification+0x184>)
 800c96c:	f001 f890 	bl	800da90 <iprintf>
 800c970:	e077      	b.n	800ca62 <Custom_State_c_Send_Notification+0x152>
	  }
	  else if (Custom_App_Context.State_Status == PENDING)
 800c972:	4b42      	ldr	r3, [pc, #264]	; (800ca7c <Custom_State_c_Send_Notification+0x16c>)
 800c974:	785b      	ldrb	r3, [r3, #1]
 800c976:	2b01      	cmp	r3, #1
 800c978:	d120      	bne.n	800c9bc <Custom_State_c_Send_Notification+0xac>
	  {
		  NotifyCharData[0] = 0x00;
 800c97a:	4b41      	ldr	r3, [pc, #260]	; (800ca80 <Custom_State_c_Send_Notification+0x170>)
 800c97c:	2200      	movs	r2, #0
 800c97e:	701a      	strb	r2, [r3, #0]
		  NotifyCharData[1] = 0x01;
 800c980:	4b3f      	ldr	r3, [pc, #252]	; (800ca80 <Custom_State_c_Send_Notification+0x170>)
 800c982:	2201      	movs	r2, #1
 800c984:	705a      	strb	r2, [r3, #1]
		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT MOTOR PENDING \n");
 800c986:	483f      	ldr	r0, [pc, #252]	; (800ca84 <Custom_State_c_Send_Notification+0x174>)
 800c988:	f7fe f992 	bl	800acb0 <DbgTraceGetFileName>
 800c98c:	4601      	mov	r1, r0
 800c98e:	f44f 7393 	mov.w	r3, #294	; 0x126
 800c992:	4a3d      	ldr	r2, [pc, #244]	; (800ca88 <Custom_State_c_Send_Notification+0x178>)
 800c994:	483d      	ldr	r0, [pc, #244]	; (800ca8c <Custom_State_c_Send_Notification+0x17c>)
 800c996:	f001 f87b 	bl	800da90 <iprintf>
 800c99a:	483f      	ldr	r0, [pc, #252]	; (800ca98 <Custom_State_c_Send_Notification+0x188>)
 800c99c:	f001 f8e6 	bl	800db6c <puts>
		  APP_DBG_MSG(" \n\r");
 800c9a0:	4838      	ldr	r0, [pc, #224]	; (800ca84 <Custom_State_c_Send_Notification+0x174>)
 800c9a2:	f7fe f985 	bl	800acb0 <DbgTraceGetFileName>
 800c9a6:	4601      	mov	r1, r0
 800c9a8:	f240 1327 	movw	r3, #295	; 0x127
 800c9ac:	4a36      	ldr	r2, [pc, #216]	; (800ca88 <Custom_State_c_Send_Notification+0x178>)
 800c9ae:	4837      	ldr	r0, [pc, #220]	; (800ca8c <Custom_State_c_Send_Notification+0x17c>)
 800c9b0:	f001 f86e 	bl	800da90 <iprintf>
 800c9b4:	4837      	ldr	r0, [pc, #220]	; (800ca94 <Custom_State_c_Send_Notification+0x184>)
 800c9b6:	f001 f86b 	bl	800da90 <iprintf>
 800c9ba:	e052      	b.n	800ca62 <Custom_State_c_Send_Notification+0x152>
	  }
	  else if (Custom_App_Context.State_Status == DONE)
 800c9bc:	4b2f      	ldr	r3, [pc, #188]	; (800ca7c <Custom_State_c_Send_Notification+0x16c>)
 800c9be:	785b      	ldrb	r3, [r3, #1]
 800c9c0:	2b02      	cmp	r3, #2
 800c9c2:	d120      	bne.n	800ca06 <Custom_State_c_Send_Notification+0xf6>
	  {
		  NotifyCharData[0] = 0x00;
 800c9c4:	4b2e      	ldr	r3, [pc, #184]	; (800ca80 <Custom_State_c_Send_Notification+0x170>)
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	701a      	strb	r2, [r3, #0]
		  NotifyCharData[1] = 0x02;
 800c9ca:	4b2d      	ldr	r3, [pc, #180]	; (800ca80 <Custom_State_c_Send_Notification+0x170>)
 800c9cc:	2202      	movs	r2, #2
 800c9ce:	705a      	strb	r2, [r3, #1]
		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT MOTOR DONE \n");
 800c9d0:	482c      	ldr	r0, [pc, #176]	; (800ca84 <Custom_State_c_Send_Notification+0x174>)
 800c9d2:	f7fe f96d 	bl	800acb0 <DbgTraceGetFileName>
 800c9d6:	4601      	mov	r1, r0
 800c9d8:	f240 132d 	movw	r3, #301	; 0x12d
 800c9dc:	4a2a      	ldr	r2, [pc, #168]	; (800ca88 <Custom_State_c_Send_Notification+0x178>)
 800c9de:	482b      	ldr	r0, [pc, #172]	; (800ca8c <Custom_State_c_Send_Notification+0x17c>)
 800c9e0:	f001 f856 	bl	800da90 <iprintf>
 800c9e4:	482d      	ldr	r0, [pc, #180]	; (800ca9c <Custom_State_c_Send_Notification+0x18c>)
 800c9e6:	f001 f8c1 	bl	800db6c <puts>
		  APP_DBG_MSG(" \n\r");
 800c9ea:	4826      	ldr	r0, [pc, #152]	; (800ca84 <Custom_State_c_Send_Notification+0x174>)
 800c9ec:	f7fe f960 	bl	800acb0 <DbgTraceGetFileName>
 800c9f0:	4601      	mov	r1, r0
 800c9f2:	f44f 7397 	mov.w	r3, #302	; 0x12e
 800c9f6:	4a24      	ldr	r2, [pc, #144]	; (800ca88 <Custom_State_c_Send_Notification+0x178>)
 800c9f8:	4824      	ldr	r0, [pc, #144]	; (800ca8c <Custom_State_c_Send_Notification+0x17c>)
 800c9fa:	f001 f849 	bl	800da90 <iprintf>
 800c9fe:	4825      	ldr	r0, [pc, #148]	; (800ca94 <Custom_State_c_Send_Notification+0x184>)
 800ca00:	f001 f846 	bl	800da90 <iprintf>
 800ca04:	e02d      	b.n	800ca62 <Custom_State_c_Send_Notification+0x152>
	  }
	  else
	  {
		  NotifyCharData[0] = 0x00;
 800ca06:	4b1e      	ldr	r3, [pc, #120]	; (800ca80 <Custom_State_c_Send_Notification+0x170>)
 800ca08:	2200      	movs	r2, #0
 800ca0a:	701a      	strb	r2, [r3, #0]
		  NotifyCharData[1] = 0x03;
 800ca0c:	4b1c      	ldr	r3, [pc, #112]	; (800ca80 <Custom_State_c_Send_Notification+0x170>)
 800ca0e:	2203      	movs	r2, #3
 800ca10:	705a      	strb	r2, [r3, #1]
		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT MOTOR WRONG STATE \n");
 800ca12:	481c      	ldr	r0, [pc, #112]	; (800ca84 <Custom_State_c_Send_Notification+0x174>)
 800ca14:	f7fe f94c 	bl	800acb0 <DbgTraceGetFileName>
 800ca18:	4601      	mov	r1, r0
 800ca1a:	f44f 739a 	mov.w	r3, #308	; 0x134
 800ca1e:	4a1a      	ldr	r2, [pc, #104]	; (800ca88 <Custom_State_c_Send_Notification+0x178>)
 800ca20:	481a      	ldr	r0, [pc, #104]	; (800ca8c <Custom_State_c_Send_Notification+0x17c>)
 800ca22:	f001 f835 	bl	800da90 <iprintf>
 800ca26:	481e      	ldr	r0, [pc, #120]	; (800caa0 <Custom_State_c_Send_Notification+0x190>)
 800ca28:	f001 f8a0 	bl	800db6c <puts>
		  APP_DBG_MSG(" \n\r");
 800ca2c:	4815      	ldr	r0, [pc, #84]	; (800ca84 <Custom_State_c_Send_Notification+0x174>)
 800ca2e:	f7fe f93f 	bl	800acb0 <DbgTraceGetFileName>
 800ca32:	4601      	mov	r1, r0
 800ca34:	f240 1335 	movw	r3, #309	; 0x135
 800ca38:	4a13      	ldr	r2, [pc, #76]	; (800ca88 <Custom_State_c_Send_Notification+0x178>)
 800ca3a:	4814      	ldr	r0, [pc, #80]	; (800ca8c <Custom_State_c_Send_Notification+0x17c>)
 800ca3c:	f001 f828 	bl	800da90 <iprintf>
 800ca40:	4814      	ldr	r0, [pc, #80]	; (800ca94 <Custom_State_c_Send_Notification+0x184>)
 800ca42:	f001 f825 	bl	800da90 <iprintf>
 800ca46:	e00c      	b.n	800ca62 <Custom_State_c_Send_Notification+0x152>
	  }
  }
  else
  {
	  APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 800ca48:	480e      	ldr	r0, [pc, #56]	; (800ca84 <Custom_State_c_Send_Notification+0x174>)
 800ca4a:	f7fe f931 	bl	800acb0 <DbgTraceGetFileName>
 800ca4e:	4601      	mov	r1, r0
 800ca50:	f44f 739d 	mov.w	r3, #314	; 0x13a
 800ca54:	4a0c      	ldr	r2, [pc, #48]	; (800ca88 <Custom_State_c_Send_Notification+0x178>)
 800ca56:	480d      	ldr	r0, [pc, #52]	; (800ca8c <Custom_State_c_Send_Notification+0x17c>)
 800ca58:	f001 f81a 	bl	800da90 <iprintf>
 800ca5c:	4811      	ldr	r0, [pc, #68]	; (800caa4 <Custom_State_c_Send_Notification+0x194>)
 800ca5e:	f001 f885 	bl	800db6c <puts>
  }
  /* USER CODE END State_c_NS_1*/

  if (updateflag != 0)
 800ca62:	79fb      	ldrb	r3, [r7, #7]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d004      	beq.n	800ca72 <Custom_State_c_Send_Notification+0x162>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_STATE_C, (uint8_t *)NotifyCharData);
 800ca68:	4905      	ldr	r1, [pc, #20]	; (800ca80 <Custom_State_c_Send_Notification+0x170>)
 800ca6a:	2001      	movs	r0, #1
 800ca6c:	f000 fa00 	bl	800ce70 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN State_c_NS_Last*/

  /* USER CODE END State_c_NS_Last*/

  return;
 800ca70:	bf00      	nop
 800ca72:	bf00      	nop
}
 800ca74:	3708      	adds	r7, #8
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
 800ca7a:	bf00      	nop
 800ca7c:	20001794 	.word	0x20001794
 800ca80:	20001798 	.word	0x20001798
 800ca84:	0800f950 	.word	0x0800f950
 800ca88:	08010100 	.word	0x08010100
 800ca8c:	0800f970 	.word	0x0800f970
 800ca90:	0800fa30 	.word	0x0800fa30
 800ca94:	0800fa70 	.word	0x0800fa70
 800ca98:	0800fa74 	.word	0x0800fa74
 800ca9c:	0800fab4 	.word	0x0800fab4
 800caa0:	0800faf0 	.word	0x0800faf0
 800caa4:	0800fb34 	.word	0x0800fb34

0800caa8 <P2PS_APP_B1_Button_Action>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_APP_B1_Button_Action(void)
{
 800caa8:	b480      	push	{r7}
 800caaa:	af00      	add	r7, sp, #0
	//Custom_App_Context.State_Status = STOPPED;
  //UTIL_SEQ_SetTask(1<<CFG_TASK_B1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);

  return;
 800caac:	bf00      	nop
}
 800caae:	46bd      	mov	sp, r7
 800cab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab4:	4770      	bx	lr

0800cab6 <P2PS_APP_B2_Button_Action>:

void P2PS_APP_B2_Button_Action(void)
{
 800cab6:	b480      	push	{r7}
 800cab8:	af00      	add	r7, sp, #0
	//Custom_App_Context.State_Status = PENDING;
  //UTIL_SEQ_SetTask(1<<CFG_TASK_B2_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);

  return;
 800caba:	bf00      	nop
}
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr

0800cac4 <P2PS_APP_B3_Button_Action>:

void P2PS_APP_B3_Button_Action(void)
{
 800cac4:	b480      	push	{r7}
 800cac6:	af00      	add	r7, sp, #0
	//Custom_App_Context.State_Status = DONE;
  //UTIL_SEQ_SetTask(1<<CFG_TASK_B3_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);

  return;
 800cac8:	bf00      	nop
}
 800caca:	46bd      	mov	sp, r7
 800cacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad0:	4770      	bx	lr
	...

0800cad4 <P2PS_APP_Motor_Stopped_Action>:

void P2PS_APP_Motor_Stopped_Action(void)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	af00      	add	r7, sp, #0
	Custom_App_Context.State_Status = STOPPED;
 800cad8:	4b04      	ldr	r3, [pc, #16]	; (800caec <P2PS_APP_Motor_Stopped_Action+0x18>)
 800cada:	2200      	movs	r2, #0
 800cadc:	705a      	strb	r2, [r3, #1]
    UTIL_SEQ_SetTask(1<<CFG_TASK_MOTOR_STOPPED_ID, CFG_SCH_PRIO_0);
 800cade:	2100      	movs	r1, #0
 800cae0:	2020      	movs	r0, #32
 800cae2:	f000 fdf3 	bl	800d6cc <UTIL_SEQ_SetTask>

    return;
 800cae6:	bf00      	nop
}
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop
 800caec:	20001794 	.word	0x20001794

0800caf0 <P2PS_APP_Motor_Done_Action>:

    return;
}

void P2PS_APP_Motor_Done_Action(void)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	af00      	add	r7, sp, #0
	Custom_App_Context.State_Status = DONE;
 800caf4:	4b04      	ldr	r3, [pc, #16]	; (800cb08 <P2PS_APP_Motor_Done_Action+0x18>)
 800caf6:	2202      	movs	r2, #2
 800caf8:	705a      	strb	r2, [r3, #1]
    UTIL_SEQ_SetTask(1<<CFG_TASK_MOTOR_DONE_ID, CFG_SCH_PRIO_0);
 800cafa:	2100      	movs	r1, #0
 800cafc:	2080      	movs	r0, #128	; 0x80
 800cafe:	f000 fde5 	bl	800d6cc <UTIL_SEQ_SetTask>

    return;
 800cb02:	bf00      	nop
}
 800cb04:	bd80      	pop	{r7, pc}
 800cb06:	bf00      	nop
 800cb08:	20001794 	.word	0x20001794

0800cb0c <Payload_To_Speed>:

uint16_t Payload_To_Speed(uint8_t p0, uint8_t p1)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b085      	sub	sp, #20
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	4603      	mov	r3, r0
 800cb14:	460a      	mov	r2, r1
 800cb16:	71fb      	strb	r3, [r7, #7]
 800cb18:	4613      	mov	r3, r2
 800cb1a:	71bb      	strb	r3, [r7, #6]
    uint16_t result = (p0 << 8) + p1;
 800cb1c:	79fb      	ldrb	r3, [r7, #7]
 800cb1e:	b29b      	uxth	r3, r3
 800cb20:	021b      	lsls	r3, r3, #8
 800cb22:	b29a      	uxth	r2, r3
 800cb24:	79bb      	ldrb	r3, [r7, #6]
 800cb26:	b29b      	uxth	r3, r3
 800cb28:	4413      	add	r3, r2
 800cb2a:	81fb      	strh	r3, [r7, #14]
    return result;
 800cb2c:	89fb      	ldrh	r3, [r7, #14]
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3714      	adds	r7, #20
 800cb32:	46bd      	mov	sp, r7
 800cb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb38:	4770      	bx	lr
	...

0800cb3c <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b08a      	sub	sp, #40	; 0x28
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 800cb44:	2300      	movs	r3, #0
 800cb46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	623b      	str	r3, [r7, #32]

  switch (event_pckt->evt)
 800cb50:	6a3b      	ldr	r3, [r7, #32]
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	2bff      	cmp	r3, #255	; 0xff
 800cb56:	d15e      	bne.n	800cc16 <Custom_STM_Event_Handler+0xda>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800cb58:	6a3b      	ldr	r3, [r7, #32]
 800cb5a:	3302      	adds	r3, #2
 800cb5c:	61fb      	str	r3, [r7, #28]
      switch (blecore_evt->ecode)
 800cb5e:	69fb      	ldr	r3, [r7, #28]
 800cb60:	881b      	ldrh	r3, [r3, #0]
 800cb62:	b29b      	uxth	r3, r3
 800cb64:	f640 4214 	movw	r2, #3092	; 0xc14
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d04e      	beq.n	800cc0a <Custom_STM_Event_Handler+0xce>
 800cb6c:	f640 4214 	movw	r2, #3092	; 0xc14
 800cb70:	4293      	cmp	r3, r2
 800cb72:	dc4c      	bgt.n	800cc0e <Custom_STM_Event_Handler+0xd2>
 800cb74:	f640 4201 	movw	r2, #3073	; 0xc01
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d003      	beq.n	800cb84 <Custom_STM_Event_Handler+0x48>
 800cb7c:	f640 4213 	movw	r2, #3091	; 0xc13
 800cb80:	4293      	cmp	r3, r2

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 800cb82:	e047      	b.n	800cc14 <Custom_STM_Event_Handler+0xd8>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800cb84:	69fb      	ldr	r3, [r7, #28]
 800cb86:	3302      	adds	r3, #2
 800cb88:	61bb      	str	r3, [r7, #24]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomState_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 800cb8a:	69bb      	ldr	r3, [r7, #24]
 800cb8c:	885b      	ldrh	r3, [r3, #2]
 800cb8e:	b29b      	uxth	r3, r3
 800cb90:	461a      	mov	r2, r3
 800cb92:	4b24      	ldr	r3, [pc, #144]	; (800cc24 <Custom_STM_Event_Handler+0xe8>)
 800cb94:	889b      	ldrh	r3, [r3, #4]
 800cb96:	3302      	adds	r3, #2
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d119      	bne.n	800cbd0 <Custom_STM_Event_Handler+0x94>
            return_value = SVCCTL_EvtAckFlowEnable;
 800cb9c:	2301      	movs	r3, #1
 800cb9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            switch (attribute_modified->Attr_Data[0])
 800cba2:	69bb      	ldr	r3, [r7, #24]
 800cba4:	7a1b      	ldrb	r3, [r3, #8]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d002      	beq.n	800cbb0 <Custom_STM_Event_Handler+0x74>
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d008      	beq.n	800cbc0 <Custom_STM_Event_Handler+0x84>
              break;
 800cbae:	e02b      	b.n	800cc08 <Custom_STM_Event_Handler+0xcc>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_STATE_C_NOTIFY_DISABLED_EVT;
 800cbb0:	2303      	movs	r3, #3
 800cbb2:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800cbb4:	f107 0308 	add.w	r3, r7, #8
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f7ff fde3 	bl	800c784 <Custom_STM_App_Notification>
                break;
 800cbbe:	e023      	b.n	800cc08 <Custom_STM_Event_Handler+0xcc>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_STATE_C_NOTIFY_ENABLED_EVT;
 800cbc0:	2302      	movs	r3, #2
 800cbc2:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 800cbc4:	f107 0308 	add.w	r3, r7, #8
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7ff fddb 	bl	800c784 <Custom_STM_App_Notification>
                break;
 800cbce:	e01b      	b.n	800cc08 <Custom_STM_Event_Handler+0xcc>
          else if (attribute_modified->Attr_Handle == (CustomContext.CustomGoal_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 800cbd0:	69bb      	ldr	r3, [r7, #24]
 800cbd2:	885b      	ldrh	r3, [r3, #2]
 800cbd4:	b29b      	uxth	r3, r3
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	4b12      	ldr	r3, [pc, #72]	; (800cc24 <Custom_STM_Event_Handler+0xe8>)
 800cbda:	885b      	ldrh	r3, [r3, #2]
 800cbdc:	3301      	adds	r3, #1
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d117      	bne.n	800cc12 <Custom_STM_Event_Handler+0xd6>
            return_value = SVCCTL_EvtAckFlowEnable;
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            Notification.Custom_Evt_Opcode = CUSTOM_STM_GOAL_C_WRITE_NO_RESP_EVT;
 800cbe8:	2301      	movs	r3, #1
 800cbea:	723b      	strb	r3, [r7, #8]
            Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800cbec:	69bb      	ldr	r3, [r7, #24]
 800cbee:	88db      	ldrh	r3, [r3, #6]
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	743b      	strb	r3, [r7, #16]
            Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800cbf6:	69bb      	ldr	r3, [r7, #24]
 800cbf8:	3308      	adds	r3, #8
 800cbfa:	60fb      	str	r3, [r7, #12]
            Custom_STM_App_Notification(&Notification);
 800cbfc:	f107 0308 	add.w	r3, r7, #8
 800cc00:	4618      	mov	r0, r3
 800cc02:	f7ff fdbf 	bl	800c784 <Custom_STM_App_Notification>
          break;
 800cc06:	e004      	b.n	800cc12 <Custom_STM_Event_Handler+0xd6>
 800cc08:	e003      	b.n	800cc12 <Custom_STM_Event_Handler+0xd6>
          break;
 800cc0a:	bf00      	nop
 800cc0c:	e004      	b.n	800cc18 <Custom_STM_Event_Handler+0xdc>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 800cc0e:	bf00      	nop
 800cc10:	e002      	b.n	800cc18 <Custom_STM_Event_Handler+0xdc>
          break;
 800cc12:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800cc14:	e000      	b.n	800cc18 <Custom_STM_Event_Handler+0xdc>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 800cc16:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 800cc18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end Custom_STM_Event_Handler */
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3728      	adds	r7, #40	; 0x28
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}
 800cc24:	20001890 	.word	0x20001890

0800cc28 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b08c      	sub	sp, #48	; 0x30
 800cc2c:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800cc2e:	2392      	movs	r3, #146	; 0x92
 800cc30:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 800cc32:	4880      	ldr	r0, [pc, #512]	; (800ce34 <SVCCTL_InitCustomSvc+0x20c>)
 800cc34:	f7fd f9c0 	bl	8009fb8 <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 800cc38:	2306      	movs	r3, #6
 800cc3a:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_SERVER_ARM_UUID(uuid.Char_UUID_128);
 800cc3c:	238f      	movs	r3, #143	; 0x8f
 800cc3e:	713b      	strb	r3, [r7, #4]
 800cc40:	23e5      	movs	r3, #229	; 0xe5
 800cc42:	717b      	strb	r3, [r7, #5]
 800cc44:	23b3      	movs	r3, #179	; 0xb3
 800cc46:	71bb      	strb	r3, [r7, #6]
 800cc48:	23d5      	movs	r3, #213	; 0xd5
 800cc4a:	71fb      	strb	r3, [r7, #7]
 800cc4c:	232e      	movs	r3, #46	; 0x2e
 800cc4e:	723b      	strb	r3, [r7, #8]
 800cc50:	237f      	movs	r3, #127	; 0x7f
 800cc52:	727b      	strb	r3, [r7, #9]
 800cc54:	234a      	movs	r3, #74	; 0x4a
 800cc56:	72bb      	strb	r3, [r7, #10]
 800cc58:	2398      	movs	r3, #152	; 0x98
 800cc5a:	72fb      	strb	r3, [r7, #11]
 800cc5c:	232a      	movs	r3, #42	; 0x2a
 800cc5e:	733b      	strb	r3, [r7, #12]
 800cc60:	2348      	movs	r3, #72	; 0x48
 800cc62:	737b      	strb	r3, [r7, #13]
 800cc64:	237a      	movs	r3, #122	; 0x7a
 800cc66:	73bb      	strb	r3, [r7, #14]
 800cc68:	23cc      	movs	r3, #204	; 0xcc
 800cc6a:	73fb      	strb	r3, [r7, #15]
 800cc6c:	2340      	movs	r3, #64	; 0x40
 800cc6e:	743b      	strb	r3, [r7, #16]
 800cc70:	23fe      	movs	r3, #254	; 0xfe
 800cc72:	747b      	strb	r3, [r7, #17]
 800cc74:	2300      	movs	r3, #0
 800cc76:	74bb      	strb	r3, [r7, #18]
 800cc78:	2300      	movs	r3, #0
 800cc7a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 800cc7c:	7dbb      	ldrb	r3, [r7, #22]
 800cc7e:	1d39      	adds	r1, r7, #4
 800cc80:	4a6d      	ldr	r2, [pc, #436]	; (800ce38 <SVCCTL_InitCustomSvc+0x210>)
 800cc82:	9200      	str	r2, [sp, #0]
 800cc84:	2201      	movs	r2, #1
 800cc86:	2002      	movs	r0, #2
 800cc88:	f7fc fc5f 	bl	800954a <aci_gatt_add_service>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomArmHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800cc90:	7dfb      	ldrb	r3, [r7, #23]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d00f      	beq.n	800ccb6 <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: Arm, error code: 0x%x \n\r", ret);
 800cc96:	4869      	ldr	r0, [pc, #420]	; (800ce3c <SVCCTL_InitCustomSvc+0x214>)
 800cc98:	f7fe f80a 	bl	800acb0 <DbgTraceGetFileName>
 800cc9c:	4601      	mov	r1, r0
 800cc9e:	f44f 739b 	mov.w	r3, #310	; 0x136
 800cca2:	4a67      	ldr	r2, [pc, #412]	; (800ce40 <SVCCTL_InitCustomSvc+0x218>)
 800cca4:	4867      	ldr	r0, [pc, #412]	; (800ce44 <SVCCTL_InitCustomSvc+0x21c>)
 800cca6:	f000 fef3 	bl	800da90 <iprintf>
 800ccaa:	7dfb      	ldrb	r3, [r7, #23]
 800ccac:	4619      	mov	r1, r3
 800ccae:	4866      	ldr	r0, [pc, #408]	; (800ce48 <SVCCTL_InitCustomSvc+0x220>)
 800ccb0:	f000 feee 	bl	800da90 <iprintf>
 800ccb4:	e00c      	b.n	800ccd0 <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: Arm \n\r");
 800ccb6:	4861      	ldr	r0, [pc, #388]	; (800ce3c <SVCCTL_InitCustomSvc+0x214>)
 800ccb8:	f7fd fffa 	bl	800acb0 <DbgTraceGetFileName>
 800ccbc:	4601      	mov	r1, r0
 800ccbe:	f44f 739d 	mov.w	r3, #314	; 0x13a
 800ccc2:	4a5f      	ldr	r2, [pc, #380]	; (800ce40 <SVCCTL_InitCustomSvc+0x218>)
 800ccc4:	485f      	ldr	r0, [pc, #380]	; (800ce44 <SVCCTL_InitCustomSvc+0x21c>)
 800ccc6:	f000 fee3 	bl	800da90 <iprintf>
 800ccca:	4860      	ldr	r0, [pc, #384]	; (800ce4c <SVCCTL_InitCustomSvc+0x224>)
 800cccc:	f000 fee0 	bl	800da90 <iprintf>
  }

  /**
   *  Goal_Char
   */
  COPY_GOAL_CHAR_UUID(uuid.Char_UUID_128);
 800ccd0:	2319      	movs	r3, #25
 800ccd2:	713b      	strb	r3, [r7, #4]
 800ccd4:	23ed      	movs	r3, #237	; 0xed
 800ccd6:	717b      	strb	r3, [r7, #5]
 800ccd8:	2382      	movs	r3, #130	; 0x82
 800ccda:	71bb      	strb	r3, [r7, #6]
 800ccdc:	23ae      	movs	r3, #174	; 0xae
 800ccde:	71fb      	strb	r3, [r7, #7]
 800cce0:	23ed      	movs	r3, #237	; 0xed
 800cce2:	723b      	strb	r3, [r7, #8]
 800cce4:	2321      	movs	r3, #33	; 0x21
 800cce6:	727b      	strb	r3, [r7, #9]
 800cce8:	234c      	movs	r3, #76	; 0x4c
 800ccea:	72bb      	strb	r3, [r7, #10]
 800ccec:	239d      	movs	r3, #157	; 0x9d
 800ccee:	72fb      	strb	r3, [r7, #11]
 800ccf0:	2341      	movs	r3, #65	; 0x41
 800ccf2:	733b      	strb	r3, [r7, #12]
 800ccf4:	2345      	movs	r3, #69	; 0x45
 800ccf6:	737b      	strb	r3, [r7, #13]
 800ccf8:	2322      	movs	r3, #34	; 0x22
 800ccfa:	73bb      	strb	r3, [r7, #14]
 800ccfc:	238e      	movs	r3, #142	; 0x8e
 800ccfe:	73fb      	strb	r3, [r7, #15]
 800cd00:	2341      	movs	r3, #65	; 0x41
 800cd02:	743b      	strb	r3, [r7, #16]
 800cd04:	23fe      	movs	r3, #254	; 0xfe
 800cd06:	747b      	strb	r3, [r7, #17]
 800cd08:	2300      	movs	r3, #0
 800cd0a:	74bb      	strb	r3, [r7, #18]
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomArmHdle,
 800cd10:	4b49      	ldr	r3, [pc, #292]	; (800ce38 <SVCCTL_InitCustomSvc+0x210>)
 800cd12:	8818      	ldrh	r0, [r3, #0]
 800cd14:	4b4e      	ldr	r3, [pc, #312]	; (800ce50 <SVCCTL_InitCustomSvc+0x228>)
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	1d3a      	adds	r2, r7, #4
 800cd1c:	494d      	ldr	r1, [pc, #308]	; (800ce54 <SVCCTL_InitCustomSvc+0x22c>)
 800cd1e:	9105      	str	r1, [sp, #20]
 800cd20:	2101      	movs	r1, #1
 800cd22:	9104      	str	r1, [sp, #16]
 800cd24:	2110      	movs	r1, #16
 800cd26:	9103      	str	r1, [sp, #12]
 800cd28:	2101      	movs	r1, #1
 800cd2a:	9102      	str	r1, [sp, #8]
 800cd2c:	2100      	movs	r1, #0
 800cd2e:	9101      	str	r1, [sp, #4]
 800cd30:	2106      	movs	r1, #6
 800cd32:	9100      	str	r1, [sp, #0]
 800cd34:	2102      	movs	r1, #2
 800cd36:	f7fc fcde 	bl	80096f6 <aci_gatt_add_char>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomGoal_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800cd3e:	7dfb      	ldrb	r3, [r7, #23]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d00f      	beq.n	800cd64 <SVCCTL_InitCustomSvc+0x13c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : GOAL_C, error code: 0x%x \n\r", ret);
 800cd44:	483d      	ldr	r0, [pc, #244]	; (800ce3c <SVCCTL_InitCustomSvc+0x214>)
 800cd46:	f7fd ffb3 	bl	800acb0 <DbgTraceGetFileName>
 800cd4a:	4601      	mov	r1, r0
 800cd4c:	f44f 73a6 	mov.w	r3, #332	; 0x14c
 800cd50:	4a3b      	ldr	r2, [pc, #236]	; (800ce40 <SVCCTL_InitCustomSvc+0x218>)
 800cd52:	483c      	ldr	r0, [pc, #240]	; (800ce44 <SVCCTL_InitCustomSvc+0x21c>)
 800cd54:	f000 fe9c 	bl	800da90 <iprintf>
 800cd58:	7dfb      	ldrb	r3, [r7, #23]
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	483e      	ldr	r0, [pc, #248]	; (800ce58 <SVCCTL_InitCustomSvc+0x230>)
 800cd5e:	f000 fe97 	bl	800da90 <iprintf>
 800cd62:	e00c      	b.n	800cd7e <SVCCTL_InitCustomSvc+0x156>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : GOAL_C \n\r");
 800cd64:	4835      	ldr	r0, [pc, #212]	; (800ce3c <SVCCTL_InitCustomSvc+0x214>)
 800cd66:	f7fd ffa3 	bl	800acb0 <DbgTraceGetFileName>
 800cd6a:	4601      	mov	r1, r0
 800cd6c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800cd70:	4a33      	ldr	r2, [pc, #204]	; (800ce40 <SVCCTL_InitCustomSvc+0x218>)
 800cd72:	4834      	ldr	r0, [pc, #208]	; (800ce44 <SVCCTL_InitCustomSvc+0x21c>)
 800cd74:	f000 fe8c 	bl	800da90 <iprintf>
 800cd78:	4838      	ldr	r0, [pc, #224]	; (800ce5c <SVCCTL_InitCustomSvc+0x234>)
 800cd7a:	f000 fe89 	bl	800da90 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  State_Char
   */
  COPY_STATE_CHAR_UUID(uuid.Char_UUID_128);
 800cd7e:	2319      	movs	r3, #25
 800cd80:	713b      	strb	r3, [r7, #4]
 800cd82:	23ed      	movs	r3, #237	; 0xed
 800cd84:	717b      	strb	r3, [r7, #5]
 800cd86:	2382      	movs	r3, #130	; 0x82
 800cd88:	71bb      	strb	r3, [r7, #6]
 800cd8a:	23ae      	movs	r3, #174	; 0xae
 800cd8c:	71fb      	strb	r3, [r7, #7]
 800cd8e:	23ed      	movs	r3, #237	; 0xed
 800cd90:	723b      	strb	r3, [r7, #8]
 800cd92:	2321      	movs	r3, #33	; 0x21
 800cd94:	727b      	strb	r3, [r7, #9]
 800cd96:	234c      	movs	r3, #76	; 0x4c
 800cd98:	72bb      	strb	r3, [r7, #10]
 800cd9a:	239d      	movs	r3, #157	; 0x9d
 800cd9c:	72fb      	strb	r3, [r7, #11]
 800cd9e:	2341      	movs	r3, #65	; 0x41
 800cda0:	733b      	strb	r3, [r7, #12]
 800cda2:	2345      	movs	r3, #69	; 0x45
 800cda4:	737b      	strb	r3, [r7, #13]
 800cda6:	2322      	movs	r3, #34	; 0x22
 800cda8:	73bb      	strb	r3, [r7, #14]
 800cdaa:	238e      	movs	r3, #142	; 0x8e
 800cdac:	73fb      	strb	r3, [r7, #15]
 800cdae:	2342      	movs	r3, #66	; 0x42
 800cdb0:	743b      	strb	r3, [r7, #16]
 800cdb2:	23fe      	movs	r3, #254	; 0xfe
 800cdb4:	747b      	strb	r3, [r7, #17]
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	74bb      	strb	r3, [r7, #18]
 800cdba:	2300      	movs	r3, #0
 800cdbc:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomArmHdle,
 800cdbe:	4b1e      	ldr	r3, [pc, #120]	; (800ce38 <SVCCTL_InitCustomSvc+0x210>)
 800cdc0:	8818      	ldrh	r0, [r3, #0]
 800cdc2:	4b27      	ldr	r3, [pc, #156]	; (800ce60 <SVCCTL_InitCustomSvc+0x238>)
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	b29b      	uxth	r3, r3
 800cdc8:	1d3a      	adds	r2, r7, #4
 800cdca:	4926      	ldr	r1, [pc, #152]	; (800ce64 <SVCCTL_InitCustomSvc+0x23c>)
 800cdcc:	9105      	str	r1, [sp, #20]
 800cdce:	2101      	movs	r1, #1
 800cdd0:	9104      	str	r1, [sp, #16]
 800cdd2:	2110      	movs	r1, #16
 800cdd4:	9103      	str	r1, [sp, #12]
 800cdd6:	2101      	movs	r1, #1
 800cdd8:	9102      	str	r1, [sp, #8]
 800cdda:	2100      	movs	r1, #0
 800cddc:	9101      	str	r1, [sp, #4]
 800cdde:	2110      	movs	r1, #16
 800cde0:	9100      	str	r1, [sp, #0]
 800cde2:	2102      	movs	r1, #2
 800cde4:	f7fc fc87 	bl	80096f6 <aci_gatt_add_char>
 800cde8:	4603      	mov	r3, r0
 800cdea:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomState_CHdle));
  if (ret != BLE_STATUS_SUCCESS)
 800cdec:	7dfb      	ldrb	r3, [r7, #23]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d00f      	beq.n	800ce12 <SVCCTL_InitCustomSvc+0x1ea>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : STATE_C, error code: 0x%x \n\r", ret);
 800cdf2:	4812      	ldr	r0, [pc, #72]	; (800ce3c <SVCCTL_InitCustomSvc+0x214>)
 800cdf4:	f7fd ff5c 	bl	800acb0 <DbgTraceGetFileName>
 800cdf8:	4601      	mov	r1, r0
 800cdfa:	f44f 73b3 	mov.w	r3, #358	; 0x166
 800cdfe:	4a10      	ldr	r2, [pc, #64]	; (800ce40 <SVCCTL_InitCustomSvc+0x218>)
 800ce00:	4810      	ldr	r0, [pc, #64]	; (800ce44 <SVCCTL_InitCustomSvc+0x21c>)
 800ce02:	f000 fe45 	bl	800da90 <iprintf>
 800ce06:	7dfb      	ldrb	r3, [r7, #23]
 800ce08:	4619      	mov	r1, r3
 800ce0a:	4817      	ldr	r0, [pc, #92]	; (800ce68 <SVCCTL_InitCustomSvc+0x240>)
 800ce0c:	f000 fe40 	bl	800da90 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 800ce10:	e00d      	b.n	800ce2e <SVCCTL_InitCustomSvc+0x206>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : STATE_C \n\r");
 800ce12:	480a      	ldr	r0, [pc, #40]	; (800ce3c <SVCCTL_InitCustomSvc+0x214>)
 800ce14:	f7fd ff4c 	bl	800acb0 <DbgTraceGetFileName>
 800ce18:	4601      	mov	r1, r0
 800ce1a:	f44f 73b5 	mov.w	r3, #362	; 0x16a
 800ce1e:	4a08      	ldr	r2, [pc, #32]	; (800ce40 <SVCCTL_InitCustomSvc+0x218>)
 800ce20:	4808      	ldr	r0, [pc, #32]	; (800ce44 <SVCCTL_InitCustomSvc+0x21c>)
 800ce22:	f000 fe35 	bl	800da90 <iprintf>
 800ce26:	4811      	ldr	r0, [pc, #68]	; (800ce6c <SVCCTL_InitCustomSvc+0x244>)
 800ce28:	f000 fe32 	bl	800da90 <iprintf>
  return;
 800ce2c:	bf00      	nop
}
 800ce2e:	3718      	adds	r7, #24
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	0800cb3d 	.word	0x0800cb3d
 800ce38:	20001890 	.word	0x20001890
 800ce3c:	0800fb7c 	.word	0x0800fb7c
 800ce40:	08010124 	.word	0x08010124
 800ce44:	0800fb9c 	.word	0x0800fb9c
 800ce48:	0800fbb0 	.word	0x0800fbb0
 800ce4c:	0800fbf4 	.word	0x0800fbf4
 800ce50:	2000002d 	.word	0x2000002d
 800ce54:	20001892 	.word	0x20001892
 800ce58:	0800fc24 	.word	0x0800fc24
 800ce5c:	0800fc6c 	.word	0x0800fc6c
 800ce60:	2000002e 	.word	0x2000002e
 800ce64:	20001894 	.word	0x20001894
 800ce68:	0800fca0 	.word	0x0800fca0
 800ce6c:	0800fce8 	.word	0x0800fce8

0800ce70 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b086      	sub	sp, #24
 800ce74:	af02      	add	r7, sp, #8
 800ce76:	4603      	mov	r3, r0
 800ce78:	6039      	str	r1, [r7, #0]
 800ce7a:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800ce7c:	2392      	movs	r3, #146	; 0x92
 800ce7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 800ce80:	79fb      	ldrb	r3, [r7, #7]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d002      	beq.n	800ce8c <Custom_STM_App_Update_Char+0x1c>
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d02f      	beq.n	800ceea <Custom_STM_App_Update_Char+0x7a>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 800ce8a:	e05d      	b.n	800cf48 <Custom_STM_App_Update_Char+0xd8>
      ret = aci_gatt_update_char_value(CustomContext.CustomArmHdle,
 800ce8c:	4b31      	ldr	r3, [pc, #196]	; (800cf54 <Custom_STM_App_Update_Char+0xe4>)
 800ce8e:	8818      	ldrh	r0, [r3, #0]
 800ce90:	4b30      	ldr	r3, [pc, #192]	; (800cf54 <Custom_STM_App_Update_Char+0xe4>)
 800ce92:	8859      	ldrh	r1, [r3, #2]
 800ce94:	4b30      	ldr	r3, [pc, #192]	; (800cf58 <Custom_STM_App_Update_Char+0xe8>)
 800ce96:	781a      	ldrb	r2, [r3, #0]
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	9300      	str	r3, [sp, #0]
 800ce9c:	4613      	mov	r3, r2
 800ce9e:	2200      	movs	r2, #0
 800cea0:	f7fc fd31 	bl	8009906 <aci_gatt_update_char_value>
 800cea4:	4603      	mov	r3, r0
 800cea6:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800cea8:	7bfb      	ldrb	r3, [r7, #15]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d00f      	beq.n	800cece <Custom_STM_App_Update_Char+0x5e>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value GOAL_C command, result : 0x%x \n\r", ret);
 800ceae:	482b      	ldr	r0, [pc, #172]	; (800cf5c <Custom_STM_App_Update_Char+0xec>)
 800ceb0:	f7fd fefe 	bl	800acb0 <DbgTraceGetFileName>
 800ceb4:	4601      	mov	r1, r0
 800ceb6:	f240 1391 	movw	r3, #401	; 0x191
 800ceba:	4a29      	ldr	r2, [pc, #164]	; (800cf60 <Custom_STM_App_Update_Char+0xf0>)
 800cebc:	4829      	ldr	r0, [pc, #164]	; (800cf64 <Custom_STM_App_Update_Char+0xf4>)
 800cebe:	f000 fde7 	bl	800da90 <iprintf>
 800cec2:	7bfb      	ldrb	r3, [r7, #15]
 800cec4:	4619      	mov	r1, r3
 800cec6:	4828      	ldr	r0, [pc, #160]	; (800cf68 <Custom_STM_App_Update_Char+0xf8>)
 800cec8:	f000 fde2 	bl	800da90 <iprintf>
      break;
 800cecc:	e03c      	b.n	800cf48 <Custom_STM_App_Update_Char+0xd8>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value GOAL_C command\n\r");
 800cece:	4823      	ldr	r0, [pc, #140]	; (800cf5c <Custom_STM_App_Update_Char+0xec>)
 800ced0:	f7fd feee 	bl	800acb0 <DbgTraceGetFileName>
 800ced4:	4601      	mov	r1, r0
 800ced6:	f240 1395 	movw	r3, #405	; 0x195
 800ceda:	4a21      	ldr	r2, [pc, #132]	; (800cf60 <Custom_STM_App_Update_Char+0xf0>)
 800cedc:	4821      	ldr	r0, [pc, #132]	; (800cf64 <Custom_STM_App_Update_Char+0xf4>)
 800cede:	f000 fdd7 	bl	800da90 <iprintf>
 800cee2:	4822      	ldr	r0, [pc, #136]	; (800cf6c <Custom_STM_App_Update_Char+0xfc>)
 800cee4:	f000 fdd4 	bl	800da90 <iprintf>
      break;
 800cee8:	e02e      	b.n	800cf48 <Custom_STM_App_Update_Char+0xd8>
      ret = aci_gatt_update_char_value(CustomContext.CustomArmHdle,
 800ceea:	4b1a      	ldr	r3, [pc, #104]	; (800cf54 <Custom_STM_App_Update_Char+0xe4>)
 800ceec:	8818      	ldrh	r0, [r3, #0]
 800ceee:	4b19      	ldr	r3, [pc, #100]	; (800cf54 <Custom_STM_App_Update_Char+0xe4>)
 800cef0:	8899      	ldrh	r1, [r3, #4]
 800cef2:	4b1f      	ldr	r3, [pc, #124]	; (800cf70 <Custom_STM_App_Update_Char+0x100>)
 800cef4:	781a      	ldrb	r2, [r3, #0]
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	9300      	str	r3, [sp, #0]
 800cefa:	4613      	mov	r3, r2
 800cefc:	2200      	movs	r2, #0
 800cefe:	f7fc fd02 	bl	8009906 <aci_gatt_update_char_value>
 800cf02:	4603      	mov	r3, r0
 800cf04:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 800cf06:	7bfb      	ldrb	r3, [r7, #15]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d00f      	beq.n	800cf2c <Custom_STM_App_Update_Char+0xbc>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value STATE_C command, result : 0x%x \n\r", ret);
 800cf0c:	4813      	ldr	r0, [pc, #76]	; (800cf5c <Custom_STM_App_Update_Char+0xec>)
 800cf0e:	f7fd fecf 	bl	800acb0 <DbgTraceGetFileName>
 800cf12:	4601      	mov	r1, r0
 800cf14:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 800cf18:	4a11      	ldr	r2, [pc, #68]	; (800cf60 <Custom_STM_App_Update_Char+0xf0>)
 800cf1a:	4812      	ldr	r0, [pc, #72]	; (800cf64 <Custom_STM_App_Update_Char+0xf4>)
 800cf1c:	f000 fdb8 	bl	800da90 <iprintf>
 800cf20:	7bfb      	ldrb	r3, [r7, #15]
 800cf22:	4619      	mov	r1, r3
 800cf24:	4813      	ldr	r0, [pc, #76]	; (800cf74 <Custom_STM_App_Update_Char+0x104>)
 800cf26:	f000 fdb3 	bl	800da90 <iprintf>
      break;
 800cf2a:	e00c      	b.n	800cf46 <Custom_STM_App_Update_Char+0xd6>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value STATE_C command\n\r");
 800cf2c:	480b      	ldr	r0, [pc, #44]	; (800cf5c <Custom_STM_App_Update_Char+0xec>)
 800cf2e:	f7fd febf 	bl	800acb0 <DbgTraceGetFileName>
 800cf32:	4601      	mov	r1, r0
 800cf34:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
 800cf38:	4a09      	ldr	r2, [pc, #36]	; (800cf60 <Custom_STM_App_Update_Char+0xf0>)
 800cf3a:	480a      	ldr	r0, [pc, #40]	; (800cf64 <Custom_STM_App_Update_Char+0xf4>)
 800cf3c:	f000 fda8 	bl	800da90 <iprintf>
 800cf40:	480d      	ldr	r0, [pc, #52]	; (800cf78 <Custom_STM_App_Update_Char+0x108>)
 800cf42:	f000 fda5 	bl	800da90 <iprintf>
      break;
 800cf46:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800cf48:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3710      	adds	r7, #16
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}
 800cf52:	bf00      	nop
 800cf54:	20001890 	.word	0x20001890
 800cf58:	2000002d 	.word	0x2000002d
 800cf5c:	0800fb7c 	.word	0x0800fb7c
 800cf60:	0801013c 	.word	0x0801013c
 800cf64:	0800fb9c 	.word	0x0800fb9c
 800cf68:	0800fd1c 	.word	0x0800fd1c
 800cf6c:	0800fd64 	.word	0x0800fd64
 800cf70:	2000002e 	.word	0x2000002e
 800cf74:	0800fd9c 	.word	0x0800fd9c
 800cf78:	0800fde4 	.word	0x0800fde4

0800cf7c <LL_PWR_EnableBootC2>:
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800cf80:	4b05      	ldr	r3, [pc, #20]	; (800cf98 <LL_PWR_EnableBootC2+0x1c>)
 800cf82:	68db      	ldr	r3, [r3, #12]
 800cf84:	4a04      	ldr	r2, [pc, #16]	; (800cf98 <LL_PWR_EnableBootC2+0x1c>)
 800cf86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf8a:	60d3      	str	r3, [r2, #12]
}
 800cf8c:	bf00      	nop
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf94:	4770      	bx	lr
 800cf96:	bf00      	nop
 800cf98:	58000400 	.word	0x58000400

0800cf9c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b083      	sub	sp, #12
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800cfa4:	4b06      	ldr	r3, [pc, #24]	; (800cfc0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800cfa6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800cfaa:	4905      	ldr	r1, [pc, #20]	; (800cfc0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	4313      	orrs	r3, r2
 800cfb0:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800cfb4:	bf00      	nop
 800cfb6:	370c      	adds	r7, #12
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr
 800cfc0:	58000800 	.word	0x58000800

0800cfc4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b083      	sub	sp, #12
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800cfcc:	4b05      	ldr	r3, [pc, #20]	; (800cfe4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800cfce:	6a1a      	ldr	r2, [r3, #32]
 800cfd0:	4904      	ldr	r1, [pc, #16]	; (800cfe4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	4313      	orrs	r3, r2
 800cfd6:	620b      	str	r3, [r1, #32]
}
 800cfd8:	bf00      	nop
 800cfda:	370c      	adds	r7, #12
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe2:	4770      	bx	lr
 800cfe4:	58000800 	.word	0x58000800

0800cfe8 <LL_AHB3_GRP1_EnableClock>:
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b085      	sub	sp, #20
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800cff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800cff4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cff6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	4313      	orrs	r3, r2
 800cffe:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800d000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d004:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	4013      	ands	r3, r2
 800d00a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d00c:	68fb      	ldr	r3, [r7, #12]
}
 800d00e:	bf00      	nop
 800d010:	3714      	adds	r7, #20
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr

0800d01a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800d01a:	b480      	push	{r7}
 800d01c:	b085      	sub	sp, #20
 800d01e:	af00      	add	r7, sp, #0
 800d020:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800d022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d026:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800d02a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	4313      	orrs	r3, r2
 800d032:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800d036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d03a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	4013      	ands	r3, r2
 800d042:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d044:	68fb      	ldr	r3, [r7, #12]
}
 800d046:	bf00      	nop
 800d048:	3714      	adds	r7, #20
 800d04a:	46bd      	mov	sp, r7
 800d04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d050:	4770      	bx	lr

0800d052 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800d052:	b480      	push	{r7}
 800d054:	b083      	sub	sp, #12
 800d056:	af00      	add	r7, sp, #0
 800d058:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	601a      	str	r2, [r3, #0]
}
 800d066:	bf00      	nop
 800d068:	370c      	adds	r7, #12
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr

0800d072 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800d072:	b480      	push	{r7}
 800d074:	b083      	sub	sp, #12
 800d076:	af00      	add	r7, sp, #0
 800d078:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f043 0201 	orr.w	r2, r3, #1
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	601a      	str	r2, [r3, #0]
}
 800d086:	bf00      	nop
 800d088:	370c      	adds	r7, #12
 800d08a:	46bd      	mov	sp, r7
 800d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d090:	4770      	bx	lr

0800d092 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d092:	b480      	push	{r7}
 800d094:	b083      	sub	sp, #12
 800d096:	af00      	add	r7, sp, #0
 800d098:	6078      	str	r0, [r7, #4]
 800d09a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	685a      	ldr	r2, [r3, #4]
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	041b      	lsls	r3, r3, #16
 800d0a4:	43db      	mvns	r3, r3
 800d0a6:	401a      	ands	r2, r3
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	605a      	str	r2, [r3, #4]
}
 800d0ac:	bf00      	nop
 800d0ae:	370c      	adds	r7, #12
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b6:	4770      	bx	lr

0800d0b8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b083      	sub	sp, #12
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	685a      	ldr	r2, [r3, #4]
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	041b      	lsls	r3, r3, #16
 800d0ca:	431a      	orrs	r2, r3
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	605a      	str	r2, [r3, #4]
}
 800d0d0:	bf00      	nop
 800d0d2:	370c      	adds	r7, #12
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0da:	4770      	bx	lr

0800d0dc <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b083      	sub	sp, #12
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
 800d0e4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	685a      	ldr	r2, [r3, #4]
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	43db      	mvns	r3, r3
 800d0ee:	401a      	ands	r2, r3
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	605a      	str	r2, [r3, #4]
}
 800d0f4:	bf00      	nop
 800d0f6:	370c      	adds	r7, #12
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fe:	4770      	bx	lr

0800d100 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d100:	b480      	push	{r7}
 800d102:	b083      	sub	sp, #12
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	683a      	ldr	r2, [r7, #0]
 800d10e:	609a      	str	r2, [r3, #8]
}
 800d110:	bf00      	nop
 800d112:	370c      	adds	r7, #12
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr

0800d11c <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b083      	sub	sp, #12
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	041a      	lsls	r2, r3, #16
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	609a      	str	r2, [r3, #8]
}
 800d12e:	bf00      	nop
 800d130:	370c      	adds	r7, #12
 800d132:	46bd      	mov	sp, r7
 800d134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d138:	4770      	bx	lr

0800d13a <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d13a:	b480      	push	{r7}
 800d13c:	b083      	sub	sp, #12
 800d13e:	af00      	add	r7, sp, #0
 800d140:	6078      	str	r0, [r7, #4]
 800d142:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	68da      	ldr	r2, [r3, #12]
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	4013      	ands	r3, r2
 800d14c:	683a      	ldr	r2, [r7, #0]
 800d14e:	429a      	cmp	r2, r3
 800d150:	d101      	bne.n	800d156 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800d152:	2301      	movs	r3, #1
 800d154:	e000      	b.n	800d158 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800d156:	2300      	movs	r3, #0
}
 800d158:	4618      	mov	r0, r3
 800d15a:	370c      	adds	r7, #12
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr

0800d164 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800d164:	b480      	push	{r7}
 800d166:	b083      	sub	sp, #12
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	69da      	ldr	r2, [r3, #28]
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	4013      	ands	r3, r2
 800d176:	683a      	ldr	r2, [r7, #0]
 800d178:	429a      	cmp	r2, r3
 800d17a:	d101      	bne.n	800d180 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800d17c:	2301      	movs	r3, #1
 800d17e:	e000      	b.n	800d182 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800d180:	2300      	movs	r3, #0
}
 800d182:	4618      	mov	r0, r3
 800d184:	370c      	adds	r7, #12
 800d186:	46bd      	mov	sp, r7
 800d188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18c:	4770      	bx	lr
	...

0800d190 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800d190:	b580      	push	{r7, lr}
 800d192:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800d194:	2102      	movs	r1, #2
 800d196:	4818      	ldr	r0, [pc, #96]	; (800d1f8 <HW_IPCC_Rx_Handler+0x68>)
 800d198:	f7ff ffe4 	bl	800d164 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d008      	beq.n	800d1b4 <HW_IPCC_Rx_Handler+0x24>
 800d1a2:	4b15      	ldr	r3, [pc, #84]	; (800d1f8 <HW_IPCC_Rx_Handler+0x68>)
 800d1a4:	685b      	ldr	r3, [r3, #4]
 800d1a6:	f003 0302 	and.w	r3, r3, #2
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d102      	bne.n	800d1b4 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800d1ae:	f000 f8d5 	bl	800d35c <HW_IPCC_SYS_EvtHandler>
 800d1b2:	e01e      	b.n	800d1f2 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800d1b4:	2101      	movs	r1, #1
 800d1b6:	4810      	ldr	r0, [pc, #64]	; (800d1f8 <HW_IPCC_Rx_Handler+0x68>)
 800d1b8:	f7ff ffd4 	bl	800d164 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d008      	beq.n	800d1d4 <HW_IPCC_Rx_Handler+0x44>
 800d1c2:	4b0d      	ldr	r3, [pc, #52]	; (800d1f8 <HW_IPCC_Rx_Handler+0x68>)
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	f003 0301 	and.w	r3, r3, #1
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d102      	bne.n	800d1d4 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800d1ce:	f000 f889 	bl	800d2e4 <HW_IPCC_BLE_EvtHandler>
 800d1d2:	e00e      	b.n	800d1f2 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800d1d4:	2108      	movs	r1, #8
 800d1d6:	4808      	ldr	r0, [pc, #32]	; (800d1f8 <HW_IPCC_Rx_Handler+0x68>)
 800d1d8:	f7ff ffc4 	bl	800d164 <LL_C2_IPCC_IsActiveFlag_CHx>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d008      	beq.n	800d1f4 <HW_IPCC_Rx_Handler+0x64>
 800d1e2:	4b05      	ldr	r3, [pc, #20]	; (800d1f8 <HW_IPCC_Rx_Handler+0x68>)
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	f003 0308 	and.w	r3, r3, #8
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d102      	bne.n	800d1f4 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800d1ee:	f000 f901 	bl	800d3f4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800d1f2:	bf00      	nop
 800d1f4:	bf00      	nop
}
 800d1f6:	bd80      	pop	{r7, pc}
 800d1f8:	58000c00 	.word	0x58000c00

0800d1fc <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800d200:	2102      	movs	r1, #2
 800d202:	4818      	ldr	r0, [pc, #96]	; (800d264 <HW_IPCC_Tx_Handler+0x68>)
 800d204:	f7ff ff99 	bl	800d13a <LL_C1_IPCC_IsActiveFlag_CHx>
 800d208:	4603      	mov	r3, r0
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d108      	bne.n	800d220 <HW_IPCC_Tx_Handler+0x24>
 800d20e:	4b15      	ldr	r3, [pc, #84]	; (800d264 <HW_IPCC_Tx_Handler+0x68>)
 800d210:	685b      	ldr	r3, [r3, #4]
 800d212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d216:	2b00      	cmp	r3, #0
 800d218:	d102      	bne.n	800d220 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800d21a:	f000 f893 	bl	800d344 <HW_IPCC_SYS_CmdEvtHandler>
 800d21e:	e01e      	b.n	800d25e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800d220:	2108      	movs	r1, #8
 800d222:	4810      	ldr	r0, [pc, #64]	; (800d264 <HW_IPCC_Tx_Handler+0x68>)
 800d224:	f7ff ff89 	bl	800d13a <LL_C1_IPCC_IsActiveFlag_CHx>
 800d228:	4603      	mov	r3, r0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d108      	bne.n	800d240 <HW_IPCC_Tx_Handler+0x44>
 800d22e:	4b0d      	ldr	r3, [pc, #52]	; (800d264 <HW_IPCC_Tx_Handler+0x68>)
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d236:	2b00      	cmp	r3, #0
 800d238:	d102      	bne.n	800d240 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800d23a:	f000 f8bd 	bl	800d3b8 <HW_IPCC_MM_FreeBufHandler>
 800d23e:	e00e      	b.n	800d25e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800d240:	2120      	movs	r1, #32
 800d242:	4808      	ldr	r0, [pc, #32]	; (800d264 <HW_IPCC_Tx_Handler+0x68>)
 800d244:	f7ff ff79 	bl	800d13a <LL_C1_IPCC_IsActiveFlag_CHx>
 800d248:	4603      	mov	r3, r0
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d108      	bne.n	800d260 <HW_IPCC_Tx_Handler+0x64>
 800d24e:	4b05      	ldr	r3, [pc, #20]	; (800d264 <HW_IPCC_Tx_Handler+0x68>)
 800d250:	685b      	ldr	r3, [r3, #4]
 800d252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d256:	2b00      	cmp	r3, #0
 800d258:	d102      	bne.n	800d260 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800d25a:	f000 f84f 	bl	800d2fc <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800d25e:	bf00      	nop
 800d260:	bf00      	nop
}
 800d262:	bd80      	pop	{r7, pc}
 800d264:	58000c00 	.word	0x58000c00

0800d268 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800d26c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d270:	f7ff fed3 	bl	800d01a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800d274:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d278:	f7ff fea4 	bl	800cfc4 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800d27c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800d280:	f7ff fe8c 	bl	800cf9c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800d284:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800d286:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800d288:	f7ff fe78 	bl	800cf7c <LL_PWR_EnableBootC2>

  return;
 800d28c:	bf00      	nop
}
 800d28e:	bd80      	pop	{r7, pc}

0800d290 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800d290:	b580      	push	{r7, lr}
 800d292:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800d294:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800d298:	f7ff fea6 	bl	800cfe8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800d29c:	4806      	ldr	r0, [pc, #24]	; (800d2b8 <HW_IPCC_Init+0x28>)
 800d29e:	f7ff fee8 	bl	800d072 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800d2a2:	4805      	ldr	r0, [pc, #20]	; (800d2b8 <HW_IPCC_Init+0x28>)
 800d2a4:	f7ff fed5 	bl	800d052 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800d2a8:	202c      	movs	r0, #44	; 0x2c
 800d2aa:	f7f6 fbec 	bl	8003a86 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800d2ae:	202d      	movs	r0, #45	; 0x2d
 800d2b0:	f7f6 fbe9 	bl	8003a86 <HAL_NVIC_EnableIRQ>

  return;
 800d2b4:	bf00      	nop
}
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	58000c00 	.word	0x58000c00

0800d2bc <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d2c0:	2101      	movs	r1, #1
 800d2c2:	4802      	ldr	r0, [pc, #8]	; (800d2cc <HW_IPCC_BLE_Init+0x10>)
 800d2c4:	f7ff ff0a 	bl	800d0dc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d2c8:	bf00      	nop
}
 800d2ca:	bd80      	pop	{r7, pc}
 800d2cc:	58000c00 	.word	0x58000c00

0800d2d0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 800d2d4:	2101      	movs	r1, #1
 800d2d6:	4802      	ldr	r0, [pc, #8]	; (800d2e0 <HW_IPCC_BLE_SendCmd+0x10>)
 800d2d8:	f7ff ff20 	bl	800d11c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d2dc:	bf00      	nop
}
 800d2de:	bd80      	pop	{r7, pc}
 800d2e0:	58000c00 	.word	0x58000c00

0800d2e4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800d2e8:	f7fd fb2a 	bl	800a940 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800d2ec:	2101      	movs	r1, #1
 800d2ee:	4802      	ldr	r0, [pc, #8]	; (800d2f8 <HW_IPCC_BLE_EvtHandler+0x14>)
 800d2f0:	f7ff ff06 	bl	800d100 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d2f4:	bf00      	nop
}
 800d2f6:	bd80      	pop	{r7, pc}
 800d2f8:	58000c00 	.word	0x58000c00

0800d2fc <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800d300:	2120      	movs	r1, #32
 800d302:	4803      	ldr	r0, [pc, #12]	; (800d310 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800d304:	f7ff fed8 	bl	800d0b8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800d308:	f7fd fb4a 	bl	800a9a0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800d30c:	bf00      	nop
}
 800d30e:	bd80      	pop	{r7, pc}
 800d310:	58000c00 	.word	0x58000c00

0800d314 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800d314:	b580      	push	{r7, lr}
 800d316:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d318:	2102      	movs	r1, #2
 800d31a:	4802      	ldr	r0, [pc, #8]	; (800d324 <HW_IPCC_SYS_Init+0x10>)
 800d31c:	f7ff fede 	bl	800d0dc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d320:	bf00      	nop
}
 800d322:	bd80      	pop	{r7, pc}
 800d324:	58000c00 	.word	0x58000c00

0800d328 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d32c:	2102      	movs	r1, #2
 800d32e:	4804      	ldr	r0, [pc, #16]	; (800d340 <HW_IPCC_SYS_SendCmd+0x18>)
 800d330:	f7ff fef4 	bl	800d11c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d334:	2102      	movs	r1, #2
 800d336:	4802      	ldr	r0, [pc, #8]	; (800d340 <HW_IPCC_SYS_SendCmd+0x18>)
 800d338:	f7ff feab 	bl	800d092 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800d33c:	bf00      	nop
}
 800d33e:	bd80      	pop	{r7, pc}
 800d340:	58000c00 	.word	0x58000c00

0800d344 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800d344:	b580      	push	{r7, lr}
 800d346:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800d348:	2102      	movs	r1, #2
 800d34a:	4803      	ldr	r0, [pc, #12]	; (800d358 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800d34c:	f7ff feb4 	bl	800d0b8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800d350:	f7fd fb76 	bl	800aa40 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800d354:	bf00      	nop
}
 800d356:	bd80      	pop	{r7, pc}
 800d358:	58000c00 	.word	0x58000c00

0800d35c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800d360:	f7fd fb84 	bl	800aa6c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800d364:	2102      	movs	r1, #2
 800d366:	4802      	ldr	r0, [pc, #8]	; (800d370 <HW_IPCC_SYS_EvtHandler+0x14>)
 800d368:	f7ff feca 	bl	800d100 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d36c:	bf00      	nop
}
 800d36e:	bd80      	pop	{r7, pc}
 800d370:	58000c00 	.word	0x58000c00

0800d374 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b082      	sub	sp, #8
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800d37c:	2108      	movs	r1, #8
 800d37e:	480c      	ldr	r0, [pc, #48]	; (800d3b0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d380:	f7ff fedb 	bl	800d13a <LL_C1_IPCC_IsActiveFlag_CHx>
 800d384:	4603      	mov	r3, r0
 800d386:	2b00      	cmp	r3, #0
 800d388:	d007      	beq.n	800d39a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800d38a:	4a0a      	ldr	r2, [pc, #40]	; (800d3b4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d390:	2108      	movs	r1, #8
 800d392:	4807      	ldr	r0, [pc, #28]	; (800d3b0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d394:	f7ff fe7d 	bl	800d092 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800d398:	e006      	b.n	800d3a8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d39e:	2108      	movs	r1, #8
 800d3a0:	4803      	ldr	r0, [pc, #12]	; (800d3b0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800d3a2:	f7ff febb 	bl	800d11c <LL_C1_IPCC_SetFlag_CHx>
  return;
 800d3a6:	bf00      	nop
}
 800d3a8:	3708      	adds	r7, #8
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}
 800d3ae:	bf00      	nop
 800d3b0:	58000c00 	.word	0x58000c00
 800d3b4:	20001898 	.word	0x20001898

0800d3b8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d3bc:	2108      	movs	r1, #8
 800d3be:	4806      	ldr	r0, [pc, #24]	; (800d3d8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d3c0:	f7ff fe7a 	bl	800d0b8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800d3c4:	4b05      	ldr	r3, [pc, #20]	; (800d3dc <HW_IPCC_MM_FreeBufHandler+0x24>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800d3ca:	2108      	movs	r1, #8
 800d3cc:	4802      	ldr	r0, [pc, #8]	; (800d3d8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800d3ce:	f7ff fea5 	bl	800d11c <LL_C1_IPCC_SetFlag_CHx>

  return;
 800d3d2:	bf00      	nop
}
 800d3d4:	bd80      	pop	{r7, pc}
 800d3d6:	bf00      	nop
 800d3d8:	58000c00 	.word	0x58000c00
 800d3dc:	20001898 	.word	0x20001898

0800d3e0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d3e4:	2108      	movs	r1, #8
 800d3e6:	4802      	ldr	r0, [pc, #8]	; (800d3f0 <HW_IPCC_TRACES_Init+0x10>)
 800d3e8:	f7ff fe78 	bl	800d0dc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800d3ec:	bf00      	nop
}
 800d3ee:	bd80      	pop	{r7, pc}
 800d3f0:	58000c00 	.word	0x58000c00

0800d3f4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800d3f8:	f7fd fbe0 	bl	800abbc <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800d3fc:	2108      	movs	r1, #8
 800d3fe:	4802      	ldr	r0, [pc, #8]	; (800d408 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800d400:	f7ff fe7e 	bl	800d100 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800d404:	bf00      	nop
}
 800d406:	bd80      	pop	{r7, pc}
 800d408:	58000c00 	.word	0x58000c00

0800d40c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800d40c:	b480      	push	{r7}
 800d40e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800d410:	4b05      	ldr	r3, [pc, #20]	; (800d428 <UTIL_LPM_Init+0x1c>)
 800d412:	2200      	movs	r2, #0
 800d414:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800d416:	4b05      	ldr	r3, [pc, #20]	; (800d42c <UTIL_LPM_Init+0x20>)
 800d418:	2200      	movs	r2, #0
 800d41a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800d41c:	bf00      	nop
 800d41e:	46bd      	mov	sp, r7
 800d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d424:	4770      	bx	lr
 800d426:	bf00      	nop
 800d428:	2000189c 	.word	0x2000189c
 800d42c:	200018a0 	.word	0x200018a0

0800d430 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800d430:	b480      	push	{r7}
 800d432:	b087      	sub	sp, #28
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	460b      	mov	r3, r1
 800d43a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d43c:	f3ef 8310 	mrs	r3, PRIMASK
 800d440:	613b      	str	r3, [r7, #16]
  return(result);
 800d442:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800d444:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d446:	b672      	cpsid	i
}
 800d448:	bf00      	nop
  
  switch(state)
 800d44a:	78fb      	ldrb	r3, [r7, #3]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d008      	beq.n	800d462 <UTIL_LPM_SetOffMode+0x32>
 800d450:	2b01      	cmp	r3, #1
 800d452:	d10e      	bne.n	800d472 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800d454:	4b0d      	ldr	r3, [pc, #52]	; (800d48c <UTIL_LPM_SetOffMode+0x5c>)
 800d456:	681a      	ldr	r2, [r3, #0]
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	4313      	orrs	r3, r2
 800d45c:	4a0b      	ldr	r2, [pc, #44]	; (800d48c <UTIL_LPM_SetOffMode+0x5c>)
 800d45e:	6013      	str	r3, [r2, #0]
      break;
 800d460:	e008      	b.n	800d474 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	43da      	mvns	r2, r3
 800d466:	4b09      	ldr	r3, [pc, #36]	; (800d48c <UTIL_LPM_SetOffMode+0x5c>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	4013      	ands	r3, r2
 800d46c:	4a07      	ldr	r2, [pc, #28]	; (800d48c <UTIL_LPM_SetOffMode+0x5c>)
 800d46e:	6013      	str	r3, [r2, #0]
      break;
 800d470:	e000      	b.n	800d474 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800d472:	bf00      	nop
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	f383 8810 	msr	PRIMASK, r3
}
 800d47e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800d480:	bf00      	nop
 800d482:	371c      	adds	r7, #28
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr
 800d48c:	200018a0 	.word	0x200018a0

0800d490 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b090      	sub	sp, #64	; 0x40
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800d498:	4b73      	ldr	r3, [pc, #460]	; (800d668 <UTIL_SEQ_Run+0x1d8>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800d49e:	4b72      	ldr	r3, [pc, #456]	; (800d668 <UTIL_SEQ_Run+0x1d8>)
 800d4a0:	681a      	ldr	r2, [r3, #0]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	4013      	ands	r3, r2
 800d4a6:	4a70      	ldr	r2, [pc, #448]	; (800d668 <UTIL_SEQ_Run+0x1d8>)
 800d4a8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800d4aa:	4b70      	ldr	r3, [pc, #448]	; (800d66c <UTIL_SEQ_Run+0x1dc>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800d4b0:	4b6f      	ldr	r3, [pc, #444]	; (800d670 <UTIL_SEQ_Run+0x1e0>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800d4b6:	4b6f      	ldr	r3, [pc, #444]	; (800d674 <UTIL_SEQ_Run+0x1e4>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800d4bc:	4b6e      	ldr	r3, [pc, #440]	; (800d678 <UTIL_SEQ_Run+0x1e8>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800d4c2:	e08d      	b.n	800d5e0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800d4c8:	e002      	b.n	800d4d0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800d4ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4cc:	3301      	adds	r3, #1
 800d4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800d4d0:	4a6a      	ldr	r2, [pc, #424]	; (800d67c <UTIL_SEQ_Run+0x1ec>)
 800d4d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4d4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4da:	401a      	ands	r2, r3
 800d4dc:	4b62      	ldr	r3, [pc, #392]	; (800d668 <UTIL_SEQ_Run+0x1d8>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	4013      	ands	r3, r2
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d0f1      	beq.n	800d4ca <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800d4e6:	4a65      	ldr	r2, [pc, #404]	; (800d67c <UTIL_SEQ_Run+0x1ec>)
 800d4e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4ea:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f0:	401a      	ands	r2, r3
 800d4f2:	4b5d      	ldr	r3, [pc, #372]	; (800d668 <UTIL_SEQ_Run+0x1d8>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	4013      	ands	r3, r2
 800d4f8:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800d4fa:	4a60      	ldr	r2, [pc, #384]	; (800d67c <UTIL_SEQ_Run+0x1ec>)
 800d4fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4fe:	00db      	lsls	r3, r3, #3
 800d500:	4413      	add	r3, r2
 800d502:	685a      	ldr	r2, [r3, #4]
 800d504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d506:	4013      	ands	r3, r2
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d106      	bne.n	800d51a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800d50c:	4a5b      	ldr	r2, [pc, #364]	; (800d67c <UTIL_SEQ_Run+0x1ec>)
 800d50e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d510:	00db      	lsls	r3, r3, #3
 800d512:	4413      	add	r3, r2
 800d514:	f04f 32ff 	mov.w	r2, #4294967295
 800d518:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800d51a:	4a58      	ldr	r2, [pc, #352]	; (800d67c <UTIL_SEQ_Run+0x1ec>)
 800d51c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d51e:	00db      	lsls	r3, r3, #3
 800d520:	4413      	add	r3, r2
 800d522:	685a      	ldr	r2, [r3, #4]
 800d524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d526:	4013      	ands	r3, r2
 800d528:	4618      	mov	r0, r3
 800d52a:	f000 f9b3 	bl	800d894 <SEQ_BitPosition>
 800d52e:	4603      	mov	r3, r0
 800d530:	461a      	mov	r2, r3
 800d532:	4b53      	ldr	r3, [pc, #332]	; (800d680 <UTIL_SEQ_Run+0x1f0>)
 800d534:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800d536:	4a51      	ldr	r2, [pc, #324]	; (800d67c <UTIL_SEQ_Run+0x1ec>)
 800d538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d53a:	00db      	lsls	r3, r3, #3
 800d53c:	4413      	add	r3, r2
 800d53e:	685a      	ldr	r2, [r3, #4]
 800d540:	4b4f      	ldr	r3, [pc, #316]	; (800d680 <UTIL_SEQ_Run+0x1f0>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	2101      	movs	r1, #1
 800d546:	fa01 f303 	lsl.w	r3, r1, r3
 800d54a:	43db      	mvns	r3, r3
 800d54c:	401a      	ands	r2, r3
 800d54e:	494b      	ldr	r1, [pc, #300]	; (800d67c <UTIL_SEQ_Run+0x1ec>)
 800d550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d552:	00db      	lsls	r3, r3, #3
 800d554:	440b      	add	r3, r1
 800d556:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d558:	f3ef 8310 	mrs	r3, PRIMASK
 800d55c:	61bb      	str	r3, [r7, #24]
  return(result);
 800d55e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d560:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800d562:	b672      	cpsid	i
}
 800d564:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800d566:	4b46      	ldr	r3, [pc, #280]	; (800d680 <UTIL_SEQ_Run+0x1f0>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	2201      	movs	r2, #1
 800d56c:	fa02 f303 	lsl.w	r3, r2, r3
 800d570:	43da      	mvns	r2, r3
 800d572:	4b3e      	ldr	r3, [pc, #248]	; (800d66c <UTIL_SEQ_Run+0x1dc>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4013      	ands	r3, r2
 800d578:	4a3c      	ldr	r2, [pc, #240]	; (800d66c <UTIL_SEQ_Run+0x1dc>)
 800d57a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d57c:	2302      	movs	r3, #2
 800d57e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d580:	e013      	b.n	800d5aa <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800d582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d584:	3b01      	subs	r3, #1
 800d586:	4a3d      	ldr	r2, [pc, #244]	; (800d67c <UTIL_SEQ_Run+0x1ec>)
 800d588:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800d58c:	4b3c      	ldr	r3, [pc, #240]	; (800d680 <UTIL_SEQ_Run+0x1f0>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	2201      	movs	r2, #1
 800d592:	fa02 f303 	lsl.w	r3, r2, r3
 800d596:	43da      	mvns	r2, r3
 800d598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d59a:	3b01      	subs	r3, #1
 800d59c:	400a      	ands	r2, r1
 800d59e:	4937      	ldr	r1, [pc, #220]	; (800d67c <UTIL_SEQ_Run+0x1ec>)
 800d5a0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800d5a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5a6:	3b01      	subs	r3, #1
 800d5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d5aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d1e8      	bne.n	800d582 <UTIL_SEQ_Run+0xf2>
 800d5b0:	6a3b      	ldr	r3, [r7, #32]
 800d5b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	f383 8810 	msr	PRIMASK, r3
}
 800d5ba:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800d5bc:	4b30      	ldr	r3, [pc, #192]	; (800d680 <UTIL_SEQ_Run+0x1f0>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4a30      	ldr	r2, [pc, #192]	; (800d684 <UTIL_SEQ_Run+0x1f4>)
 800d5c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5c6:	4798      	blx	r3

    local_taskset = TaskSet;
 800d5c8:	4b28      	ldr	r3, [pc, #160]	; (800d66c <UTIL_SEQ_Run+0x1dc>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800d5ce:	4b28      	ldr	r3, [pc, #160]	; (800d670 <UTIL_SEQ_Run+0x1e0>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800d5d4:	4b27      	ldr	r3, [pc, #156]	; (800d674 <UTIL_SEQ_Run+0x1e4>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800d5da:	4b27      	ldr	r3, [pc, #156]	; (800d678 <UTIL_SEQ_Run+0x1e8>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800d5e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e4:	401a      	ands	r2, r3
 800d5e6:	4b20      	ldr	r3, [pc, #128]	; (800d668 <UTIL_SEQ_Run+0x1d8>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	4013      	ands	r3, r2
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d005      	beq.n	800d5fc <UTIL_SEQ_Run+0x16c>
 800d5f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5f4:	4013      	ands	r3, r2
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	f43f af64 	beq.w	800d4c4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800d5fc:	4b20      	ldr	r3, [pc, #128]	; (800d680 <UTIL_SEQ_Run+0x1f0>)
 800d5fe:	f04f 32ff 	mov.w	r2, #4294967295
 800d602:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800d604:	f000 f938 	bl	800d878 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d608:	f3ef 8310 	mrs	r3, PRIMASK
 800d60c:	613b      	str	r3, [r7, #16]
  return(result);
 800d60e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800d610:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d612:	b672      	cpsid	i
}
 800d614:	bf00      	nop
  local_taskset = TaskSet;
 800d616:	4b15      	ldr	r3, [pc, #84]	; (800d66c <UTIL_SEQ_Run+0x1dc>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800d61c:	4b14      	ldr	r3, [pc, #80]	; (800d670 <UTIL_SEQ_Run+0x1e0>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800d622:	4b14      	ldr	r3, [pc, #80]	; (800d674 <UTIL_SEQ_Run+0x1e4>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800d628:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d62c:	401a      	ands	r2, r3
 800d62e:	4b0e      	ldr	r3, [pc, #56]	; (800d668 <UTIL_SEQ_Run+0x1d8>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	4013      	ands	r3, r2
 800d634:	2b00      	cmp	r3, #0
 800d636:	d107      	bne.n	800d648 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800d638:	4b0f      	ldr	r3, [pc, #60]	; (800d678 <UTIL_SEQ_Run+0x1e8>)
 800d63a:	681a      	ldr	r2, [r3, #0]
 800d63c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d63e:	4013      	ands	r3, r2
 800d640:	2b00      	cmp	r3, #0
 800d642:	d101      	bne.n	800d648 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800d644:	f7f4 f815 	bl	8001672 <UTIL_SEQ_Idle>
 800d648:	69fb      	ldr	r3, [r7, #28]
 800d64a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f383 8810 	msr	PRIMASK, r3
}
 800d652:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800d654:	f000 f917 	bl	800d886 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800d658:	4a03      	ldr	r2, [pc, #12]	; (800d668 <UTIL_SEQ_Run+0x1d8>)
 800d65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d65c:	6013      	str	r3, [r2, #0]

  return;
 800d65e:	bf00      	nop
}
 800d660:	3740      	adds	r7, #64	; 0x40
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	20000034 	.word	0x20000034
 800d66c:	200018a4 	.word	0x200018a4
 800d670:	200018a8 	.word	0x200018a8
 800d674:	20000030 	.word	0x20000030
 800d678:	200018ac 	.word	0x200018ac
 800d67c:	20001934 	.word	0x20001934
 800d680:	200018b0 	.word	0x200018b0
 800d684:	200018b4 	.word	0x200018b4

0800d688 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b088      	sub	sp, #32
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	60f8      	str	r0, [r7, #12]
 800d690:	60b9      	str	r1, [r7, #8]
 800d692:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d694:	f3ef 8310 	mrs	r3, PRIMASK
 800d698:	617b      	str	r3, [r7, #20]
  return(result);
 800d69a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800d69c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800d69e:	b672      	cpsid	i
}
 800d6a0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800d6a2:	68f8      	ldr	r0, [r7, #12]
 800d6a4:	f000 f8f6 	bl	800d894 <SEQ_BitPosition>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	4a06      	ldr	r2, [pc, #24]	; (800d6c8 <UTIL_SEQ_RegTask+0x40>)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800d6b4:	69fb      	ldr	r3, [r7, #28]
 800d6b6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6b8:	69bb      	ldr	r3, [r7, #24]
 800d6ba:	f383 8810 	msr	PRIMASK, r3
}
 800d6be:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800d6c0:	bf00      	nop
}
 800d6c2:	3720      	adds	r7, #32
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	200018b4 	.word	0x200018b4

0800d6cc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800d6cc:	b480      	push	{r7}
 800d6ce:	b087      	sub	sp, #28
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6d6:	f3ef 8310 	mrs	r3, PRIMASK
 800d6da:	60fb      	str	r3, [r7, #12]
  return(result);
 800d6dc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d6de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d6e0:	b672      	cpsid	i
}
 800d6e2:	bf00      	nop

  TaskSet |= TaskId_bm;
 800d6e4:	4b0d      	ldr	r3, [pc, #52]	; (800d71c <UTIL_SEQ_SetTask+0x50>)
 800d6e6:	681a      	ldr	r2, [r3, #0]
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	4a0b      	ldr	r2, [pc, #44]	; (800d71c <UTIL_SEQ_SetTask+0x50>)
 800d6ee:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800d6f0:	4a0b      	ldr	r2, [pc, #44]	; (800d720 <UTIL_SEQ_SetTask+0x54>)
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	431a      	orrs	r2, r3
 800d6fc:	4908      	ldr	r1, [pc, #32]	; (800d720 <UTIL_SEQ_SetTask+0x54>)
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d708:	693b      	ldr	r3, [r7, #16]
 800d70a:	f383 8810 	msr	PRIMASK, r3
}
 800d70e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d710:	bf00      	nop
}
 800d712:	371c      	adds	r7, #28
 800d714:	46bd      	mov	sp, r7
 800d716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71a:	4770      	bx	lr
 800d71c:	200018a4 	.word	0x200018a4
 800d720:	20001934 	.word	0x20001934

0800d724 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800d724:	b480      	push	{r7}
 800d726:	b087      	sub	sp, #28
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d72c:	f3ef 8310 	mrs	r3, PRIMASK
 800d730:	60fb      	str	r3, [r7, #12]
  return(result);
 800d732:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d734:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d736:	b672      	cpsid	i
}
 800d738:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	43da      	mvns	r2, r3
 800d73e:	4b08      	ldr	r3, [pc, #32]	; (800d760 <UTIL_SEQ_PauseTask+0x3c>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	4013      	ands	r3, r2
 800d744:	4a06      	ldr	r2, [pc, #24]	; (800d760 <UTIL_SEQ_PauseTask+0x3c>)
 800d746:	6013      	str	r3, [r2, #0]
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	f383 8810 	msr	PRIMASK, r3
}
 800d752:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d754:	bf00      	nop
}
 800d756:	371c      	adds	r7, #28
 800d758:	46bd      	mov	sp, r7
 800d75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75e:	4770      	bx	lr
 800d760:	20000030 	.word	0x20000030

0800d764 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800d764:	b480      	push	{r7}
 800d766:	b087      	sub	sp, #28
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d76c:	f3ef 8310 	mrs	r3, PRIMASK
 800d770:	60fb      	str	r3, [r7, #12]
  return(result);
 800d772:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d774:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d776:	b672      	cpsid	i
}
 800d778:	bf00      	nop

  TaskMask |= TaskId_bm;
 800d77a:	4b09      	ldr	r3, [pc, #36]	; (800d7a0 <UTIL_SEQ_ResumeTask+0x3c>)
 800d77c:	681a      	ldr	r2, [r3, #0]
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	4313      	orrs	r3, r2
 800d782:	4a07      	ldr	r2, [pc, #28]	; (800d7a0 <UTIL_SEQ_ResumeTask+0x3c>)
 800d784:	6013      	str	r3, [r2, #0]
 800d786:	697b      	ldr	r3, [r7, #20]
 800d788:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	f383 8810 	msr	PRIMASK, r3
}
 800d790:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d792:	bf00      	nop
}
 800d794:	371c      	adds	r7, #28
 800d796:	46bd      	mov	sp, r7
 800d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79c:	4770      	bx	lr
 800d79e:	bf00      	nop
 800d7a0:	20000030 	.word	0x20000030

0800d7a4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b087      	sub	sp, #28
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7ac:	f3ef 8310 	mrs	r3, PRIMASK
 800d7b0:	60fb      	str	r3, [r7, #12]
  return(result);
 800d7b2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d7b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d7b6:	b672      	cpsid	i
}
 800d7b8:	bf00      	nop

  EvtSet |= EvtId_bm;
 800d7ba:	4b09      	ldr	r3, [pc, #36]	; (800d7e0 <UTIL_SEQ_SetEvt+0x3c>)
 800d7bc:	681a      	ldr	r2, [r3, #0]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	4a07      	ldr	r2, [pc, #28]	; (800d7e0 <UTIL_SEQ_SetEvt+0x3c>)
 800d7c4:	6013      	str	r3, [r2, #0]
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d7ca:	693b      	ldr	r3, [r7, #16]
 800d7cc:	f383 8810 	msr	PRIMASK, r3
}
 800d7d0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800d7d2:	bf00      	nop
}
 800d7d4:	371c      	adds	r7, #28
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7dc:	4770      	bx	lr
 800d7de:	bf00      	nop
 800d7e0:	200018a8 	.word	0x200018a8

0800d7e4 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b088      	sub	sp, #32
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800d7ec:	4b1f      	ldr	r3, [pc, #124]	; (800d86c <UTIL_SEQ_WaitEvt+0x88>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800d7f2:	4b1e      	ldr	r3, [pc, #120]	; (800d86c <UTIL_SEQ_WaitEvt+0x88>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7fa:	d102      	bne.n	800d802 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	61fb      	str	r3, [r7, #28]
 800d800:	e005      	b.n	800d80e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800d802:	4b1a      	ldr	r3, [pc, #104]	; (800d86c <UTIL_SEQ_WaitEvt+0x88>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	2201      	movs	r2, #1
 800d808:	fa02 f303 	lsl.w	r3, r2, r3
 800d80c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800d80e:	4b18      	ldr	r3, [pc, #96]	; (800d870 <UTIL_SEQ_WaitEvt+0x8c>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800d814:	4a16      	ldr	r2, [pc, #88]	; (800d870 <UTIL_SEQ_WaitEvt+0x8c>)
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800d81a:	e003      	b.n	800d824 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800d81c:	6879      	ldr	r1, [r7, #4]
 800d81e:	69f8      	ldr	r0, [r7, #28]
 800d820:	f7f3 ff2e 	bl	8001680 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800d824:	4b13      	ldr	r3, [pc, #76]	; (800d874 <UTIL_SEQ_WaitEvt+0x90>)
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	4013      	ands	r3, r2
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d0f5      	beq.n	800d81c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800d830:	4a0e      	ldr	r2, [pc, #56]	; (800d86c <UTIL_SEQ_WaitEvt+0x88>)
 800d832:	69bb      	ldr	r3, [r7, #24]
 800d834:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d836:	f3ef 8310 	mrs	r3, PRIMASK
 800d83a:	60bb      	str	r3, [r7, #8]
  return(result);
 800d83c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800d83e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d840:	b672      	cpsid	i
}
 800d842:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	43da      	mvns	r2, r3
 800d848:	4b0a      	ldr	r3, [pc, #40]	; (800d874 <UTIL_SEQ_WaitEvt+0x90>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	4013      	ands	r3, r2
 800d84e:	4a09      	ldr	r2, [pc, #36]	; (800d874 <UTIL_SEQ_WaitEvt+0x90>)
 800d850:	6013      	str	r3, [r2, #0]
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	f383 8810 	msr	PRIMASK, r3
}
 800d85c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800d85e:	4a04      	ldr	r2, [pc, #16]	; (800d870 <UTIL_SEQ_WaitEvt+0x8c>)
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	6013      	str	r3, [r2, #0]
  return;
 800d864:	bf00      	nop
}
 800d866:	3720      	adds	r7, #32
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}
 800d86c:	200018b0 	.word	0x200018b0
 800d870:	200018ac 	.word	0x200018ac
 800d874:	200018a8 	.word	0x200018a8

0800d878 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800d878:	b480      	push	{r7}
 800d87a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d87c:	bf00      	nop
}
 800d87e:	46bd      	mov	sp, r7
 800d880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d884:	4770      	bx	lr

0800d886 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800d886:	b480      	push	{r7}
 800d888:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800d88a:	bf00      	nop
}
 800d88c:	46bd      	mov	sp, r7
 800d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d892:	4770      	bx	lr

0800d894 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800d894:	b480      	push	{r7}
 800d896:	b085      	sub	sp, #20
 800d898:	af00      	add	r7, sp, #0
 800d89a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800d89c:	2300      	movs	r3, #0
 800d89e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	0c1b      	lsrs	r3, r3, #16
 800d8a8:	041b      	lsls	r3, r3, #16
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d104      	bne.n	800d8b8 <SEQ_BitPosition+0x24>
 800d8ae:	2310      	movs	r3, #16
 800d8b0:	73fb      	strb	r3, [r7, #15]
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	041b      	lsls	r3, r3, #16
 800d8b6:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800d8b8:	68bb      	ldr	r3, [r7, #8]
 800d8ba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d105      	bne.n	800d8ce <SEQ_BitPosition+0x3a>
 800d8c2:	7bfb      	ldrb	r3, [r7, #15]
 800d8c4:	3308      	adds	r3, #8
 800d8c6:	73fb      	strb	r3, [r7, #15]
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	021b      	lsls	r3, r3, #8
 800d8cc:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d105      	bne.n	800d8e4 <SEQ_BitPosition+0x50>
 800d8d8:	7bfb      	ldrb	r3, [r7, #15]
 800d8da:	3304      	adds	r3, #4
 800d8dc:	73fb      	strb	r3, [r7, #15]
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	011b      	lsls	r3, r3, #4
 800d8e2:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	0f1b      	lsrs	r3, r3, #28
 800d8e8:	4a07      	ldr	r2, [pc, #28]	; (800d908 <SEQ_BitPosition+0x74>)
 800d8ea:	5cd2      	ldrb	r2, [r2, r3]
 800d8ec:	7bfb      	ldrb	r3, [r7, #15]
 800d8ee:	4413      	add	r3, r2
 800d8f0:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800d8f2:	7bfb      	ldrb	r3, [r7, #15]
 800d8f4:	f1c3 031f 	rsb	r3, r3, #31
 800d8f8:	b2db      	uxtb	r3, r3
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3714      	adds	r7, #20
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr
 800d906:	bf00      	nop
 800d908:	08010158 	.word	0x08010158

0800d90c <std>:
 800d90c:	2300      	movs	r3, #0
 800d90e:	b510      	push	{r4, lr}
 800d910:	4604      	mov	r4, r0
 800d912:	e9c0 3300 	strd	r3, r3, [r0]
 800d916:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d91a:	6083      	str	r3, [r0, #8]
 800d91c:	8181      	strh	r1, [r0, #12]
 800d91e:	6643      	str	r3, [r0, #100]	; 0x64
 800d920:	81c2      	strh	r2, [r0, #14]
 800d922:	6183      	str	r3, [r0, #24]
 800d924:	4619      	mov	r1, r3
 800d926:	2208      	movs	r2, #8
 800d928:	305c      	adds	r0, #92	; 0x5c
 800d92a:	f000 f9ff 	bl	800dd2c <memset>
 800d92e:	4b0d      	ldr	r3, [pc, #52]	; (800d964 <std+0x58>)
 800d930:	6263      	str	r3, [r4, #36]	; 0x24
 800d932:	4b0d      	ldr	r3, [pc, #52]	; (800d968 <std+0x5c>)
 800d934:	62a3      	str	r3, [r4, #40]	; 0x28
 800d936:	4b0d      	ldr	r3, [pc, #52]	; (800d96c <std+0x60>)
 800d938:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d93a:	4b0d      	ldr	r3, [pc, #52]	; (800d970 <std+0x64>)
 800d93c:	6323      	str	r3, [r4, #48]	; 0x30
 800d93e:	4b0d      	ldr	r3, [pc, #52]	; (800d974 <std+0x68>)
 800d940:	6224      	str	r4, [r4, #32]
 800d942:	429c      	cmp	r4, r3
 800d944:	d006      	beq.n	800d954 <std+0x48>
 800d946:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d94a:	4294      	cmp	r4, r2
 800d94c:	d002      	beq.n	800d954 <std+0x48>
 800d94e:	33d0      	adds	r3, #208	; 0xd0
 800d950:	429c      	cmp	r4, r3
 800d952:	d105      	bne.n	800d960 <std+0x54>
 800d954:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d95c:	f000 ba76 	b.w	800de4c <__retarget_lock_init_recursive>
 800d960:	bd10      	pop	{r4, pc}
 800d962:	bf00      	nop
 800d964:	0800db7d 	.word	0x0800db7d
 800d968:	0800db9f 	.word	0x0800db9f
 800d96c:	0800dbd7 	.word	0x0800dbd7
 800d970:	0800dbfb 	.word	0x0800dbfb
 800d974:	20001944 	.word	0x20001944

0800d978 <stdio_exit_handler>:
 800d978:	4a02      	ldr	r2, [pc, #8]	; (800d984 <stdio_exit_handler+0xc>)
 800d97a:	4903      	ldr	r1, [pc, #12]	; (800d988 <stdio_exit_handler+0x10>)
 800d97c:	4803      	ldr	r0, [pc, #12]	; (800d98c <stdio_exit_handler+0x14>)
 800d97e:	f000 b869 	b.w	800da54 <_fwalk_sglue>
 800d982:	bf00      	nop
 800d984:	20000038 	.word	0x20000038
 800d988:	0800e715 	.word	0x0800e715
 800d98c:	20000044 	.word	0x20000044

0800d990 <cleanup_stdio>:
 800d990:	6841      	ldr	r1, [r0, #4]
 800d992:	4b0c      	ldr	r3, [pc, #48]	; (800d9c4 <cleanup_stdio+0x34>)
 800d994:	4299      	cmp	r1, r3
 800d996:	b510      	push	{r4, lr}
 800d998:	4604      	mov	r4, r0
 800d99a:	d001      	beq.n	800d9a0 <cleanup_stdio+0x10>
 800d99c:	f000 feba 	bl	800e714 <_fflush_r>
 800d9a0:	68a1      	ldr	r1, [r4, #8]
 800d9a2:	4b09      	ldr	r3, [pc, #36]	; (800d9c8 <cleanup_stdio+0x38>)
 800d9a4:	4299      	cmp	r1, r3
 800d9a6:	d002      	beq.n	800d9ae <cleanup_stdio+0x1e>
 800d9a8:	4620      	mov	r0, r4
 800d9aa:	f000 feb3 	bl	800e714 <_fflush_r>
 800d9ae:	68e1      	ldr	r1, [r4, #12]
 800d9b0:	4b06      	ldr	r3, [pc, #24]	; (800d9cc <cleanup_stdio+0x3c>)
 800d9b2:	4299      	cmp	r1, r3
 800d9b4:	d004      	beq.n	800d9c0 <cleanup_stdio+0x30>
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9bc:	f000 beaa 	b.w	800e714 <_fflush_r>
 800d9c0:	bd10      	pop	{r4, pc}
 800d9c2:	bf00      	nop
 800d9c4:	20001944 	.word	0x20001944
 800d9c8:	200019ac 	.word	0x200019ac
 800d9cc:	20001a14 	.word	0x20001a14

0800d9d0 <global_stdio_init.part.0>:
 800d9d0:	b510      	push	{r4, lr}
 800d9d2:	4b0b      	ldr	r3, [pc, #44]	; (800da00 <global_stdio_init.part.0+0x30>)
 800d9d4:	4c0b      	ldr	r4, [pc, #44]	; (800da04 <global_stdio_init.part.0+0x34>)
 800d9d6:	4a0c      	ldr	r2, [pc, #48]	; (800da08 <global_stdio_init.part.0+0x38>)
 800d9d8:	601a      	str	r2, [r3, #0]
 800d9da:	4620      	mov	r0, r4
 800d9dc:	2200      	movs	r2, #0
 800d9de:	2104      	movs	r1, #4
 800d9e0:	f7ff ff94 	bl	800d90c <std>
 800d9e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d9e8:	2201      	movs	r2, #1
 800d9ea:	2109      	movs	r1, #9
 800d9ec:	f7ff ff8e 	bl	800d90c <std>
 800d9f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d9f4:	2202      	movs	r2, #2
 800d9f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d9fa:	2112      	movs	r1, #18
 800d9fc:	f7ff bf86 	b.w	800d90c <std>
 800da00:	20001a7c 	.word	0x20001a7c
 800da04:	20001944 	.word	0x20001944
 800da08:	0800d979 	.word	0x0800d979

0800da0c <__sfp_lock_acquire>:
 800da0c:	4801      	ldr	r0, [pc, #4]	; (800da14 <__sfp_lock_acquire+0x8>)
 800da0e:	f000 ba1e 	b.w	800de4e <__retarget_lock_acquire_recursive>
 800da12:	bf00      	nop
 800da14:	20001a85 	.word	0x20001a85

0800da18 <__sfp_lock_release>:
 800da18:	4801      	ldr	r0, [pc, #4]	; (800da20 <__sfp_lock_release+0x8>)
 800da1a:	f000 ba19 	b.w	800de50 <__retarget_lock_release_recursive>
 800da1e:	bf00      	nop
 800da20:	20001a85 	.word	0x20001a85

0800da24 <__sinit>:
 800da24:	b510      	push	{r4, lr}
 800da26:	4604      	mov	r4, r0
 800da28:	f7ff fff0 	bl	800da0c <__sfp_lock_acquire>
 800da2c:	6a23      	ldr	r3, [r4, #32]
 800da2e:	b11b      	cbz	r3, 800da38 <__sinit+0x14>
 800da30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800da34:	f7ff bff0 	b.w	800da18 <__sfp_lock_release>
 800da38:	4b04      	ldr	r3, [pc, #16]	; (800da4c <__sinit+0x28>)
 800da3a:	6223      	str	r3, [r4, #32]
 800da3c:	4b04      	ldr	r3, [pc, #16]	; (800da50 <__sinit+0x2c>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d1f5      	bne.n	800da30 <__sinit+0xc>
 800da44:	f7ff ffc4 	bl	800d9d0 <global_stdio_init.part.0>
 800da48:	e7f2      	b.n	800da30 <__sinit+0xc>
 800da4a:	bf00      	nop
 800da4c:	0800d991 	.word	0x0800d991
 800da50:	20001a7c 	.word	0x20001a7c

0800da54 <_fwalk_sglue>:
 800da54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da58:	4607      	mov	r7, r0
 800da5a:	4688      	mov	r8, r1
 800da5c:	4614      	mov	r4, r2
 800da5e:	2600      	movs	r6, #0
 800da60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800da64:	f1b9 0901 	subs.w	r9, r9, #1
 800da68:	d505      	bpl.n	800da76 <_fwalk_sglue+0x22>
 800da6a:	6824      	ldr	r4, [r4, #0]
 800da6c:	2c00      	cmp	r4, #0
 800da6e:	d1f7      	bne.n	800da60 <_fwalk_sglue+0xc>
 800da70:	4630      	mov	r0, r6
 800da72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da76:	89ab      	ldrh	r3, [r5, #12]
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d907      	bls.n	800da8c <_fwalk_sglue+0x38>
 800da7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800da80:	3301      	adds	r3, #1
 800da82:	d003      	beq.n	800da8c <_fwalk_sglue+0x38>
 800da84:	4629      	mov	r1, r5
 800da86:	4638      	mov	r0, r7
 800da88:	47c0      	blx	r8
 800da8a:	4306      	orrs	r6, r0
 800da8c:	3568      	adds	r5, #104	; 0x68
 800da8e:	e7e9      	b.n	800da64 <_fwalk_sglue+0x10>

0800da90 <iprintf>:
 800da90:	b40f      	push	{r0, r1, r2, r3}
 800da92:	b507      	push	{r0, r1, r2, lr}
 800da94:	4906      	ldr	r1, [pc, #24]	; (800dab0 <iprintf+0x20>)
 800da96:	ab04      	add	r3, sp, #16
 800da98:	6808      	ldr	r0, [r1, #0]
 800da9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800da9e:	6881      	ldr	r1, [r0, #8]
 800daa0:	9301      	str	r3, [sp, #4]
 800daa2:	f000 fb07 	bl	800e0b4 <_vfiprintf_r>
 800daa6:	b003      	add	sp, #12
 800daa8:	f85d eb04 	ldr.w	lr, [sp], #4
 800daac:	b004      	add	sp, #16
 800daae:	4770      	bx	lr
 800dab0:	20000090 	.word	0x20000090

0800dab4 <putchar>:
 800dab4:	4b02      	ldr	r3, [pc, #8]	; (800dac0 <putchar+0xc>)
 800dab6:	4601      	mov	r1, r0
 800dab8:	6818      	ldr	r0, [r3, #0]
 800daba:	6882      	ldr	r2, [r0, #8]
 800dabc:	f000 beb4 	b.w	800e828 <_putc_r>
 800dac0:	20000090 	.word	0x20000090

0800dac4 <_puts_r>:
 800dac4:	6a03      	ldr	r3, [r0, #32]
 800dac6:	b570      	push	{r4, r5, r6, lr}
 800dac8:	6884      	ldr	r4, [r0, #8]
 800daca:	4605      	mov	r5, r0
 800dacc:	460e      	mov	r6, r1
 800dace:	b90b      	cbnz	r3, 800dad4 <_puts_r+0x10>
 800dad0:	f7ff ffa8 	bl	800da24 <__sinit>
 800dad4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dad6:	07db      	lsls	r3, r3, #31
 800dad8:	d405      	bmi.n	800dae6 <_puts_r+0x22>
 800dada:	89a3      	ldrh	r3, [r4, #12]
 800dadc:	0598      	lsls	r0, r3, #22
 800dade:	d402      	bmi.n	800dae6 <_puts_r+0x22>
 800dae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dae2:	f000 f9b4 	bl	800de4e <__retarget_lock_acquire_recursive>
 800dae6:	89a3      	ldrh	r3, [r4, #12]
 800dae8:	0719      	lsls	r1, r3, #28
 800daea:	d513      	bpl.n	800db14 <_puts_r+0x50>
 800daec:	6923      	ldr	r3, [r4, #16]
 800daee:	b18b      	cbz	r3, 800db14 <_puts_r+0x50>
 800daf0:	3e01      	subs	r6, #1
 800daf2:	68a3      	ldr	r3, [r4, #8]
 800daf4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800daf8:	3b01      	subs	r3, #1
 800dafa:	60a3      	str	r3, [r4, #8]
 800dafc:	b9e9      	cbnz	r1, 800db3a <_puts_r+0x76>
 800dafe:	2b00      	cmp	r3, #0
 800db00:	da2e      	bge.n	800db60 <_puts_r+0x9c>
 800db02:	4622      	mov	r2, r4
 800db04:	210a      	movs	r1, #10
 800db06:	4628      	mov	r0, r5
 800db08:	f000 f87b 	bl	800dc02 <__swbuf_r>
 800db0c:	3001      	adds	r0, #1
 800db0e:	d007      	beq.n	800db20 <_puts_r+0x5c>
 800db10:	250a      	movs	r5, #10
 800db12:	e007      	b.n	800db24 <_puts_r+0x60>
 800db14:	4621      	mov	r1, r4
 800db16:	4628      	mov	r0, r5
 800db18:	f000 f8b0 	bl	800dc7c <__swsetup_r>
 800db1c:	2800      	cmp	r0, #0
 800db1e:	d0e7      	beq.n	800daf0 <_puts_r+0x2c>
 800db20:	f04f 35ff 	mov.w	r5, #4294967295
 800db24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db26:	07da      	lsls	r2, r3, #31
 800db28:	d405      	bmi.n	800db36 <_puts_r+0x72>
 800db2a:	89a3      	ldrh	r3, [r4, #12]
 800db2c:	059b      	lsls	r3, r3, #22
 800db2e:	d402      	bmi.n	800db36 <_puts_r+0x72>
 800db30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db32:	f000 f98d 	bl	800de50 <__retarget_lock_release_recursive>
 800db36:	4628      	mov	r0, r5
 800db38:	bd70      	pop	{r4, r5, r6, pc}
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	da04      	bge.n	800db48 <_puts_r+0x84>
 800db3e:	69a2      	ldr	r2, [r4, #24]
 800db40:	429a      	cmp	r2, r3
 800db42:	dc06      	bgt.n	800db52 <_puts_r+0x8e>
 800db44:	290a      	cmp	r1, #10
 800db46:	d004      	beq.n	800db52 <_puts_r+0x8e>
 800db48:	6823      	ldr	r3, [r4, #0]
 800db4a:	1c5a      	adds	r2, r3, #1
 800db4c:	6022      	str	r2, [r4, #0]
 800db4e:	7019      	strb	r1, [r3, #0]
 800db50:	e7cf      	b.n	800daf2 <_puts_r+0x2e>
 800db52:	4622      	mov	r2, r4
 800db54:	4628      	mov	r0, r5
 800db56:	f000 f854 	bl	800dc02 <__swbuf_r>
 800db5a:	3001      	adds	r0, #1
 800db5c:	d1c9      	bne.n	800daf2 <_puts_r+0x2e>
 800db5e:	e7df      	b.n	800db20 <_puts_r+0x5c>
 800db60:	6823      	ldr	r3, [r4, #0]
 800db62:	250a      	movs	r5, #10
 800db64:	1c5a      	adds	r2, r3, #1
 800db66:	6022      	str	r2, [r4, #0]
 800db68:	701d      	strb	r5, [r3, #0]
 800db6a:	e7db      	b.n	800db24 <_puts_r+0x60>

0800db6c <puts>:
 800db6c:	4b02      	ldr	r3, [pc, #8]	; (800db78 <puts+0xc>)
 800db6e:	4601      	mov	r1, r0
 800db70:	6818      	ldr	r0, [r3, #0]
 800db72:	f7ff bfa7 	b.w	800dac4 <_puts_r>
 800db76:	bf00      	nop
 800db78:	20000090 	.word	0x20000090

0800db7c <__sread>:
 800db7c:	b510      	push	{r4, lr}
 800db7e:	460c      	mov	r4, r1
 800db80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db84:	f000 f914 	bl	800ddb0 <_read_r>
 800db88:	2800      	cmp	r0, #0
 800db8a:	bfab      	itete	ge
 800db8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800db8e:	89a3      	ldrhlt	r3, [r4, #12]
 800db90:	181b      	addge	r3, r3, r0
 800db92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800db96:	bfac      	ite	ge
 800db98:	6563      	strge	r3, [r4, #84]	; 0x54
 800db9a:	81a3      	strhlt	r3, [r4, #12]
 800db9c:	bd10      	pop	{r4, pc}

0800db9e <__swrite>:
 800db9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dba2:	461f      	mov	r7, r3
 800dba4:	898b      	ldrh	r3, [r1, #12]
 800dba6:	05db      	lsls	r3, r3, #23
 800dba8:	4605      	mov	r5, r0
 800dbaa:	460c      	mov	r4, r1
 800dbac:	4616      	mov	r6, r2
 800dbae:	d505      	bpl.n	800dbbc <__swrite+0x1e>
 800dbb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbb4:	2302      	movs	r3, #2
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	f000 f8e8 	bl	800dd8c <_lseek_r>
 800dbbc:	89a3      	ldrh	r3, [r4, #12]
 800dbbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dbc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dbc6:	81a3      	strh	r3, [r4, #12]
 800dbc8:	4632      	mov	r2, r6
 800dbca:	463b      	mov	r3, r7
 800dbcc:	4628      	mov	r0, r5
 800dbce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbd2:	f000 b8ff 	b.w	800ddd4 <_write_r>

0800dbd6 <__sseek>:
 800dbd6:	b510      	push	{r4, lr}
 800dbd8:	460c      	mov	r4, r1
 800dbda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbde:	f000 f8d5 	bl	800dd8c <_lseek_r>
 800dbe2:	1c43      	adds	r3, r0, #1
 800dbe4:	89a3      	ldrh	r3, [r4, #12]
 800dbe6:	bf15      	itete	ne
 800dbe8:	6560      	strne	r0, [r4, #84]	; 0x54
 800dbea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dbee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dbf2:	81a3      	strheq	r3, [r4, #12]
 800dbf4:	bf18      	it	ne
 800dbf6:	81a3      	strhne	r3, [r4, #12]
 800dbf8:	bd10      	pop	{r4, pc}

0800dbfa <__sclose>:
 800dbfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbfe:	f000 b8b5 	b.w	800dd6c <_close_r>

0800dc02 <__swbuf_r>:
 800dc02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc04:	460e      	mov	r6, r1
 800dc06:	4614      	mov	r4, r2
 800dc08:	4605      	mov	r5, r0
 800dc0a:	b118      	cbz	r0, 800dc14 <__swbuf_r+0x12>
 800dc0c:	6a03      	ldr	r3, [r0, #32]
 800dc0e:	b90b      	cbnz	r3, 800dc14 <__swbuf_r+0x12>
 800dc10:	f7ff ff08 	bl	800da24 <__sinit>
 800dc14:	69a3      	ldr	r3, [r4, #24]
 800dc16:	60a3      	str	r3, [r4, #8]
 800dc18:	89a3      	ldrh	r3, [r4, #12]
 800dc1a:	071a      	lsls	r2, r3, #28
 800dc1c:	d525      	bpl.n	800dc6a <__swbuf_r+0x68>
 800dc1e:	6923      	ldr	r3, [r4, #16]
 800dc20:	b31b      	cbz	r3, 800dc6a <__swbuf_r+0x68>
 800dc22:	6823      	ldr	r3, [r4, #0]
 800dc24:	6922      	ldr	r2, [r4, #16]
 800dc26:	1a98      	subs	r0, r3, r2
 800dc28:	6963      	ldr	r3, [r4, #20]
 800dc2a:	b2f6      	uxtb	r6, r6
 800dc2c:	4283      	cmp	r3, r0
 800dc2e:	4637      	mov	r7, r6
 800dc30:	dc04      	bgt.n	800dc3c <__swbuf_r+0x3a>
 800dc32:	4621      	mov	r1, r4
 800dc34:	4628      	mov	r0, r5
 800dc36:	f000 fd6d 	bl	800e714 <_fflush_r>
 800dc3a:	b9e0      	cbnz	r0, 800dc76 <__swbuf_r+0x74>
 800dc3c:	68a3      	ldr	r3, [r4, #8]
 800dc3e:	3b01      	subs	r3, #1
 800dc40:	60a3      	str	r3, [r4, #8]
 800dc42:	6823      	ldr	r3, [r4, #0]
 800dc44:	1c5a      	adds	r2, r3, #1
 800dc46:	6022      	str	r2, [r4, #0]
 800dc48:	701e      	strb	r6, [r3, #0]
 800dc4a:	6962      	ldr	r2, [r4, #20]
 800dc4c:	1c43      	adds	r3, r0, #1
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d004      	beq.n	800dc5c <__swbuf_r+0x5a>
 800dc52:	89a3      	ldrh	r3, [r4, #12]
 800dc54:	07db      	lsls	r3, r3, #31
 800dc56:	d506      	bpl.n	800dc66 <__swbuf_r+0x64>
 800dc58:	2e0a      	cmp	r6, #10
 800dc5a:	d104      	bne.n	800dc66 <__swbuf_r+0x64>
 800dc5c:	4621      	mov	r1, r4
 800dc5e:	4628      	mov	r0, r5
 800dc60:	f000 fd58 	bl	800e714 <_fflush_r>
 800dc64:	b938      	cbnz	r0, 800dc76 <__swbuf_r+0x74>
 800dc66:	4638      	mov	r0, r7
 800dc68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc6a:	4621      	mov	r1, r4
 800dc6c:	4628      	mov	r0, r5
 800dc6e:	f000 f805 	bl	800dc7c <__swsetup_r>
 800dc72:	2800      	cmp	r0, #0
 800dc74:	d0d5      	beq.n	800dc22 <__swbuf_r+0x20>
 800dc76:	f04f 37ff 	mov.w	r7, #4294967295
 800dc7a:	e7f4      	b.n	800dc66 <__swbuf_r+0x64>

0800dc7c <__swsetup_r>:
 800dc7c:	b538      	push	{r3, r4, r5, lr}
 800dc7e:	4b2a      	ldr	r3, [pc, #168]	; (800dd28 <__swsetup_r+0xac>)
 800dc80:	4605      	mov	r5, r0
 800dc82:	6818      	ldr	r0, [r3, #0]
 800dc84:	460c      	mov	r4, r1
 800dc86:	b118      	cbz	r0, 800dc90 <__swsetup_r+0x14>
 800dc88:	6a03      	ldr	r3, [r0, #32]
 800dc8a:	b90b      	cbnz	r3, 800dc90 <__swsetup_r+0x14>
 800dc8c:	f7ff feca 	bl	800da24 <__sinit>
 800dc90:	89a3      	ldrh	r3, [r4, #12]
 800dc92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc96:	0718      	lsls	r0, r3, #28
 800dc98:	d422      	bmi.n	800dce0 <__swsetup_r+0x64>
 800dc9a:	06d9      	lsls	r1, r3, #27
 800dc9c:	d407      	bmi.n	800dcae <__swsetup_r+0x32>
 800dc9e:	2309      	movs	r3, #9
 800dca0:	602b      	str	r3, [r5, #0]
 800dca2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dca6:	81a3      	strh	r3, [r4, #12]
 800dca8:	f04f 30ff 	mov.w	r0, #4294967295
 800dcac:	e034      	b.n	800dd18 <__swsetup_r+0x9c>
 800dcae:	0758      	lsls	r0, r3, #29
 800dcb0:	d512      	bpl.n	800dcd8 <__swsetup_r+0x5c>
 800dcb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcb4:	b141      	cbz	r1, 800dcc8 <__swsetup_r+0x4c>
 800dcb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dcba:	4299      	cmp	r1, r3
 800dcbc:	d002      	beq.n	800dcc4 <__swsetup_r+0x48>
 800dcbe:	4628      	mov	r0, r5
 800dcc0:	f000 f8d6 	bl	800de70 <_free_r>
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	6363      	str	r3, [r4, #52]	; 0x34
 800dcc8:	89a3      	ldrh	r3, [r4, #12]
 800dcca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dcce:	81a3      	strh	r3, [r4, #12]
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	6063      	str	r3, [r4, #4]
 800dcd4:	6923      	ldr	r3, [r4, #16]
 800dcd6:	6023      	str	r3, [r4, #0]
 800dcd8:	89a3      	ldrh	r3, [r4, #12]
 800dcda:	f043 0308 	orr.w	r3, r3, #8
 800dcde:	81a3      	strh	r3, [r4, #12]
 800dce0:	6923      	ldr	r3, [r4, #16]
 800dce2:	b94b      	cbnz	r3, 800dcf8 <__swsetup_r+0x7c>
 800dce4:	89a3      	ldrh	r3, [r4, #12]
 800dce6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dcea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dcee:	d003      	beq.n	800dcf8 <__swsetup_r+0x7c>
 800dcf0:	4621      	mov	r1, r4
 800dcf2:	4628      	mov	r0, r5
 800dcf4:	f000 fd5c 	bl	800e7b0 <__smakebuf_r>
 800dcf8:	89a0      	ldrh	r0, [r4, #12]
 800dcfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dcfe:	f010 0301 	ands.w	r3, r0, #1
 800dd02:	d00a      	beq.n	800dd1a <__swsetup_r+0x9e>
 800dd04:	2300      	movs	r3, #0
 800dd06:	60a3      	str	r3, [r4, #8]
 800dd08:	6963      	ldr	r3, [r4, #20]
 800dd0a:	425b      	negs	r3, r3
 800dd0c:	61a3      	str	r3, [r4, #24]
 800dd0e:	6923      	ldr	r3, [r4, #16]
 800dd10:	b943      	cbnz	r3, 800dd24 <__swsetup_r+0xa8>
 800dd12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dd16:	d1c4      	bne.n	800dca2 <__swsetup_r+0x26>
 800dd18:	bd38      	pop	{r3, r4, r5, pc}
 800dd1a:	0781      	lsls	r1, r0, #30
 800dd1c:	bf58      	it	pl
 800dd1e:	6963      	ldrpl	r3, [r4, #20]
 800dd20:	60a3      	str	r3, [r4, #8]
 800dd22:	e7f4      	b.n	800dd0e <__swsetup_r+0x92>
 800dd24:	2000      	movs	r0, #0
 800dd26:	e7f7      	b.n	800dd18 <__swsetup_r+0x9c>
 800dd28:	20000090 	.word	0x20000090

0800dd2c <memset>:
 800dd2c:	4402      	add	r2, r0
 800dd2e:	4603      	mov	r3, r0
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d100      	bne.n	800dd36 <memset+0xa>
 800dd34:	4770      	bx	lr
 800dd36:	f803 1b01 	strb.w	r1, [r3], #1
 800dd3a:	e7f9      	b.n	800dd30 <memset+0x4>

0800dd3c <strrchr>:
 800dd3c:	b513      	push	{r0, r1, r4, lr}
 800dd3e:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 800dd42:	4603      	mov	r3, r0
 800dd44:	d110      	bne.n	800dd68 <strrchr+0x2c>
 800dd46:	b002      	add	sp, #8
 800dd48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd4c:	f000 bda0 	b.w	800e890 <strchr>
 800dd50:	1c43      	adds	r3, r0, #1
 800dd52:	4604      	mov	r4, r0
 800dd54:	4618      	mov	r0, r3
 800dd56:	9101      	str	r1, [sp, #4]
 800dd58:	f000 fd9a 	bl	800e890 <strchr>
 800dd5c:	9901      	ldr	r1, [sp, #4]
 800dd5e:	2800      	cmp	r0, #0
 800dd60:	d1f6      	bne.n	800dd50 <strrchr+0x14>
 800dd62:	4620      	mov	r0, r4
 800dd64:	b002      	add	sp, #8
 800dd66:	bd10      	pop	{r4, pc}
 800dd68:	2400      	movs	r4, #0
 800dd6a:	e7f3      	b.n	800dd54 <strrchr+0x18>

0800dd6c <_close_r>:
 800dd6c:	b538      	push	{r3, r4, r5, lr}
 800dd6e:	4d06      	ldr	r5, [pc, #24]	; (800dd88 <_close_r+0x1c>)
 800dd70:	2300      	movs	r3, #0
 800dd72:	4604      	mov	r4, r0
 800dd74:	4608      	mov	r0, r1
 800dd76:	602b      	str	r3, [r5, #0]
 800dd78:	f7f5 fb7b 	bl	8003472 <_close>
 800dd7c:	1c43      	adds	r3, r0, #1
 800dd7e:	d102      	bne.n	800dd86 <_close_r+0x1a>
 800dd80:	682b      	ldr	r3, [r5, #0]
 800dd82:	b103      	cbz	r3, 800dd86 <_close_r+0x1a>
 800dd84:	6023      	str	r3, [r4, #0]
 800dd86:	bd38      	pop	{r3, r4, r5, pc}
 800dd88:	20001a80 	.word	0x20001a80

0800dd8c <_lseek_r>:
 800dd8c:	b538      	push	{r3, r4, r5, lr}
 800dd8e:	4d07      	ldr	r5, [pc, #28]	; (800ddac <_lseek_r+0x20>)
 800dd90:	4604      	mov	r4, r0
 800dd92:	4608      	mov	r0, r1
 800dd94:	4611      	mov	r1, r2
 800dd96:	2200      	movs	r2, #0
 800dd98:	602a      	str	r2, [r5, #0]
 800dd9a:	461a      	mov	r2, r3
 800dd9c:	f7f5 fb90 	bl	80034c0 <_lseek>
 800dda0:	1c43      	adds	r3, r0, #1
 800dda2:	d102      	bne.n	800ddaa <_lseek_r+0x1e>
 800dda4:	682b      	ldr	r3, [r5, #0]
 800dda6:	b103      	cbz	r3, 800ddaa <_lseek_r+0x1e>
 800dda8:	6023      	str	r3, [r4, #0]
 800ddaa:	bd38      	pop	{r3, r4, r5, pc}
 800ddac:	20001a80 	.word	0x20001a80

0800ddb0 <_read_r>:
 800ddb0:	b538      	push	{r3, r4, r5, lr}
 800ddb2:	4d07      	ldr	r5, [pc, #28]	; (800ddd0 <_read_r+0x20>)
 800ddb4:	4604      	mov	r4, r0
 800ddb6:	4608      	mov	r0, r1
 800ddb8:	4611      	mov	r1, r2
 800ddba:	2200      	movs	r2, #0
 800ddbc:	602a      	str	r2, [r5, #0]
 800ddbe:	461a      	mov	r2, r3
 800ddc0:	f7f5 fb3a 	bl	8003438 <_read>
 800ddc4:	1c43      	adds	r3, r0, #1
 800ddc6:	d102      	bne.n	800ddce <_read_r+0x1e>
 800ddc8:	682b      	ldr	r3, [r5, #0]
 800ddca:	b103      	cbz	r3, 800ddce <_read_r+0x1e>
 800ddcc:	6023      	str	r3, [r4, #0]
 800ddce:	bd38      	pop	{r3, r4, r5, pc}
 800ddd0:	20001a80 	.word	0x20001a80

0800ddd4 <_write_r>:
 800ddd4:	b538      	push	{r3, r4, r5, lr}
 800ddd6:	4d07      	ldr	r5, [pc, #28]	; (800ddf4 <_write_r+0x20>)
 800ddd8:	4604      	mov	r4, r0
 800ddda:	4608      	mov	r0, r1
 800dddc:	4611      	mov	r1, r2
 800ddde:	2200      	movs	r2, #0
 800dde0:	602a      	str	r2, [r5, #0]
 800dde2:	461a      	mov	r2, r3
 800dde4:	f7fc ffda 	bl	800ad9c <_write>
 800dde8:	1c43      	adds	r3, r0, #1
 800ddea:	d102      	bne.n	800ddf2 <_write_r+0x1e>
 800ddec:	682b      	ldr	r3, [r5, #0]
 800ddee:	b103      	cbz	r3, 800ddf2 <_write_r+0x1e>
 800ddf0:	6023      	str	r3, [r4, #0]
 800ddf2:	bd38      	pop	{r3, r4, r5, pc}
 800ddf4:	20001a80 	.word	0x20001a80

0800ddf8 <__errno>:
 800ddf8:	4b01      	ldr	r3, [pc, #4]	; (800de00 <__errno+0x8>)
 800ddfa:	6818      	ldr	r0, [r3, #0]
 800ddfc:	4770      	bx	lr
 800ddfe:	bf00      	nop
 800de00:	20000090 	.word	0x20000090

0800de04 <__libc_init_array>:
 800de04:	b570      	push	{r4, r5, r6, lr}
 800de06:	4d0d      	ldr	r5, [pc, #52]	; (800de3c <__libc_init_array+0x38>)
 800de08:	4c0d      	ldr	r4, [pc, #52]	; (800de40 <__libc_init_array+0x3c>)
 800de0a:	1b64      	subs	r4, r4, r5
 800de0c:	10a4      	asrs	r4, r4, #2
 800de0e:	2600      	movs	r6, #0
 800de10:	42a6      	cmp	r6, r4
 800de12:	d109      	bne.n	800de28 <__libc_init_array+0x24>
 800de14:	4d0b      	ldr	r5, [pc, #44]	; (800de44 <__libc_init_array+0x40>)
 800de16:	4c0c      	ldr	r4, [pc, #48]	; (800de48 <__libc_init_array+0x44>)
 800de18:	f000 fd7a 	bl	800e910 <_init>
 800de1c:	1b64      	subs	r4, r4, r5
 800de1e:	10a4      	asrs	r4, r4, #2
 800de20:	2600      	movs	r6, #0
 800de22:	42a6      	cmp	r6, r4
 800de24:	d105      	bne.n	800de32 <__libc_init_array+0x2e>
 800de26:	bd70      	pop	{r4, r5, r6, pc}
 800de28:	f855 3b04 	ldr.w	r3, [r5], #4
 800de2c:	4798      	blx	r3
 800de2e:	3601      	adds	r6, #1
 800de30:	e7ee      	b.n	800de10 <__libc_init_array+0xc>
 800de32:	f855 3b04 	ldr.w	r3, [r5], #4
 800de36:	4798      	blx	r3
 800de38:	3601      	adds	r6, #1
 800de3a:	e7f2      	b.n	800de22 <__libc_init_array+0x1e>
 800de3c:	080101a4 	.word	0x080101a4
 800de40:	080101a4 	.word	0x080101a4
 800de44:	080101a4 	.word	0x080101a4
 800de48:	080101a8 	.word	0x080101a8

0800de4c <__retarget_lock_init_recursive>:
 800de4c:	4770      	bx	lr

0800de4e <__retarget_lock_acquire_recursive>:
 800de4e:	4770      	bx	lr

0800de50 <__retarget_lock_release_recursive>:
 800de50:	4770      	bx	lr

0800de52 <memcpy>:
 800de52:	440a      	add	r2, r1
 800de54:	4291      	cmp	r1, r2
 800de56:	f100 33ff 	add.w	r3, r0, #4294967295
 800de5a:	d100      	bne.n	800de5e <memcpy+0xc>
 800de5c:	4770      	bx	lr
 800de5e:	b510      	push	{r4, lr}
 800de60:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de64:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de68:	4291      	cmp	r1, r2
 800de6a:	d1f9      	bne.n	800de60 <memcpy+0xe>
 800de6c:	bd10      	pop	{r4, pc}
	...

0800de70 <_free_r>:
 800de70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de72:	2900      	cmp	r1, #0
 800de74:	d044      	beq.n	800df00 <_free_r+0x90>
 800de76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de7a:	9001      	str	r0, [sp, #4]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	f1a1 0404 	sub.w	r4, r1, #4
 800de82:	bfb8      	it	lt
 800de84:	18e4      	addlt	r4, r4, r3
 800de86:	f000 f8df 	bl	800e048 <__malloc_lock>
 800de8a:	4a1e      	ldr	r2, [pc, #120]	; (800df04 <_free_r+0x94>)
 800de8c:	9801      	ldr	r0, [sp, #4]
 800de8e:	6813      	ldr	r3, [r2, #0]
 800de90:	b933      	cbnz	r3, 800dea0 <_free_r+0x30>
 800de92:	6063      	str	r3, [r4, #4]
 800de94:	6014      	str	r4, [r2, #0]
 800de96:	b003      	add	sp, #12
 800de98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de9c:	f000 b8da 	b.w	800e054 <__malloc_unlock>
 800dea0:	42a3      	cmp	r3, r4
 800dea2:	d908      	bls.n	800deb6 <_free_r+0x46>
 800dea4:	6825      	ldr	r5, [r4, #0]
 800dea6:	1961      	adds	r1, r4, r5
 800dea8:	428b      	cmp	r3, r1
 800deaa:	bf01      	itttt	eq
 800deac:	6819      	ldreq	r1, [r3, #0]
 800deae:	685b      	ldreq	r3, [r3, #4]
 800deb0:	1949      	addeq	r1, r1, r5
 800deb2:	6021      	streq	r1, [r4, #0]
 800deb4:	e7ed      	b.n	800de92 <_free_r+0x22>
 800deb6:	461a      	mov	r2, r3
 800deb8:	685b      	ldr	r3, [r3, #4]
 800deba:	b10b      	cbz	r3, 800dec0 <_free_r+0x50>
 800debc:	42a3      	cmp	r3, r4
 800debe:	d9fa      	bls.n	800deb6 <_free_r+0x46>
 800dec0:	6811      	ldr	r1, [r2, #0]
 800dec2:	1855      	adds	r5, r2, r1
 800dec4:	42a5      	cmp	r5, r4
 800dec6:	d10b      	bne.n	800dee0 <_free_r+0x70>
 800dec8:	6824      	ldr	r4, [r4, #0]
 800deca:	4421      	add	r1, r4
 800decc:	1854      	adds	r4, r2, r1
 800dece:	42a3      	cmp	r3, r4
 800ded0:	6011      	str	r1, [r2, #0]
 800ded2:	d1e0      	bne.n	800de96 <_free_r+0x26>
 800ded4:	681c      	ldr	r4, [r3, #0]
 800ded6:	685b      	ldr	r3, [r3, #4]
 800ded8:	6053      	str	r3, [r2, #4]
 800deda:	440c      	add	r4, r1
 800dedc:	6014      	str	r4, [r2, #0]
 800dede:	e7da      	b.n	800de96 <_free_r+0x26>
 800dee0:	d902      	bls.n	800dee8 <_free_r+0x78>
 800dee2:	230c      	movs	r3, #12
 800dee4:	6003      	str	r3, [r0, #0]
 800dee6:	e7d6      	b.n	800de96 <_free_r+0x26>
 800dee8:	6825      	ldr	r5, [r4, #0]
 800deea:	1961      	adds	r1, r4, r5
 800deec:	428b      	cmp	r3, r1
 800deee:	bf04      	itt	eq
 800def0:	6819      	ldreq	r1, [r3, #0]
 800def2:	685b      	ldreq	r3, [r3, #4]
 800def4:	6063      	str	r3, [r4, #4]
 800def6:	bf04      	itt	eq
 800def8:	1949      	addeq	r1, r1, r5
 800defa:	6021      	streq	r1, [r4, #0]
 800defc:	6054      	str	r4, [r2, #4]
 800defe:	e7ca      	b.n	800de96 <_free_r+0x26>
 800df00:	b003      	add	sp, #12
 800df02:	bd30      	pop	{r4, r5, pc}
 800df04:	20001a88 	.word	0x20001a88

0800df08 <sbrk_aligned>:
 800df08:	b570      	push	{r4, r5, r6, lr}
 800df0a:	4e0e      	ldr	r6, [pc, #56]	; (800df44 <sbrk_aligned+0x3c>)
 800df0c:	460c      	mov	r4, r1
 800df0e:	6831      	ldr	r1, [r6, #0]
 800df10:	4605      	mov	r5, r0
 800df12:	b911      	cbnz	r1, 800df1a <sbrk_aligned+0x12>
 800df14:	f000 fcec 	bl	800e8f0 <_sbrk_r>
 800df18:	6030      	str	r0, [r6, #0]
 800df1a:	4621      	mov	r1, r4
 800df1c:	4628      	mov	r0, r5
 800df1e:	f000 fce7 	bl	800e8f0 <_sbrk_r>
 800df22:	1c43      	adds	r3, r0, #1
 800df24:	d00a      	beq.n	800df3c <sbrk_aligned+0x34>
 800df26:	1cc4      	adds	r4, r0, #3
 800df28:	f024 0403 	bic.w	r4, r4, #3
 800df2c:	42a0      	cmp	r0, r4
 800df2e:	d007      	beq.n	800df40 <sbrk_aligned+0x38>
 800df30:	1a21      	subs	r1, r4, r0
 800df32:	4628      	mov	r0, r5
 800df34:	f000 fcdc 	bl	800e8f0 <_sbrk_r>
 800df38:	3001      	adds	r0, #1
 800df3a:	d101      	bne.n	800df40 <sbrk_aligned+0x38>
 800df3c:	f04f 34ff 	mov.w	r4, #4294967295
 800df40:	4620      	mov	r0, r4
 800df42:	bd70      	pop	{r4, r5, r6, pc}
 800df44:	20001a8c 	.word	0x20001a8c

0800df48 <_malloc_r>:
 800df48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df4c:	1ccd      	adds	r5, r1, #3
 800df4e:	f025 0503 	bic.w	r5, r5, #3
 800df52:	3508      	adds	r5, #8
 800df54:	2d0c      	cmp	r5, #12
 800df56:	bf38      	it	cc
 800df58:	250c      	movcc	r5, #12
 800df5a:	2d00      	cmp	r5, #0
 800df5c:	4607      	mov	r7, r0
 800df5e:	db01      	blt.n	800df64 <_malloc_r+0x1c>
 800df60:	42a9      	cmp	r1, r5
 800df62:	d905      	bls.n	800df70 <_malloc_r+0x28>
 800df64:	230c      	movs	r3, #12
 800df66:	603b      	str	r3, [r7, #0]
 800df68:	2600      	movs	r6, #0
 800df6a:	4630      	mov	r0, r6
 800df6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df70:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e044 <_malloc_r+0xfc>
 800df74:	f000 f868 	bl	800e048 <__malloc_lock>
 800df78:	f8d8 3000 	ldr.w	r3, [r8]
 800df7c:	461c      	mov	r4, r3
 800df7e:	bb5c      	cbnz	r4, 800dfd8 <_malloc_r+0x90>
 800df80:	4629      	mov	r1, r5
 800df82:	4638      	mov	r0, r7
 800df84:	f7ff ffc0 	bl	800df08 <sbrk_aligned>
 800df88:	1c43      	adds	r3, r0, #1
 800df8a:	4604      	mov	r4, r0
 800df8c:	d155      	bne.n	800e03a <_malloc_r+0xf2>
 800df8e:	f8d8 4000 	ldr.w	r4, [r8]
 800df92:	4626      	mov	r6, r4
 800df94:	2e00      	cmp	r6, #0
 800df96:	d145      	bne.n	800e024 <_malloc_r+0xdc>
 800df98:	2c00      	cmp	r4, #0
 800df9a:	d048      	beq.n	800e02e <_malloc_r+0xe6>
 800df9c:	6823      	ldr	r3, [r4, #0]
 800df9e:	4631      	mov	r1, r6
 800dfa0:	4638      	mov	r0, r7
 800dfa2:	eb04 0903 	add.w	r9, r4, r3
 800dfa6:	f000 fca3 	bl	800e8f0 <_sbrk_r>
 800dfaa:	4581      	cmp	r9, r0
 800dfac:	d13f      	bne.n	800e02e <_malloc_r+0xe6>
 800dfae:	6821      	ldr	r1, [r4, #0]
 800dfb0:	1a6d      	subs	r5, r5, r1
 800dfb2:	4629      	mov	r1, r5
 800dfb4:	4638      	mov	r0, r7
 800dfb6:	f7ff ffa7 	bl	800df08 <sbrk_aligned>
 800dfba:	3001      	adds	r0, #1
 800dfbc:	d037      	beq.n	800e02e <_malloc_r+0xe6>
 800dfbe:	6823      	ldr	r3, [r4, #0]
 800dfc0:	442b      	add	r3, r5
 800dfc2:	6023      	str	r3, [r4, #0]
 800dfc4:	f8d8 3000 	ldr.w	r3, [r8]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d038      	beq.n	800e03e <_malloc_r+0xf6>
 800dfcc:	685a      	ldr	r2, [r3, #4]
 800dfce:	42a2      	cmp	r2, r4
 800dfd0:	d12b      	bne.n	800e02a <_malloc_r+0xe2>
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	605a      	str	r2, [r3, #4]
 800dfd6:	e00f      	b.n	800dff8 <_malloc_r+0xb0>
 800dfd8:	6822      	ldr	r2, [r4, #0]
 800dfda:	1b52      	subs	r2, r2, r5
 800dfdc:	d41f      	bmi.n	800e01e <_malloc_r+0xd6>
 800dfde:	2a0b      	cmp	r2, #11
 800dfe0:	d917      	bls.n	800e012 <_malloc_r+0xca>
 800dfe2:	1961      	adds	r1, r4, r5
 800dfe4:	42a3      	cmp	r3, r4
 800dfe6:	6025      	str	r5, [r4, #0]
 800dfe8:	bf18      	it	ne
 800dfea:	6059      	strne	r1, [r3, #4]
 800dfec:	6863      	ldr	r3, [r4, #4]
 800dfee:	bf08      	it	eq
 800dff0:	f8c8 1000 	streq.w	r1, [r8]
 800dff4:	5162      	str	r2, [r4, r5]
 800dff6:	604b      	str	r3, [r1, #4]
 800dff8:	4638      	mov	r0, r7
 800dffa:	f104 060b 	add.w	r6, r4, #11
 800dffe:	f000 f829 	bl	800e054 <__malloc_unlock>
 800e002:	f026 0607 	bic.w	r6, r6, #7
 800e006:	1d23      	adds	r3, r4, #4
 800e008:	1af2      	subs	r2, r6, r3
 800e00a:	d0ae      	beq.n	800df6a <_malloc_r+0x22>
 800e00c:	1b9b      	subs	r3, r3, r6
 800e00e:	50a3      	str	r3, [r4, r2]
 800e010:	e7ab      	b.n	800df6a <_malloc_r+0x22>
 800e012:	42a3      	cmp	r3, r4
 800e014:	6862      	ldr	r2, [r4, #4]
 800e016:	d1dd      	bne.n	800dfd4 <_malloc_r+0x8c>
 800e018:	f8c8 2000 	str.w	r2, [r8]
 800e01c:	e7ec      	b.n	800dff8 <_malloc_r+0xb0>
 800e01e:	4623      	mov	r3, r4
 800e020:	6864      	ldr	r4, [r4, #4]
 800e022:	e7ac      	b.n	800df7e <_malloc_r+0x36>
 800e024:	4634      	mov	r4, r6
 800e026:	6876      	ldr	r6, [r6, #4]
 800e028:	e7b4      	b.n	800df94 <_malloc_r+0x4c>
 800e02a:	4613      	mov	r3, r2
 800e02c:	e7cc      	b.n	800dfc8 <_malloc_r+0x80>
 800e02e:	230c      	movs	r3, #12
 800e030:	603b      	str	r3, [r7, #0]
 800e032:	4638      	mov	r0, r7
 800e034:	f000 f80e 	bl	800e054 <__malloc_unlock>
 800e038:	e797      	b.n	800df6a <_malloc_r+0x22>
 800e03a:	6025      	str	r5, [r4, #0]
 800e03c:	e7dc      	b.n	800dff8 <_malloc_r+0xb0>
 800e03e:	605b      	str	r3, [r3, #4]
 800e040:	deff      	udf	#255	; 0xff
 800e042:	bf00      	nop
 800e044:	20001a88 	.word	0x20001a88

0800e048 <__malloc_lock>:
 800e048:	4801      	ldr	r0, [pc, #4]	; (800e050 <__malloc_lock+0x8>)
 800e04a:	f7ff bf00 	b.w	800de4e <__retarget_lock_acquire_recursive>
 800e04e:	bf00      	nop
 800e050:	20001a84 	.word	0x20001a84

0800e054 <__malloc_unlock>:
 800e054:	4801      	ldr	r0, [pc, #4]	; (800e05c <__malloc_unlock+0x8>)
 800e056:	f7ff befb 	b.w	800de50 <__retarget_lock_release_recursive>
 800e05a:	bf00      	nop
 800e05c:	20001a84 	.word	0x20001a84

0800e060 <__sfputc_r>:
 800e060:	6893      	ldr	r3, [r2, #8]
 800e062:	3b01      	subs	r3, #1
 800e064:	2b00      	cmp	r3, #0
 800e066:	b410      	push	{r4}
 800e068:	6093      	str	r3, [r2, #8]
 800e06a:	da08      	bge.n	800e07e <__sfputc_r+0x1e>
 800e06c:	6994      	ldr	r4, [r2, #24]
 800e06e:	42a3      	cmp	r3, r4
 800e070:	db01      	blt.n	800e076 <__sfputc_r+0x16>
 800e072:	290a      	cmp	r1, #10
 800e074:	d103      	bne.n	800e07e <__sfputc_r+0x1e>
 800e076:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e07a:	f7ff bdc2 	b.w	800dc02 <__swbuf_r>
 800e07e:	6813      	ldr	r3, [r2, #0]
 800e080:	1c58      	adds	r0, r3, #1
 800e082:	6010      	str	r0, [r2, #0]
 800e084:	7019      	strb	r1, [r3, #0]
 800e086:	4608      	mov	r0, r1
 800e088:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e08c:	4770      	bx	lr

0800e08e <__sfputs_r>:
 800e08e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e090:	4606      	mov	r6, r0
 800e092:	460f      	mov	r7, r1
 800e094:	4614      	mov	r4, r2
 800e096:	18d5      	adds	r5, r2, r3
 800e098:	42ac      	cmp	r4, r5
 800e09a:	d101      	bne.n	800e0a0 <__sfputs_r+0x12>
 800e09c:	2000      	movs	r0, #0
 800e09e:	e007      	b.n	800e0b0 <__sfputs_r+0x22>
 800e0a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0a4:	463a      	mov	r2, r7
 800e0a6:	4630      	mov	r0, r6
 800e0a8:	f7ff ffda 	bl	800e060 <__sfputc_r>
 800e0ac:	1c43      	adds	r3, r0, #1
 800e0ae:	d1f3      	bne.n	800e098 <__sfputs_r+0xa>
 800e0b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e0b4 <_vfiprintf_r>:
 800e0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0b8:	460d      	mov	r5, r1
 800e0ba:	b09d      	sub	sp, #116	; 0x74
 800e0bc:	4614      	mov	r4, r2
 800e0be:	4698      	mov	r8, r3
 800e0c0:	4606      	mov	r6, r0
 800e0c2:	b118      	cbz	r0, 800e0cc <_vfiprintf_r+0x18>
 800e0c4:	6a03      	ldr	r3, [r0, #32]
 800e0c6:	b90b      	cbnz	r3, 800e0cc <_vfiprintf_r+0x18>
 800e0c8:	f7ff fcac 	bl	800da24 <__sinit>
 800e0cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e0ce:	07d9      	lsls	r1, r3, #31
 800e0d0:	d405      	bmi.n	800e0de <_vfiprintf_r+0x2a>
 800e0d2:	89ab      	ldrh	r3, [r5, #12]
 800e0d4:	059a      	lsls	r2, r3, #22
 800e0d6:	d402      	bmi.n	800e0de <_vfiprintf_r+0x2a>
 800e0d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0da:	f7ff feb8 	bl	800de4e <__retarget_lock_acquire_recursive>
 800e0de:	89ab      	ldrh	r3, [r5, #12]
 800e0e0:	071b      	lsls	r3, r3, #28
 800e0e2:	d501      	bpl.n	800e0e8 <_vfiprintf_r+0x34>
 800e0e4:	692b      	ldr	r3, [r5, #16]
 800e0e6:	b99b      	cbnz	r3, 800e110 <_vfiprintf_r+0x5c>
 800e0e8:	4629      	mov	r1, r5
 800e0ea:	4630      	mov	r0, r6
 800e0ec:	f7ff fdc6 	bl	800dc7c <__swsetup_r>
 800e0f0:	b170      	cbz	r0, 800e110 <_vfiprintf_r+0x5c>
 800e0f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e0f4:	07dc      	lsls	r4, r3, #31
 800e0f6:	d504      	bpl.n	800e102 <_vfiprintf_r+0x4e>
 800e0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e0fc:	b01d      	add	sp, #116	; 0x74
 800e0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e102:	89ab      	ldrh	r3, [r5, #12]
 800e104:	0598      	lsls	r0, r3, #22
 800e106:	d4f7      	bmi.n	800e0f8 <_vfiprintf_r+0x44>
 800e108:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e10a:	f7ff fea1 	bl	800de50 <__retarget_lock_release_recursive>
 800e10e:	e7f3      	b.n	800e0f8 <_vfiprintf_r+0x44>
 800e110:	2300      	movs	r3, #0
 800e112:	9309      	str	r3, [sp, #36]	; 0x24
 800e114:	2320      	movs	r3, #32
 800e116:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e11a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e11e:	2330      	movs	r3, #48	; 0x30
 800e120:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e2d4 <_vfiprintf_r+0x220>
 800e124:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e128:	f04f 0901 	mov.w	r9, #1
 800e12c:	4623      	mov	r3, r4
 800e12e:	469a      	mov	sl, r3
 800e130:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e134:	b10a      	cbz	r2, 800e13a <_vfiprintf_r+0x86>
 800e136:	2a25      	cmp	r2, #37	; 0x25
 800e138:	d1f9      	bne.n	800e12e <_vfiprintf_r+0x7a>
 800e13a:	ebba 0b04 	subs.w	fp, sl, r4
 800e13e:	d00b      	beq.n	800e158 <_vfiprintf_r+0xa4>
 800e140:	465b      	mov	r3, fp
 800e142:	4622      	mov	r2, r4
 800e144:	4629      	mov	r1, r5
 800e146:	4630      	mov	r0, r6
 800e148:	f7ff ffa1 	bl	800e08e <__sfputs_r>
 800e14c:	3001      	adds	r0, #1
 800e14e:	f000 80a9 	beq.w	800e2a4 <_vfiprintf_r+0x1f0>
 800e152:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e154:	445a      	add	r2, fp
 800e156:	9209      	str	r2, [sp, #36]	; 0x24
 800e158:	f89a 3000 	ldrb.w	r3, [sl]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	f000 80a1 	beq.w	800e2a4 <_vfiprintf_r+0x1f0>
 800e162:	2300      	movs	r3, #0
 800e164:	f04f 32ff 	mov.w	r2, #4294967295
 800e168:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e16c:	f10a 0a01 	add.w	sl, sl, #1
 800e170:	9304      	str	r3, [sp, #16]
 800e172:	9307      	str	r3, [sp, #28]
 800e174:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e178:	931a      	str	r3, [sp, #104]	; 0x68
 800e17a:	4654      	mov	r4, sl
 800e17c:	2205      	movs	r2, #5
 800e17e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e182:	4854      	ldr	r0, [pc, #336]	; (800e2d4 <_vfiprintf_r+0x220>)
 800e184:	f7f2 f804 	bl	8000190 <memchr>
 800e188:	9a04      	ldr	r2, [sp, #16]
 800e18a:	b9d8      	cbnz	r0, 800e1c4 <_vfiprintf_r+0x110>
 800e18c:	06d1      	lsls	r1, r2, #27
 800e18e:	bf44      	itt	mi
 800e190:	2320      	movmi	r3, #32
 800e192:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e196:	0713      	lsls	r3, r2, #28
 800e198:	bf44      	itt	mi
 800e19a:	232b      	movmi	r3, #43	; 0x2b
 800e19c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1a0:	f89a 3000 	ldrb.w	r3, [sl]
 800e1a4:	2b2a      	cmp	r3, #42	; 0x2a
 800e1a6:	d015      	beq.n	800e1d4 <_vfiprintf_r+0x120>
 800e1a8:	9a07      	ldr	r2, [sp, #28]
 800e1aa:	4654      	mov	r4, sl
 800e1ac:	2000      	movs	r0, #0
 800e1ae:	f04f 0c0a 	mov.w	ip, #10
 800e1b2:	4621      	mov	r1, r4
 800e1b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1b8:	3b30      	subs	r3, #48	; 0x30
 800e1ba:	2b09      	cmp	r3, #9
 800e1bc:	d94d      	bls.n	800e25a <_vfiprintf_r+0x1a6>
 800e1be:	b1b0      	cbz	r0, 800e1ee <_vfiprintf_r+0x13a>
 800e1c0:	9207      	str	r2, [sp, #28]
 800e1c2:	e014      	b.n	800e1ee <_vfiprintf_r+0x13a>
 800e1c4:	eba0 0308 	sub.w	r3, r0, r8
 800e1c8:	fa09 f303 	lsl.w	r3, r9, r3
 800e1cc:	4313      	orrs	r3, r2
 800e1ce:	9304      	str	r3, [sp, #16]
 800e1d0:	46a2      	mov	sl, r4
 800e1d2:	e7d2      	b.n	800e17a <_vfiprintf_r+0xc6>
 800e1d4:	9b03      	ldr	r3, [sp, #12]
 800e1d6:	1d19      	adds	r1, r3, #4
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	9103      	str	r1, [sp, #12]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	bfbb      	ittet	lt
 800e1e0:	425b      	neglt	r3, r3
 800e1e2:	f042 0202 	orrlt.w	r2, r2, #2
 800e1e6:	9307      	strge	r3, [sp, #28]
 800e1e8:	9307      	strlt	r3, [sp, #28]
 800e1ea:	bfb8      	it	lt
 800e1ec:	9204      	strlt	r2, [sp, #16]
 800e1ee:	7823      	ldrb	r3, [r4, #0]
 800e1f0:	2b2e      	cmp	r3, #46	; 0x2e
 800e1f2:	d10c      	bne.n	800e20e <_vfiprintf_r+0x15a>
 800e1f4:	7863      	ldrb	r3, [r4, #1]
 800e1f6:	2b2a      	cmp	r3, #42	; 0x2a
 800e1f8:	d134      	bne.n	800e264 <_vfiprintf_r+0x1b0>
 800e1fa:	9b03      	ldr	r3, [sp, #12]
 800e1fc:	1d1a      	adds	r2, r3, #4
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	9203      	str	r2, [sp, #12]
 800e202:	2b00      	cmp	r3, #0
 800e204:	bfb8      	it	lt
 800e206:	f04f 33ff 	movlt.w	r3, #4294967295
 800e20a:	3402      	adds	r4, #2
 800e20c:	9305      	str	r3, [sp, #20]
 800e20e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e2e4 <_vfiprintf_r+0x230>
 800e212:	7821      	ldrb	r1, [r4, #0]
 800e214:	2203      	movs	r2, #3
 800e216:	4650      	mov	r0, sl
 800e218:	f7f1 ffba 	bl	8000190 <memchr>
 800e21c:	b138      	cbz	r0, 800e22e <_vfiprintf_r+0x17a>
 800e21e:	9b04      	ldr	r3, [sp, #16]
 800e220:	eba0 000a 	sub.w	r0, r0, sl
 800e224:	2240      	movs	r2, #64	; 0x40
 800e226:	4082      	lsls	r2, r0
 800e228:	4313      	orrs	r3, r2
 800e22a:	3401      	adds	r4, #1
 800e22c:	9304      	str	r3, [sp, #16]
 800e22e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e232:	4829      	ldr	r0, [pc, #164]	; (800e2d8 <_vfiprintf_r+0x224>)
 800e234:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e238:	2206      	movs	r2, #6
 800e23a:	f7f1 ffa9 	bl	8000190 <memchr>
 800e23e:	2800      	cmp	r0, #0
 800e240:	d03f      	beq.n	800e2c2 <_vfiprintf_r+0x20e>
 800e242:	4b26      	ldr	r3, [pc, #152]	; (800e2dc <_vfiprintf_r+0x228>)
 800e244:	bb1b      	cbnz	r3, 800e28e <_vfiprintf_r+0x1da>
 800e246:	9b03      	ldr	r3, [sp, #12]
 800e248:	3307      	adds	r3, #7
 800e24a:	f023 0307 	bic.w	r3, r3, #7
 800e24e:	3308      	adds	r3, #8
 800e250:	9303      	str	r3, [sp, #12]
 800e252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e254:	443b      	add	r3, r7
 800e256:	9309      	str	r3, [sp, #36]	; 0x24
 800e258:	e768      	b.n	800e12c <_vfiprintf_r+0x78>
 800e25a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e25e:	460c      	mov	r4, r1
 800e260:	2001      	movs	r0, #1
 800e262:	e7a6      	b.n	800e1b2 <_vfiprintf_r+0xfe>
 800e264:	2300      	movs	r3, #0
 800e266:	3401      	adds	r4, #1
 800e268:	9305      	str	r3, [sp, #20]
 800e26a:	4619      	mov	r1, r3
 800e26c:	f04f 0c0a 	mov.w	ip, #10
 800e270:	4620      	mov	r0, r4
 800e272:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e276:	3a30      	subs	r2, #48	; 0x30
 800e278:	2a09      	cmp	r2, #9
 800e27a:	d903      	bls.n	800e284 <_vfiprintf_r+0x1d0>
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d0c6      	beq.n	800e20e <_vfiprintf_r+0x15a>
 800e280:	9105      	str	r1, [sp, #20]
 800e282:	e7c4      	b.n	800e20e <_vfiprintf_r+0x15a>
 800e284:	fb0c 2101 	mla	r1, ip, r1, r2
 800e288:	4604      	mov	r4, r0
 800e28a:	2301      	movs	r3, #1
 800e28c:	e7f0      	b.n	800e270 <_vfiprintf_r+0x1bc>
 800e28e:	ab03      	add	r3, sp, #12
 800e290:	9300      	str	r3, [sp, #0]
 800e292:	462a      	mov	r2, r5
 800e294:	4b12      	ldr	r3, [pc, #72]	; (800e2e0 <_vfiprintf_r+0x22c>)
 800e296:	a904      	add	r1, sp, #16
 800e298:	4630      	mov	r0, r6
 800e29a:	f3af 8000 	nop.w
 800e29e:	4607      	mov	r7, r0
 800e2a0:	1c78      	adds	r0, r7, #1
 800e2a2:	d1d6      	bne.n	800e252 <_vfiprintf_r+0x19e>
 800e2a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e2a6:	07d9      	lsls	r1, r3, #31
 800e2a8:	d405      	bmi.n	800e2b6 <_vfiprintf_r+0x202>
 800e2aa:	89ab      	ldrh	r3, [r5, #12]
 800e2ac:	059a      	lsls	r2, r3, #22
 800e2ae:	d402      	bmi.n	800e2b6 <_vfiprintf_r+0x202>
 800e2b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e2b2:	f7ff fdcd 	bl	800de50 <__retarget_lock_release_recursive>
 800e2b6:	89ab      	ldrh	r3, [r5, #12]
 800e2b8:	065b      	lsls	r3, r3, #25
 800e2ba:	f53f af1d 	bmi.w	800e0f8 <_vfiprintf_r+0x44>
 800e2be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2c0:	e71c      	b.n	800e0fc <_vfiprintf_r+0x48>
 800e2c2:	ab03      	add	r3, sp, #12
 800e2c4:	9300      	str	r3, [sp, #0]
 800e2c6:	462a      	mov	r2, r5
 800e2c8:	4b05      	ldr	r3, [pc, #20]	; (800e2e0 <_vfiprintf_r+0x22c>)
 800e2ca:	a904      	add	r1, sp, #16
 800e2cc:	4630      	mov	r0, r6
 800e2ce:	f000 f879 	bl	800e3c4 <_printf_i>
 800e2d2:	e7e4      	b.n	800e29e <_vfiprintf_r+0x1ea>
 800e2d4:	08010168 	.word	0x08010168
 800e2d8:	08010172 	.word	0x08010172
 800e2dc:	00000000 	.word	0x00000000
 800e2e0:	0800e08f 	.word	0x0800e08f
 800e2e4:	0801016e 	.word	0x0801016e

0800e2e8 <_printf_common>:
 800e2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2ec:	4616      	mov	r6, r2
 800e2ee:	4699      	mov	r9, r3
 800e2f0:	688a      	ldr	r2, [r1, #8]
 800e2f2:	690b      	ldr	r3, [r1, #16]
 800e2f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	bfb8      	it	lt
 800e2fc:	4613      	movlt	r3, r2
 800e2fe:	6033      	str	r3, [r6, #0]
 800e300:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e304:	4607      	mov	r7, r0
 800e306:	460c      	mov	r4, r1
 800e308:	b10a      	cbz	r2, 800e30e <_printf_common+0x26>
 800e30a:	3301      	adds	r3, #1
 800e30c:	6033      	str	r3, [r6, #0]
 800e30e:	6823      	ldr	r3, [r4, #0]
 800e310:	0699      	lsls	r1, r3, #26
 800e312:	bf42      	ittt	mi
 800e314:	6833      	ldrmi	r3, [r6, #0]
 800e316:	3302      	addmi	r3, #2
 800e318:	6033      	strmi	r3, [r6, #0]
 800e31a:	6825      	ldr	r5, [r4, #0]
 800e31c:	f015 0506 	ands.w	r5, r5, #6
 800e320:	d106      	bne.n	800e330 <_printf_common+0x48>
 800e322:	f104 0a19 	add.w	sl, r4, #25
 800e326:	68e3      	ldr	r3, [r4, #12]
 800e328:	6832      	ldr	r2, [r6, #0]
 800e32a:	1a9b      	subs	r3, r3, r2
 800e32c:	42ab      	cmp	r3, r5
 800e32e:	dc26      	bgt.n	800e37e <_printf_common+0x96>
 800e330:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e334:	1e13      	subs	r3, r2, #0
 800e336:	6822      	ldr	r2, [r4, #0]
 800e338:	bf18      	it	ne
 800e33a:	2301      	movne	r3, #1
 800e33c:	0692      	lsls	r2, r2, #26
 800e33e:	d42b      	bmi.n	800e398 <_printf_common+0xb0>
 800e340:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e344:	4649      	mov	r1, r9
 800e346:	4638      	mov	r0, r7
 800e348:	47c0      	blx	r8
 800e34a:	3001      	adds	r0, #1
 800e34c:	d01e      	beq.n	800e38c <_printf_common+0xa4>
 800e34e:	6823      	ldr	r3, [r4, #0]
 800e350:	6922      	ldr	r2, [r4, #16]
 800e352:	f003 0306 	and.w	r3, r3, #6
 800e356:	2b04      	cmp	r3, #4
 800e358:	bf02      	ittt	eq
 800e35a:	68e5      	ldreq	r5, [r4, #12]
 800e35c:	6833      	ldreq	r3, [r6, #0]
 800e35e:	1aed      	subeq	r5, r5, r3
 800e360:	68a3      	ldr	r3, [r4, #8]
 800e362:	bf0c      	ite	eq
 800e364:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e368:	2500      	movne	r5, #0
 800e36a:	4293      	cmp	r3, r2
 800e36c:	bfc4      	itt	gt
 800e36e:	1a9b      	subgt	r3, r3, r2
 800e370:	18ed      	addgt	r5, r5, r3
 800e372:	2600      	movs	r6, #0
 800e374:	341a      	adds	r4, #26
 800e376:	42b5      	cmp	r5, r6
 800e378:	d11a      	bne.n	800e3b0 <_printf_common+0xc8>
 800e37a:	2000      	movs	r0, #0
 800e37c:	e008      	b.n	800e390 <_printf_common+0xa8>
 800e37e:	2301      	movs	r3, #1
 800e380:	4652      	mov	r2, sl
 800e382:	4649      	mov	r1, r9
 800e384:	4638      	mov	r0, r7
 800e386:	47c0      	blx	r8
 800e388:	3001      	adds	r0, #1
 800e38a:	d103      	bne.n	800e394 <_printf_common+0xac>
 800e38c:	f04f 30ff 	mov.w	r0, #4294967295
 800e390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e394:	3501      	adds	r5, #1
 800e396:	e7c6      	b.n	800e326 <_printf_common+0x3e>
 800e398:	18e1      	adds	r1, r4, r3
 800e39a:	1c5a      	adds	r2, r3, #1
 800e39c:	2030      	movs	r0, #48	; 0x30
 800e39e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e3a2:	4422      	add	r2, r4
 800e3a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e3a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e3ac:	3302      	adds	r3, #2
 800e3ae:	e7c7      	b.n	800e340 <_printf_common+0x58>
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	4622      	mov	r2, r4
 800e3b4:	4649      	mov	r1, r9
 800e3b6:	4638      	mov	r0, r7
 800e3b8:	47c0      	blx	r8
 800e3ba:	3001      	adds	r0, #1
 800e3bc:	d0e6      	beq.n	800e38c <_printf_common+0xa4>
 800e3be:	3601      	adds	r6, #1
 800e3c0:	e7d9      	b.n	800e376 <_printf_common+0x8e>
	...

0800e3c4 <_printf_i>:
 800e3c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e3c8:	7e0f      	ldrb	r7, [r1, #24]
 800e3ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e3cc:	2f78      	cmp	r7, #120	; 0x78
 800e3ce:	4691      	mov	r9, r2
 800e3d0:	4680      	mov	r8, r0
 800e3d2:	460c      	mov	r4, r1
 800e3d4:	469a      	mov	sl, r3
 800e3d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e3da:	d807      	bhi.n	800e3ec <_printf_i+0x28>
 800e3dc:	2f62      	cmp	r7, #98	; 0x62
 800e3de:	d80a      	bhi.n	800e3f6 <_printf_i+0x32>
 800e3e0:	2f00      	cmp	r7, #0
 800e3e2:	f000 80d4 	beq.w	800e58e <_printf_i+0x1ca>
 800e3e6:	2f58      	cmp	r7, #88	; 0x58
 800e3e8:	f000 80c0 	beq.w	800e56c <_printf_i+0x1a8>
 800e3ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e3f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e3f4:	e03a      	b.n	800e46c <_printf_i+0xa8>
 800e3f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e3fa:	2b15      	cmp	r3, #21
 800e3fc:	d8f6      	bhi.n	800e3ec <_printf_i+0x28>
 800e3fe:	a101      	add	r1, pc, #4	; (adr r1, 800e404 <_printf_i+0x40>)
 800e400:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e404:	0800e45d 	.word	0x0800e45d
 800e408:	0800e471 	.word	0x0800e471
 800e40c:	0800e3ed 	.word	0x0800e3ed
 800e410:	0800e3ed 	.word	0x0800e3ed
 800e414:	0800e3ed 	.word	0x0800e3ed
 800e418:	0800e3ed 	.word	0x0800e3ed
 800e41c:	0800e471 	.word	0x0800e471
 800e420:	0800e3ed 	.word	0x0800e3ed
 800e424:	0800e3ed 	.word	0x0800e3ed
 800e428:	0800e3ed 	.word	0x0800e3ed
 800e42c:	0800e3ed 	.word	0x0800e3ed
 800e430:	0800e575 	.word	0x0800e575
 800e434:	0800e49d 	.word	0x0800e49d
 800e438:	0800e52f 	.word	0x0800e52f
 800e43c:	0800e3ed 	.word	0x0800e3ed
 800e440:	0800e3ed 	.word	0x0800e3ed
 800e444:	0800e597 	.word	0x0800e597
 800e448:	0800e3ed 	.word	0x0800e3ed
 800e44c:	0800e49d 	.word	0x0800e49d
 800e450:	0800e3ed 	.word	0x0800e3ed
 800e454:	0800e3ed 	.word	0x0800e3ed
 800e458:	0800e537 	.word	0x0800e537
 800e45c:	682b      	ldr	r3, [r5, #0]
 800e45e:	1d1a      	adds	r2, r3, #4
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	602a      	str	r2, [r5, #0]
 800e464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e468:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e46c:	2301      	movs	r3, #1
 800e46e:	e09f      	b.n	800e5b0 <_printf_i+0x1ec>
 800e470:	6820      	ldr	r0, [r4, #0]
 800e472:	682b      	ldr	r3, [r5, #0]
 800e474:	0607      	lsls	r7, r0, #24
 800e476:	f103 0104 	add.w	r1, r3, #4
 800e47a:	6029      	str	r1, [r5, #0]
 800e47c:	d501      	bpl.n	800e482 <_printf_i+0xbe>
 800e47e:	681e      	ldr	r6, [r3, #0]
 800e480:	e003      	b.n	800e48a <_printf_i+0xc6>
 800e482:	0646      	lsls	r6, r0, #25
 800e484:	d5fb      	bpl.n	800e47e <_printf_i+0xba>
 800e486:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e48a:	2e00      	cmp	r6, #0
 800e48c:	da03      	bge.n	800e496 <_printf_i+0xd2>
 800e48e:	232d      	movs	r3, #45	; 0x2d
 800e490:	4276      	negs	r6, r6
 800e492:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e496:	485a      	ldr	r0, [pc, #360]	; (800e600 <_printf_i+0x23c>)
 800e498:	230a      	movs	r3, #10
 800e49a:	e012      	b.n	800e4c2 <_printf_i+0xfe>
 800e49c:	682b      	ldr	r3, [r5, #0]
 800e49e:	6820      	ldr	r0, [r4, #0]
 800e4a0:	1d19      	adds	r1, r3, #4
 800e4a2:	6029      	str	r1, [r5, #0]
 800e4a4:	0605      	lsls	r5, r0, #24
 800e4a6:	d501      	bpl.n	800e4ac <_printf_i+0xe8>
 800e4a8:	681e      	ldr	r6, [r3, #0]
 800e4aa:	e002      	b.n	800e4b2 <_printf_i+0xee>
 800e4ac:	0641      	lsls	r1, r0, #25
 800e4ae:	d5fb      	bpl.n	800e4a8 <_printf_i+0xe4>
 800e4b0:	881e      	ldrh	r6, [r3, #0]
 800e4b2:	4853      	ldr	r0, [pc, #332]	; (800e600 <_printf_i+0x23c>)
 800e4b4:	2f6f      	cmp	r7, #111	; 0x6f
 800e4b6:	bf0c      	ite	eq
 800e4b8:	2308      	moveq	r3, #8
 800e4ba:	230a      	movne	r3, #10
 800e4bc:	2100      	movs	r1, #0
 800e4be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e4c2:	6865      	ldr	r5, [r4, #4]
 800e4c4:	60a5      	str	r5, [r4, #8]
 800e4c6:	2d00      	cmp	r5, #0
 800e4c8:	bfa2      	ittt	ge
 800e4ca:	6821      	ldrge	r1, [r4, #0]
 800e4cc:	f021 0104 	bicge.w	r1, r1, #4
 800e4d0:	6021      	strge	r1, [r4, #0]
 800e4d2:	b90e      	cbnz	r6, 800e4d8 <_printf_i+0x114>
 800e4d4:	2d00      	cmp	r5, #0
 800e4d6:	d04b      	beq.n	800e570 <_printf_i+0x1ac>
 800e4d8:	4615      	mov	r5, r2
 800e4da:	fbb6 f1f3 	udiv	r1, r6, r3
 800e4de:	fb03 6711 	mls	r7, r3, r1, r6
 800e4e2:	5dc7      	ldrb	r7, [r0, r7]
 800e4e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e4e8:	4637      	mov	r7, r6
 800e4ea:	42bb      	cmp	r3, r7
 800e4ec:	460e      	mov	r6, r1
 800e4ee:	d9f4      	bls.n	800e4da <_printf_i+0x116>
 800e4f0:	2b08      	cmp	r3, #8
 800e4f2:	d10b      	bne.n	800e50c <_printf_i+0x148>
 800e4f4:	6823      	ldr	r3, [r4, #0]
 800e4f6:	07de      	lsls	r6, r3, #31
 800e4f8:	d508      	bpl.n	800e50c <_printf_i+0x148>
 800e4fa:	6923      	ldr	r3, [r4, #16]
 800e4fc:	6861      	ldr	r1, [r4, #4]
 800e4fe:	4299      	cmp	r1, r3
 800e500:	bfde      	ittt	le
 800e502:	2330      	movle	r3, #48	; 0x30
 800e504:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e508:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e50c:	1b52      	subs	r2, r2, r5
 800e50e:	6122      	str	r2, [r4, #16]
 800e510:	f8cd a000 	str.w	sl, [sp]
 800e514:	464b      	mov	r3, r9
 800e516:	aa03      	add	r2, sp, #12
 800e518:	4621      	mov	r1, r4
 800e51a:	4640      	mov	r0, r8
 800e51c:	f7ff fee4 	bl	800e2e8 <_printf_common>
 800e520:	3001      	adds	r0, #1
 800e522:	d14a      	bne.n	800e5ba <_printf_i+0x1f6>
 800e524:	f04f 30ff 	mov.w	r0, #4294967295
 800e528:	b004      	add	sp, #16
 800e52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e52e:	6823      	ldr	r3, [r4, #0]
 800e530:	f043 0320 	orr.w	r3, r3, #32
 800e534:	6023      	str	r3, [r4, #0]
 800e536:	4833      	ldr	r0, [pc, #204]	; (800e604 <_printf_i+0x240>)
 800e538:	2778      	movs	r7, #120	; 0x78
 800e53a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e53e:	6823      	ldr	r3, [r4, #0]
 800e540:	6829      	ldr	r1, [r5, #0]
 800e542:	061f      	lsls	r7, r3, #24
 800e544:	f851 6b04 	ldr.w	r6, [r1], #4
 800e548:	d402      	bmi.n	800e550 <_printf_i+0x18c>
 800e54a:	065f      	lsls	r7, r3, #25
 800e54c:	bf48      	it	mi
 800e54e:	b2b6      	uxthmi	r6, r6
 800e550:	07df      	lsls	r7, r3, #31
 800e552:	bf48      	it	mi
 800e554:	f043 0320 	orrmi.w	r3, r3, #32
 800e558:	6029      	str	r1, [r5, #0]
 800e55a:	bf48      	it	mi
 800e55c:	6023      	strmi	r3, [r4, #0]
 800e55e:	b91e      	cbnz	r6, 800e568 <_printf_i+0x1a4>
 800e560:	6823      	ldr	r3, [r4, #0]
 800e562:	f023 0320 	bic.w	r3, r3, #32
 800e566:	6023      	str	r3, [r4, #0]
 800e568:	2310      	movs	r3, #16
 800e56a:	e7a7      	b.n	800e4bc <_printf_i+0xf8>
 800e56c:	4824      	ldr	r0, [pc, #144]	; (800e600 <_printf_i+0x23c>)
 800e56e:	e7e4      	b.n	800e53a <_printf_i+0x176>
 800e570:	4615      	mov	r5, r2
 800e572:	e7bd      	b.n	800e4f0 <_printf_i+0x12c>
 800e574:	682b      	ldr	r3, [r5, #0]
 800e576:	6826      	ldr	r6, [r4, #0]
 800e578:	6961      	ldr	r1, [r4, #20]
 800e57a:	1d18      	adds	r0, r3, #4
 800e57c:	6028      	str	r0, [r5, #0]
 800e57e:	0635      	lsls	r5, r6, #24
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	d501      	bpl.n	800e588 <_printf_i+0x1c4>
 800e584:	6019      	str	r1, [r3, #0]
 800e586:	e002      	b.n	800e58e <_printf_i+0x1ca>
 800e588:	0670      	lsls	r0, r6, #25
 800e58a:	d5fb      	bpl.n	800e584 <_printf_i+0x1c0>
 800e58c:	8019      	strh	r1, [r3, #0]
 800e58e:	2300      	movs	r3, #0
 800e590:	6123      	str	r3, [r4, #16]
 800e592:	4615      	mov	r5, r2
 800e594:	e7bc      	b.n	800e510 <_printf_i+0x14c>
 800e596:	682b      	ldr	r3, [r5, #0]
 800e598:	1d1a      	adds	r2, r3, #4
 800e59a:	602a      	str	r2, [r5, #0]
 800e59c:	681d      	ldr	r5, [r3, #0]
 800e59e:	6862      	ldr	r2, [r4, #4]
 800e5a0:	2100      	movs	r1, #0
 800e5a2:	4628      	mov	r0, r5
 800e5a4:	f7f1 fdf4 	bl	8000190 <memchr>
 800e5a8:	b108      	cbz	r0, 800e5ae <_printf_i+0x1ea>
 800e5aa:	1b40      	subs	r0, r0, r5
 800e5ac:	6060      	str	r0, [r4, #4]
 800e5ae:	6863      	ldr	r3, [r4, #4]
 800e5b0:	6123      	str	r3, [r4, #16]
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5b8:	e7aa      	b.n	800e510 <_printf_i+0x14c>
 800e5ba:	6923      	ldr	r3, [r4, #16]
 800e5bc:	462a      	mov	r2, r5
 800e5be:	4649      	mov	r1, r9
 800e5c0:	4640      	mov	r0, r8
 800e5c2:	47d0      	blx	sl
 800e5c4:	3001      	adds	r0, #1
 800e5c6:	d0ad      	beq.n	800e524 <_printf_i+0x160>
 800e5c8:	6823      	ldr	r3, [r4, #0]
 800e5ca:	079b      	lsls	r3, r3, #30
 800e5cc:	d413      	bmi.n	800e5f6 <_printf_i+0x232>
 800e5ce:	68e0      	ldr	r0, [r4, #12]
 800e5d0:	9b03      	ldr	r3, [sp, #12]
 800e5d2:	4298      	cmp	r0, r3
 800e5d4:	bfb8      	it	lt
 800e5d6:	4618      	movlt	r0, r3
 800e5d8:	e7a6      	b.n	800e528 <_printf_i+0x164>
 800e5da:	2301      	movs	r3, #1
 800e5dc:	4632      	mov	r2, r6
 800e5de:	4649      	mov	r1, r9
 800e5e0:	4640      	mov	r0, r8
 800e5e2:	47d0      	blx	sl
 800e5e4:	3001      	adds	r0, #1
 800e5e6:	d09d      	beq.n	800e524 <_printf_i+0x160>
 800e5e8:	3501      	adds	r5, #1
 800e5ea:	68e3      	ldr	r3, [r4, #12]
 800e5ec:	9903      	ldr	r1, [sp, #12]
 800e5ee:	1a5b      	subs	r3, r3, r1
 800e5f0:	42ab      	cmp	r3, r5
 800e5f2:	dcf2      	bgt.n	800e5da <_printf_i+0x216>
 800e5f4:	e7eb      	b.n	800e5ce <_printf_i+0x20a>
 800e5f6:	2500      	movs	r5, #0
 800e5f8:	f104 0619 	add.w	r6, r4, #25
 800e5fc:	e7f5      	b.n	800e5ea <_printf_i+0x226>
 800e5fe:	bf00      	nop
 800e600:	08010179 	.word	0x08010179
 800e604:	0801018a 	.word	0x0801018a

0800e608 <__sflush_r>:
 800e608:	898a      	ldrh	r2, [r1, #12]
 800e60a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e60e:	4605      	mov	r5, r0
 800e610:	0710      	lsls	r0, r2, #28
 800e612:	460c      	mov	r4, r1
 800e614:	d458      	bmi.n	800e6c8 <__sflush_r+0xc0>
 800e616:	684b      	ldr	r3, [r1, #4]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	dc05      	bgt.n	800e628 <__sflush_r+0x20>
 800e61c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e61e:	2b00      	cmp	r3, #0
 800e620:	dc02      	bgt.n	800e628 <__sflush_r+0x20>
 800e622:	2000      	movs	r0, #0
 800e624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e628:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e62a:	2e00      	cmp	r6, #0
 800e62c:	d0f9      	beq.n	800e622 <__sflush_r+0x1a>
 800e62e:	2300      	movs	r3, #0
 800e630:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e634:	682f      	ldr	r7, [r5, #0]
 800e636:	6a21      	ldr	r1, [r4, #32]
 800e638:	602b      	str	r3, [r5, #0]
 800e63a:	d032      	beq.n	800e6a2 <__sflush_r+0x9a>
 800e63c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e63e:	89a3      	ldrh	r3, [r4, #12]
 800e640:	075a      	lsls	r2, r3, #29
 800e642:	d505      	bpl.n	800e650 <__sflush_r+0x48>
 800e644:	6863      	ldr	r3, [r4, #4]
 800e646:	1ac0      	subs	r0, r0, r3
 800e648:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e64a:	b10b      	cbz	r3, 800e650 <__sflush_r+0x48>
 800e64c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e64e:	1ac0      	subs	r0, r0, r3
 800e650:	2300      	movs	r3, #0
 800e652:	4602      	mov	r2, r0
 800e654:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e656:	6a21      	ldr	r1, [r4, #32]
 800e658:	4628      	mov	r0, r5
 800e65a:	47b0      	blx	r6
 800e65c:	1c43      	adds	r3, r0, #1
 800e65e:	89a3      	ldrh	r3, [r4, #12]
 800e660:	d106      	bne.n	800e670 <__sflush_r+0x68>
 800e662:	6829      	ldr	r1, [r5, #0]
 800e664:	291d      	cmp	r1, #29
 800e666:	d82b      	bhi.n	800e6c0 <__sflush_r+0xb8>
 800e668:	4a29      	ldr	r2, [pc, #164]	; (800e710 <__sflush_r+0x108>)
 800e66a:	410a      	asrs	r2, r1
 800e66c:	07d6      	lsls	r6, r2, #31
 800e66e:	d427      	bmi.n	800e6c0 <__sflush_r+0xb8>
 800e670:	2200      	movs	r2, #0
 800e672:	6062      	str	r2, [r4, #4]
 800e674:	04d9      	lsls	r1, r3, #19
 800e676:	6922      	ldr	r2, [r4, #16]
 800e678:	6022      	str	r2, [r4, #0]
 800e67a:	d504      	bpl.n	800e686 <__sflush_r+0x7e>
 800e67c:	1c42      	adds	r2, r0, #1
 800e67e:	d101      	bne.n	800e684 <__sflush_r+0x7c>
 800e680:	682b      	ldr	r3, [r5, #0]
 800e682:	b903      	cbnz	r3, 800e686 <__sflush_r+0x7e>
 800e684:	6560      	str	r0, [r4, #84]	; 0x54
 800e686:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e688:	602f      	str	r7, [r5, #0]
 800e68a:	2900      	cmp	r1, #0
 800e68c:	d0c9      	beq.n	800e622 <__sflush_r+0x1a>
 800e68e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e692:	4299      	cmp	r1, r3
 800e694:	d002      	beq.n	800e69c <__sflush_r+0x94>
 800e696:	4628      	mov	r0, r5
 800e698:	f7ff fbea 	bl	800de70 <_free_r>
 800e69c:	2000      	movs	r0, #0
 800e69e:	6360      	str	r0, [r4, #52]	; 0x34
 800e6a0:	e7c0      	b.n	800e624 <__sflush_r+0x1c>
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	4628      	mov	r0, r5
 800e6a6:	47b0      	blx	r6
 800e6a8:	1c41      	adds	r1, r0, #1
 800e6aa:	d1c8      	bne.n	800e63e <__sflush_r+0x36>
 800e6ac:	682b      	ldr	r3, [r5, #0]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d0c5      	beq.n	800e63e <__sflush_r+0x36>
 800e6b2:	2b1d      	cmp	r3, #29
 800e6b4:	d001      	beq.n	800e6ba <__sflush_r+0xb2>
 800e6b6:	2b16      	cmp	r3, #22
 800e6b8:	d101      	bne.n	800e6be <__sflush_r+0xb6>
 800e6ba:	602f      	str	r7, [r5, #0]
 800e6bc:	e7b1      	b.n	800e622 <__sflush_r+0x1a>
 800e6be:	89a3      	ldrh	r3, [r4, #12]
 800e6c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6c4:	81a3      	strh	r3, [r4, #12]
 800e6c6:	e7ad      	b.n	800e624 <__sflush_r+0x1c>
 800e6c8:	690f      	ldr	r7, [r1, #16]
 800e6ca:	2f00      	cmp	r7, #0
 800e6cc:	d0a9      	beq.n	800e622 <__sflush_r+0x1a>
 800e6ce:	0793      	lsls	r3, r2, #30
 800e6d0:	680e      	ldr	r6, [r1, #0]
 800e6d2:	bf08      	it	eq
 800e6d4:	694b      	ldreq	r3, [r1, #20]
 800e6d6:	600f      	str	r7, [r1, #0]
 800e6d8:	bf18      	it	ne
 800e6da:	2300      	movne	r3, #0
 800e6dc:	eba6 0807 	sub.w	r8, r6, r7
 800e6e0:	608b      	str	r3, [r1, #8]
 800e6e2:	f1b8 0f00 	cmp.w	r8, #0
 800e6e6:	dd9c      	ble.n	800e622 <__sflush_r+0x1a>
 800e6e8:	6a21      	ldr	r1, [r4, #32]
 800e6ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e6ec:	4643      	mov	r3, r8
 800e6ee:	463a      	mov	r2, r7
 800e6f0:	4628      	mov	r0, r5
 800e6f2:	47b0      	blx	r6
 800e6f4:	2800      	cmp	r0, #0
 800e6f6:	dc06      	bgt.n	800e706 <__sflush_r+0xfe>
 800e6f8:	89a3      	ldrh	r3, [r4, #12]
 800e6fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e6fe:	81a3      	strh	r3, [r4, #12]
 800e700:	f04f 30ff 	mov.w	r0, #4294967295
 800e704:	e78e      	b.n	800e624 <__sflush_r+0x1c>
 800e706:	4407      	add	r7, r0
 800e708:	eba8 0800 	sub.w	r8, r8, r0
 800e70c:	e7e9      	b.n	800e6e2 <__sflush_r+0xda>
 800e70e:	bf00      	nop
 800e710:	dfbffffe 	.word	0xdfbffffe

0800e714 <_fflush_r>:
 800e714:	b538      	push	{r3, r4, r5, lr}
 800e716:	690b      	ldr	r3, [r1, #16]
 800e718:	4605      	mov	r5, r0
 800e71a:	460c      	mov	r4, r1
 800e71c:	b913      	cbnz	r3, 800e724 <_fflush_r+0x10>
 800e71e:	2500      	movs	r5, #0
 800e720:	4628      	mov	r0, r5
 800e722:	bd38      	pop	{r3, r4, r5, pc}
 800e724:	b118      	cbz	r0, 800e72e <_fflush_r+0x1a>
 800e726:	6a03      	ldr	r3, [r0, #32]
 800e728:	b90b      	cbnz	r3, 800e72e <_fflush_r+0x1a>
 800e72a:	f7ff f97b 	bl	800da24 <__sinit>
 800e72e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d0f3      	beq.n	800e71e <_fflush_r+0xa>
 800e736:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e738:	07d0      	lsls	r0, r2, #31
 800e73a:	d404      	bmi.n	800e746 <_fflush_r+0x32>
 800e73c:	0599      	lsls	r1, r3, #22
 800e73e:	d402      	bmi.n	800e746 <_fflush_r+0x32>
 800e740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e742:	f7ff fb84 	bl	800de4e <__retarget_lock_acquire_recursive>
 800e746:	4628      	mov	r0, r5
 800e748:	4621      	mov	r1, r4
 800e74a:	f7ff ff5d 	bl	800e608 <__sflush_r>
 800e74e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e750:	07da      	lsls	r2, r3, #31
 800e752:	4605      	mov	r5, r0
 800e754:	d4e4      	bmi.n	800e720 <_fflush_r+0xc>
 800e756:	89a3      	ldrh	r3, [r4, #12]
 800e758:	059b      	lsls	r3, r3, #22
 800e75a:	d4e1      	bmi.n	800e720 <_fflush_r+0xc>
 800e75c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e75e:	f7ff fb77 	bl	800de50 <__retarget_lock_release_recursive>
 800e762:	e7dd      	b.n	800e720 <_fflush_r+0xc>

0800e764 <__swhatbuf_r>:
 800e764:	b570      	push	{r4, r5, r6, lr}
 800e766:	460c      	mov	r4, r1
 800e768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e76c:	2900      	cmp	r1, #0
 800e76e:	b096      	sub	sp, #88	; 0x58
 800e770:	4615      	mov	r5, r2
 800e772:	461e      	mov	r6, r3
 800e774:	da0d      	bge.n	800e792 <__swhatbuf_r+0x2e>
 800e776:	89a3      	ldrh	r3, [r4, #12]
 800e778:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e77c:	f04f 0100 	mov.w	r1, #0
 800e780:	bf0c      	ite	eq
 800e782:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e786:	2340      	movne	r3, #64	; 0x40
 800e788:	2000      	movs	r0, #0
 800e78a:	6031      	str	r1, [r6, #0]
 800e78c:	602b      	str	r3, [r5, #0]
 800e78e:	b016      	add	sp, #88	; 0x58
 800e790:	bd70      	pop	{r4, r5, r6, pc}
 800e792:	466a      	mov	r2, sp
 800e794:	f000 f88a 	bl	800e8ac <_fstat_r>
 800e798:	2800      	cmp	r0, #0
 800e79a:	dbec      	blt.n	800e776 <__swhatbuf_r+0x12>
 800e79c:	9901      	ldr	r1, [sp, #4]
 800e79e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e7a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e7a6:	4259      	negs	r1, r3
 800e7a8:	4159      	adcs	r1, r3
 800e7aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7ae:	e7eb      	b.n	800e788 <__swhatbuf_r+0x24>

0800e7b0 <__smakebuf_r>:
 800e7b0:	898b      	ldrh	r3, [r1, #12]
 800e7b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e7b4:	079d      	lsls	r5, r3, #30
 800e7b6:	4606      	mov	r6, r0
 800e7b8:	460c      	mov	r4, r1
 800e7ba:	d507      	bpl.n	800e7cc <__smakebuf_r+0x1c>
 800e7bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e7c0:	6023      	str	r3, [r4, #0]
 800e7c2:	6123      	str	r3, [r4, #16]
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	6163      	str	r3, [r4, #20]
 800e7c8:	b002      	add	sp, #8
 800e7ca:	bd70      	pop	{r4, r5, r6, pc}
 800e7cc:	ab01      	add	r3, sp, #4
 800e7ce:	466a      	mov	r2, sp
 800e7d0:	f7ff ffc8 	bl	800e764 <__swhatbuf_r>
 800e7d4:	9900      	ldr	r1, [sp, #0]
 800e7d6:	4605      	mov	r5, r0
 800e7d8:	4630      	mov	r0, r6
 800e7da:	f7ff fbb5 	bl	800df48 <_malloc_r>
 800e7de:	b948      	cbnz	r0, 800e7f4 <__smakebuf_r+0x44>
 800e7e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7e4:	059a      	lsls	r2, r3, #22
 800e7e6:	d4ef      	bmi.n	800e7c8 <__smakebuf_r+0x18>
 800e7e8:	f023 0303 	bic.w	r3, r3, #3
 800e7ec:	f043 0302 	orr.w	r3, r3, #2
 800e7f0:	81a3      	strh	r3, [r4, #12]
 800e7f2:	e7e3      	b.n	800e7bc <__smakebuf_r+0xc>
 800e7f4:	89a3      	ldrh	r3, [r4, #12]
 800e7f6:	6020      	str	r0, [r4, #0]
 800e7f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7fc:	81a3      	strh	r3, [r4, #12]
 800e7fe:	9b00      	ldr	r3, [sp, #0]
 800e800:	6163      	str	r3, [r4, #20]
 800e802:	9b01      	ldr	r3, [sp, #4]
 800e804:	6120      	str	r0, [r4, #16]
 800e806:	b15b      	cbz	r3, 800e820 <__smakebuf_r+0x70>
 800e808:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e80c:	4630      	mov	r0, r6
 800e80e:	f000 f85f 	bl	800e8d0 <_isatty_r>
 800e812:	b128      	cbz	r0, 800e820 <__smakebuf_r+0x70>
 800e814:	89a3      	ldrh	r3, [r4, #12]
 800e816:	f023 0303 	bic.w	r3, r3, #3
 800e81a:	f043 0301 	orr.w	r3, r3, #1
 800e81e:	81a3      	strh	r3, [r4, #12]
 800e820:	89a3      	ldrh	r3, [r4, #12]
 800e822:	431d      	orrs	r5, r3
 800e824:	81a5      	strh	r5, [r4, #12]
 800e826:	e7cf      	b.n	800e7c8 <__smakebuf_r+0x18>

0800e828 <_putc_r>:
 800e828:	b570      	push	{r4, r5, r6, lr}
 800e82a:	460d      	mov	r5, r1
 800e82c:	4614      	mov	r4, r2
 800e82e:	4606      	mov	r6, r0
 800e830:	b118      	cbz	r0, 800e83a <_putc_r+0x12>
 800e832:	6a03      	ldr	r3, [r0, #32]
 800e834:	b90b      	cbnz	r3, 800e83a <_putc_r+0x12>
 800e836:	f7ff f8f5 	bl	800da24 <__sinit>
 800e83a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e83c:	07d8      	lsls	r0, r3, #31
 800e83e:	d405      	bmi.n	800e84c <_putc_r+0x24>
 800e840:	89a3      	ldrh	r3, [r4, #12]
 800e842:	0599      	lsls	r1, r3, #22
 800e844:	d402      	bmi.n	800e84c <_putc_r+0x24>
 800e846:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e848:	f7ff fb01 	bl	800de4e <__retarget_lock_acquire_recursive>
 800e84c:	68a3      	ldr	r3, [r4, #8]
 800e84e:	3b01      	subs	r3, #1
 800e850:	2b00      	cmp	r3, #0
 800e852:	60a3      	str	r3, [r4, #8]
 800e854:	da05      	bge.n	800e862 <_putc_r+0x3a>
 800e856:	69a2      	ldr	r2, [r4, #24]
 800e858:	4293      	cmp	r3, r2
 800e85a:	db12      	blt.n	800e882 <_putc_r+0x5a>
 800e85c:	b2eb      	uxtb	r3, r5
 800e85e:	2b0a      	cmp	r3, #10
 800e860:	d00f      	beq.n	800e882 <_putc_r+0x5a>
 800e862:	6823      	ldr	r3, [r4, #0]
 800e864:	1c5a      	adds	r2, r3, #1
 800e866:	6022      	str	r2, [r4, #0]
 800e868:	701d      	strb	r5, [r3, #0]
 800e86a:	b2ed      	uxtb	r5, r5
 800e86c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e86e:	07da      	lsls	r2, r3, #31
 800e870:	d405      	bmi.n	800e87e <_putc_r+0x56>
 800e872:	89a3      	ldrh	r3, [r4, #12]
 800e874:	059b      	lsls	r3, r3, #22
 800e876:	d402      	bmi.n	800e87e <_putc_r+0x56>
 800e878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e87a:	f7ff fae9 	bl	800de50 <__retarget_lock_release_recursive>
 800e87e:	4628      	mov	r0, r5
 800e880:	bd70      	pop	{r4, r5, r6, pc}
 800e882:	4629      	mov	r1, r5
 800e884:	4622      	mov	r2, r4
 800e886:	4630      	mov	r0, r6
 800e888:	f7ff f9bb 	bl	800dc02 <__swbuf_r>
 800e88c:	4605      	mov	r5, r0
 800e88e:	e7ed      	b.n	800e86c <_putc_r+0x44>

0800e890 <strchr>:
 800e890:	b2c9      	uxtb	r1, r1
 800e892:	4603      	mov	r3, r0
 800e894:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e898:	b11a      	cbz	r2, 800e8a2 <strchr+0x12>
 800e89a:	428a      	cmp	r2, r1
 800e89c:	d1f9      	bne.n	800e892 <strchr+0x2>
 800e89e:	4618      	mov	r0, r3
 800e8a0:	4770      	bx	lr
 800e8a2:	2900      	cmp	r1, #0
 800e8a4:	bf18      	it	ne
 800e8a6:	2300      	movne	r3, #0
 800e8a8:	e7f9      	b.n	800e89e <strchr+0xe>
	...

0800e8ac <_fstat_r>:
 800e8ac:	b538      	push	{r3, r4, r5, lr}
 800e8ae:	4d07      	ldr	r5, [pc, #28]	; (800e8cc <_fstat_r+0x20>)
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	4604      	mov	r4, r0
 800e8b4:	4608      	mov	r0, r1
 800e8b6:	4611      	mov	r1, r2
 800e8b8:	602b      	str	r3, [r5, #0]
 800e8ba:	f7f4 fde6 	bl	800348a <_fstat>
 800e8be:	1c43      	adds	r3, r0, #1
 800e8c0:	d102      	bne.n	800e8c8 <_fstat_r+0x1c>
 800e8c2:	682b      	ldr	r3, [r5, #0]
 800e8c4:	b103      	cbz	r3, 800e8c8 <_fstat_r+0x1c>
 800e8c6:	6023      	str	r3, [r4, #0]
 800e8c8:	bd38      	pop	{r3, r4, r5, pc}
 800e8ca:	bf00      	nop
 800e8cc:	20001a80 	.word	0x20001a80

0800e8d0 <_isatty_r>:
 800e8d0:	b538      	push	{r3, r4, r5, lr}
 800e8d2:	4d06      	ldr	r5, [pc, #24]	; (800e8ec <_isatty_r+0x1c>)
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	4608      	mov	r0, r1
 800e8da:	602b      	str	r3, [r5, #0]
 800e8dc:	f7f4 fde5 	bl	80034aa <_isatty>
 800e8e0:	1c43      	adds	r3, r0, #1
 800e8e2:	d102      	bne.n	800e8ea <_isatty_r+0x1a>
 800e8e4:	682b      	ldr	r3, [r5, #0]
 800e8e6:	b103      	cbz	r3, 800e8ea <_isatty_r+0x1a>
 800e8e8:	6023      	str	r3, [r4, #0]
 800e8ea:	bd38      	pop	{r3, r4, r5, pc}
 800e8ec:	20001a80 	.word	0x20001a80

0800e8f0 <_sbrk_r>:
 800e8f0:	b538      	push	{r3, r4, r5, lr}
 800e8f2:	4d06      	ldr	r5, [pc, #24]	; (800e90c <_sbrk_r+0x1c>)
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	4604      	mov	r4, r0
 800e8f8:	4608      	mov	r0, r1
 800e8fa:	602b      	str	r3, [r5, #0]
 800e8fc:	f7f4 fdee 	bl	80034dc <_sbrk>
 800e900:	1c43      	adds	r3, r0, #1
 800e902:	d102      	bne.n	800e90a <_sbrk_r+0x1a>
 800e904:	682b      	ldr	r3, [r5, #0]
 800e906:	b103      	cbz	r3, 800e90a <_sbrk_r+0x1a>
 800e908:	6023      	str	r3, [r4, #0]
 800e90a:	bd38      	pop	{r3, r4, r5, pc}
 800e90c:	20001a80 	.word	0x20001a80

0800e910 <_init>:
 800e910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e912:	bf00      	nop
 800e914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e916:	bc08      	pop	{r3}
 800e918:	469e      	mov	lr, r3
 800e91a:	4770      	bx	lr

0800e91c <_fini>:
 800e91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e91e:	bf00      	nop
 800e920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e922:	bc08      	pop	{r3}
 800e924:	469e      	mov	lr, r3
 800e926:	4770      	bx	lr
